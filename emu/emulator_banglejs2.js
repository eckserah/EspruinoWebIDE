// include: shell.js
// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(moduleArg) => Promise<Module>
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module != 'undefined' ? Module : {};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

// Attempt to auto-detect the environment
var ENVIRONMENT_IS_WEB = typeof window == 'object';
var ENVIRONMENT_IS_WORKER = typeof WorkerGlobalScope != 'undefined';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
var ENVIRONMENT_IS_NODE = typeof process == 'object' && typeof process.versions == 'object' && typeof process.versions.node == 'string' && process.type != 'renderer';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {

}

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)


// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {...Module};

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = (status, toThrow) => {
  throw toThrow;
};

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var readAsync, readBinary;

if (ENVIRONMENT_IS_NODE) {
  if (typeof process == 'undefined' || !process.release || process.release.name !== 'node') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  var nodeVersion = process.versions.node;
  var numericVersion = nodeVersion.split('.').slice(0, 3);
  numericVersion = (numericVersion[0] * 10000) + (numericVersion[1] * 100) + (numericVersion[2].split('-')[0] * 1);
  var minVersion = 160000;
  if (numericVersion < 160000) {
    throw new Error('This emscripten-generated code requires node v16.0.0 (detected v' + nodeVersion + ')');
  }

  // These modules will usually be used on Node.js. Load them eagerly to avoid
  // the complexity of lazy-loading.
  var fs = require('fs');
  var nodePath = require('path');

  scriptDirectory = __dirname + '/';

// include: node_shell_read.js
readBinary = (filename) => {
  // We need to re-wrap `file://` strings to URLs.
  filename = isFileURI(filename) ? new URL(filename) : filename;
  var ret = fs.readFileSync(filename);
  assert(Buffer.isBuffer(ret));
  return ret;
};

readAsync = async (filename, binary = true) => {
  // See the comment in the `readBinary` function.
  filename = isFileURI(filename) ? new URL(filename) : filename;
  var ret = fs.readFileSync(filename, binary ? undefined : 'utf8');
  assert(binary ? Buffer.isBuffer(ret) : typeof ret == 'string');
  return ret;
};
// end include: node_shell_read.js
  if (!Module['thisProgram'] && process.argv.length > 1) {
    thisProgram = process.argv[1].replace(/\\/g, '/');
  }

  arguments_ = process.argv.slice(2);

  if (typeof module != 'undefined') {
    module['exports'] = Module;
  }

  quit_ = (status, toThrow) => {
    process.exitCode = status;
    throw toThrow;
  };

} else
if (ENVIRONMENT_IS_SHELL) {

  if ((typeof process == 'object' && typeof require === 'function') || typeof window == 'object' || typeof WorkerGlobalScope != 'undefined') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document != 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  // If scriptDirectory contains a query (starting with ?) or a fragment (starting with #),
  // they are removed because they could contain a slash.
  if (scriptDirectory.startsWith('blob:')) {
    scriptDirectory = '';
  } else {
    scriptDirectory = scriptDirectory.slice(0, scriptDirectory.replace(/[?#].*/, '').lastIndexOf('/')+1);
  }

  if (!(typeof window == 'object' || typeof WorkerGlobalScope != 'undefined')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  {
// include: web_or_worker_shell_read.js
if (ENVIRONMENT_IS_WORKER) {
    readBinary = (url) => {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.responseType = 'arraybuffer';
      xhr.send(null);
      return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
    };
  }

  readAsync = async (url) => {
    // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
    // See https://github.com/github/fetch/pull/92#issuecomment-140665932
    // Cordova or Electron apps are typically loaded from a file:// url.
    // So use XHR on webview if URL is a file URL.
    if (isFileURI(url)) {
      return new Promise((resolve, reject) => {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = () => {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            resolve(xhr.response);
            return;
          }
          reject(xhr.status);
        };
        xhr.onerror = reject;
        xhr.send(null);
      });
    }
    var response = await fetch(url, { credentials: 'same-origin' });
    if (response.ok) {
      return response.arrayBuffer();
    }
    throw new Error(response.status + ' : ' + response.url);
  };
// end include: web_or_worker_shell_read.js
  }
} else
{
  throw new Error('environment detection error');
}

var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.error.bind(console);

// Merge back in the overrides
Object.assign(Module, moduleOverrides);
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used.
moduleOverrides = null;
checkIncomingModuleAPI();

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.

if (Module['arguments']) arguments_ = Module['arguments'];legacyModuleProp('arguments', 'arguments_');

if (Module['thisProgram']) thisProgram = Module['thisProgram'];legacyModuleProp('thisProgram', 'thisProgram');

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] == 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] == 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] == 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] == 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] == 'undefined', 'Module.read option was removed');
assert(typeof Module['readAsync'] == 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] == 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] == 'undefined', 'Module.setWindowTitle option was removed (modify emscripten_set_window_title in JS)');
assert(typeof Module['TOTAL_MEMORY'] == 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
legacyModuleProp('asm', 'wasmExports');
legacyModuleProp('readAsync', 'readAsync');
legacyModuleProp('readBinary', 'readBinary');
legacyModuleProp('setWindowTitle', 'setWindowTitle');
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var FETCHFS = 'FETCHFS is no longer included by default; build with -lfetchfs.js';
var ICASEFS = 'ICASEFS is no longer included by default; build with -licasefs.js';
var JSFILEFS = 'JSFILEFS is no longer included by default; build with -ljsfilefs.js';
var OPFS = 'OPFS is no longer included by default; build with -lopfs.js';

var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';

assert(!ENVIRONMENT_IS_SHELL, 'shell environment detected but not enabled at build time.  Add `shell` to `-sENVIRONMENT` to enable.');

// end include: shell.js

// include: preamble.js
// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary = Module['wasmBinary'];legacyModuleProp('wasmBinary', 'wasmBinary');

// include: wasm2js.js
// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  /** @constructor */
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  /** @constructor */
  Instance: function(module, info) {
    // TODO: use the module somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
function instantiate(info) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
    return uint8Array;
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 1024, "hNQB");
  base64DecodeToExistingUint8Array(bufferView, 1040, "MAAAAC5ib290MA==");
  base64DecodeToExistingUint8Array(bufferView, 1072, "CmV2YWwocmVxdWlyZSjRB1N0b3JhZ2UpLnJlYWQo0Q1ib290dXBkYXRlLmpzKSk72wIAAC5ib290Y2Rl");
  base64DecodeToExistingUint8Array(bufferView, 1152, "CqxzPXJlcXVpcmUo0QdTdG9yYWdlKS5yZWFkSlNPTijRDHNldHRpbmcuanNvbizUASmge307CqMoZ2xvYmFsLl9fRklMRV9fniFzLmNsb2NrSGFzV2lkZ2V0cyl7bG9hZCgpO7DRJUNsb2NrIGhhcyBubyB3aWRnZXRzLCBjYW4ndCBmYXN0IGxvYWQ7fQqsX2Nsa0FwcD1yZXF1aXJlKNEHU3RvcmFnZSkucmVhZChzLmNsb2NrKTsKoyghX2Nsa0FwcCl7X2Nsa0FwcD1yZXF1aXJlKNEHU3RvcmFnZSkubGlzdCgvXC5pbmZvJC8pLm1hcChmaWxlonuuYXBwPXJlcXVpcmUo0QdTdG9yYWdlKS5yZWFkSlNPTihmaWxlLNQBKTujKGFwcJ5hcHAudHlwZYrRBWNsb2NrKXurYXBwO319KS5maWx0ZXIoeKJ4KS5zb3J0KChhLGIpomEuc29ydG9yZGVyLWIuc29ydG9yZGVyKVvTXTujKF9jbGtBcHApe3MuY2xvY2s9X2Nsa0FwcC5zcmM7X2Nsa0FwcD1yZXF1aXJlKNEHU3RvcmFnZSkucmVhZChfY2xrQXBwLnNyYyk7cy5jbG9ja0hhc1dpZGdldHM9X2Nsa0FwcC5pbmNsdWRlcyjREkJhbmdsZS5sb2FkV2lkZ2V0cyk7cmVxdWlyZSjRB1N0b3JhZ2UpLndyaXRlSlNPTijRDHNldHRpbmcuanNvbixzKTt9fQq+czsKoyghX2Nsa0FwcClfY2xrQXBwPdF4RS5zaG93TWVzc2FnZSgiTm8gQ2xvY2sgRm91bmQiKTtzZXRXYXRjaCgoKT0+e0JhbmdsZS5zaG93TGF1bmNoZXIoKTt9LCBnbG9iYWwuQlROMnx8QlROLCB7cmVwZWF0OmZhbHNlLGVkZ2U6ImZhbGxpbmcifSk7OwpldmFsKF9jbGtBcHApOwq+X2Nsa0FwcDv//xwAAGJvb3R1cGRhdGUuanM=");
  base64DecodeToExistingUint8Array(bufferView, 1916, "");
  base64DecodeToExistingUint8Array(bufferView, 9372, "eyJpZCI6ImJvb3QiLCJuYW1lIjoiQm9vdGxvYWRlciIsInR5cGUiOiJib290bG9hZGVyIiwic29ydG9yZGVyIjotMTAsInZlcnNpb24iOiIwLjY1IiwidGFncyI6InRvb2wsc3lzdGVtIiwiZmlsZXMiOiJib290LmluZm8sLmJvb3QwLC5ib290Y2RlLGJvb3R1cGRhdGUuanMiLCJkYXRhIjoiLndpZGNhY2hlLC5jbGtpbmZvY2FjaGUiff//GRQAAGFudG9uY2xrLmFwcC5qcw==");
  base64DecodeToExistingUint8Array(bufferView, 9596, "CkdyYXBoaWNzLnByb3RvdHlwZS5zZXRGb250QW50b249qihzY2FsZSl7Zy5zZXRGb250Q3VzdG9tKNL8EA==");
  base64DecodeToExistingUint8Array(bufferView, 9682, "B/+AAAAAAAAAAB/+AAAAAAAAAAB/+AAAAAAAAAAB/+AAAAAAAAAAB/+AAAAAAAAAAB/+AAAAAAAAAAB/+AAAAAAAAAAB/+AAAAAAAAAAB/+AAAAAAAAAAB/+AAAAAAAAAAB/+AAAAAAAAAAB/+AAAAAAAAAAB/+AAAAAAAAAAB/+");
  base64DecodeToExistingUint8Array(bufferView, 9850, "OAAAAAAAAAAAD+AAAAAAAAAAA/+AAAAAAAAAAf/+AAAAAAAAAH//+AAAAAAAAB///+AAAAAAAA////+AAAAAAAP////+AAAAAAD/////+AAAAAA//////+AAAAAf//////+AAAAH///////+AAAB////////+AAA/////////+AAP/////////8AD/////////+AAD/////////gAAD////////4AAAD///////+AAAAD///////AAAAAD//////wAAAAAD/////8AAAAAAD////+AAAAAAAD////gAAAAAAAD///4AAAAAAAAD//+AAAAAAAAAD//AAAAAAAAAAD/wAAAAAAAAAAD8=");
  base64DecodeToExistingUint8Array(bufferView, 10125, "gA==");
  base64DecodeToExistingUint8Array(bufferView, 10156, "P/////8AAAAAH///////wAAAAf///////8AAAB/////////AAAD/////////gAAH/////////wAAP/////////4AAf/////////8AA//////////+AA//////////+AA//////////+AB///////////AB///////////AB///////////AB///////////AD//wAAAAAH//gD//AAAAAAB//gD/+AAAAAAA//gD/+AAAAAAA//gD/+AAAAAAA//gD//AAAAAAB//gD///////////gB///////////AB///////////AB///////////AB///////////AA//////////+AA//////////+AAf/////////8AAf/////////8AAP/////////4AAH/////////wAAD/////////gAAA////////+AAAAP///////4AAAAB///////g=");
  base64DecodeToExistingUint8Array(bufferView, 10535, "D/4AAAAAAAAAAD/4AAAAAAAAAAH/4AAAAAAAAAAH/4AAAAAAAAAAH/wAAAAAAAAAAP/wAAAAAAAAAAP/gAAAAAAAAAAf/AAAAAAAAAAA//////////4AB//////////4AD//////////4AP//////////4AP//////////4AP//////////4AP//////////4AP//////////4AP//////////4AP//////////4AP//////////4AP//////////4AP//////////4AP//////////4AP//////////4A==");
  base64DecodeToExistingUint8Array(bufferView, 10799, "B/+AAAAAf4AAA//+AAAAH/4AAD//+AAAAf/4AAP//+AAAB//4AAf//+AAAH//4AA///+AAAP//4AB///+AAA///4AD///+AAB///4AD///+AAD///4AH///+AAH///4AH///+AAf///4AH///+AA////4AP///+AB////4AP///+AH////4AP///+AP////4AP/8AAAf////4AP/4AAB/////4AP/4AAD/////4AP/4AAP///P/4AP/4AA///8P/4AP/8AP///4P/4AP///////wP/4AP///////AP/4AP//////+AP/4AH//////8AP/4AH//////4AP/4AH//////gAP/4AD//////AAP/4AD/////+AAP/4AB/////4AAP/4AA/////wAAP/4AAf////AAAP/4AAP///8AAAP/4AAD///wAAAP/4AAA///AAAAP/4AAAD/g==");
  base64DecodeToExistingUint8Array(bufferView, 11173, "H/4AAAAAP/AAAH//wAAAA//AAAH//8AAAD//AAAH///AAAH//AAAH///gAAP//AAAH///wAAf//AAAH///4AA///AAAH///4AA///AAAH///8AB///AAAH///8AB///AAAH///+AB///AAAH///+AD///AAAH///+AD///AAAH///+AD///D/8AB///AD//gD/8AAD//AD/+AD/8AAB//AD/+AH/+AAB//AD/+AH/+AAB//AD/+AP//AAD//AD//Af//wAH//AD//////////+AD//////////+AD//////////+AD//////////+AB//////////8AB//////////8AA//////////8AA//////////4AAf/////////wAAf///7/////gAAP///5/////AAAD///w////+AAAB///gf///4AAAAf/+AH///AAAAAA/gAAf/w==");
  base64DecodeToExistingUint8Array(bufferView, 11544, "D/wAAAAAAAAAA//wAAAAAAAAAP//wAAAAAAAAB///wAAAAAAAAf///wAAAAAAAH////wAAAAAAA/////wAAAAAAP/////wAAAAAB//////wAAAAAf//////wAAAAH///////wAAAA////////wAAAP////////wAAA///////H/wAAA//////wH/wAAA/////8AH/wAAA/////AAH/wAAA////gAAH/wAAA///4AAAH/wAAA//+AAAAH/wAAA///////////gA///////////gA///////////gA///////////gA///////////gA///////////gA///////////gA///////////gA///////////gA///////////gA///////////gA///////////gA///////////gA///////////gAAAAAAAAH/4AAAAAAAAAAH/wAAAAAAAAAAH/wAAAAAAAAAAH/w");
  base64DecodeToExistingUint8Array(bufferView, 11943, "B//8AAA/////+B///AAA/////+B///wAA/////+B///4AA/////+B///8AA/////+B///8AA/////+B///+AA/////+B////AA/////+B////AA/////+B////AA/////+B////gA/////+B////gA/////+B////gA/////+A////gA//gP/gAAB//wA//gf/AAAA//wA//gf/AAAAf/wA//g//AAAAf/wA//g//AAAA//wA//g//gAAA//wA//g//+AAP//wA//g////////gA//g////////gA//g////////gA//g////////gA//g////////AA//gf///////AA//gf//////+AA//gP//////+AA//gH//////8AA//gD//////4AA//gB//////wAA//gA//////AAAAAAAH////8AAAAAAAA////A==");
  base64DecodeToExistingUint8Array(bufferView, 12320, "A//////4AAAAAf///////gAAAB////////4AAAH////////+AAAf/////////AAA//////////gAB//////////wAB//////////4AD//////////4AD//////////4AH//////////8AH//////////8AH//////////8AH//////////8AH//////////+AP/8AA/+AAH/+AP/4AB/8AAD/+AP/4AB/8AAD/+AP/4AD/8AAD/+AP/4AD/+AAH/+AP/8AD//gA//+AP//8D//////+AH//+D//////8AH//+D//////8AH//+D//////8AH//+D//////8AD//+D//////4AD//+B//////4AB//+B//////wAB//+A//////gAA//+A//////AAAf/+Af////+AAAP/+AP////8AAAD/+AD////wAAAAf+AA///+AAAAAAAAAB//A=");
  base64DecodeToExistingUint8Array(bufferView, 12699, "//AAAAAAAAAAA//gAAAAAAAAAA//gAAAAAAAAAA//gAAAAAAADgA//gAAAAAAP/gA//gAAAAAH//gA//gAAAAB///gA//gAAAAP///gA//gAAAD////gA//gAAAf////gA//gAAB/////gA//gAAP/////gA//gAB//////gA//gAH//////gA//gA///////gA//gD///////gA//gf///////gA//h////////gA//n////////gA//////////gAA/////////AAAA////////wAAAA///////4AAAAA///////AAAAAA//////4AAAAAA//////AAAAAAA/////4AAAAAAA/////AAAAAAAA////8AAAAAAAA////gAAAAAAAA///+AAAAAAAAA///4AAAAAAAAA///AAAAAAAAAA//4AAAAAAAAAA/+");
  base64DecodeToExistingUint8Array(bufferView, 13080, "D//gB///wAAAAP//4H///+AAAA///8P////gAAB///+f////4AAD///+/////8AAH/////////+AAH//////////AAP//////////gAP//////////gAf//////////gAf//////////wAf//////////wAf//////////wA///////////wA//4D//wAB//4A//wB//gAA//4A//gA//gAAf/4A//gA//AAAf/4A//gA//gAAf/4A//wB//gAA//4A///P//8AH//4Af//////////wAf//////////wAf//////////wAf//////////wAf//////////gAP//////////gAP//////////AAH//////////AAD/////////+AAD///+/////8AAB///8f////wAAAf//4P////AAAAH//wD///8AAAAA/+AAf//A=");
  base64DecodeToExistingUint8Array(bufferView, 13461, "H//gAAAAAAAAB///+AA/+AAAAP////gA//wAAAf////wA//4AAB/////4A//8AAD/////8A//+AAD/////+A///AAH/////+A///AAP//////A///gAP//////A///gAf//////A///wAf//////A///wAf//////A///wAf//////A///wA///////AB//4A//4AD//AAP/4A//gAB//AAP/4A//gAA//AAP/4A//gAA/+AAP/4A//gAB/8AAP/4A//wAB/8AAf/4Af//////////wAf//////////wAf//////////wAf//////////wAf//////////wAP//////////gAP//////////gAH//////////AAH/////////+AAD/////////8AAB/////////4AAAf////////wAAAP////////AAAAB///////4AAAAAD/////w==");
  base64DecodeToExistingUint8Array(bufferView, 13841, "H/wAAf/AAAAAAP/wAA//AAAAAAP/wAA//AAAAAAP/wAA//AAAAAAP/wAA//AAAAAAP/wAA//AAAAAAP/wAA//AAAAAAP/wAA//AAAAAAP/wAA//AAAAAAP/wAA//AAAAAAP/wAA//AAAAAAP/wAA//AAAAAAP/wAA//AAAAAAP/wAA//");
  base64DecodeToExistingUint8Array(bufferView, 14005, "LNQuLNENEiAnGicnJycnJycnEyzUTisoc2NhbGWP1AgpKyjUAY/UECkpO307e61kcmF3VGltZW91dDutZHJhdz2qKCl7rHg9Zy5nZXRXaWR0aCgpL9QCO6x5PWcuZ2V0SGVpZ2h0KCkv1AI7Zy5yZXNldCgpLmNsZWFyUmVjdChCYW5nbGUuYXBwUmVjdCk7rGRhdGU9uERhdGUoKTusdGltZVN0cj1yZXF1aXJlKNEGbG9jYWxlKS50aW1lKGRhdGUs1AEpO2cuc2V0Rm9udEFsaWduKNMs0ykuc2V0Rm9udCjRBUFudG9uKS5kcmF3U3RyaW5nKHRpbWVTdHIseCx5KTusZGF0ZVN0cj1yZXF1aXJlKNEGbG9jYWxlKS5kYXRlKGRhdGUs0ykudG9VcHBlckNhc2UoKSvRAQorcmVxdWlyZSjRBmxvY2FsZSkuZG93KGRhdGUs0ykudG9VcHBlckNhc2UoKTtnLnNldEZvbnRBbGlnbijTLNMpLnNldEZvbnQo0QM2eDgs1AIpLmRyYXdTdHJpbmcoZGF0ZVN0cix4LHkr1DApO6MoZHJhd1RpbWVvdXQpY2xlYXJUaW1lb3V0KGRyYXdUaW1lb3V0KTtkcmF3VGltZW91dD1zZXRUaW1lb3V0KKooKXtkcmF3VGltZW91dD23O2RyYXcoKTt9LDYwMDAwLShEYXRlLm5vdygpJTYwMDAwKSk7fTtCYW5nbGUuc2V0VUkoe21vZGU60QVjbG9jayxyZW1vdmU6qigpe6MoZHJhd1RpbWVvdXQpY2xlYXJUaW1lb3V0KGRyYXdUaW1lb3V0KTtkcmF3VGltZW91dD23O75HcmFwaGljcy5wcm90b3R5cGUuc2V0Rm9udEFudG9uO319KTtCYW5nbGUubG9hZFdpZGdldHMoKTtkcmF3KCk7c2V0VGltZW91dChCYW5nbGUuZHJhd1dpZGdldHMs0yk7ff///0MCAABhbnRvbmNsay5pbWc=");
  base64DecodeToExistingUint8Array(bufferView, 14776, "MDAC//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////6v/q///+r6qqr///AP9Av//0DwAAC//5AP0Av//QDwAAC//AAMAAv/0ADwAAC//AAMAAtV0AD1VQD//BAMEAoA0AD//QD//vAO8AsA7wD//AH///AP8AoA/wD//AL///AP8Av//wD/8AP///AP8Av//wD/8Av///AP8Av//wD/0A////AP8Av//wD/wA////AP8Av//wD/wC////AP8AsV/wD/AD////AP8AoA/wD/AH////AP8AsA/wD/AL////AP8AoA/wD+AL////AP8Av//wD9AP////AP8Av//wD8AP////AP8Av//wD8AP////AP8Av//wD8Av////AP8A///wD4Av///////////////////////////////////62tr/66v/r56vv//6297//vv/+qvuv///r9v/6/v/rrq/v//66v//q+v/q66ub//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////7gAAABhbnRvbmNsay5pbmZv");
  base64DecodeToExistingUint8Array(bufferView, 15388, "eyJpZCI6ImFudG9uY2xrIiwibmFtZSI6IkFudG9uIENsb2NrIiwidHlwZSI6ImNsb2NrIiwic3JjIjoiYW50b25jbGsuYXBwLmpzIiwiaWNvbiI6ImFudG9uY2xrLmltZyIsInZlcnNpb24iOiIwLjExIiwidGFncyI6ImNsb2NrIiwiZmlsZXMiOiJhbnRvbmNsay5pbmZvLGFudG9uY2xrLmFwcC5qcyxhbnRvbmNsay5pbWcifZkrAABhYm91dC5hcHAuanM=");
  base64DecodeToExistingUint8Array(bufferView, 15604, "");
  base64DecodeToExistingUint8Array(bufferView, 26800, "MDCI/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+VVVVVVVVVVVV/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/lVVVVVVVVVVVVVV/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+VVVVVVVVVVVVVVVVVVVVVf7+/v7+/v7+/v4QEP7+/v7+/v7+/v7+/v7+/v7+/v5VVVVVVVVVVVVVVVVVVVVVVVX+/v7+/v7+/hAQEBD+/v7+/v7+/v7+/v7+/v7+/lVVVVVVVVVVVVVVVVVVVVVVVVVV/v7+/v7+/hAQEBD+/v7+/v7+/v7+/v7+/v7+VVVVVVVVVVVVVVVVVVVVVVVVVVVVVf7+/v7+/v4QEP7+/v7+/v7+/v7+/v7+/v5VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v5VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/lVVVVVVVVVVVVVVVVVVVXmjeVVVVVVVVVVV/v7+EBAQEBD+/v7+/v7+/v7+/v7+/lVVVVVVVVVVVVVVVVV5o87OznlVVVVVVVVV/v7+EBAQEBD+/v7+/v7+/v7+/v7+VVVVVVVVVVVVVVVVVXnIzs7Ozsd5VVVVVVVVVf7+EBAQEBD+/v7+/v7+/v7+/v7+VVVVVVVVVVVVVVV5o87Ozs7Ozs6jVVVVVVVVVf7+/v4QEBD+/v7+/v7+/v7+/v7+VVVVVVVVVVVVeaPOzs7Ozs7Ozs7Oo1VVVVVVVf7+/v4QEBD+/v7+/v7+/v7+/v7+VVVVVVVVVVWjyM7Ozs7Ozs7Ozs7OzlVVVVVVVf7+/v4QEBD+/v7+/v7+/v7+/v5VVVVVVVVVecfOzs7Ozs7Ozs7Ozs7OzlVVVVVVVVX+/v4QEBD+/v7+/v7+/v7+/v5VVVVVVVVVzs7Ozs7Ozs7Ozs7Ozs7OzlVVVVVVVVX+/v4QEBD+/v7+/v7+/v7+/v5VVVVVVVVVzs7OeXnOzs7Ozs55ec7OzlVVVVVVVVX+/v4QEBD+/v7+/v7+/v7+/v5VVVVVVVVVzs7OeXnOzs7Ozs55ec7OzlVVVVVVVVX+/v4QEBD+/v7+/v7+/v7+/v5VVVVVVVVVzs7Ozs7Ozs7Ozs7Ozs7OzlVVVVVVVVX+/v4QEBD+/v7+/v7+/v7+/v5VVVVVVVVVzs7Ozs7Ozs7Ozs7Ozs7OzlVVVVVVVVX+/v7+/v7+/v7+/v7+/v7+/v5VVVVVVVVVzs7Ozs7Ozs7Ozs7Ozs7OzlVVVVVVVVX+/v7+/v7+/v7+/v7+/v7+/v5VVVVVVVVVzc7Ozs7Ozs7Ozs7Ozs7OzlVVVVVVVVX+/v7+/v7+/v7+/v7+/v7+/v5VVVVVVVVVec7Ozs7Ozs7Ozs7Ozs7OeVVVVVVVVVX+/v7+/v7+/v7+/v7+/v7+/v5VVVVVVVVVT53Ozs7Ozs7Ozs7Ozs55T1VVVVVVVf7+/v7+/v7+/v7+/v7+/v7+/v7+VVVVVVVVT095x87Ozs7Ozs7Ox3lPT1VVVVX+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v5VVVVVT09PxsbHx83Nx8fGxk9PT1VVVf7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+VVVVT09PxsbGxsbGxsbGxk9PT1VV/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v5VVjMPx8bGxsbGxsbGxw8zVlX+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v5lZQ8PgMbGxsbGxsbGgA8PZWX+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+ZWVlZToPOc3GxsbGxsbNOQ86ZWVlZf7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v5lZWVlZToPD87Nx8bGx83ODw86ZWVlZWX+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/mVlZWVlZWUPD4HOzs7Ozs5dDw9lZWVlZWVl/v7+/v7+/v7+/v7+/v7+/v7+/v7+ZWVlZWVlZWU6Dw+kzs7OzqQPDzplZWVlZWVlZf7+/v7+/v7+/v7+/v7+/v7+/v7+ZWVlZWVlZWVlEA8PXc7OXQ8PEGVlZWVlZWVlZf7+/v7+/v7+/v7+/v7+/v7+/v5lZWVlZWVlZWVlQQ8PDw8PDw8QQWVlZWVlZWVlZWX+/v7+/v7+/v7+/v7+/v7+/v5lZWVlZWVlZWVlZWU6Dw8PDzplZWVlZWVlZWVlZWX+/v7+/v7+/v7+/v7+/v7+/mVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVl/v7+/v7+/v7+/v7+/v7+/mVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVl/v7+/v7+/v7+/v7+/v7+/mVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVl/v7+/v7+/v7+/v7+/v7+/mVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVl/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/qYAAABhYm91dC5pbmZv");
  base64DecodeToExistingUint8Array(bufferView, 29140, "eyJpZCI6ImFib3V0IiwibmFtZSI6IkFib3V0Iiwic3JjIjoiYWJvdXQuYXBwLmpzIiwiaWNvbiI6ImFib3V0LmltZyIsInNvcnRvcmRlciI6LTQsInZlcnNpb24iOiIwLjE1IiwidGFncyI6InRvb2wsc3lzdGVtIiwiZmlsZXMiOiJhYm91dC5pbmZvLGFib3V0LmFwcC5qcyxhYm91dC5pbWciff//CAEAAHdpZGxvY2sud2lkLmpz");
  base64DecodeToExistingUint8Array(bufferView, 29340, "QmFuZ2xlLm9uKNEEbG9jayyqKCl7V0lER0VUU1vRBGxvY2tdLndpZHRoPUJhbmdsZS5pc0xvY2tlZCgpP9QQOtQBO0JhbmdsZS5kcmF3V2lkZ2V0cygpO30pOwpXSURHRVRTW9EEbG9ja109e2FyZWE60QJ0bCxzb3J0b3JkZXI61Aosd2lkdGg6QmFuZ2xlLmlzTG9ja2VkKCk/1BA61AEsZHJhdzqqKHcpe6MoQmFuZ2xlLmlzTG9ja2VkKCkpZy5yZXNldCgpLmRyYXdJbWFnZSjRHw4QAR/g/8MDDAwwMMDH/7//+H/h/4f/P/z/8///3/4sdy54K9QBLHcueSvUBCk7fX07gQAAAHdpZGxvY2suaW5mbw==");
  base64DecodeToExistingUint8Array(bufferView, 29636, "eyJpZCI6IndpZGxvY2siLCJuYW1lIjoiTG9jayBXaWRnZXQiLCJ0eXBlIjoid2lkZ2V0IiwidmVyc2lvbiI6IjAuMDgiLCJ0YWdzIjoid2lkZ2V0LGxvY2siLCJmaWxlcyI6IndpZGxvY2suaW5mbyx3aWRsb2NrLndpZC5qcyJ9////NwMAAHdpZGJhdC53aWQuanM=");
  base64DecodeToExistingUint8Array(bufferView, 29800, "e0JhbmdsZS5vbijRCGNoYXJnaW5nLKooY2hhcmdpbmcpe6MoY2hhcmdpbmcpQmFuZ2xlLmJ1enooKTtXSURHRVRTW9EDYmF0XS5kcmF3KCk7Zy5mbGlwKCk7fSk7rWJhdHRlcnlJbnRlcnZhbD1CYW5nbGUuaXNMQ0RPbigpP3NldEludGVydmFsKCgpoldJREdFVFNb0QNiYXRdLmRyYXcoKSw2MDAwMCk6tztCYW5nbGUub24o0QhsY2RQb3dlciyqKG9uKXujKG9uKXtXSURHRVRTW9EDYmF0XS5kcmF3KCk7oyghYmF0dGVyeUludGVydmFsKWJhdHRlcnlJbnRlcnZhbD1zZXRJbnRlcnZhbCgoKaJXSURHRVRTW9EDYmF0XS5kcmF3KCksNjAwMDApO32ke6MoYmF0dGVyeUludGVydmFsKXtjbGVhckludGVydmFsKGJhdHRlcnlJbnRlcnZhbCk7YmF0dGVyeUludGVydmFsPbc7fX19KTtXSURHRVRTW9EDYmF0XT17YXJlYTrRAnRyLHdpZHRoOtQoLGRyYXc6qigpe6x4Pa8ueCx5Pa8ueTtnLnJlc2V0KCkuc2V0Q29sb3IoZy50aGVtZS5mZykuZmlsbFJlY3QoeCx5K9QCLHgr1CMseSvUFSkuY2xlYXJSZWN0KHgr1AIseSvUBCx4K9QhLHkr1BMpLmZpbGxSZWN0KHgr1CQseSvUCix4K9QnLHkr1A4pO6xiYXR0ZXJ5PUUuZ2V0QmF0dGVyeSgpO6MoYmF0dGVyeTzUFClnLnNldENvbG9yKNEEI2YwMCk7pKMoYmF0dGVyeTzUKClnLnNldENvbG9yKGcudGhlbWUuZGFyaz/RBCNmZjA60QQjZjgwKTukZy5zZXRDb2xvcijRBCMwZjApO2cuZmlsbFJlY3QoeCvUBCx5K9QGLHgr1AQrYmF0dGVyeSrUGy/UZCx5K9QRKTujKEJhbmdsZS5pc0NoYXJnaW5nKCkpZy5yZXNldCgpLmRyYXdJbWFnZSjRHRQKgQABwAAPAAD8AAfw+H/D/h8P4AA/AADwAAOALHgr1AgseSvUByk7fX07ff+KAAAAd2lkYmF0LmluZm8=");
  base64DecodeToExistingUint8Array(bufferView, 30656, "eyJpZCI6IndpZGJhdCIsIm5hbWUiOiJCYXR0ZXJ5IExldmVsIFdpZGdldCIsInR5cGUiOiJ3aWRnZXQiLCJ2ZXJzaW9uIjoiMC4xMiIsInRhZ3MiOiJ3aWRnZXQsYmF0dGVyeSIsImZpbGVzIjoid2lkYmF0LmluZm8sd2lkYmF0LndpZC5qcyJ9///DAQAAd2lkYnQud2lkLmpz");
  base64DecodeToExistingUint8Array(bufferView, 30828, "V0lER0VUU1vRCWJsdWV0b290aF09e2FyZWE60QJ0cix3aWR0aDrUDyxkcmF3OqooKXtnLnJlc2V0KCk7oyhOUkYuZ2V0U2VjdXJpdHlTdGF0dXMoKS5jb25uZWN0ZWQpe6MoZy5nZXRCZ0NvbG9yKCmL1B8pe2cuc2V0Q29sb3Io0QQjMGZmKTt9pHtnLnNldENvbG9yKChnLmdldEJQUCgpPtQIKT/RBCMwN2Y6KGcudGhlbWUuZGFyaz/RBCMwZmY60QQjMDBmKSk7fX2ke2cuc2V0Q29sb3IoZy50aGVtZS5kYXJrP9EEIzY2NjrRBCM5OTkpO31nLmRyYXdJbWFnZSjRHwsUAQYA4BYCYEeI2TGsHwHAOA+DWMmxGCMEwLAcAwAs1AIrry54LNQCK68ueSk7fSxjaGFuZ2VkOqooKXtXSURHRVRTW9EJYmx1ZXRvb3RoXS5kcmF3KCk7fX07TlJGLm9uKNEHY29ubmVjdCxXSURHRVRTW9EJYmx1ZXRvb3RoXS5jaGFuZ2VkKTtOUkYub24o0QpkaXNjb25uZWN0LFdJREdFVFNb0QlibHVldG9vdGhdLmNoYW5nZWQpO/+FAAAAd2lkYnQuaW5mbw==");
  base64DecodeToExistingUint8Array(bufferView, 31312, "eyJpZCI6IndpZGJ0IiwibmFtZSI6IkJsdWV0b290aCBXaWRnZXQiLCJ0eXBlIjoid2lkZ2V0IiwidmVyc2lvbiI6IjAuMDkiLCJ0YWdzIjoid2lkZ2V0LGJsdWV0b290aCIsImZpbGVzIjoid2lkYnQuaW5mbyx3aWRidC53aWQuanMiff///wEBAAB3aWRpZC53aWQuanM=");
  base64DecodeToExistingUint8Array(bufferView, 31480, "KCgponuqZHJhdygpe6xpZD1OUkYuZ2V0QWRkcmVzcygpLnN1YnN0cigpLnN1YnN0cijUDCkuc3BsaXQo0QE6KTtnLnJlc2V0KCkuc2V0Q29sb3IoZy50aGVtZS5kYXJrP9EEIzBmZjrRBCMwMGYpLnNldEZvbnQo0QM2eDgs1AEpO2cuZHJhd1N0cmluZyhpZFvTXSyvLngr1AIsry55K9QELLQpO2cuZHJhd1N0cmluZyhpZFvUAV0sry54K9QCLK8ueSvUDiy0KTt9V0lER0VUU1vRBXdpZGlkXT17YXJlYTrRAnRyLHdpZHRoOtQQLGRyYXc6ZHJhd307fSkoKTv///+KAAAAd2lkaWQuaW5mbw==");
  base64DecodeToExistingUint8Array(bufferView, 31772, "eyJpZCI6IndpZGlkIiwibmFtZSI6IkJsdWV0b290aCBJRCBXaWRnZXQiLCJ0eXBlIjoid2lkZ2V0IiwidmVyc2lvbiI6IjAuMDMiLCJ0YWdzIjoid2lkZ2V0LGFkZHJlc3MsbWFjIiwiZmlsZXMiOiJ3aWRpZC5pbmZvLHdpZGlkLndpZC5qcyJ9//+qAAAAd2VsY29tZS5ib290Lmpz");
  base64DecodeToExistingUint8Array(bufferView, 31944, "KKooKXutcz1yZXF1aXJlKNEHU3RvcmFnZSkucmVhZEpTT04o0Qx3ZWxjb21lLmpzb24s1AEpoHt9O6MoIXMud2VsY29tZWQpe3NldFRpbWVvdXQoKCmie3JlcXVpcmUo0QdTdG9yYWdlKS53cml0ZSjRDHdlbGNvbWUuanNvbix7d2VsY29tZWQ6tH0pbG9hZCjRDndlbGNvbWUuYXBwLmpzKX0pfX0pKCn//1wWAAB3ZWxjb21lLmFwcC5qcw==");
  base64DecodeToExistingUint8Array(bufferView, 32148, "CqphbmltYXRlKHNlcSxwZXJpb2Qpe6xjPWcuZ2V0Q29sb3IoKTusaT1zZXRJbnRlcnZhbCiqKCl7oyhzZXEubGVuZ3RoKXusZj1zZXEuc2hpZnQoKTtnLnNldENvbG9yKGMpO6MoZilmKCk7faRjbGVhckludGVydmFsKGkpO30scGVyaW9kKTt9CqpmYWRlKGNvbCxjYWxsYmFjayl7rG490zuqZigpe9EDcmFtZy5zZXRDb2xvcihjb2wpO6corGk9bjtpPNXwADtpltQKKWcuZHJhd0xpbmUoaSzTLNMsaSkuZHJhd0xpbmUoaSzV8AAs1fAALGkpO2cuZmxpcCgpO26YO6MobjzUCilzZXRUaW1lb3V0KGYs0yk7pGNhbGxiYWNrKCk7fWYoKTt9CqxTQ0VORV9DT1VOVD3UCjsKqmdldFNjZW5lKG4pe6MoborTKauqKCl7Zy5yZXNldCgpLnNldEJnQ29sb3Io0ykuY2xlYXJSZWN0KNMs0yzVsAAs1bAAKTtnLnNldEZvbnQo0QQ2eDE1KTusbj3TO6xsPUJhbmdsZS5nZXRMb2dvKCk7rGltPWcuaW1hZ2VNZXRyaWNzKGwpO6xpPXNldEludGVydmFsKKooKXtuljAuMTtnLnNldENvbG9yKG4sbixuKTtnLmRyYXdJbWFnZShsLCjVsAAtaW0ud2lkdGgpL9QCLCjVsAAtaW0uaGVpZ2h0KS/UAik7oyhukdQBKXtjbGVhckludGVydmFsKGkpO3NldFRpbWVvdXQoKCmiZy5kcmF3U3RyaW5nKNEET3BlbizULCzUaCks1fQBKTtzZXRUaW1lb3V0KCgpomcuZHJhd1N0cmluZyjRCEhhY2thYmxlLNQsLNR0KSzV6AMpO3NldFRpbWVvdXQoKCmiZy5kcmF3U3RyaW5nKNELU21hcnQgV2F0Y2gs1Cws1YAAKSzV3AUpO319LNQyKTt9O6MoborUASmrqigpe6xpbWc9cmVxdWlyZSjRCmhlYXRzaHJpbmspLmRlY29tcHJlc3Mo0nUDptR4n/j/4gH+8H5wl+jOukVVoHZ8dt/n//n37OtgH9sHhwHp4H5xmkGiH72MRje/LL/7iIAEE7sPEgoAC+AlagIlIiMQErPxDwUYxAABwIHCj8N7nOl3uEqa6BEggnFjfM5nCkUil3gEq5KDAAQmC6QmBE4JxSEhIABiQmB8QmSXoQlCYRMdEwIlCAAIlNhYlOiO85nNEyMPEoZwIAAcsYIYmPXoYlMiKaFExX/u9VEqLBBOYrCH+czmtVqJyDEpiaCOYsgSYszmc3qtTEqMR7hzG8AlGmd1OQglOOY6aEgYlCmmZoJMCTBrnD6SaIEoU/zOUuolSjbnBJgqaCEoU5zOXX4RyQYBBzCS4X5zNDqqZCJiERJg5zBEoVJEoM1JgYlQjhMHc4JLEmZMEEp6ZIJgPzS4WTmZMVTILmFYAK+BmglCmd1JgUYJiPNEorABEIOZygDBm5MCiJMQlhMH8ByBXwIlBJgUxJiMd5nOTIzlBTAK+BAANVq4jPAAS/HJgJyCTATAEACC/B4S/IJgIlCYAgAPiS/Kn5yEYANTEyPc5niOQxMB/LlCOapyJJgbpBYAZzROQK/Gl0ATIWfEoZzBc6IlB6SYGgBJBJgpzSlhyH8EAh5MBTIjnCuIlOjjlHTAJzC/LmDTSSYIEoTABOYIlETSKYHXwIABOYM0yYmETSCYHEobnDOYqaBExu8TAwlEc4U5EoiaCmK+NTAolFEwX0TQzBMXwXiEpTBCAAomNEoS+EEo4mIYIImKEoS+EEpDoBEyUbEo3gEo4mJdAImIJY4lJEycdEoPOOBYmPuIlE+HcJYhKKTZ1fhYkB2EAhnNcYMuEhomMr8A3YABEoJyB5gjOAAYmHm9VgELEoJMBEoXAEyXzE45YBJgXwEqx1I+ByDOYJyVJw5yCgEB3cQGgJMWJwQnCu6/CgFBigDB13S/glVAAf1qomCglEoADB1QDBADEPEoNVqEAolEgEKolKErJMDYAJMD0lE0AmaEoNaAgJMCFIYAahV/IgIiDOTgABNYJMEOToiCIoJMCOTzfCN4RMBOTxsDJIRyfIwZMBKQZzfJgRyfOYZMBOUBzCJgNKOT5zDJgLoCADxKBOAIABOT6aCAARyfOYRyjOYRyjOYlKEsBzEEsBzEOUJzDOUIABOUiaDOURzCOUZzCEscKCiYKTusaW09Zy5pbWFnZU1ldHJpY3MoaW1nKTtnLnJlc2V0KCk7Zy5zZXRCZ0NvbG9yKNEHI2ZmMDBmZik7rHk91bAALHNwZWVkPdQFO6piYWxsb29uKGNhbGxiYWNrKXt5l3NwZWVkO6x4PSjVsAAtaW0ud2lkdGgpL9QCO2cuZHJhd0ltYWdlKGltZyx4LHkpO2cuY2xlYXJSZWN0KHgseSvUUSx4K9RNLHkr1FErc3BlZWQpO6MoeT7UHilzZXRUaW1lb3V0KGJhbGxvb24s0yxjYWxsYmFjayk7pGNhbGxiYWNrKCk7fWZhZGUo0QcjZmYwMGZmLKooKXtiYWxsb29uKKooKXtnLnNldENvbG9yKNT/KS5zZXRGb250KNEGNngxNToyKS5zZXRGb250QWxpZ24o0yzTKTtnLmRyYXdTdHJpbmco0QhXZWxjb21lLizUWCzVggApO30pO30pO3NldFRpbWVvdXQoqigpe6xuPdM7rGk9c2V0SW50ZXJ2YWwoqigpe26W1AQ7Zy5zY3JvbGwo0yzU/Ck7oyhuPtWWACljbGVhckludGVydmFsKGkpO30s1BQpO30s1awNKTt9O6MoborUAimrqigpe2cucmVzZXQoKTtnLnNldEJnQ29sb3Io0QcjZmZmZjAwKS5zZXRDb2xvcijTKS5jbGVhcigpO2cuc2V0Rm9udCjRBTEyeDIwKS5zZXRGb250QWxpZ24o0yzTKTuseD3URix5PdQZLGg91Bk7YW5pbWF0ZShbKCmiZy5kcmF3U3RyaW5nKNEEWW91cix4LHmWaCksKCmiZy5kcmF3U3RyaW5nKNEJQmFuZ2xlLmpzLHgseZZoKSwoKaJnLmRyYXdTdHJpbmco0QdoYXMgb25lLHgseZZoKSwoKaJnLmRyYXdTdHJpbmco0QZidXR0b24seCx5lmgpLCgpontnLnNldEZvbnQo0QcxMngyMDoyKS5zZXRGb250QWxpZ24o0yzTLNQBKS5kcmF3U3RyaW5nKNEFSEVSRSEs1ZYALNRYKTt9XSzVyAApO307oyhuitQDKauqKCl7Zy5yZXNldCgpO2cuc2V0QmdDb2xvcijRByMwMGZmZmYpLnNldENvbG9yKNMpLmNsZWFyKCk7Zy5zZXRGb250QWxpZ24o0yzTKS5zZXRGb250KNEGNngxNToyKTtnLmRyYXdTdHJpbmco0QVQcmVzcyzUWCzUKCkuc2V0Rm9udEFsaWduKNMs1P8pO2cuc2V0Rm9udCjRBTEyeDIwKTtnLmRyYXdTdHJpbmco0SNUbyB3YWtlIHRoZQpzY3JlZW4gdXAsIG9yIHRvCnNlbGVjdCzUWCzUPCk7fTujKG6K1AQpq6ooKXtnLnJlc2V0KCk7Zy5zZXRCZ0NvbG9yKNEHIzAwZmZmZikuc2V0Q29sb3Io0ykuY2xlYXIoKTtnLnNldEZvbnRBbGlnbijTLNMpLnNldEZvbnQo0QY2eDE1OjIpO2cuZHJhd1N0cmluZyjRCkxvbmcgUHJlc3Ms1Fgs1CgpLnNldEZvbnRBbGlnbijTLNT/KTtnLnNldEZvbnQo0QUxMngyMCk7Zy5kcmF3U3RyaW5nKNEXVG8gZ28gYmFjayB0bwp0aGUgY2xvY2ss1Fgs1DwpO307oyhuitQFKauqKCl7Zy5yZXNldCgpO2cuc2V0QmdDb2xvcijRByNmZjAwMDApLnNldENvbG9yKNMpLmNsZWFyKCk7Zy5zZXRGb250QWxpZ24o0yzTKS5zZXRGb250KNEFMTJ4MjApO2cuZHJhd1N0cmluZyjRVklmIEJhbmdsZS5qcyBldmVyCnN0b3BzLCBob2xkIHRoZQpidXR0b24gZm9yCnRlbiBzZWNvbmRzLgoKQmFuZ2xlLmpzIHdpbGwKdGhlbiByZWJvb3QuLNRYLNROKTt9O6MoborUBimrqigpe2cucmVzZXQoKTtnLnNldEJnQ29sb3Io0QcjMDAwMGZmKS5zZXRDb2xvcijU/ykuY2xlYXIoKTtnLnNldEZvbnQo0QUxMngyMCkuc2V0Rm9udEFsaWduKNMs0yk7rHg91FgseT3U7CxoPdQ8O2FuaW1hdGUoWygpontnLmRyYXdTdHJpbmco0SBCYW5nbGUuanMgaGFzIGEKZnVsbCB0b3VjaHNjcmVlbix4LHmWaCk7fSzTLNMsKCmie2cuZHJhd1N0cmluZyjRLERyYWcgdXAgYW5kIGRvd24KdG8gc2Nyb2xsIGFuZAp0YXAgdG8gc2VsZWN0LHgseZZoKTt9LF0s1SwBKTt9O6MoborUBymrqigpe2cucmVzZXQoKTtnLnNldEJnQ29sb3Io0QcjMDBmZjAwKS5zZXRDb2xvcijTKS5jbGVhcigpO2cuc2V0Rm9udCjRBTEyeDIwKS5zZXRGb250QWxpZ24o0yzTKTuseD3UWCx5PdTdLGg91FA7YW5pbWF0ZShbKCmie2cuZHJhd1N0cmluZyjRKUJhbmdsZS5qcyBjb21lcwp3aXRoIGEgZmV3CmFwcHMgaW5zdGFsbGVkLHgseZZoKTt9LNMs0ywoKaJ7Zy5kcmF3U3RyaW5nKNEkVG8gYWRkIG1vcmUsIHZpc2l0CmJhbmdsZWpzLmNvbS9hcHBzLHgseZZoKTt9LF0s1ZABKTt9O6MoborUCCmrqigpe2cucmVzZXQoKTtnLnNldEJnQ29sb3Io0QcjZmYwMDAwKS5zZXRDb2xvcijTKS5jbGVhcigpO2cuc2V0Rm9udCjRBTEyeDIwKS5zZXRGb250QWxpZ24o0yzTKTuseD3UWDtnLmRyYXdTdHJpbmco0SBZb3UgY2FuIGFsc28gbWFrZQp5b3VyIG93biBhcHBzISx4LNQeKTtnLmRyYXdTdHJpbmco0RZDaGVjayBvdXQKYmFuZ2xlanMuY29tLHgs1YIAKTuscng90yxyeT3TO6pkcmF3KCl7cniWMC4xO3J5ljAuMTE7rHJjeD1NYXRoLmNvcyhyeCkscnN4PU1hdGguc2luKHJ4KSxyY3k9TWF0aC5jb3MocnkpLHJzeT1NYXRoLnNpbihyeSk7qnAoeCx5LHope6x0O3Q9eCpyY3kreipyc3k7ej16KnJjeS14KnJzeTt4PXQ7dD15KnJjeCt6KnJzeDt6PXoqcmN4LXkqcnN4O3k9dDt6ltQEO6tb1Fgr1DwqeC96LNROK9Q8Knkvel07faxhO6xzPdQeO2cuY2xlYXJSZWN0KNRYLXMs1E4tcyzUWCtzLNROK3MpO2E9cCjU/yzU/yzU/yk7Zy5tb3ZlVG8oYVvTXSxhW9QBXSk7YT1wKNQBLNT/LNT/KTtnLmxpbmVUbyhhW9NdLGFb1AFdKTthPXAo1AEs1AEs1P8pO2cubGluZVRvKGFb010sYVvUAV0pO2E9cCjU/yzUASzU/yk7Zy5saW5lVG8oYVvTXSxhW9QBXSk7YT1wKNT/LNT/LNT/KTtnLmxpbmVUbyhhW9NdLGFb1AFdKTthPXAo1P8s1P8s1AEpO2cubW92ZVRvKGFb010sYVvUAV0pO2E9cCjUASzU/yzUASk7Zy5saW5lVG8oYVvTXSxhW9QBXSk7YT1wKNQBLNQBLNQBKTtnLmxpbmVUbyhhW9NdLGFb1AFdKTthPXAo1P8s1AEs1AEpO2cubGluZVRvKGFb010sYVvUAV0pO2E9cCjU/yzU/yzUASk7Zy5saW5lVG8oYVvTXSxhW9QBXSk7YT1wKNT/LNT/LNT/KTtnLm1vdmVUbyhhW9NdLGFb1AFdKTthPXAo1P8s1P8s1AEpO2cubGluZVRvKGFb010sYVvUAV0pO2E9cCjUASzU/yzU/yk7Zy5tb3ZlVG8oYVvTXSxhW9QBXSk7YT1wKNQBLNT/LNQBKTtnLmxpbmVUbyhhW9NdLGFb1AFdKTthPXAo1AEs1AEs1P8pO2cubW92ZVRvKGFb010sYVvUAV0pO2E9cCjUASzUASzUASk7Zy5saW5lVG8oYVvTXSxhW9QBXSk7YT1wKNT/LNQBLNT/KTtnLm1vdmVUbyhhW9NdLGFb1AFdKTthPXAo1P8s1AEs1AEpO2cubGluZVRvKGFb010sYVvUAV0pO31zZXRJbnRlcnZhbChkcmF3LNQyKTt9O6MoborUCSmrqigpe2cucmVzZXQoKTtnLnNldEJnQ29sb3Io0QcjZmZmZmZmKTtnLmNsZWFyKCk7Zy5zZXRGb250QWxpZ24o0yzTKTtnLnNldEZvbnQo0QUxMngyMCk7rHg91FgseT3UCixoPdQVO2FuaW1hdGUoWygpomcuZHJhd1N0cmluZyjRClRoYXQncyBpdCEseCx5lmgpLCgpontnLmRyYXdTdHJpbmco0QVQcmVzcyx4LHmWaCrUAik7Zy5kcmF3U3RyaW5nKNEKdGhlIGJ1dHRvbix4LHmWaCk7Zy5kcmF3U3RyaW5nKNEIdG8gc3RhcnQseCx5lmgpO2cuZHJhd1N0cmluZyjRCUJhbmdsZS5qcyx4LHmWaCk7fV0s1ZABKTt9faxzY2VuZU51bWJlcj3TO6ptb3ZlKGRpcil7oyhkaXI+055zY2VuZU51bWJlcivUAYpTQ0VORV9DT1VOVCmrO3NjZW5lTnVtYmVyPShzY2VuZU51bWJlcitkaXIpJVNDRU5FX0NPVU5UO6Moc2NlbmVOdW1iZXI80ylzY2VuZU51bWJlcj3TO2NsZWFySW50ZXJ2YWwoKTtnZXRTY2VuZShzY2VuZU51bWJlcikoKTujKHNjZW5lTnVtYmVyPtQBKXusbD1TQ0VORV9DT1VOVDunKKxpPdM7aTxsLdQCO2mYKXuseD3UWCsoaS0obC3UAikv1AIpKtQMO6MoaTxzY2VuZU51bWJlci3UASl7Zy5zZXRDb2xvcijU/ykuZmlsbENpcmNsZSh4LNWmACzUBCk7faR7Zy5zZXRDb2xvcijTKS5maWxsQ2lyY2xlKHgs1aYALNQEKTtnLnNldENvbG9yKNT/KS5kcmF3Q2lyY2xlKHgs1aYALNQEKTt9fX2jKHNjZW5lTnVtYmVyPFNDRU5FX0NPVU5ULdQBKXNldFRpbWVvdXQoqigpe21vdmUo1AEpO30s1YgTKTt9QmFuZ2xlLm9uKNEFc3dpcGUsZGlyom1vdmUoZGlyKSk7c2V0V2F0Y2goKCmie6Moc2NlbmVOdW1iZXKKU0NFTkVfQ09VTlQt1AEpbG9hZCgpO6Rtb3ZlKNQBKTt9LEJUTjEse3JlcGVhdDq0fSk7QmFuZ2xlLnNldExDRFRpbWVvdXQo0yk7QmFuZ2xlLnNldExvY2tlZCjTKTtCYW5nbGUuc2V0TENEUG93ZXIo1AEpO21vdmUo0yk71gEAAHdlbGNvbWUuc2V0dGluZ3MuanM=");
  base64DecodeToExistingUint8Array(bufferView, 37904, "KKooYmFjayl7rXNldHRpbmdzPXJlcXVpcmUo0QdTdG9yYWdlKS5yZWFkSlNPTijRDHdlbGNvbWUuanNvbizUASmgcmVxdWlyZSjRB1N0b3JhZ2UpLnJlYWRKU09OKNEMc2V0dGluZy5qc29uLNQBKaB7fUUuc2hvd01lbnUoeycnOnvRBXRpdGxlOtELV2VsY29tZSBBcHB9LNENUnVuIG5leHQgYm9vdDp7dmFsdWU6IXNldHRpbmdzLndlbGNvbWVkLG9uY2hhbmdlOnaicmVxdWlyZSjRB1N0b3JhZ2UpLndyaXRlKNEMd2VsY29tZS5qc29uLHt3ZWxjb21lZDohdn0pLH0s0QdSdW4gTm93OigpomxvYWQo0Q53ZWxjb21lLmFwcC5qcyks0RNUdXJuIG9mZiAmIHJ1biBuZXh0OigpontyZXF1aXJlKNEHU3RvcmFnZSkud3JpdGUo0Qx3ZWxjb21lLmpzb24se3dlbGNvbWVkOrV9KTtCYW5nbGUuc2V0TG9ja2VkKLQpO6MoQmFuZ2xlLnNvZnRPZmYoKSlCYW5nbGUuc29mdE9mZigpO6RCYW5nbGUub2ZmKCk7fSzRBjwgQmFjazpiYWNrLH0pfSn//wQJAAB3ZWxjb21lLmltZw==");
  base64DecodeToExistingUint8Array(bufferView, 38408, "MDCI/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/szMzMzMzP7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7MzMzMzMzMzMzM/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+zMzMzc7W1tbWzs3MzMaWlrq6uv7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7MzMzO1tfWzs3MzMzMzMzAlpa6urq6uv7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7MzNXX1s3MzMzMzMzMzMzMupa6urq6urr+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/szMztfWzczMzMzMzMzMzMzMxpaWurq6urq6/v7+/v7+/v7+/v7+/v7+/v7+YVtbf8zN1tbNzMzMzMzMzMzMzMzMzLqWurq6urq6uv7+/v7+/v7+/v7+/v7+/mFhYVtbqczO187MzMzMzMzMzMzMzMzMzMCWurq6urq6uv7+/v7+/v7+/v7+/v7+YWGGq6yHzMzV1szMzMzMzMzMzMzMzMzMzMaWlrq6urq6uv7+/v7+/v7+/v7+/v5hYYfWq1tbzMzWzszMzMzMzMzMzMzMzMzMzMyWlrq6urq6urr+/v7+/v7+/v7+/mFhh9erYVtbzMzWzczMzMzMzMzMzMzMzMzMzMyWlrq6urq6urr+/v7+/v7+/v7+/mGG16xhYVtbzMzVzMzMzMzMzMzMzMzMzMzMzMaWlrq6urq6urr+/v7+/v7+/v7+YWGs14ZhYVtbqMzOzMzMzMzMzMzMzMzMzMzMzMCWurq6urq6urr+/v7+/v7+/v7+YYXWrGFhYVtbf8zMzczMzMzMzMzMzMzMzMzMzMCWurq6urq6urr+/v7+/v7+/v7+YYbXh2FhYVtbW8zMzMzMzMzMzMzMzMzMzMzMzJaWurq6urq6uv7+/v7+/v7+/v7+YYbXhmFhYVtbW6jMzMzMzMzMzMzMzMzMzMzMxpaWurq6urq6uv7+/v7+/v7+/v7+YYbXhmFhYWFbW3/MzMzMzMzMzMzMzMzMzMzMupa6urq6urq6uv7+/v7+/v7+/v7+YWGyhmFhYWFbW1vMzMzMzMzMzMzMzMzMzMzGlpa6urq6urq6/v7+/v7+/v7+/v7+/mGGq2FhYWFhW1t/zMzMzMzMzMzMzMzMzMy6lrq6urq6urr+/v7+/v7+/v7+/v7+/mFhq2FhYWFhW1tbqMzMzMzMzMzMzMzMzMCWlrq6urq6uv7+/v7+/v7+/v7+/v7+/v5hhoZhYWFhYVtbW8zMzMzMzMzMzMzMxpaWurq6urq6/v7+/v7+/v7+/v7+/v7+/v7+YWFhYWFhYWFbW1vMzMzMzMzMzMzGlpa6urq6urr+/v7+/v7+/v7+/v7+/v7+/v7+YWFhYWFhYWFbW1tbqMzMzMzMzMaWlpa6urq6/v7+/v7+/v7+/v7+/v7+/v7+/v7+/mFhYWFhYWFhW1tbW3/MzMzM/v66urq6uv7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+YWFhYWFhYVtbW/7GxsbG/paWlv7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/lthYWFhYWFb/v7GxsbG/paWlv7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+YWFhW1tbW/7+pKT+/p6Xlv7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/ltbW/7+iIj+/oiI/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/ltbXP7+iIj+/oiI/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v6BiP7+iIj+iIj+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v6IiP7+iIj+iIj+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+iIj+iIj+iIj+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+iIj+iIiIiP7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/oiIiIiIiP7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/oiIiIiIiP7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/oiIiIiI/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v6IiIiI/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v6IiIiI/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v6IiIiI/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+iIj+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/uEAAAB3ZWxjb21lLmluZm8=");
  base64DecodeToExistingUint8Array(bufferView, 40748, "eyJpZCI6IndlbGNvbWUiLCJuYW1lIjoiV2VsY29tZSIsInNyYyI6IndlbGNvbWUuYXBwLmpzIiwiaWNvbiI6IndlbGNvbWUuaW1nIiwidmVyc2lvbiI6IjAuMTQiLCJ0YWdzIjoic3RhcnQsd2VsY29tZSIsImZpbGVzIjoid2VsY29tZS5pbmZvLHdlbGNvbWUuYm9vdC5qcyx3ZWxjb21lLmFwcC5qcyx3ZWxjb21lLnNldHRpbmdzLmpzLHdlbGNvbWUuaW1nIiwiZGF0YSI6IndlbGNvbWUuanNvbiJ9////NgkAAG5vdGlmeQ==");
  base64DecodeToExistingUint8Array(bufferView, 41008, "rXBvcz3TLHNpemU90zsKrWlkPbY7Cq1oaWRlQ2FsbGJhY2s9tzsKrW92ZXJsYXlJbWFnZT23OwqqZml0V29yZHModGV4dCxyb3dzLHdpZHRoKXuud29yZHM9dGV4dC50cmltKCkuc3Vic3RyKNMscm93cyp3aWR0aCkuc3BsaXQoL1xzKy8pO61yb3c91AEsbGVuPdMsbGltaXQ9d2lkdGg7rXJlc3VsdD0iIjunKK13b3JkxndvcmRzKXujKChsZW4/bGVuK9QBOtMpK3dvcmQubGVuZ3RoPmxpbWl0KXujKHJvd5Fyb3dzKXtyZXN1bHSW0QMuLi47qDt9cmVzdWx0ltEBCjtsZW490ztyb3eYO6Mocm93i3Jvd3MpbGltaXSX1AM7fXJlc3VsdJYobGVuP9EBIDoiIikrd29yZDtsZW6WKGxlbj/UATrTKSt3b3JkLmxlbmd0aDt9q3Jlc3VsdDt9CmV4cG9ydHMuc2hvdz2qKG9wdGlvbnMpe29wdGlvbnM9b3B0aW9uc6B7fTujKG9wdGlvbnMub26LtylvcHRpb25zLm9uPbQ7aWQ9KNECaWS5b3B0aW9ucyk/b3B0aW9ucy5pZDq2O613PWcuZ2V0V2lkdGgoKTutdGV4dD1bXTtzaXplPW9wdGlvbnMuc2l6ZTujKG9wdGlvbnMuYm9keSl7rmJoPShzaXploNRQKS3UFCxtYXhSb3dzPU1hdGguZmxvb3IoKGJoLdQEKS/UCCksbWF4Q2hhcnM9TWF0aC5mbG9vcih3L9QGKS3UAjt0ZXh0PWZpdFdvcmRzKG9wdGlvbnMuYm9keSxtYXhSb3dzLG1heENoYXJzKTujKCFzaXplKXNpemU91BwrKHRleHQubWF0Y2goL1xuL2cpLmxlbmd0aCvUASkq1Ag7faRzaXplPdQUO6Moc2l6ZT7UUClzaXplPdRQO61nZz1HcmFwaGljcy5jcmVhdGVBcnJheUJ1ZmZlcih3LHNpemUs1BApO2dnLnNldEJnQ29sb3IoZy50aGVtZS5iZyk7b3ZlcmxheUltYWdlPXt3aWR0aDpnZy5nZXRXaWR0aCgpLGhlaWdodDpnZy5nZXRIZWlnaHQoKSxicHA61BAsYnVmZmVyOmdnLmJ1ZmZlcn07rXg90yx5PdMsaD1zaXplLGI9eStoLdQBLHI9eCt3LdQBO6Mob3B0aW9ucy5iZ0NvbG9yjbcpZ2cuc2V0QmdDb2xvcihvcHRpb25zLmJnQ29sb3IpO2dnLmNsZWFyUmVjdCh4LHkscixiKTujKG9wdGlvbnMudGl0bGWgb3B0aW9ucy5zcmMpe2dnLnNldENvbG9yKNEMdGl0bGVCZ0NvbG9yuW9wdGlvbnM/b3B0aW9ucy50aXRsZUJnQ29sb3I6Zy50aGVtZS5kYXJrP9QBOtXHOSkuZmlsbFJlY3QoeCx5LHIseSvUFCk7rnRpdGxlPW9wdGlvbnMudGl0bGWgb3B0aW9ucy5zcmM7Z2cuc2V0Q29sb3IoZy50aGVtZS5mZykuc2V0Rm9udEFsaWduKNT/LNT/LNMpLnNldEZvbnQo0QM2eDgs1AIpO2dnLmRyYXdTdHJpbmcodGl0bGUudHJpbSgpLnN1YnN0cmluZyjTLNQNKSx4K9QZLHkr1AMpO6Mob3B0aW9ucy50aXRsZZ5vcHRpb25zLnNyYyl7Z2cuc2V0Rm9udCjRAzZ4OCzUASkuc2V0Rm9udEFsaWduKNQBLNQBLNMpO2dnLmRyYXdTdHJpbmcob3B0aW9ucy5zcmMuc3Vic3RyaW5nKNMs1AopLGdnLmdldFdpZHRoKCkt1BcseSvUEik7fX15ltQUO2iX1BQ7oyhvcHRpb25zLmljb24pe61pPW9wdGlvbnMuaWNvbixpdztnZy5kcmF3SW1hZ2UoaSx4LHkr1AQpO6Mo0QZzdHJpbmeKv2kpaXc9aS5jaGFyQ29kZUF0KNMpO6Rpdz1pW9NdO3iWaXc7d5dpdzt9oyhvcHRpb25zLmJvZHkpe2dnLnNldENvbG9yKGcudGhlbWUuZmcpLnNldEZvbnQo0QM2eDgs1AEpLnNldEZvbnRBbGlnbijU/yzU/yzTKS5kcmF3U3RyaW5nKHRleHQseCvUBix5K9QEKTt9oyhvcHRpb25zLnJlbmRlcil7b3B0aW9ucy5yZW5kZXIoe3g6eCx5Onksdzp3LGg6aH0pO32jKG9wdGlvbnMub26eIShyZXF1aXJlKNEHU3RvcmFnZSkucmVhZEpTT04o0QxzZXR0aW5nLmpzb24s1AEpoHt9KS5xdWlldCl7QmFuZ2xlLnNldExDRFBvd2VyKNQBKTt9qmFuaW0oKXtwb3OX1AI7oyhwb3M8LXNpemUpe3Bvcz0tc2l6ZTt9QmFuZ2xlLnNldExDRE92ZXJsYXkob3ZlcmxheUltYWdlLNMsLShwb3Mrc2l6ZSkpO6MocG9zPi1zaXplKXNldFRpbWVvdXQoYW5pbSzUDyk7fWFuaW0oKTtCYW5nbGUub24o0QV0b3VjaCxleHBvcnRzLmhpZGUpO6Mob3B0aW9ucy5vbkhpZGUpaGlkZUNhbGxiYWNrPW9wdGlvbnMub25IaWRlO307CmV4cG9ydHMuaGlkZT2qKG9wdGlvbnMpe29wdGlvbnM9b3B0aW9uc6B7fTujKNECaWS5b3B0aW9uc55vcHRpb25zLmlkjWlkKas7oyhoaWRlQ2FsbGJhY2spaGlkZUNhbGxiYWNrKHtpZDppZH0pO2hpZGVDYWxsYmFjaz23O2lkPbY7QmFuZ2xlLnJlbW92ZUxpc3RlbmVyKNEFdG91Y2gsZXhwb3J0cy5oaWRlKTtFLnN0b3BFdmVudFByb3BhZ2F0aW9unkUuc3RvcEV2ZW50UHJvcGFnYXRpb24oKTuqYW5pbSgpe3Bvc5bUBDujKHBvcz7TKXtwb3M90ztvdmVybGF5SW1hZ2U9tztCYW5nbGUuc2V0TENET3ZlcmxheSgpO32kQmFuZ2xlLnNldExDRE92ZXJsYXkob3ZlcmxheUltYWdlLNMsLShwb3Mrc2l6ZSkpO6MocG9zPNMpc2V0VGltZW91dChhbmltLNQKKTt9YW5pbSgpO307//90AAAAbm90aWZ5LmluZm8=");
  base64DecodeToExistingUint8Array(bufferView, 43400, "eyJpZCI6Im5vdGlmeSIsIm5hbWUiOiJOb3RpZmljYXRpb25zIiwidHlwZSI6Im5vdGlmeSIsInZlcnNpb24iOiIwLjE0IiwidGFncyI6IndpZGdldCIsImZpbGVzIjoibm90aWZ5LmluZm8sbm90aWZ5In37EgAAaGVhbHRoLmFwcC5qcw==");
  base64DecodeToExistingUint8Array(bufferView, 43548, "rXNldHRpbmdzOwqubXlwcm9maWxlPXJlcXVpcmUo0QdTdG9yYWdlKS5yZWFkSlNPTijRDm15cHJvZmlsZS5qc29uLNQBKaB7fTsKqm1lbnVNYWluKCl7RS5zaG93TWVudSh7IiI6e3RpdGxlOtEPSGVhbHRoIFRyYWNraW5nfSzRBjwgQmFjazooKaJsb2FkKCks0Q1TdGVwIENvdW50aW5nOigpom1lbnVTdGVwQ291bnQoKSzRCE1vdmVtZW50Oigpom1lbnVNb3ZlbWVudCgpLNEKSGVhcnQgUmF0ZTooKaJtZW51SFJNKCks0QdCYXR0ZXJ5Oigpom1lbnVCYXR0ZXJ5KCks0QtUZW1wZXJhdHVyZTooKaJtZW51VGVtcGVyYXR1cmUoKSzRCFNldHRpbmdzOigpomV2YWwocmVxdWlyZSjRB1N0b3JhZ2UpLnJlYWQo0RJoZWFsdGguc2V0dGluZ3MuanMpKSgoKaJ7bG9hZFNldHRpbmdzKCk7bWVudU1haW4oKTt9KX0pO30Kqm1lbnVTdGVwQ291bnQoKXuubWVudT17IiI6e3RpdGxlOtEFU3RlcHN9LNEGPCBCYWNrOigpom1lbnVNYWluKCks0QhwZXIgaG91cjooKaJzaG93R3JhcGgoe2lkOtEMc3RlcHNQZXJIb3VyLHJhbmdlOtEEaG91cixmaWVsZDrRBXN0ZXBzLGJhY2s6bWVudVN0ZXBDb3VudH0pLNEHcGVyIGRheTooKaJ7c2hvd0dyYXBoKHtpZDrRDHN0ZXBzUGVySG91cixyYW5nZTrRA2RheSxmaWVsZDrRBXN0ZXBzLGJhY2s6bWVudVN0ZXBDb3VudH0pZHJhd0hvcml6b250YWxMaW5lKHNldHRpbmdzLnN0ZXBHb2FsKTt9fTujKG15cHJvZmlsZS5zdHJpZGVMZW5ndGgpe21lbnVb0QhkaXN0YW5jZV09KCmibWVudURpc3RhbmNlKCk7fUUuc2hvd01lbnUobWVudSk7fQqqbWVudURpc3RhbmNlKCl7rmRpc3RNdWx0PdQBKnJlcXVpcmUo0QZsb2NhbGUpLmRpc3RhbmNlKG15cHJvZmlsZS5zdHJpZGVMZW5ndGgs1AIpO0Uuc2hvd01lbnUoeyIiOnt0aXRsZTrRCERpc3RhbmNlfSzRBjwgQmFjazooKaJtZW51U3RlcENvdW50KCks0QhwZXIgaG91cjooKaJzaG93R3JhcGgoe2lkOtEMc3RlcHNQZXJIb3VyLHJhbmdlOtEEaG91cixmaWVsZDrRBXN0ZXBzLG11bHQ6ZGlzdE11bHQsYmFjazptZW51RGlzdGFuY2V9KSzRB3BlciBkYXk6KCmie3Nob3dHcmFwaCh7aWQ60QtzdGVwc1BlckRheSxyYW5nZTrRA2RheSxmaWVsZDrRBXN0ZXBzLG11bHQ6ZGlzdE11bHQsYmFjazptZW51RGlzdGFuY2V9KWRyYXdIb3Jpem9udGFsTGluZShzZXR0aW5ncy5zdGVwR29hbCooZGlzdE11bHSg1AEpKTt9fSk7fQqqbWVudU1vdmVtZW50KCl7RS5zaG93TWVudSh7IiI6e3RpdGxlOtEITW92ZW1lbnR9LNEGPCBCYWNrOigpom1lbnVNYWluKCks0QhwZXIgaG91cjooKaJzaG93R3JhcGgoe2lkOtEPbW92ZW1lbnRQZXJIb3VyLHJhbmdlOtEEaG91cixmaWVsZDrRCG1vdmVtZW50LGF2ZXJhZ2U6tCxiYWNrOm1lbnVNb3ZlbWVudH0pLNEHcGVyIGRheTooKaJzaG93R3JhcGgoe2lkOtEObW92ZW1lbnRQZXJEYXkscmFuZ2U60QNkYXksZmllbGQ60Qhtb3ZlbWVudCxhdmVyYWdlOrQsYmFjazptZW51TW92ZW1lbnR9KSx9KTt9CqptZW51SFJNKCl7RS5zaG93TWVudSh7IiI6e3RpdGxlOtEKSGVhcnQgUmF0ZX0s0QY8IEJhY2s6KCmibWVudU1haW4oKSzRCHBlciBob3VyOigponNob3dHcmFwaCh7aWQ60Qpocm1QZXJIb3VyLHJhbmdlOtEEaG91cixmaWVsZDrRA2JwbSxpZ25vcmVaZXJvOrQsYXZlcmFnZTq0LGJhY2s6bWVudUhSTX0pLNEHcGVyIGRheTooKaJzaG93R3JhcGgoe2lkOtEJaHJtUGVyRGF5LHJhbmdlOtEDZGF5LGZpZWxkOtEDYnBtLGlnbm9yZVplcm86tCxhdmVyYWdlOrQsYmFjazptZW51SFJNfSksfSk7fQqqbWVudUJhdHRlcnkoKXtFLnNob3dNZW51KHsiIjp7dGl0bGU60QdCYXR0ZXJ5fSzRBjwgQmFjazooKaJtZW51TWFpbigpLNEIcGVyIGhvdXI6KCmic2hvd0dyYXBoKHtpZDrRCmJhdFBlckhvdXIscmFuZ2U60QRob3VyLGZpZWxkOtEHYmF0dGVyeSxhdmVyYWdlOrQsYmFjazptZW51QmF0dGVyeX0pLNEHcGVyIGRheTooKaJzaG93R3JhcGgoe2lkOtEJYmF0UGVyRGF5LHJhbmdlOtEDZGF5LGZpZWxkOtEHYmF0dGVyeSxhdmVyYWdlOrQsYmFjazptZW51QmF0dGVyeX0pLH0pO30Kqm1lbnVUZW1wZXJhdHVyZSgpe0Uuc2hvd01lbnUoeyIiOnt0aXRsZTrRC1RlbXBlcmF0dXJlfSzRBjwgQmFjazooKaJtZW51TWFpbigpLNEIcGVyIGhvdXI6KCmic2hvd0dyYXBoKHtpZDrRCmJhdFBlckhvdXIscmFuZ2U60QRob3VyLGZpZWxkOtELdGVtcGVyYXR1cmUsYXZlcmFnZTq0LGJhY2s6bWVudVRlbXBlcmF0dXJlfSks0QdwZXIgZGF5OigponNob3dHcmFwaCh7aWQ60QliYXRQZXJEYXkscmFuZ2U60QNkYXksZmllbGQ60Qt0ZW1wZXJhdHVyZSxhdmVyYWdlOrQsYmFjazptZW51VGVtcGVyYXR1cmV9KSx9KTt9CqpzaG93R3JhcGgob3B0aW9ucyl7RS5zaG93TWVzc2FnZSjRCkxvYWRpbmcuLi4pO2N1cnJlbnRfc2VsZWN0aW9uPW9wdGlvbnMuaWQ7rGRhdGEsY250LHRpdGxlO6Mob3B0aW9ucy5yYW5nZYrRBGhvdXIpe3RpdGxlPdEESE9VUjtkYXRhPbhVaW50MTZBcnJheSjUGCk7Y250PbhVaW50OEFycmF5KNQYKTtyZXF1aXJlKNEGaGVhbHRoKS5yZWFkRGF5KLhEYXRlKCksaKJ7ZGF0YVtoLmhyXZZoW29wdGlvbnMuZmllbGRdO6MoIW9wdGlvbnMuaWdub3JlWmVyb6BoW29wdGlvbnMuZmllbGRdKWNudFtoLmhyXZg7fSk7faSjKG9wdGlvbnMucmFuZ2WK0QNkYXkpe3RpdGxlPdEDREFZO6xkYXRhPbhVaW50MTZBcnJheSjUICk7rGNudD24VWludDhBcnJheSjUICk7cmVxdWlyZSjRBmhlYWx0aCkucmVhZERhaWx5U3VtbWFyaWVzKLhEYXRlKCksaKJ7ZGF0YVtoLmRheV2WaFtvcHRpb25zLmZpZWxkXTujKCFvcHRpb25zLmlnbm9yZVplcm+gaFtvcHRpb25zLmZpZWxkXSljbnRbaC5kYXldmDt9KTusZGF5PSi4RGF0ZSgpKS5nZXREYXRlKCk7oyhkYXRhW2RheV2L0yl7ZGF0YVtkYXldPUJhbmdsZS5nZXRIZWFsdGhTdGF0dXMo0QNkYXkpW29wdGlvbnMuZmllbGRdO6MoIW9wdGlvbnMuaWdub3JlWmVyb6BkYXRhW2RheV0pY250W2RheV2YO319pLC4RXJyb3Io0Q1Vbmtub3duIHJhbmdlKTujKG9wdGlvbnMuYXZlcmFnZSlkYXRhLmZvckVhY2goKGQsaSmiZGF0YVtpXT1kL2NudFtpXSswLjUpO6Mob3B0aW9ucy5tdWx0jbcpe2RhdGEuZm9yRWFjaCgoZCxpKaJkYXRhW2ldPWQqb3B0aW9ucy5tdWx0KzAuNSk7fXNldEJ1dHRvbihvcHRpb25zLmJhY2ssb3B0aW9ucy5tdWx0KTtiYXJDaGFydCh0aXRsZSxkYXRhLG9wdGlvbnMubXVsdCk7fQqudz1nLmdldFdpZHRoKCk7Cq5oPWcuZ2V0SGVpZ2h0KCk7Cq5iYXJfYm90PdWMADsKrGRhdGFfbGVuOwqsY2hhcnRfaW5kZXg7CqxjaGFydF9tYXhfZGF0dW07CqxjaGFydF9sYWJlbDsKrGNoYXJ0X2RhdGE7CqxjdXJyZW50X3NlbGVjdGlvbjsKqm1heChhcnIpe6xtPS1JbmZpbml0eTunKKxpPdM7aTxhcnIubGVuZ3RoO2mYKaMoYXJyW2ldPm0pbT1hcnJbaV07q207fQqqZ2V0X2RhdGFfbGVuZ3RoKGFycil7rG5sZW49YXJyLmxlbmd0aDunKKxpPWFyci5sZW5ndGgt1AE7aT7TnmFycltpXYrTO2mZKW5sZW6ZO6tubGVuO30KqmJhckNoYXJ0KGxhYmVsLGR0KXtkYXRhX2xlbj1nZXRfZGF0YV9sZW5ndGgoZHQpO2NoYXJ0X2luZGV4PU1hdGgubWF4KGRhdGFfbGVuLdQFLNT7KTtjaGFydF9tYXhfZGF0dW09bWF4KGR0KTtjaGFydF9sYWJlbD1sYWJlbDtjaGFydF9kYXRhPWR0O2RyYXdCYXJDaGFydCgpO30KqmRyYXdCYXJDaGFydCgpe65iYXJfd2lkdGg9KHct1AIpL9QJO6xiYXJfdG9wO6xiYXI7Zy5yZXNldCgpLmNsZWFyUmVjdCjTLNQYLHcsaCk7pyhiYXI91AE7YmFyPNQKO2Jhcpgpe6MoYmFyitQFKXtnLnNldEZvbnQo0QM2eDgs1AIpLnNldEZvbnRBbGlnbijTLNT/KS5zZXRDb2xvcihnLnRoZW1lLmZnKTtnLmRyYXdTdHJpbmcoY2hhcnRfbGFiZWwr0QEgKyhjaGFydF9pbmRleCtiYXIt1AEpK9EDICAgK2NoYXJ0X2RhdGFbY2hhcnRfaW5kZXgrYmFyLdQBXSxnLmdldFdpZHRoKCkv1AIs1ZYAKTtnLnNldENvbG9yKNEEIzAwZik7faR7Zy5zZXRDb2xvcijRBCMwZmYpO32jKChjaGFydF9pbmRleCtiYXIt1AEpkdOeKGNoYXJ0X2luZGV4K2Jhci3UASk8ZGF0YV9sZW6eY2hhcnRfbWF4X2RhdHVtPtMpYmFyX3RvcD1iYXJfYm90LdRkKihjaGFydF9kYXRhW2NoYXJ0X2luZGV4K2Jhci3UAV0pL2NoYXJ0X21heF9kYXR1bTukYmFyX3RvcD1iYXJfYm90O2cuZmlsbFJlY3Qo1AErKGJhci3UASkqYmFyX3dpZHRoLGJhcl9ib3Qs1AErYmFyKmJhcl93aWR0aCxiYXJfdG9wKTtnLnNldENvbG9yKGcudGhlbWUuZmcpLmRyYXdSZWN0KNQBKyhiYXIt1AEpKmJhcl93aWR0aCxiYXJfYm90LNQBK2JhcipiYXJfd2lkdGgsYmFyX3RvcCk7fX0KqmRyYXdIb3Jpem9udGFsTGluZSh2YWx1ZSl7rnRvcD1iYXJfYm90LdRkKnZhbHVlL2NoYXJ0X21heF9kYXR1bTtnLnNldENvbG9yKGcudGhlbWUuZmcpLmRyYXdMaW5lKNMsdG9wLGcuZ2V0V2lkdGgoKSx0b3ApO30KqnNldEJ1dHRvbihmbixtdWx0KXtCYW5nbGUuc2V0VUkoe21vZGU60QZjdXN0b20sYmFjazpmbixzd2lwZToobHIsdWQponujKGxyitQBKXtjaGFydF9pbmRleD1NYXRoLm1heCgoY2hhcnRfbGFiZWyK0QNEQVkpP9T9OtT8LGNoYXJ0X2luZGV4LdQBKTt9pKMobHI80yl7Y2hhcnRfaW5kZXg9TWF0aC5taW4oZGF0YV9sZW4t1AUsY2hhcnRfaW5kZXgr1AEpO32ke6tmbigpO31kcmF3QmFyQ2hhcnQoKTujKGN1cnJlbnRfc2VsZWN0aW9uitELc3RlcHNQZXJEYXkpe2RyYXdIb3Jpem9udGFsTGluZShzZXR0aW5ncy5zdGVwR29hbCoobXVsdKDUASkpO319fSk7fQqqbG9hZFNldHRpbmdzKCl7c2V0dGluZ3M9cmVxdWlyZSjRB1N0b3JhZ2UpLnJlYWRKU09OKNELaGVhbHRoLmpzb24s1AEpoHt9O30KQmFuZ2xlLmxvYWRXaWRnZXRzKCk7CkJhbmdsZS5kcmF3V2lkZ2V0cygpOwpsb2FkU2V0dGluZ3MoKTsKbWVudU1haW4oKTv/TAIAAGhlYWx0aC5pbWc=");
  base64DecodeToExistingUint8Array(bufferView, 48440, "MDDCAP//4Pn//zv/");
  base64DecodeToExistingUint8Array(bufferView, 48538, "AVVQAAAFVUAAAAAAFVVVAABVVVQAAAAAVVVVQAFVVVoAAAABVVVVUAVVVWqAAAAFVVVVVBVVVeqgAAAVVVVVVVVVV6q0AAAVVVVVVVVVXqrUAABVVVVVVVVVeqtVAABVVVVVVVVV6q1VAABVVXrVVVVXqrVVAABVVWq1VVVeqtVVAABVVWqtVVV6q1VVAABVVXqrVVXqrVVVAABVVV6q1VeqtVVVAAAVVVeqtV6q1VVUAAAVVVXqrXqrVVVUAAAFVVV6q+qtVVVQAAABVVVeqqq1VVVAAAAAVVVXqqrVVVUAAAAAFVVV6qtVVVQAAAAABVVVeq1VVVAAAAAAAVVVXrVVVUAAAAAAAFVVV9VVVQAAAAAAABVVVVVVVAAAAAAAAAVVVVVVUAAAAAAAAAFVVVVVQAAAAAAAAABVVVVVAAAAAAAAAAAVVVVUAAAAAAAAAAAFVVVQAAAAAAAAAAABVVVA");
  base64DecodeToExistingUint8Array(bufferView, 48901, "VVU=");
  base64DecodeToExistingUint8Array(bufferView, 48913, "FVQ=");
  base64DecodeToExistingUint8Array(bufferView, 48925, "BVA=");
  base64DecodeToExistingUint8Array(bufferView, 48937, "AUA=");
  base64DecodeToExistingUint8Array(bufferView, 49028, "ZggAAGhlYWx0aC5ib290Lmpz");
  base64DecodeToExistingUint8Array(bufferView, 49060, "KGZ1bmN0aW9uKCl7dmFyIGE9MHwocmVxdWlyZSgiU3RvcmFnZSIpLnJlYWRKU09OKCJoZWFsdGguanNvbiIsMSl8fHt9KS5ocm07aWYoMT09YXx8Mj09YSl7ZnVuY3Rpb24gYygpe0JhbmdsZS5zZXRIUk1Qb3dlcigxLCJoZWFsdGgiKTtzZXRUaW1lb3V0KCgpPT5CYW5nbGUuc2V0SFJNUG93ZXIoMCwiaGVhbHRoIiksNkU0KmEpO2lmKDE9PWEpe2Z1bmN0aW9uIGIoKXtCYW5nbGUuc2V0SFJNUG93ZXIoMSwiaGVhbHRoIik7c2V0VGltZW91dCgoKT0+e0JhbmdsZS5zZXRIUk1Qb3dlcigwLCJoZWFsdGgiKX0sNkU0KX1zZXRUaW1lb3V0KGIsMkU1KTtzZXRUaW1lb3V0KGIsNEU1KX19QmFuZ2xlLm9uKCJoZWFsdGgiLGMpO0JhbmdsZS5vbigiSFJNIixiPT57OTA8Yi5jb25maWRlbmNlJiYxPk1hdGguYWJzKEJhbmdsZS5nZXRIZWFsdGhTdGF0dXMoKS5icG0tYi5icG0pJiZCYW5nbGUuc2V0SFJNUG93ZXIoMCwiaGVhbHRoIil9KTs5MDxCYW5nbGUuZ2V0SGVhbHRoU3RhdHVzKCkuYnBtQ29uZmlkZW5jZXx8CmMoKX1lbHNlIEJhbmdsZS5zZXRIUk1Qb3dlcighIWEsImhlYWx0aCIpfSkoKTtCYW5nbGUub24oImhlYWx0aCIsYT0+eyhCYW5nbGUuZ2V0UHJlc3N1cmU/QmFuZ2xlLmdldFByZXNzdXJlKCk6UHJvbWlzZS5yZXNvbHZlKHt9KSkudGhlbihjPT57T2JqZWN0LmFzc2lnbihhLGMpO2M9bmV3IERhdGUoRGF0ZS5ub3coKS01OUU0KTtpZihhJiYwPGEuc3RlcHMpe3ZhciBiPXJlcXVpcmUoIlN0b3JhZ2UiKS5yZWFkSlNPTigiaGVhbHRoLmpzb24iLDEpfHx7fSxkPUJhbmdsZS5nZXRIZWFsdGhTdGF0dXMoImRheSIpLnN0ZXBzO2Iuc3RlcEdvYWxOb3RpZmljYXRpb24mJjA8Yi5zdGVwR29hbCYmZD49Yi5zdGVwR29hbCYmKGQ9KG5ldyBEYXRlKERhdGUubm93KCkpKS50b0lTT1N0cmluZygpLnNwbGl0KCJUIilbMF0sIWIuc3RlcEdvYWxOb3RpZmljYXRpb25EYXRlfHxiLnN0ZXBHb2FsTm90aWZpY2F0aW9uRGF0ZTxkKSYmKEJhbmdsZS5idXp6KDIwMCwuNSkscmVxdWlyZSgibm90aWZ5Iikuc2hvdyh7dGl0bGU6Yi5zdGVwR29hbCsKIiBzdGVwcyIsYm9keToiWW91IHJlYWNoZWQgeW91ciBzdGVwIGdvYWwhIixpY29uOmF0b2IoIkRBeUJBQm1ENkJhQk1Bc0E4QkNCQ0JDQkNBOEFBQT09Iil9KSxiLnN0ZXBHb2FsTm90aWZpY2F0aW9uRGF0ZT1kLHJlcXVpcmUoIlN0b3JhZ2UiKS53cml0ZUpTT04oImhlYWx0aC5qc29uIixiKSl9dmFyIGc9ZnVuY3Rpb24oZil7cmV0dXJuIDE0NSooZi5nZXREYXRlKCktMSkrNipmLmdldEhvdXJzKCkrKDB8NipmLmdldE1pbnV0ZXMoKS82MCl9KGMpO2M9ZnVuY3Rpb24oZil7cmV0dXJuImhlYWx0aC0iK2YuZ2V0RnVsbFllYXIoKSsiLSIrKGYuZ2V0TW9udGgoKSsxKSsiLnJhdyJ9KGMpO2Q9cmVxdWlyZSgiU3RvcmFnZSIpLnJlYWQoYyk7aWYodm9pZCAwIT09ZCl7Yj1yZXF1aXJlKCJoZWFsdGgiKS5nZXREZWNvZGVyKGQpO3ZhciBlPWQuc3Vic3RyKDgrZypiLnIsYi5yKTtpZihlIT1iLmNscil7cHJpbnQoIkhFQUxUSCBFUlI6IEFscmVhZHkgd3JpdHRlbiEiKTtyZXR1cm59fWVsc2UgYj0KcmVxdWlyZSgiaGVhbHRoIikuZ2V0RGVjb2RlcigiSEVBTFRIMiIpLHJlcXVpcmUoIlN0b3JhZ2UiKS53cml0ZShjLCJIRUFMVEgyXHgwMCIsMCw4KzQ0OTUqYi5yKTt2YXIgaD04K2cqYi5yO2E9T2JqZWN0LmFzc2lnbih7fSxhKTthLm1vdmVtZW50Lz04O3JlcXVpcmUoIlN0b3JhZ2UiKS53cml0ZShjLGIuZW5jb2RlKGEpLGgpO2lmKDE0Mz09ZyUxNDUpaWYoZz1oK2IucixkLnN1YnN0cihnLGIucikhPWIuY2xyKXByaW50KCJIRUFMVEggRVJSOiBEYWlseSBzdW1tYXJ5IGFscmVhZHkgd3JpdHRlbiEiKTtlbHNle2E9e3N0ZXBzOjAsYnBtOjAsbW92ZW1lbnQ6MCxtb3ZDbnQ6MCxicG1DbnQ6MH07Zm9yKHZhciBrPTA7MTQ0Pms7aysrKWU9ZC5zdWJzdHIoaCxiLnIpLGUhPWIuY2xyJiYoZT1iLmRlY29kZShlKSxhLnN0ZXBzKz1lLnN0ZXBzLGEuYnBtKz1lLmJwbSxhLm1vdmVtZW50Kz1lLm1vdmVtZW50LGEubW92Q250KyssZS5icG0mJmEuYnBtQ250KyspLGgtPWIucjthLmJwbUNudCYmCihhLmJwbS89YS5icG1DbnQpO2EubW92Q250JiYoYS5tb3ZlbWVudC89YS5tb3ZDbnQpO3JlcXVpcmUoIlN0b3JhZ2UiKS53cml0ZShjLGIuZW5jb2RlKGEpLGcpfX0pfSn//1sKAABoZWFsdGg=");
  base64DecodeToExistingUint8Array(bufferView, 51244, "ZnVuY3Rpb24gayhiKXtyZXR1cm4iaGVhbHRoLSIrYi5nZXRGdWxsWWVhcigpKyItIisoYi5nZXRNb250aCgpKzEpKyIucmF3In1mdW5jdGlvbiBsKGIpe3JldHVybiAxNDUqKGIuZ2V0RGF0ZSgpLTEpKzYqYi5nZXRIb3VycygpKygwfDYqYi5nZXRNaW51dGVzKCkvNjApfWV4cG9ydHMuQUNUSVZJVFk9IlVOS05PV04gTk9UX1dPUk4gV0FMS0lORyBFWEVSQ0lTRSBMSUdIVF9TTEVFUCBERUVQX1NMRUVQIi5zcGxpdCgiICIpO2V4cG9ydHMuZ2V0RGVjb2Rlcj1mdW5jdGlvbihiKXtyZXR1cm4iSEVBTFRIMiI9PWIuc3Vic3RyKDAsNyk/e3I6MTAsY2xyOiJceGZmXHhmZlx4ZmZceGZmXHhmZlx4ZmZceGZmXHhmZlx4ZmZceGZmIixkZWNvZGU6YT0+e2E9e3N0ZXBzOmEuY2hhckNvZGVBdCgwKTw8OHxhLmNoYXJDb2RlQXQoMSksYnBtTWluOmEuY2hhckNvZGVBdCgyKSxicG1NYXg6YS5jaGFyQ29kZUF0KDMpLAptb3ZlbWVudDo4KmEuY2hhckNvZGVBdCg0KSxiYXR0ZXJ5OmEuY2hhckNvZGVBdCg1KSYxMjcsaXNDaGFyZ2luZzohIShhLmNoYXJDb2RlQXQoNSkmMTI4KSx0ZW1wZXJhdHVyZTphLmNoYXJDb2RlQXQoNikvMixhbHRpdHVkZTooYS5jaGFyQ29kZUF0KDcpJjMxKTw8OHxhLmNoYXJDb2RlQXQoOCksYWN0aXZpdHk6ZXhwb3J0cy5BQ1RJVklUWVthLmNoYXJDb2RlQXQoNyk+PjVdfTs4MDxhLnRlbXBlcmF0dXJlJiYoYS50ZW1wZXJhdHVyZS09MTI4KTthLmJwbT0oYS5icG1NaW4rYS5icG1NYXgpLzI7NzUwMDxhLmFsdGl0dWRlJiYoYS5hbHRpdHVkZS09ODE5Mik7cmV0dXJuIGF9LGVuY29kZTphPT57dmFyIGM9YS5hbHRpdHVkZSY4MTkxO3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGEuc3RlcHM+PjgsYS5zdGVwcyYyNTUsYS5icG1NaW58fGEuYnBtLGEuYnBtTWF4fHxhLmJwbSxNYXRoLm1pbihhLm1vdmVtZW50LDI1NSksRS5nZXRCYXR0ZXJ5KCl8KEJhbmdsZS5pc0NoYXJnaW5nKCkmJgoxMjgpLDB8TWF0aC5yb3VuZCgyKmEudGVtcGVyYXR1cmUpLGM+Pjh8TWF0aC5tYXgoMCxleHBvcnRzLkFDVElWSVRZLmluZGV4T2YoYS5hY3Rpdml0eSkpPDw1LGMmMjU1LDApfX06e3I6NCxjbHI6Ilx4ZmZceGZmXHhmZlx4ZmYiLGRlY29kZTphPT4oe3N0ZXBzOmEuY2hhckNvZGVBdCgwKTw8OHxhLmNoYXJDb2RlQXQoMSksYnBtOmEuY2hhckNvZGVBdCgyKSxicG1NaW46YS5jaGFyQ29kZUF0KDIpLGJwbU1heDphLmNoYXJDb2RlQXQoMiksbW92ZW1lbnQ6OCphLmNoYXJDb2RlQXQoMyl9KSxlbmNvZGU6YT0+U3RyaW5nLmZyb21DaGFyQ29kZShhLnN0ZXBzPj44LGEuc3RlcHMmMjU1LGEuYnBtLE1hdGgubWluKGEubW92ZW1lbnQsMjU1KSl9fTtleHBvcnRzLnJlYWRBbGxSZWNvcmRzPWZ1bmN0aW9uKGIsYSl7Yj1rKGIpO2I9cmVxdWlyZSgiU3RvcmFnZSIpLnJlYWQoYik7aWYodm9pZCAwIT09Yilmb3IodmFyIGM9ZXhwb3J0cy5nZXREZWNvZGVyKGIpLGQ9e30sZT04LApmPTA7MzE+ZjtmKyspe2QuZGF5PWYrMTtmb3IodmFyIGc9MDsyND5nO2crKyl7ZC5ocj1nO2Zvcih2YXIgaD0wOzY+aDtoKyspe2QubWluPTEwKmg7dmFyIG09Yi5zdWJzdHIoZSxjLnIpO20hPWMuY2xyJiZhKE9iamVjdC5hc3NpZ24oYy5kZWNvZGUobSksZCkpO2UrPWMucn19ZSs9Yy5yfX07ZXhwb3J0cy5yZWFkRnVsbERhdGFiYXNlPWZ1bmN0aW9uKGIpe3JlcXVpcmUoIlN0b3JhZ2UiKS5saXN0KC9oZWFsdGgtWzAtOV0rLVswLTldKy5yYXcvKS5mb3JFYWNoKGE9Pntjb25zb2xlLmxvZyhhKTthPWEuc3BsaXQoIi0iKTt2YXIgYz1wYXJzZUludChhWzFdLDEwKSxkPXBhcnNlSW50KGFbMl0ucmVwbGFjZSgiLnJhdyIsIiIpLDEwKTtleHBvcnRzLnJlYWRBbGxSZWNvcmRzKG5ldyBEYXRlKGMsZCwxKSxlPT57ZS5kYXRlPW5ldyBEYXRlKGMsZCxlLmRheSxlLmhyLGUubWluKTtiKGUpfSl9KX07ZXhwb3J0cy5yZWFkQWxsUmVjb3Jkc1NpbmNlPWZ1bmN0aW9uKGIsYSl7Zm9yKHZhciBjPQoobmV3IERhdGUpLmdldFRpbWUoKTtiLmdldFRpbWUoKTw9YzspZXhwb3J0cy5yZWFkRGF5KGIsZD0+e2QuZGF0ZT1uZXcgRGF0ZShiLmdldEZ1bGxZZWFyKCksYi5nZXRNb250aCgpLGIuZ2V0RGF0ZSgpLGQuaHIsZC5taW4pO2EoZCl9KSxiLnNldERhdGUoYi5nZXREYXRlKCkrMSl9O2V4cG9ydHMucmVhZERhaWx5U3VtbWFyaWVzPWZ1bmN0aW9uKGIsYSl7bChiKTtiPWsoYik7Yj1yZXF1aXJlKCJTdG9yYWdlIikucmVhZChiKTtpZih2b2lkIDAhPT1iKWZvcih2YXIgYz1leHBvcnRzLmdldERlY29kZXIoYiksZD04KzE0NCpjLnIsZT0wOzMxPmU7ZSsrKXt2YXIgZj1iLnN1YnN0cihkLGMucik7ZiE9Yy5jbHImJmEoT2JqZWN0LmFzc2lnbihjLmRlY29kZShmKSx7ZGF5OmUrMX0pKTtkKz0xNDUqYy5yfX07ZXhwb3J0cy5yZWFkRGF5PWZ1bmN0aW9uKGIsYSl7bChiKTt2YXIgYz1rKGIpO2M9cmVxdWlyZSgiU3RvcmFnZSIpLnJlYWQoYyk7aWYodm9pZCAwIT09Yyl7dmFyIGQ9ZXhwb3J0cy5nZXREZWNvZGVyKGMpLAplPXt9O2I9OCsxNDUqZC5yKihiLmdldERhdGUoKS0xKTtmb3IodmFyIGY9MDsyND5mO2YrKyl7ZS5ocj1mO2Zvcih2YXIgZz0wOzY+ZztnKyspe2UubWluPTEwKmc7dmFyIGg9Yy5zdWJzdHIoYixkLnIpO2ghPWQuY2xyJiZhKE9iamVjdC5hc3NpZ24oZC5kZWNvZGUoaCksZSkpO2IrPWQucn19fX3/vAIAAGhlYWx0aC5zZXR0aW5ncy5qcw==");
  base64DecodeToExistingUint8Array(bufferView, 53928, "KKooYmFjayl7rHNldHRpbmdzPU9iamVjdC5hc3NpZ24oe2hybTrTLHN0ZXBHb2FsOtUQJyxzdGVwR29hbE5vdGlmaWNhdGlvbjq1fSxyZXF1aXJlKNEHU3RvcmFnZSkucmVhZEpTT04o0QtoZWFsdGguanNvbiy0KaB7fSk7qnNldFNldHRpbmdzKCl7cmVxdWlyZSjRB1N0b3JhZ2UpLndyaXRlSlNPTijRC2hlYWx0aC5qc29uLHNldHRpbmdzKTt9RS5zaG93TWVudSh7IiI6e3RpdGxlOtEPSGVhbHRoIFRyYWNraW5nfSzRBjwgQmFjazooKaJiYWNrKCks0QxIUk0gSW50ZXJ2YWw6e3ZhbHVlOnNldHRpbmdzLmhybSxtaW460yxtYXg61AMsZm9ybWF0OnaiW9EDT2ZmLNEFMyBtaW4s0QYxMCBtaW4s0QZBbHdheXNdW3ZdLG9uY2hhbmdlOnaie3NldHRpbmdzLmhybT12O3NldFNldHRpbmdzKCk7fX0s0Q9EYWlseSBTdGVwIEdvYWw6e3ZhbHVlOnNldHRpbmdzLnN0ZXBHb2FsLG1pbjrTLG1heDrVIE4sc3RlcDrV+gAsb25jaGFuZ2U6dqJ7c2V0dGluZ3Muc3RlcEdvYWw9djtzZXRTZXR0aW5ncygpO319LNEWU3RlcCBHb2FsIE5vdGlmaWNhdGlvbjp7dmFsdWU60RRzdGVwR29hbE5vdGlmaWNhdGlvbrlzZXR0aW5ncz9zZXR0aW5ncy5zdGVwR29hbE5vdGlmaWNhdGlvbjq1LG9uY2hhbmdlOigpontzZXR0aW5ncy5zdGVwR29hbE5vdGlmaWNhdGlvbj0hc2V0dGluZ3Muc3RlcEdvYWxOb3RpZmljYXRpb247c2V0U2V0dGluZ3MoKTt9fSx9KTt9KeMAAABoZWFsdGguaW5mbw==");
  base64DecodeToExistingUint8Array(bufferView, 54660, "eyJpZCI6ImhlYWx0aCIsIm5hbWUiOiJIZWFsdGgiLCJzcmMiOiJoZWFsdGguYXBwLmpzIiwiaWNvbiI6ImhlYWx0aC5pbWciLCJ2ZXJzaW9uIjoiMC4zMSIsInRhZ3MiOiJ0b29sLHN5c3RlbSxoZWFsdGgiLCJmaWxlcyI6ImhlYWx0aC5pbmZvLGhlYWx0aC5hcHAuanMsaGVhbHRoLmltZyxoZWFsdGguYm9vdC5qcyxoZWFsdGgsaGVhbHRoLnNldHRpbmdzLmpzIiwiZGF0YSI6ImhlYWx0aC5qc29uIn3/HhMAAGxhdW5jaC5hcHAuanM=");
  base64DecodeToExistingUint8Array(bufferView, 54920, "TW9kdWxlcy5hZGRDYWNoZWQo0Qx3aWRnZXRfdXRpbHMsqigpe2V4cG9ydHMub2Zmc2V0PdM7ZXhwb3J0cy5oaWRlPaooKXtleHBvcnRzLmNsZWFudXAoKTujKCFnbG9iYWwuV0lER0VUUymrO2cucmVzZXQoKTunKKx3xmdsb2JhbC5XSURHRVRTKXujKHcuX2RyYXcpqzt3Ll9kcmF3PXcuZHJhdzt3LmRyYXc9KCmie307dy5fYXJlYT13LmFyZWE7dy5hcmVhPSIiO6Mody54jLcpZy5jbGVhclJlY3Qody54LHcueSx3Lngrdy53aWR0aC3UASx3Lnkr1BcpO319O2V4cG9ydHMuc2hvdz2qKCl7ZXhwb3J0cy5jbGVhbnVwKCk7oyghZ2xvYmFsLldJREdFVFMpqzunKKx3xmdsb2JhbC5XSURHRVRTKXujKCF3Ll9kcmF3Kas7dy5kcmF3PXcuX2RyYXc7dy5hcmVhPXcuX2FyZWE7vncuX2RyYXc7vncuX2FyZWE7dy5kcmF3KHcpO319O2V4cG9ydHMuY2xlYW51cE92ZXJsYXk9qigpe2V4cG9ydHMub2Zmc2V0PdToO0JhbmdsZS5zZXRMQ0RPdmVybGF5nkJhbmdsZS5zZXRMQ0RPdmVybGF5KLcse2lkOtEMd2lkZ2V0X3V0aWxzfSk7vmV4cG9ydHMuYXV0b2hpZGU7vkJhbmdsZS5hcHBSZWN0O6MoZXhwb3J0cy5hbmltSW50ZXJ2YWwpe2NsZWFySW50ZXJ2YWwoZXhwb3J0cy5hbmltSW50ZXJ2YWwpO75leHBvcnRzLmFuaW1JbnRlcnZhbDt9oyhleHBvcnRzLmhpZGVUaW1lb3V0KXtjbGVhclRpbWVvdXQoZXhwb3J0cy5oaWRlVGltZW91dCk7vmV4cG9ydHMuaGlkZVRpbWVvdXQ7fX07ZXhwb3J0cy5jbGVhbnVwPaooKXtleHBvcnRzLmNsZWFudXBPdmVybGF5KCk7vmV4cG9ydHMub2Zmc2V0O6MoZXhwb3J0cy5zd2lwZUhhbmRsZXIpe0JhbmdsZS5yZW1vdmVMaXN0ZW5lcijRBXN3aXBlLGV4cG9ydHMuc3dpcGVIYW5kbGVyKTu+ZXhwb3J0cy5zd2lwZUhhbmRsZXI7faMoZXhwb3J0cy5vcmlnRHJhdyl7QmFuZ2xlLmRyYXdXaWRnZXRzPWV4cG9ydHMub3JpZ0RyYXc7vmV4cG9ydHMub3JpZ0RyYXc7fX07ZXhwb3J0cy5zd2lwZU9uPaooYXV0b2hpZGUpe6MocHJvY2Vzcy5lbnYuSFdWRVJTSU9OjdQCKatleHBvcnRzLmhpZGUoKTtleHBvcnRzLmNsZWFudXAoKTujKCFnbG9iYWwuV0lER0VUUymrO2V4cG9ydHMuYXV0b2hpZGU9YXV0b2hpZGWLtz/V0Ac6YXV0b2hpZGU7QmFuZ2xlLmFwcFJlY3Q9e3g60yx5OtMsdzpnLmdldFdpZHRoKCksaDpnLmdldEhlaWdodCgpLHgyOmcuZ2V0V2lkdGgoKS3UASx5MjpnLmdldEhlaWdodCgpLdQBfTutb2c9R3JhcGhpY3MuY3JlYXRlQXJyYXlCdWZmZXIoZy5nZXRXaWR0aCgpLNQaLNQQLHttc2I6tH0pO29nLnRoZW1lPWcudGhlbWU7b2cuX3Jlc2V0PW9nLnJlc2V0O29nLnJlc2V0PaooKXurry5fcmVzZXQoKS5zZXRDb2xvcihnLnRoZW1lLmZnKS5zZXRCZ0NvbG9yKGcudGhlbWUuYmcpO307b2cucmVzZXQoKS5jbGVhclJlY3Qo0yzTLG9nLmdldFdpZHRoKCks1BcpLmZpbGxSZWN0KNMs1Bgsb2cuZ2V0V2lkdGgoKSzUGSk7rV9nPWc7ZXhwb3J0cy5vZmZzZXQ91Og7qnF1ZXVlRHJhdygpe65vPWV4cG9ydHMub2Zmc2V0O0JhbmdsZS5hcHBSZWN0Lnk9byvUGDtCYW5nbGUuYXBwUmVjdC5oPdQBK0JhbmdsZS5hcHBSZWN0LnkyLUJhbmdsZS5hcHBSZWN0Lnk7oyhCYW5nbGUuc2V0TENET3ZlcmxheSl7oyhvPi3UGCl7QmFuZ2xlLnNldExDRE92ZXJsYXkob2cs0yxvLHtpZDrRDHdpZGdldF91dGlscyxyZW1vdmU6KCmie3JlcXVpcmUo0Qx3aWRnZXRfdXRpbHMpLmNsZWFudXBPdmVybGF5KCk7fX0pO32ke0JhbmdsZS5zZXRMQ0RPdmVybGF5KLcse2lkOtEMd2lkZ2V0X3V0aWxzfSk7fX19pyisd8ZnbG9iYWwuV0lER0VUUymjKCF3Ll9kcmF3KXt3Ll9kcmF3PXcuZHJhdzt3LmRyYXc9qigpe2c9b2c7ry5fZHJhdyivKTtnPV9nO6MoZXhwb3J0cy5vZmZzZXQ+LdQYKXF1ZXVlRHJhdygpO307dy5fYXJlYT13LmFyZWE7oyh3LmFyZWEuc3RhcnRzV2l0aCjRAWIpKXcuYXJlYT3RAXQrdy5hcmVhLnN1YnN0cijUASk7fWV4cG9ydHMub3JpZ0RyYXc9QmFuZ2xlLmRyYXdXaWRnZXRzO0JhbmdsZS5kcmF3V2lkZ2V0cz0oKaJ7Zz1vZztleHBvcnRzLm9yaWdEcmF3KCk7Zz1fZzt9O6phbmltKGRpcixjYWxsYmFjayl7oyhleHBvcnRzLmFuaW1JbnRlcnZhbCljbGVhckludGVydmFsKGV4cG9ydHMuYW5pbUludGVydmFsKTtleHBvcnRzLmFuaW1JbnRlcnZhbD1zZXRJbnRlcnZhbCiqKCl7ZXhwb3J0cy5vZmZzZXSWZGlyO61zdG9wPbU7oyhkaXI+055leHBvcnRzLm9mZnNldJHTKXtzdG9wPbQ7ZXhwb3J0cy5vZmZzZXQ90zt9pKMoZGlyPNOeZXhwb3J0cy5vZmZzZXQ8LdQXKXtzdG9wPbQ7ZXhwb3J0cy5vZmZzZXQ91Og7faMoc3RvcCl7Y2xlYXJJbnRlcnZhbChleHBvcnRzLmFuaW1JbnRlcnZhbCk7vmV4cG9ydHMuYW5pbUludGVydmFsO6MoY2FsbGJhY2spY2FsbGJhY2soKTt9cXVldWVEcmF3KCk7fSzUMik7fWV4cG9ydHMuc3dpcGVIYW5kbGVyPaoobHIsdWQpe6MoZXhwb3J0cy5oaWRlVGltZW91dCl7Y2xlYXJUaW1lb3V0KGV4cG9ydHMuaGlkZVRpbWVvdXQpO75leHBvcnRzLmhpZGVUaW1lb3V0O32tY2I7oyhleHBvcnRzLmF1dG9oaWRlPtMpY2I9qigpe2V4cG9ydHMuaGlkZVRpbWVvdXQ9c2V0VGltZW91dCiqKCl7YW5pbSjU/Ck7fSxleHBvcnRzLmF1dG9oaWRlKTt9O6ModWQ+055leHBvcnRzLm9mZnNldDzTKWFuaW0o1AQsY2IpO6ModWQ8055leHBvcnRzLm9mZnNldD4t1BgpYW5pbSjU/Ck7fTtCYW5nbGUub24o0QVzd2lwZSxleHBvcnRzLnN3aXBlSGFuZGxlcik7QmFuZ2xlLmRyYXdXaWRnZXRzKCk7fTt9KTt7rXM9cmVxdWlyZSjRB1N0b3JhZ2UpO61zZXR0aW5ncz1PYmplY3QuYXNzaWduKHtzaG93Q2xvY2tzOrQsZnVsbHNjcmVlbjq1LGhlaWdodDrUNH0scy5yZWFkSlNPTijRC2xhdW5jaC5qc29uLLQpoHt9KTutZm9udD1zZXR0aW5ncy5mb250O6MoIWZvbnSgZm9udIrRBlZlY3Rvcil7rWZvbnRzPWcuZ2V0Rm9udHMoKTtmb250PWZvbnRzLmluY2x1ZGVzKNEFMTJ4MjApP9EFMTJ4MjA60QU2eDg6MjujKGZvbnRzLmluY2x1ZGVzKNECMjIpKWZvbnQ90QIyMjt9rWhlaWdodD3TfE1hdGgubWF4KHNldHRpbmdzLmhlaWdodCzUDCkscGFkPdQCO61pbWdzaXplPWhlaWdodC1wYWQq1AIsaW1nc2NhbGU9aW1nc2l6ZS/UMDujKCFzZXR0aW5ncy5mdWxsc2NyZWVuKXtCYW5nbGUubG9hZFdpZGdldHMoKTt9pKMoZ2xvYmFsLldJREdFVFMpe3JlcXVpcmUo0Qx3aWRnZXRfdXRpbHMpLmhpZGUoKTt9e61SPUJhbmdsZS5hcHBSZWN0LG1pZD1oZWlnaHQv1AIsdGg9Zy5zZXRGb250KGZvbnQpLnN0cmluZ01ldHJpY3Mo0QFYKS5oZWlnaHQv1AI7Zy5yZXNldCgpLmNsZWFyUmVjdChSKS5zZXRDb2xvcijRBCM4ODgpO6corHk9Ui55O3k8Ui55Mjt5lmhlaWdodCl7Zy5kcmF3UmVjdChwYWQq1AIseStwYWQq1AIsaW1nc2l6ZS1wYWQseStpbWdzaXplLXBhZCkuZHJhd1JlY3QoaW1nc2l6ZStwYWQq1AIseSttaWQtdGgsUi55Mi1SLncv1AMseSttaWQrdGgpO31nLmZsaXAoKTt9rWxhdW5jaENhY2hlPXMucmVhZEpTT04o0RFsYXVuY2guY2FjaGUuanNvbiy0KaB7fTutbGF1bmNoSGFzaD1yZXF1aXJlKNEHU3RvcmFnZSkuaGFzaCgvXC5pbmZvLyk7oyhsYXVuY2hDYWNoZS5oYXNojGxhdW5jaEhhc2gpe2xhdW5jaENhY2hlPXtoYXNoOmxhdW5jaEhhc2gsYXBwczpzLmxpc3QoL1wuaW5mbyQvKS5tYXAoYXBwonusYT1zLnJlYWRKU09OKGFwcCzUASk7q2Gee25hbWU6YS5uYW1lLHR5cGU6YS50eXBlLGljb246YS5pY29uLHNvcnRvcmRlcjphLnNvcnRvcmRlcixzcmM6YS5zcmN9O30pLmZpbHRlcihhcHCiYXBwnihhcHAudHlwZYrRA2FwcKAoYXBwLnR5cGWK0QVjbG9ja55zZXR0aW5ncy5zaG93Q2xvY2tzKaAhYXBwLnR5cGUpKS5zb3J0KChhLGIponusbj0o03xhLnNvcnRvcmRlciktKNN8Yi5zb3J0b3JkZXIpO6MobimrbjujKGEubmFtZTxiLm5hbWUpqy3UATujKGEubmFtZT5iLm5hbWUpq9QBO6vTO30pfTtzLndyaXRlSlNPTijREWxhdW5jaC5jYWNoZS5qc29uLGxhdW5jaENhY2hlKTt9rWFwcHM9bGF1bmNoQ2FjaGUuYXBwczuuZHJhd01lbnU9KCmie0Uuc2hvd1Njcm9sbGVyKHtoOmhlaWdodCxjOmFwcHMubGVuZ3RoLGRyYXc6KGkscimie6xhcHA9YXBwc1tpXTujKCFhcHApqztnLmNsZWFyUmVjdChyKS5zZXRGb250KGZvbnQpLnNldEZvbnRBbGlnbijU/yzTKS5kcmF3U3RyaW5nKGFwcC5uYW1lLGltZ3NpemUrcGFkKtQCLHIueSvUAityLmgv1AIpO6MoYXBwLmljb24pe6MoIWFwcC5pbWcpYXBwLmltZz1zLnJlYWQoYXBwLmljb24pO7F7Zy5kcmF3SW1hZ2UoYXBwLmltZyxwYWQsci55K3BhZCx7c2NhbGU6aW1nc2NhbGV9KTt9Y2F0Y2goZSl7fX19LHNlbGVjdDpponusYXBwPWFwcHNbaV07oyghYXBwKas7oyghYXBwLnNyY6ByZXF1aXJlKNEHU3RvcmFnZSkucmVhZChhcHAuc3JjKYu3KXtFLnNob3dTY3JvbGxlcigpO0Uuc2hvd01lc3NhZ2Uo0RRBcHAgU291cmNlCk5vdCBmb3VuZCk7c2V0VGltZW91dChkcmF3TWVudSzV0AcpO32ke2xvYWQoYXBwLnNyYyk7fX0sYmFjazpCYW5nbGUuc2hvd0Nsb2NrLHJlbW92ZTooKaJ7oyhsb2NrVGltZW91dCljbGVhclRpbWVvdXQobG9ja1RpbWVvdXQpO0JhbmdsZS5yZW1vdmVMaXN0ZW5lcijRBGxvY2ssbG9ja0hhbmRsZXIpO6MoZ2xvYmFsLldJREdFVFMpcmVxdWlyZSjRDHdpZGdldF91dGlscykuc2hvdygpO319KTtnLmZsaXAoKTtCYW5nbGUuc2V0TG9ja2VkKLUpO61sb2NrVGltZW91dDutbG9ja0hhbmRsZXI9qihsb2NrZWQpe6MobG9ja1RpbWVvdXQpY2xlYXJUaW1lb3V0KGxvY2tUaW1lb3V0KTtsb2NrVGltZW91dD23O6MobG9ja2VkKWxvY2tUaW1lb3V0PXNldFRpbWVvdXQoQmFuZ2xlLnNob3dDbG9jayzVECcpO307QmFuZ2xlLm9uKNEEbG9jayxsb2NrSGFuZGxlcik7fTtkcmF3TWVudSgpO6MoIXNldHRpbmdzLmZ1bGxzY3JlZW4pQmFuZ2xlLmRyYXdXaWRnZXRzKCk7ff//ZwQAAGxhdW5jaC5zZXR0aW5ncy5qcw==");
  base64DecodeToExistingUint8Array(bufferView, 59848, "KKooYmFjayl7rXNldHRpbmdzPU9iamVjdC5hc3NpZ24oe3Nob3dDbG9ja3M6tCxmdWxsc2NyZWVuOrUsaGVpZ2h0OtQ0fSxyZXF1aXJlKNEHU3RvcmFnZSkucmVhZEpTT04o0QtsYXVuY2guanNvbiy0KaB7fSk7rWZvbnRzPWcuZ2V0Rm9udHMoKS5maWx0ZXIoZqJmjNEGVmVjdG9yKTunKKxmPdQKO2Y81BQ7ZpgpZm9udHMucHVzaCjRBlZlY3RvcitmKTutZGVmYXVsdGZvbnQ9Zm9udHMuaW5jbHVkZXMo0QUxMngyMCk/0QUxMngyMDrRBTZ4ODoyO6MoZm9udHMuaW5jbHVkZXMo0QIyMikpZGVmYXVsdGZvbnQ90QIyMjutaGVpZ2h0cz1b1Bws1Cgs1DQs1EAs1ExdO6pzYXZlKCl7cmVxdWlyZSjRB1N0b3JhZ2UpLndyaXRlKNELbGF1bmNoLmpzb24sc2V0dGluZ3MpO32qY2xlYXJDYWNoZSgpe3JlcXVpcmUo0QdTdG9yYWdlKS5lcmFzZSjREWxhdW5jaC5jYWNoZS5qc29uKTt9rmFwcE1lbnU9eyIiOnvRBXRpdGxlOtEITGF1bmNoZXJ9LNEGPCBCYWNrOmJhY2ss0QRGb250Ont2YWx1ZTpmb250cy5pbmNsdWRlcyhzZXR0aW5ncy5mb250KT9mb250cy5pbmRleE9mKHNldHRpbmdzLmZvbnQpOmZvbnRzLmluZGV4T2YoZGVmYXVsdGZvbnQpLG1pbjrTLG1heDpmb250cy5sZW5ndGgt1AEsc3RlcDrUASx3cmFwOrQsb25jaGFuZ2U6KG0pontzZXR0aW5ncy5mb250PWZvbnRzW21dO3NhdmUoKTt9LGZvcm1hdDp2omZvbnRzW3ZdfSzRBkhlaWdodDp7dmFsdWU6aGVpZ2h0cy5pbmNsdWRlcyhzZXR0aW5ncy5oZWlnaHQpP2hlaWdodHMuaW5kZXhPZihzZXR0aW5ncy5oZWlnaHQpOmhlaWdodHMuaW5kZXhPZijUNCksbWluOtMsbWF4OmhlaWdodHMubGVuZ3RoLdQBLHN0ZXA61AEsd3JhcDq0LGZvcm1hdDp2omhlaWdodHNbdl0r0QJweCxvbmNoYW5nZToobSmie3NldHRpbmdzLmhlaWdodD1oZWlnaHRzW21dO3NhdmUoKTt9fSzRC1Nob3cgQ2xvY2tzOnt2YWx1ZTohIXNldHRpbmdzLnNob3dDbG9ja3Msb25jaGFuZ2U6KG0pontzZXR0aW5ncy5zaG93Q2xvY2tzPW07c2F2ZSgpO2NsZWFyQ2FjaGUoKTt9fSzRCkZ1bGxzY3JlZW46e3ZhbHVlOiEhc2V0dGluZ3MuZnVsbHNjcmVlbixvbmNoYW5nZToobSmie3NldHRpbmdzLmZ1bGxzY3JlZW49bTtzYXZlKCk7fX19O0Uuc2hvd01lbnUoYXBwTWVudSk7fSn/5AAAAGxhdW5jaC5pbmZv");
  base64DecodeToExistingUint8Array(bufferView, 61008, "eyJpZCI6ImxhdW5jaCIsIm5hbWUiOiJMYXVuY2hlciIsInR5cGUiOiJsYXVuY2giLCJzcmMiOiJsYXVuY2guYXBwLmpzIiwic29ydG9yZGVyIjotMTAsInZlcnNpb24iOiIwLjI1IiwidGFncyI6InRvb2wsc3lzdGVtLGxhdW5jaGVyIiwiZmlsZXMiOiJsYXVuY2guaW5mbyxsYXVuY2guYXBwLmpzLGxhdW5jaC5zZXR0aW5ncy5qcyIsImRhdGEiOiJsYXVuY2guanNvbixsYXVuY2guY2FjaGUuanNvbiJ9cVkAAHNldHRpbmcuYXBwLmpz");
  base64DecodeToExistingUint8Array(bufferView, 61268, "");
  base64DecodeToExistingUint8Array(bufferView, 84200, "MDDCAP//8WPMQm9T");
  base64DecodeToExistingUint8Array(bufferView, 84264, "AVVVQAAAAAAAAAAAAVVVQAAAAAAAAAAAAVVVUAAAAAAAAAAAAVVVUAAAAAAAAAAABVVVUAAAAAAAAAAABVVVUAAAAAAAABAABVVVUAAFAAAAAFUAVVVVVQBVAAAAAVVRVVVVVUVVQAAAAVVVVfqvVVVVUAAABVVVXqqqtVVVUAAAFVVV6qqqq1VVVAAAFVVXqqqqqtVVVAAAVVVeqqqqqrVVVQAAVVVaqqqqqqVVVQAAVVV6qqqqqq1VVQAAFVVqqqAKqqlVVAAAAVXqqgAAqqtVQAAAAFXqqgAAqqtVAAAAABWqqAAAKqpVAAAAABWqqAAAKqpVAAAAABWqqAAAKqpVAAAAABWqqAAAKqpVAAAAAFXqqgAAqqtVAAAAAVXqqgAAqqtVQAAAFVVqqqAKqqlVVAAAVVV6qqqqqq1VVQAAVVVaqqqqqqVVVQAAVVVeqqqqqrVVVQAAFVVXqqqqqtVVVAAAFVVV6qqqq1VVVAAABVVVXqqqtVVVUAAABVVVVfqvVVVVQAAAAVVRVVVVVUVVQAAAAFUAVVVVVQBVAAAAAFAABVVVUAAEAAAAAAAABVVVUAAAAAAAAAAABVVVUAAAAAAAAAAABVVVQAAAAAAAAAAABVVVQAAAAAAAAAAAAVVVQAAAAAAAAAAAAVVVQA==");
  base64DecodeToExistingUint8Array(bufferView, 84788, "TwEAAHNldHRpbmcuanNvbg==");
  base64DecodeToExistingUint8Array(bufferView, 84820, "eyJibGUiOnRydWUsImJsZXJlcGwiOnRydWUsImxvZyI6ZmFsc2UsInRpbWVvdXQiOjEwLCJ2aWJyYXRlIjp0cnVlLCJiZWVwIjoidmliIiwidGltZXpvbmUiOjAsIkhJRCI6ZmFsc2UsImNsb2NrIjpudWxsLCIxMmhvdXIiOmZhbHNlLCJicmlnaHRuZXNzIjoxLCJvcHRpb25zIjp7Indha2VPbkJUTjEiOnRydWUsIndha2VPbkJUTjIiOnRydWUsIndha2VPbkJUTjMiOnRydWUsIndha2VPbkZhY2VVcCI6ZmFsc2UsIndha2VPblRvdWNoIjpmYWxzZSwid2FrZU9uVHdpc3QiOmZhbHNlLCJ0d2lzdFRocmVzaG9sZCI6ODE5LjIsInR3aXN0TWF4WSI6LTgwMCwidHdpc3RUaW1lb3V0IjoxMDAwfX3/ywAAAHNldHRpbmcuaW5mbw==");
  base64DecodeToExistingUint8Array(bufferView, 85188, "eyJpZCI6InNldHRpbmciLCJuYW1lIjoiU2V0dGluZ3MiLCJzcmMiOiJzZXR0aW5nLmFwcC5qcyIsImljb24iOiJzZXR0aW5nLmltZyIsInNvcnRvcmRlciI6LTUsInZlcnNpb24iOiIwLjc4IiwidGFncyI6InRvb2wsc3lzdGVtIiwiZmlsZXMiOiJzZXR0aW5nLmluZm8sc2V0dGluZy5hcHAuanMsc2V0dGluZy5pbWciLCJkYXRhIjoic2V0dGluZy5qc29uIn3/6gIAAHNjaGVkLmJvb3QuanM=");
  base64DecodeToExistingUint8Array(bufferView, 85424, "KKooKXujKEJhbmdsZS5TQ0hFRCl7Y2xlYXJUaW1lb3V0KEJhbmdsZS5TQ0hFRCk7vkJhbmdsZS5TQ0hFRDt9vkUuc2V0VGltZVpvbmU7rGFsYXJtcz1yZXF1aXJlKNEHU3RvcmFnZSkucmVhZEpTT04o0QpzY2hlZC5qc29uLNQBKaBbXTusdGltZT24RGF0ZSgpO6xjdXJyZW50VGltZT0odGltZS5nZXRIb3VycygpKjM2MDAwMDApKyh0aW1lLmdldE1pbnV0ZXMoKSo2MDAwMCkrKHRpbWUuZ2V0U2Vjb25kcygpKtXoAyk7rGQ9dGltZS5nZXREYXRlKCk7rGFjdGl2ZT1hbGFybXMuZmlsdGVyKGGiYS5vbp4oYS5sYXN0jGQpnihhLnQrNjAwMDA+Y3VycmVudFRpbWUpnihhLmRvd5J0aW1lLmdldERheSgpJtQBKZ4oIWEuZGF0ZaBhLmRhdGWKdGltZS50b0xvY2FsSVNPU3RyaW5nKCkuc3Vic3RyKNMs1AopKSk7oyhhY3RpdmUubGVuZ3RoKXthY3RpdmU9YWN0aXZlLnNvcnQoKGEsYimiYS50LWIudCk7rHQ9YWN0aXZlW9NdLnQtY3VycmVudFRpbWU7oyh0PNXoAyl0PdXoAztCYW5nbGUuU0NIRUQ9c2V0VGltZW91dChhY3RpdmVb010uanOg0RBsb2FkKCJzY2hlZC5qcyIpLHQpO6x0ej1FLnNldFRpbWVab25lO0Uuc2V0VGltZVpvbmU9qih6KXt0eih6KTtldmFsKHJlcXVpcmUo0QdTdG9yYWdlKS5yZWFkKNENc2NoZWQuYm9vdC5qcykpO307faR7QmFuZ2xlLlNDSEVEPXNldFRpbWVvdXQo0S5ldmFsKHJlcXVpcmUoIlN0b3JhZ2UiKS5yZWFkKCJzY2hlZC5ib290LmpzIikpLDg2NDAwMDAwLWN1cnJlbnRUaW1lKTt9fSkoKTv//5oTAABzY2hlZC5qcw==");
  base64DecodeToExistingUint8Array(bufferView, 86204, "TW9kdWxlcy5hZGRDYWNoZWQo0Qp0aW1lX3V0aWxzLKooKXtleHBvcnRzLmVuY29kZVRpbWU9KHRpbWUpont0aW1lPXNhZmVUaW1lKHRpbWUpO6t0aW1lLmQqODY0MDAwMDArdGltZS5oKjM2MDAwMDArdGltZS5tKjYwMDAwK3RpbWUucyrV6AM7fapzYWZlVGltZSh0aW1lKXure2Q6dGltZS5koNMsaDp0aW1lLmig0yxtOnRpbWUubaDTLHM6dGltZS5zoNN9O31leHBvcnRzLmRlY29kZVRpbWU9KG1pbGxpcymie6Mov21pbGxpc43RBm51bWJlcimw0RxPbmx5IGEgbnVtYmVyIGNhbiBiZSBkZWNvZGVkO6xkPU1hdGguZmxvb3IobWlsbGlzLzg2NDAwMDAwKTttaWxsaXOXZCo4NjQwMDAwMDusaD1NYXRoLmZsb29yKG1pbGxpcy8zNjAwMDAwKTttaWxsaXOXaCozNjAwMDAwO6xtPU1hdGguZmxvb3IobWlsbGlzLzYwMDAwKTttaWxsaXOXbSo2MDAwMDuscz1NYXRoLmZsb29yKG1pbGxpcy/V6AMpO6t7ZDpkLGg6aCxtOm0sczpzfTt9ZXhwb3J0cy5mb3JtYXRUaW1lPSh2YWx1ZSmie6x0aW1lPXNhZmVUaW1lKL92YWx1ZYvRBm9iamVjdD92YWx1ZTpleHBvcnRzLmRlY29kZVRpbWUodmFsdWUpKTt0aW1lLmiWdGltZS5kKtQYO6t0aW1lLmgr0QE6KyjRATArdGltZS5tKS5zdWJzdHIo1P4pO31leHBvcnRzLmZvcm1hdER1cmF0aW9uPSh2YWx1ZSxjb21wYWN0KaJ7Y29tcGFjdD1jb21wYWN0oLU7rGR1cmF0aW9uPSIiO6x0aW1lPXNhZmVUaW1lKL92YWx1ZYvRBm9iamVjdD92YWx1ZTpleHBvcnRzLmRlY29kZVRpbWUodmFsdWUpKTujKHRpbWUuZD7TKWR1cmF0aW9ulnRpbWUuZCvRAmQgO6ModGltZS5oPtMpZHVyYXRpb26WdGltZS5oK9ECaCA7oyh0aW1lLm0+0ylkdXJhdGlvbpZ0aW1lLm0r0QJtIDujKHRpbWUucz7TKWR1cmF0aW9ulnRpbWUucyvRAXNkdXJhdGlvbj1kdXJhdGlvbi50cmltKCmrY29tcGFjdD9kdXJhdGlvbi5yZXBsYWNlKNEBICwiIik6ZHVyYXRpb247fWV4cG9ydHMuZ2V0Q3VycmVudFRpbWVNaWxsaXM9KCmie6x0aW1lPbhEYXRlKCk7qyh0aW1lLmdldEhvdXJzKCkq1RAOK3RpbWUuZ2V0TWludXRlcygpKtQ8K3RpbWUuZ2V0U2Vjb25kcygpKSrV6AM7fX0pOwpNb2R1bGVzLmFkZENhY2hlZCjRBGJ1enosqigpe2V4cG9ydHMucGF0dGVybj1wYXR0ZXJuorhQcm9taXNlKHJlc29sdmWie6pkb0J1enooKXujKHBhdHRlcm6KIiIpq3Jlc29sdmUoKTusYz1wYXR0ZXJuW9NdO3BhdHRlcm49cGF0dGVybi5zdWJzdHIo1AEpO65CVVpaX1dFQUs9MC4yNSxCVVpaX1NUUk9ORz3UATuuU0hPUlRfTVM91GQsTUVESVVNX01TPdXIACxMT05HX01TPdX0ATujKGOK0QEuKUJhbmdsZS5idXp6KFNIT1JUX01TLEJVWlpfV0VBSykudGhlbigoKaJzZXRUaW1lb3V0KGRvQnV6eizUZCkpO6SjKGOK0QEsKUJhbmdsZS5idXp6KE1FRElVTV9NUyxCVVpaX1dFQUspLnRoZW4oKCmic2V0VGltZW91dChkb0J1enos1GQpKTukoyhjitEBLSlCYW5nbGUuYnV6eihMT05HX01TLEJVWlpfV0VBSykudGhlbigoKaJzZXRUaW1lb3V0KGRvQnV6eizUZCkpO6SjKGOK0QE6KUJhbmdsZS5idXp6KFNIT1JUX01TLEJVWlpfU1RST05HKS50aGVuKCgponNldFRpbWVvdXQoZG9CdXp6LNRkKSk7pKMoY4rRATspQmFuZ2xlLmJ1enooTUVESVVNX01TLEJVWlpfU1RST05HKS50aGVuKCgponNldFRpbWVvdXQoZG9CdXp6LNRkKSk7pKMoY4rRAT0pQmFuZ2xlLmJ1enooTE9OR19NUyxCVVpaX1NUUk9ORykudGhlbigoKaJzZXRUaW1lb3V0KGRvQnV6eizUZCkpO6RzZXRUaW1lb3V0KGRvQnV6eizUZCk7fWRvQnV6eigpO30pO30pOwqjKEJhbmdsZS5TQ0hFRCl7Y2xlYXJJbnRlcnZhbChCYW5nbGUuU0NIRUQpO75CYW5nbGUuU0NIRUQ7fQqqc2hvd0FsYXJtKGFsYXJtKXuuYWxhcm1JbmRleD1hbGFybXMuaW5kZXhPZihhbGFybSk7rnNldHRpbmdzPXJlcXVpcmUo0QVzY2hlZCkuZ2V0U2V0dGluZ3MoKTutbWVzc2FnZT0iIjttZXNzYWdllmFsYXJtLnRpbWVyP3JlcXVpcmUo0Qp0aW1lX3V0aWxzKS5mb3JtYXREdXJhdGlvbihhbGFybS50aW1lcik6cmVxdWlyZSjRCnRpbWVfdXRpbHMpLmZvcm1hdFRpbWUoYWxhcm0udCk7oyhhbGFybS5tc2cpe21lc3NhZ2WW0QEKK2FsYXJtLm1zZzt9pHttZXNzYWdlPShhbGFybS50aW1lcj/SmQEAJCzCAP//fe9FwYchAAAAFVVUAAAAAAAAFVVUAAAAAAAAFVVUAAAAAAAAFVVUAAAAAAAAFVVUAAAAAAAAFVVUAAAAAAAAA//AAAAAAAAAA//AAAAAAAAACqqgA8AAAAACqqqqg/wAAAAqqqqqq/8AAAKqqqqqqr/AAAqqqqVaqq/AACqqqqVVqqsAAKqqqqVVWqoAAqqqqqVVVqqAAqpqqqVVVaqACqlaqqVVVWqgCqVaqqVVVVqgKqVXqqVVVVqoKpVV+qVVVVaoKpVV/qVVVVaoqlVVf+VVVVWqqlVVX/5VVVWqqlVVX/+VVVWqqlVVV+vVVVWqqlVVV+vVVVWqqlVVVv+VVVWqqlVVVb5VVVWqqlVVVVVVVVWqKpVVVVVVVVaoKpVVVVVVVVaoKqVVVVVVVVqoCqVVVVVVVVqgCqlVVVVVVWqgAqpVVVVVVaqAAqqVVVVVVqqAAKqlVVVVWqoAACqqVVVVqqgAAAqqpVVaqqAAAAKqqqqqqoAAAAAqqqqqqAAAAAACqqqqgAAAAAAACqqgAAAAOtL8AQAtLMIBfe///0XBKTJVVVVVVX/VVVVVVVVV//VVX/VVX/9VVVf//9VX/VV///1VV///1VqqpVf//9VX///WqqqqqX///Vf//9qqqqqqp///1f//+qqqqqqq///1///qqqAACqqr//9//+qqAAAACqq//9//6qgAAAAAKqv/9//qqAAA8AACqr/9//qoAAA8AAAqr/9/2qgAAA8AAAKqf9faqAAAA8AAACqn1daoAAAA8AAAAql1VqoAAAA8AAAAqpVVqgAAAA8AAAAKpVVqgAAAA8AAAAKpVVqgAAAA8AAAAKpVWqAAAAA8AAAACqVWqAAAAA8AAAACqVWqAAAAA8AAAACqVWqAAAADrAAAACqVWqAAAADrAAAACqVWqAAAAC/wAAACqVWqAAAAID8AAACqVWqAAAAgA/AAACqVVqgAACAAPwAAKpVVqgAAIAAD8AAKpVVqgAAgAAA8AAKpVVqoACAAAAAAAqpVVaoAIAAAAAAAqlVVaqAAAAAAAACqlVVWqgAAAAAAAKqVVVVqoAAAAAAAqpVVVVqqAAAAAACqpVVVVaqgAAAAAKqlVVVVWqqAAAACqqVVVVVXqqqAACqqrVVVVVf+qqqqqqq/1VVVV/9qqqqqqp/9VVVX/1WqqqqqVf/VVVX/VVVqqpVVX/VVVX9VVVVVVVVV/VUpK9EBICttZXNzYWdlfUJhbmdsZS5sb2FkV2lkZ2V0cygpO0JhbmdsZS5kcmF3V2lkZ2V0cygpO61idXp6Q291bnQ9c2V0dGluZ3MuYnV6ekNvdW50O0Uuc2hvd1Byb21wdChtZXNzYWdlLHt0aXRsZTphbGFybS50aW1lcj/RBlRJTUVSITrRBkFMQVJNISxidXR0b25zOnvRBlNub296ZTq0LNEEU3RvcDq1fX0pLnRoZW4oqihzbGVlcCl7YnV6ekNvdW50PdM7oyhzbGVlcCl7oyhhbGFybS5vdIu3KXthbGFybS5vdD1hbGFybS50O32tdGltZT24RGF0ZSgpO61jdXJyZW50VGltZT0odGltZS5nZXRIb3VycygpKjM2MDAwMDApKyh0aW1lLmdldE1pbnV0ZXMoKSo2MDAwMCkrKHRpbWUuZ2V0U2Vjb25kcygpKtXoAyk7YWxhcm0udD1jdXJyZW50VGltZStzZXR0aW5ncy5kZWZhdWx0U25vb3plTWlsbGlzO2FsYXJtLnScODY0MDAwMDA7QmFuZ2xlLmVtaXQo0QthbGFybVNub296ZSxhbGFybSk7faR7rWRlbD1hbGFybS5kZWyLtz9zZXR0aW5ncy5kZWZhdWx0RGVsZXRlRXhwaXJlZFRpbWVyczphbGFybS5kZWw7oyhkZWwpe2FsYXJtcy5zcGxpY2UoYWxhcm1JbmRleCzUASk7faR7oyhhbGFybS5kYXRlnmFsYXJtLnJwKXtzZXROZXh0UmVwZWF0RGF0ZShhbGFybSk7faSjKCFhbGFybS50aW1lcil7YWxhcm0ubGFzdD24RGF0ZSgpLmdldERhdGUoKTt9oyhhbGFybS5vdI23KXthbGFybS50PWFsYXJtLm90O75hbGFybS5vdDt9oyghYWxhcm0ucnApe2FsYXJtLm9uPbU7fX1CYW5nbGUuZW1pdCjRDGFsYXJtRGlzbWlzcyxhbGFybSk7fXJlcXVpcmUo0QVzY2hlZCkuc2V0QWxhcm1zKGFsYXJtcyk7bG9hZCgpO30pO6pidXp6KCl7oyhzZXR0aW5ncy51bmxvY2tBdEJ1enope0JhbmdsZS5zZXRMb2NrZWQotSk7fa5wYXR0ZXJuPWFsYXJtLnZpYnJhdGWgKGFsYXJtLnRpbWVyP3NldHRpbmdzLmRlZmF1bHRUaW1lclBhdHRlcm46c2V0dGluZ3MuZGVmYXVsdEFsYXJtUGF0dGVybik7cmVxdWlyZSjRBGJ1enopLnBhdHRlcm4ocGF0dGVybikudGhlbigoKaJ7oyhidXp6Q291bnSKtqBidXp6Q291bnSZKXtzZXRUaW1lb3V0KGJ1enosc2V0dGluZ3MuYnV6ekludGVydmFsTWlsbGlzKTt9pKMoYWxhcm0uYXMpe2J1enpDb3VudD1zZXR0aW5ncy5idXp6Q291bnQ7c2V0VGltZW91dChidXp6LHNldHRpbmdzLmRlZmF1bHRTbm9vemVNaWxsaXMpO319KTt9qnNldE5leHRSZXBlYXREYXRlKGFsYXJtKXutZGF0ZT24RGF0ZShhbGFybS5kYXRlKTutcnA9YWxhcm0ucnA7oyhycIu0KXtkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkr1AEpO32kuyhycC5pbnRlcnZhbCl7vNEDZGF5OmRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKStycC5udW0pO6g7vNEEd2VlazpkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkrKHJwLm51bSrUBykpO6g7vNEFbW9udGg6oyghYWxhcm0ub2QpYWxhcm0ub2Q9ZGF0ZS5nZXREYXRlKCk7ZGF0ZT24RGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksZGF0ZS5nZXRNb250aCgpK3JwLm51bSxhbGFybS5vZCk7oyhkYXRlLmdldERhdGUoKYxhbGFybS5vZClkYXRlLnNldERhdGUo0yk7qDu80QR5ZWFyOqMoIWFsYXJtLm9kKWFsYXJtLm9kPWRhdGUuZ2V0RGF0ZSgpO2RhdGU9uERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpK3JwLm51bSxkYXRlLmdldE1vbnRoKCksYWxhcm0ub2QpO6MoZGF0ZS5nZXREYXRlKCmMYWxhcm0ub2QpZGF0ZS5zZXREYXRlKNMpO6g7vTpjb25zb2xlLmxvZyhgc2NoZWQ6IHVua25vd24gcmVwZWF0ICcke0pTT04uc3RyaW5naWZ5KHJwKX0nYCk7qDt9YWxhcm0uZGF0ZT1kYXRlLnRvTG9jYWxJU09TdHJpbmcoKS5zbGljZSjTLNQKKTt9oygocmVxdWlyZSjRB1N0b3JhZ2UpLnJlYWRKU09OKNEMc2V0dGluZy5qc29uLNQBKaB7fSkucXVpZXQ+1AEpqztidXp6KCk7fa1hbGFybXM9cmVxdWlyZSjRBXNjaGVkKS5nZXRBbGFybXMoKTutYWN0aXZlPXJlcXVpcmUo0QVzY2hlZCkuZ2V0QWN0aXZlQWxhcm1zKGFsYXJtcyk7oyhhY3RpdmUubGVuZ3RoKXtzaG93QWxhcm0oYWN0aXZlW9NdKTt9pHtzZXRUaW1lb3V0KGxvYWQs1GQpO33//4QEAABzY2hlZC5pbWc=");
  base64DecodeToExistingUint8Array(bufferView, 91256, "MDCEBmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmERFmZmZmZmZmZmZmZmZmZmYRERFmZmZmERFmZmZmERERZmZmZmZmZhERERERZmZmERFmZmYREREREWZmZmZmYREREREWZmbMzMzMZmZhERERERZmZmZmERERERFmzMzMzMzMzMxmERERERFmZmZhERERERbMzMzMzMzMzMzMYREREREWZmZhERERERzMzMzMzMzMzMzMwREREREWZmYRERERFMzMzEQz//8zRMzMzEERERERZmYRERERTMzMQ////////zTMzMQRERERZmYREREUzMzD//////////88zMxBERERZmYRERFMzMQ/////8A/////zTMzEERERZmYRERHMzE//////8A//////9MzMERERZmYREWzMxP//////8A///////0zMxhERZmZhFszMw///////8A///////zzMzGEWZmZhZszMP///////8A////////PMzGYWZmZmbMzE////////8A////////9MzMZmZmZmbMzD////////8A////////88zMZmZmZmbMxP////////8A/////////0zMZmZmZmbMxP////////8A/////////0zMZmZmZmzMw/////////8A/////////zzMxmZmZmzMw/////////8A/////////zzMxmZmZmzMz/////////MAP/////////zMxmZmZmzMz/////////BVD/////////zMxmZmZmzMz/////////BVA/////////zMxmZmZmzMz////////zQAAD////////zMxmZmZmzMw///////80PzAAP//////zzMxmZmZmzMw///////ND//MAA//////zzMxmZmZmbMxP/////zQ///8wAD/////0zMZmZmZmbMxP////80P////zAAP////0zMZmZmZmbMzD////ND//////MC////88zMZmZmZmbMzE///zQ///////8/////9MzMZmZmZmZszMP/80P/////////////PMzGZmZmZmZszMw//z/////////////zzMzGZmZmZmZmzMxP///////////////0zMxmZmZmZmZmbMzE//////////////9MzMZmZmZmZmZmbMzMQ////////////zTMzMZmZmZmZmZmZszMzD//////////88zMzGZmZmZmZmZmZmzMzMQ////////zTMzMxmZmZmZmZmZmZmFMzMzEQz//8zRMzMzEFmZmZmZmZmZmZhERzMzMzMzMzMzMzMwREWZmZmZmZmZmYRERbMzMzMzMzMzMzMYRERZmZmZmZmZmEREWZmzMzMzMzMzMxmZhERFmZmZmZmZmERFmZmZmbMzMzMZmZmZmERFmZmZmZmZmERZmZmZmZmZmZmZmZmZmYRFmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlkNAABzY2hlZA==");
  base64DecodeToExistingUint8Array(bufferView, 92444, "TW9kdWxlcy5hZGRDYWNoZWQo0Qp0aW1lX3V0aWxzLKooKXtleHBvcnRzLmVuY29kZVRpbWU9KHRpbWUpont0aW1lPXNhZmVUaW1lKHRpbWUpO6t0aW1lLmQqODY0MDAwMDArdGltZS5oKjM2MDAwMDArdGltZS5tKjYwMDAwK3RpbWUucyrV6AM7fapzYWZlVGltZSh0aW1lKXure2Q6dGltZS5koNMsaDp0aW1lLmig0yxtOnRpbWUubaDTLHM6dGltZS5zoNN9O31leHBvcnRzLmRlY29kZVRpbWU9KG1pbGxpcymie6Mov21pbGxpc43RBm51bWJlcimw0RxPbmx5IGEgbnVtYmVyIGNhbiBiZSBkZWNvZGVkO6xkPU1hdGguZmxvb3IobWlsbGlzLzg2NDAwMDAwKTttaWxsaXOXZCo4NjQwMDAwMDusaD1NYXRoLmZsb29yKG1pbGxpcy8zNjAwMDAwKTttaWxsaXOXaCozNjAwMDAwO6xtPU1hdGguZmxvb3IobWlsbGlzLzYwMDAwKTttaWxsaXOXbSo2MDAwMDuscz1NYXRoLmZsb29yKG1pbGxpcy/V6AMpO6t7ZDpkLGg6aCxtOm0sczpzfTt9ZXhwb3J0cy5mb3JtYXRUaW1lPSh2YWx1ZSmie6x0aW1lPXNhZmVUaW1lKL92YWx1ZYvRBm9iamVjdD92YWx1ZTpleHBvcnRzLmRlY29kZVRpbWUodmFsdWUpKTt0aW1lLmiWdGltZS5kKtQYO6t0aW1lLmgr0QE6KyjRATArdGltZS5tKS5zdWJzdHIo1P4pO31leHBvcnRzLmZvcm1hdER1cmF0aW9uPSh2YWx1ZSxjb21wYWN0KaJ7Y29tcGFjdD1jb21wYWN0oLU7rGR1cmF0aW9uPSIiO6x0aW1lPXNhZmVUaW1lKL92YWx1ZYvRBm9iamVjdD92YWx1ZTpleHBvcnRzLmRlY29kZVRpbWUodmFsdWUpKTujKHRpbWUuZD7TKWR1cmF0aW9ulnRpbWUuZCvRAmQgO6ModGltZS5oPtMpZHVyYXRpb26WdGltZS5oK9ECaCA7oyh0aW1lLm0+0ylkdXJhdGlvbpZ0aW1lLm0r0QJtIDujKHRpbWUucz7TKWR1cmF0aW9ulnRpbWUucyvRAXNkdXJhdGlvbj1kdXJhdGlvbi50cmltKCmrY29tcGFjdD9kdXJhdGlvbi5yZXBsYWNlKNEBICwiIik6ZHVyYXRpb247fWV4cG9ydHMuZ2V0Q3VycmVudFRpbWVNaWxsaXM9KCmie6x0aW1lPbhEYXRlKCk7qyh0aW1lLmdldEhvdXJzKCkq1RAOK3RpbWUuZ2V0TWludXRlcygpKtQ8K3RpbWUuZ2V0U2Vjb25kcygpKSrV6AM7fX0pOwpleHBvcnRzLmdldEFsYXJtcz2qKCl7q3JlcXVpcmUo0QdTdG9yYWdlKS5yZWFkSlNPTijRCnNjaGVkLmpzb24s1AEpoFtdO307CmV4cG9ydHMuc2V0QWxhcm1zPaooYWxhcm1zKXthbGFybXMuZm9yRWFjaChlomUudJw4NjQwMDAwMCk7q3JlcXVpcmUo0QdTdG9yYWdlKS53cml0ZUpTT04o0QpzY2hlZC5qc29uLGFsYXJtcyk7fTsKZXhwb3J0cy5nZXRBbGFybT2qKGlkKXurZXhwb3J0cy5nZXRBbGFybXMoKS5maW5kKGGiYS5pZIppZCk7fTsKZXhwb3J0cy5nZXRBY3RpdmVBbGFybXM9qihhbGFybXMsdGltZSl7oyghdGltZSl0aW1lPbhEYXRlKCk7rGN1cnJlbnRUaW1lPSh0aW1lLmdldEhvdXJzKCkqMzYwMDAwMCkrKHRpbWUuZ2V0TWludXRlcygpKjYwMDAwKSsodGltZS5nZXRTZWNvbmRzKCkq1egDKSvVECc7q2FsYXJtcy5maWx0ZXIoYaJhLm9unihhLmxhc3SMdGltZS5nZXREYXRlKCkpnihhLnQ8Y3VycmVudFRpbWUpnihhLmRvd5J0aW1lLmdldERheSgpJtQBKZ4oIWEuZGF0ZaBhLmRhdGWKdGltZS50b0xvY2FsSVNPU3RyaW5nKCkuc3Vic3RyKNMs1AopKSkuc29ydCgoYSxiKaJhLnQtYi50KTt9CmV4cG9ydHMuc2V0QWxhcm09qihpZCxhbGFybSl7rGFsYXJtcz1leHBvcnRzLmdldEFsYXJtcygpLmZpbHRlcihhomEuaWSMaWQpO6MoYWxhcm2Ntyl7YWxhcm0uaWQ9aWQ7oyhhbGFybS5kb3eLtylhbGFybS5kb3c91H87oyhhbGFybS5vbo21KWFsYXJtLm9uPbQ7oyhhbGFybS50aW1lcil7ZXhwb3J0cy5yZXNldFRpbWVyKGFsYXJtKTt9YWxhcm1zLnB1c2goYWxhcm0pO31leHBvcnRzLnNldEFsYXJtcyhhbGFybXMpO307CmV4cG9ydHMucmVzZXRUaW1lcj2qKGFsYXJtLHRpbWUpe3RpbWU9dGltZaC4RGF0ZSgpO6xjdXJyZW50VGltZT0odGltZS5nZXRIb3VycygpKjM2MDAwMDApKyh0aW1lLmdldE1pbnV0ZXMoKSo2MDAwMCkrKHRpbWUuZ2V0U2Vjb25kcygpKtXoAyk7YWxhcm0udD0oY3VycmVudFRpbWUrYWxhcm0udGltZXIpJTg2NDAwMDAwO2FsYXJtLmxhc3Q90QV0aW1lcrlhbGFybaBhbGFybS50kXJlcXVpcmUo0Qp0aW1lX3V0aWxzKS5nZXRDdXJyZW50VGltZU1pbGxpcygpP9M6uERhdGUoKS5nZXREYXRlKCk7fTsKZXhwb3J0cy5nZXRUaW1lVG9BbGFybT2qKGFsYXJtLHRpbWUpe6MoIWFsYXJtKau3O6MoIXRpbWUpdGltZT24RGF0ZSgpO6xjdXJyZW50VGltZT0odGltZS5nZXRIb3VycygpKjM2MDAwMDApKyh0aW1lLmdldE1pbnV0ZXMoKSo2MDAwMCkrKHRpbWUuZ2V0U2Vjb25kcygpKtXoAyk7rGFjdGl2ZT1hbGFybS5vbp4oYWxhcm0uZG93kigodGltZS5nZXREYXkoKSsoYWxhcm0udDxjdXJyZW50VGltZSkpJdQHKSkm1AGeKCFhbGFybS5kYXRloGFsYXJtLmRhdGWKdGltZS50b0xvY2FsSVNPU3RyaW5nKCkuc3Vic3RyKNMs1AopKTujKCFhY3RpdmUpq7c7rHQ9YWxhcm0udC1jdXJyZW50VGltZTujKGFsYXJtLmxhc3SKdGltZS5nZXREYXRlKCmgdDwtNjAwMDApdJY4NjQwMDAwMDurdDt9OwpleHBvcnRzLnJlbG9hZD2qKCl7ZXZhbChyZXF1aXJlKNEHU3RvcmFnZSkucmVhZCjRDXNjaGVkLmJvb3QuanMpKTtCYW5nbGUuZW1pdCjRC2FsYXJtUmVsb2FkKTt9OwpleHBvcnRzLm5ld0RlZmF1bHRBbGFybT2qKCl7rnNldHRpbmdzPWV4cG9ydHMuZ2V0U2V0dGluZ3MoKTusYWxhcm09e3Q61AwqMzYwMDAwMCxkZWw6tSxvbjq0LHJwOrUsYXM6c2V0dGluZ3MuZGVmYXVsdEF1dG9Tbm9vemUsZG93OtR/LGxhc3Q60yx2aWJyYXRlOnNldHRpbmdzLmRlZmF1bHRBbGFybVBhdHRlcm4sfTu+c2V0dGluZ3M7q2FsYXJtO30KZXhwb3J0cy5uZXdEZWZhdWx0VGltZXI9qigpe65zZXR0aW5ncz1leHBvcnRzLmdldFNldHRpbmdzKCk7rHRpbWVyPXt0aW1lcjrUBSrUPCrV6AMsZGVsOnNldHRpbmdzLmRlZmF1bHREZWxldGVFeHBpcmVkVGltZXJzLG9uOrQscnA6tSxhczq1LGRvdzrUfyxsYXN0OtMsdmlicmF0ZTpzZXR0aW5ncy5kZWZhdWx0VGltZXJQYXR0ZXJufb5zZXR0aW5nczurdGltZXI7fTsKZXhwb3J0cy5nZXRTZXR0aW5ncz2qKCl7q09iamVjdC5hc3NpZ24oe3VubG9ja0F0QnV6ejq1LGRlZmF1bHRTbm9vemVNaWxsaXM6NjAwMDAwLGRlZmF1bHRBdXRvU25vb3plOrUsZGVmYXVsdERlbGV0ZUV4cGlyZWRUaW1lcnM6tCxidXp6Q291bnQ61AosYnV6ekludGVydmFsTWlsbGlzOtW4CyxkZWZhdWx0QWxhcm1QYXR0ZXJuOtECOjosZGVmYXVsdFRpbWVyUGF0dGVybjrRAjo6fSxyZXF1aXJlKNEHU3RvcmFnZSkucmVhZEpTT04o0RNzY2hlZC5zZXR0aW5ncy5qc29uLLQpoHt9KTt9CmV4cG9ydHMuc2V0U2V0dGluZ3M9qihzZXR0aW5ncyl7cmVxdWlyZSjRB1N0b3JhZ2UpLndyaXRlSlNPTijRE3NjaGVkLnNldHRpbmdzLmpzb24sc2V0dGluZ3MpO307////jgkAAHNjaGVkLnNldHRpbmdzLmpz");
  base64DecodeToExistingUint8Array(bufferView, 95896, "TW9kdWxlcy5hZGRDYWNoZWQo0QRidXp6LKooKXtleHBvcnRzLnBhdHRlcm49cGF0dGVybqK4UHJvbWlzZShyZXNvbHZlonuqZG9CdXp6KCl7oyhwYXR0ZXJuiiIiKatyZXNvbHZlKCk7rGM9cGF0dGVyblvTXTtwYXR0ZXJuPXBhdHRlcm4uc3Vic3RyKNQBKTuuQlVaWl9XRUFLPTAuMjUsQlVaWl9TVFJPTkc91AE7rlNIT1JUX01TPdRkLE1FRElVTV9NUz3VyAAsTE9OR19NUz3V9AE7oyhjitEBLilCYW5nbGUuYnV6eihTSE9SVF9NUyxCVVpaX1dFQUspLnRoZW4oKCmic2V0VGltZW91dChkb0J1enos1GQpKTukoyhjitEBLClCYW5nbGUuYnV6eihNRURJVU1fTVMsQlVaWl9XRUFLKS50aGVuKCgponNldFRpbWVvdXQoZG9CdXp6LNRkKSk7pKMoY4rRAS0pQmFuZ2xlLmJ1enooTE9OR19NUyxCVVpaX1dFQUspLnRoZW4oKCmic2V0VGltZW91dChkb0J1enos1GQpKTukoyhjitEBOilCYW5nbGUuYnV6eihTSE9SVF9NUyxCVVpaX1NUUk9ORykudGhlbigoKaJzZXRUaW1lb3V0KGRvQnV6eizUZCkpO6SjKGOK0QE7KUJhbmdsZS5idXp6KE1FRElVTV9NUyxCVVpaX1NUUk9ORykudGhlbigoKaJzZXRUaW1lb3V0KGRvQnV6eizUZCkpO6SjKGOK0QE9KUJhbmdsZS5idXp6KExPTkdfTVMsQlVaWl9TVFJPTkcpLnRoZW4oKCmic2V0VGltZW91dChkb0J1enos1GQpKTukc2V0VGltZW91dChkb0J1enos1GQpO31kb0J1enooKTt9KTt9KTsKTW9kdWxlcy5hZGRDYWNoZWQo0QlidXp6X21lbnUsqigpe2V4cG9ydHMucGF0dGVybj2qKHZhbHVlLGNhbGxiYWNrKXuscGF0dGVybnM9WyIiLNEBLizRATos0QIuLizRAjo6LNEBLCzRATss0QIsLCzRAjs7LNEBLSzRAT0s0QItLSzRAj09LNEDLi4uLNEDOjo6LNEDLS0tLNEDOzs7LNEDPT09XTure3ZhbHVlOk1hdGgubWF4KNMscGF0dGVybnMuaW5kZXhPZih2YWx1ZSkpLG1pbjrTLG1heDpwYXR0ZXJucy5sZW5ndGgt1AEsZm9ybWF0OnaicGF0dGVybnNbdl2g0QNPZmYsb25jaGFuZ2U6dqJ7cmVxdWlyZSjRBGJ1enopLnBhdHRlcm4ocGF0dGVybnNbdl0pO2NhbGxiYWNrKHBhdHRlcm5zW3ZdKTt9fTt9fSk7KKooYmFjayl7rXNldHRpbmdzPXJlcXVpcmUo0QVzY2hlZCkuZ2V0U2V0dGluZ3MoKTtFLnNob3dNZW51KHsiIjp70QV0aXRsZTrRCVNjaGVkdWxlcn0s0QY8IEJhY2s6KCmiYmFjaygpLNEOVW5sb2NrIGF0IEJ1eno6e3ZhbHVlOnNldHRpbmdzLnVubG9ja0F0QnV6eixvbmNoYW5nZTp2ontzZXR0aW5ncy51bmxvY2tBdEJ1eno9djtyZXF1aXJlKNEFc2NoZWQpLnNldFNldHRpbmdzKHNldHRpbmdzKTt9fSzRFURlbGV0ZSBFeHBpcmVkIFRpbWVyczp7dmFsdWU6c2V0dGluZ3MuZGVmYXVsdERlbGV0ZUV4cGlyZWRUaW1lcnMsb25jaGFuZ2U6dqJ7c2V0dGluZ3MuZGVmYXVsdERlbGV0ZUV4cGlyZWRUaW1lcnM9djtyZXF1aXJlKNEFc2NoZWQpLnNldFNldHRpbmdzKHNldHRpbmdzKTt9fSzRE0RlZmF1bHQgQXV0byBTbm9vemU6e3ZhbHVlOnNldHRpbmdzLmRlZmF1bHRBdXRvU25vb3plLG9uY2hhbmdlOnaie3NldHRpbmdzLmRlZmF1bHRBdXRvU25vb3plPXY7cmVxdWlyZSjRBXNjaGVkKS5zZXRTZXR0aW5ncyhzZXR0aW5ncyk7fX0s0Q5EZWZhdWx0IFNub296ZTp7dmFsdWU6c2V0dGluZ3MuZGVmYXVsdFNub296ZU1pbGxpcy82MDAwMCxtaW461AUsbWF4OtQeLHN0ZXA61AUsZm9ybWF0OnaidivRAW0sb25jaGFuZ2U6dqJ7c2V0dGluZ3MuZGVmYXVsdFNub296ZU1pbGxpcz12KjYwMDAwO3JlcXVpcmUo0QVzY2hlZCkuc2V0U2V0dGluZ3Moc2V0dGluZ3MpO319LNEKQnV6eiBDb3VudDp7dmFsdWU6c2V0dGluZ3MuYnV6ekNvdW50irY/1AQ6c2V0dGluZ3MuYnV6ekNvdW50LG1pbjrUBCxtYXg61A8sc3RlcDrUASxmb3JtYXQ6dqJ2i9QEP9EHRm9yZXZlcjp2LG9uY2hhbmdlOnaie3NldHRpbmdzLmJ1enpDb3VudD12i9QEP7Y6djtyZXF1aXJlKNEFc2NoZWQpLnNldFNldHRpbmdzKHNldHRpbmdzKTt9fSzRDUJ1enogSW50ZXJ2YWw6e3ZhbHVlOnNldHRpbmdzLmJ1enpJbnRlcnZhbE1pbGxpcy/V6AMsbWluOtQBLG1heDrUBSxzdGVwOtQBLGZvcm1hdDp2onYr0QFzLG9uY2hhbmdlOnaie3NldHRpbmdzLmJ1enpJbnRlcnZhbE1pbGxpcz12KtXoAztyZXF1aXJlKNEFc2NoZWQpLnNldFNldHRpbmdzKHNldHRpbmdzKTt9fSzRFURlZmF1bHQgQWxhcm0gUGF0dGVybjpyZXF1aXJlKNEJYnV6el9tZW51KS5wYXR0ZXJuKHNldHRpbmdzLmRlZmF1bHRBbGFybVBhdHRlcm4sdqJ7c2V0dGluZ3MuZGVmYXVsdEFsYXJtUGF0dGVybj12O3JlcXVpcmUo0QVzY2hlZCkuc2V0U2V0dGluZ3Moc2V0dGluZ3MpO30pLNEVRGVmYXVsdCBUaW1lciBQYXR0ZXJuOnJlcXVpcmUo0QlidXp6X21lbnUpLnBhdHRlcm4oc2V0dGluZ3MuZGVmYXVsdFRpbWVyUGF0dGVybix2ontzZXR0aW5ncy5kZWZhdWx0VGltZXJQYXR0ZXJuPXY7cmVxdWlyZSjRBXNjaGVkKS5zZXRTZXR0aW5ncyhzZXR0aW5ncyk7fSl9KTt9Kf//eA4AAHNjaGVkLmNsa2luZm8uanM=");
  base64DecodeToExistingUint8Array(bufferView, 98376, "TW9kdWxlcy5hZGRDYWNoZWQo0Qp0aW1lX3V0aWxzLKooKXtleHBvcnRzLmVuY29kZVRpbWU9KHRpbWUpont0aW1lPXNhZmVUaW1lKHRpbWUpO6t0aW1lLmQqODY0MDAwMDArdGltZS5oKjM2MDAwMDArdGltZS5tKjYwMDAwK3RpbWUucyrV6AM7fapzYWZlVGltZSh0aW1lKXure2Q6dGltZS5koNMsaDp0aW1lLmig0yxtOnRpbWUubaDTLHM6dGltZS5zoNN9O31leHBvcnRzLmRlY29kZVRpbWU9KG1pbGxpcymie6Mov21pbGxpc43RBm51bWJlcimw0RxPbmx5IGEgbnVtYmVyIGNhbiBiZSBkZWNvZGVkO6xkPU1hdGguZmxvb3IobWlsbGlzLzg2NDAwMDAwKTttaWxsaXOXZCo4NjQwMDAwMDusaD1NYXRoLmZsb29yKG1pbGxpcy8zNjAwMDAwKTttaWxsaXOXaCozNjAwMDAwO6xtPU1hdGguZmxvb3IobWlsbGlzLzYwMDAwKTttaWxsaXOXbSo2MDAwMDuscz1NYXRoLmZsb29yKG1pbGxpcy/V6AMpO6t7ZDpkLGg6aCxtOm0sczpzfTt9ZXhwb3J0cy5mb3JtYXRUaW1lPSh2YWx1ZSmie6x0aW1lPXNhZmVUaW1lKL92YWx1ZYvRBm9iamVjdD92YWx1ZTpleHBvcnRzLmRlY29kZVRpbWUodmFsdWUpKTt0aW1lLmiWdGltZS5kKtQYO6t0aW1lLmgr0QE6KyjRATArdGltZS5tKS5zdWJzdHIo1P4pO31leHBvcnRzLmZvcm1hdER1cmF0aW9uPSh2YWx1ZSxjb21wYWN0KaJ7Y29tcGFjdD1jb21wYWN0oLU7rGR1cmF0aW9uPSIiO6x0aW1lPXNhZmVUaW1lKL92YWx1ZYvRBm9iamVjdD92YWx1ZTpleHBvcnRzLmRlY29kZVRpbWUodmFsdWUpKTujKHRpbWUuZD7TKWR1cmF0aW9ulnRpbWUuZCvRAmQgO6ModGltZS5oPtMpZHVyYXRpb26WdGltZS5oK9ECaCA7oyh0aW1lLm0+0ylkdXJhdGlvbpZ0aW1lLm0r0QJtIDujKHRpbWUucz7TKWR1cmF0aW9ulnRpbWUucyvRAXNkdXJhdGlvbj1kdXJhdGlvbi50cmltKCmrY29tcGFjdD9kdXJhdGlvbi5yZXBsYWNlKNEBICwiIik6ZHVyYXRpb247fWV4cG9ydHMuZ2V0Q3VycmVudFRpbWVNaWxsaXM9KCmie6x0aW1lPbhEYXRlKCk7qyh0aW1lLmdldEhvdXJzKCkq1RAOK3RpbWUuZ2V0TWludXRlcygpKtQ8K3RpbWUuZ2V0U2Vjb25kcygpKSrV6AM7fX0pOyiqKCl7qmdldEFsYXJtVmFsdWUoYSl7rW1pbj1NYXRoLnJvdW5kKHJlcXVpcmUo0QVzY2hlZCkuZ2V0VGltZVRvQWxhcm0oYSkvKNQ8KtXoAykpO6MoIW1pbimr0zurZ2V0QWxhcm1NYXgoYSktbWluO32qZ2V0QWxhcm1NYXgoYSl7oyhhLnRpbWVyKatNYXRoLnJvdW5kKGEudGltZXIvKNQ8KtXoAykpO6vVoAU7fapnZXRBbGFybUljb24oYSl7oyhhLm9uKXujKGEudGltZXIpq9FMGBiB");
  base64DecodeToExistingUint8Array(bufferView, 99664, "B//gB//gAYGAAYGAAYGAAP8AAP8AAH4AADwAADwAAH4AAOcAAMMAAYGAAYGAAYGAB//gB//g");
  base64DecodeToExistingUint8Array(bufferView, 99727, "O6MoYS5kYXRlKavRTBgYgQ==");
  base64DecodeToExistingUint8Array(bufferView, 99753, "D//wH//4GAAYGAAYGAAYH//4H//4H//4H/74H/z4H/n4HzP4H4f4H8/4H//4H//4H//4D//w");
  base64DecodeToExistingUint8Array(bufferView, 99816, "O6vRTBgYgQAAAAAAAAAGAGAOAHAcfjg5/5wD/8AH/+AP5/AP5/Af5/gf5/gf5/gf5/gf4fgf+PgP/vAP//AH/+AD/8AB/4AAfgAAAAAAAAA7faR7oyhhLnRpbWVyKavRTBgYgQ==");
  base64DecodeToExistingUint8Array(bufferView, 99926, "B//gB//gAYGAAYGAAYGAAP8AAP8AAH4AADwAADwAAH4AAOR4AMH+AYG2AYMDAYOHB/OHB/MDAAG2AAH+AAB4O6MoYS5kYXRlKavRSxgYAQ==");
  base64DecodeToExistingUint8Array(bufferView, 100014, "D//wH//4GAAYGAAYGAAYH//4H//4H//4H/74H/wAH/gAHzB4H4H+H8m2H/MDH/OHH/OHD/MDAAG2AAH+AAB4O6vRTBgYgQAAAAAAAAAGAGAOAHAcfjg5/5wD/8AH/+AP5/AP5/Af5/gf5/gf5wAf5gAf4Hgf+f4P+bYP8wMH84cD84cB8wMAebYAAf4AAHg7fX2qZ2V0QWxhcm1UZXh0KGEpe6MoYS50aW1lcil7oyghYS5vbimr0QNvZmY7rXRpbWU9TWF0aC5yb3VuZChyZXF1aXJlKNEFc2NoZWQpLmdldFRpbWVUb0FsYXJtKGEpLyjUPCrV6AMpKTujKHRpbWU+1DwpdGltZT1NYXRoLnJvdW5kKHRpbWUv1DwpK9EBaDukdGltZZbRAW07q3RpbWU7faMoYS5kYXRlKXuuZD24RGF0ZShhLmRhdGUpO6tgJHtkLmdldERhdGUoKX0gJHtyZXF1aXJlKCJsb2NhbGUiKS5tb250aChkLCAxKX1gO32rcmVxdWlyZSjRCnRpbWVfdXRpbHMpLmZvcm1hdFRpbWUoYS50KTt9qmdldEFsYXJtT3JkZXIoYSl7rXZhbD1yZXF1aXJlKNEFc2NoZWQpLmdldFRpbWVUb0FsYXJtKGEpO6Mov3ZhbIrRCXVuZGVmaW5lZCmrODY0MDAq1egDO6t2YWw7fapnZXRSZWZyZXNoSW50ZXJ2YWxzKGEpe65taW51dGU91Dwq1egDO65oYWxmaG91cj3UHiptaW51dGU7rmhvdXI91AIqaGFsZmhvdXI7rW1zZWNzPXJlcXVpcmUo0QVzY2hlZCkuZ2V0VGltZVRvQWxhcm0oYSk7oyi/bXNlY3OK0Ql1bmRlZmluZWSgbXNlY3OK0ymrW107oyhtc2Vjcz5ob3VyKXutcmVtYWluPShtc2VjcyttaW51dGUpJWhhbGZob3VyO6MocmVtYWluPNQbKm1pbnV0ZZ5yZW1haW6M0ymrW2hhbGZob3VyLHJlbWFpbl07q1toYWxmaG91cixtc2Vjcy1ob3VyXTt9pHujKCFhLnRpbWVyKatbXTurW21pbnV0ZSxtc2Vjc107fX2qX2RvSW50ZXJ2YWwoaW50ZXJ2YWwpe6tzZXRUaW1lb3V0KCgponuvLmVtaXQo0QZyZWRyYXcpO68uaW50ZXJ2YWw9c2V0SW50ZXJ2YWwoKCmie68uZW1pdCjRBnJlZHJhdyk7fSxpbnRlcnZhbCk7fSxpbnRlcnZhbCk7fapfZG9Td2l0Y2hUaW1lb3V0KGEsc3dpdGNoVGltZW91dCl7q3NldFRpbWVvdXQoKCmie68uZW1pdCjRBnJlZHJhdyk7Y2xlYXJJbnRlcnZhbCivLmludGVydmFsKTuvLmludGVydmFsPbc7rHRtcD1nZXRSZWZyZXNoSW50ZXJ2YWxzKGEpO6xpbnRlcnZhbD10bXBb0107rHN3aXRjaFRpbWVvdXQ9dG1wW9QBXTujKCFpbnRlcnZhbCmrO68uaW50ZXJ2YWw9X2RvSW50ZXJ2YWwuY2FsbCivLGludGVydmFsKTuvLnN3aXRjaFRpbWVvdXQ9X2RvU3dpdGNoVGltZW91dC5jYWxsKK8sYSxzd2l0Y2hUaW1lb3V0KTt9LHN3aXRjaFRpbWVvdXQpO32sYWxsPXJlcXVpcmUo0QdTdG9yYWdlKS5yZWFkSlNPTijRCnNjaGVkLmpzb24s1AEpoFtdO6xhbGFybUl0ZW1zPXtuYW1lOtEGQWxhcm1zLGltZzpnZXRBbGFybUljb24oe29uOtQBfSksZHluYW1pYzq0LGl0ZW1zOmFsbC5maWx0ZXIoYaIhYS5hcHBpZCkuc29ydCgoYSxiKaJnZXRBbGFybU9yZGVyKGEpLWdldEFsYXJtT3JkZXIoYikpLm1hcChhoih7bmFtZTq2LGhhc1JhbmdlOrQsZ2V0Oigpoih7dGV4dDpnZXRBbGFybVRleHQoYSksaW1nOmdldEFsYXJtSWNvbihhKSx2OmdldEFsYXJtVmFsdWUoYSksbWluOtMsbWF4OmdldEFsYXJtTWF4KGEpfSksc2hvdzqqKCl7rHRtcD1nZXRSZWZyZXNoSW50ZXJ2YWxzKGEpO6xpbnRlcnZhbD10bXBb0107rHN3aXRjaFRpbWVvdXQ9dG1wW9QBXTujKCFpbnRlcnZhbCmrO68uaW50ZXJ2YWw9X2RvSW50ZXJ2YWwuY2FsbCivLGludGVydmFsKTuvLnN3aXRjaFRpbWVvdXQ9X2RvU3dpdGNoVGltZW91dC5jYWxsKK8sYSxzd2l0Y2hUaW1lb3V0KTt9LGhpZGU6qigpe6Mory5pbnRlcnZhbCljbGVhckludGVydmFsKK8uaW50ZXJ2YWwpO6Mory5zd2l0Y2hUaW1lb3V0KWNsZWFyVGltZW91dCivLnN3aXRjaFRpbWVvdXQpO68uaW50ZXJ2YWw9tzuvLnN3aXRjaFRpbWVvdXQ9tzt9LHJ1bjqqKCl7oyhhLmRhdGUpqzthLm9uPSFhLm9uO2EubGFzdD3TO6MoYS5vbp5hLnRpbWVyKXJlcXVpcmUo0QVzY2hlZCkucmVzZXRUaW1lcihhKTuvLmVtaXQo0QZyZWRyYXcpO3JlcXVpcmUo0QVzY2hlZCkuc2V0QWxhcm1zKGFsbCk7cmVxdWlyZSjRBXNjaGVkKS5yZWxvYWQoKTt9fSkpLH07q2FsYXJtSXRlbXM7fSkCAQAAc2NoZWQuaW5mbw==");
  base64DecodeToExistingUint8Array(bufferView, 102112, "eyJpZCI6InNjaGVkIiwibmFtZSI6IlNjaGVkdWxlciIsInR5cGUiOiJzY2hlZHVsZXIiLCJpY29uIjoic2NoZWQuaW1nIiwidmVyc2lvbiI6IjAuMzIiLCJ0YWdzIjoidG9vbCxzeXN0ZW0sYWxhcm0sY2xraW5mbyIsImZpbGVzIjoic2NoZWQuaW5mbyxzY2hlZC5ib290LmpzLHNjaGVkLmpzLHNjaGVkLmltZyxzY2hlZCxzY2hlZC5zZXR0aW5ncy5qcyxzY2hlZC5jbGtpbmZvLmpzIiwiZGF0YSI6InNjaGVkLmpzb24sc2NoZWQuc2V0dGluZ3MuanNvbiJ9//+jAQAAd2lkYWxhcm0ud2lkLmpz");
  base64DecodeToExistingUint8Array(bufferView, 102404, "V0lER0VUU1vRBWFsYXJtXT17YXJlYTrRAnRsLHdpZHRoOtMsZHJhdzqqKCl7oyivLndpZHRoKWcucmVzZXQoKS5kcmF3SW1hZ2Uo0UsYGAEAAAAAAAAAGAAOGHAMPDAY/xgZ/5gx/4wz/8wz/8wD/8AD/8AD/8AD/8AD/8AD/8AH/+AP//AP//AAAAAAPAAAGAAAAAAAAAAsry54LK8ueSk7fSxyZWxvYWQ6qigpe1dJREdFVFNb0QVhbGFybV0ud2lkdGg9KHJlcXVpcmUo0QdTdG9yYWdlKS5yZWFkSlNPTijRCnNjaGVkLmpzb24s1AEpoFtdKS5zb21lKGFsYXJtomFsYXJtLm9unihhbGFybS5oaWRkZW6NtCkpP9QYOtM7fX07V0lER0VUU1vRBWFsYXJtXS5yZWxvYWQoKTtCYW5nbGUub24o0QthbGFybVJlbG9hZCwoKaJ7oyhXSURHRVRTW9EFYWxhcm1dKXtXSURHRVRTW9EFYWxhcm1dLnJlbG9hZCgpO0JhbmdsZS5kcmF3V2lkZ2V0cygpO319KTv/jAAAAHdpZGFsYXJtLmluZm8=");
  base64DecodeToExistingUint8Array(bufferView, 102856, "eyJpZCI6IndpZGFsYXJtIiwibmFtZSI6IkFsYXJtcyBXaWRnZXQiLCJ0eXBlIjoid2lkZ2V0IiwidmVyc2lvbiI6IjAuMDIiLCJ0YWdzIjoidG9vbCxhbGFybSx3aWRnZXQiLCJmaWxlcyI6IndpZGFsYXJtLmluZm8sd2lkYWxhcm0ud2lkLmpzIn1YPAAAYWxhcm0uYXBwLmpz");
  base64DecodeToExistingUint8Array(bufferView, 103028, "TW9kdWxlcy5hZGRDYWNoZWQo0QpkYXRlX3V0aWxzLKooKXtleHBvcnRzLmRvdz0oaSxhYmJyZXZpYXRlZCmie6xkb3c9cmVxdWlyZSjRBmxvY2FsZSkuZG93KHtnZXREYXk6KCmiKGl80ykl1Ad9LGFiYnJldmlhdGVkKS5zbGljZSjTLChhYmJyZXZpYXRlZIrUAik/1AE61GQpO6thYmJyZXZpYXRlZIrUAj9kb3cudG9VcHBlckNhc2UoKTpkb3c7fWV4cG9ydHMuZG93cz0oZmlyc3REYXlPZldlZWssYWJicmV2aWF0ZWQponusZG93cz1bXTunKKxpPdM7aTzUBztpmCl7ZG93cy5wdXNoKGV4cG9ydHMuZG93KGkrKGZpcnN0RGF5T2ZXZWVroNMpLGFiYnJldmlhdGVkKSl9q2FiYnJldmlhdGVkitQCP2Rvd3MubWFwKGRvd6Jkb3cudG9VcHBlckNhc2UoKSk6ZG93czt9O2V4cG9ydHMubW9udGg9KGksYWJicmV2aWF0ZWQponusbW9udGg9cmVxdWlyZSjRBmxvY2FsZSkubW9udGgoe2dldE1vbnRoOigpoijUCysoaXzTKSkl1Ax9LGFiYnJldmlhdGVkKS5zbGljZSjTLChhYmJyZXZpYXRlZIrUAik/1AE61GQpO6thYmJyZXZpYXRlZIrUAj9tb250aC50b1VwcGVyQ2FzZSgpOm1vbnRoO31leHBvcnRzLm1vbnRocz0oYWJicmV2aWF0ZWQponusbW9udGhzPVtdO6xsb2NhbGU9cmVxdWlyZSjRBmxvY2FsZSk7pyisaT3TO2k81Aw7aZgpbW9udGhzLnB1c2gobG9jYWxlLm1vbnRoKHtnZXRNb250aDooKaJpfSxhYmJyZXZpYXRlZCkuc2xpY2Uo0ywoYWJicmV2aWF0ZWSK1AIpP9QBOtRkKSk7q2FiYnJldmlhdGVkitQCP21vbnRocy5tYXAobW9udGiibW9udGgudG9VcHBlckNhc2UoKSk6bW9udGhzO307fSk7Ck1vZHVsZXMuYWRkQ2FjaGVkKNEKdGltZV91dGlscyyqKCl7ZXhwb3J0cy5lbmNvZGVUaW1lPSh0aW1lKaJ7dGltZT1zYWZlVGltZSh0aW1lKTurdGltZS5kKjg2NDAwMDAwK3RpbWUuaCozNjAwMDAwK3RpbWUubSo2MDAwMCt0aW1lLnMq1egDO32qc2FmZVRpbWUodGltZSl7q3tkOnRpbWUuZKDTLGg6dGltZS5ooNMsbTp0aW1lLm2g0yxzOnRpbWUuc6DTfTt9ZXhwb3J0cy5kZWNvZGVUaW1lPShtaWxsaXMponujKL9taWxsaXON0QZudW1iZXIpsNEcT25seSBhIG51bWJlciBjYW4gYmUgZGVjb2RlZDusZD1NYXRoLmZsb29yKG1pbGxpcy84NjQwMDAwMCk7bWlsbGlzl2QqODY0MDAwMDA7rGg9TWF0aC5mbG9vcihtaWxsaXMvMzYwMDAwMCk7bWlsbGlzl2gqMzYwMDAwMDusbT1NYXRoLmZsb29yKG1pbGxpcy82MDAwMCk7bWlsbGlzl20qNjAwMDA7rHM9TWF0aC5mbG9vcihtaWxsaXMv1egDKTure2Q6ZCxoOmgsbTptLHM6c307fWV4cG9ydHMuZm9ybWF0VGltZT0odmFsdWUponusdGltZT1zYWZlVGltZSi/dmFsdWWL0QZvYmplY3Q/dmFsdWU6ZXhwb3J0cy5kZWNvZGVUaW1lKHZhbHVlKSk7dGltZS5olnRpbWUuZCrUGDurdGltZS5oK9EBOiso0QEwK3RpbWUubSkuc3Vic3RyKNT+KTt9ZXhwb3J0cy5mb3JtYXREdXJhdGlvbj0odmFsdWUsY29tcGFjdCmie2NvbXBhY3Q9Y29tcGFjdKC1O6xkdXJhdGlvbj0iIjusdGltZT1zYWZlVGltZSi/dmFsdWWL0QZvYmplY3Q/dmFsdWU6ZXhwb3J0cy5kZWNvZGVUaW1lKHZhbHVlKSk7oyh0aW1lLmQ+0ylkdXJhdGlvbpZ0aW1lLmQr0QJkIDujKHRpbWUuaD7TKWR1cmF0aW9ulnRpbWUuaCvRAmggO6ModGltZS5tPtMpZHVyYXRpb26WdGltZS5tK9ECbSA7oyh0aW1lLnM+0ylkdXJhdGlvbpZ0aW1lLnMr0QFzZHVyYXRpb249ZHVyYXRpb24udHJpbSgpq2NvbXBhY3Q/ZHVyYXRpb24ucmVwbGFjZSjRASAsIiIpOmR1cmF0aW9uO31leHBvcnRzLmdldEN1cnJlbnRUaW1lTWlsbGlzPSgponusdGltZT24RGF0ZSgpO6sodGltZS5nZXRIb3VycygpKtUQDit0aW1lLmdldE1pbnV0ZXMoKSrUPCt0aW1lLmdldFNlY29uZHMoKSkq1egDO319KTsKTW9kdWxlcy5hZGRDYWNoZWQo0QRidXp6LKooKXtleHBvcnRzLnBhdHRlcm49cGF0dGVybqK4UHJvbWlzZShyZXNvbHZlonuqZG9CdXp6KCl7oyhwYXR0ZXJuiiIiKatyZXNvbHZlKCk7rGM9cGF0dGVyblvTXTtwYXR0ZXJuPXBhdHRlcm4uc3Vic3RyKNQBKTuuQlVaWl9XRUFLPTAuMjUsQlVaWl9TVFJPTkc91AE7rlNIT1JUX01TPdRkLE1FRElVTV9NUz3VyAAsTE9OR19NUz3V9AE7oyhjitEBLilCYW5nbGUuYnV6eihTSE9SVF9NUyxCVVpaX1dFQUspLnRoZW4oKCmic2V0VGltZW91dChkb0J1enos1GQpKTukoyhjitEBLClCYW5nbGUuYnV6eihNRURJVU1fTVMsQlVaWl9XRUFLKS50aGVuKCgponNldFRpbWVvdXQoZG9CdXp6LNRkKSk7pKMoY4rRAS0pQmFuZ2xlLmJ1enooTE9OR19NUyxCVVpaX1dFQUspLnRoZW4oKCmic2V0VGltZW91dChkb0J1enos1GQpKTukoyhjitEBOilCYW5nbGUuYnV6eihTSE9SVF9NUyxCVVpaX1NUUk9ORykudGhlbigoKaJzZXRUaW1lb3V0KGRvQnV6eizUZCkpO6SjKGOK0QE7KUJhbmdsZS5idXp6KE1FRElVTV9NUyxCVVpaX1NUUk9ORykudGhlbigoKaJzZXRUaW1lb3V0KGRvQnV6eizUZCkpO6SjKGOK0QE9KUJhbmdsZS5idXp6KExPTkdfTVMsQlVaWl9TVFJPTkcpLnRoZW4oKCmic2V0VGltZW91dChkb0J1enos1GQpKTukc2V0VGltZW91dChkb0J1enos1GQpO31kb0J1enooKTt9KTt9KTsKTW9kdWxlcy5hZGRDYWNoZWQo0QlidXp6X21lbnUsqigpe2V4cG9ydHMucGF0dGVybj2qKHZhbHVlLGNhbGxiYWNrKXuscGF0dGVybnM9WyIiLNEBLizRATos0QIuLizRAjo6LNEBLCzRATss0QIsLCzRAjs7LNEBLSzRAT0s0QItLSzRAj09LNEDLi4uLNEDOjo6LNEDLS0tLNEDOzs7LNEDPT09XTure3ZhbHVlOk1hdGgubWF4KNMscGF0dGVybnMuaW5kZXhPZih2YWx1ZSkpLG1pbjrTLG1heDpwYXR0ZXJucy5sZW5ndGgt1AEsZm9ybWF0OnaicGF0dGVybnNbdl2g0QNPZmYsb25jaGFuZ2U6dqJ7cmVxdWlyZSjRBGJ1enopLnBhdHRlcm4ocGF0dGVybnNbdl0pO2NhbGxiYWNrKHBhdHRlcm5zW3ZdKTt9fTt9fSk7CkJhbmdsZS5sb2FkV2lkZ2V0cygpOwpCYW5nbGUuZHJhd1dpZGdldHMoKTsKrnNldHRpbmdzPU9iamVjdC5hc3NpZ24oe3Nob3dDb25maXJtOrQsc2hvd0F1dG9Tbm9vemU6tCxzaG93SGlkZGVuOrR9LHJlcXVpcmUo0QdTdG9yYWdlKS5yZWFkSlNPTijRCmFsYXJtLmpzb24s1AEpoHt9KTsKrmZpcnN0RGF5T2ZXZWVrPShyZXF1aXJlKNEHU3RvcmFnZSkucmVhZEpTT04o0QxzZXR0aW5nLmpzb24stCmge30pLmZpcnN0RGF5T2ZXZWVroNM7Cq5XT1JLREFZUz3UPjsKrldFRUtFTkQ9Zmlyc3REYXlPZldlZWs/1cAAOtRBOwquRVZFUllfREFZPWZpcnN0RGF5T2ZXZWVrP9X+ADrUfzsKrklOVEVSVkFMUz1b0QNkYXks0QR3ZWVrLNEFbW9udGgs0QR5ZWFyXTsKrklOVEVSVkFMX0xBQkVMUz1b0QNEYXks0QRXZWVrLNEFTW9udGgs0QRZZWFyXTsKrmljb25BbGFybU9uPdEBACvRTBgYgQAAAAAAAAAGAGAOAHAcfjg5/5wD/8AH/+AP5/AP5/Af5/gf5/gf5/gf5/gf4fgf+PgP/vAP//AH/+AD/8AB/4AAfgAAAAAAAAA7rmljb25BbGFybU9mZj3RAQArKGcudGhlbWUuZGFyaz/RUBgYwQD/////AAAAAAAABgBgDgBwHH44Of+cA//AB//gD+fwD+fwH+f4H+f4H+cAH+YAH+B4H/n+D/m2D/MDB/OHA/OHAfMDAHm2AAH+AAB4OtFQGBjBAP//AAAAAAAAAAAGAGAOAHAcfjg5/5wD/8AH/+AP5/AP5/Af5/gf5/gf5wAf5gAf4Hgf+f4P+bYP8wMH84cD84cB8wMAebYAAf4AAHgpO65pY29uVGltZXJPbj3RAQArKGcudGhlbWUuZGFyaz/RUBgYwQD/////");
  base64DecodeToExistingUint8Array(bufferView, 106682, "B//gB//gAYGAAYGAAYGAAP8AAP8AAH4AADwAADwAAH4AAOcAAMMAAYGAAYGAAYGAB//gB//g");
  base64DecodeToExistingUint8Array(bufferView, 106745, "OtFQGBjBAP//");
  base64DecodeToExistingUint8Array(bufferView, 106765, "B//gB//gAYGAAYGAAYGAAP8AAP8AAH4AADwAADwAAH4AAOcAAMMAAYGAAYGAAYGAB//gB//g");
  base64DecodeToExistingUint8Array(bufferView, 106828, "KTuuaWNvblRpbWVyT2ZmPdEBACsoZy50aGVtZS5kYXJrP9FQGBjBAP////8=");
  base64DecodeToExistingUint8Array(bufferView, 106881, "B//gB//gAYGAAYGAAYGAAP8AAP8AAH4AADwAADwAAH4AAOR4AMH+AYG2AYMDAYOHB/OHB/MDAAG2AAH+AAB4OtFQGBjBAP//");
  base64DecodeToExistingUint8Array(bufferView, 106964, "");
  base64DecodeToExistingUint8Array(bufferView, 118508, "MDCEBmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmERFmZmZmZmZmZmZmZmZmZmYRERFmZmZmERFmZmZmERERZmZmZmZmZhERERERZmZmERFmZmYREREREWZmZmZmYREREREWZmbMzMzMZmZhERERERZmZmZmERERERFmzMzMzMzMzMxmERERERFmZmZhERERERbMzMzMzMzMzMzMYREREREWZmZhERERERzMzMzMzMzMzMzMwREREREWZmYRERERFMzMzEQz//8zRMzMzEERERERZmYRERERTMzMQ////////zTMzMQRERERZmYREREUzMzD//////////88zMxBERERZmYRERFMzMQ/////8A/////zTMzEERERZmYRERHMzE//////8A//////9MzMERERZmYREWzMxP//////8A///////0zMxhERZmZhFszMw///////8A///////zzMzGEWZmZhZszMP///////8A////////PMzGYWZmZmbMzE////////8A////////9MzMZmZmZmbMzD////////8A////////88zMZmZmZmbMxP////////8A/////////0zMZmZmZmbMxP////////8A/////////0zMZmZmZmzMw/////////8A/////////zzMxmZmZmzMw/////////8A/////////zzMxmZmZmzMz/////////MAP/////////zMxmZmZmzMz/////////BVD/////////zMxmZmZmzMz/////////BVA/////////zMxmZmZmzMz////////zQAAD////////zMxmZmZmzMw///////80PzAAP//////zzMxmZmZmzMw///////ND//MAA//////zzMxmZmZmbMxP/////zQ///8wAD/////0zMZmZmZmbMxP////80P////zAAP////0zMZmZmZmbMzD////ND//////MC////88zMZmZmZmbMzE///zQ///////8/////9MzMZmZmZmZszMP/80P/////////////PMzGZmZmZmZszMw//z/////////////zzMzGZmZmZmZmzMxP///////////////0zMxmZmZmZmZmbMzE//////////////9MzMZmZmZmZmZmbMzMQ////////////zTMzMZmZmZmZmZmZszMzD//////////88zMzGZmZmZmZmZmZmzMzMQ////////zTMzMxmZmZmZmZmZmZmFMzMzEQz//8zRMzMzEFmZmZmZmZmZmZhERzMzMzMzMzMzMzMwREWZmZmZmZmZmYRERbMzMzMzMzMzMzMYRERZmZmZmZmZmEREWZmzMzMzMzMzMxmZhERFmZmZmZmZmERFmZmZmbMzMzMZmZmZmERFmZmZmZmZmERZmZmZmZmZmZmZmZmZmYRFmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZhkEAABhbGFybS5zZXR0aW5ncy5qcw==");
  base64DecodeToExistingUint8Array(bufferView, 119696, "KKooYmFjayl7rXNldHRpbmdzPU9iamVjdC5hc3NpZ24oe3Nob3dDb25maXJtOrQsc2hvd0F1dG9Tbm9vemU6tCxzaG93SGlkZGVuOrR9LHJlcXVpcmUo0QdTdG9yYWdlKS5yZWFkSlNPTijRCmFsYXJtLmpzb24s1AEpoHt9KTuuc2F2ZT0oKaJyZXF1aXJlKNEHU3RvcmFnZSkud3JpdGUo0QphbGFybS5qc29uLHNldHRpbmdzKTuuREFURV9GT1JNQVRTPVvRB2RlZmF1bHQs0QRtbWRkXTuuREFURV9GT1JNQVRTX0xBQkVMUz1b0QdEZWZhdWx0LNEETU1ERF07rmFwcE1lbnU9eycnOnt0aXRsZTrRBWFsYXJtfSzRBjwgQmFjazpiYWNrLNEQTWVudSBEYXRlIEZvcm1hdDp7dmFsdWU6REFURV9GT1JNQVRTLmluZGV4T2Yoc2V0dGluZ3MubWVudURhdGVGb3JtYXSg0QdkZWZhdWx0KSxmb3JtYXQ6dqJEQVRFX0ZPUk1BVFNfTEFCRUxTW3ZdLG1pbjrTLG1heDpEQVRFX0ZPUk1BVFMubGVuZ3RoLdQBLG9uY2hhbmdlOnaie6Modj7TKXtzZXR0aW5ncy5tZW51RGF0ZUZvcm1hdD1EQVRFX0ZPUk1BVFNbdl07faR7vnNldHRpbmdzLm1lbnVEYXRlRm9ybWF0O31zYXZlKCk7fX0s0RVTaG93IE1lbnUgQXV0byBTbm9vemU6e3ZhbHVlOiEhc2V0dGluZ3Muc2hvd0F1dG9Tbm9vemUsb25jaGFuZ2U6dqJ7c2V0dGluZ3Muc2hvd0F1dG9Tbm9vemU9djtzYXZlKCk7fX0s0RFTaG93IE1lbnUgQ29uZmlybTp7dmFsdWU6ISFzZXR0aW5ncy5zaG93Q29uZmlybSxvbmNoYW5nZTp2ontzZXR0aW5ncy5zaG93Q29uZmlybT12O3NhdmUoKTt9fSzREFNob3cgTWVudSBIaWRkZW46e3ZhbHVlOiEhc2V0dGluZ3Muc2hvd0hpZGRlbixvbmNoYW5nZTp2ontzZXR0aW5ncy5zaG93SGlkZGVuPXY7c2F2ZSgpO319LNEPU2hvdyBNZW51IEdyb3VwOnt2YWx1ZTohIXNldHRpbmdzLnNob3dHcm91cCxvbmNoYW5nZTp2ontzZXR0aW5ncy5zaG93R3JvdXA9djtzYXZlKCk7fX0s0RJTaG93IFRleHQgT3ZlcmZsb3c6e3ZhbHVlOiEhc2V0dGluZ3Muc2hvd092ZXJmbG93LG9uY2hhbmdlOnaie3NldHRpbmdzLnNob3dPdmVyZmxvdz12O3NhdmUoKTt9fSx9O0Uuc2hvd01lbnUoYXBwTWVudSk7fSn////GAAAAYWxhcm0uaW5mbw==");
  base64DecodeToExistingUint8Array(bufferView, 120780, "eyJpZCI6ImFsYXJtIiwibmFtZSI6IkFsYXJtcyIsInNyYyI6ImFsYXJtLmFwcC5qcyIsImljb24iOiJhbGFybS5pbWciLCJ2ZXJzaW9uIjoiMC41MSIsInRhZ3MiOiJ0b29sLGFsYXJtIiwiZmlsZXMiOiJhbGFybS5pbmZvLGFsYXJtLmFwcC5qcyxhbGFybS5pbWcsYWxhcm0uc2V0dGluZ3MuanMiLCJkYXRhIjoiYWxhcm0uc2V0dGluZ3MuanNvbiJ9//8=");
  base64DecodeToExistingUint8Array(bufferView, 121001, "AQEBAQE=");
  base64DecodeToExistingUint8Array(bufferView, 121024, "");
  base64DecodeToExistingUint8Array(bufferView, 148580, "Pz8AADAAAAAAZGVlcFNsZWVwAHVuc2FmZUZsYXNoAHVuc3luY0ZpbGVzAHByZXRva2VuaXNlAGppdERlYnVnAG5vRXJyb3JTYXZl");
  base64DecodeToExistingUint8Array(bufferView, 148674, "B4AxAAAABwABgDIAAAAPAAGAMwAAABcACIA0AAAAHABYgDUAAAAiAHiANgAAACYAA4A3AAAAKwAAgDgAAAAxAACAOQAAADUAA4A6AAAAPAAYgDsAAABCANiBPAAAAGFuYWxvZwBnZXRJbmZvAGdldE1vZGUAbW9kZQBwdWxzZQBwd20AcmVhZAByZXNldABzZXQAdG9nZ2xlAHdyaXRlAHdyaXRlQXRUaW1lAAAAAAABAC0AAAAEABEAHwAAAAoAIQAuAAAAFgABAC8AAAAmAAVwPQAAACoABXA+AAAALwABABsAAAA2AAEAHgAAAEAACwA/AAAASAAJCQsAAABRABEADAAAAFYAAQAcAAAAWAAJAA0AAABeAAkJQAAAAGsACQlBAAAAeAARADAAAACBAAEACgAAAIoABHBCAAAAjwABABgAAACTAAFwQwAAAJgAB3BEAAAAoQAJCUUAAACsAAkJRgAAALcACQlHAAAAwQAJABAAAADPAAEAIQAAANQAAXBIAAAA2AABcEgAAADdAAFwSQAAAOIABHBKAAAA5gABcEsAAADwAAFwTAAAAPoAAQAmAAAA/wABACUAAAAHAQEAHQAAAAsBB3BNAAAADwERACIAAAAWAQkAIwAAAB0BKQATAAAAJQEJABoAAAApAQkAFAAAADEBCQARAAAAQAFJABIAAABHAQEAFwAAAEsBAXBOAAAAUAEBABUAAABXAQFwTwAAAF8BAQAWAAAAawERACQAAAByAQkADgAAAH4BAXBQAAAAhwEJAA8AAACRAQFwUQAAAJUBCQlSAAAAoQEJCVMAAACtAQkJVAAAALkBCQlVAAAAxAEJCVYAAADWAQVwVwAAAN4BSQAZAAAA5wEvAFgAAADyAegDWQAAAP4BAXBaAAAACAIJAFsAAAANAgkAXAAAABICyAFdAAAAIQIQAF4AAAAvAhAAXwAAADwCEABgAAAARwIBACAAAABPAgkAYQAAAGIC6AJiAAAAbwIMAGMAAAB7AkgAZAAAAIgCAABlAAAAjQIYAGYAAACSAggAZwAAAJcCCQBoAAAAqgIJAAkAAACvAgEAKAAAALICKQBpAAAAvQIBAGoAAADHAgcAawAAAM8CAXBsAAAA1gIBcGwAAADhAgsAbQAAAOoCCwBuAAAA8AIIAG8AAAD1Ag8AcAAAAAADSQBxAAAACQMhAXIAAAAQAyEBcwAAABcDIQF0AAAAHQNoBnUAAAAlA2AAdgAAACwDYAB3AAAAMwNgAHgAAAA5AxAAeQAAAD8DAQApAAAARwMJAHoAAABPAxgAewAAAFUDCAB8AAAAZgPJBX0AAAByAwgAfgAAAIQDOAB/AAAAjAPJBYAAAACXA0kDgQAAAKADSAKCAAAAqQMIAIM=");
  base64DecodeToExistingUint8Array(bufferView, 149728, "QUVTAEFycmF5AEFycmF5QnVmZmVyAEFycmF5QnVmZmVyVmlldwBCVE4AQlROMQBCYW5nbGUAQmx1ZXRvb3RoAEJvb2xlYW4ARGF0YVZpZXcARGF0ZQBFAEVycm9yAEZsb2F0MzJBcnJheQBGbG9hdDY0QXJyYXkARnVuY3Rpb24AR3JhcGhpY3MASElHSABJMkMASTJDMQBJbmZpbml0eQBJbnQxNkFycmF5AEludDMyQXJyYXkASW50OEFycmF5AEludGVybmFsRXJyb3IASlNPTgBMRUQATEVEMQBMRUQyAExPVwBMb29wYmFja0EATG9vcGJhY2tCAE1hdGgATW9kdWxlcwBOUkYATmFOAE51bWJlcgBPYmplY3QAT25lV2lyZQBQaW4AUHJvbWlzZQBSZWZlcmVuY2VFcnJvcgBSZWdFeHAAU1BJAFNQSTEAU2VyaWFsAFNlcmlhbDEAU3RvcmFnZUZpbGUAU3RyaW5nAFN5bnRheEVycm9yAFRlcm1pbmFsAFR5cGVFcnJvcgBVU0IAVWludDE2QXJyYXkAVWludDI0QXJyYXkAVWludDMyQXJyYXkAVWludDhBcnJheQBVaW50OENsYW1wZWRBcnJheQBWSUJSQVRFAFdhdmVmb3JtAGFuYWxvZ1JlYWQAYW5hbG9nV3JpdGUAYXJndW1lbnRzAGF0b2IAYnRvYQBjaGFuZ2VJbnRlcnZhbABjbGVhckludGVydmFsAGNsZWFyVGltZW91dABjbGVhcldhdGNoAGNvbnNvbGUAZGVjb2RlVVJJQ29tcG9uZW50AGRpZ2l0YWxQdWxzZQBkaWdpdGFsUmVhZABkaWdpdGFsV3JpdGUAZHVtcABlY2hvAGVkaXQAZW5jb2RlVVJJQ29tcG9uZW50AGV2YWwAZnMAZ2V0UGluTW9kZQBnZXRTZXJpYWwAZ2V0VGltZQBnbG9iYWwAZ2xvYmFsVGhpcwBpc0Zpbml0ZQBpc05hTgBsb2FkAHBhcnNlRmxvYXQAcGFyc2VJbnQAcGVlazE2AHBlZWszMgBwZWVrOABwaW5Nb2RlAHBva2UxNgBwb2tlMzIAcG9rZTgAcHJpbnQAcHJvY2VzcwByZXF1aXJlAHJlc2V0AHNldEJ1c3lJbmRpY2F0b3IAc2V0SW50ZXJ2YWwAc2V0U2xlZXBJbmRpY2F0b3IAc2V0VGltZQBzZXRUaW1lb3V0AHNldFdhdGNoAHNoaWZ0T3V0AHRyYWNlAAAAACEBhAAAAAgAAXCFAAAAEAAhAYYAAAAcACABhwAAACgAIQGIAAAALQDhAYkAAAAyACEBigAAADwAIAGLAAAARgABAIwAAABKAAAAjQAAAFYAGACOAAAAYwABAI8AAABsAAEAkAAAAHcAAQCRAAAAgQAJAJIAAACRAAEAkwAAAJwAAQCUAAAApAABAJUAAACvAAEAlgAAALsABACXAAAAyAAhAZgAAADOACABmQAAANQAAwCaAAAA4gADAJsAAADwAAMAnAAAAPsAAwCdAAAABwEDAJ4AAAAPAQMAnwAAABcBAwCgAAAAHwEDAKEAAAAoAWAAogAAAC4BCACjAAAAMwEAAKQAAAA/AQAApQAAAEMBCQCmAAAASwEAAKcAAABYARgAqAAAAGUBWwCpAAAAdwFbAKoAAACHAVsAqwAAAJMBWwCsAAAAnwE4AK0AAACwAQgArgAAALsBIACvAAAAyAFIGLAAAADWARgAsQAAAOIBOACyAAAA8AEYALMAAAD6AQgAtAAAAAUCOAC1AAAAFQIgALYAAAAiAkgAtwAAACgCAAC4AAAAMgIAALkAAAA/AgAAugAAAFACAAC7AAAAWAIgAbw=");
  base64DecodeToExistingUint8Array(bufferView, 151136, "YWNjZWxSZABhcHBSZWN0AGJhcm9tZXRlclJkAGJhcm9tZXRlcldyAGJlZXAAYnV6egBjb21wYXNzUmQAY29tcGFzc1dyAGRiZwBkcmF3V2lkZ2V0cwBmYWN0b3J5UmVzZXQAZ2V0QWNjZWwAZ2V0Q29tcGFzcwBnZXRHUFNGaXgAZ2V0SGVhbHRoU3RhdHVzAGdldExDRE1vZGUAZ2V0TG9nbwBnZXRPcHRpb25zAGdldFByZXNzdXJlAGdldFN0ZXBDb3VudABocm1SZABocm1XcgBpc0JhY2tsaWdodE9uAGlzQmFyb21ldGVyT24AaXNDaGFyZ2luZwBpc0NvbXBhc3NPbgBpc0dQU09uAGlzSFJNT24AaXNMQ0RPbgBpc0xvY2tlZABsY2RXcgBsb2FkAGxvYWRXaWRnZXRzAG9mZgBwcm9qZWN0AHJlc2V0Q29tcGFzcwBzZXRCYWNrbGlnaHQAc2V0QmFyb21ldGVyUG93ZXIAc2V0Q29tcGFzc1Bvd2VyAHNldEdQU1Bvd2VyAHNldEhSTVBvd2VyAHNldExDREJyaWdodG5lc3MAc2V0TENETW9kZQBzZXRMQ0RPZmZzZXQAc2V0TENET3ZlcmxheQBzZXRMQ0RQb3dlcgBzZXRMQ0RUaW1lb3V0AHNldExvY2tlZABzZXRPcHRpb25zAHNldFBvbGxJbnRlcnZhbABzZXRTdGVwQ291bnQAc2V0VUkAc2hvd0Nsb2NrAHNob3dMYXVuY2hlcgBzaG93UmVjb3ZlcnlNZW51AHNvZnRPZmYAdG91Y2hXcg==");
  base64DecodeToExistingUint8Array(bufferView, 151762, "CQC9AAAABgBIBr4AAAAKAPlPvwAAABMACQDAAAAAGgCIAMEAAAAeAP8PwgAAACMACADDAAAALQBPCMQAAAA2AEkCxQAAAEEAAADGAAAASAAAAMcAAABaAAEAyAAAAGIAAADJAAAAbQAAAMoAAAB7AHgAywAAAIoACQDMAAAAkwDMAM0AAACgAAcAzgAAAK4ABADPAAAAuQABANAAAADCAAEA0QAAAM0AAQDSAAAA2wABANMAAADkAAEA1AAAAPIACQHVAAAA/AAHANYAAAALAQQA1wAAABIBCwDYAAAAGQEAANkAAAAmAQAA2gAAADIBSQbbAAAAPwFIQtwAAABKASEB3QAAAFUBSQDeAAAAXwFhAt8AAABqAUgC4AAAAG8BAADhAAAAdgEkAOIAAACCAcgA4wAAAI4BDADkAAAAlwFIAOUAAACiARAA5gAAAKkBCADnAAAAsgEIAOgAAAC+ATgA6QAAAMoBSQDqAAAA1AEJAOsAAADdAUgA7AAAAOkBSQDtAAAA9AEJAO4AAAABAiAA7wAAAAcCAADwAAAAHAIPAPEAAAAgAgkA8gAAAC4CEQDzAAAAOwIJAPQAAABAAhEA9QAAAEkCEQD2AAAAVgLPAfc=");
  base64DecodeToExistingUint8Array(bufferView, 152240, "Q1JDMzIARkZUAEhTQnRvUkdCAGFzVVRGOABhc20AY2xpcABjb21waWxlZEMAY29udm9sdmUAZGVjb2RlVVRGOABkZWZyYWcAZHVtcEZyYWdtZW50YXRpb24AZHVtcFN0cgBkdW1wVGltZXJzAGR1bXBWYXJpYWJsZXMAZW5hYmxlV2F0Y2hkb2cAZnJvbVVURjgAZ2V0QWRkcmVzc09mAGdldEFuYWxvZ1ZSZWYAZ2V0QmF0dGVyeQBnZXRDbG9jawBnZXRDb25zb2xlAGdldEVycm9yRmxhZ3MAZ2V0RmxhZ3MAZ2V0UG93ZXJVc2FnZQBnZXRTaXplT2YAZ2V0VGVtcGVyYXR1cmUAaHdSYW5kAGlzVVRGOABraWNrV2F0Y2hkb2cAbG9ja0NvbnNvbGUAbG9va3VwTm9DYXNlAG1hcEluUGxhY2UAbWVtb3J5QXJlYQBtZW1vcnlNYXAAbmF0aXZlQ2FsbABwaXBlAHJlYm9vdAByZXZlcnNlQnl0ZQBzZXRCb290Q29kZQBzZXRDbG9jawBzZXRDb25zb2xlAHNldERTVABzZXRGbGFncwBzZXRQYXNzd29yZABzZXRUaW1lWm9uZQBzaG93QWxlcnQAc2hvd01lbnUAc2hvd01lc3NhZ2UAc2hvd1Byb21wdABzaG93U2Nyb2xsZXIAc3JhbmQAc3RvcEV2ZW50UHJvcGFnYXRpb24Ac3VtAHRvQXJyYXlCdWZmZXIAdG9GbGF0U3RyaW5nAHRvSlMAdG9TdHJpbmcAdG9VaW50OEFycmF5AHZhcmlhbmNlAAAAAAGA+AAAAAYACYD5AAAADgABgPoAAAAUAEyC+wAAAB8ACYD8AAAAJAAZgP0AAAAqAAnJ/gAAADQAIYn/AAAAPwAhiQABAABMACHJAQEAAFgACZkCAQAAYgBJgAMBAABtACHJBAEAAHYA+f8FAQAAgQDJgAYBAACKAMmABwEAAJUACckIAQAAngAJuQkBAACpAACACgEAAK4AIYkLAQAAuQAhyQwBAADFAAmADQEAAM4ACYAOAQAA2QAJyQ8BAADiAEmAEAEAAOsAIYMRAQAA9QAEgBIBAAD8AASAEwEAAAcBBIAUAQAAEAEBgBUBAAAYAQSAFgEAACYBAYAXAQAALwEEgBgBAAA5ARmAGQEAAEUBJIEaAQAATgFJgBsBAABhAQSAHAEAAGoBCYAdAQAAdwEhgR4BAAB+ASGBHwEAAIUBSYAgAQAAlQEBgCEBAACbASGBIgEAAKIBSYIjAQAArQEhySQBAAC5AUmCJQEAAMIBCYEmAQAAygEhgCcBAADXASGAKAEAAOMBIYkpAQAA8AEBgCoBAAD+AQnDKwEAAAwCCYEsAQAAFwIhgC0BAAAlAiGDLgEAAC4C4YAvAQAAOgIJgDABAABDAgmAMQEAAFECDIAyAQAAXQIB8DMBAABjAkyCNAEAAGsCSYA1AQAAfQIJgTYB");
  base64DecodeToExistingUint8Array(bufferView, 153360, "YXNCTVAAYXNJbWFnZQBhc1VSTABibGVuZENvbG9yAGJsaXQAY2xlYXIAY2xlYXJSZWN0AGRyYXdDaXJjbGUAZHJhd0NpcmNsZUFBAGRyYXdFbGxpcHNlAGRyYXdJbWFnZQBkcmF3SW1hZ2VzAGRyYXdMaW5lAGRyYXdMaW5lQUEAZHJhd1BvbHkAZHJhd1BvbHlBQQBkcmF3UmVjdABkcmF3U3RyaW5nAGR1bXAAZmlsbENpcmNsZQBmaWxsRWxsaXBzZQBmaWxsUG9seQBmaWxsUG9seUFBAGZpbGxSZWN0AGZpbmRGb250AGZsb29kRmlsbABnZXRCUFAAZ2V0QmdDb2xvcgBnZXRDb2xvcgBnZXRGb250AGdldEZvbnRIZWlnaHQAZ2V0Rm9udHMAZ2V0SGVpZ2h0AGdldE1vZGlmaWVkAGdldFBpeGVsAGdldFZlY3RvckZvbnRQb2x5cwBnZXRXaWR0aABpbWFnZU1ldHJpY3MAbGluZVRvAG1vdmVUbwBxdWFkcmF0aWNCZXppZXIAcmVzZXQAc2Nyb2xsAHNldEJnQ29sb3IAc2V0Q2xpcFJlY3QAc2V0Q29sb3IAc2V0Rm9udABzZXRGb250MTJ4MjAAc2V0Rm9udDZ4MTUAc2V0Rm9udEFsaWduAHNldEZvbnRCaXRtYXAAc2V0Rm9udEN1c3RvbQBzZXRGb250UEJGAHNldEZvbnRWZWN0b3IAc2V0UGl4ZWwAc2V0Um90YXRpb24Ac2V0VGhlbWUAc3RyaW5nTWV0cmljcwBzdHJpbmdXaWR0aAB0aGVtZQB0b0NvbG9yAHRyYW5zZm9ybVZlcnRpY2VzAHdyYXBTdHJpbmc=");
  base64DecodeToExistingUint8Array(bufferView, 154018, "AQA3AQAACwABADgBAAAdAEgAOQEAACwASAA6AQAAZ2V0QWRkcmVzcwBnZXRTZWN1cml0eVN0YXR1cwBzZXRBZHZlcnRpc2luZwBzZXRTZXJ2aWNlcw==");
  base64DecodeToExistingUint8Array(bufferView, 154112, "OwEAAHNldENvbnNvbGUAAAAAEYA8AQAABwBJgD0BAAANAAmDPgEAABIASYA/AQAAGQAJgEABAAAeAAmAQQEAACgASIBCAQAAMAALgUMBAAA5AAmBRAEAAEEACYBFAQAARgAB8EYBAABNAEmARwEAAFEAAYBIAQAAVQAUgEkBAABaAEmASgEAAGEAAYBLAQAAaQABgEwBAABvAGGATQEAAHUASYBOAQAAegAJgE8BAAB/AGGEUAEAAIYACYABAAAAjwAUgFEB");
  base64DecodeToExistingUint8Array(bufferView, 154320, "Y29uY2F0AGV2ZXJ5AGZpbGwAZmlsdGVyAGZpbmQAZmluZEluZGV4AGZvckVhY2gAaW5jbHVkZXMAaW5kZXhPZgBqb2luAGxlbmd0aABtYXAAcG9wAHB1c2gAcmVkdWNlAHJldmVyc2UAc2hpZnQAc2xpY2UAc29tZQBzb3J0AHNwbGljZQB0b1N0cmluZwB1bnNoaWZ0AAAAAAsAUgEAAGlzQXJyYXkAAAAAAAAABPBTAQAAYnl0ZUxlbmd0aAAAAAAB8FQBAAAHAATwVQEAABIABPBWAQAAHQAJgz4BAAAiAEmAPwEAACkACYBAAQAALgAJgEEBAAA4AEiAQgEAAEAAC4FDAQAASQAJgUQBAABRAAmARQEAAFYASYBXAQAAWgBJgEoBAABhAAGASwEAAGkACIFYAQAAbQBhgE0BAABzAAmAWQEAAHgAYYBaAQAAYnVmZmVyAGJ5dGVMZW5ndGgAYnl0ZU9mZnNldABmaWxsAGZpbHRlcgBmaW5kAGZpbmRJbmRleABmb3JFYWNoAGluY2x1ZGVzAGluZGV4T2YAam9pbgBtYXAAcmVkdWNlAHJldmVyc2UAc2V0AHNsaWNlAHNvcnQAc3ViYXJyYXk=");
  base64DecodeToExistingUint8Array(bufferView, 154802, "4YBbAQAACwDhgFwBAAAWAOGAXQEAAB8A4YBeAQAAKADhgF8BAAAwAOGAYAEAADoA4YBhAQAARADhgGIBAABNAGCGYwEAAFgAYIZkAQAAYwBghmUBAABsAGCGZgEAAHUAYIZnAQAAfQBghmgBAACHAGCGaQEAAJEAYIZqAQAAZ2V0RmxvYXQzMgBnZXRGbG9hdDY0AGdldEludDE2AGdldEludDMyAGdldEludDgAZ2V0VWludDE2AGdldFVpbnQzMgBnZXRVaW50OABzZXRGbG9hdDMyAHNldEZsb2F0NjQAc2V0SW50MTYAc2V0SW50MzIAc2V0SW50OABzZXRVaW50MTYAc2V0VWludDMyAHNldFVpbnQ4");
  base64DecodeToExistingUint8Array(bufferView, 155090, "BwBrAQAABAAPAGwBAABub3cAcGFyc2U=");
  base64DecodeToExistingUint8Array(bufferView, 155122, "BIBtAQAACAAEgG4BAAAPAASAbwEAABsABIBwAQAAJAAEgHEBAAAtAASAcgEAAD0ABIBzAQAASAAEgHQBAABRAASAdQEAAFwAB4B2AQAAZAAEgHcBAAB2ACeAeAEAAH4AZ4J5AQAAigBnknoBAACTACeAewEAAKMAZ4J8AQAArgBngH0BAAC3AGeAfgEAAMIAP4B/AQAAygABgIABAADWAAGAgAEAAN0AAYCBAQAA7gABgIIBAAD3AAGAgwEAAAMBB4B2AQ==");
  base64DecodeToExistingUint8Array(bufferView, 155328, "Z2V0RGF0ZQBnZXREYXkAZ2V0RnVsbFllYXIAZ2V0SG91cnMAZ2V0SXNEU1QAZ2V0TWlsbGlzZWNvbmRzAGdldE1pbnV0ZXMAZ2V0TW9udGgAZ2V0U2Vjb25kcwBnZXRUaW1lAGdldFRpbWV6b25lT2Zmc2V0AHNldERhdGUAc2V0RnVsbFllYXIAc2V0SG91cnMAc2V0TWlsbGlzZWNvbmRzAHNldE1pbnV0ZXMAc2V0TW9udGgAc2V0U2Vjb25kcwBzZXRUaW1lAHRvSVNPU3RyaW5nAHRvSlNPTgB0b0xvY2FsSVNPU3RyaW5nAHRvU3RyaW5nAHRvVVRDU3RyaW5nAHZhbHVlT2YAAAAAAYCEAQAAdG9TdHJpbmcAAAAAAAABgIQBAAB0b1N0cmluZwAAAAAAAAGAhAEAAHRvU3RyaW5nAAAAAAAAAYCEAQAAdG9TdHJpbmcAAAAAAAABgIQBAAB0b1N0cmluZwAAAAAAABAAeQAAAAYAEAB5AAAADAAQAHkAAAARABAAeQAAABUAEACFAQAAGwAQAHkAAABkZWJ1ZwBlcnJvcgBpbmZvAGxvZwB0cmFjZQB3YXJu");
  base64DecodeToExistingUint8Array(bufferView, 155794, "CQCGAQAABgBJAocBAABwYXJzZQBzdHJpbmdpZnk=");
  base64DecodeToExistingUint8Array(bufferView, 155842, "B3CIAQAACgAHcIkBAAAUAAdwigEAACYAB3CLAQAAKgAHcIwB");
  base64DecodeToExistingUint8Array(bufferView, 155888, "TUFYX1ZBTFVFAE1JTl9WQUxVRQBORUdBVElWRV9JTkZJTklUWQBOYU4AUE9TSVRJVkVfSU5GSU5JVFkAAAAAAAAAIYCNAQAAdG9GaXhlZA==");
  base64DecodeToExistingUint8Array(bufferView, 155986, "SICOAQAADAABgI8BAAASAIiAkAEAABcAC4CRAQAAJgAB8EYBAAAtAEiAjgEAADAASICSAQAAQAAIgJMBAABTAEiAlAEAAGIACYABAAAAawABgJUB");
  base64DecodeToExistingUint8Array(bufferView, 156080, "YWRkTGlzdGVuZXIAY2xvbmUAZW1pdABoYXNPd25Qcm9wZXJ0eQBsZW5ndGgAb24AcHJlcGVuZExpc3RlbmVyAHJlbW92ZUFsbExpc3RlbmVycwByZW1vdmVMaXN0ZW5lcgB0b1N0cmluZwB2YWx1ZU9m");
  base64DecodeToExistingUint8Array(bufferView, 156210, "EQCWAQAABwBJAJcBAAAOAEkAmAEAAB8ASQKZAQAALgAJAJoBAAA2AAkAmwEAAEIASQCcAQAAWwAJAJ0BAAB1AAkAngEAAIkACQCfAQAAmAAJAKABAACdAEkAoQEAAKwACQCiAQ==");
  base64DecodeToExistingUint8Array(bufferView, 156320, "YXNzaWduAGNyZWF0ZQBkZWZpbmVQcm9wZXJ0aWVzAGRlZmluZVByb3BlcnR5AGVudHJpZXMAZnJvbUVudHJpZXMAZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yAGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMAZ2V0T3duUHJvcGVydHlOYW1lcwBnZXRQcm90b3R5cGVPZgBrZXlzAHNldFByb3RvdHlwZU9mAHZhbHVlcw==");
  base64DecodeToExistingUint8Array(bufferView, 156514, "SYCjAQAABgCJgKQBAAALAImAowEAABAACIClAQAAYXBwbHkAYmluZABjYWxsAHJlcGxhY2VXaXRoAAAAAAAAAAmApgEAAAUAC4CnAQAAZXhlYwB0ZXN0");
  base64DecodeToExistingUint8Array(bufferView, 156610, "IYCoAQAABwAhgKkBAAASABGAqgEAABkAS4CrAQAAIgBLgKwBAAArAEyArQEAADMATICuAQAAPwAB8EYBAABGAAmArwEAAEwAYYCwAQAAUwBhgLEBAABcAAGAsgEAAGoAIYCzAQAAcQBJgLQBAAB5AEmAtQEAAIQAYYC2AQAAigAJgLcBAACQAAuBuAEAAJsAYYC5AQAAogBhgLoBAACsAAGAuwEAALgAAYC8AQAAxAABgL0B");
  base64DecodeToExistingUint8Array(bufferView, 156800, "Y2hhckF0AGNoYXJDb2RlQXQAY29uY2F0AGVuZHNXaXRoAGluY2x1ZGVzAGluZGV4T2YAbGFzdEluZGV4T2YAbGVuZ3RoAG1hdGNoAHBhZEVuZABwYWRTdGFydAByZW1vdmVBY2NlbnRzAHJlcGVhdAByZXBsYWNlAHJlcGxhY2VBbGwAc2xpY2UAc3BsaXQAc3RhcnRzV2l0aABzdWJzdHIAc3Vic3RyaW5nAHRvTG93ZXJDYXNlAHRvVXBwZXJDYXNlAHRyaW0AAAAAAAARAL4BAABmcm9tQ2hhckNvZGU=");
  base64DecodeToExistingUint8Array(bufferView, 157042, "SAC/AQAACgABAMABAAAUAAAAwQEAACQACADCAQAAYWRkQ2FjaGVkAGdldENhY2hlZAByZW1vdmVBbGxDYWNoZWQAcmVtb3ZlQ2FjaGVk");
  base64DecodeToExistingUint8Array(bufferView, 157138, "B3DDAQAAAgAHcMQBAAAHAAdwxQEAAAsAB3DGAQAAEgAHcMcBAAAYAAdwyAEAABsAB3DJAQAAIwAHcMoBAAApAD8AywEAAC0APwDMAQAAMgA/AM0BAAA3AD8AzgEAADwA/wHPAQAAQgA/ANABAABHAP8P0QEAAEwAPwDSAQAAUAA/ANMBAABUAD8A1AEAAFoAPwDVAQAAXgAXANYBAABiABcA1wEAAGYA/wHYAQAAagAkANkBAAByAAcA2gEAAHkAOQDbAQAAfwA8ANwBAACEAD8A3QEAAIgAPwDeAQAAjQA/AN8BAACRAP8B4AEAAEUATE4xMABMTjIATE9HMTBFAExPRzJFAFBJAFNRUlQxXzIAU1FSVDIAYWJzAGFjb3MAYXNpbgBhdGFuAGF0YW4yAGNlaWwAY2xpcABjb3MAZXhwAGZsb29yAGxvZwBtYXgAbWluAHBvdwByYW5kSW50AHJhbmRvbQByb3VuZABzaWduAHNpbgBzcXJ0AHRhbgB3cmFw");
  base64DecodeToExistingUint8Array(bufferView, 157538, "CADhAQAACgABAOIBAAASACEA4wEAABoAIQHkAQAAHwAIAeUB");
  base64DecodeToExistingUint8Array(bufferView, 157584, "ZXJhc2VQYWdlAGdldEZyZWUAZ2V0UGFnZQByZWFkAHdyaXRlAAAAAAAASALgAAAAcGlwZQ==");
  base64DecodeToExistingUint8Array(bufferView, 157650, "AXDmAQAABAAJAOcBAAALAAFw6AE=");
  base64DecodeToExistingUint8Array(bufferView, 157680, "ZW52AG1lbW9yeQB2ZXJzaW9u");
  base64DecodeToExistingUint8Array(bufferView, 157714, "CYDpAQAABQADgOoBAAALACGA6wEAABIACIDsAQAAGQAAgO0BAAAeAMiA7gEAAHJlYWQAcmVzZXQAc2VhcmNoAHNlbGVjdABza2lwAHdyaXRl");
  base64DecodeToExistingUint8Array(bufferView, 157810, "CQDvAQAABAAJAPABAAALAAkA8QE=");
  base64DecodeToExistingUint8Array(bufferView, 157840, "YWxsAHJlamVjdAByZXNvbHZl");
  base64DecodeToExistingUint8Array(bufferView, 157874, "CYDyAQAABgBJgPMBAABjYXRjaAB0aGVuAAAAACkA9AEAAGZpbmQ=");
  base64DecodeToExistingUint8Array(bufferView, 157922, "BID1AQAACgAAgPYBAAAQABCA9wEAABcAA4D4AQAAIwBIgOAAAAAoAAiA+QEAAC4ACID6AQAANgAhgPsBAAA7ABiA/AEAAEYASID9AQAATAAAgP4BAABUABCA/wEAAGF2YWlsYWJsZQBmbHVzaABpbmplY3QAaXNDb25uZWN0ZWQAcGlwZQBwcmludABwcmludGxuAHJlYWQAc2V0Q29uc29sZQBzZXR1cAB1bnNldHVwAHdyaXRl");
  base64DecodeToExistingUint8Array(bufferView, 158114, "GAAAAgAACAAIAAECAAAOAAAAAgIAABcAHAADAgAAHwAJAAQCAAAoAAwABQIAAC0ASQAGAgAAMgBJAAcCAAA3AAAACAIAAEAACQkJAgAARQAJAAoCAABVAMkACwIAAF4AS0gMAgAAZABLAA0CAABjb21wYWN0AGVyYXNlAGVyYXNlQWxsAGdldEZyZWUAZ2V0U3RhdHMAaGFzaABsaXN0AG9wZW4Ab3B0aW1pc2UAcmVhZAByZWFkQXJyYXlCdWZmZXIAcmVhZEpTT04Ad3JpdGUAd3JpdGVKU09OAAAAAAAAgA4CAAAGAASADwIAABAASIDgAAAAFQAhgBACAAAaAAGAEQIAACMACIASAgAAZXJhc2UAZ2V0TGVuZ3RoAHBpcGUAcmVhZAByZWFkTGluZQB3cml0ZQAAAAAAACkAEwIAAGZpbmQ=");
  base64DecodeToExistingUint8Array(bufferView, 158450, "SYEUAgAABQAI2RUCAAAOAAjZFgIAABcACIAXAgAAHQAQgBgC");
  base64DecodeToExistingUint8Array(bufferView, 158496, "c2VuZABzZW5kNGJpdABzZW5kOGJpdABzZXR1cAB3cml0ZQAAAAApABkCAABmaW5k");
  base64DecodeToExistingUint8Array(bufferView, 158562, "CYEaAgAACQAhiRsCAAARAAiAHAIAABcAiIAdAgAAcmVhZEZyb20AcmVhZFJlZwBzZXR1cAB3cml0ZVRv");
  base64DecodeToExistingUint8Array(bufferView, 158642, "6IMeAgAACwDogx8CAAAXAACAIAI=");
  base64DecodeToExistingUint8Array(bufferView, 158672, "c3RhcnRJbnB1dABzdGFydE91dHB1dABzdG9wAAAAAAAAAAkAIQIAAAkACQAiAgAAY29tcHJlc3MAZGVjb21wcmVzcw==");
  base64DecodeToExistingUint8Array(bufferView, 158754, "IRkjAgAAEgAhGSQCAAAhAAkAJQIAAC0AAQAmAgAAY3JlYXRlQXJyYXlCdWZmZXIAY3JlYXRlQ2FsbGJhY2sAY3JlYXRlSW1hZ2UAZ2V0SW5zdGFuY2U=");
  base64DecodeToExistingUint8Array(bufferView, 158850, "CQAnAgAABQAJACgCAAAMAAkAKQIAABMACQAqAgAAGgAJACsC");
  base64DecodeToExistingUint8Array(bufferView, 158896, "U0hBMQBTSEEyMjQAU0hBMjU2AFNIQTM4NABTSEE1MTI=");
  base64DecodeToExistingUint8Array(bufferView, 158946, "SRIsAgAACwBJEi0CAABjY21EZWNyeXB0AGNjbUVuY3J5cHQ=");
  base64DecodeToExistingUint8Array(bufferView, 158992, "");
  base64DecodeToExistingUint8Array(bufferView, 167760, "alXqH0ItwEdCXwAEliQWcwNTBgOHBAAAABAAEAIgx0ESRCAAkj11UpVUFXP6HQAA3yVkWnY0qRqWJAAAAAAAAJIuABGSLiAAlixpW3pN4FtaLQAA/lclWbV7JVs+VwAAT1mKeYp5anlXfwAAlWVvW29br28VVwAAe1tUW1J7UX/WVQAA7U9tSLooFRnVHwAAFwgpZAEQAXDHcQAARBDeJGV/ZSneJgAAoEQzUK1tq1TpVQYIBgCyZXpbelt/ZQBAAATrXrVVZVSjMwEAAABte70qf0d6cwAMk3eSfNZwknCTcQBwAwAEAAYABgAEAAMAQAGSCUQppxVEfSoIBChHGgSogiQA/LokBCg3GwAAAgBEIAAAhBAAAAQJRQAACUIAAIn/AQAJQgiAEEUIQCAAEAAEAAAACEccAIjJIgCQSgMfkEocgKBMIIAg9z8AQAAAAAAAAE588x3RQBQiRnkvHEGGSCLxx4giTjiHHAAAAAAAAAAADgABIJEQAhCREPQJDwAIBIEQ9AmOEAIQACABIMABAAAuEu84cZIYJaIqDyOkuggjYMYYJQRG7zjgAQAAAAAAAP+76A4QwkgCnMNPAhDeSCIQxkgiH7roHAAAAAAAAAAAEcboPBLuHCMU1hojHMYZPRLGGCHxx+ggAAAAAAAAAADOux8jMUISI9E7EiMxBhIVMkYSFS064ggBAAAAAADgIDHGjxBRRYEQlSiCCFURhAguEogEKpKPBAAA4AKOAAQgggACIEIB4DxCARAiIgLwIgIAECMCAPA8DnwAACCAAyAgAAQg7jn/PDBGFCMwfhQjMEL0Iu89FCIAAOAAREAGAABAAgDMRaI9REhSI0RwUiNESFIjTkRTI4ADAAAAAAAQAAAAEM4/6zwxxgwRMUboENE/GBAOBugPAAY=");
  base64DecodeToExistingUint8Array(bufferView, 168456, "McYYPzFGFQVRVRIJUVX1EI+oGD4AAOAAg2AADIQQABKEEAA4mIwEEJiMCjiEEAkShBAADINgAAAADAAAABAACAAQAAgAOAA+ABAACICRDQiAkFQJAGEJCARkAgCEaAceXxEoKAQgRywEwIAoH+xIKARsJx4EAAAAgABAGOADgAhPAMAQlAAAABYBAAAUAgAA7wMAAAAAAABpAwAAMgEAGlsSACwAOAAAAHz3AQA4AAAAEAAAAAAAAIAAAAgfAAAAy0EFPguiCgTAEQsIICAKEMDDBT4AAAAAAAACABEAYgAREIciCgDKHQQQihQEkIccBBByIwAQAgCROOUYkUAQBYowUB0fSJAlBCSQHZ8YUAGEBBABgHjgAAAA9xkAgAgkBYAOJAqADRjUgw4ASoANAEWACAAAAAcAgDEBAEQIkh6EEJA6HwmQGsQx0AoEAKAKHwCACgAAAAsAEAYkADAJJAAQSSkMEKkIDDhWEgABoBaAAEAvAAMAIhICZhxSAQAAVBJCCIQBpRSLEuccKaEYI3LFGCMzOgAAVhEAGISA4z6EEBYhSikLOc45DiExRhohMcbrPgAAQABGAWYc/3/nHBBCQgicc0IIEEJCCBBCQgj/f+ccAAAAAApYZhSOReccROUYI6TXGCMkzRgjRMUYI45F5xwAAAAAVoHADM4BFyMxghkjMaoaIzGSGiMxqhwjzgHnHAAACABKEQAYMUbIADFGLx0xqkgDMZI4HzESHyPOEWgfAAAAAMRZpQAAAEAAzjnnPCGEEArvvfc+McYYKe+99xYAAAAAgBmlGAAAAADOOecYMMYYCdB77wkQQggJ7733HAQAAABGKWUZAAAGAIwx4R2EEBcjhJAYI4SQGCPOORcdAAAAAEZZBQAAAAACzjlHHDHGCCYxxvgrMcYIMs45RxwAAAAgzChFIAAAACAxxhgtMcYYMzHGGDMxxvgs770XIAAA4CAKAAAAAAAAABEAAAARAAAAEQAAAA8AAAABAAAADgAAAAQEBAQEBAQEBB4EFRUeDAwEBAQEBAYEBAoKBAQLDg0KBgwHGBAEBAYEBAYLBCsMGxgUDAoGDAwQDAYOCh8QBAQOCAQHEAQECQoIBAgGBAQEFgQUBBUJBAwLBAQJBAwLBAQJHAkQBw8EBAkEChsEGxIWBAQEBBQEEQQeBAQEBAQeFAYGBhIOEAQEBAQEBAQLBgYECwsMEhMEBAQHCAQEFRQLBAQHBAQEBAwHBAQUBAQEBAQSGwQEBwgEBBUmCwQEBAQHCAQEBAQEBAAAAAAAAACpq8XDJymRjycpXVsqLGBeKy3HxS8xy8mCjaecT1p0aR0e1NMqKzpVU0VEUF1rbHuWo7zHxrecnqytoZSGhXZbTjUuMMXDKCo4Ul5dQVBFXUQpRTZBKUJdXE40lZelv8vKrr2yyrGWsqOulq/KybuhLDdQa8vNbVJGVGB2j5y3xsi9sX99lq6snpGFb1Y7HR9Eap7G7+3EnGhCGhxFbaHH7OrFn2tDKiyUkjVOiXA7VoNoaHCKgkRGrqyqrMbf3cRobYeCISPS0CosO1ZURkRQTjWcnqyuoqS9yMa3TlCenFRWpKIqLK6xy8OprERbQVRWY3yfuKuxy8OpkG1hVFZjfJekopWHhWttYSwuyshThIqknIInL0lDaoJeYG+KpKKIeniEgmknL0nHxUdBTlBda21hVFZjiG6XpKKVh4WRnpyPaoRbTlBqeHpuVFakooiJlJKDaFtdd3VcXnh2SWN5l7F1TlZwaIKKpJxBW3mPqX1UVmN8h5SSeGxtYayuyMZFSVhmgajAv6KWiJSisbytknlufZimpZmMcWJga4SeucjN2uXh0sSpdVxQKy3Ny1OknoWJU8XDJyw7VmN8bn2Ypb7Jxauvo5aIhGptYVRGQ8XDKy49S1ZHRlFqhJ+ur6Szv8rHuKqPW0I2Jyw7SWSYsb3IxautoolvVEVDxcMnL0lDam6IhKuxy8MnL0lDam6IhMXDe3+zsZeVJylqby4wzMqJhMXDJytFRKytx8OpqkJBLjClvsnGt5yRrJ6trqOvlicpdy4weczKhZHFwycpq7HLwycplZQwMs7MZK+uXcXDJymWLjDMyl3FwysuPUtmmrO/ysiur6SLcVZHRlFqhJ+uyMe4qo9bQjYnLDtWcImUkXd6blRGQ8XDsbzm24aIzMpOUF1rbXyXpKKVh4V2WycxS0fJx0VBJymenCcpoS8xyccnKcjGLC7MyjEzzMosLsjGJynNyy8xxcMnKW0vMYjJx4YnL0mrscvDqUdBGh85NtLV7+oaHNnXGh/v6tDTNzQrdXdSe33Q2PLqJylSUGBiysheX26Jo7zHraGHeXiEnqytx8a3nIJpJynFw15fbomHeXiEnqytoaO8x8a3nIJpLC7KyF5fbomjnoSHeXiEnqyuvMfGt5yCaSssRkVRxsRPNltgenVgYsrj7u3e0MTT1MheX26JysiHeXiEaVtdxcMnKUNBXV/H4Ovq0NHFKStFQycpkWBik8rIn6vFw2Nkc47PzYx+fYluW13s6mBi8e9eX258h3l4hGleX258iHl4hHeFhpWjvMfGt6mdrK2hrqCfkIJpKCqfra7Ix7idW12erK2hYGLKyLu8x8a3nFtdoGFjyMZbXcjGYGLMymVnzMqVyMZbXcvJYWPFw2JkyOHs69HSxltdrsdbYnyssMrDqXl1HyA6OUVfeISSrcfV1vDv4MWrkJ6PdWp2XUMqGhzs6hobKkVfemx7laCUrcfg6+rQ0cWrkoZ4XUM1NFFcdYKEd2t5lKOYf3JwfYl7YCwvPldIR1JrhaCvsKXAy8i5q5BcQzdocH11goqXj0FDXVt1d9/dUVJhfHpsa3eRn6CUlq+6uaqPdVxERcfGKyw7SVRGRVGSq7HLw6mQTzZoboiCQk5cdZCcqp6tlJKEal5gboiUraKwpJZ9YlZIVEVQdn6Lg5CYpZ2PkezqGhx3dSstR0UrLz5MZ5u0wMu+s5pmSzw4Q1yQq7q+y8e4qo9bQjZGSFdycGJgbIaUloqMpbCun4RqUV5shKCsgmFvh6OvhWhwsa+IgisvPDhDXJCrur7Lx7iqj1tCNi88S2aas77LwLSbZ0w+REhkfoqysIiWlHp8YmCurCcvSUE3OaGfqbHLw1tjfXUpK1BOnLjs6oKEnpzExdPg7Ord3tLf0V9rh5+tiVxohJyqhi8xxsQpKl5fbGlcXTZCNYqLzMuKi7CzwLyviYuZpr7Azcq9pZiWKCo4RVFEUl9raVxeUVBDRDc1eHqUoJ+ruMbIvL7X4uDRtqmQhURGYF4DBSAfBQcfHgQGIiASHhwEDxwRIBUIEwIEHhwGCCIgBAYULjo5HSwhOSAFIRIdBR45OCoQLDNNSXBzjYqxtc/Jop+GiEcuxcPIydfk8O7h4tbj1QIEHx4EBh4dAwUhHxEdGwEDHRsFByEfAAIdHAIEHBsoLEZFra7IxKqrQ0ICBCAeEBwaAAIcGgQGIB4oLTxKZZmyvsnGrK6jinBVRkTGxAQGISBCTrCkSFaqnDAyxcMnKZGcJylDRlVwiqOuq5GUiG5gXcXDKis6VWJue5exvcjGrK6ilXlsYFNFRFDFw041KStGRSosREMqLEhGOERCKjVCN0Y7LjkoKkRCLC5IRh0fLUdTUjZFOlI5HjorNh43UlFDKV5fbmNkc46oo4mMfn2Jo7GzwczLvMfFqZyEh6Gfq56sraGHeXdpxsfV4u7s3+DU4dNcXsbEJylEQygqQkFdX8fFKStHRTdDQSk1RF+JfFQ4LDpdT5KUrqxgYsXDKy1FRCcp7OotL0lHAAAAAAABAgMEBQYHCAkKCwwNAg4PEBESExQVFgAXGBkaGxwdGB4YGR8gGSEhGRgaIiMYGSQZGCUAFSYnKCkqKywYLS4vMDEyMzQwNTY3ODk6Ozw9Pjw/PUAYGUFCN0NERUZHSElKS0xNTk9QUFFSUFNUVVZXUFhRWVpbXF1RWFleWFlQUF9QYGFZYmNWZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXp7R3x9Wn5/gIGCg4SFhocLiImKi4xkjY6PkJGSk5GUkpGTlZaXmC6ZLpoumy6cnS6eLp8woDKhMqIyozKkpTamNqeoqaiqq6wWO5utPJk8mjybPJydPK6vsDyYsTeisTeasTecnbE3R5mys7RPULVPULZPULdPULi5T1BPULq7UrxUtFS1VLZUuLm9vlm/wMHAWn5QwsO3WFlQtFC1ULZQt1C4uROXxFDFZLRktWS2ZLi5aWrGx1BpalzIAAAAAAACAgQCAwEBAQEDAgEBAQEEAQIDAQMEAQMDAgIBAgEDAQEBAQEBAQIBAQEBAQEBAQECAgMBAgEBAgEBAQEBAQEBAgIBAgECAgICAgEBAwIBAgICAQIBAQECAgEBAQEBAAM=");
  base64DecodeToExistingUint8Array(bufferView, 171808, "AgICAQMCAAICAAIBAAMBAQMAAAECAAEBAAACAwMDAgICAgIDAgECAgICAwICAgMCAgICAgIDAgIDAwMEAgEBAwMDAwQDAQICAgIDAgICAwMDAgICAgMDAgICAgMDAgQABCEUpRznDGMAAAAAAAAAAJgvikKRRDdxz/vAtaXbtelbwlY58RHxWaSCP5LVXhyrmKoH2AFbgxK+hTEkw30MVXRdvnL+sd6Apwbcm3Txm8HBaZvkhke+78adwQ/MoQwkbyzpLaqEdErcqbBc2oj5dlJRPphtxjGoyCcDsMd/Wb/zC+DGR5Gn1VFjygZnKSkUhQq3JzghGy78bSxNEw04U1RzCmW7Cmp2LsnCgYUscpKh6L+iS2YaqHCLS8KjUWzHGeiS0SQGmdaFNQ70cKBqEBbBpBkIbDceTHdIJ7W8sDSzDBw5SqrYTk/KnFvzby5o7oKPdG9jpXgUeMiECALHjPr/vpDrbFCk96P5vvJ4ccaA");
  base64DecodeToExistingUint8Array(bufferView, 172240, "Iq4o15gvikLNZe8jkUQ3cS87TezP+8C1vNuJgaXbtek4tUjzW8JWORnQBbbxEfFZm08Zr6SCP5IYgW3a1V4cq0ICA6OYqgfYvm9wRQFbgxKMsuROvoUxJOK0/9XDfQxVb4l78nRdvnKxlhY7/rHegDUSxyWnBtyblCZpz3Txm8HSSvGewWmb5OMlTziGR77vtdWMi8adwQ9lnKx3zKEMJHUCK1lvLOktg+SmbqqEdErU+0G93KmwXLVTEYPaiPl2q99m7lJRPpgQMrQtbcYxqD8h+5jIJwOw5A7vvsd/Wb/Cj6g98wvgxiWnCpNHkafVb4ID4FFjygZwbg4KZykpFPwv0kaFCrcnJskmXDghGy7tKsRa/G0sTd+zlZ0TDThT3mOvi1RzCmWosnc8uwpqduau7UcuycKBOzWCFIUscpJkA/FMoei/ogEwQrxLZhqokZf40HCLS8IwvlQGo1FsxxhS79YZ6JLREKllVSQGmdYqIHFXhTUO9LjRuzJwoGoQyNDSuBbBpBlTq0FRCGw3Hpnrjt9Md0gnqEib4bW8sDRjWsnFswwcOcuKQeNKqthOc+Njd0/KnFujuLLW828uaPyy713ugo90YC8XQ29jpXhyq/ChFHjIhOw5ZBoIAseMKB5jI/r/vpDpvYLe62xQpBV5xrL3o/m+K1Ny4/J4ccacYSbqzj4nygfCwCHHuIbRHuvgzdZ92up40W7uf0999bpvF3KqZ/AGppjIosV9YwquDfm+BJg/ERtHHBM1C3EbhH0EI/V32yiTJMdAe6vKMry+yRUKvp48TA0QnMRnHUO2Qj7LvtTFTCp+ZfycKX9Z7PrWOqtvy18XWEdKjBlEbIA=");
  base64DecodeToExistingUint8Array(bufferView, 173008, "AQAAAAIAAAAEAAAACAAAABAAAAAgAAAAQAAAAIAAAAAbAAAANg==");
  base64DecodeToExistingUint8Array(bufferView, 173056, "");
  base64DecodeToExistingUint8Array(bufferView, 182008, "AgAAAFwCAABdAgAAXgIAAF8CAABgAgAAAgAAAAAAAABhAgAAYQIAAGICAABjAg==");
  base64DecodeToExistingUint8Array(bufferView, 182064, "BAAABAEABAIgBAMhBAQiBAUjBAYABAcABAgABAkABAoABAsABAwABA0ABA4ABA8ABBAAFBEABBIABBMABBQABBUABBYABBcABBgABBkABBoABBsABBwkBB0lBB4mBB8nBCAABCEABCIABCMABCQABCUABCYABCcABCgABCkABCoABCsABCwABC0ABC4ABC8Au84gINKgP/+AcLg//8AOLh4ONj//4AOLn//wAOLv//M5n//wNLM4P8M5v4M5qFMM4J2MM4IOMM4KFLgP4j4OIRwUPwEH8F/CArmDnkAgfgwFABwkCAYRlBgPhEoYACgggCE4MB4QOGhCTCAQNB4g0DAAUQAQMcDgOBxA0DAAUgAQMwIAMDyAlCAAZQCSIMIgcgEoR2FgICBmEHoBnFIIUDEQUOUoMf5F/gF+oUD/EOCYUNCINAqHBgcCwkIjBYBg0AjxqBgFhgMMgcIkEYLAJVBUwNEgFCgUQAIOAiFgNgU4gGIgGEgkggkhBYKiBKoNwgMQgMIhGAhFD//BM4MIgPggUgFAMRUQOEM4OAgMogfAglAFQIpBkJFBYAMCwEGEwIBBoFCJoKbBMoME8EdIIOAmGAw0BwkQhkMHQNgnSrBwGhgMGgsIiEwQoMUoFn/0A/x2Bg/yiEf4EYgEngJrBAAkEAYSBBoDECAAjzDBwOAYgLrFToIOCZ4IRBdYrzDvACB+AOFwIFDBwMHJI38Agd8gE/JIwAEn8D/AOM//gBxd//46GAAv//4NLgP/V4IAKgf/L4gOJLBkH/6TFAA0PM5sfM5qFBwCFNBpaFBM5gOBM4I=");
  base64DecodeToExistingUint8Array(bufferView, 182688, "hCYCAIwmAgC4JwIAzycCAAAAAAAAAAAP5gAAJABwAAABIAOAAAAAEAE8A8A88A8A8gAgAAADiAiIERB/8ERAiICOAAAGBhIQJMAyYBkgQkMDAAAAPA6EIghGEHMgAYAegAAJABwAAAAHwDBggCIAIAAIAIgCDBgHwAAAJAAwAfgAwAJAAAACAAQACAD+ACAAQACAAAAASADgAAAQACAAQACAAQAAAABgAMAAAAEADABgAwAYAMAAAAD+AgIIYhGEEBAfwAAAQAEABAAP/gAAEDhBkIQhEEHAgAAEBBAEIQhCEHvAAAAMAGgBEAwgP/gAgAAB8IIghEEIghD4AAA/4IghEEIggj4AABAAIHhDAJgBwAAAA94IQhCEIQg94AAA8IIQhCEIQg/4AAAYYDDAAADCgYYAAACAAoAIgCCAgIAAAIgBEAIgBEAIgBEAAAEBAQQBEAFAAQAAAEABAAIJhCAIgA4AAAA/4IAhHEJEhIkH8AAAB/gxAIIAxAB/gAAP/hCEIQhCEHvAAAH/BAEIAhAEEBAAAP/hAEIAggID+AAAP/hCEIQhCEIAgAAP/hEAIgBEAIAAAAH/BAEIAhCEEfAAAP/gCAAQACAP/gAAIAh/8IAgAAIDBAEIAhAEP/AAAP/gCAAoAYwMBgAAP/gAEAAgAEAAgAAP/gwABgAwAP/gAAP/gwABgADAP/gAAH/BAEIAhAEH/AAAP/hCAIQBCAHgAAAH/BAEIChAIH+gAAP/hCAIQBDgHjgAAHBBEEIQhBEEHAAAIABAAP/hAAIAAAAP/AAEAAgAEP/AAAPgADwABgDwPgAAAP+AAMAGADAAGAAMP+AAAMDgZgAwAZgMDgAAOAAMAAfgMAOAAAAIBhA0I4hYEMAgAAP/xACIAQAAMAAYAAwABgADAAEAABACIAR/+AAAIAGABAAGAAIAAAAAEAAgAEAAgAEAAgAAIAAgACAAAAAnAJEBIgJIA/gAAP/gEIBAgIEA/AAAA/AIEBAgIEAhAAAA/AIEBAgEIP/gAAA/AJEBIgJEA5AAABAA/8JABIAJAAAAA6wIpBFIIpB5IIGAAB/8AgAIABAAH8AAAAEBAhP8AAgAEAAAACAAIABBAJP+AAB/8AEABgAyAIMAAAAEIAh/8AAgAEAAAP8BAAP8BAAH8AAAP8AgAIABAAH8AAAH4BAgIEBAgH4AAAP/AhAIEBAgH4AAAH4BAgIEAhAP/AAAP8AgAIABAAEAAAAGIBIgJEBEgEYAAAIAP/AIEBAgIEAAAP4AAgAEABAP8AAAOAAOAAMAOAOAAAAPwABgBwABgPwAAAMMASABgASAMMAAAPBgGwAIAGAPAAAAIMBCgJkBQgMEAAA5OI2JABAAB/8AABABI2I5OAAACAAgAEAAQABAAIACAAAAEEH/hEEIAhAEEDgAAOKAPQAPwPQOKAAAGABIAJAAwAAABcAKgAkAAABUAKgAoAAAAgAIAAAAB/4AEAAgAIB/gAAAwAGAAAAkAPgAEAAAA4AIgA4AAAAB/oxAoIAxAB/gAAB/gxAoIIxAB/gAAB/kxBIIExAB/gAAh/oxAoIIxAB/gAAD/JiAQQJiAD/AAAB/kxBYIExAB/gAA/8IIBBAP/hCEIQgAAH/BAEoA1AFEBAAAB/9IQlCEIQhAEAAB/8IQlCFIQhAEAAB/8oQpCEoQhAEAAD/5QhCEJQhCAIAAJAEv/hAEAABAEv/pAEAAFAFP/lAEAAKAIf/KAIAAP/hCEIQggID+AAAF/9GAEMBAYB/8AAA/5IAlAEIAg/4AAA/4IAlAFIAg/4AAA/4oApAEoAg/4AAA/4oApAEoAo/4AAB/xQBCAJQBB/wAAEIASABgAMACQAhAAAAf8EHAnIHBB/wAAAP/EAFQAkAEP/AAAP/AAEgAoAEP/AAAP/EAFAAkAFP/AAAf+IAIABIAIf+AAAOAAMAgfoMAOAAAB//CBAQICBAPwAAA/8IABEEIgg6EAPAAAAnBJEFIgJIA/gAAAnAJEFIhJIA/gAAAnApEJIgpIA/gAAEnBJEFIhJIA/gAAAnApEBIgpIA/gAAATgkiKkQkkAfwAAAnAJEBIgH4BIgJEA5AAAA/AIEhA4IEAhAAAA/BJEFIgJEA5AAAA/AJEFIhJEA5AAAA/ApEJIgpEA5AAAA/ApEBIgpEA5AAAAAhIEF/gAEAAgAAAAgIEF/hAEAAgAAAAgoEJ/ggEAAgAAAAgoEB/ggEAAgAAAfhUCKgQ0CF/gAAF/hEAFABIAA/gAAA/BIEJAgoEA/AAAA/AIEFAhIEA/AAAA/AoEJAgoEA/AAAA/AoEJAgoEI/AAAA/AoEBAgoEA/AAAAQACADWAawAQACAAAAAEAfAEUAkgFEAfAEAAAAP4IAggEABAP8AAAP4AAggEIBAP8AAAP4EAhAEEBAP8AAAP4EAgAEEBAP8AAAPBgGwgIIGAPAAAB/8BEAIgA4AAAB4Mg2ABAgwB4A==");
  base64DecodeToExistingUint8Array(bufferView, 184560, "AwIGCAgICAMFBQYIAwYDBwcFBgYHBgYGBgYDAwYHBgcHBgYGBgYGBgYEBgYGBgYGBgYGBgYGBggGBgYEBwQGBwQGBgYGBgYHBgYGBgYGBgYGBgYGBgYGBgYGBgQCBAg=");
  base64DecodeToExistingUint8Array(bufferView, 184691, "BwAG");
  base64DecodeToExistingUint8Array(bufferView, 184704, "BQAEBAMGAAMABAQAAAAAAAYGBgYGBgcGBgYGBgQEBAQGBgYGBgYGBwYGBgYGBgYHBgYGBgYGCAYGBgYGBgYGBgYGBgYGBgYHCAYGBgYGBQY=");
  base64DecodeToExistingUint8Array(bufferView, 184799, "f+cH/nAAAA+AAPgAAAAAAAAPgAD4AAAAAAQQAEEAf/8H//AEEABBAH//B//wBBAAQQAAAADggB8MAxhgIIIP//j//4IIIDDGAYfACDgAAAAYAAPAMCQPA8PAGPAAPGAPDwPAkDAPAABgAAAAA8AcfgPsMGOBBBgQY8MD5mAcPAAP8ADDAAAA+AAPgAAAAAB/AB/8A4DgYAMEABAAAAQAEGADA4DgH/wAfwAAAAAIAAiIAMmABrAAPgABwAA+AAawAMmACIgACAAAAAAIAACAAAgAAIAA/4AP+AAIAACAAAgAAIAAAAAAAIAA+AAPAAAAAIAACAAAgAAIAACAAAgAAIAACAAAgAAIAAAAAABwAAcAAAAAAwAA8AA8AA8AA8AA8AA8AAMAAAAAAf/AP/4GAzBAYQQMEEGBBDAQZgMD/+Af/AAAAAgBAYAQMAEH//B//wAAEAABAAAQAAABwDA8BwYA0EAZBAMQQGEEDBBhgQPwEB4BAAAAEAQDAGBgAwQIEECBBAgQQIEGHDA/fgHjwAAAAAeAAPgAGIADCABggAwIAYCAMAgH//B//wAAAH8EB/BgQQMEEBBBAQQQEEEBBBgwQP4EB8AAAAH/wD/+BhAwQQEEEBBBAQQQEEGDBA/gAHwAAABwAAcAAEAABAAAQB8EB/BB4AR4AH4AB4AAAAAB48A/fgYcMECBBAgQQIEECBBhwwP34B48AAAAHwAD+BBgwQQEEEBBBAQQQEEGBDA//gH/wAAAAHDgBw4AAAAAAIBw+AcPAAAAAIAAHAADYABjAAwYAYDAMAYGADBAAQAAAAIQACEAAhAAIQACEAAhAAIQACEAAhAAIQAAAAQAEGADAwBgGAwAwYAGMAA2AAHAAAgAAAABwAA8AAYAAEAABAZwQOcEGABjAAPgABwAAAAAH/wD/+BgAwQAEEPhBH8QTBkEgJBoCQP/kB/5AAAAH/8D//BgQAQEAEBABAQAQEAGBAA//wH/8AAAB//wf/8EEBBBAQQQEEEBBBAQY4MD7+AcfAAAAB/8A//gYAMEABBAAQQAEEABBgAwOA4BgMAAAAf/8H//BAAQQAEEABBAAQQAEGADA//gH/wAAAB//wf/8ECBBAgQQIEECBBAgQQIEEABBAAQAAAH//B//wQIAECABAgAQIAECABAgAQAAEAAAAAAH/wD/+BgAwQAEEABBAgQQIEGCDA4/gGPwAAAB//wf/8ACAAAgAAIAACAAAgAAIAH//B//wAAAEABBAAQf/8H//BAAQQAEAAAAAHAAB4AADAAAQAAEEABBAAwf/4H/8BAAAQAAAAAB//wf/8AHAADYABjAAwYAYDAMAYGADBAAQAAAH//B//wAAEAABAAAQAAEAABAAAQAAEAABAAAAf/8D//AYAADAAAYAADAABgAAwAAYAAP/8H//AAAAf/8H//AGAAAwAAGAAAwAAGAAAwB//wf/8AAAAf/AP/4GADBAAQQAEEABBAAQYAMD/+Af/AAAAH//B//wQIAECABAgAQIAECABhgAPwAB4AAAAAH/wD/+BgAwQAEEAFBABwQAMGADg//sH/xAAAB//wf/8EDABA4AQLAECYBAjAYYYD8DAeAQAAAB4EA/BgYYMECBBAgQQIEECBBgwwMH4BA8AAAAQAAEAABAAAQAAH//B//wQAAEAABAAAQAAAAAB//Af/4AADAAAQAAEAABAAAQAAMH/+B//AAAAHgAB/gAB/AAB8AADwAA8AB8AH8Af4AHgAAAAAf/8H/+AADAABgAAwAAYAADAAAYAADAf/4H//AAAAYAMHgPAePAB3AAHAABwAB3AB48B4DwYAMAAABgAAeAAB4AAHgAAf8AH/AHgAHgAHgABgAAAAAEAPBAHwQDEEBhBAwQQYEEMBBGAQfAEHgBAAAAf/8H//BAAQQAEEABAAAAMAADwAAPAAA8AADwAAPAAA8AADAAAAQAEEABBAAQf/8H//AAAACAABgAAwAAYAAMAADAAAYAADAAAYAACAAAAAAAAEAABAAAQAAEAABAAAQAAEAABAAAQAAEAAAIAADAAAYAACAAAAAAABwAQ+AEYwBEEARBAEQQBEEAZBAD/wAf8AAAB//wf/8AQBAEAQBAEAQBAEAQBgMAP+AB/AAAAAH8AD/gBgMAQBAEAQBAEAQBAGAwAwYAEEAAAAAfwAP+AGAwBAEAQBAEAQBAEAQBB//wf/8AAAAB/AA/4AYjAEIQBCEAQhAEIQBiEAPjAB4gAAAAQAAEAABAAD//B//wRAAEQABEAAQAAAAAAB/AA/4QYDEEARBAEQQBEEARBAMwf/4H/8AAAH//B//wBAAAQAAEAABAAAQAAGAAA/8AH/AAAABAEAQBB3/wd/8AABAAAQAAAAAAwAAOAAAwAAEEABBAA3f/53/8AAAH//B//wACAABwAA2AAYwAMGAGAwBAEAAABAAQQAEH//B//wAAEAABAAAAB/8Af/AEAABAAAf/AH/wBAAAYAAD/wAf8AAAAH/wB/8AQAAEAABAAAQAAEAABgAAP/AB/wAAAAH8AD/gBgMAQBAEAQBAEAQBAGAwA/4AH8AAAAB//wf/8EAQBAEAQBAEAQBAEAYDAD/gAfwAAAAB/AA/4AYDAEAQBAEAQBAEAQBAEAf/8H//AAAAf/AH/wAYAAMAAGAABAAAQAAEAABAAAQAAAAAA8IAfjAEIQBCEAQhAEIQBCEAQhAGPwAh4AAAAEAABAAAQAB//gf/8AQBAEAQBAEAABAAAAB/wAf+AAAwAAEAABAAAQAAEAABAH/wB/8AAAAHAAB8AADwAAPAAA8AAPAAPAAPAAfAAHAAAAAAf+AH/wAAEAABAAfwAH8AABAAAQB/8Af+AAAABgMAcHABjAANgABwAAcAANgAGMAHBwBgMAAAAH/AB/4QADEAARAAEQABEAARAAMwf/4H/8AAAAQDAEBwBA0AQZAEMQBGEATBAFgQBwEAYBAAAAAIAACAAf/AP34GADBAAQQAEAAAB//wf/8AAABAAQQAEGADA/fgH/wACAAAgAAAAHAADwAAgAAIAADgAAcAABAAAQAA8AAOAAAAAAc/8HP/AAAAAfwAP+AGAwBAEB//wf/8BAEAYDADBgAQQAAAAAgQH/8D//BggQQIEECBBggQMAEBAHAABwAAABACAb9gD/wAQIAECABAgAQIAECAD/wBv2AQAgAAAGAAB4JAHiQAckAB/wAf8AckAeJAeCQGAAAAAAfj8H4/AAAAd8IP/jCIMQiBEIwRDH/wQ+4AAADgAA4AAAAAAAAA4AAOAAAAAAB/gAgEAT8gF/oBQKAUCgFAoBc6ATMgCAQAf4AAAADyAJ+gCQoAkKAJCgCQoAkKAP+gB/oAAAAAAgAAcAANgAGMADJgBnMATZABjAAwYAYDAEAQAAAAIAACAAAgAAIAACAAAgAAIAACAAA/AAPwAAAAAIAACAAAgAAIAACAAAgAAIAACAAAAAB/gAgEAX+gF/oBRCAUYgFHIBfaATigCAQAf4");
  base64DecodeToExistingUint8Array(bufferView, 187461, "B4AA/AAIQACEAAhAAPwAB4AAAAAACBAAgQAIEACBAP+QD/kACBAAgQAIEACBAAAAYgAOYACOAAmgAPIABiAAAAAEQADGAAkgAJIAD+AAbAAAAAAgAAYAAMAACAAAAAAAf/8H//AAEAABAAAQAAEAADAABgB/8Af/AAAAPwAH+ABAgAQIAH//B//wQAAEAAB//wf/8AAAABwAAcAAAAAAABAADwAA4AAAIAAGIAD+AA/gAAIAAAAAPiAH8gDBoAgKAICgCAoAwaAH8gA+IAAAAAQBAGAwAwYAGMAE2QBnMAMmABjAANgABwAAIAAAAAAGAgDAYBgP4wD+ZgAM4AGaADMgBn+Ax/gAAAAAwCAYBgMA/mAP7YgBuYAyOAYmgMPIGBiAAABEBgxgwJIYCSMA/mYGzOABmgAzIAZ/gMf4AAAAAcAAPgAGMADBBzgQcwEAABAAAwAB4AAcAAAAA//gf/6MCAyAgGgIAoCACAgAwIAH/+A//gAAAD/+B//gwIAICAKAgGgIDICAjAgAf/4D/+AAAAP/4H/+LAgGgIDICAyAgGgIAsCAB//gP/4AAAA//mf/7sCAiAgMgIBoCAKAgOwIDH/+A//gAAAD/+B//uwIDoCACAgAgIDoCA7AgAf/4D/+AAAAP/4H/+bAgPgICYCAmAgPgIBsCAB//gP/4AAAH/8D//BggAQIAECABAgAf/8H//BAgQQIEECBBAgQAAAB/8A//gYAMEABFAAfQAHkABBgAwOA4BgMAAAAD//g//6IECyBAmgQIoECCBAggQIIACCAAgAAAP/+D//ggQIIECKBAmgQLIECiBAggAIIACAAAA//4P/+KBAmgQLIECyBAmgQIoECCAAggAIAAAD//g//7oEC6BAggQIIEC6BAugQIIACCAAgAACIACyAAm//4v/+CAAggAIAAACAAggAIv/+b//sgAKIACAAACgAJoACz//s//5oACKAAgAADoAC6AAg//4P/+6AAugAIAAAAIAH//B//wQIEECBBAgQQIEEABBgAwP/4B/8AAAAD//m//7gwAgGAMAwBgGAIAwOAGDP/+D//gAAAD/4B//IwAbIACaAAigAIIACDABgf/wD/4AAAAP/gH/8DABggAIoACaAAsgAKMAGB//AP/gAAAA/+Af/wsAGaAAsgALIACaAAiwAYH/8A/+AAAAD/4Z//OwAaIACyAAmgAIoAC7ABsf/wD/4AAAAP/gH/87ABugAIIACCAAugALsAGB//AP/gAAACAgAwYAGMAA2AAHAABwAA2AAYwAMGACAgAAAAABAH/wD/+BgMwQGEEDBBBgQQwEGYDA//gH/wBAAAAAAD/+A//yAAGwAAmAAIgACAAAgAAYP/8D/+AAAAP/4D//AAAYAACIAAmAALAACgABg//wP/4AAAA//gP/8IABmAALAACwAAmAAIgAGD//A//gAAAD/+A//zgAG4AAgAAIAAC4AAuAAYP/8D/+AAAAMAADwAAPAAA8AID/mA/7A8Ag8AA8AAMAAAAAH//B//wCBAAgQAIEACBAAgQAMMAB+AAPAAAAAP/8H//BBBAQQMEEBBBAQYwED+DAc/gAHwAAAAAHABD4ERjBkQQNEEBRBAEQQBkEAP/AB/wAAAAAcAEPgBGMARBAUQQNEEGRBBGQQA/8AH/AAAAABwAQ+AUYwNEEGRBBkQQNEEBZBAD/wAf8AAAAAHAND4HRjBEQQZEEDRBAUQQdkEGP/AB/wAAAAAcAEPgdGMHRBAEQQBEEHRBB2QQA/8AH/AAAAABwAQ+A0YwfEEExBBMQQfEEDZBAD/wAf8AAAAAPgBH8ARBAEQQBkEAP/AH/gBCMAQhAEIQB+MAPiAAAAAfwAP+AGAwBAEQQB8EAeBAEAYDADBgAQQAAAAB/AA/4EYjBkIQNCEBQhAEIQBiEAPjAB4gAAAAH8AD/gBiMAQhAUIQNCEGQhBGIQA+MAHiAAAAAfwAP+AWIwNCEGQhBkIQNCEBYhAD4wAeIAAAAB/AA/4HYjB0IQBCEAQhB0IQdiEAPjAB4gAAAEQBBkAQN/8Bf/AAAQAAEAAAAEAQBAEBf/A3/wYAEEABAAAAFAEDQBBn/wZ/8DABAQAQAAAHQBB0AQB/8Af/BwAQcAEAAAAB/AU/4HYDAkAQdAEFwBAMAQBgMAP+AB/AAAAAf/A3/wdAAEQABkAANAABQAB2AAY/8AH/AAAAAfwAP+BGAwZAEDQBAUAQBAEAYDAD/gAfwAAAAB/AA/4AYDAEAQFAEDQBBkAQRgMAP+AB/AAAAAH8AD/gFgMDQBBkAQZAEDQBAWAwA/4AH8AAAAAfwDP+B2AwRAEGQBA0AQFAEHYDBj/gAfwAAAAB/AA/4HYDB0AQBAEAQBB0AQdgMAP+AB/AAAAACAAAgAAIAACAAcnAHJwACAAAgAAIAACAAAAAAf0AP+AGDwBBkAQxAEYQBMEAeDAD/gBfwAAAAH/AB/4EADBgAQMAEBABAAAQAAEAf/AH/wAAAAf8AH/gAAMAABAQAQMAEGABBAAQB/8Af/AAAAB/wAf+AQAwMAEGABBgAQMAEBABAH/wB/8AAAAH/AB/4HADBwAQAAEAABBwAQcAEAf/AH/wAAAAf8AH/hAAMQABEQARMAEWABFAAzB//gf/wAAAf//3//8EAQBAEAQBAEAQBAEAYDAD/gAfwAAAAH/AB/4XADFwARAAEQABFwARcAMwf/4H/8");
  base64DecodeToExistingUint8Array(bufferView, 189520, "BgMHCwsLCwMGBgwLBAsDCQsJCwsLCwsLCwsDBAoLCgsMCwsLCwsLCwsHDAsLDAsLCwsLCwsLCwwLCwsGCQYLCwULCwsLCwoLCwcJCgcLCwsLCwsLCgsLCwsLCwgDCAs=");
  base64DecodeToExistingUint8Array(bufferView, 189649, "AwsLDAsDCAcMCgwLCQwJCAsHBwULCwMEBgoMCwsLCwsLCwsLCw0LCwsLCwcHBwcMCwsLCwsLCw0LCwsLCwsLCwsLCwsLDQsLCwsLBwcHBwsLCwsLCwsLCwsLCwsLCwtKYW4ARmViAE1hcgBBcHIATWF5AEp1bgBKdWwAQXVnAFNlcABPY3QATm92AERlYwBTdW4ATW9uAFR1ZQBXZWQAVGh1AEZyaQBTYXQAAAAAAHQCAAB1AgAAdgIAAHcCAAB4AgAAeQIAAHoCAAB7AgAAfAIAAH0CAAB+AgAAfwIAAIACAACBAgAAggIAAIMCAACEAg==");
  base64DecodeToExistingUint8Array(bufferView, 189906, "HwDgB/8HAPgf+OD///8=");
  base64DecodeToExistingUint8Array(bufferView, 189938, "KEJRjNe9QMwgiiAD4Af/Bx8AEYgf+AD4QPzg////AAAGAAwAEwAZAB8AgAGGAYwBkwGZAZ8BIAMmAywDMwM5Az8DwATGBMwE0wTZBN8EYAZmBmwGcwZ5Bn8G4AfmB+wH8wf5B/8HADAGMAwwEzAZMB8wgDGGMYwxkzGZMZ8xIDMmMywzMzM5Mz8zwDTGNMw00zTZNN80YDZmNmw2czZ5Nn824DfmN+w38zf5N/83AGAGYAxgE2AZYB9ggGGGYYxhk2GZYZ9hIGMmYyxjM2M5Yz9jwGTGZMxk02TZZN9kYGZmZmxmc2Z5Zn9m4GfmZ+xn82f5Z/9nAJgGmAyYE5gZmB+YgJmGmYyZk5mZmZ+ZIJsmmyybM5s5mz+bwJzGnMyc05zZnN+cYJ5mnmyec555nn+e4J/mn+yf85/5n/+fAMgGyAzIE8gZyB/IgMmGyYzJk8mZyZ/JIMsmyyzLM8s5yz/LwMzGzMzM08zZzN/MYM5mzmzOc855zn/O4M/mz+zP88/5z//PAPgG+Az4E/gZ+B/4gPmG+Yz5k/mZ+Z/5IPsm+yz7M/s5+z/7wPzG/Mz80/zZ/N/8YP5m/mz+c/55/n/+4P/m/+z/8//5////");
  base64DecodeToExistingUint8Array(bufferView, 190478, "//8AACsAgQCsAHkATgAMABIAFwAEACcAtwCQAMAA0gDXAAAABQAeACMAtAC5ANIA1wAAAAkABwAIAAwACwAOAA8A5yoCABgDAACXAgAANSsCABACAACXAgAAnCoCAAgBAACXAgAAoCoCAAYBAACYAg==");
  base64DecodeToExistingUint8Array(bufferView, 190608, "T7thBWes3T8YLURU+yHpP5v2gdILc+8/GC1EVPsh+T/iZS8ifyt6PAdcFDMmpoE8vcvweogHcDwHXBQzJqaRPBgtRFT7Iek/GC1EVPsh6b/SITN/fNkCQNIhM3982QLA");
  base64DecodeToExistingUint8Array(bufferView, 190719, "gBgtRFT7IQlAGC1EVPshCcD+gitlRxVnQAAAAAAAADhDAAD6/kIudr86O568mvcMvb39/////98/PFRVVVVVxT+RKxfPVVWlPxfQpGcREYE/AAAAAAAAyELvOfr+Qi7mPyTEgv+9v84/tfQM1whrrD/MUEbSq7KDP4Q6Tpvg11U/");
  base64DecodeToExistingUint8Array(bufferView, 190862, "");
  base64DecodeToExistingUint8Array(bufferView, 199923, "QPsh+T8AAAAALUR0PgAAAICYRvg8AAAAYFHMeDsAAACAgxvwOQAAAEAgJXo4AAAAgCKC4zYAAAAAHfNpNQ==");
  base64DecodeToExistingUint8Array(bufferView, 199985, "gAEAbUQCAO++rd6+uv7KFf//AP//////////AQCgAKAAIAPQBwAABAAAAAoAAAAgAwAA4Pz//+gDAAAw5QIAYOUCADs+AgAV");
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function wasm2js_memory_fill(dest, value, size) {
    dest = dest >>> 0;
    size = size >>> 0;
    if (dest + size > bufferView.length) throw "trap: invalid memory.fill";
    bufferView.fill(value, dest, dest + size);
  }
      
  function wasm2js_memory_copy(dest, source, size) {
    // TODO: traps on invalid things
    bufferView.copyWithin(dest, source, source + size);
  }
      
function asmFunc(imports) {
 var buffer = new ArrayBuffer(17301504);
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var env = imports.env;
 var emscripten_asm_const_int = env.emscripten_asm_const_int;
 var emscripten_asm_const_double = env.emscripten_asm_const_double;
 var __stack_pointer = 460816;
 var __stack_end = 0;
 var __stack_base = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function __wasm_call_ctors() {
  emscripten_stack_init();
 }
 
 function stepcount_init() {
  AccelFilter_init(200464);
  HEAP32[49996] = 98304;
  HEAP16[100238] = 0;
  HEAP16[100239] = 0;
  HEAP16[100240] = 0;
  HEAP32[50121] = 0;
  HEAP8[200488] = 0;
  HEAP8[200489] = 0;
 }
 
 function AccelFilter_init($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = 0;
  while (1) {
   if (HEAP32[$1 + 8 >> 2] < 7) {
    HEAP8[HEAP32[$1 + 12 >> 2] + HEAP32[$1 + 8 >> 2] | 0] = 0;
    HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
    continue;
   }
   break;
  };
  HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] = 0;
 }
 
 function jslSetLex($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = HEAP32[50123];
  HEAP32[50123] = HEAP32[$1 + 12 >> 2];
  return HEAP32[$1 + 8 >> 2];
 }
 
 function jslCharPosFree($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvStringIteratorFree(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvStringIteratorFree($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jslCharPosClear($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2] = 0;
 }
 
 function jslCharPosFromLex($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvStringIteratorClone(HEAP32[$1 + 12 >> 2], HEAP32[50123] + 88 | 0);
  HEAP8[HEAP32[$1 + 12 >> 2] + 36 | 0] = HEAPU8[HEAP32[50123]];
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jslCharPosNew($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  jsvStringIteratorNew(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
  $0 = jsvStringIteratorGetCharAndNext(HEAP32[$3 + 12 >> 2]);
  HEAP8[HEAP32[$3 + 12 >> 2] + 36 | 0] = $0;
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jslSkipWhiteSpace() {
  var $0 = 0;
  while (1) {
   block : {
    while (1) {
     if (isWhitespaceInline(HEAP8[HEAP32[50123]] << 24 >> 24) & 1) {
      jslGetNextCh();
      continue;
     }
     break;
    };
    if (HEAPU8[HEAP32[50123]] != 47) {
     break block
    }
    if ((jslNextCh() & 255) == 47) {
     while (1) {
      $0 = 0;
      $0 = HEAP8[HEAP32[50123]] << 24 >> 24 ? HEAPU8[HEAP32[50123]] != 10 : $0;
      if ($0) {
       jslGetNextCh();
       continue;
      }
      break;
     };
     jslGetNextCh();
     continue;
    }
    if ((jslNextCh() & 255) == 42) {
     jslGetNextCh();
     jslGetNextCh();
     while (1) {
      $0 = 0;
      if (HEAP8[HEAP32[50123]] << 24 >> 24) {
       $0 = 0;
       if (HEAPU8[HEAP32[50123]] == 42) {
        $0 = (jslNextCh() & 255) == 47
       }
       $0 = $0 ^ -1;
      }
      if ($0 & 1) {
       jslGetNextCh();
       continue;
      }
      break;
     };
     if (!HEAPU8[HEAP32[50123]]) {
      HEAP16[HEAP32[50123] + 2 >> 1] = 137;
      break block;
     }
     jslGetNextCh();
     jslGetNextCh();
     continue;
    }
   }
   break;
  };
 }
 
 function isWhitespaceInline($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP8[$1 + 15 | 0] = $0;
  $0 = 1;
  block : {
   if (HEAPU8[$1 + 15 | 0] == 9) {
    break block
   }
   $0 = 1;
   if (HEAPU8[$1 + 15 | 0] == 11) {
    break block
   }
   $0 = 1;
   if (HEAPU8[$1 + 15 | 0] == 12) {
    break block
   }
   $0 = 1;
   if (HEAPU8[$1 + 15 | 0] == 32) {
    break block
   }
   $0 = 1;
   if (HEAPU8[$1 + 15 | 0] == 10) {
    break block
   }
   $0 = HEAPU8[$1 + 15 | 0] == 13;
  }
  return $0;
 }
 
 function jslGetNextCh() {
  var $0 = 0;
  $0 = jslNextCh();
  HEAP8[HEAP32[50123]] = $0;
  $0 = HEAP32[50123];
  HEAP32[$0 + 88 >> 2] = HEAP32[$0 + 88 >> 2] + 1;
  block : {
   if (HEAPU32[HEAP32[50123] + 88 >> 2] < HEAPU32[HEAP32[50123] + 92 >> 2]) {
    break block
   }
   $0 = HEAP32[50123];
   HEAP32[$0 + 88 >> 2] = HEAP32[$0 + 88 >> 2] - HEAP32[HEAP32[50123] + 92 >> 2];
   $0 = HEAP32[50123];
   HEAP32[$0 + 96 >> 2] = HEAP32[HEAP32[50123] + 92 >> 2] + HEAP32[$0 + 96 >> 2];
   if (jsvIsFlashString(HEAP32[HEAP32[50123] + 100 >> 2]) & 1) {
    jsvStringIteratorLoadFlashString(HEAP32[50123] + 88 | 0);
    break block;
   }
   block2 : {
    block1 : {
     if (!HEAP32[HEAP32[50123] + 100 >> 2]) {
      break block1
     }
     if (!(jsvGetLastChild(HEAP32[HEAP32[50123] + 100 >> 2]) & 65535)) {
      break block1
     }
     $0 = _jsvGetAddressOf(jsvGetLastChild(HEAP32[HEAP32[50123] + 100 >> 2]) & 65535);
     HEAP32[HEAP32[50123] + 100 >> 2] = $0;
     HEAP32[HEAP32[50123] + 104 >> 2] = HEAP32[HEAP32[50123] + 100 >> 2];
     $0 = jsvGetCharactersInVar(HEAP32[HEAP32[50123] + 100 >> 2]);
     HEAP32[HEAP32[50123] + 92 >> 2] = $0;
     break block2;
    }
    HEAP32[HEAP32[50123] + 100 >> 2] = 0;
    HEAP32[HEAP32[50123] + 104 >> 2] = 0;
    HEAP32[HEAP32[50123] + 92 >> 2] = 0;
    $0 = HEAP32[50123];
    HEAP32[$0 + 96 >> 2] = HEAP32[HEAP32[50123] + 88 >> 2] + HEAP32[$0 + 96 >> 2];
    HEAP32[HEAP32[50123] + 88 >> 2] = 0;
   }
  }
 }
 
 function jslNextCh() {
  var $0 = 0;
  if (HEAP32[HEAP32[50123] + 104 >> 2]) {
   $0 = HEAP8[HEAP32[HEAP32[50123] + 104 >> 2] + HEAP32[HEAP32[50123] + 88 >> 2] | 0]
  } else {
   $0 = 0
  }
  return $0 << 24 >> 24;
 }
 
 function jslGetNextToken() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = HEAP16[HEAP32[50123] + 2 >> 1] << 16 >> 16;
  HEAP16[HEAP32[50123] + 2 >> 1] = 0;
  HEAP8[HEAP32[50123] + 80 | 0] = 0;
  if (HEAP32[HEAP32[50123] + 76 >> 2]) {
   jsvUnLock(HEAP32[HEAP32[50123] + 76 >> 2]);
   HEAP32[HEAP32[50123] + 76 >> 2] = 0;
  }
  HEAP32[HEAP32[50123] + 8 >> 2] = HEAP32[HEAP32[50123] + 4 >> 2];
  HEAP8[$0 + 11 | 0] = HEAPU8[HEAP32[50123]];
  if (HEAPU8[$0 + 11 | 0] > 124) {
   HEAP8[$0 + 11 | 0] = 0
  }
  block18 : {
   block17 : {
    block15 : {
     block16 : {
      block11 : {
       block14 : {
        block5 : {
         block12 : {
          block13 : {
           block10 : {
            block9 : {
             block8 : {
              block7 : {
               block6 : {
                block4 : {
                 block3 : {
                  block2 : {
                   while (1) {
                    block : {
                     $1 = jsvStringIteratorGetIndex(HEAP32[50123] + 88 | 0);
                     HEAP32[HEAP32[50123] + 4 >> 2] = $1 - 1;
                     block1 : {
                      switch (HEAPU8[HEAPU8[$0 + 11 | 0] + 120992 | 0]) {
                      case 0:
                       break block;
                      case 1:
                       break block1;
                      case 10:
                       break block10;
                      case 11:
                       break block11;
                      case 12:
                       break block12;
                      case 13:
                       break block13;
                      case 14:
                       break block14;
                      case 15:
                       break block15;
                      case 16:
                       break block16;
                      case 17:
                       break block17;
                      case 2:
                       break block2;
                      case 3:
                       break block3;
                      case 4:
                       break block4;
                      case 5:
                       break block5;
                      case 6:
                       break block6;
                      case 7:
                       break block7;
                      case 8:
                       break block8;
                      case 9:
                       break block9;
                      default:
                       break block18;
                      };
                     }
                     jslSkipWhiteSpace();
                     HEAP8[$0 + 11 | 0] = HEAPU8[HEAP32[50123]];
                     if (HEAPU8[$0 + 11 | 0] > 124) {
                      HEAP8[$0 + 11 | 0] = 0
                     }
                     if (HEAPU8[$0 + 11 | 0] == 47) {
                      HEAP8[$0 + 11 | 0] = 125
                     }
                     continue;
                    }
                    break;
                   };
                   jslSingleChar();
                   block19 : {
                    if (HEAPU16[HEAP32[50123] + 2 >> 1] == 175) {
                     HEAP8[HEAP32[50123] + 81 | 0] = 1;
                     break block19;
                    }
                    if (HEAP16[HEAP32[50123] + 2 >> 1] << 16 >> 16 >= 209) {
                     block21 : {
                      if (!(HEAPU16[HEAP32[50123] + 2 >> 1] != 209 & HEAPU16[HEAP32[50123] + 2 >> 1] != 210)) {
                       jslGetRawString();
                       break block21;
                      }
                      block22 : {
                       if (HEAPU16[HEAP32[50123] + 2 >> 1] == 211) {
                        HEAP16[HEAP32[50123] + 2 >> 1] = 129;
                        $1 = jsvNewFromInteger(0);
                        HEAP32[HEAP32[50123] + 76 >> 2] = $1;
                        break block22;
                       }
                       block23 : {
                        if (HEAPU16[HEAP32[50123] + 2 >> 1] == 212) {
                         HEAP16[HEAP32[50123] + 2 >> 1] = 129;
                         $1 = jsvNewFromInteger(HEAP8[HEAP32[50123]] << 24 >> 24);
                         HEAP32[HEAP32[50123] + 76 >> 2] = $1;
                         jslGetNextCh();
                         break block23;
                        }
                        if (HEAPU16[HEAP32[50123] + 2 >> 1] == 213) {
                         HEAP16[HEAP32[50123] + 2 >> 1] = 129;
                         HEAP16[$0 + 8 >> 1] = HEAPU8[HEAP32[50123]];
                         jslGetNextCh();
                         HEAP16[$0 + 8 >> 1] = HEAP16[$0 + 8 >> 1] << 16 >> 16 | HEAP8[HEAP32[50123]] << 24 >> 24 << 8;
                         jslGetNextCh();
                         $1 = jsvNewFromInteger(HEAP16[$0 + 8 >> 1] << 16 >> 16);
                         HEAP32[HEAP32[50123] + 76 >> 2] = $1;
                        }
                       }
                      }
                     }
                    }
                   }
                   break block18;
                  }
                  while (1) {
                   $1 = 1;
                   block24 : {
                    if (isAlphaInline(HEAP8[HEAP32[50123]] << 24 >> 24) & 1) {
                     break block24
                    }
                    $1 = 1;
                    if (isNumericInline(HEAP8[HEAP32[50123]] << 24 >> 24) & 1) {
                     break block24
                    }
                    $1 = HEAPU8[HEAP32[50123]] == 36;
                   }
                   if ($1) {
                    jslTokenAppendChar(HEAP8[HEAP32[50123]] << 24 >> 24);
                    jslGetNextCh();
                    continue;
                   }
                   break;
                  };
                  HEAP16[HEAP32[50123] + 2 >> 1] = 128;
                  if (!HEAPU8[HEAP32[50123] + 13 | 0]) {
                   break block18
                  }
                  block30 : {
                   block39 : {
                    switch (HEAP8[HEAP32[50123] + 12 | 0] - 98 | 0) {
                    case 0:
                     jslCheckToken(135916, 168);
                     break block30;
                    case 1:
                     if (!(jslCheckToken(137446, 188) & 1)) {
                      if (!(jslCheckToken(136440, 178) & 1)) {
                       if (!(jslCheckToken(127054, 194) & 1)) {
                        if (!(jslCheckToken(124539, 174) & 1)) {
                         jslCheckToken(137113, 169)
                        }
                       }
                      }
                     }
                     break block30;
                    case 2:
                     if (!(jslCheckToken(124851, 189) & 1)) {
                      if (!(jslCheckToken(137334, 190) & 1)) {
                       if (!(jslCheckToken(135041, 165) & 1)) {
                        jslCheckToken(128084, 193)
                       }
                      }
                     }
                     break block30;
                    case 3:
                     if (!(jslCheckToken(137434, 164) & 1)) {
                      jslCheckToken(127601, 195)
                     }
                     break block30;
                    case 4:
                     if (!(jslCheckToken(137433, 181) & 1)) {
                      if (!(jslCheckToken(123716, 179) & 1)) {
                       if (!(jslCheckToken(127961, 167) & 1)) {
                        jslCheckToken(135340, 170)
                       }
                      }
                     }
                     break block30;
                    case 7:
                     if (!(jslCheckToken(136970, 163) & 1)) {
                      if (!(jslCheckToken(135507, 185) & 1)) {
                       jslCheckToken(136867, 186)
                      }
                     }
                     break block30;
                    case 10:
                     jslCheckToken(125076, 173);
                     break block30;
                    case 12:
                     if (!(jslCheckToken(124221, 184) & 1)) {
                      jslCheckToken(135674, 182)
                     }
                     break block30;
                    case 13:
                     jslCheckToken(136970, 198);
                     break block30;
                    case 16:
                     jslCheckToken(135066, 171);
                     break block30;
                    case 17:
                     if (!(jslCheckToken(140221, 197) & 1)) {
                      if (!(jslCheckToken(127998, 196) & 1)) {
                       jslCheckToken(136304, 187)
                      }
                     }
                     break block30;
                    case 18:
                     block41 : {
                      if (jslCheckToken(127284, 175) & 1) {
                       HEAP8[HEAP32[50123] + 81 | 0] = 1;
                       break block41;
                      }
                      if (!(jslCheckToken(124027, 176) & 1)) {
                       if (!(jslCheckToken(137109, 180) & 1)) {
                        if (!(jslCheckToken(123650, 177) & 1)) {
                         jslCheckToken(136861, 191)
                        }
                       }
                      }
                     }
                     break block30;
                    case 19:
                     jslCheckToken(138929, 183);
                     break block30;
                    case 21:
                     jslCheckToken(137608, 166);
                     break block30;
                    case 20:
                     break block39;
                    default:
                     break block30;
                    };
                   }
                   if (!(jslCheckToken(128392, 172) & 1)) {
                    jslCheckToken(138516, 192)
                   }
                  }
                  break block18;
                 }
                 HEAP8[$0 + 7 | 0] = 1;
                 block43 : {
                  if (HEAPU8[HEAP32[50123]] == 46) {
                   jslGetNextCh();
                   block42 : {
                    if (isNumericInline(HEAP8[HEAP32[50123]] << 24 >> 24) & 1) {
                     HEAP16[HEAP32[50123] + 2 >> 1] = 130;
                     jslTokenAppendChar(46);
                     break block42;
                    }
                    HEAP16[HEAP32[50123] + 2 >> 1] = 46;
                    break block18;
                   }
                   break block43;
                  }
                  if (HEAPU8[HEAP32[50123]] == 48) {
                   jslTokenAppendChar(HEAP8[HEAP32[50123]] << 24 >> 24);
                   jslGetNextCh();
                   block45 : {
                    block44 : {
                     if (HEAPU8[HEAP32[50123]] == 120 | HEAPU8[HEAP32[50123]] == 88 | (HEAPU8[HEAP32[50123]] == 98 | HEAPU8[HEAP32[50123]] == 66)) {
                      break block44
                     }
                     if (HEAPU8[HEAP32[50123]] == 111) {
                      break block44
                     }
                     if (HEAPU8[HEAP32[50123]] != 79) {
                      break block45
                     }
                    }
                    HEAP8[$0 + 7 | 0] = 0;
                    jslTokenAppendChar(HEAP8[HEAP32[50123]] << 24 >> 24);
                    jslGetNextCh();
                   }
                  }
                  HEAP16[HEAP32[50123] + 2 >> 1] = 129;
                  while (1) {
                   $1 = 1;
                   block46 : {
                    if (isNumericInline(HEAP8[HEAP32[50123]] << 24 >> 24) & 1) {
                     break block46
                    }
                    if (!(HEAP8[$0 + 7 | 0] & 1)) {
                     $1 = 1;
                     if (isHexadecimal(HEAP8[HEAP32[50123]] << 24 >> 24) & 1) {
                      break block46
                     }
                    }
                    $1 = HEAPU8[HEAP32[50123]] == 95;
                   }
                   if ($1) {
                    if (HEAPU8[HEAP32[50123]] != 95) {
                     jslTokenAppendChar(HEAP8[HEAP32[50123]] << 24 >> 24)
                    }
                    jslGetNextCh();
                    continue;
                   }
                   break;
                  };
                  if (!(!(HEAP8[$0 + 7 | 0] & 1) | HEAPU8[HEAP32[50123]] != 46)) {
                   HEAP16[HEAP32[50123] + 2 >> 1] = 130;
                   jslTokenAppendChar(46);
                   jslGetNextCh();
                  }
                 }
                 if (HEAPU16[HEAP32[50123] + 2 >> 1] == 130) {
                  while (1) {
                   $1 = 1;
                   if (!(isNumeric(HEAP8[HEAP32[50123]] << 24 >> 24) & 1)) {
                    $1 = HEAPU8[HEAP32[50123]] == 95
                   }
                   if ($1) {
                    if (HEAPU8[HEAP32[50123]] != 95) {
                     jslTokenAppendChar(HEAP8[HEAP32[50123]] << 24 >> 24)
                    }
                    jslGetNextCh();
                    continue;
                   }
                   break;
                  }
                 }
                 if (!(!(HEAP8[$0 + 7 | 0] & 1) | HEAPU8[HEAP32[50123]] != 101 & HEAPU8[HEAP32[50123]] != 69)) {
                  HEAP16[HEAP32[50123] + 2 >> 1] = 130;
                  jslTokenAppendChar(HEAP8[HEAP32[50123]] << 24 >> 24);
                  jslGetNextCh();
                  if (!(HEAPU8[HEAP32[50123]] != 45 & HEAPU8[HEAP32[50123]] != 43)) {
                   jslTokenAppendChar(HEAP8[HEAP32[50123]] << 24 >> 24);
                   jslGetNextCh();
                  }
                  while (1) {
                   $1 = 1;
                   if (!(isNumeric(HEAP8[HEAP32[50123]] << 24 >> 24) & 1)) {
                    $1 = HEAPU8[HEAP32[50123]] == 95
                   }
                   if ($1) {
                    if (HEAPU8[HEAP32[50123]] != 95) {
                     jslTokenAppendChar(HEAP8[HEAP32[50123]] << 24 >> 24)
                    }
                    jslGetNextCh();
                    continue;
                   }
                   break;
                  };
                 }
                 break block18;
                }
                jslLexString();
                break block18;
               }
               jslSingleChar();
               if (HEAPU8[HEAP32[50123]] == 61) {
                HEAP16[HEAP32[50123] + 2 >> 1] = 140;
                jslGetNextCh();
                if (HEAPU8[HEAP32[50123]] == 61) {
                 HEAP16[HEAP32[50123] + 2 >> 1] = 141;
                 jslGetNextCh();
                }
               }
               break block18;
              }
              jslSingleChar();
              block50 : {
               if (HEAPU8[HEAP32[50123]] == 61) {
                HEAP16[HEAP32[50123] + 2 >> 1] = 150;
                jslGetNextCh();
                break block50;
               }
               if (HEAPU8[HEAP32[50123]] == 43) {
                HEAP16[HEAP32[50123] + 2 >> 1] = 152;
                jslGetNextCh();
               }
              }
              break block18;
             }
             jslSingleChar();
             block51 : {
              if (HEAPU8[HEAP32[50123]] == 61) {
               HEAP16[HEAP32[50123] + 2 >> 1] = 151;
               jslGetNextCh();
               break block51;
              }
              if (HEAPU8[HEAP32[50123]] == 45) {
               HEAP16[HEAP32[50123] + 2 >> 1] = 153;
               jslGetNextCh();
              }
             }
             break block18;
            }
            jslSingleChar();
            block52 : {
             if (HEAPU8[HEAP32[50123]] == 61) {
              HEAP16[HEAP32[50123] + 2 >> 1] = 157;
              jslGetNextCh();
              break block52;
             }
             if (HEAPU8[HEAP32[50123]] == 38) {
              HEAP16[HEAP32[50123] + 2 >> 1] = 158;
              jslGetNextCh();
             }
            }
            break block18;
           }
           jslSingleChar();
           block53 : {
            if (HEAPU8[HEAP32[50123]] == 61) {
             HEAP16[HEAP32[50123] + 2 >> 1] = 159;
             jslGetNextCh();
             break block53;
            }
            if (HEAPU8[HEAP32[50123]] == 124) {
             HEAP16[HEAP32[50123] + 2 >> 1] = 160;
             jslGetNextCh();
            }
           }
           break block18;
          }
          jslSingleChar();
          if (HEAPU8[HEAP32[50123]] == 61) {
           HEAP16[HEAP32[50123] + 2 >> 1] = 161;
           jslGetNextCh();
          }
          break block18;
         }
         jslSingleChar();
         if (HEAPU8[HEAP32[50123]] == 61) {
          HEAP16[HEAP32[50123] + 2 >> 1] = 154;
          jslGetNextCh();
         }
         break block18;
        }
        jslSingleChar();
        if (HEAPU8[HEAP32[50123]] == 63) {
         HEAP16[HEAP32[50123] + 2 >> 1] = 208;
         jslGetNextCh();
        }
        break block18;
       }
       block57 : {
        block56 : {
         block54 : {
          if (!HEAP32[$0 + 12 >> 2]) {
           break block54
          }
          block55 : {
           if (HEAP32[$0 + 12 >> 2] < 138 | HEAP32[$0 + 12 >> 2] > 208 | (HEAP32[$0 + 12 >> 2] == 180 | HEAP32[$0 + 12 >> 2] == 181)) {
            break block55
           }
           if (HEAP32[$0 + 12 >> 2] == 182) {
            break block55
           }
           if (HEAP32[$0 + 12 >> 2] != 183) {
            break block54
           }
          }
          if (HEAP32[$0 + 12 >> 2] == 33 | HEAP32[$0 + 12 >> 2] == 37 | (HEAP32[$0 + 12 >> 2] == 38 | HEAP32[$0 + 12 >> 2] == 42)) {
           break block54
          }
          if (HEAP32[$0 + 12 >> 2] == 43 | HEAP32[$0 + 12 >> 2] == 45 | (HEAP32[$0 + 12 >> 2] == 47 | HEAP32[$0 + 12 >> 2] == 60)) {
           break block54
          }
          if (HEAP32[$0 + 12 >> 2] == 61 | HEAP32[$0 + 12 >> 2] == 62 | (HEAP32[$0 + 12 >> 2] == 63 | HEAP32[$0 + 12 >> 2] == 91)) {
           break block54
          }
          if (HEAP32[$0 + 12 >> 2] == 123 | HEAP32[$0 + 12 >> 2] == 125 | (HEAP32[$0 + 12 >> 2] == 40 | HEAP32[$0 + 12 >> 2] == 44)) {
           break block54
          }
          if (HEAP32[$0 + 12 >> 2] == 59) {
           break block54
          }
          if (HEAP32[$0 + 12 >> 2] != 58) {
           break block56
          }
         }
         jslLexRegex();
         break block57;
        }
        jslSingleChar();
        if (HEAPU8[HEAP32[50123]] == 61) {
         HEAP16[HEAP32[50123] + 2 >> 1] = 155;
         jslGetNextCh();
        }
       }
       break block18;
      }
      jslSingleChar();
      if (HEAPU8[HEAP32[50123]] == 61) {
       HEAP16[HEAP32[50123] + 2 >> 1] = 156;
       jslGetNextCh();
      }
      break block18;
     }
     jslSingleChar();
     block58 : {
      if (HEAPU8[HEAP32[50123]] == 61) {
       HEAP16[HEAP32[50123] + 2 >> 1] = 138;
       jslGetNextCh();
       if (HEAPU8[HEAP32[50123]] == 61) {
        HEAP16[HEAP32[50123] + 2 >> 1] = 139;
        jslGetNextCh();
       }
       break block58;
      }
      if (HEAPU8[HEAP32[50123]] == 62) {
       HEAP16[HEAP32[50123] + 2 >> 1] = 162;
       jslGetNextCh();
      }
     }
     break block18;
    }
    jslSingleChar();
    block59 : {
     if (HEAPU8[HEAP32[50123]] == 61) {
      HEAP16[HEAP32[50123] + 2 >> 1] = 142;
      jslGetNextCh();
      break block59;
     }
     if (HEAPU8[HEAP32[50123]] == 60) {
      HEAP16[HEAP32[50123] + 2 >> 1] = 143;
      jslGetNextCh();
      if (HEAPU8[HEAP32[50123]] == 61) {
       HEAP16[HEAP32[50123] + 2 >> 1] = 144;
       jslGetNextCh();
      }
     }
    }
    break block18;
   }
   jslSingleChar();
   block60 : {
    if (HEAPU8[HEAP32[50123]] == 61) {
     HEAP16[HEAP32[50123] + 2 >> 1] = 145;
     jslGetNextCh();
     break block60;
    }
    if (HEAPU8[HEAP32[50123]] == 62) {
     HEAP16[HEAP32[50123] + 2 >> 1] = 146;
     jslGetNextCh();
     block61 : {
      if (HEAPU8[HEAP32[50123]] == 61) {
       HEAP16[HEAP32[50123] + 2 >> 1] = 148;
       jslGetNextCh();
       break block61;
      }
      if (HEAPU8[HEAP32[50123]] == 62) {
       jslGetNextCh();
       block62 : {
        if (HEAPU8[HEAP32[50123]] == 61) {
         HEAP16[HEAP32[50123] + 2 >> 1] = 149;
         jslGetNextCh();
         break block62;
        }
        HEAP16[HEAP32[50123] + 2 >> 1] = 147;
       }
      }
     }
    }
   }
  }
  __stack_pointer = $0 + 16 | 0;
 }
 
 function jsvStringIteratorGetIndex($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + HEAP32[HEAP32[$1 + 12 >> 2] >> 2] | 0;
 }
 
 function jslSingleChar() {
  HEAP16[HEAP32[50123] + 2 >> 1] = HEAPU8[HEAP32[50123]];
  jslGetNextCh();
 }
 
 function jslGetRawString() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP8[$0 + 15 | 0] = HEAPU16[HEAP32[50123] + 2 >> 1] == 210;
  HEAP16[HEAP32[50123] + 2 >> 1] = 131;
  HEAP32[$0 + 8 >> 2] = HEAPU8[HEAP32[50123]];
  if (HEAP8[$0 + 15 | 0] & 1) {
   jslGetNextCh();
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] | HEAPU8[HEAP32[50123]] << 8;
  }
  jsvUnLock(HEAP32[HEAP32[50123] + 76 >> 2]);
  block : {
   if (HEAPU32[$0 + 8 >> 2] > 9) {
    HEAP32[$0 + 4 >> 2] = jsvStringIteratorGetIndex(HEAP32[50123] + 88 | 0);
    $1 = jsvNewFromStringVar(HEAP32[HEAP32[50123] + 84 >> 2], HEAP32[$0 + 4 >> 2], HEAP32[$0 + 8 >> 2]);
    HEAP32[HEAP32[50123] + 76 >> 2] = $1;
    jsvLockAgain(HEAP32[HEAP32[50123] + 100 >> 2]);
    jsvStringIteratorGoto(HEAP32[50123] + 88 | 0, HEAP32[HEAP32[50123] + 84 >> 2], HEAP32[$0 + 4 >> 2] + HEAP32[$0 + 8 >> 2] | 0);
    jsvUnLock(HEAP32[HEAP32[50123] + 100 >> 2]);
    break block;
   }
   $1 = jsvNewWithFlags(HEAP32[$0 + 8 >> 2] + 28 & 65535);
   HEAP32[HEAP32[50123] + 76 >> 2] = $1;
   HEAP32[$0 >> 2] = 0;
   while (1) {
    if (HEAPU32[$0 >> 2] < HEAPU32[$0 + 8 >> 2]) {
     jslGetNextCh();
     HEAP8[HEAP32[HEAP32[50123] + 76 >> 2] + HEAP32[$0 >> 2] | 0] = HEAPU8[HEAP32[50123]];
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     continue;
    }
    break;
   };
  }
  jslGetNextCh();
  __stack_pointer = $0 + 16 | 0;
 }
 
 function isAlphaInline($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP8[$1 + 15 | 0] = $0;
  block : {
   if (HEAP8[$1 + 15 | 0] << 24 >> 24 >= 97) {
    $0 = 1;
    if (HEAP8[$1 + 15 | 0] << 24 >> 24 <= 122) {
     break block
    }
   }
   if (HEAP8[$1 + 15 | 0] << 24 >> 24 >= 65) {
    $0 = 1;
    if (HEAP8[$1 + 15 | 0] << 24 >> 24 <= 90) {
     break block
    }
   }
   $0 = HEAPU8[$1 + 15 | 0] == 95;
  }
  return $0;
 }
 
 function isNumericInline($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP8[$1 + 15 | 0] = $0;
  $2 = HEAP8[$1 + 15 | 0] << 24 >> 24 >= 48 ? HEAP8[$1 + 15 | 0] << 24 >> 24 <= 57 : $2;
  return $2;
 }
 
 function jslTokenAppendChar($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP8[$1 + 15 | 0] = $0;
  if (HEAPU8[HEAP32[50123] + 80 | 0] < 63) {
   $2 = HEAPU8[$1 + 15 | 0];
   $0 = HEAP32[50123];
   $1 = HEAPU8[$0 + 80 | 0];
   HEAP8[$0 + 80 | 0] = $1 + 1;
   HEAP8[($0 + 12 | 0) + $1 | 0] = $2;
  }
 }
 
 function jslCheckToken($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP16[$2 + 6 >> 1] = $1;
  HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] - 1;
  HEAP32[$2 >> 2] = 1;
  block : {
   while (1) {
    if (HEAP32[$2 >> 2] < HEAPU8[HEAP32[50123] + 80 | 0]) {
     if (HEAPU8[HEAP32[$2 >> 2] + (HEAP32[50123] + 12 | 0) | 0] != HEAPU8[HEAP32[$2 + 8 >> 2] + HEAP32[$2 >> 2] | 0]) {
      HEAP8[$2 + 15 | 0] = 0;
      break block;
     } else {
      HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
      continue;
     }
    }
    break;
   };
   if (!HEAPU8[HEAP32[$2 + 8 >> 2] + HEAPU8[HEAP32[50123] + 80 | 0] | 0]) {
    HEAP16[HEAP32[50123] + 2 >> 1] = HEAPU16[$2 + 6 >> 1];
    HEAP8[$2 + 15 | 0] = 1;
    break block;
   }
   HEAP8[$2 + 15 | 0] = 0;
  }
  return HEAP8[$2 + 15 | 0] & 1;
 }
 
 function jslLexString() {
  var $0 = 0, $1 = 0, $2 = 0;
  $0 = __stack_pointer - 80 | 0;
  __stack_pointer = $0;
  HEAP8[$0 + 79 | 0] = HEAPU8[HEAP32[50123]];
  HEAP32[$0 + 52 >> 2] = 0;
  block : {
   if ((HEAP32[92138] & 63) == 1) {
    $1 = jsvNewFromEmptyString();
    HEAP32[HEAP32[50123] + 76 >> 2] = $1;
    if (!HEAP32[HEAP32[50123] + 76 >> 2]) {
     HEAP16[HEAP32[50123] + 2 >> 1] = 0;
     break block;
    }
    jsvStringIteratorNew($0 + 40 | 0, HEAP32[HEAP32[50123] + 76 >> 2], 0);
   }
   jslGetNextCh();
   HEAP8[$0 + 39 | 0] = HEAPU8[$0 + 79 | 0];
   HEAP32[$0 + 32 >> 2] = 0;
   HEAP8[$0 + 31 | 0] = 0;
   while (1) {
    $1 = 0;
    if (HEAP8[HEAP32[50123]] << 24 >> 24) {
     $1 = 1;
     $1 = HEAPU8[HEAP32[50123]] == HEAPU8[$0 + 79 | 0] ? HEAP32[$0 + 32 >> 2] != 0 : $1;
    }
    block1 : {
     if (!($1 & 1)) {
      break block1
     }
     if (HEAPU8[$0 + 79 | 0] == 96) {
      block3 : {
       if (!(!HEAP32[$0 + 32 >> 2] & HEAPU8[$0 + 39 | 0] != 36 | HEAPU8[HEAP32[50123]] != 123)) {
        HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 32 >> 2] + 1;
        HEAP8[$0 + 31 | 0] = 1;
        break block3;
       }
       if (!(!HEAP32[$0 + 32 >> 2] | HEAPU8[HEAP32[50123]] != 125)) {
        HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 32 >> 2] - 1
       }
      }
     }
     block20 : {
      if (HEAPU8[HEAP32[50123]] == 92) {
       jslGetNextCh();
       HEAP8[$0 + 30 | 0] = HEAPU8[HEAP32[50123]];
       block13 : {
        block6 : {
         switch (HEAP8[HEAP32[50123]] - 98 | 0) {
         case 12:
          HEAP8[$0 + 30 | 0] = 10;
          jslGetNextCh();
          break block13;
         case 0:
          HEAP8[$0 + 30 | 0] = 8;
          jslGetNextCh();
          break block13;
         case 4:
          HEAP8[$0 + 30 | 0] = 12;
          jslGetNextCh();
          break block13;
         case 16:
          HEAP8[$0 + 30 | 0] = 13;
          jslGetNextCh();
          break block13;
         case 18:
          HEAP8[$0 + 30 | 0] = 9;
          jslGetNextCh();
          break block13;
         case 20:
          HEAP8[$0 + 30 | 0] = 11;
          jslGetNextCh();
          break block13;
         case 19:
         case 22:
          HEAP8[$0 + 24 | 0] = HEAPU8[HEAP32[50123]] == 117;
          jslGetNextCh();
          HEAP32[$0 + 20 >> 2] = HEAP8[$0 + 24 | 0] & 1 ? 4 : 2;
          HEAP32[$0 + 16 >> 2] = 0;
          while (1) {
           block14 : {
            $1 = HEAP32[$0 + 20 >> 2];
            HEAP32[$0 + 20 >> 2] = $1 - 1;
            if (!$1) {
             break block14
            }
            block15 : {
             if (HEAPU8[HEAP32[50123]]) {
              if (isHexadecimal(HEAP8[HEAP32[50123]] << 24 >> 24) & 1) {
               break block15
              }
             }
             jsExceptionHere(1, 138014, 0);
             break block14;
            }
            $2 = HEAPU8[HEAP32[50123]];
            $1 = HEAP32[$0 + 16 >> 2];
            HEAP32[$0 + 16 >> 2] = $1 + 1;
            HEAP8[($0 + 25 | 0) + $1 | 0] = $2;
            jslGetNextCh();
            continue;
           }
           break;
          };
          HEAP8[HEAP32[$0 + 16 >> 2] + ($0 + 25 | 0) | 0] = 0;
          $1 = stringToIntWithRadix($0 + 25 | 0, 16, 0, 0);
          HEAP32[$0 + 12 >> 2] = $1;
          HEAP8[$0 + 30 | 0] = HEAP32[$0 + 12 >> 2];
          break block13;
         default:
          break block6;
         };
        }
        block19 : {
         if (!(HEAP8[HEAP32[50123]] << 24 >> 24 < 48 | HEAP8[HEAP32[50123]] << 24 >> 24 > 55)) {
          HEAP8[$0 + 8 | 0] = HEAPU8[148588];
          HEAP32[$0 + 4 >> 2] = HEAPU8[148584] | HEAPU8[148585] << 8 | (HEAPU8[148586] << 16 | HEAPU8[148587] << 24);
          HEAP8[$0 + 5 | 0] = HEAPU8[HEAP32[50123]];
          HEAP32[$0 >> 2] = 2;
          jslGetNextCh();
          if (!(HEAP8[HEAP32[50123]] << 24 >> 24 < 48 | HEAP8[HEAP32[50123]] << 24 >> 24 > 55)) {
           $2 = HEAPU8[HEAP32[50123]];
           $1 = HEAP32[$0 >> 2];
           HEAP32[$0 >> 2] = $1 + 1;
           HEAP8[($0 + 4 | 0) + $1 | 0] = $2;
           jslGetNextCh();
           if (!(HEAP8[HEAP32[50123]] << 24 >> 24 < 48 | HEAP8[HEAP32[50123]] << 24 >> 24 > 55)) {
            $2 = HEAPU8[HEAP32[50123]];
            $1 = HEAP32[$0 >> 2];
            HEAP32[$0 >> 2] = $1 + 1;
            HEAP8[($0 + 4 | 0) + $1 | 0] = $2;
            jslGetNextCh();
           }
          }
          HEAP8[HEAP32[$0 >> 2] + ($0 + 4 | 0) | 0] = 0;
          $1 = stringToInt($0 + 4 | 0);
          HEAP8[$0 + 30 | 0] = $1;
          break block19;
         }
         jslGetNextCh();
        }
       }
       HEAP8[$0 + 39 | 0] = HEAPU8[$0 + 30 | 0];
       jsvStringIteratorAppend($0 + 40 | 0, HEAP8[$0 + 30 | 0] << 24 >> 24);
       break block20;
      }
      if (!(HEAPU8[$0 + 79 | 0] == 96 | HEAPU8[HEAP32[50123]] != 10)) {
       break block1
      }
      jsvStringIteratorAppend($0 + 40 | 0, HEAP8[HEAP32[50123]] << 24 >> 24);
      HEAP8[$0 + 39 | 0] = HEAPU8[HEAP32[50123]];
      jslGetNextCh();
     }
     continue;
    }
    break;
   };
   jsvStringIteratorFree($0 + 40 | 0);
   block23 : {
    if (!(!(HEAP8[$0 + 31 | 0] & 1) | HEAPU8[$0 + 79 | 0] != 96)) {
     HEAP16[HEAP32[50123] + 2 >> 1] = 133;
     break block23;
    }
    HEAP16[HEAP32[50123] + 2 >> 1] = 131;
   }
   if (HEAPU8[HEAP32[50123]] != HEAPU8[$0 + 79 | 0]) {
    HEAP16[HEAP32[50123] + 2 >> 1] = HEAPU8[$0 + 79 | 0] == 96 ? 134 : 132
   }
   jslGetNextCh();
  }
  __stack_pointer = $0 + 80 | 0;
 }
 
 function jslLexRegex() {
  var $0 = 0, $1 = 0;
  $1 = __stack_pointer - 48 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 24 >> 2] = 0;
  block : {
   if ((HEAP32[92138] & 63) == 1) {
    $0 = jsvNewFromEmptyString();
    HEAP32[HEAP32[50123] + 76 >> 2] = $0;
    if (!HEAP32[HEAP32[50123] + 76 >> 2]) {
     HEAP16[HEAP32[50123] + 2 >> 1] = 0;
     break block;
    }
    jsvStringIteratorNew($1 + 12 | 0, HEAP32[HEAP32[50123] + 76 >> 2], 0);
    jsvStringIteratorAppend($1 + 12 | 0, 47);
   }
   jslGetNextCh();
   while (1) {
    $0 = 0;
    block1 : {
     $0 = HEAP8[HEAP32[50123]] << 24 >> 24 ? HEAPU8[HEAP32[50123]] != 47 : $0;
     if (!$0) {
      break block1
     }
     block2 : {
      if (HEAPU8[HEAP32[50123]] == 92) {
       jsvStringIteratorAppend($1 + 12 | 0, HEAP8[HEAP32[50123]] << 24 >> 24);
       jslGetNextCh();
       break block2;
      }
      if (HEAPU8[HEAP32[50123]] == 10) {
       break block1
      }
     }
     jsvStringIteratorAppend($1 + 12 | 0, HEAP8[HEAP32[50123]] << 24 >> 24);
     jslGetNextCh();
     continue;
    }
    break;
   };
   HEAP16[HEAP32[50123] + 2 >> 1] = 135;
   block3 : {
    if (HEAPU8[HEAP32[50123]] != 47) {
     $0 = HEAP32[50123];
     HEAP16[$0 + 2 >> 1] = HEAPU16[$0 + 2 >> 1] + 1;
     break block3;
    }
    jsvStringIteratorAppend($1 + 12 | 0, 47);
    jslGetNextCh();
    while (1) {
     $0 = 1;
     block4 : {
      if (HEAPU8[HEAP32[50123]] == 103) {
       break block4
      }
      $0 = 1;
      if (HEAPU8[HEAP32[50123]] == 105) {
       break block4
      }
      $0 = 1;
      if (HEAPU8[HEAP32[50123]] == 109) {
       break block4
      }
      $0 = 1;
      if (HEAPU8[HEAP32[50123]] == 121) {
       break block4
      }
      $0 = HEAPU8[HEAP32[50123]] == 117;
     }
     if ($0) {
      jsvStringIteratorAppend($1 + 12 | 0, HEAP8[HEAP32[50123]] << 24 >> 24);
      jslGetNextCh();
      continue;
     }
     break;
    };
   }
   jsvStringIteratorFree($1 + 12 | 0);
  }
  __stack_pointer = $1 + 48 | 0;
 }
 
 function jslInit($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jsvLockAgain(HEAP32[$1 + 12 >> 2]);
  HEAP32[HEAP32[50123] + 84 >> 2] = $0;
  HEAP16[HEAP32[50123] + 2 >> 1] = 0;
  HEAP32[HEAP32[50123] + 4 >> 2] = 0;
  HEAP32[HEAP32[50123] + 8 >> 2] = 0;
  HEAP8[HEAP32[50123] + 80 | 0] = 0;
  HEAP32[HEAP32[50123] + 76 >> 2] = 0;
  HEAP32[HEAP32[50123] + 124 >> 2] = 0;
  HEAP32[HEAP32[50123] + 128 >> 2] = 0;
  jsvStringIteratorNew(HEAP32[50123] + 88 | 0, HEAP32[HEAP32[50123] + 84 >> 2], 0);
  jsvUnLock(HEAP32[HEAP32[50123] + 100 >> 2]);
  jslPreload();
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jslPreload() {
  jslGetNextCh();
  jslGetNextToken();
 }
 
 function jslKill() {
  HEAP16[HEAP32[50123] + 2 >> 1] = 0;
  if (HEAP32[HEAP32[50123] + 100 >> 2]) {
   jsvLockAgain(HEAP32[HEAP32[50123] + 100 >> 2])
  }
  jsvStringIteratorFree(HEAP32[50123] + 88 | 0);
  if (HEAP32[HEAP32[50123] + 76 >> 2]) {
   jsvUnLock(HEAP32[HEAP32[50123] + 76 >> 2]);
   HEAP32[HEAP32[50123] + 76 >> 2] = 0;
  }
  jsvUnLock(HEAP32[HEAP32[50123] + 84 >> 2]);
 }
 
 function jslSeekToP($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  if (HEAP32[HEAP32[50123] + 100 >> 2]) {
   jsvLockAgain(HEAP32[HEAP32[50123] + 100 >> 2])
  }
  jsvStringIteratorFree(HEAP32[50123] + 88 | 0);
  jsvStringIteratorClone(HEAP32[50123] + 88 | 0, HEAP32[$1 + 12 >> 2]);
  jsvUnLock(HEAP32[HEAP32[50123] + 100 >> 2]);
  HEAP8[HEAP32[50123]] = HEAPU8[HEAP32[$1 + 12 >> 2] + 36 | 0];
  HEAP32[HEAP32[50123] + 4 >> 2] = 0;
  HEAP32[HEAP32[50123] + 8 >> 2] = 0;
  HEAP16[HEAP32[50123] + 2 >> 1] = 0;
  jslGetNextToken();
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jslFunctionCharAsString($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP8[$3 + 15 | 0] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  block : {
   if (HEAPU8[$3 + 15 | 0] >= 128) {
    jslTokenAsString(HEAPU8[$3 + 15 | 0], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
    break block;
   }
   HEAP8[HEAP32[$3 + 8 >> 2]] = HEAPU8[$3 + 15 | 0];
   HEAP8[HEAP32[$3 + 8 >> 2] + 1 | 0] = 0;
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jslTokenAsString($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  block1 : {
   if (!(HEAP32[$3 + 12 >> 2] <= 32 | HEAP32[$3 + 12 >> 2] >= 128)) {
    HEAP8[HEAP32[$3 + 8 >> 2]] = 39;
    HEAP8[HEAP32[$3 + 8 >> 2] + 1 | 0] = HEAP32[$3 + 12 >> 2];
    HEAP8[HEAP32[$3 + 8 >> 2] + 2 | 0] = 39;
    HEAP8[HEAP32[$3 + 8 >> 2] + 3 | 0] = 0;
    break block1;
   }
   block13 : {
    block12 : {
     block11 : {
      block10 : {
       block9 : {
        block8 : {
         block7 : {
          block6 : {
           block5 : {
            block4 : {
             block3 : {
              block2 : {
               $0 = HEAP32[$3 + 12 >> 2];
               if ($0) {
                if (($0 | 0) == 128) {
                 break block2
                }
                if (($0 | 0) == 129) {
                 break block3
                }
                if (($0 | 0) == 130) {
                 break block4
                }
                if (($0 | 0) == 131) {
                 break block5
                }
                if (($0 | 0) == 132) {
                 break block6
                }
                if (($0 | 0) == 133) {
                 break block7
                }
                if (($0 | 0) == 134) {
                 break block8
                }
                if (($0 | 0) == 135) {
                 break block9
                }
                if (($0 | 0) == 136) {
                 break block10
                }
                if (($0 | 0) == 137) {
                 break block11
                }
                if (($0 | 0) == 255) {
                 break block12
                }
                break block13;
               }
               strcpy(HEAP32[$3 + 8 >> 2], 141248);
               break block1;
              }
              strcpy(HEAP32[$3 + 8 >> 2], 141306);
              break block1;
             }
             strcpy(HEAP32[$3 + 8 >> 2], 140767);
             break block1;
            }
            strcpy(HEAP32[$3 + 8 >> 2], 140870);
            break block1;
           }
           strcpy(HEAP32[$3 + 8 >> 2], 141233);
           break block1;
          }
          strcpy(HEAP32[$3 + 8 >> 2], 141222);
          break block1;
         }
         strcpy(HEAP32[$3 + 8 >> 2], 141062);
         break block1;
        }
        strcpy(HEAP32[$3 + 8 >> 2], 141051);
        break block1;
       }
       strcpy(HEAP32[$3 + 8 >> 2], 140708);
       break block1;
      }
      strcpy(HEAP32[$3 + 8 >> 2], 140697);
      break block1;
     }
     strcpy(HEAP32[$3 + 8 >> 2], 140771);
     break block1;
    }
    strcpy(HEAP32[$3 + 8 >> 2], 140495);
    break block1;
   }
   if (!(HEAP32[$3 + 12 >> 2] < 138 | HEAP32[$3 + 12 >> 2] > 208)) {
    strcpy(HEAP32[$3 + 8 >> 2], jslReservedWordAsString(HEAP32[$3 + 12 >> 2]));
    break block1;
   }
   $0 = HEAP32[$3 + 8 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   HEAP32[$3 >> 2] = HEAP32[$3 + 12 >> 2];
   espruino_snprintf($0, $1, 140472, $3);
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jslReservedWordAsString($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 12 >> 2] - 138;
  while (1) {
   $0 = 0;
   $0 = HEAP32[$1 + 4 >> 2] > 0 ? HEAPU32[$1 + 8 >> 2] < 312 : $0;
   if ($0) {
    while (1) {
     $0 = 0;
     $0 = HEAP8[HEAP32[$1 + 8 >> 2] + 148272 | 0] << 24 >> 24 ? HEAPU32[$1 + 8 >> 2] < 312 : $0;
     if ($0) {
      HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
      continue;
     }
     break;
    };
    HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
    HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - 1;
    continue;
   }
   break;
  };
  return HEAP32[$1 + 8 >> 2] + 148272 | 0;
 }
 
 function jslGetTokenString($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  block : {
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 128) {
    $0 = HEAP32[$2 + 28 >> 2];
    $1 = HEAP32[$2 + 24 >> 2];
    HEAP32[$2 >> 2] = jslGetTokenValueAsString();
    espruino_snprintf($0, $1, 127637, $2);
    break block;
   }
   block1 : {
    if (HEAPU16[HEAP32[50123] + 2 >> 1] == 131) {
     $0 = HEAP32[$2 + 28 >> 2];
     $1 = HEAP32[$2 + 24 >> 2];
     HEAP32[$2 + 16 >> 2] = jslGetTokenValueAsString();
     espruino_snprintf($0, $1, 146388, $2 + 16 | 0);
     break block1;
    }
    jslTokenAsString(HEAP16[HEAP32[50123] + 2 >> 1] << 16 >> 16, HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2]);
   }
  }
  __stack_pointer = $2 + 32 | 0;
 }
 
 function jslGetTokenValueAsString() {
  var $0 = 0;
  if (!(HEAPU8[HEAP32[50123] + 80 | 0] | !HEAP32[HEAP32[50123] + 76 >> 2])) {
   $0 = jsvGetString(HEAP32[HEAP32[50123] + 76 >> 2], HEAP32[50123] + 12 | 0, 64);
   HEAP8[HEAP32[50123] + 80 | 0] = $0;
  }
  HEAP8[HEAPU8[HEAP32[50123] + 80 | 0] + (HEAP32[50123] + 12 | 0) | 0] = 0;
  if (!(HEAPU8[HEAP32[50123] + 80 | 0] | HEAP16[HEAP32[50123] + 2 >> 1] << 16 >> 16 < 163 | HEAP16[HEAP32[50123] + 2 >> 1] << 16 >> 16 > 198)) {
   jslTokenAsString(HEAP16[HEAP32[50123] + 2 >> 1] << 16 >> 16, HEAP32[50123] + 12 | 0, 64);
   strcpy(HEAP32[50123] + 12 | 0, jslReservedWordAsString(HEAP16[HEAP32[50123] + 2 >> 1] << 16 >> 16));
   $0 = strlen(HEAP32[50123] + 12 | 0);
   HEAP8[HEAP32[50123] + 80 | 0] = $0;
  }
  return HEAP32[50123] + 12 | 0;
 }
 
 function jslGetTokenLength() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  block : {
   if (HEAP32[HEAP32[50123] + 76 >> 2]) {
    HEAP32[$0 + 12 >> 2] = jsvGetStringLength(HEAP32[HEAP32[50123] + 76 >> 2]);
    break block;
   }
   HEAP32[$0 + 12 >> 2] = HEAPU8[HEAP32[50123] + 80 | 0];
  }
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function jslGetTokenValueAsVar() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  block : {
   if (HEAP32[HEAP32[50123] + 76 >> 2]) {
    HEAP32[$0 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[50123] + 76 >> 2]);
    break block;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 129) {
    HEAP32[$0 + 12 >> 2] = jsvNewFromLongInteger(stringToInt(jslGetTokenValueAsString()), i64toi32_i32$HIGH_BITS);
    break block;
   }
   if (!(HEAP16[HEAP32[50123] + 2 >> 1] << 16 >> 16 < 163 | HEAP16[HEAP32[50123] + 2 >> 1] << 16 >> 16 > 198)) {
    HEAP32[$0 + 12 >> 2] = jsvNewFromString(jslReservedWordAsString(HEAP16[HEAP32[50123] + 2 >> 1] << 16 >> 16));
    break block;
   }
   HEAP8[HEAPU8[HEAP32[50123] + 80 | 0] + (HEAP32[50123] + 12 | 0) | 0] = 0;
   HEAP32[$0 + 12 >> 2] = jsvNewFromString(HEAP32[50123] + 12 | 0);
  }
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function jslIsIDOrReservedWord() {
  var $0 = 0, $1 = 0;
  $0 = 1;
  if (HEAPU16[HEAP32[50123] + 2 >> 1] != 128) {
   $1 = HEAP16[HEAP32[50123] + 2 >> 1] << 16 >> 16 >= 163 ? HEAP16[HEAP32[50123] + 2 >> 1] << 16 >> 16 <= 198 : $1;
   $0 = $1;
  }
  return $0 & 1;
 }
 
 function jslMatch($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (HEAP32[$1 + 8 >> 2] != HEAP16[HEAP32[50123] + 2 >> 1] << 16 >> 16) {
    jslMatchError(HEAP32[$1 + 8 >> 2]);
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   jslGetNextToken();
   HEAP8[$1 + 15 | 0] = 1;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jslMatchError($0) {
  var $1 = 0;
  $1 = __stack_pointer - 96 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 92 >> 2] = $0;
  jslGetTokenString($1 + 48 | 0, 30);
  jslTokenAsString(HEAP32[$1 + 92 >> 2], $1 + 16 | 0, 30);
  HEAP32[$1 + 12 >> 2] = HEAP32[HEAP32[50123] + 8 >> 2];
  HEAP32[HEAP32[50123] + 8 >> 2] = HEAP32[HEAP32[50123] + 4 >> 2];
  HEAP32[$1 + 4 >> 2] = $1 + 16;
  HEAP32[$1 >> 2] = $1 + 48;
  jsExceptionHere(2, 127712, $1);
  HEAP32[HEAP32[50123] + 8 >> 2] = HEAP32[$1 + 12 >> 2];
  jslGetNextToken();
  __stack_pointer = $1 + 96 | 0;
 }
 
 function jslNewTokenisedStringFromLexer($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 192 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 188 >> 2] = $0;
  HEAP32[$2 + 184 >> 2] = $1;
  HEAP32[$2 + 180 >> 2] = HEAP32[50123];
  HEAP32[50123] = $2 + 48;
  jslInit(HEAP32[HEAP32[$2 + 180 >> 2] + 84 >> 2]);
  HEAP32[$2 + 44 >> 2] = _jslNewTokenisedStringFromLexer(0, 0, HEAP32[$2 + 188 >> 2], HEAP32[$2 + 184 >> 2]);
  HEAP32[$2 + 40 >> 2] = jsvNewStringOfLength(HEAP32[$2 + 44 >> 2], 0);
  if (HEAP32[$2 + 40 >> 2]) {
   jsvStringIteratorNew($2 + 4 | 0, HEAP32[$2 + 40 >> 2], 0);
   _jslNewTokenisedStringFromLexer($2 + 4 | 0, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 188 >> 2], HEAP32[$2 + 184 >> 2]);
   jsvStringIteratorFree($2 + 4 | 0);
  }
  jslKill();
  HEAP32[50123] = HEAP32[$2 + 180 >> 2];
  __stack_pointer = $2 + 192 | 0;
  return HEAP32[$2 + 40 >> 2];
 }
 
 function _jslNewTokenisedStringFromLexer($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 128 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 124 >> 2] = $0;
  HEAP32[$4 + 120 >> 2] = $1;
  HEAP32[$4 + 116 >> 2] = $2;
  HEAP32[$4 + 112 >> 2] = $3;
  jslSeekToP(HEAP32[$4 + 116 >> 2]);
  HEAP8[$4 + 75 | 0] = HEAPU8[HEAP32[$4 + 116 >> 2] + 36 | 0];
  if (HEAP32[$4 + 124 >> 2]) {
   jsvStringIteratorClone($4 + 76 | 0, HEAP32[$4 + 116 >> 2])
  }
  HEAP32[$4 + 68 >> 2] = 0;
  HEAP32[$4 + 64 >> 2] = 0;
  HEAP32[$4 + 60 >> 2] = 0;
  while (1) {
   $0 = 0;
   if (HEAP16[HEAP32[50123] + 2 >> 1] << 16 >> 16) {
    $0 = jsvStringIteratorGetIndex(HEAP32[50123] + 88 | 0) >>> 0 <= HEAP32[$4 + 112 >> 2] + 1 >>> 0
   }
   if ($0) {
    if (jslPreserveSpaceBetweenTokens(HEAP32[$4 + 64 >> 2], HEAP16[HEAP32[50123] + 2 >> 1] << 16 >> 16) & 1) {
     HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 68 >> 2] + 1;
     if (HEAP32[$4 + 124 >> 2]) {
      jsvStringIteratorSetCharAndNext(HEAP32[$4 + 124 >> 2], 32)
     }
    }
    block2 : {
     block : {
      if (HEAPU16[HEAP32[50123] + 2 >> 1] != 131) {
       break block
      }
      $0 = jslGetTokenLength();
      HEAP32[$4 + 56 >> 2] = $0;
      if (!$0) {
       break block
      }
      HEAP32[$4 + 52 >> 2] = 0;
      jslSkipWhiteSpace();
      if (!(HEAP32[$4 + 60 >> 2] != 2 | HEAPU8[HEAP32[50123]] != 41)) {
       HEAP32[$4 + 48 >> 2] = jslGetTokenValueAsVar();
       HEAP32[$4 + 52 >> 2] = jswrap_atob(HEAP32[$4 + 48 >> 2]);
       jsvUnLock(HEAP32[$4 + 48 >> 2]);
       HEAP32[$4 + 56 >> 2] = jsvGetStringLength(HEAP32[$4 + 52 >> 2]);
       HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 68 >> 2] - 5;
       if (HEAP32[$4 + 124 >> 2]) {
        jsvStringIteratorGoto(HEAP32[$4 + 124 >> 2], HEAP32[$4 + 120 >> 2], HEAP32[$4 + 68 >> 2])
       }
       HEAP8[$4 + 75 | 0] = HEAPU8[HEAP32[50123]];
       jslGetNextToken();
      }
      HEAP32[$4 + 60 >> 2] = 0;
      if (HEAP32[$4 + 124 >> 2]) {
       jsvStringIteratorSetCharAndNext(HEAP32[$4 + 124 >> 2], HEAPU32[$4 + 56 >> 2] < 256 ? -47 : -46);
       jsvStringIteratorSetCharAndNext(HEAP32[$4 + 124 >> 2], (HEAP32[$4 + 56 >> 2] & 255) << 24 >> 24);
       if (HEAPU32[$4 + 56 >> 2] >= 256) {
        jsvStringIteratorSetCharAndNext(HEAP32[$4 + 124 >> 2], HEAP32[$4 + 56 >> 2] >>> 8 << 24 >> 24)
       }
       if (!HEAP32[$4 + 52 >> 2]) {
        HEAP32[$4 + 52 >> 2] = jslGetTokenValueAsVar()
       }
       jsvStringIteratorNew($4 + 12 | 0, HEAP32[$4 + 52 >> 2], 0);
       while (1) {
        if (jsvStringIteratorHasChar($4 + 12 | 0) & 1) {
         jsvStringIteratorSetCharAndNext(HEAP32[$4 + 124 >> 2], jsvStringIteratorGetCharAndNext($4 + 12 | 0) << 24 >> 24);
         continue;
        }
        break;
       };
       jsvStringIteratorFree($4 + 12 | 0);
      }
      jsvUnLock(HEAP32[$4 + 52 >> 2]);
      HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 68 >> 2] + (HEAP32[$4 + 56 >> 2] + (HEAPU32[$4 + 56 >> 2] < 256 ? 2 : 3) | 0);
      break block2;
     }
     block8 : {
      if (HEAPU16[HEAP32[50123] + 2 >> 1] == 129) {
       $0 = jsvGetLongIntegerAndUnLock(jslGetTokenValueAsVar());
       HEAP32[$4 >> 2] = $0;
       $1 = i64toi32_i32$HIGH_BITS;
       HEAP32[$4 + 4 >> 2] = $1;
       $1 = HEAP32[$4 >> 2];
       $0 = HEAP32[$4 + 4 >> 2];
       block3 : {
        if (!($0 | $1)) {
         HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 68 >> 2] + 1;
         if (HEAP32[$4 + 124 >> 2]) {
          jsvStringIteratorSetCharAndNext(HEAP32[$4 + 124 >> 2], -45)
         }
         break block3;
        }
        $0 = HEAP32[$4 >> 2];
        block5 : {
         block4 : {
          $1 = HEAP32[$4 + 4 >> 2];
          if (($1 | 0) < -1) {
           $0 = 1
          } else {
           $0 = ($1 | 0) < 0 & $0 >>> 0 < 4294967168
          }
          if ($0) {
           break block4
          }
          $0 = HEAP32[$4 >> 2];
          $2 = $0;
          $1 = HEAP32[$4 + 4 >> 2];
          if (($1 | 0) > 0) {
           $0 = 1
          } else {
           $0 = ($1 | 0) >= 0 & $2 >>> 0 >= 128
          }
          if ($0) {
           break block4
          }
          HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 68 >> 2] + 2;
          if (HEAP32[$4 + 124 >> 2]) {
           jsvStringIteratorSetCharAndNext(HEAP32[$4 + 124 >> 2], -44);
           $2 = HEAP32[$4 >> 2];
           jsvStringIteratorSetCharAndNext(HEAP32[$4 + 124 >> 2], $2 << 24 >> 24);
          }
          break block5;
         }
         $1 = HEAP32[$4 >> 2];
         $0 = $1;
         block7 : {
          block6 : {
           $2 = HEAP32[$4 + 4 >> 2];
           if (($2 | 0) < -1) {
            $0 = 1
           } else {
            $0 = ($2 | 0) < 0 & $0 >>> 0 < 4294934528
           }
           if ($0) {
            break block6
           }
           $0 = HEAP32[$4 >> 2];
           $2 = HEAP32[$4 + 4 >> 2];
           if (($2 | 0) > 0) {
            $0 = 1
           } else {
            $0 = ($2 | 0) >= 0 & $0 >>> 0 >= 32768
           }
           if ($0) {
            break block6
           }
           HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 68 >> 2] + 3;
           if (HEAP32[$4 + 124 >> 2]) {
            jsvStringIteratorSetCharAndNext(HEAP32[$4 + 124 >> 2], -43);
            $0 = HEAP32[$4 >> 2];
            $1 = $0;
            jsvStringIteratorSetCharAndNext(HEAP32[$4 + 124 >> 2], ($1 & 255) << 24 >> 24);
            $0 = HEAP32[$4 >> 2];
            $2 = $0;
            $1 = HEAP32[$4 + 4 >> 2];
            jsvStringIteratorSetCharAndNext(HEAP32[$4 + 124 >> 2], (($1 & 255) << 24 | $2 >>> 8) << 24 >> 24);
           }
           break block7;
          }
          _jslNewTokenisedStringFromLexerCopyString($4 + 68 | 0, HEAP32[$4 + 124 >> 2], $4 + 76 | 0, HEAP8[$4 + 75 | 0] << 24 >> 24);
         }
        }
       }
       break block8;
      }
      block13 : {
       block10 : {
        block9 : {
         if (HEAPU16[HEAP32[50123] + 2 >> 1] == 128 | HEAPU16[HEAP32[50123] + 2 >> 1] == 129 | (HEAPU16[HEAP32[50123] + 2 >> 1] == 130 | HEAPU16[HEAP32[50123] + 2 >> 1] == 131)) {
          break block9
         }
         if (HEAPU16[HEAP32[50123] + 2 >> 1] == 133) {
          break block9
         }
         if (HEAPU16[HEAP32[50123] + 2 >> 1] != 135) {
          break block10
         }
        }
        block12 : {
         block11 : {
          if (HEAPU16[HEAP32[50123] + 2 >> 1] != 128) {
           break block11
          }
          if (strcmp(jslGetTokenValueAsString(), 140246)) {
           break block11
          }
          HEAP32[$4 + 60 >> 2] = 1;
          break block12;
         }
         HEAP32[$4 + 60 >> 2] = 0;
        }
        _jslNewTokenisedStringFromLexerCopyString($4 + 68 | 0, HEAP32[$4 + 124 >> 2], $4 + 76 | 0, HEAP8[$4 + 75 | 0] << 24 >> 24);
        break block13;
       }
       block15 : {
        if (!(HEAP32[$4 + 60 >> 2] != 1 | HEAPU16[HEAP32[50123] + 2 >> 1] != 40)) {
         HEAP32[$4 + 60 >> 2] = 2;
         break block15;
        }
        HEAP32[$4 + 60 >> 2] = 0;
       }
       if (HEAP32[$4 + 124 >> 2]) {
        jsvStringIteratorSetCharAndNext(HEAP32[$4 + 124 >> 2], HEAPU16[HEAP32[50123] + 2 >> 1] << 24 >> 24)
       }
       HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 68 >> 2] + 1;
      }
     }
    }
    HEAP32[$4 + 64 >> 2] = HEAP16[HEAP32[50123] + 2 >> 1] << 16 >> 16;
    jslSkipWhiteSpace();
    if (HEAP32[$4 + 124 >> 2]) {
     jsvStringIteratorFree($4 + 76 | 0);
     jsvStringIteratorClone($4 + 76 | 0, HEAP32[50123] + 88 | 0);
    }
    HEAP8[$4 + 75 | 0] = HEAPU8[HEAP32[50123]];
    jslGetNextToken();
    continue;
   }
   break;
  };
  if (HEAP32[$4 + 124 >> 2]) {
   jsvStringIteratorFree($4 + 76 | 0)
  }
  __stack_pointer = $4 + 128 | 0;
  return HEAP32[$4 + 68 >> 2];
 }
 
 function jslPreserveSpaceBetweenTokens($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  block3 : {
   if (!(!(HEAP32[$2 + 8 >> 2] == 128 | HEAP32[$2 + 8 >> 2] == 130) & HEAP32[$2 + 8 >> 2] != 129 | !(HEAP32[$2 + 4 >> 2] == 128 | HEAP32[$2 + 4 >> 2] == 130) & HEAP32[$2 + 4 >> 2] != 129)) {
    HEAP8[$2 + 15 | 0] = 1;
    break block3;
   }
   block5 : {
    block4 : {
     if (HEAP32[$2 + 8 >> 2] == 47 & HEAP32[$2 + 4 >> 2] == 135 | (HEAP32[$2 + 8 >> 2] == 45 & HEAP32[$2 + 4 >> 2] == 45 | HEAP32[$2 + 8 >> 2] == 43 & HEAP32[$2 + 4 >> 2] == 43)) {
      break block4
     }
     if (HEAP32[$2 + 8 >> 2] != 135) {
      break block5
     }
     if (HEAP32[$2 + 4 >> 2] == 47) {
      break block4
     }
     if (HEAP32[$2 + 4 >> 2] != 128) {
      break block5
     }
    }
    HEAP8[$2 + 15 | 0] = 1;
    break block3;
   }
   HEAP8[$2 + 15 | 0] = 0;
  }
  return HEAP8[$2 + 15 | 0] & 1;
 }
 
 function jsvStringIteratorHasChar($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
 }
 
 function _jslNewTokenisedStringFromLexerCopyString($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP8[$4 + 3 | 0] = $3;
  $1 = jsvStringIteratorGetIndex(HEAP32[50123] + 88 | 0);
  $0 = HEAP32[$4 + 12 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + ($1 - (HEAP32[HEAP32[50123] + 4 >> 2] + 1 | 0) | 0);
  if (HEAP32[$4 + 8 >> 2]) {
   jsvStringIteratorSetCharAndNext(HEAP32[$4 + 8 >> 2], HEAP8[$4 + 3 | 0] << 24 >> 24);
   while (1) {
    if (jsvStringIteratorGetIndex(HEAP32[$4 + 4 >> 2]) + 1 >>> 0 < jsvStringIteratorGetIndex(HEAP32[50123] + 88 | 0) >>> 0) {
     jsvStringIteratorSetCharAndNext(HEAP32[$4 + 8 >> 2], jsvStringIteratorGetCharAndNext(HEAP32[$4 + 4 >> 2]) << 24 >> 24);
     continue;
    }
    break;
   };
  }
  __stack_pointer = $4 + 16 | 0;
 }
 
 function jslNewStringFromLexer($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 112 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 104 >> 2] = $0;
  HEAP32[$2 + 100 >> 2] = $1;
  HEAP32[$2 + 96 >> 2] = (HEAP32[$2 + 100 >> 2] + 1 | 0) - jsvStringIteratorGetIndex(HEAP32[$2 + 104 >> 2]);
  HEAP32[$2 + 92 >> 2] = 0;
  block : {
   if (HEAPU32[$2 + 96 >> 2] > 19) {
    HEAP32[$2 + 92 >> 2] = jsvNewFlatStringOfLength(HEAP32[$2 + 96 >> 2]);
    if (HEAP32[$2 + 92 >> 2]) {
     HEAP32[$2 + 88 >> 2] = jsvGetFlatStringPointer(HEAP32[$2 + 92 >> 2]);
     $1 = HEAPU8[HEAP32[$2 + 104 >> 2] + 36 | 0];
     $0 = HEAP32[$2 + 88 >> 2];
     HEAP32[$2 + 88 >> 2] = $0 + 1;
     HEAP8[$0 | 0] = $1;
     jsvStringIteratorClone($2 + 52 | 0, HEAP32[$2 + 104 >> 2]);
     while (1) {
      $0 = 0;
      if (jsvStringIteratorHasChar($2 + 52 | 0) & 1) {
       $0 = HEAP32[$2 + 96 >> 2] - 1 | 0;
       HEAP32[$2 + 96 >> 2] = $0;
       $0 = ($0 | 0) != 0;
      }
      if ($0) {
       $1 = jsvStringIteratorGetCharAndNext($2 + 52 | 0);
       $0 = HEAP32[$2 + 88 >> 2];
       HEAP32[$2 + 88 >> 2] = $0 + 1;
       HEAP8[$0 | 0] = $1;
       continue;
      }
      break;
     };
     jsvStringIteratorFree($2 + 52 | 0);
     HEAP32[$2 + 108 >> 2] = HEAP32[$2 + 92 >> 2];
     break block;
    }
   }
   HEAP32[$2 + 92 >> 2] = jsvNewFromEmptyString();
   if (!HEAP32[$2 + 92 >> 2]) {
    HEAP32[$2 + 108 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 48 >> 2] = jsvLockAgain(HEAP32[$2 + 92 >> 2]);
   HEAP8[HEAP32[$2 + 48 >> 2]] = HEAPU8[HEAP32[$2 + 104 >> 2] + 36 | 0];
   HEAP32[$2 + 44 >> 2] = 1;
   jsvStringIteratorClone($2 + 8 | 0, HEAP32[$2 + 104 >> 2]);
   while (1) {
    $0 = 0;
    if (jsvStringIteratorHasChar($2 + 8 | 0) & 1) {
     $0 = HEAP32[$2 + 96 >> 2] - 1 | 0;
     HEAP32[$2 + 96 >> 2] = $0;
     $0 = ($0 | 0) != 0;
    }
    block1 : {
     if (!$0) {
      break block1
     }
     HEAP8[$2 + 7 | 0] = jsvStringIteratorGetCharAndNext($2 + 8 | 0);
     if (HEAPU32[$2 + 44 >> 2] >= jsvGetMaxCharactersInVar(HEAP32[$2 + 48 >> 2]) >>> 0) {
      jsvSetCharactersInVar(HEAP32[$2 + 48 >> 2], HEAP32[$2 + 44 >> 2]);
      HEAP32[$2 >> 2] = jsvNewWithFlags(41);
      if (!HEAP32[$2 >> 2]) {
       break block1
      }
      jsvSetLastChild(HEAP32[$2 + 48 >> 2], jsvGetRef(HEAP32[$2 >> 2]) & 65535);
      jsvUnLock(HEAP32[$2 + 48 >> 2]);
      HEAP32[$2 + 48 >> 2] = HEAP32[$2 >> 2];
      HEAP32[$2 + 44 >> 2] = 0;
     }
     $1 = HEAPU8[$2 + 7 | 0];
     $3 = HEAP32[$2 + 48 >> 2];
     $0 = HEAP32[$2 + 44 >> 2];
     HEAP32[$2 + 44 >> 2] = $0 + 1;
     HEAP8[$3 + $0 | 0] = $1;
     continue;
    }
    break;
   };
   jsvSetCharactersInVar(HEAP32[$2 + 48 >> 2], HEAP32[$2 + 44 >> 2]);
   jsvUnLock(HEAP32[$2 + 48 >> 2]);
   jsvStringIteratorFree($2 + 8 | 0);
   HEAP32[$2 + 108 >> 2] = HEAP32[$2 + 92 >> 2];
  }
  __stack_pointer = $2 + 112 | 0;
  return HEAP32[$2 + 108 >> 2];
 }
 
 function jsvNewFromEmptyString() {
  return jsvNewWithFlags(28);
 }
 
 function jslNeedSpaceBetween($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP8[$2 + 14 | 0] = $1;
  block1 : {
   if (!(HEAPU8[$2 + 15 | 0] <= 198 & HEAPU8[$2 + 15 | 0] >= 163)) {
    $0 = 0;
    if (HEAPU8[$2 + 14 | 0] < 163) {
     break block1
    }
    $0 = 0;
    if (HEAPU8[$2 + 14 | 0] > 198) {
     break block1
    }
   }
   block2 : {
    if (HEAPU8[$2 + 15 | 0] >= 163) {
     break block2
    }
    if (isAlpha(HEAP8[$2 + 15 | 0] << 24 >> 24) & 1) {
     break block2
    }
    $0 = 0;
    if (!(isNumeric(HEAP8[$2 + 15 | 0] << 24 >> 24) & 1)) {
     break block1
    }
   }
   $0 = 1;
   block3 : {
    if (HEAPU8[$2 + 14 | 0] >= 163) {
     break block3
    }
    $0 = 1;
    if (isAlpha(HEAP8[$2 + 14 | 0] << 24 >> 24) & 1) {
     break block3
    }
    $0 = isNumeric(HEAP8[$2 + 14 | 0] << 24 >> 24);
   }
  }
  __stack_pointer = $2 + 16 | 0;
  return $0 & 1;
 }
 
 function jslPrintTokenisedString($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer + -64 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 60 >> 2] = $0;
  HEAP32[$3 + 56 >> 2] = $1;
  HEAP32[$3 + 52 >> 2] = $2;
  HEAP8[$3 + 51 | 0] = 0;
  HEAP32[$3 + 44 >> 2] = 0;
  HEAP32[$3 + 40 >> 2] = 0;
  jsvStringIteratorNew($3 + 4 | 0, HEAP32[$3 + 60 >> 2], 0);
  while (1) {
   if (jsvStringIteratorHasChar($3 + 4 | 0) & 1) {
    jslPrintTokenisedChar($3 + 4 | 0, $3 + 51 | 0, $3 + 44 | 0, $3 + 40 | 0, HEAP32[$3 + 56 >> 2], HEAP32[$3 + 52 >> 2]);
    continue;
   }
   break;
  };
  jsvStringIteratorFree($3 + 4 | 0);
  __stack_pointer = $3 - -64 | 0;
 }
 
 function jslPrintTokenisedChar($0, $1, $2, $3, $4, $5) {
  var $6 = 0;
  $6 = __stack_pointer - 128 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 124 >> 2] = $0;
  HEAP32[$6 + 120 >> 2] = $1;
  HEAP32[$6 + 116 >> 2] = $2;
  HEAP32[$6 + 112 >> 2] = $3;
  HEAP32[$6 + 108 >> 2] = $4;
  HEAP32[$6 + 104 >> 2] = $5;
  HEAP8[$6 + 103 | 0] = jsvStringIteratorGetCharAndNext(HEAP32[$6 + 124 >> 2]);
  block1 : {
   if (!(HEAPU8[$6 + 103 | 0] != 209 & HEAPU8[$6 + 103 | 0] != 210)) {
    HEAP32[$6 + 28 >> 2] = jsvStringIteratorGetCharAndNext(HEAP32[$6 + 124 >> 2]) & 255;
    if (HEAPU8[$6 + 103 | 0] == 210) {
     $0 = HEAP32[$6 + 112 >> 2];
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     HEAP32[$6 + 28 >> 2] = (jsvStringIteratorGetCharAndNext(HEAP32[$6 + 124 >> 2]) & 255) << 8 | HEAP32[$6 + 28 >> 2];
    }
    $0 = HEAP32[$6 + 112 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
    FUNCTION_TABLE[HEAP32[$6 + 108 >> 2]](146612, HEAP32[$6 + 104 >> 2]);
    while (1) {
     $0 = HEAP32[$6 + 28 >> 2];
     HEAP32[$6 + 28 >> 2] = $0 - 1;
     if ($0) {
      HEAP8[$6 + 27 | 0] = jsvStringIteratorGetCharAndNext(HEAP32[$6 + 124 >> 2]);
      HEAP32[$6 + 20 >> 2] = escapeCharacter(HEAP8[$6 + 27 | 0] << 24 >> 24, 0, 0);
      $0 = HEAP32[$6 + 112 >> 2];
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
      FUNCTION_TABLE[HEAP32[$6 + 108 >> 2]](HEAP32[$6 + 20 >> 2], HEAP32[$6 + 104 >> 2]);
      continue;
     }
     break;
    };
    FUNCTION_TABLE[HEAP32[$6 + 108 >> 2]](146612, HEAP32[$6 + 104 >> 2]);
    break block1;
   }
   if (HEAPU8[$6 + 103 | 0] == 211) {
    $0 = HEAP32[$6 + 112 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
    FUNCTION_TABLE[HEAP32[$6 + 108 >> 2]](142266, HEAP32[$6 + 104 >> 2]);
    break block1;
   }
   if (!(HEAPU8[$6 + 103 | 0] != 212 & HEAPU8[$6 + 103 | 0] != 213)) {
    HEAP16[$6 + 18 >> 1] = jsvStringIteratorGetCharAndNext(HEAP32[$6 + 124 >> 2]) & 255;
    if (HEAPU8[$6 + 103 | 0] == 213) {
     HEAP16[$6 + 18 >> 1] = jsvStringIteratorGetCharAndNext(HEAP32[$6 + 124 >> 2]) << 24 >> 24 << 8 | HEAP16[$6 + 18 >> 1] << 16 >> 16
    }
    itostr(HEAP16[$6 + 18 >> 1] << 16 >> 16, $6 + 32 | 0, 10);
    $1 = strlen($6 + 32 | 0);
    $0 = HEAP32[$6 + 112 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + $1;
    FUNCTION_TABLE[HEAP32[$6 + 108 >> 2]]($6 + 32 | 0, HEAP32[$6 + 104 >> 2]);
    break block1;
   }
   if (jslNeedSpaceBetween(HEAPU8[HEAP32[$6 + 120 >> 2]], HEAPU8[$6 + 103 | 0]) & 1) {
    $0 = HEAP32[$6 + 116 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
    FUNCTION_TABLE[HEAP32[$6 + 108 >> 2]](147034, HEAP32[$6 + 104 >> 2]);
   }
   jslFunctionCharAsString(HEAPU8[$6 + 103 | 0], $6 + 32 | 0, 64);
   HEAP32[$6 + 12 >> 2] = strlen($6 + 32 | 0);
   if (HEAP32[$6 + 12 >> 2]) {
    $0 = HEAP32[$6 + 116 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + (HEAP32[$6 + 12 >> 2] - 1 | 0);
   }
   FUNCTION_TABLE[HEAP32[$6 + 108 >> 2]]($6 + 32 | 0, HEAP32[$6 + 104 >> 2]);
   $0 = HEAP32[$6 + 112 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
   HEAP8[HEAP32[$6 + 120 >> 2]] = HEAPU8[$6 + 103 | 0];
  }
  __stack_pointer = $6 + 128 | 0;
 }
 
 function itostr($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  itostr_extra(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], 1, HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jslPrintPosition($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 128 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 124 >> 2] = $0;
  HEAP32[$4 + 120 >> 2] = $1;
  HEAP32[$4 + 116 >> 2] = $2;
  HEAP32[$4 + 112 >> 2] = $3;
  block1 : {
   block : {
    if (!(jsvIsNativeString(HEAP32[HEAP32[$4 + 116 >> 2] + 84 >> 2]) & 1)) {
     if (!(jsvIsFlashString(HEAP32[HEAP32[$4 + 116 >> 2] + 84 >> 2]) & 1)) {
      break block
     }
    }
    $0 = HEAP32[HEAP32[$4 + 116 >> 2] + 84 >> 2];
    HEAP32[$4 + 100 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
    HEAP32[$4 + 64 >> 2] = jsfFindFileFromAddr(HEAP32[$4 + 100 >> 2], $4 + 68 | 0);
    if (HEAP32[$4 + 64 >> 2]) {
     HEAP32[$4 + 60 >> 2] = jsvAddressToVar(HEAP32[$4 + 64 >> 2], jsfGetFileSize($4 + 68 | 0));
     jsvGetLineAndCol(HEAP32[$4 + 60 >> 2], (HEAP32[$4 + 112 >> 2] + HEAP32[$4 + 100 >> 2] | 0) - HEAP32[$4 + 64 >> 2] | 0, $4 + 108 | 0, $4 + 104 | 0);
     $1 = $4 + 68 | 0;
     HEAP32[$4 + 24 >> 2] = HEAP32[$1 + 28 >> 2];
     $0 = HEAP32[$1 + 20 >> 2];
     $2 = HEAP32[$1 + 24 >> 2];
     HEAP32[$4 + 16 >> 2] = $0;
     HEAP32[$4 + 20 >> 2] = $2;
     $0 = HEAP32[$1 + 16 >> 2];
     $2 = HEAP32[$1 + 12 >> 2];
     HEAP32[$4 + 8 >> 2] = $2;
     HEAP32[$4 + 12 >> 2] = $0;
     $2 = HEAP32[$1 + 8 >> 2];
     $0 = HEAP32[$1 + 4 >> 2];
     HEAP32[$4 >> 2] = $0;
     HEAP32[$4 + 4 >> 2] = $2;
     HEAP32[$4 + 56 >> 2] = jsfVarFromName($4);
     $0 = HEAP32[$4 + 124 >> 2];
     $1 = HEAP32[$4 + 120 >> 2];
     $2 = HEAP32[$4 + 56 >> 2];
     $3 = HEAP32[$4 + 108 >> 2];
     HEAP32[$4 + 40 >> 2] = HEAP32[$4 + 104 >> 2];
     HEAP32[$4 + 36 >> 2] = $3;
     HEAP32[$4 + 32 >> 2] = $2;
     cbprintf($0, $1, 139426, $4 + 32 | 0);
     jsvUnLock2(HEAP32[$4 + 60 >> 2], HEAP32[$4 + 56 >> 2]);
     break block1;
    }
   }
   jsvGetLineAndCol(HEAP32[HEAP32[$4 + 116 >> 2] + 84 >> 2], HEAP32[$4 + 112 >> 2], $4 + 108 | 0, $4 + 104 | 0);
   $0 = HEAP32[$4 + 124 >> 2];
   $1 = HEAP32[$4 + 120 >> 2];
   $2 = HEAP32[$4 + 108 >> 2];
   HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 104 >> 2];
   HEAP32[$4 + 48 >> 2] = $2;
   cbprintf($0, $1, 139428, $4 + 48 | 0);
  }
  __stack_pointer = $4 + 128 | 0;
 }
 
 function jslPrintTokenLineMarker($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 96 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 92 >> 2] = $0;
  HEAP32[$5 + 88 >> 2] = $1;
  HEAP32[$5 + 84 >> 2] = $2;
  HEAP32[$5 + 80 >> 2] = $3;
  HEAP32[$5 + 76 >> 2] = $4;
  HEAP32[$5 + 72 >> 2] = 1;
  HEAP32[$5 + 68 >> 2] = 1;
  jsvGetLineAndCol(HEAP32[HEAP32[$5 + 84 >> 2] + 84 >> 2], HEAP32[$5 + 80 >> 2], $5 + 72 | 0, $5 + 68 | 0);
  HEAP32[$5 + 64 >> 2] = jsvGetIndexFromLineAndCol(HEAP32[HEAP32[$5 + 84 >> 2] + 84 >> 2], HEAP32[$5 + 72 >> 2], 1);
  HEAP32[$5 + 60 >> 2] = jsvGetCharsOnLine(HEAP32[HEAP32[$5 + 84 >> 2] + 84 >> 2], HEAP32[$5 + 72 >> 2]);
  HEAP32[$5 + 56 >> 2] = 0;
  if (HEAP32[$5 + 76 >> 2]) {
   FUNCTION_TABLE[HEAP32[$5 + 92 >> 2]](HEAP32[$5 + 76 >> 2], HEAP32[$5 + 88 >> 2]);
   HEAP32[$5 + 56 >> 2] = strlen(HEAP32[$5 + 76 >> 2]);
  }
  if (!(HEAPU32[$5 + 60 >> 2] <= 60 | HEAP32[$5 + 80 >> 2] - HEAP32[$5 + 64 >> 2] >>> 0 <= 30)) {
   cbprintf(HEAP32[$5 + 92 >> 2], HEAP32[$5 + 88 >> 2], 142481, 0);
   HEAP32[$5 + 52 >> 2] = (HEAP32[$5 + 80 >> 2] - 30 | 0) - HEAP32[$5 + 64 >> 2];
   HEAP32[$5 + 64 >> 2] = HEAP32[$5 + 64 >> 2] + (HEAP32[$5 + 52 >> 2] + 3 | 0);
   block1 : {
    if (HEAPU32[$5 + 52 >> 2] <= HEAPU32[$5 + 68 >> 2]) {
     HEAP32[$5 + 68 >> 2] = HEAP32[$5 + 68 >> 2] - HEAP32[$5 + 52 >> 2];
     break block1;
    }
    HEAP32[$5 + 68 >> 2] = 0;
   }
   HEAP32[$5 + 60 >> 2] = HEAP32[$5 + 60 >> 2] - HEAP32[$5 + 52 >> 2];
  }
  HEAP32[$5 + 48 >> 2] = 0;
  jsvStringIteratorNew($5 + 12 | 0, HEAP32[HEAP32[$5 + 84 >> 2] + 84 >> 2], HEAP32[$5 + 64 >> 2]);
  HEAP8[$5 + 11 | 0] = 0;
  while (1) {
   block3 : {
    $0 = 0;
    block2 : {
     if (!(jsvStringIteratorHasChar($5 + 12 | 0) & 1)) {
      break block2
     }
     $0 = 0;
     if (HEAPU32[$5 + 48 >> 2] >= 60) {
      break block2
     }
     $0 = HEAPU8[$5 + 11 | 0] != 255;
    }
    if (!$0) {
     break block3
    }
    if ((jsvStringIteratorGetChar($5 + 12 | 0) & 255) == 10) {
     break block3
    }
    jslPrintTokenisedChar($5 + 12 | 0, $5 + 11 | 0, $5 + 68 | 0, $5 + 48 | 0, HEAP32[$5 + 92 >> 2], HEAP32[$5 + 88 >> 2]);
    continue;
   }
   break;
  };
  jsvStringIteratorFree($5 + 12 | 0);
  if (HEAPU32[$5 + 60 >> 2] > 60) {
   FUNCTION_TABLE[HEAP32[$5 + 92 >> 2]](142481, HEAP32[$5 + 88 >> 2])
  }
  FUNCTION_TABLE[HEAP32[$5 + 92 >> 2]](148265, HEAP32[$5 + 88 >> 2]);
  HEAP32[$5 + 68 >> 2] = HEAP32[$5 + 56 >> 2] + HEAP32[$5 + 68 >> 2];
  while (1) {
   $0 = HEAP32[$5 + 68 >> 2];
   HEAP32[$5 + 68 >> 2] = $0 - 1;
   if ($0 >>> 0 > 1) {
    FUNCTION_TABLE[HEAP32[$5 + 92 >> 2]](147034, HEAP32[$5 + 88 >> 2]);
    continue;
   }
   break;
  };
  FUNCTION_TABLE[HEAP32[$5 + 92 >> 2]](147820, HEAP32[$5 + 88 >> 2]);
  __stack_pointer = $5 + 96 | 0;
 }
 
 function jsvStringIteratorGetChar($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   HEAP8[$1 + 15 | 0] = HEAPU8[HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] + HEAP32[HEAP32[$1 + 8 >> 2] >> 2] | 0];
  }
  return HEAP8[$1 + 15 | 0] << 24 >> 24;
 }
 
 function jslPrintStackTrace($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 80 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 76 >> 2] = $0;
  HEAP32[$3 + 72 >> 2] = $1;
  HEAP32[$3 + 68 >> 2] = $2;
  while (1) {
   if (HEAP32[$3 + 68 >> 2]) {
    FUNCTION_TABLE[HEAP32[$3 + 76 >> 2]](146771, HEAP32[$3 + 72 >> 2]);
    if (HEAP32[HEAP32[$3 + 68 >> 2] + 124 >> 2]) {
     jsvGetString(HEAP32[HEAP32[$3 + 68 >> 2] + 124 >> 2], $3, 64);
     FUNCTION_TABLE[HEAP32[$3 + 76 >> 2]]($3, HEAP32[$3 + 72 >> 2]);
     FUNCTION_TABLE[HEAP32[$3 + 76 >> 2]](146344, HEAP32[$3 + 72 >> 2]);
    }
    jslPrintPosition(HEAP32[$3 + 76 >> 2], HEAP32[$3 + 72 >> 2], HEAP32[$3 + 68 >> 2], HEAP32[HEAP32[$3 + 68 >> 2] + 8 >> 2]);
    FUNCTION_TABLE[HEAP32[$3 + 76 >> 2]](HEAP32[HEAP32[$3 + 68 >> 2] + 124 >> 2] ? 148193 : 148265, HEAP32[$3 + 72 >> 2]);
    jslPrintTokenLineMarker(HEAP32[$3 + 76 >> 2], HEAP32[$3 + 72 >> 2], HEAP32[$3 + 68 >> 2], HEAP32[HEAP32[$3 + 68 >> 2] + 8 >> 2], 0);
    HEAP32[$3 + 68 >> 2] = HEAP32[HEAP32[$3 + 68 >> 2] + 128 >> 2];
    continue;
   }
   break;
  };
  __stack_pointer = $3 + 80 | 0;
 }
 
 function jsvStringIteratorLoadFlashString($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2] + HEAP32[$0 + 8 >> 2];
  HEAP32[HEAP32[$1 + 12 >> 2] >> 2] = 0;
  $0 = HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
  block : {
   if (HEAPU32[HEAP32[$1 + 12 >> 2] + 8 >> 2] >= HEAPU32[$1 + 8 >> 2]) {
    HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = 0;
    HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = 0;
    break block;
   }
   HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = HEAP32[$1 + 8 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
   if (HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2] > 16) {
    HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = 16
   }
   $0 = HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2];
   jshFlashRead(HEAP32[$1 + 12 >> 2] + 20 | 0, HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) | 0, HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]);
   HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = HEAP32[$1 + 12 >> 2] + 20;
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsfGetFlag($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP8[$1 + 15 | 0] = $0;
  return (HEAPU8[200496] & HEAPU8[$1 + 15 | 0]) != 0;
 }
 
 function jsfSetFlag($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP8[$2 + 14 | 0] = $1;
  block : {
   if (HEAP8[$2 + 14 | 0] & 1) {
    HEAP8[200496] = HEAPU8[$2 + 15 | 0] | HEAPU8[200496];
    break block;
   }
   HEAP8[200496] = HEAPU8[200496] & (HEAPU8[$2 + 15 | 0] ^ -1);
  }
 }
 
 function jsfGetFlags() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 8 >> 2] = jsvNewWithFlags(5);
  block : {
   if (!HEAP32[$0 + 8 >> 2]) {
    HEAP32[$0 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$0 + 4 >> 2] = HEAP32[49997];
   HEAP8[$0 + 3 | 0] = 1;
   while (1) {
    if (HEAPU8[HEAP32[$0 + 4 >> 2]]) {
     jsvObjectSetChildAndUnLock(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 4 >> 2], jsvNewFromInteger(jsfGetFlag(HEAPU8[$0 + 3 | 0]) & 1));
     HEAP32[$0 + 4 >> 2] = (strlen(HEAP32[$0 + 4 >> 2]) + 1 | 0) + HEAP32[$0 + 4 >> 2];
     HEAP8[$0 + 3 | 0] = HEAPU8[$0 + 3 | 0] << 1;
     continue;
    }
    break;
   };
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
  }
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function jsfSetFlags($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  block : {
   if (!(jsvIsObject(HEAP32[$1 + 12 >> 2]) & 1)) {
    break block
   }
   HEAP32[$1 + 8 >> 2] = HEAP32[49997];
   HEAP8[$1 + 7 | 0] = 1;
   while (1) {
    if (!HEAPU8[HEAP32[$1 + 8 >> 2]]) {
     break block
    }
    HEAP32[$1 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 8 >> 2]);
    if (HEAP32[$1 >> 2]) {
     jsfSetFlag(HEAPU8[$1 + 7 | 0], jsvGetBoolAndUnLock(HEAP32[$1 >> 2]) & 1)
    }
    HEAP32[$1 + 8 >> 2] = (strlen(HEAP32[$1 + 8 >> 2]) + 1 | 0) + HEAP32[$1 + 8 >> 2];
    HEAP8[$1 + 7 | 0] = HEAPU8[$1 + 7 | 0] << 1;
    continue;
   };
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvGetFirstChild($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  $1 = HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24);
  $0 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
  $1 = ($1 & 268435455) << 4 | $0 >>> 28;
  return $1 & 16383;
 }
 
 function jsvGetFirstChildSigned($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 8 >> 2] = $0;
  $0 = HEAP32[$3 + 8 >> 2];
  $1 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
  $2 = HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24);
  $0 = $1;
  $2 = ($2 & 268435455) << 4 | $0 >>> 28;
  block : {
   if (($2 & 16383) >>> 0 > 8191) {
    $1 = HEAP32[$3 + 8 >> 2];
    $0 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $2 = HEAPU8[$1 + 8 | 0] | HEAPU8[$1 + 9 | 0] << 8 | (HEAPU8[$1 + 10 | 0] << 16 | HEAPU8[$1 + 11 | 0] << 24);
    $1 = $0;
    $2 = ($2 & 268435455) << 4 | $1 >>> 28;
    HEAP16[$3 + 14 >> 1] = (($2 & 16383) << 16 >> 16) - 16384;
    break block;
   }
   $0 = HEAP32[$3 + 8 >> 2];
   $1 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
   $2 = HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24);
   $0 = $1;
   $2 = ($2 & 268435455) << 4 | $0 >>> 28;
   HEAP16[$3 + 14 >> 1] = $2 & 16383;
  }
  return HEAP16[$3 + 14 >> 1] << 16 >> 16;
 }
 
 function jsvGetLastChild($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  return (HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) >>> 18 | 0;
 }
 
 function jsvGetNextSibling($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  return (HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24)) & 16383;
 }
 
 function jsvGetPrevSibling($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  $1 = HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24);
  $0 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
  $1 = ($1 & 16383) << 18 | $0 >>> 14;
  return $1 & 16383;
 }
 
 function jsvSetFirstChild($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP16[$3 + 10 >> 1] = $1;
  $4 = HEAP32[$3 + 12 >> 2];
  $2 = $4;
  $0 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
  $1 = HEAPU8[$2 + 8 | 0] | HEAPU8[$2 + 9 | 0] << 8 | (HEAPU8[$2 + 10 | 0] << 16 | HEAPU8[$2 + 11 | 0] << 24);
  $2 = $0;
  $5 = $2 & 268435455;
  $0 = $1 & -1024;
  $6 = $0;
  $1 = $3;
  $0 = HEAPU16[$1 + 10 >> 1];
  $2 = $0 & 16383;
  $1 = $2 >>> 4 | 0;
  $3 = $1;
  $0 = $5;
  $1 = $2 << 28 | $0;
  $0 = $4;
  HEAP8[$0 + 4 | 0] = $1;
  HEAP8[$0 + 5 | 0] = $1 >>> 8;
  HEAP8[$0 + 6 | 0] = $1 >>> 16;
  HEAP8[$0 + 7 | 0] = $1 >>> 24;
  $1 = $6;
  $2 = $3;
  $2 = $1 | $2;
  HEAP8[$0 + 8 | 0] = $2;
  HEAP8[$0 + 9 | 0] = $2 >>> 8;
  HEAP8[$0 + 10 | 0] = $2 >>> 16;
  HEAP8[$0 + 11 | 0] = $2 >>> 24;
 }
 
 function jsvSetLastChild($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP16[$4 + 10 >> 1] = $1;
  $5 = HEAP32[$4 + 12 >> 2];
  $2 = $5;
  $0 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
  $1 = HEAPU8[$2 + 8 | 0] | HEAPU8[$2 + 9 | 0] << 8 | (HEAPU8[$2 + 10 | 0] << 16 | HEAPU8[$2 + 11 | 0] << 24);
  $2 = $0;
  $3 = $2;
  $0 = $1 & 262143;
  $6 = $0;
  $1 = $4;
  $0 = HEAPU16[$1 + 10 >> 1];
  $2 = $0 & 16383;
  $1 = $2 << 18;
  $2 = $1;
  $0 = $5;
  HEAP8[$0 + 4 | 0] = $3;
  HEAP8[$0 + 5 | 0] = $3 >>> 8;
  HEAP8[$0 + 6 | 0] = $3 >>> 16;
  HEAP8[$0 + 7 | 0] = $3 >>> 24;
  $1 = $6;
  $2 = $1 | $2;
  HEAP8[$0 + 8 | 0] = $2;
  HEAP8[$0 + 9 | 0] = $2 >>> 8;
  HEAP8[$0 + 10 | 0] = $2 >>> 16;
  HEAP8[$0 + 11 | 0] = $2 >>> 24;
 }
 
 function jsvSetNextSibling($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP16[$2 + 10 >> 1] = $1;
  $0 = $2;
  $3 = HEAPU16[$0 + 10 >> 1];
  $0 = $3;
  $4 = $0 & 16383;
  $2 = HEAP32[$2 + 12 >> 2];
  $1 = $2;
  $3 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
  $0 = HEAPU8[$1 + 8 | 0] | HEAPU8[$1 + 9 | 0] << 8 | (HEAPU8[$1 + 10 | 0] << 16 | HEAPU8[$1 + 11 | 0] << 24);
  $1 = $3;
  $3 = $0;
  $0 = $4;
  $1 = $1 & -16384 | $0;
  $0 = $2;
  HEAP8[$0 + 4 | 0] = $1;
  HEAP8[$0 + 5 | 0] = $1 >>> 8;
  HEAP8[$0 + 6 | 0] = $1 >>> 16;
  HEAP8[$0 + 7 | 0] = $1 >>> 24;
  $1 = $3;
  HEAP8[$0 + 8 | 0] = $1;
  HEAP8[$0 + 9 | 0] = $1 >>> 8;
  HEAP8[$0 + 10 | 0] = $1 >>> 16;
  HEAP8[$0 + 11 | 0] = $1 >>> 24;
 }
 
 function jsvSetPrevSibling($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP16[$3 + 10 >> 1] = $1;
  $4 = HEAP32[$3 + 12 >> 2];
  $2 = $4;
  $0 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
  $1 = HEAPU8[$2 + 8 | 0] | HEAPU8[$2 + 9 | 0] << 8 | (HEAPU8[$2 + 10 | 0] << 16 | HEAPU8[$2 + 11 | 0] << 24);
  $2 = $0;
  $5 = $2 & -268419073;
  $0 = $1;
  $6 = $0;
  $1 = $3;
  $0 = HEAPU16[$1 + 10 >> 1];
  $2 = $0 & 16383;
  $1 = $2 >>> 18 | 0;
  $3 = $1;
  $0 = $5;
  $1 = $2 << 14 | $0;
  $0 = $4;
  HEAP8[$0 + 4 | 0] = $1;
  HEAP8[$0 + 5 | 0] = $1 >>> 8;
  HEAP8[$0 + 6 | 0] = $1 >>> 16;
  HEAP8[$0 + 7 | 0] = $1 >>> 24;
  $1 = $6;
  $2 = $3;
  $2 = $1 | $2;
  HEAP8[$0 + 8 | 0] = $2;
  HEAP8[$0 + 9 | 0] = $2 >>> 8;
  HEAP8[$0 + 10 | 0] = $2 >>> 16;
  HEAP8[$0 + 11 | 0] = $2 >>> 24;
 }
 
 function jsvGetRefs($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  $1 = HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24);
  $1 = $1 >>> 10 | 0;
  return $1 & 255;
 }
 
 function jsvSetRefs($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP16[$4 + 10 >> 1] = $1;
  $5 = HEAP32[$4 + 12 >> 2];
  $2 = $5;
  $0 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
  $1 = HEAPU8[$2 + 8 | 0] | HEAPU8[$2 + 9 | 0] << 8 | (HEAPU8[$2 + 10 | 0] << 16 | HEAPU8[$2 + 11 | 0] << 24);
  $2 = $0;
  $3 = $2;
  $0 = $1 & -261121;
  $6 = $0;
  $1 = $4;
  $0 = HEAPU16[$1 + 10 >> 1];
  $2 = $0 & 255;
  $1 = $2 << 10;
  $2 = $1;
  $0 = $5;
  HEAP8[$0 + 4 | 0] = $3;
  HEAP8[$0 + 5 | 0] = $3 >>> 8;
  HEAP8[$0 + 6 | 0] = $3 >>> 16;
  HEAP8[$0 + 7 | 0] = $3 >>> 24;
  $1 = $6;
  $2 = $1 | $2;
  HEAP8[$0 + 8 | 0] = $2;
  HEAP8[$0 + 9 | 0] = $2 >>> 8;
  HEAP8[$0 + 10 | 0] = $2 >>> 16;
  HEAP8[$0 + 11 | 0] = $2 >>> 24;
 }
 
 function jsvGetLocks($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  return (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) >>> 10 & 15;
 }
 
 function jsvIsRoot($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   HEAP8[$1 + 15 | 0] = HEAPU8[$1 + 7 | 0] == 1;
  }
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvIsPin($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   HEAP8[$1 + 15 | 0] = HEAPU8[$1 + 7 | 0] == 13;
  }
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvIsSimpleInt($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  if (HEAP32[$1 + 12 >> 2]) {
   $0 = HEAP32[$1 + 12 >> 2];
   $2 = ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63) == 10;
  }
  return $2;
 }
 
 function jsvIsInt($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   $0 = 1;
   block1 : {
    if (HEAPU8[$1 + 7 | 0] == 10) {
     break block1
    }
    $0 = 1;
    if (HEAPU8[$1 + 7 | 0] == 13) {
     break block1
    }
    $0 = 1;
    if (HEAPU8[$1 + 7 | 0] == 15) {
     break block1
    }
    $0 = 1;
    if (HEAPU8[$1 + 7 | 0] == 16) {
     break block1
    }
    $0 = HEAPU8[$1 + 7 | 0] == 17;
   }
   HEAP8[$1 + 15 | 0] = $0;
  }
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvIsFloat($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  if (HEAP32[$1 + 12 >> 2]) {
   $0 = HEAP32[$1 + 12 >> 2];
   $2 = ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63) == 11;
  }
  return $2;
 }
 
 function jsvIsBoolean($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   $0 = 1;
   $0 = HEAPU8[$1 + 7 | 0] != 12 ? HEAPU8[$1 + 7 | 0] == 17 : $0;
   HEAP8[$1 + 15 | 0] = $0;
  }
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvIsString($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   $2 = HEAP8[$1 + 7 | 0] << 24 >> 24 >= 18 ? HEAP8[$1 + 7 | 0] << 24 >> 24 <= 40 : $2;
   HEAP8[$1 + 15 | 0] = $2;
  }
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvIsUTF8String($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  if (HEAP32[$1 + 8 >> 2]) {
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
  }
  HEAP8[$1 + 15 | 0] = 0;
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvIsBasicString($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   $2 = HEAP8[$1 + 7 | 0] << 24 >> 24 >= 28 ? HEAP8[$1 + 7 | 0] << 24 >> 24 <= 37 : $2;
   HEAP8[$1 + 15 | 0] = $2;
  }
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvIsStringExt($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   $2 = HEAP8[$1 + 7 | 0] << 24 >> 24 >= 41 ? HEAP8[$1 + 7 | 0] << 24 >> 24 <= 51 : $2;
   HEAP8[$1 + 15 | 0] = $2;
  }
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvIsFlatString($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   HEAP8[$1 + 15 | 0] = HEAPU8[$1 + 7 | 0] == 38;
  }
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvIsNativeString($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   HEAP8[$1 + 15 | 0] = HEAPU8[$1 + 7 | 0] == 39;
  }
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvIsFlashString($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   HEAP8[$1 + 15 | 0] = HEAPU8[$1 + 7 | 0] == 40;
  }
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvIsConstant($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  if (HEAP32[$1 + 12 >> 2]) {
   $0 = HEAP32[$1 + 12 >> 2];
   $2 = ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 64) == 64;
  }
  return $2;
 }
 
 function jsvIsNumeric($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   $2 = HEAP8[$1 + 7 | 0] << 24 >> 24 >= 10 ? HEAP8[$1 + 7 | 0] << 24 >> 24 <= 17 : $2;
   HEAP8[$1 + 15 | 0] = $2;
  }
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvIsFunction($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   $0 = 1;
   block1 : {
    if (HEAPU8[$1 + 7 | 0] == 7) {
     break block1
    }
    $0 = 1;
    if (HEAPU8[$1 + 7 | 0] == 9) {
     break block1
    }
    $0 = HEAPU8[$1 + 7 | 0] == 8;
   }
   HEAP8[$1 + 15 | 0] = $0;
  }
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvIsFunctionReturn($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  if (HEAP32[$1 + 12 >> 2]) {
   $0 = HEAP32[$1 + 12 >> 2];
   $2 = ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63) == 9;
  }
  return $2;
 }
 
 function jsvIsFunctionParameter($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = 0;
  block : {
   if (!HEAP32[$1 + 12 >> 2]) {
    break block
   }
   $2 = HEAP32[$1 + 12 >> 2];
   $0 = 0;
   if (!((HEAPU8[$2 + 12 | 0] | HEAPU8[$2 + 13 | 0] << 8) & 128)) {
    break block
   }
   $0 = jsvIsString(HEAP32[$1 + 12 >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return $0 & 1;
 }
 
 function jsvIsObject($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   $0 = 1;
   $0 = HEAPU8[$1 + 7 | 0] != 5 ? HEAPU8[$1 + 7 | 0] == 1 : $0;
   HEAP8[$1 + 15 | 0] = $0;
  }
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvIsArray($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  if (HEAP32[$1 + 12 >> 2]) {
   $0 = HEAP32[$1 + 12 >> 2];
   $2 = ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63) == 3;
  }
  return $2;
 }
 
 function jsvIsArrayBuffer($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  if (HEAP32[$1 + 12 >> 2]) {
   $0 = HEAP32[$1 + 12 >> 2];
   $2 = ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63) == 4;
  }
  return $2;
 }
 
 function jsvIsArrayBufferName($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  if (HEAP32[$1 + 12 >> 2]) {
   $0 = HEAP32[$1 + 12 >> 2];
   $2 = ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63) == 14;
  }
  return $2;
 }
 
 function jsvIsNativeFunction($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  if (HEAP32[$1 + 12 >> 2]) {
   $0 = HEAP32[$1 + 12 >> 2];
   $2 = ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63) == 8;
  }
  return $2;
 }
 
 function jsvIsUndefined($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return !HEAP32[$1 + 12 >> 2];
 }
 
 function jsvIsNull($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  if (HEAP32[$1 + 12 >> 2]) {
   $0 = HEAP32[$1 + 12 >> 2];
   $2 = ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63) == 2;
  }
  return $2;
 }
 
 function jsvIsNullish($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = 1;
  if (HEAP32[$1 + 12 >> 2]) {
   $0 = HEAP32[$1 + 12 >> 2];
   $0 = ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63) == 2;
  }
  return $0;
 }
 
 function jsvIsBasic($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   block1 : {
    if (HEAP8[$1 + 7 | 0] << 24 >> 24 >= 10) {
     $0 = 1;
     if (HEAP8[$1 + 7 | 0] << 24 >> 24 <= 17) {
      break block1
     }
    }
    $2 = HEAP8[$1 + 7 | 0] << 24 >> 24 >= 18 ? HEAP8[$1 + 7 | 0] << 24 >> 24 <= 40 : $2;
    $0 = $2;
   }
   HEAP8[$1 + 15 | 0] = $0 & 1;
  }
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvIsName($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   $2 = HEAP8[$1 + 7 | 0] << 24 >> 24 >= 14 ? HEAP8[$1 + 7 | 0] << 24 >> 24 <= 27 : $2;
   HEAP8[$1 + 15 | 0] = $2;
  }
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvIsBasicName($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   $2 = HEAP8[$1 + 7 | 0] << 24 >> 24 >= 23 ? HEAP8[$1 + 7 | 0] << 24 >> 24 <= 27 : $2;
   HEAP8[$1 + 15 | 0] = $2;
  }
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvIsNameWithValue($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   $2 = HEAP8[$1 + 7 | 0] << 24 >> 24 >= 16 ? HEAP8[$1 + 7 | 0] << 24 >> 24 <= 22 : $2;
   HEAP8[$1 + 15 | 0] = $2;
  }
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvIsNameInt($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   $0 = 1;
   if (HEAPU8[$1 + 7 | 0] != 16) {
    $2 = HEAP8[$1 + 7 | 0] << 24 >> 24 >= 18 ? HEAP8[$1 + 7 | 0] << 24 >> 24 <= 22 : $2;
    $0 = $2;
   }
   HEAP8[$1 + 15 | 0] = $0 & 1;
  }
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvIsNameIntBool($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  if (HEAP32[$1 + 12 >> 2]) {
   $0 = HEAP32[$1 + 12 >> 2];
   $2 = ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63) == 17;
  }
  return $2;
 }
 
 function jsvIsNewChild($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = 0;
  block : {
   if (!(jsvIsName(HEAP32[$1 + 12 >> 2]) & 1)) {
    break block
   }
   $0 = 0;
   if (!(jsvGetNextSibling(HEAP32[$1 + 12 >> 2]) & 65535)) {
    break block
   }
   $0 = (jsvGetNextSibling(HEAP32[$1 + 12 >> 2]) & 65535) == (jsvGetPrevSibling(HEAP32[$1 + 12 >> 2]) & 65535);
  }
  __stack_pointer = $1 + 16 | 0;
  return $0;
 }
 
 function jsvIsGetterOrSetter($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   HEAP8[$1 + 15 | 0] = HEAPU8[$1 + 7 | 0] == 6;
  }
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvIsIntegerish($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   $0 = 1;
   block1 : {
    if (HEAPU8[$1 + 7 | 0] == 10) {
     break block1
    }
    $0 = 1;
    if (HEAPU8[$1 + 7 | 0] == 13) {
     break block1
    }
    $0 = 1;
    if (HEAPU8[$1 + 7 | 0] == 15) {
     break block1
    }
    $0 = 1;
    if (HEAPU8[$1 + 7 | 0] == 16) {
     break block1
    }
    $0 = 1;
    if (HEAPU8[$1 + 7 | 0] == 17) {
     break block1
    }
    $0 = 1;
    if (HEAPU8[$1 + 7 | 0] == 13) {
     break block1
    }
    $0 = 1;
    if (HEAPU8[$1 + 7 | 0] == 12) {
     break block1
    }
    $0 = 1;
    if (HEAPU8[$1 + 7 | 0] == 17) {
     break block1
    }
    $0 = HEAPU8[$1 + 7 | 0] == 2;
   }
   HEAP8[$1 + 15 | 0] = $0;
  }
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvIsIterable($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   $0 = 1;
   block1 : {
    if (HEAPU8[$1 + 7 | 0] == 3) {
     break block1
    }
    $0 = 1;
    if (HEAPU8[$1 + 7 | 0] == 5) {
     break block1
    }
    $0 = 1;
    if (HEAPU8[$1 + 7 | 0] == 1) {
     break block1
    }
    $0 = 1;
    if (HEAPU8[$1 + 7 | 0] == 7) {
     break block1
    }
    $0 = 1;
    if (HEAPU8[$1 + 7 | 0] == 9) {
     break block1
    }
    $0 = 1;
    if (HEAPU8[$1 + 7 | 0] == 8) {
     break block1
    }
    if (HEAP8[$1 + 7 | 0] << 24 >> 24 >= 18) {
     $0 = 1;
     if (HEAP8[$1 + 7 | 0] << 24 >> 24 <= 40) {
      break block1
     }
    }
    $0 = HEAPU8[$1 + 7 | 0] == 4;
   }
   HEAP8[$1 + 15 | 0] = $0;
  }
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvHasCharacterData($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   block1 : {
    if (HEAP8[$1 + 7 | 0] << 24 >> 24 >= 18) {
     $0 = 1;
     if (HEAP8[$1 + 7 | 0] << 24 >> 24 <= 40) {
      break block1
     }
    }
    $2 = HEAP8[$1 + 7 | 0] << 24 >> 24 >= 41 ? HEAP8[$1 + 7 | 0] << 24 >> 24 <= 51 : $2;
    $0 = $2;
   }
   HEAP8[$1 + 15 | 0] = $0 & 1;
  }
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvHasStringExt($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   block2 : {
    if (!(HEAP8[$1 + 7 | 0] << 24 >> 24 <= 40 & HEAP8[$1 + 7 | 0] << 24 >> 24 >= 18)) {
     $0 = 0;
     if (HEAP8[$1 + 7 | 0] << 24 >> 24 < 41) {
      break block2
     }
     $0 = 0;
     if (HEAP8[$1 + 7 | 0] << 24 >> 24 > 51) {
      break block2
     }
    }
    $0 = 1;
    block3 : {
     if (HEAPU8[$1 + 7 | 0] == 38) {
      break block3
     }
     $0 = 1;
     if (HEAPU8[$1 + 7 | 0] == 39) {
      break block3
     }
     $0 = HEAPU8[$1 + 7 | 0] == 40;
    }
    $0 = $0 ^ -1;
   }
   HEAP8[$1 + 15 | 0] = $0 & 1;
  }
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvHasChildren($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   $0 = 1;
   block1 : {
    if (HEAPU8[$1 + 7 | 0] == 7) {
     break block1
    }
    $0 = 1;
    if (HEAPU8[$1 + 7 | 0] == 9) {
     break block1
    }
    $0 = 1;
    if (HEAPU8[$1 + 7 | 0] == 8) {
     break block1
    }
    $0 = 1;
    if (HEAPU8[$1 + 7 | 0] == 5) {
     break block1
    }
    $0 = 1;
    if (HEAPU8[$1 + 7 | 0] == 1) {
     break block1
    }
    $0 = 1;
    if (HEAPU8[$1 + 7 | 0] == 3) {
     break block1
    }
    $0 = 1;
    if (HEAPU8[$1 + 7 | 0] == 1) {
     break block1
    }
    $0 = HEAPU8[$1 + 7 | 0] == 6;
   }
   HEAP8[$1 + 15 | 0] = $0;
  }
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvHasSingleChild($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   $0 = 1;
   if (HEAPU8[$1 + 7 | 0] != 4) {
    $0 = 0;
    block1 : {
     if (HEAP8[$1 + 7 | 0] << 24 >> 24 < 14) {
      break block1
     }
     $0 = 0;
     if (HEAP8[$1 + 7 | 0] << 24 >> 24 > 27) {
      break block1
     }
     $2 = HEAP8[$1 + 7 | 0] << 24 >> 24 >= 16 ? HEAP8[$1 + 7 | 0] << 24 >> 24 <= 22 : $2;
     $0 = $2 ^ -1;
    }
   }
   HEAP8[$1 + 15 | 0] = $0 & 1;
  }
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function _jsvGetAddressOf($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP16[$1 + 14 >> 1] = $0;
  $0 = jsvGetAddressOf(HEAPU16[$1 + 14 >> 1]);
  __stack_pointer = $1 + 16 | 0;
  return $0;
 }
 
 function jsvGetAddressOf($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP16[$1 + 14 >> 1] = $0;
  return Math_imul(HEAPU16[$1 + 14 >> 1], 14) + 200490 | 0;
 }
 
 function jsvCreateEmptyVarList() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 32 | 0;
  __stack_pointer = $0;
  HEAP8[200498] = 1;
  HEAP16[100250] = 0;
  jsvSetNextSibling($0 + 18 | 0, 0);
  HEAP32[$0 + 12 >> 2] = $0 + 18;
  HEAP16[$0 + 10 >> 1] = 1;
  while (1) {
   if (HEAPU16[$0 + 10 >> 1] <= 12e3) {
    HEAP32[$0 + 4 >> 2] = jsvGetAddressOf(HEAPU16[$0 + 10 >> 1]);
    $1 = HEAP32[$0 + 4 >> 2];
    block : {
     if (!((HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & 63)) {
      jsvSetNextSibling(HEAP32[$0 + 12 >> 2], HEAPU16[$0 + 10 >> 1]);
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 4 >> 2];
      break block;
     }
     if (jsvIsFlatString(HEAP32[$0 + 4 >> 2]) & 1) {
      HEAP16[$0 + 10 >> 1] = HEAPU16[$0 + 10 >> 1] + jsvGetFlatStringBlocks(HEAP32[$0 + 4 >> 2])
     }
    }
    HEAP16[$0 + 10 >> 1] = HEAPU16[$0 + 10 >> 1] + 1;
    continue;
   }
   break;
  };
  jsvSetNextSibling(HEAP32[$0 + 12 >> 2], 0);
  HEAP16[100250] = jsvGetNextSibling($0 + 18 | 0);
  HEAP8[200498] = 0;
  __stack_pointer = $0 + 32 | 0;
 }
 
 function jsvGetFlatStringBlocks($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  return ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) + 13 >>> 0) / 14 | 0;
 }
 
 function jsvClearEmptyVarList() {
  var $0 = 0, $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[200498] = 1;
  HEAP16[100250] = 0;
  HEAP16[$1 + 14 >> 1] = 1;
  while (1) {
   if (HEAPU16[$1 + 14 >> 1] <= 12e3) {
    HEAP32[$1 + 8 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 14 >> 1]);
    $0 = HEAP32[$1 + 8 >> 2];
    block : {
     if (!((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63)) {
      $0 = HEAP32[$1 + 8 >> 2];
      HEAP8[$0 | 0] = 0;
      HEAP8[$0 + 1 | 0] = 0;
      HEAP8[$0 + 2 | 0] = 0;
      HEAP8[$0 + 3 | 0] = 0;
      HEAP8[$0 + 4 | 0] = 0;
      HEAP8[$0 + 5 | 0] = 0;
      HEAP8[$0 + 6 | 0] = 0;
      HEAP8[$0 + 7 | 0] = 0;
      HEAP8[$0 + 6 | 0] = 0;
      HEAP8[$0 + 7 | 0] = 0;
      HEAP8[$0 + 8 | 0] = 0;
      HEAP8[$0 + 9 | 0] = 0;
      HEAP8[$0 + 10 | 0] = 0;
      HEAP8[$0 + 11 | 0] = 0;
      HEAP8[$0 + 12 | 0] = 0;
      HEAP8[$0 + 13 | 0] = 0;
      break block;
     }
     if (jsvIsFlatString(HEAP32[$1 + 8 >> 2]) & 1) {
      HEAP16[$1 + 14 >> 1] = HEAPU16[$1 + 14 >> 1] + jsvGetFlatStringBlocks(HEAP32[$1 + 8 >> 2])
     }
    }
    HEAP16[$1 + 14 >> 1] = HEAPU16[$1 + 14 >> 1] + 1;
    continue;
   }
   break;
  };
  HEAP8[200498] = 0;
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvSoftInit() {
  jsvCreateEmptyVarList();
 }
 
 function jsvSoftKill() {
  jsvClearEmptyVarList();
 }
 
 function jsvReset() {
  HEAP16[100250] = 0;
  wasm2js_memory_fill(200504, 0, 168e3);
  jsvSoftInit();
 }
 
 function jsvInit($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvReset();
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvKill() {
  
 }
 
 function jsvFindOrCreateRoot() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP16[$0 + 10 >> 1] = 1;
  block : {
   while (1) {
    if (HEAPU16[$0 + 10 >> 1] <= 12e3) {
     if (jsvIsRoot(jsvGetAddressOf(HEAPU16[$0 + 10 >> 1])) & 1) {
      HEAP32[$0 + 12 >> 2] = jsvLock(HEAPU16[$0 + 10 >> 1]);
      break block;
     } else {
      HEAP16[$0 + 10 >> 1] = HEAPU16[$0 + 10 >> 1] + 1;
      continue;
     }
    }
    break;
   };
   HEAP32[$0 + 12 >> 2] = jsvRef(jsvNewWithFlags(1));
  }
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function jsvLock($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP16[$1 + 14 >> 1] = $0;
  HEAP32[$1 + 8 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 14 >> 1]);
  $0 = HEAP32[$1 + 8 >> 2];
  if (((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 15360) != 15360) {
   $0 = HEAP32[$1 + 8 >> 2];
   $2 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) + 1024 | 0;
   HEAP8[$0 + 12 | 0] = $2;
   HEAP8[$0 + 13 | 0] = $2 >>> 8;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 8 >> 2];
 }
 
 function jsvNewWithFlags($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP16[$1 + 10 >> 1] = $0;
  block : {
   if (HEAPU8[200498]) {
    HEAP8[368518] = HEAPU8[368518] | 32;
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 4 >> 2] = 0;
   jshInterruptOff();
   if (HEAPU16[100250]) {
    HEAP32[$1 + 4 >> 2] = jsvGetAddressOf(HEAPU16[100250]);
    HEAP16[100250] = jsvGetNextSibling(HEAP32[$1 + 4 >> 2]);
    HEAP8[200497] = 1;
   }
   jshInterruptOn();
   if (HEAP32[$1 + 4 >> 2]) {
    jsvResetVariable(HEAP32[$1 + 4 >> 2], HEAPU16[$1 + 10 >> 1]);
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
    break block;
   }
   HEAP8[368518] = HEAPU8[368518] | 8;
   if (jshIsInInterrupt() & 1) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   if (jsvGarbageCollect()) {
    HEAP32[$1 + 12 >> 2] = jsvNewWithFlags(HEAPU16[$1 + 10 >> 1]);
    break block;
   }
   if (jsiFreeMoreMemory() & 1) {
    HEAP32[$1 + 12 >> 2] = jsvNewWithFlags(HEAPU16[$1 + 10 >> 1]);
    break block;
   }
   if (!(HEAPU8[368518] & 16)) {
    HEAP8[368518] = HEAPU8[368518] | 16;
    jsiConsolePrintString(140589);
    jswrap_console_trace(0);
   }
   HEAP8[368518] = HEAPU8[368518] | 16;
   jspSetInterrupted(1);
   HEAP32[$1 + 12 >> 2] = 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvRef($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  if ((jsvGetRefs(HEAP32[$1 + 12 >> 2]) & 65535) >>> 0 < 255) {
   jsvSetRefs(HEAP32[$1 + 12 >> 2], (jsvGetRefs(HEAP32[$1 + 12 >> 2]) & 65535) + 1 & 65535)
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvResetVariable($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP16[$2 + 10 >> 1] = $1;
  HEAP32[$2 + 4 >> 2] = 0;
  while (1) {
   if (HEAPU32[$2 + 4 >> 2] < 14) {
    HEAP8[HEAP32[$2 + 12 >> 2] + HEAP32[$2 + 4 >> 2] | 0] = 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
    continue;
   }
   break;
  };
  $0 = HEAP32[$2 + 12 >> 2];
  $1 = HEAPU16[$2 + 10 >> 1] | 1024;
  HEAP8[$0 + 12 | 0] = $1;
  HEAP8[$0 + 13 | 0] = $1 >>> 8;
 }
 
 function jsvGarbageCollect() {
  var $0 = 0, $1 = 0, $2 = 0;
  $0 = __stack_pointer - 48 | 0;
  __stack_pointer = $0;
  block : {
   if (HEAPU8[200498]) {
    HEAP32[$0 + 44 >> 2] = 0;
    break block;
   }
   HEAP8[200498] = 2;
   HEAP16[$0 + 42 >> 1] = 1;
   while (1) {
    if (HEAPU16[$0 + 42 >> 1] <= 12e3) {
     HEAP32[$0 + 36 >> 2] = jsvGetAddressOf(HEAPU16[$0 + 42 >> 1]);
     $1 = HEAP32[$0 + 36 >> 2];
     if ((HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & 63) {
      $1 = HEAP32[$0 + 36 >> 2];
      $2 = HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8 | 256;
      HEAP8[$1 + 12 | 0] = $2;
      HEAP8[$1 + 13 | 0] = $2 >>> 8;
      if (jsvIsFlatString(HEAP32[$0 + 36 >> 2]) & 1) {
       HEAP16[$0 + 42 >> 1] = HEAPU16[$0 + 42 >> 1] + jsvGetFlatStringBlocks(HEAP32[$0 + 36 >> 2])
      }
     }
     HEAP16[$0 + 42 >> 1] = HEAPU16[$0 + 42 >> 1] + 1;
     continue;
    }
    break;
   };
   HEAP16[$0 + 42 >> 1] = 1;
   while (1) {
    if (HEAPU16[$0 + 42 >> 1] <= 12e3) {
     HEAP32[$0 + 32 >> 2] = jsvGetAddressOf(HEAPU16[$0 + 42 >> 1]);
     $1 = HEAP32[$0 + 32 >> 2];
     block1 : {
      if (!((HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & 256)) {
       break block1
      }
      if (!(jsvGetLocks(HEAP32[$0 + 32 >> 2]) & 255)) {
       break block1
      }
      if (!(jsvGarbageCollectMarkUsed(HEAP32[$0 + 32 >> 2]) & 1)) {
       HEAP8[200498] = 0;
       HEAP32[$0 + 44 >> 2] = 0;
       break block;
      }
     }
     if (jsvIsFlatString(HEAP32[$0 + 32 >> 2]) & 1) {
      HEAP16[$0 + 42 >> 1] = HEAPU16[$0 + 42 >> 1] + jsvGetFlatStringBlocks(HEAP32[$0 + 32 >> 2])
     }
     HEAP16[$0 + 42 >> 1] = HEAPU16[$0 + 42 >> 1] + 1;
     continue;
    }
    break;
   };
   HEAP32[$0 + 28 >> 2] = 0;
   HEAP16[100250] = 0;
   HEAP32[$0 + 24 >> 2] = 0;
   HEAP16[$0 + 42 >> 1] = 1;
   while (1) {
    if (HEAPU16[$0 + 42 >> 1] <= 12e3) {
     HEAP32[$0 + 20 >> 2] = jsvGetAddressOf(HEAPU16[$0 + 42 >> 1]);
     $1 = HEAP32[$0 + 20 >> 2];
     block4 : {
      if ((HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & 256) {
       if (jsvIsFlatString(HEAP32[$0 + 20 >> 2]) & 1) {
        HEAP32[$0 + 16 >> 2] = jsvGetFlatStringBlocks(HEAP32[$0 + 20 >> 2]);
        HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 16 >> 2] + HEAP32[$0 + 28 >> 2];
        $1 = HEAP32[$0 + 20 >> 2];
        HEAP8[$1 + 12 | 0] = 0;
        HEAP8[$1 + 13 | 0] = 0;
        block2 : {
         if (HEAP32[$0 + 24 >> 2]) {
          jsvSetNextSibling(HEAP32[$0 + 24 >> 2], HEAPU16[$0 + 42 >> 1]);
          break block2;
         }
         HEAP16[100250] = HEAPU16[$0 + 42 >> 1];
        }
        HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 20 >> 2];
        while (1) {
         $1 = HEAP32[$0 + 16 >> 2];
         HEAP32[$0 + 16 >> 2] = $1 - 1;
         if ($1) {
          HEAP16[$0 + 42 >> 1] = HEAPU16[$0 + 42 >> 1] + 1;
          HEAP32[$0 + 20 >> 2] = jsvGetAddressOf(HEAPU16[$0 + 42 >> 1]);
          $1 = HEAP32[$0 + 20 >> 2];
          HEAP8[$1 + 12 | 0] = 0;
          HEAP8[$1 + 13 | 0] = 0;
          block3 : {
           if (HEAP32[$0 + 24 >> 2]) {
            jsvSetNextSibling(HEAP32[$0 + 24 >> 2], HEAPU16[$0 + 42 >> 1]);
            break block3;
           }
           HEAP16[100250] = HEAPU16[$0 + 42 >> 1];
          }
          HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 20 >> 2];
          continue;
         }
         break;
        };
        break block4;
       }
       if (jsvHasSingleChild(HEAP32[$0 + 20 >> 2]) & 1) {
        HEAP16[$0 + 14 >> 1] = jsvGetFirstChild(HEAP32[$0 + 20 >> 2]);
        if (HEAPU16[$0 + 14 >> 1]) {
         HEAP32[$0 + 8 >> 2] = jsvGetAddressOf(HEAPU16[$0 + 14 >> 1]);
         $1 = HEAP32[$0 + 8 >> 2];
         block5 : {
          if (!(HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8)) {
           break block5
          }
          $1 = HEAP32[$0 + 8 >> 2];
          if ((HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & 256) {
           break block5
          }
          jsvUnRef(HEAP32[$0 + 8 >> 2]);
         }
        }
       }
       $1 = HEAP32[$0 + 20 >> 2];
       HEAP8[$1 + 12 | 0] = 0;
       HEAP8[$1 + 13 | 0] = 0;
       block6 : {
        if (HEAP32[$0 + 24 >> 2]) {
         jsvSetNextSibling(HEAP32[$0 + 24 >> 2], HEAPU16[$0 + 42 >> 1]);
         break block6;
        }
        HEAP16[100250] = HEAPU16[$0 + 42 >> 1];
       }
       HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 20 >> 2];
       HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 28 >> 2] + 1;
       break block4;
      }
      block7 : {
       if (jsvIsFlatString(HEAP32[$0 + 20 >> 2]) & 1) {
        HEAP16[$0 + 42 >> 1] = HEAPU16[$0 + 42 >> 1] + jsvGetFlatStringBlocks(HEAP32[$0 + 20 >> 2]);
        break block7;
       }
       $1 = HEAP32[$0 + 20 >> 2];
       if (!(HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8)) {
        block8 : {
         if (HEAP32[$0 + 24 >> 2]) {
          jsvSetNextSibling(HEAP32[$0 + 24 >> 2], HEAPU16[$0 + 42 >> 1]);
          break block8;
         }
         HEAP16[100250] = HEAPU16[$0 + 42 >> 1];
        }
        HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 20 >> 2];
       }
      }
     }
     HEAP16[$0 + 42 >> 1] = HEAPU16[$0 + 42 >> 1] + 1;
     continue;
    }
    break;
   };
   if (HEAP32[$0 + 24 >> 2]) {
    jsvSetNextSibling(HEAP32[$0 + 24 >> 2], 0)
   }
   HEAP8[200498] = 0;
   HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 28 >> 2];
  }
  __stack_pointer = $0 + 48 | 0;
  return HEAP32[$0 + 44 >> 2];
 }
 
 function jsvGetMemoryUsage() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 1;
  while (1) {
   if (HEAPU32[$0 + 8 >> 2] <= 12e3) {
    HEAP32[$0 + 4 >> 2] = jsvGetAddressOf(HEAP32[$0 + 8 >> 2] & 65535);
    $1 = HEAP32[$0 + 4 >> 2];
    if ((HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & 63) {
     HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
     if (jsvIsFlatString(HEAP32[$0 + 4 >> 2]) & 1) {
      HEAP32[$0 >> 2] = jsvGetFlatStringBlocks(HEAP32[$0 + 4 >> 2]);
      HEAP32[$0 + 8 >> 2] = HEAP32[$0 >> 2] + HEAP32[$0 + 8 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 >> 2] + HEAP32[$0 + 12 >> 2];
     }
    }
    HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
    continue;
   }
   break;
  };
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function jsvGetMemoryTotal() {
  return 12e3;
 }
 
 function jsvUpdateMemoryAddress($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  HEAP32[$3 + 16 >> 2] = 1;
  while (1) {
   if (HEAPU32[$3 + 16 >> 2] <= 12e3) {
    HEAP32[$3 + 12 >> 2] = jsvGetAddressOf(HEAP32[$3 + 16 >> 2] & 65535);
    block2 : {
     block : {
      if (!(jsvIsNativeString(HEAP32[$3 + 12 >> 2]) & 1)) {
       if (!(jsvIsFlashString(HEAP32[$3 + 12 >> 2]) & 1)) {
        break block
       }
      }
      $0 = HEAP32[$3 + 12 >> 2];
      HEAP32[$3 + 8 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
      if (!(HEAPU32[$3 + 8 >> 2] < HEAPU32[$3 + 28 >> 2] | HEAPU32[$3 + 8 >> 2] >= HEAP32[$3 + 28 >> 2] + HEAP32[$3 + 24 >> 2] >>> 0)) {
       $0 = HEAP32[$3 + 12 >> 2];
       $1 = (HEAP32[$3 + 8 >> 2] + HEAP32[$3 + 20 >> 2] | 0) - HEAP32[$3 + 28 >> 2] | 0;
       HEAP8[$0 | 0] = $1;
       HEAP8[$0 + 1 | 0] = $1 >>> 8;
       HEAP8[$0 + 2 | 0] = $1 >>> 16;
       HEAP8[$0 + 3 | 0] = $1 >>> 24;
      }
      break block2;
     }
     if (jsvIsFlatString(HEAP32[$3 + 12 >> 2]) & 1) {
      HEAP32[$3 + 16 >> 2] = jsvGetFlatStringBlocks(HEAP32[$3 + 12 >> 2]) + HEAP32[$3 + 16 >> 2]
     }
    }
    HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] + 1;
    continue;
   }
   break;
  };
  __stack_pointer = $3 + 32 | 0;
 }
 
 function jsvMoreFreeVariablesThan($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   HEAP16[$1 + 6 >> 1] = HEAPU16[100250];
   while (1) {
    if (HEAPU16[$1 + 6 >> 1]) {
     $0 = HEAP32[$1 + 8 >> 2];
     HEAP32[$1 + 8 >> 2] = $0 - 1;
     if ($0) {
      HEAP16[$1 + 6 >> 1] = jsvGetNextSibling(jsvGetAddressOf(HEAPU16[$1 + 6 >> 1]));
      continue;
     } else {
      HEAP8[$1 + 15 | 0] = 1;
      break block;
     }
    }
    break;
   };
   HEAP8[$1 + 15 | 0] = 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvIsMemoryFull() {
  return (HEAPU16[100250] != 0 ^ -1) & 1;
 }
 
 function jsvTrace($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP8[$2 + 7 | 0] = HEAPU8[200498];
  HEAP8[200498] = 0;
  _jsvTrace(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2], 0);
  HEAP8[200498] = HEAPU8[$2 + 7 | 0];
  jsiConsolePrintf(148265, 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function _jsvTrace($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 336 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 332 >> 2] = $0;
  HEAP32[$4 + 328 >> 2] = $1;
  HEAP32[$4 + 324 >> 2] = $2;
  HEAP32[$4 + 320 >> 2] = $3;
  HEAP32[$4 + 316 >> 2] = 0;
  while (1) {
   if (HEAP32[$4 + 316 >> 2] < HEAP32[$4 + 328 >> 2]) {
    jsiConsolePrintString(147034);
    HEAP32[$4 + 316 >> 2] = HEAP32[$4 + 316 >> 2] + 1;
    continue;
   }
   break;
  };
  block : {
   if (!HEAP32[$4 + 332 >> 2]) {
    jsiConsolePrintString(138928);
    break block;
   }
   if (!(HEAP32[$4 + 332 >> 2] != HEAP32[92130] | HEAP32[$4 + 320 >> 2] <= 0)) {
    jsiConsolePrintString(140762);
    break block;
   }
   jsvTraceLockInfo(HEAP32[$4 + 332 >> 2]);
   HEAP32[$4 + 312 >> 2] = _jsvTraceGetLowestLevel(HEAP32[$4 + 324 >> 2], HEAP32[$4 + 332 >> 2]);
   if (!((HEAP32[$4 + 312 >> 2] < 0 | HEAP32[$4 + 312 >> 2] >= HEAP32[$4 + 320 >> 2]) & HEAP32[$4 + 320 >> 2] <= 16)) {
    jsiConsolePrintString(148178);
    break block;
   }
   block3 : {
    if (jsvIsNewChild(HEAP32[$4 + 332 >> 2]) & 1) {
     jsiConsolePrintString(141960);
     HEAP32[$4 + 308 >> 2] = jsvGetAddressOf(jsvGetNextSibling(HEAP32[$4 + 332 >> 2]) & 65535);
     _jsvTrace(HEAP32[$4 + 308 >> 2], HEAP32[$4 + 328 >> 2] + 2 | 0, HEAP32[$4 + 324 >> 2], HEAP32[$4 + 320 >> 2] + 1 | 0);
     jsiConsolePrintString(146916);
     break block3;
    }
    if (jsvIsName(HEAP32[$4 + 332 >> 2]) & 1) {
     jsiConsolePrintString(146807)
    }
   }
   HEAP8[$4 + 307 | 0] = 32;
   block4 : {
    if (jsvIsObject(HEAP32[$4 + 332 >> 2]) & 1) {
     jsiConsolePrintString(146704);
     HEAP8[$4 + 307 | 0] = 125;
     break block4;
    }
    block5 : {
     if (jsvIsGetterOrSetter(HEAP32[$4 + 332 >> 2]) & 1) {
      jsiConsolePrintString(146714);
      HEAP8[$4 + 307 | 0] = 125;
      break block5;
     }
     block6 : {
      if (jsvIsArray(HEAP32[$4 + 332 >> 2]) & 1) {
       $0 = HEAP32[$4 + 332 >> 2];
       HEAP32[$4 + 48 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
       jsiConsolePrintf(146848, $4 + 48 | 0);
       HEAP8[$4 + 307 | 0] = 93;
       break block6;
      }
      block7 : {
       if (jsvIsNativeFunction(HEAP32[$4 + 332 >> 2]) & 1) {
        $0 = HEAP32[$4 + 332 >> 2];
        $1 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
        $0 = HEAP32[$4 + 332 >> 2];
        HEAP32[$4 + 68 >> 2] = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8;
        HEAP32[$4 + 64 >> 2] = $1;
        jsiConsolePrintf(146743, $4 - -64 | 0);
        HEAP8[$4 + 307 | 0] = 125;
        break block7;
       }
       block8 : {
        if (jsvIsFunction(HEAP32[$4 + 332 >> 2]) & 1) {
         jsiConsolePrintString(146731);
         if (jsvIsFunctionReturn(HEAP32[$4 + 332 >> 2]) & 1) {
          jsiConsolePrintString(146789)
         }
         HEAP8[$4 + 307 | 0] = 125;
         break block8;
        }
        block9 : {
         if (jsvIsPin(HEAP32[$4 + 332 >> 2]) & 1) {
          HEAP32[$4 + 80 >> 2] = jsvGetInteger(HEAP32[$4 + 332 >> 2]);
          jsiConsolePrintf(139606, $4 + 80 | 0);
          break block9;
         }
         block10 : {
          if (jsvIsInt(HEAP32[$4 + 332 >> 2]) & 1) {
           HEAP32[$4 + 96 >> 2] = jsvGetInteger(HEAP32[$4 + 332 >> 2]);
           jsiConsolePrintf(139538, $4 + 96 | 0);
           break block10;
          }
          block11 : {
           if (jsvIsBoolean(HEAP32[$4 + 332 >> 2]) & 1) {
            HEAP32[$4 + 112 >> 2] = jsvGetBool(HEAP32[$4 + 332 >> 2]) & 1 ? 137108 : 137432;
            jsiConsolePrintf(127673, $4 + 112 | 0);
            break block11;
           }
           block12 : {
            if (jsvIsFloat(HEAP32[$4 + 332 >> 2]) & 1) {
             HEAPF64[$4 + 128 >> 3] = jsvGetFloat(HEAP32[$4 + 332 >> 2]);
             jsiConsolePrintf(136946, $4 + 128 | 0);
             break block12;
            }
            block13 : {
             if (jsvIsFunctionParameter(HEAP32[$4 + 332 >> 2]) & 1) {
              HEAP32[$4 + 144 >> 2] = HEAP32[$4 + 332 >> 2];
              jsiConsolePrintf(146779, $4 + 144 | 0);
              break block13;
             }
             block14 : {
              if (jsvIsArrayBufferName(HEAP32[$4 + 332 >> 2]) & 1) {
               HEAP32[$4 + 160 >> 2] = jsvGetInteger(HEAP32[$4 + 332 >> 2]);
               jsiConsolePrintf(146827, $4 + 160 | 0);
               break block14;
              }
              block16 : {
               if (jsvIsArrayBuffer(HEAP32[$4 + 332 >> 2]) & 1) {
                block15 : {
                 if (jswGetBasicObjectName(HEAP32[$4 + 332 >> 2])) {
                  $1 = jswGetBasicObjectName(HEAP32[$4 + 332 >> 2]);
                  break block15;
                 }
                 $1 = 128236;
                }
                $0 = HEAP32[$4 + 332 >> 2];
                $2 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
                HEAP32[$4 + 184 >> 2] = HEAPU8[$0 + 2 | 0] | HEAPU8[$0 + 3 | 0] << 8 | HEAPU8[$0 + 4 | 0] << 16;
                HEAP32[$4 + 180 >> 2] = $2;
                HEAP32[$4 + 176 >> 2] = $1;
                jsiConsolePrintf(144547, $4 + 176 | 0);
                break block16;
               }
               block17 : {
                if (jsvIsString(HEAP32[$4 + 332 >> 2]) & 1) {
                 HEAP32[$4 + 300 >> 2] = 1;
                 if (jsvGetLastChild(HEAP32[$4 + 332 >> 2]) & 65535) {
                  HEAP32[$4 + 296 >> 2] = jsvGetAddressOf(jsvGetLastChild(HEAP32[$4 + 332 >> 2]) & 65535);
                  HEAP32[$4 + 300 >> 2] = jsvCountJsVarsUsed(HEAP32[$4 + 296 >> 2]) + HEAP32[$4 + 300 >> 2];
                 }
                 if (jsvIsFlatString(HEAP32[$4 + 332 >> 2]) & 1) {
                  HEAP32[$4 + 300 >> 2] = jsvGetFlatStringBlocks(HEAP32[$4 + 332 >> 2]) + HEAP32[$4 + 300 >> 2]
                 }
                 HEAP32[$4 + 292 >> 2] = 148266;
                 if (jsvIsFlatString(HEAP32[$4 + 332 >> 2]) & 1) {
                  HEAP32[$4 + 292 >> 2] = 125118
                 }
                 if (jsvIsNativeString(HEAP32[$4 + 332 >> 2]) & 1) {
                  HEAP32[$4 + 292 >> 2] = 137049
                 }
                 if (jsvIsFlashString(HEAP32[$4 + 332 >> 2]) & 1) {
                  HEAP32[$4 + 292 >> 2] = 136242
                 }
                 $0 = HEAP32[$4 + 292 >> 2];
                 $1 = HEAP32[$4 + 300 >> 2];
                 HEAP32[$4 + 200 >> 2] = HEAP32[$4 + 332 >> 2];
                 HEAP32[$4 + 196 >> 2] = $1;
                 HEAP32[$4 + 192 >> 2] = $0;
                 jsiConsolePrintf(128555, $4 + 192 | 0);
                 break block17;
                }
                $0 = HEAP32[$4 + 332 >> 2];
                HEAP32[$4 + 208 >> 2] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 50175;
                jsiConsolePrintf(139595, $4 + 208 | 0);
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
   if (jsvIsConstant(HEAP32[$4 + 332 >> 2]) & 1) {
    jsiConsolePrintf(146861, 0)
   }
   if (jsvIsNameInt(HEAP32[$4 + 332 >> 2]) & 1) {
    HEAP32[$4 >> 2] = jsvGetFirstChildSigned(HEAP32[$4 + 332 >> 2]) << 16 >> 16;
    jsiConsolePrintf(147775, $4);
    break block;
   }
   if (jsvIsNameIntBool(HEAP32[$4 + 332 >> 2]) & 1) {
    HEAP32[$4 + 16 >> 2] = jsvGetFirstChild(HEAP32[$4 + 332 >> 2]) & 65535 ? 137108 : 137432;
    jsiConsolePrintf(147352, $4 + 16 | 0);
    break block;
   }
   block19 : {
    if (jsvHasSingleChild(HEAP32[$4 + 332 >> 2]) & 1) {
     block18 : {
      if (jsvGetFirstChild(HEAP32[$4 + 332 >> 2]) & 65535) {
       $0 = jsvGetAddressOf(jsvGetFirstChild(HEAP32[$4 + 332 >> 2]) & 65535);
       break block18;
      }
      $0 = 0;
     }
     HEAP32[$4 + 288 >> 2] = $0;
     _jsvTrace(HEAP32[$4 + 288 >> 2], HEAP32[$4 + 328 >> 2] + 2 | 0, HEAP32[$4 + 324 >> 2], HEAP32[$4 + 320 >> 2] + 1 | 0);
     break block19;
    }
    if (jsvHasChildren(HEAP32[$4 + 332 >> 2]) & 1) {
     jsvIteratorNew($4 + 228 | 0, HEAP32[$4 + 332 >> 2], 0);
     HEAP8[$4 + 227 | 0] = 1;
     while (1) {
      $0 = 0;
      if (jsvIteratorHasElement($4 + 228 | 0) & 1) {
       $0 = jspIsInterrupted() ^ -1
      }
      if ($0 & 1) {
       if (HEAP8[$4 + 227 | 0] & 1) {
        jsiConsolePrintf(148265, 0)
       }
       HEAP8[$4 + 227 | 0] = 0;
       HEAP32[$4 + 220 >> 2] = jsvIteratorGetKey($4 + 228 | 0);
       _jsvTrace(HEAP32[$4 + 220 >> 2], HEAP32[$4 + 328 >> 2] + 2 | 0, HEAP32[$4 + 324 >> 2], HEAP32[$4 + 320 >> 2] + 1 | 0);
       jsvUnLock(HEAP32[$4 + 220 >> 2]);
       jsiConsolePrintf(148265, 0);
       jsvIteratorNext($4 + 228 | 0);
       continue;
      }
      break;
     };
     jsvIteratorFree($4 + 228 | 0);
     if (!(HEAP8[$4 + 227 | 0] & 1)) {
      HEAP32[$4 + 316 >> 2] = 0;
      while (1) {
       if (HEAP32[$4 + 316 >> 2] < HEAP32[$4 + 328 >> 2]) {
        jsiConsolePrintString(147034);
        HEAP32[$4 + 316 >> 2] = HEAP32[$4 + 316 >> 2] + 1;
        continue;
       }
       break;
      };
     }
    }
   }
   HEAP32[$4 + 32 >> 2] = HEAP8[$4 + 307 | 0] << 24 >> 24;
   jsiConsolePrintf(140231, $4 + 32 | 0);
  }
  __stack_pointer = $4 + 336 | 0;
 }
 
 function jsvGetMaxCharactersInVar($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (jsvIsStringExt(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = 10;
    break block;
   }
   if (jsvIsName(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = 4;
    break block;
   }
   block2 : {
    block1 : {
     if (jsvIsFlatString(HEAP32[$1 + 8 >> 2]) & 1) {
      break block1
     }
     if (jsvIsFlashString(HEAP32[$1 + 8 >> 2]) & 1) {
      break block1
     }
     if (!(jsvIsNativeString(HEAP32[$1 + 8 >> 2]) & 1)) {
      break block2
     }
    }
    HEAP32[$1 + 12 >> 2] = jsvGetCharactersInVar(HEAP32[$1 + 8 >> 2]);
    break block;
   }
   HEAP32[$1 + 12 >> 2] = 9;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvGetCharactersInVar($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP32[$1 + 4 >> 2] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
  block : {
   if (HEAP32[$1 + 4 >> 2] == 38) {
    $0 = HEAP32[$1 + 8 >> 2];
    HEAP32[$1 + 12 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
    break block;
   }
   if (!(HEAP32[$1 + 4 >> 2] != 39 & HEAP32[$1 + 4 >> 2] != 40)) {
    $0 = HEAP32[$1 + 8 >> 2];
    HEAP32[$1 + 12 >> 2] = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
    break block;
   }
   if (HEAPU32[$1 + 4 >> 2] <= 27) {
    if (HEAPU32[$1 + 4 >> 2] <= 22) {
     HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2] - 18;
     break block;
    }
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2] - 23;
    break block;
   }
   if (HEAPU32[$1 + 4 >> 2] <= 37) {
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2] - 28;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2] - 41;
  }
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvSetCharactersInVar($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[$2 + 4 >> 2] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP16[$2 + 2 >> 1] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & -64;
  block : {
   if (HEAPU32[$2 + 4 >> 2] <= 27) {
    if (HEAPU32[$2 + 4 >> 2] <= 22) {
     $0 = HEAP32[$2 + 12 >> 2];
     $1 = HEAPU16[$2 + 2 >> 1] | HEAP32[$2 + 8 >> 2] + 18;
     HEAP8[$0 + 12 | 0] = $1;
     HEAP8[$0 + 13 | 0] = $1 >>> 8;
     break block;
    }
    $0 = HEAP32[$2 + 12 >> 2];
    $1 = HEAPU16[$2 + 2 >> 1] | HEAP32[$2 + 8 >> 2] + 23;
    HEAP8[$0 + 12 | 0] = $1;
    HEAP8[$0 + 13 | 0] = $1 >>> 8;
    break block;
   }
   block1 : {
    if (HEAPU32[$2 + 4 >> 2] <= 37) {
     $0 = HEAP32[$2 + 12 >> 2];
     $1 = HEAPU16[$2 + 2 >> 1] | HEAP32[$2 + 8 >> 2] + 28;
     HEAP8[$0 + 12 | 0] = $1;
     HEAP8[$0 + 13 | 0] = $1 >>> 8;
     break block1;
    }
    $0 = HEAP32[$2 + 12 >> 2];
    $1 = HEAPU16[$2 + 2 >> 1] | HEAP32[$2 + 8 >> 2] + 41;
    HEAP8[$0 + 12 | 0] = $1;
    HEAP8[$0 + 13 | 0] = $1 >>> 8;
   }
  }
 }
 
 function jsvFreePtrStringExt($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP16[$1 + 10 >> 1] = jsvGetLastChild(HEAP32[$1 + 12 >> 2]);
  if (HEAPU16[$1 + 10 >> 1]) {
   HEAP32[$1 + 4 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 10 >> 1]);
   while (1) {
    $0 = HEAP32[$1 + 4 >> 2];
    HEAP8[$0 + 12 | 0] = 0;
    HEAP8[$0 + 13 | 0] = 0;
    HEAP16[$1 + 10 >> 1] = jsvGetLastChild(HEAP32[$1 + 4 >> 2]);
    if (HEAPU16[$1 + 10 >> 1]) {
     jsvSetNextSibling(HEAP32[$1 + 4 >> 2], HEAPU16[$1 + 10 >> 1]);
     HEAP32[$1 + 4 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 10 >> 1]);
     continue;
    }
    break;
   };
   jshInterruptOff();
   jsvSetNextSibling(HEAP32[$1 + 4 >> 2], HEAPU16[100250]);
   HEAP16[100250] = jsvGetLastChild(HEAP32[$1 + 12 >> 2]);
   HEAP8[200497] = 1;
   jshInterruptOn();
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvFreePtr($0) {
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 28 >> 2] = $0;
  if (!(jsvIsNameWithValue(HEAP32[$1 + 28 >> 2]) & 1)) {
   if (jsvHasSingleChild(HEAP32[$1 + 28 >> 2]) & 1) {
    if (jsvGetFirstChild(HEAP32[$1 + 28 >> 2]) & 65535) {
     if (jsuGetFreeStack() >>> 0 > 256) {
      HEAP32[$1 + 24 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$1 + 28 >> 2]) & 65535);
      jsvUnRef(HEAP32[$1 + 24 >> 2]);
      jsvUnLock(HEAP32[$1 + 24 >> 2]);
     }
    }
   }
  }
  block : {
   if (jsvIsUTF8String(HEAP32[$1 + 28 >> 2]) & 1) {
    jsvUnRefRef(jsvGetLastChild(HEAP32[$1 + 28 >> 2]) & 65535);
    jsvSetLastChild(HEAP32[$1 + 28 >> 2], 0);
    break block;
   }
   block1 : {
    if (jsvHasStringExt(HEAP32[$1 + 28 >> 2]) & 1) {
     jsvFreePtrStringExt(HEAP32[$1 + 28 >> 2]);
     break block1;
    }
    if (jsvIsFlatString(HEAP32[$1 + 28 >> 2]) & 1) {
     HEAP32[$1 + 20 >> 2] = jsvGetFlatStringBlocks(HEAP32[$1 + 28 >> 2]);
     HEAP16[$1 + 18 >> 1] = (jsvGetRef(HEAP32[$1 + 28 >> 2]) & 65535) + HEAP32[$1 + 20 >> 2];
     jshInterruptOff();
     HEAP16[$1 + 16 >> 1] = HEAPU16[100250];
     HEAP16[$1 + 14 >> 1] = 0;
     while (1) {
      $0 = 0;
      $0 = HEAPU16[$1 + 16 >> 1] ? HEAPU16[$1 + 16 >> 1] < HEAPU16[$1 + 18 >> 1] : $0;
      if ($0) {
       HEAP16[$1 + 14 >> 1] = HEAPU16[$1 + 16 >> 1];
       HEAP16[$1 + 16 >> 1] = jsvGetNextSibling(jsvGetAddressOf(HEAPU16[$1 + 16 >> 1]));
       continue;
      }
      break;
     };
     while (1) {
      $0 = HEAP32[$1 + 20 >> 2];
      HEAP32[$1 + 20 >> 2] = $0 - 1;
      if ($0) {
       $0 = HEAPU16[$1 + 18 >> 1];
       HEAP16[$1 + 18 >> 1] = $0 - 1;
       HEAP32[$1 + 8 >> 2] = jsvGetAddressOf($0);
       $0 = HEAP32[$1 + 8 >> 2];
       HEAP8[$0 + 12 | 0] = 0;
       HEAP8[$0 + 13 | 0] = 0;
       jsvSetNextSibling(HEAP32[$1 + 8 >> 2], HEAPU16[$1 + 16 >> 1]);
       HEAP16[$1 + 16 >> 1] = jsvGetRef(HEAP32[$1 + 8 >> 2]);
       continue;
      }
      break;
     };
     block2 : {
      if (HEAPU16[$1 + 14 >> 1]) {
       jsvSetNextSibling(jsvGetAddressOf(HEAPU16[$1 + 14 >> 1]), HEAPU16[$1 + 16 >> 1]);
       break block2;
      }
      HEAP16[100250] = HEAPU16[$1 + 16 >> 1];
     }
     HEAP8[200497] = 1;
     jshInterruptOn();
    }
   }
  }
  block3 : {
   if (jsvHasChildren(HEAP32[$1 + 28 >> 2]) & 1) {
    HEAP16[$1 + 6 >> 1] = jsvGetLastChild(HEAP32[$1 + 28 >> 2]);
    while (1) {
     if (HEAPU16[$1 + 6 >> 1]) {
      HEAP32[$1 >> 2] = jsvLock(HEAPU16[$1 + 6 >> 1]);
      HEAP16[$1 + 6 >> 1] = jsvGetPrevSibling(HEAP32[$1 >> 2]);
      jsvSetPrevSibling(HEAP32[$1 >> 2], 0);
      jsvSetNextSibling(HEAP32[$1 >> 2], 0);
      jsvUnRef(HEAP32[$1 >> 2]);
      jsvUnLock(HEAP32[$1 >> 2]);
      continue;
     }
     break;
    };
    break block3;
   }
   if (jsvIsName(HEAP32[$1 + 28 >> 2]) & 1) {
    if (jsvGetNextSibling(HEAP32[$1 + 28 >> 2]) & 65535) {
     jsvUnRefRef(jsvGetNextSibling(HEAP32[$1 + 28 >> 2]) & 65535);
     jsvUnRefRef(jsvGetPrevSibling(HEAP32[$1 + 28 >> 2]) & 65535);
    }
   }
  }
  jsvFreePtrInternal(HEAP32[$1 + 28 >> 2]);
  __stack_pointer = $1 + 32 | 0;
 }
 
 function jsvUnRef($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP16[$1 + 10 >> 1] = jsvGetRefs(HEAP32[$1 + 12 >> 2]);
  if (HEAPU16[$1 + 10 >> 1] < 255) {
   HEAP16[$1 + 10 >> 1] = HEAPU16[$1 + 10 >> 1] - 1;
   jsvSetRefs(HEAP32[$1 + 12 >> 2], HEAPU16[$1 + 10 >> 1]);
   block : {
    if (HEAPU16[$1 + 10 >> 1]) {
     break block
    }
    if (jsvGetLocks(HEAP32[$1 + 12 >> 2]) & 255) {
     break block
    }
    jsvUnLockFreeIfNeeded(HEAP32[$1 + 12 >> 2]);
   }
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvUnLock($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLockInline(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvUnRefRef($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP16[$1 + 14 >> 1] = $0;
  HEAP32[$1 + 8 >> 2] = jsvLock(HEAPU16[$1 + 14 >> 1]);
  jsvUnRef(HEAP32[$1 + 8 >> 2]);
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return 0;
 }
 
 function jsvGetRef($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP16[$1 + 14 >> 1] = 0;
    break block;
   }
   HEAP16[$1 + 14 >> 1] = ((HEAP32[$1 + 8 >> 2] - 200504 | 0) / 14 | 0) + 1;
  }
  return HEAPU16[$1 + 14 >> 1];
 }
 
 function jsvFreePtrInternal($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP8[$0 + 12 | 0] = 0;
  HEAP8[$0 + 13 | 0] = 0;
  jshInterruptOff();
  jsvSetNextSibling(HEAP32[$1 + 12 >> 2], HEAPU16[100250]);
  HEAP16[100250] = jsvGetRef(HEAP32[$1 + 12 >> 2]);
  HEAP8[200497] = 1;
  jshInterruptOn();
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvUnLockFreeIfNeeded($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  block : {
   if (jsvGetRefs(HEAP32[$1 + 12 >> 2]) & 65535) {
    break block
   }
   if (!(jsvHasRef(HEAP32[$1 + 12 >> 2]) & 1)) {
    break block
   }
   $0 = HEAP32[$1 + 12 >> 2];
   if (!((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63)) {
    break block
   }
   jsvFreePtr(HEAP32[$1 + 12 >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvUnLockInline($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 12 >> 2]) {
    break block
   }
   $0 = HEAP32[$1 + 12 >> 2];
   if (((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 15360) == 15360) {
    break block
   }
   $0 = HEAP32[$1 + 12 >> 2];
   $2 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) - 1024 | 0;
   HEAP8[$0 + 12 | 0] = $2;
   HEAP8[$0 + 13 | 0] = $2 >>> 8;
   HEAP16[$1 + 10 >> 1] = $2;
   if (HEAPU16[$1 + 10 >> 1] & 15360) {
    break block
   }
   jsvUnLockFreeIfNeeded(HEAP32[$1 + 12 >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvLockSafe($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP16[$1 + 10 >> 1] = $0;
  block : {
   if (!HEAPU16[$1 + 10 >> 1]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvLock(HEAPU16[$1 + 10 >> 1]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvLockAgain($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  if (((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 15360) != 15360) {
   $0 = HEAP32[$1 + 12 >> 2];
   $2 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) + 1024 | 0;
   HEAP8[$0 + 12 | 0] = $2;
   HEAP8[$0 + 13 | 0] = $2 >>> 8;
  }
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvLockAgainSafe($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  block : {
   if (HEAP32[$1 + 12 >> 2]) {
    $0 = jsvLockAgain(HEAP32[$1 + 12 >> 2]);
    break block;
   }
   $0 = 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function jsvUnLock2($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  jsvUnLockInline(HEAP32[$2 + 12 >> 2]);
  jsvUnLockInline(HEAP32[$2 + 8 >> 2]);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsvUnLock3($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  jsvUnLockInline(HEAP32[$3 + 12 >> 2]);
  jsvUnLockInline(HEAP32[$3 + 8 >> 2]);
  jsvUnLockInline(HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jsvUnLock4($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
  jsvUnLockInline(HEAP32[$4 + 12 >> 2]);
  jsvUnLockInline(HEAP32[$4 + 8 >> 2]);
  jsvUnLockInline(HEAP32[$4 + 4 >> 2]);
  jsvUnLockInline(HEAP32[$4 >> 2]);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function jsvUnLockMany($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  while (1) {
   if (HEAP32[$2 + 12 >> 2]) {
    $1 = HEAP32[$2 + 8 >> 2];
    $0 = HEAP32[$2 + 12 >> 2] - 1 | 0;
    HEAP32[$2 + 12 >> 2] = $0;
    jsvUnLockInline(HEAP32[($0 << 2) + $1 >> 2]);
    continue;
   }
   break;
  };
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsvHasRef($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jsvIsStringExt(HEAP32[$1 + 12 >> 2]) ^ -1;
  __stack_pointer = $1 + 16 | 0;
  return $0 & 1;
 }
 
 function jsvRefRef($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP16[$1 + 14 >> 1] = $0;
  HEAP32[$1 + 8 >> 2] = jsvLock(HEAPU16[$1 + 14 >> 1]);
  jsvRef(HEAP32[$1 + 8 >> 2]);
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return HEAPU16[$1 + 14 >> 1];
 }
 
 function jsvNewFlatStringOfLength($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 48 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 40 >> 2] = $0;
  HEAP8[$1 + 39 | 0] = 1;
  HEAP32[$1 + 32 >> 2] = ((HEAP32[$1 + 40 >> 2] + 13 >>> 0) / 14 | 0) + 1;
  HEAP32[$1 + 28 >> 2] = 0;
  block : {
   if (HEAPU8[200498]) {
    HEAP8[368518] = HEAPU8[368518] | 32;
    HEAP32[$1 + 44 >> 2] = 0;
    break block;
   }
   while (1) {
    HEAP8[$1 + 27 | 0] = 1;
    while (1) {
     if (HEAP8[$1 + 27 | 0] & 1) {
      HEAP8[$1 + 27 | 0] = 0;
      HEAP8[200497] = 0;
      HEAP16[$1 + 24 >> 1] = 0;
      HEAP16[$1 + 22 >> 1] = HEAPU16[100250];
      HEAP16[$1 + 20 >> 1] = HEAPU16[$1 + 22 >> 1];
      HEAP32[$1 + 16 >> 2] = 0;
      while (1) {
       $0 = 0;
       block1 : {
        $0 = HEAPU16[$1 + 22 >> 1] ? HEAPU8[200497] ^ -1 : $0;
        if (!($0 & 1)) {
         break block1
        }
        HEAP32[$1 + 12 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 22 >> 1]);
        HEAP16[$1 + 10 >> 1] = jsvGetNextSibling(HEAP32[$1 + 12 >> 2]);
        block4 : {
         if (!(!HEAP32[$1 + 16 >> 2] | HEAPU16[$1 + 10 >> 1] != (HEAPU16[$1 + 22 >> 1] + 1 | 0))) {
          HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 16 >> 2] + 1;
          if (HEAPU32[$1 + 16 >> 2] >= HEAPU32[$1 + 32 >> 2]) {
           HEAP32[$1 + 4 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 10 >> 1]);
           HEAP16[$1 + 2 >> 1] = jsvGetNextSibling(HEAP32[$1 + 4 >> 2]);
           jshInterruptOff();
           if (!(HEAP8[200497] & 1)) {
            block3 : {
             if (HEAPU16[$1 + 24 >> 1]) {
              jsvSetNextSibling(jsvGetAddressOf(HEAPU16[$1 + 24 >> 1]), HEAPU16[$1 + 2 >> 1]);
              break block3;
             }
             HEAP16[100250] = HEAPU16[$1 + 2 >> 1];
            }
            HEAP32[$1 + 28 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 20 >> 1]);
            jsvResetVariable(HEAP32[$1 + 28 >> 2], 38);
            $0 = HEAP32[$1 + 28 >> 2];
            $2 = HEAP32[$1 + 40 >> 2];
            HEAP8[$0 | 0] = $2;
            HEAP8[$0 + 1 | 0] = $2 >>> 8;
            HEAP8[$0 + 2 | 0] = $2 >>> 16;
            HEAP8[$0 + 3 | 0] = $2 >>> 24;
           }
           jshInterruptOn();
           if (HEAP32[$1 + 28 >> 2]) {
            break block1
           }
          }
          break block4;
         }
         HEAP16[$1 + 24 >> 1] = HEAPU16[$1 + 22 >> 1];
         HEAP16[$1 + 20 >> 1] = HEAPU16[$1 + 10 >> 1];
         block6 : {
          block5 : {
           if (HEAPU16[$1 + 20 >> 1] != 12e3) {
            if (!(jsvGetAddressOf(HEAPU16[$1 + 20 >> 1] + 1 & 65535) & 3)) {
             break block5
            }
           }
           HEAP32[$1 + 16 >> 2] = 0;
           break block6;
          }
          HEAP32[$1 + 16 >> 2] = 1;
         }
        }
        HEAP16[$1 + 22 >> 1] = HEAPU16[$1 + 10 >> 1];
        continue;
       }
       break;
      };
      if (HEAP8[200497] & 1) {
       HEAP8[$1 + 27 | 0] = 1
      }
      continue;
     }
     break;
    };
    if (!(HEAP32[$1 + 28 >> 2] | !(HEAP8[$1 + 39 | 0] & 1))) {
     HEAP8[$1 + 39 | 0] = 0;
     jsvGarbageCollect();
     continue;
    }
    break;
   };
   if (!HEAP32[$1 + 28 >> 2]) {
    HEAP32[$1 + 44 >> 2] = 0;
    break block;
   }
   $2 = HEAP32[$1 + 28 >> 2];
   $0 = Math_imul(HEAP32[$1 + 32 >> 2] - 1 | 0, 14);
   if ($0) {
    wasm2js_memory_fill($2 + 14 | 0, 0, $0)
   }
   HEAP8[200497] = 1;
   HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 28 >> 2];
  }
  __stack_pointer = $1 + 48 | 0;
  return HEAP32[$1 + 44 >> 2];
 }
 
 function jsvNewFromString($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jsvNewNameOrString(HEAP32[$1 + 12 >> 2], 0);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function jsvNewNameOrString($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP8[$2 + 23 | 0] = $1;
  HEAP32[$2 + 16 >> 2] = jsvNewWithFlags(HEAP8[$2 + 23 | 0] & 1 ? 23 : 28);
  block : {
   if (!HEAP32[$2 + 16 >> 2]) {
    HEAP32[$2 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 12 >> 2] = jsvLockAgain(HEAP32[$2 + 16 >> 2]);
   while (1) {
    if (HEAPU8[HEAP32[$2 + 24 >> 2]]) {
     HEAP32[$2 + 4 >> 2] = jsvGetMaxCharactersInVar(HEAP32[$2 + 12 >> 2]);
     HEAP32[$2 + 8 >> 2] = 0;
     while (1) {
      $0 = 0;
      $0 = HEAPU32[$2 + 8 >> 2] < HEAPU32[$2 + 4 >> 2] ? HEAPU8[HEAP32[$2 + 24 >> 2]] != 0 : $0;
      if ($0) {
       $0 = HEAP32[$2 + 24 >> 2];
       HEAP32[$2 + 24 >> 2] = $0 + 1;
       HEAP8[HEAP32[$2 + 12 >> 2] + HEAP32[$2 + 8 >> 2] | 0] = HEAPU8[$0 | 0];
       HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 1;
       continue;
      }
      break;
     };
     jsvSetCharactersInVar(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
     if (HEAPU8[HEAP32[$2 + 24 >> 2]]) {
      HEAP32[$2 >> 2] = jsvNewWithFlags(41);
      if (!HEAP32[$2 >> 2]) {
       jsvUnLock(HEAP32[$2 + 12 >> 2]);
       HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
       break block;
      }
      jsvSetLastChild(HEAP32[$2 + 12 >> 2], jsvGetRef(HEAP32[$2 >> 2]) & 65535);
      jsvUnLock(HEAP32[$2 + 12 >> 2]);
      HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
     }
     continue;
    }
    break;
   };
   jsvUnLock(HEAP32[$2 + 12 >> 2]);
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jsvNewNameFromString($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jsvNewNameOrString(HEAP32[$1 + 12 >> 2], 1);
  __stack_pointer = $1 + 16 | 0;
  return $0;
 }
 
 function jsvNewStringOfLength($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  block : {
   if (HEAPU32[$2 + 24 >> 2] > 19) {
    HEAP32[$2 + 16 >> 2] = jsvNewFlatStringOfLength(HEAP32[$2 + 24 >> 2]);
    if (HEAP32[$2 + 16 >> 2]) {
     if (HEAP32[$2 + 20 >> 2]) {
      jsvSetString(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 24 >> 2])
     }
     HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
     break block;
    }
   }
   HEAP32[$2 + 12 >> 2] = jsvNewWithFlags(28);
   if (!HEAP32[$2 + 12 >> 2]) {
    HEAP32[$2 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 8 >> 2] = jsvLockAgain(HEAP32[$2 + 12 >> 2]);
   while (1) {
    block1 : {
     HEAP32[$2 + 4 >> 2] = jsvGetMaxCharactersInVar(HEAP32[$2 + 8 >> 2]);
     if (HEAPU32[$2 + 4 >> 2] >= HEAPU32[$2 + 24 >> 2]) {
      if (HEAP32[$2 + 20 >> 2]) {
       $1 = HEAP32[$2 + 8 >> 2];
       $3 = HEAP32[$2 + 20 >> 2];
       $0 = HEAP32[$2 + 24 >> 2];
       if ($0) {
        wasm2js_memory_copy($1, $3, $0)
       }
      }
      jsvSetCharactersInVar(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 24 >> 2]);
      break block1;
     }
     if (HEAP32[$2 + 20 >> 2]) {
      $1 = HEAP32[$2 + 8 >> 2];
      $3 = HEAP32[$2 + 20 >> 2];
      $0 = HEAP32[$2 + 4 >> 2];
      if ($0) {
       wasm2js_memory_copy($1, $3, $0)
      }
      HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 4 >> 2] + HEAP32[$2 + 20 >> 2];
     }
     jsvSetCharactersInVar(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
     HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 24 >> 2] - HEAP32[$2 + 4 >> 2];
     HEAP32[$2 >> 2] = jsvNewWithFlags(41);
     if (!HEAP32[$2 >> 2]) {
      break block1
     }
     jsvSetLastChild(HEAP32[$2 + 8 >> 2], jsvGetRef(HEAP32[$2 >> 2]) & 65535);
     jsvUnLock(HEAP32[$2 + 8 >> 2]);
     HEAP32[$2 + 8 >> 2] = HEAP32[$2 >> 2];
     continue;
    }
    break;
   };
   jsvUnLock(HEAP32[$2 + 8 >> 2]);
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jsvSetString($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer + -64 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 60 >> 2] = $0;
  HEAP32[$3 + 56 >> 2] = $1;
  HEAP32[$3 + 52 >> 2] = $2;
  jsvStringIteratorNew($3 + 16 | 0, HEAP32[$3 + 60 >> 2], 0);
  HEAP32[$3 + 12 >> 2] = 0;
  while (1) {
   if (HEAPU32[$3 + 12 >> 2] < HEAPU32[$3 + 52 >> 2]) {
    jsvStringIteratorSetCharAndNext($3 + 16 | 0, HEAP8[HEAP32[$3 + 56 >> 2] + HEAP32[$3 + 12 >> 2] | 0] << 24 >> 24);
    HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
    continue;
   }
   break;
  };
  jsvStringIteratorFree_161($3 + 16 | 0);
  __stack_pointer = $3 - -64 | 0;
 }
 
 function jsvStringIteratorFree_161($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvNewFromInteger($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = jsvNewWithFlags(10);
  block : {
   if (!HEAP32[$1 + 4 >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   $0 = HEAP32[$1 + 4 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   HEAP8[$0 | 0] = $2;
   HEAP8[$0 + 1 | 0] = $2 >>> 8;
   HEAP8[$0 + 2 | 0] = $2 >>> 16;
   HEAP8[$0 + 3 | 0] = $2 >>> 24;
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvNewFromBool($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 11 | 0] = $0;
  HEAP32[$1 + 4 >> 2] = jsvNewWithFlags(12);
  block : {
   if (!HEAP32[$1 + 4 >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   $0 = HEAP32[$1 + 4 >> 2];
   $2 = HEAP8[$1 + 11 | 0] & 1;
   HEAP8[$0 | 0] = $2;
   HEAP8[$0 + 1 | 0] = $2 >>> 8;
   HEAP8[$0 + 2 | 0] = $2 >>> 16;
   HEAP8[$0 + 3 | 0] = $2 >>> 24;
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvNewFromFloat($0) {
  $0 = +$0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAPF64[$1 + 16 >> 3] = $0;
  HEAP32[$1 + 12 >> 2] = jsvNewWithFlags(11);
  block : {
   if (!HEAP32[$1 + 12 >> 2]) {
    HEAP32[$1 + 28 >> 2] = 0;
    break block;
   }
   $2 = HEAP32[$1 + 12 >> 2];
   wasm2js_scratch_store_f64(+HEAPF64[$1 + 16 >> 3]);
   $3 = wasm2js_scratch_load_i32(1) | 0;
   $4 = wasm2js_scratch_load_i32(0) | 0;
   HEAP8[$2 | 0] = $4;
   HEAP8[$2 + 1 | 0] = $4 >>> 8;
   HEAP8[$2 + 2 | 0] = $4 >>> 16;
   HEAP8[$2 + 3 | 0] = $4 >>> 24;
   HEAP8[$2 + 4 | 0] = $3;
   HEAP8[$2 + 5 | 0] = $3 >>> 8;
   HEAP8[$2 + 6 | 0] = $3 >>> 16;
   HEAP8[$2 + 7 | 0] = $3 >>> 24;
   HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 12 >> 2];
  }
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 28 >> 2];
 }
 
 function jsvNewFromLongInteger($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  $1 = HEAP32[$2 >> 2];
  block1 : {
   block : {
    $0 = HEAP32[$2 + 4 >> 2];
    if (($0 | 0) < -1) {
     $0 = 1
    } else {
     $0 = ($0 | 0) < 0 & $1 >>> 0 < 2147483648
    }
    if ($0) {
     break block
    }
    $1 = HEAP32[$2 >> 2];
    $0 = HEAP32[$2 + 4 >> 2];
    if (($0 | 0) > 0) {
     $0 = 1
    } else {
     $0 = $1 >>> 0 > 2147483647 & ($0 | 0) >= 0
    }
    if ($0) {
     break block
    }
    $1 = HEAP32[$2 >> 2];
    HEAP32[$2 + 12 >> 2] = jsvNewFromInteger($1);
    break block1;
   }
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   HEAP32[$2 + 12 >> 2] = jsvNewFromFloat(+($0 >>> 0) + +($1 | 0) * 4294967296.0);
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function jsvNewFromPin($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = jsvNewFromInteger(HEAP32[$1 + 12 >> 2]);
  if (HEAP32[$1 + 8 >> 2]) {
   $0 = HEAP32[$1 + 8 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $2 = (HEAPU8[$2 + 12 | 0] | HEAPU8[$2 + 13 | 0] << 8) & -64 | 13;
   HEAP8[$0 + 12 | 0] = $2;
   HEAP8[$0 + 13 | 0] = $2 >>> 8;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 8 >> 2];
 }
 
 function jsvNewObject() {
  return jsvNewWithFlags(5);
 }
 
 function jsvNewEmptyArray() {
  return jsvNewWithFlags(3);
 }
 
 function jsvNewArray($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  HEAP32[$2 + 16 >> 2] = jsvNewEmptyArray();
  block : {
   if (!HEAP32[$2 + 16 >> 2]) {
    HEAP32[$2 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 12 >> 2] = 0;
   while (1) {
    if (HEAP32[$2 + 12 >> 2] < HEAP32[$2 + 20 >> 2]) {
     jsvArrayPush(HEAP32[$2 + 16 >> 2], HEAP32[HEAP32[$2 + 24 >> 2] + (HEAP32[$2 + 12 >> 2] << 2) >> 2]);
     HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
     continue;
    }
    break;
   };
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jsvArrayPush($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  HEAP32[$2 + 16 >> 2] = jsvGetArrayLength(HEAP32[$2 + 24 >> 2]);
  HEAP32[$2 + 12 >> 2] = jsvMakeIntoVariableName(jsvNewFromInteger(HEAP32[$2 + 16 >> 2]), HEAP32[$2 + 20 >> 2]);
  block : {
   if (!HEAP32[$2 + 12 >> 2]) {
    HEAP32[$2 + 28 >> 2] = 0;
    break block;
   }
   jsvAddName(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 12 >> 2]);
   jsvUnLock(HEAP32[$2 + 12 >> 2]);
   HEAP32[$2 + 28 >> 2] = jsvGetArrayLength(HEAP32[$2 + 24 >> 2]);
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jsvGetArrayLength($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP32[$1 + 12 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
  }
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvMakeIntoVariableName($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 112 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 104 >> 2] = $0;
  HEAP32[$2 + 100 >> 2] = $1;
  block : {
   if (!HEAP32[$2 + 104 >> 2]) {
    HEAP32[$2 + 108 >> 2] = 0;
    break block;
   }
   $0 = HEAP32[$2 + 104 >> 2];
   HEAP16[$2 + 98 >> 1] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   block3 : {
    if (HEAPU16[$2 + 98 >> 1] == 10) {
     HEAP32[$2 + 92 >> 2] = 15;
     block1 : {
      if (!(jsvIsInt(HEAP32[$2 + 100 >> 2]) & 1)) {
       if (!(jsvIsBoolean(HEAP32[$2 + 100 >> 2]) & 1)) {
        break block1
       }
      }
      if (jsvIsPin(HEAP32[$2 + 100 >> 2]) & 1) {
       break block1
      }
      $0 = HEAP32[$2 + 100 >> 2];
      HEAP32[$2 + 88 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
      if (!(HEAP32[$2 + 88 >> 2] < -8192 | HEAP32[$2 + 88 >> 2] > 8191)) {
       HEAP32[$2 + 92 >> 2] = jsvIsInt(HEAP32[$2 + 100 >> 2]) & 1 ? 16 : 17;
       jsvSetFirstChild(HEAP32[$2 + 104 >> 2], HEAP32[$2 + 88 >> 2] & 65535);
       HEAP32[$2 + 100 >> 2] = 0;
      }
     }
     $0 = HEAP32[$2 + 104 >> 2];
     $1 = HEAP32[$2 + 104 >> 2];
     $1 = HEAP32[$2 + 92 >> 2] | (HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & -64;
     HEAP8[$0 + 12 | 0] = $1;
     HEAP8[$0 + 13 | 0] = $1 >>> 8;
     break block3;
    }
    if (!(HEAPU16[$2 + 98 >> 1] < 18 | HEAPU16[$2 + 98 >> 1] > 40)) {
     block7 : {
      if (!(!(HEAPU16[$2 + 98 >> 1] == 38 | HEAPU16[$2 + 98 >> 1] == 39) & HEAPU16[$2 + 98 >> 1] != 40)) {
       HEAP32[$2 + 84 >> 2] = jsvNewWithFlags(23);
       jsvAppendStringVarComplete(HEAP32[$2 + 84 >> 2], HEAP32[$2 + 104 >> 2]);
       jsvUnLock(HEAP32[$2 + 104 >> 2]);
       HEAP32[$2 + 104 >> 2] = HEAP32[$2 + 84 >> 2];
       break block7;
      }
      if (jsvGetCharactersInVar(HEAP32[$2 + 104 >> 2]) >>> 0 > 4) {
       jsvStringIteratorNew($2 + 48 | 0, HEAP32[$2 + 104 >> 2], 4);
       HEAP32[$2 + 36 >> 2] = 0;
       while (1) {
        $0 = 0;
        if (HEAP32[$2 + 36 >> 2] < 5) {
         $0 = jsvStringIteratorHasChar_180($2 + 48 | 0)
        }
        if ($0 & 1) {
         $0 = jsvStringIteratorGetCharAndNext($2 + 48 | 0);
         HEAP8[HEAP32[$2 + 36 >> 2] + ($2 + 43 | 0) | 0] = $0;
         HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 36 >> 2] + 1;
         continue;
        }
        break;
       };
       jsvStringIteratorFree_161($2 + 48 | 0);
       HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 104 >> 2];
       while (1) {
        if (jsvGetLastChild(HEAP32[$2 + 32 >> 2]) & 65535) {
         HEAP32[$2 + 32 >> 2] = jsvGetAddressOf(jsvGetLastChild(HEAP32[$2 + 32 >> 2]) & 65535);
         continue;
        }
        break;
       };
       if (HEAP32[$2 + 32 >> 2] != HEAP32[$2 + 104 >> 2]) {
        HEAP32[$2 + 28 >> 2] = jsvGetCharactersInVar(HEAP32[$2 + 32 >> 2]) + HEAP32[$2 + 36 >> 2];
        block8 : {
         if (HEAP32[$2 + 28 >> 2] <= 10) {
          jsvSetCharactersInVar(HEAP32[$2 + 32 >> 2], HEAP32[$2 + 28 >> 2]);
          HEAP32[$2 + 32 >> 2] = 0;
          break block8;
         }
         HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 28 >> 2] - 10;
        }
       }
       if (HEAP32[$2 + 32 >> 2]) {
        jsvSetCharactersInVar(HEAP32[$2 + 32 >> 2], jsvGetMaxCharactersInVar(HEAP32[$2 + 32 >> 2]));
        HEAP32[$2 + 24 >> 2] = jsvNewWithFlags(41);
        if (HEAP32[$2 + 24 >> 2]) {
         jsvSetCharactersInVar(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 36 >> 2]);
         jsvSetLastChild(HEAP32[$2 + 32 >> 2], jsvGetRef(HEAP32[$2 + 24 >> 2]) & 65535);
         jsvUnLock(HEAP32[$2 + 24 >> 2]);
        }
       }
       jsvStringIteratorNew($2 + 48 | 0, HEAP32[$2 + 104 >> 2], 9);
       HEAP32[$2 + 36 >> 2] = 0;
       while (1) {
        if (jsvStringIteratorHasChar_180($2 + 48 | 0) & 1) {
         HEAP8[$2 + 23 | 0] = jsvStringIteratorGetChar_182($2 + 48 | 0);
         jsvStringIteratorSetChar($2 + 48 | 0, HEAP8[HEAP32[$2 + 36 >> 2] + ($2 + 43 | 0) | 0] << 24 >> 24);
         HEAP8[HEAP32[$2 + 36 >> 2] + ($2 + 43 | 0) | 0] = HEAPU8[$2 + 23 | 0];
         jsvStringIteratorNext($2 + 48 | 0);
         HEAP32[$2 + 36 >> 2] = (HEAP32[$2 + 36 >> 2] + 1 | 0) % 5;
         continue;
        }
        break;
       };
       jsvStringIteratorFree_161($2 + 48 | 0);
       jsvSetCharactersInVar(HEAP32[$2 + 104 >> 2], 4);
       jsvSetNextSibling(HEAP32[$2 + 104 >> 2], 0);
       jsvSetPrevSibling(HEAP32[$2 + 104 >> 2], 0);
       jsvSetFirstChild(HEAP32[$2 + 104 >> 2], 0);
      }
     }
     HEAP32[$2 + 16 >> 2] = 23;
     block11 : {
      block9 : {
       if (!(jsvIsInt(HEAP32[$2 + 100 >> 2]) & 1)) {
        break block9
       }
       if (jsvIsPin(HEAP32[$2 + 100 >> 2]) & 1) {
        break block9
       }
       $0 = HEAP32[$2 + 100 >> 2];
       HEAP32[$2 + 12 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
       if (!(HEAP32[$2 + 12 >> 2] < -8192 | HEAP32[$2 + 12 >> 2] > 8191)) {
        HEAP32[$2 + 16 >> 2] = 18;
        jsvSetFirstChild(HEAP32[$2 + 104 >> 2], HEAP32[$2 + 12 >> 2] & 65535);
        HEAP32[$2 + 100 >> 2] = 0;
       }
       break block11;
      }
      jsvSetFirstChild(HEAP32[$2 + 104 >> 2], 0);
     }
     $0 = HEAP32[$2 + 104 >> 2];
     $1 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 65472;
     $3 = HEAP32[$2 + 16 >> 2] + jsvGetCharactersInVar(HEAP32[$2 + 104 >> 2]) | 0;
     $0 = HEAP32[$2 + 104 >> 2];
     $1 = $1 | $3;
     HEAP8[$0 + 12 | 0] = $1;
     HEAP8[$0 + 13 | 0] = $1 >>> 8;
    }
   }
   if (HEAP32[$2 + 100 >> 2]) {
    jsvSetFirstChild(HEAP32[$2 + 104 >> 2], jsvGetRef(jsvRef(HEAP32[$2 + 100 >> 2])) & 65535)
   }
   HEAP32[$2 + 108 >> 2] = HEAP32[$2 + 104 >> 2];
  }
  __stack_pointer = $2 + 112 | 0;
  return HEAP32[$2 + 108 >> 2];
 }
 
 function jsvAddName($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  HEAP32[$2 + 24 >> 2] = jsvRef(HEAP32[$2 + 24 >> 2]);
  block : {
   if (!(jsvIsArray(HEAP32[$2 + 28 >> 2]) & 1)) {
    break block
   }
   if (!(jsvIsInt(HEAP32[$2 + 24 >> 2]) & 1)) {
    break block
   }
   $0 = HEAP32[$2 + 24 >> 2];
   HEAP32[$2 + 20 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
   if (HEAP32[$2 + 20 >> 2] >= (jsvGetArrayLength(HEAP32[$2 + 28 >> 2]) | 0)) {
    jsvSetArrayLength(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 20 >> 2] + 1 | 0, 0)
   }
  }
  block3 : {
   if (jsvGetLastChild(HEAP32[$2 + 28 >> 2]) & 65535) {
    HEAP32[$2 + 16 >> 2] = jsvLock(jsvGetLastChild(HEAP32[$2 + 28 >> 2]) & 65535);
    if (jsvIsArray(HEAP32[$2 + 28 >> 2]) & 1) {
     while (1) {
      $0 = 0;
      if (HEAP32[$2 + 16 >> 2]) {
       $0 = (jsvCompareInteger(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 16 >> 2]) | 0) < 0
      }
      if ($0) {
       HEAP16[$2 + 14 >> 1] = jsvGetPrevSibling(HEAP32[$2 + 16 >> 2]);
       jsvUnLock(HEAP32[$2 + 16 >> 2]);
       HEAP32[$2 + 16 >> 2] = jsvLockSafe(HEAPU16[$2 + 14 >> 1]);
       continue;
      }
      break;
     }
    }
    block2 : {
     if (HEAP32[$2 + 16 >> 2]) {
      block1 : {
       if (jsvGetNextSibling(HEAP32[$2 + 16 >> 2]) & 65535) {
        HEAP32[$2 + 8 >> 2] = jsvLock(jsvGetNextSibling(HEAP32[$2 + 16 >> 2]) & 65535);
        jsvSetPrevSibling(HEAP32[$2 + 8 >> 2], jsvGetRef(HEAP32[$2 + 24 >> 2]) & 65535);
        jsvSetNextSibling(HEAP32[$2 + 24 >> 2], jsvGetRef(HEAP32[$2 + 8 >> 2]) & 65535);
        jsvUnLock(HEAP32[$2 + 8 >> 2]);
        break block1;
       }
       jsvSetLastChild(HEAP32[$2 + 28 >> 2], jsvGetRef(HEAP32[$2 + 24 >> 2]) & 65535);
      }
      jsvSetNextSibling(HEAP32[$2 + 16 >> 2], jsvGetRef(HEAP32[$2 + 24 >> 2]) & 65535);
      jsvSetPrevSibling(HEAP32[$2 + 24 >> 2], jsvGetRef(HEAP32[$2 + 16 >> 2]) & 65535);
      jsvUnLock(HEAP32[$2 + 16 >> 2]);
      break block2;
     }
     HEAP32[$2 + 4 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$2 + 28 >> 2]) & 65535);
     jsvSetPrevSibling(HEAP32[$2 + 4 >> 2], jsvGetRef(HEAP32[$2 + 24 >> 2]) & 65535);
     jsvUnLock(HEAP32[$2 + 4 >> 2]);
     jsvSetNextSibling(HEAP32[$2 + 24 >> 2], jsvGetFirstChild(HEAP32[$2 + 28 >> 2]) & 65535);
     jsvSetFirstChild(HEAP32[$2 + 28 >> 2], jsvGetRef(HEAP32[$2 + 24 >> 2]) & 65535);
    }
    break block3;
   }
   HEAP16[$2 + 2 >> 1] = jsvGetRef(HEAP32[$2 + 24 >> 2]);
   jsvSetFirstChild(HEAP32[$2 + 28 >> 2], HEAPU16[$2 + 2 >> 1]);
   jsvSetLastChild(HEAP32[$2 + 28 >> 2], HEAPU16[$2 + 2 >> 1]);
  }
  __stack_pointer = $2 + 32 | 0;
 }
 
 function jsvArrayPushAndUnLock($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = jsvArrayPush(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
  jsvUnLock(HEAP32[$2 + 8 >> 2]);
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 4 >> 2];
 }
 
 function jsvNewNativeFunction($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP16[$2 + 6 >> 1] = $1;
  HEAP32[$2 >> 2] = jsvNewWithFlags(8);
  block : {
   if (!HEAP32[$2 >> 2]) {
    HEAP32[$2 + 12 >> 2] = 0;
    break block;
   }
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 8 >> 2];
   HEAP8[$0 | 0] = $1;
   HEAP8[$0 + 1 | 0] = $1 >>> 8;
   HEAP8[$0 + 2 | 0] = $1 >>> 16;
   HEAP8[$0 + 3 | 0] = $1 >>> 24;
   $0 = HEAP32[$2 >> 2];
   $1 = HEAPU16[$2 + 6 >> 1];
   HEAP8[$0 + 4 | 0] = $1;
   HEAP8[$0 + 5 | 0] = $1 >>> 8;
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function jsvNewNativeString($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 >> 2] = jsvNewWithFlags(39);
  block : {
   if (!HEAP32[$2 >> 2]) {
    HEAP32[$2 + 12 >> 2] = 0;
    break block;
   }
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 8 >> 2];
   HEAP8[$0 | 0] = $1;
   HEAP8[$0 + 1 | 0] = $1 >>> 8;
   HEAP8[$0 + 2 | 0] = $1 >>> 16;
   HEAP8[$0 + 3 | 0] = $1 >>> 24;
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   HEAP8[$0 + 4 | 0] = $1;
   HEAP8[$0 + 5 | 0] = $1 >>> 8;
   HEAP8[$0 + 6 | 0] = $1 >>> 16;
   HEAP8[$0 + 7 | 0] = $1 >>> 24;
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function jsvNewFlashString($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 >> 2] = jsvNewWithFlags(40);
  block : {
   if (!HEAP32[$2 >> 2]) {
    HEAP32[$2 + 12 >> 2] = 0;
    break block;
   }
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 8 >> 2];
   HEAP8[$0 | 0] = $1;
   HEAP8[$0 + 1 | 0] = $1 >>> 8;
   HEAP8[$0 + 2 | 0] = $1 >>> 16;
   HEAP8[$0 + 3 | 0] = $1 >>> 24;
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   HEAP8[$0 + 4 | 0] = $1;
   HEAP8[$0 + 5 | 0] = $1 >>> 8;
   HEAP8[$0 + 6 | 0] = $1 >>> 16;
   HEAP8[$0 + 7 | 0] = $1 >>> 24;
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function jsvNewArrayBufferFromString($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 >> 2] = jsvNewWithFlags(4);
  block : {
   if (!HEAP32[$2 >> 2]) {
    HEAP32[$2 + 12 >> 2] = 0;
    break block;
   }
   jsvSetFirstChild(HEAP32[$2 >> 2], jsvGetRef(jsvRef(HEAP32[$2 + 8 >> 2])) & 65535);
   HEAP8[HEAP32[$2 >> 2] + 5 | 0] = 129;
   if (!HEAP32[$2 + 4 >> 2]) {
    HEAP32[$2 + 4 >> 2] = jsvGetStringLength(HEAP32[$2 + 8 >> 2])
   }
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   HEAP8[$0 + 2 | 0] = $1;
   HEAP8[$0 + 3 | 0] = $1 >>> 8;
   HEAP8[$0 + 4 | 0] = $1 >>> 16;
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function jsvGetStringLength($0) {
  var $1 = 0;
  $1 = __stack_pointer + -64 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 56 >> 2] = $0;
  HEAP32[$1 + 52 >> 2] = 0;
  block : {
   if (jsvIsUTF8String(HEAP32[$1 + 56 >> 2]) & 1) {
    jsvStringIteratorNew($1 + 16 | 0, HEAP32[$1 + 56 >> 2], 0);
    while (1) {
     if (jsvStringIteratorHasChar_180($1 + 16 | 0) & 1) {
      jsvStringIteratorNextUTF8($1 + 16 | 0);
      HEAP32[$1 + 52 >> 2] = HEAP32[$1 + 52 >> 2] + 1;
      continue;
     }
     break;
    };
    jsvStringIteratorFree_161($1 + 16 | 0);
    HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 52 >> 2];
    break block;
   }
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 56 >> 2];
   HEAP32[$1 + 8 >> 2] = 0;
   if (!(jsvHasCharacterData(HEAP32[$1 + 56 >> 2]) & 1)) {
    HEAP32[$1 + 60 >> 2] = 0;
    break block;
   }
   while (1) {
    if (HEAP32[$1 + 12 >> 2]) {
     HEAP16[$1 + 6 >> 1] = jsvGetLastChild(HEAP32[$1 + 12 >> 2]);
     HEAP32[$1 + 52 >> 2] = jsvGetCharactersInVar(HEAP32[$1 + 12 >> 2]) + HEAP32[$1 + 52 >> 2];
     jsvUnLock(HEAP32[$1 + 8 >> 2]);
     $0 = jsvLockSafe(HEAPU16[$1 + 6 >> 1]);
     HEAP32[$1 + 8 >> 2] = $0;
     HEAP32[$1 + 12 >> 2] = $0;
     continue;
    }
    break;
   };
   jsvUnLock(HEAP32[$1 + 8 >> 2]);
   HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 52 >> 2];
  }
  __stack_pointer = $1 - -64 | 0;
  return HEAP32[$1 + 60 >> 2];
 }
 
 function jsvStringIteratorHasChar_180($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
 }
 
 function jsvAppendStringVarComplete($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  jsvAppendStringVar(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0, 2147483647);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsvStringIteratorGetChar_182($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   HEAP8[$1 + 15 | 0] = HEAPU8[HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] + HEAP32[HEAP32[$1 + 8 >> 2] >> 2] | 0];
  }
  return HEAP8[$1 + 15 | 0] << 24 >> 24;
 }
 
 function jsvAppendStringVar($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 96 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 92 >> 2] = $0;
  HEAP32[$4 + 88 >> 2] = $1;
  HEAP32[$4 + 84 >> 2] = $2;
  HEAP32[$4 + 80 >> 2] = $3;
  jsvStringIteratorNew($4 + 44 | 0, HEAP32[$4 + 92 >> 2], 0);
  jsvStringIteratorGotoEnd($4 + 44 | 0);
  jsvStringIteratorNew($4 + 8 | 0, HEAP32[$4 + 88 >> 2], HEAP32[$4 + 84 >> 2]);
  while (1) {
   $0 = 0;
   if (jsvStringIteratorHasChar_180($4 + 8 | 0) & 1) {
    $0 = HEAP32[$4 + 80 >> 2];
    HEAP32[$4 + 80 >> 2] = $0 - 1;
    $0 = ($0 | 0) != 0;
   }
   if ($0) {
    HEAP8[$4 + 7 | 0] = jsvStringIteratorGetCharAndNext($4 + 8 | 0);
    jsvStringIteratorAppend($4 + 44 | 0, HEAP8[$4 + 7 | 0] << 24 >> 24);
    continue;
   }
   break;
  };
  jsvStringIteratorFree_161($4 + 8 | 0);
  jsvStringIteratorFree_161($4 + 44 | 0);
  __stack_pointer = $4 + 96 | 0;
 }
 
 function jsvMakeFunctionParameter($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  if (!(jsvIsName(HEAP32[$1 + 12 >> 2]) & 1)) {
   HEAP32[$1 + 12 >> 2] = jsvMakeIntoVariableName(HEAP32[$1 + 12 >> 2], 0)
  }
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = HEAP32[$1 + 12 >> 2];
  $2 = HEAPU8[$2 + 12 | 0] | HEAPU8[$2 + 13 | 0] << 8 | 128;
  HEAP8[$0 + 12 | 0] = $2;
  HEAP8[$0 + 13 | 0] = $2 >>> 8;
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvAddFunctionParameter($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  if (!HEAP32[$3 + 8 >> 2]) {
   HEAP32[$3 + 8 >> 2] = jsvNewFromEmptyString_186()
  }
  if (HEAP32[$3 + 8 >> 2]) {
   HEAP32[$3 + 8 >> 2] = jsvMakeFunctionParameter(HEAP32[$3 + 8 >> 2]);
   jsvSetValueOfName(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
   jsvAddName(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
   jsvUnLock(HEAP32[$3 + 8 >> 2]);
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jsvNewFromEmptyString_186() {
  return jsvNewWithFlags(28);
 }
 
 function jsvSetValueOfName($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  block1 : {
   if (jsvIsNameWithValue(HEAP32[$2 + 24 >> 2]) & 1) {
    block : {
     if (jsvIsString(HEAP32[$2 + 24 >> 2]) & 1) {
      $0 = HEAP32[$2 + 24 >> 2];
      $1 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 65472;
      $3 = jsvGetCharactersInVar(HEAP32[$2 + 24 >> 2]) + 23 | 0;
      $0 = HEAP32[$2 + 24 >> 2];
      $1 = $1 | $3;
      HEAP8[$0 + 12 | 0] = $1;
      HEAP8[$0 + 13 | 0] = $1 >>> 8;
      break block;
     }
     $0 = HEAP32[$2 + 24 >> 2];
     $1 = HEAP32[$2 + 24 >> 2];
     $1 = (HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & 65472 | 15;
     HEAP8[$0 + 12 | 0] = $1;
     HEAP8[$0 + 13 | 0] = $1 >>> 8;
    }
    jsvSetFirstChild(HEAP32[$2 + 24 >> 2], 0);
    break block1;
   }
   if (jsvGetFirstChild(HEAP32[$2 + 24 >> 2]) & 65535) {
    jsvUnRefRef(jsvGetFirstChild(HEAP32[$2 + 24 >> 2]) & 65535)
   }
  }
  block4 : {
   if (HEAP32[$2 + 20 >> 2]) {
    block2 : {
     if (jsvIsInt(HEAP32[$2 + 24 >> 2]) & 1) {
      if (!(jsvIsInt(HEAP32[$2 + 20 >> 2]) & 1)) {
       if (!(jsvIsBoolean(HEAP32[$2 + 20 >> 2]) & 1)) {
        break block2
       }
      }
      if (jsvIsPin(HEAP32[$2 + 20 >> 2]) & 1) {
       break block2
      }
      $0 = HEAP32[$2 + 20 >> 2];
      HEAP32[$2 + 16 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
      if (!(HEAP32[$2 + 16 >> 2] < -8192 | HEAP32[$2 + 16 >> 2] > 8191)) {
       $0 = HEAP32[$2 + 24 >> 2];
       $1 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 65472;
       $3 = jsvIsInt(HEAP32[$2 + 20 >> 2]) & 1 ? 16 : 17;
       $0 = HEAP32[$2 + 24 >> 2];
       $1 = $1 | $3;
       HEAP8[$0 + 12 | 0] = $1;
       HEAP8[$0 + 13 | 0] = $1 >>> 8;
       jsvSetFirstChild(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 16 >> 2] & 65535);
       break block4;
      }
      break block2;
     }
     block5 : {
      if (!(jsvIsString(HEAP32[$2 + 24 >> 2]) & 1)) {
       break block5
      }
      if (jsvIsUTF8String(HEAP32[$2 + 24 >> 2]) & 1) {
       break block5
      }
      block6 : {
       if (!(jsvIsInt(HEAP32[$2 + 20 >> 2]) & 1)) {
        break block6
       }
       if (jsvIsPin(HEAP32[$2 + 20 >> 2]) & 1) {
        break block6
       }
       $0 = HEAP32[$2 + 20 >> 2];
       HEAP32[$2 + 12 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
       if (!(HEAP32[$2 + 12 >> 2] < -8192 | HEAP32[$2 + 12 >> 2] > 8191)) {
        $0 = HEAP32[$2 + 24 >> 2];
        $1 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 65472;
        $3 = jsvGetCharactersInVar(HEAP32[$2 + 24 >> 2]) + 18 | 0;
        $0 = HEAP32[$2 + 24 >> 2];
        $1 = $1 | $3;
        HEAP8[$0 + 12 | 0] = $1;
        HEAP8[$0 + 13 | 0] = $1 >>> 8;
        jsvSetFirstChild(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 12 >> 2] & 65535);
        break block4;
       }
      }
     }
    }
    jsvSetFirstChild(HEAP32[$2 + 24 >> 2], jsvGetRef(jsvRef(HEAP32[$2 + 20 >> 2])) & 65535);
    break block4;
   }
   jsvSetFirstChild(HEAP32[$2 + 24 >> 2], 0);
  }
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 24 >> 2];
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jsvSetArrayLength($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP8[$3 + 7 | 0] = $2;
  block : {
   if (!(HEAP8[$3 + 7 | 0] & 1)) {
    break block
   }
   $0 = HEAP32[$3 + 12 >> 2];
   if (HEAP32[$3 + 8 >> 2] >= (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24))) {
    break block
   }
  }
  $0 = HEAP32[$3 + 12 >> 2];
  $1 = HEAP32[$3 + 8 >> 2];
  HEAP8[$0 | 0] = $1;
  HEAP8[$0 + 1 | 0] = $1 >>> 8;
  HEAP8[$0 + 2 | 0] = $1 >>> 16;
  HEAP8[$0 + 3 | 0] = $1 >>> 24;
  return HEAP32[$3 + 8 >> 2];
 }
 
 function jsvCompareInteger($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  block1 : {
   block : {
    if (!(jsvIsInt(HEAP32[$2 + 8 >> 2]) & 1)) {
     break block
    }
    if (!(jsvIsInt(HEAP32[$2 + 4 >> 2]) & 1)) {
     break block
    }
    HEAP32[$2 + 12 >> 2] = jsvGetInteger(HEAP32[$2 + 8 >> 2]) - jsvGetInteger(HEAP32[$2 + 4 >> 2]);
    break block1;
   }
   if (jsvIsInt(HEAP32[$2 + 8 >> 2]) & 1) {
    HEAP32[$2 + 12 >> 2] = -1;
    break block1;
   }
   if (jsvIsInt(HEAP32[$2 + 4 >> 2]) & 1) {
    HEAP32[$2 + 12 >> 2] = 1;
    break block1;
   }
   HEAP32[$2 + 12 >> 2] = 0;
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function jsvGetNativeFunctionPtr($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = jsvFindChildFromString(HEAP32[$1 + 8 >> 2], 138400);
  block : {
   if (HEAP32[$1 + 4 >> 2]) {
    HEAP32[$1 + 4 >> 2] = jsvSkipNameAndUnLock(HEAP32[$1 + 4 >> 2]);
    $0 = HEAP32[$1 + 8 >> 2];
    HEAP32[$1 >> 2] = (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) + jsvGetFlatStringPointer(HEAP32[$1 + 4 >> 2]);
    jsvUnLock(HEAP32[$1 + 4 >> 2]);
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP32[$1 + 12 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvFindChildFromString($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  HEAP32[$2 + 16 >> 2] = 0;
  HEAP8[$2 + 15 | 0] = 1;
  HEAP8[$2 + 16 | 0] = HEAPU8[HEAP32[$2 + 20 >> 2]];
  if (HEAPU8[HEAP32[$2 + 20 >> 2]]) {
   HEAP8[$2 + 17 | 0] = HEAPU8[HEAP32[$2 + 20 >> 2] + 1 | 0];
   if (HEAPU8[HEAP32[$2 + 20 >> 2] + 1 | 0]) {
    HEAP8[$2 + 18 | 0] = HEAPU8[HEAP32[$2 + 20 >> 2] + 2 | 0];
    if (HEAPU8[HEAP32[$2 + 20 >> 2] + 2 | 0]) {
     HEAP8[$2 + 19 | 0] = HEAPU8[HEAP32[$2 + 20 >> 2] + 3 | 0];
     if (HEAPU8[HEAP32[$2 + 20 >> 2] + 3 | 0]) {
      HEAP8[$2 + 15 | 0] = !HEAPU8[HEAP32[$2 + 20 >> 2] + 4 | 0]
     }
    }
   }
  }
  HEAP16[$2 + 12 >> 1] = jsvGetFirstChild(HEAP32[$2 + 24 >> 2]);
  block1 : {
   block2 : {
    if (!(HEAP8[$2 + 15 | 0] & 1)) {
     while (1) {
      if (HEAPU16[$2 + 12 >> 1]) {
       HEAP32[$2 + 8 >> 2] = jsvGetAddressOf(HEAPU16[$2 + 12 >> 1]);
       block : {
        $0 = HEAP32[$2 + 8 >> 2];
        if ((HEAPU8[$2 + 16 | 0] | HEAPU8[$2 + 17 | 0] << 8 | (HEAPU8[$2 + 18 | 0] << 16 | HEAPU8[$2 + 19 | 0] << 24)) != (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24))) {
         break block
        }
        if (!(jsvIsStringEqual(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 20 >> 2]) & 1)) {
         break block
        }
        HEAP32[$2 + 28 >> 2] = jsvLockAgain(HEAP32[$2 + 8 >> 2]);
        break block1;
       }
       HEAP16[$2 + 12 >> 1] = jsvGetNextSibling(HEAP32[$2 + 8 >> 2]);
       continue;
      }
      break;
     };
     break block2;
    }
    HEAP32[$2 + 4 >> 2] = 0;
    while (1) {
     if (HEAPU8[HEAP32[$2 + 20 >> 2] + HEAP32[$2 + 4 >> 2] | 0]) {
      HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
      continue;
     }
     break;
    };
    while (1) {
     if (HEAPU16[$2 + 12 >> 1]) {
      HEAP32[$2 >> 2] = jsvGetAddressOf(HEAPU16[$2 + 12 >> 1]);
      block3 : {
       $0 = HEAP32[$2 >> 2];
       if ((HEAPU8[$2 + 16 | 0] | HEAPU8[$2 + 17 | 0] << 8 | (HEAPU8[$2 + 18 | 0] << 16 | HEAPU8[$2 + 19 | 0] << 24)) != (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24))) {
        break block3
       }
       $0 = HEAP32[$2 >> 2];
       if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) >>> 18 | 0) {
        break block3
       }
       if ((jsvGetCharactersInVar(HEAP32[$2 >> 2]) | 0) != HEAP32[$2 + 4 >> 2]) {
        break block3
       }
       HEAP32[$2 + 28 >> 2] = jsvLockAgain(HEAP32[$2 >> 2]);
       break block1;
      }
      HEAP16[$2 + 12 >> 1] = jsvGetNextSibling(HEAP32[$2 >> 2]);
      continue;
     }
     break;
    };
   }
   HEAP32[$2 + 28 >> 2] = 0;
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jsvSkipNameAndUnLock($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = jsvSkipName(HEAP32[$1 + 12 >> 2]);
  jsvUnLock(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 8 >> 2];
 }
 
 function jsvGetFlatStringPointer($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!(jsvIsFlatString(HEAP32[$1 + 8 >> 2]) & 1)) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2] + 14;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvIsStringEqual($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $0 = jsvIsStringEqualOrStartsWith(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0);
  __stack_pointer = $2 + 16 | 0;
  return $0 & 1;
 }
 
 function jsvSkipName($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jsvSkipNameWithParent(HEAP32[$1 + 12 >> 2], 1, 0);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function jsvIsBasicVarEqual($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0.0;
  $2 = __stack_pointer - 96 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 88 >> 2] = $0;
  HEAP32[$2 + 84 >> 2] = $1;
  block : {
   if (HEAP32[$2 + 88 >> 2] == HEAP32[$2 + 84 >> 2]) {
    HEAP8[$2 + 95 | 0] = 1;
    break block;
   }
   if (!(HEAP32[$2 + 84 >> 2] ? HEAP32[$2 + 88 >> 2] : 0)) {
    HEAP8[$2 + 95 | 0] = 0;
    break block;
   }
   block2 : {
    if (!(jsvIsNumeric(HEAP32[$2 + 88 >> 2]) & 1)) {
     break block2
    }
    if (!(jsvIsNumeric(HEAP32[$2 + 84 >> 2]) & 1)) {
     break block2
    }
    if (jsvIsIntegerish(HEAP32[$2 + 88 >> 2]) & 1) {
     if (jsvIsIntegerish(HEAP32[$2 + 84 >> 2]) & 1) {
      $0 = HEAP32[$2 + 88 >> 2];
      $1 = HEAP32[$2 + 84 >> 2];
      HEAP8[$2 + 95 | 0] = (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24));
      break block;
     }
     $0 = HEAP32[$2 + 84 >> 2];
     $1 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
     $3 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
     wasm2js_scratch_store_i32(0, $1 | 0);
     wasm2js_scratch_store_i32(1, $3 | 0);
     $4 = +wasm2js_scratch_load_f64();
     $0 = HEAP32[$2 + 88 >> 2];
     HEAP8[$2 + 95 | 0] = $4 == +(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24));
     break block;
    }
    if (jsvIsIntegerish(HEAP32[$2 + 84 >> 2]) & 1) {
     $0 = HEAP32[$2 + 88 >> 2];
     $3 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
     $1 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
     wasm2js_scratch_store_i32(0, $3 | 0);
     wasm2js_scratch_store_i32(1, $1 | 0);
     $4 = +wasm2js_scratch_load_f64();
     $0 = HEAP32[$2 + 84 >> 2];
     HEAP8[$2 + 95 | 0] = $4 == +(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24));
     break block;
    }
    $0 = HEAP32[$2 + 88 >> 2];
    $1 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
    $3 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
    wasm2js_scratch_store_i32(0, $1 | 0);
    wasm2js_scratch_store_i32(1, $3 | 0);
    $4 = +wasm2js_scratch_load_f64();
    $0 = HEAP32[$2 + 84 >> 2];
    $3 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
    $1 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
    wasm2js_scratch_store_i32(0, $3 | 0);
    wasm2js_scratch_store_i32(1, $1 | 0);
    HEAP8[$2 + 95 | 0] = +wasm2js_scratch_load_f64() == $4;
    break block;
   }
   block3 : {
    if (!(jsvIsString(HEAP32[$2 + 88 >> 2]) & 1)) {
     break block3
    }
    if (!(jsvIsString(HEAP32[$2 + 84 >> 2]) & 1)) {
     break block3
    }
    jsvStringIteratorNew($2 + 48 | 0, HEAP32[$2 + 88 >> 2], 0);
    jsvStringIteratorNew($2 + 12 | 0, HEAP32[$2 + 84 >> 2], 0);
    while (1) {
     HEAP32[$2 + 8 >> 2] = jsvStringIteratorGetCharOrMinusOne($2 + 48 | 0);
     jsvStringIteratorNext($2 + 48 | 0);
     HEAP32[$2 + 4 >> 2] = jsvStringIteratorGetCharOrMinusOne($2 + 12 | 0);
     jsvStringIteratorNext($2 + 12 | 0);
     if (HEAP32[$2 + 8 >> 2] != HEAP32[$2 + 4 >> 2]) {
      jsvStringIteratorFree_161($2 + 48 | 0);
      jsvStringIteratorFree_161($2 + 12 | 0);
      HEAP8[$2 + 95 | 0] = 0;
      break block;
     }
     if (HEAP32[$2 + 8 >> 2] >= 0) {
      continue
     }
     break;
    };
    jsvStringIteratorFree_161($2 + 48 | 0);
    jsvStringIteratorFree_161($2 + 12 | 0);
    HEAP8[$2 + 95 | 0] = 1;
    break block;
   }
   HEAP8[$2 + 95 | 0] = 0;
  }
  __stack_pointer = $2 + 96 | 0;
  return HEAP8[$2 + 95 | 0] & 1;
 }
 
 function jsvIsEqual($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  block1 : {
   block : {
    if (!(jsvIsBasic(HEAP32[$2 + 8 >> 2]) & 1)) {
     break block
    }
    if (!(jsvIsBasic(HEAP32[$2 + 4 >> 2]) & 1)) {
     break block
    }
    HEAP8[$2 + 15 | 0] = jsvIsBasicVarEqual(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]) & 1;
    break block1;
   }
   HEAP8[$2 + 15 | 0] = (jsvGetRef(HEAP32[$2 + 8 >> 2]) & 65535) == (jsvGetRef(HEAP32[$2 + 4 >> 2]) & 65535);
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP8[$2 + 15 | 0] & 1;
 }
 
 function jsvGetConstString($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (jsvIsUndefined(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = 138928;
    break block;
   }
   if (jsvIsNull(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = 135673;
    break block;
   }
   block1 : {
    if (!(jsvIsBoolean(HEAP32[$1 + 8 >> 2]) & 1)) {
     break block1
    }
    if (jsvIsNameIntBool(HEAP32[$1 + 8 >> 2]) & 1) {
     break block1
    }
    HEAP32[$1 + 12 >> 2] = jsvGetBool(HEAP32[$1 + 8 >> 2]) & 1 ? 137108 : 137432;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvGetBool($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 24 >> 2] = $0;
  block : {
   if (jsvIsString(HEAP32[$1 + 24 >> 2]) & 1) {
    HEAP8[$1 + 31 | 0] = (jsvGetStringLength(HEAP32[$1 + 24 >> 2]) | 0) != 0;
    break block;
   }
   if (jsvIsPin(HEAP32[$1 + 24 >> 2]) & 1) {
    HEAP8[$1 + 31 | 0] = jshIsPinValid(jshGetPinFromVar(HEAP32[$1 + 24 >> 2]) & 255) & 1;
    break block;
   }
   block2 : {
    block1 : {
     if (jsvIsFunction(HEAP32[$1 + 24 >> 2]) & 1) {
      break block1
     }
     if (jsvIsArray(HEAP32[$1 + 24 >> 2]) & 1) {
      break block1
     }
     if (jsvIsObject(HEAP32[$1 + 24 >> 2]) & 1) {
      break block1
     }
     if (!(jsvIsArrayBuffer(HEAP32[$1 + 24 >> 2]) & 1)) {
      break block2
     }
    }
    HEAP8[$1 + 31 | 0] = 1;
    break block;
   }
   if (jsvIsFloat(HEAP32[$1 + 24 >> 2]) & 1) {
    HEAPF64[$1 + 16 >> 3] = jsvGetFloat(HEAP32[$1 + 24 >> 2]);
    $2 = __DOUBLE_BITS(HEAPF64[$1 + 16 >> 3]);
    $0 = $2;
    $3 = i64toi32_i32$HIGH_BITS;
    $2 = $3 & 2147483647;
    $3 = $0;
    HEAP8[$1 + 31 | 0] = ($2 | 0) == 2146435072 & ($3 | 0) != 0 | $2 >>> 0 > 2146435072 ? 0 : HEAPF64[$1 + 16 >> 3] != 0.0;
    break block;
   }
   HEAP8[$1 + 31 | 0] = (jsvGetInteger(HEAP32[$1 + 24 >> 2]) | 0) != 0;
  }
  __stack_pointer = $1 + 32 | 0;
  return HEAP8[$1 + 31 | 0] & 1;
 }
 
 function jsvGetFloat($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 96 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 84 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 84 >> 2]) {
    HEAPF64[$1 + 88 >> 3] = NaN;
    break block;
   }
   if (jsvIsFloat(HEAP32[$1 + 84 >> 2]) & 1) {
    $0 = HEAP32[$1 + 84 >> 2];
    $2 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
    wasm2js_scratch_store_i32(0, HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24));
    wasm2js_scratch_store_i32(1, $2 | 0);
    HEAPF64[$1 + 88 >> 3] = wasm2js_scratch_load_f64();
    break block;
   }
   if (jsvIsIntegerish(HEAP32[$1 + 84 >> 2]) & 1) {
    $0 = HEAP32[$1 + 84 >> 2];
    HEAPF64[$1 + 88 >> 3] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
    break block;
   }
   block1 : {
    if (!(jsvIsArray(HEAP32[$1 + 84 >> 2]) & 1)) {
     if (!(jsvIsArrayBuffer(HEAP32[$1 + 84 >> 2]) & 1)) {
      break block1
     }
    }
    HEAP32[$1 + 80 >> 2] = jsvGetLength(HEAP32[$1 + 84 >> 2]);
    if (!HEAP32[$1 + 80 >> 2]) {
     HEAPF64[$1 + 88 >> 3] = 0;
     break block;
    }
    if (HEAP32[$1 + 80 >> 2] == 1) {
     if (jsvIsArrayBuffer(HEAP32[$1 + 84 >> 2]) & 1) {
      HEAPF64[$1 + 88 >> 3] = jsvGetFloatAndUnLock(jsvArrayBufferGet(HEAP32[$1 + 84 >> 2], 0));
      break block;
     }
     HEAPF64[$1 + 88 >> 3] = jsvGetFloatAndUnLock(jsvSkipNameAndUnLock(jsvGetArrayItem(HEAP32[$1 + 84 >> 2], 0)));
     break block;
    }
   }
   if (jsvIsString(HEAP32[$1 + 84 >> 2]) & 1) {
    block2 : {
     if ((jsvGetString(HEAP32[$1 + 84 >> 2], $1 + 16 | 0, 64) | 0) == 64) {
      jsExceptionHere(1, 128295, 0);
      break block2;
     }
     if (!HEAPU8[$1 + 16 | 0]) {
      HEAPF64[$1 + 88 >> 3] = 0;
      break block;
     }
     if (!strcmp($1 + 16 | 0, 123618)) {
      HEAPF64[$1 + 88 >> 3] = Infinity;
      break block;
     }
     if (!strcmp($1 + 16 | 0, 123617)) {
      HEAPF64[$1 + 88 >> 3] = -Infinity;
      break block;
     }
     HEAP32[$1 + 12 >> 2] = 0;
     HEAPF64[$1 >> 3] = stringToFloatWithRadix($1 + 16 | 0, 0, $1 + 12 | 0);
     if (!HEAPU8[HEAP32[$1 + 12 >> 2]]) {
      HEAPF64[$1 + 88 >> 3] = HEAPF64[$1 >> 3];
      break block;
     }
    }
   }
   HEAPF64[$1 + 88 >> 3] = NaN;
  }
  __stack_pointer = $1 + 96 | 0;
  return +HEAPF64[$1 + 88 >> 3];
 }
 
 function __DOUBLE_BITS($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAPF64[$1 + 8 >> 3] = $0;
  HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  return HEAP32[$1 >> 2];
 }
 
 function jsvGetInteger($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0;
  $1 = __stack_pointer + -64 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 56 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 56 >> 2]) {
    HEAP32[$1 + 60 >> 2] = 0;
    break block;
   }
   if (jsvIsNull(HEAP32[$1 + 56 >> 2]) & 1) {
    HEAP32[$1 + 60 >> 2] = 0;
    break block;
   }
   if (jsvIsUndefined(HEAP32[$1 + 56 >> 2]) & 1) {
    HEAP32[$1 + 60 >> 2] = 0;
    break block;
   }
   block1 : {
    if (!(jsvIsIntegerish(HEAP32[$1 + 56 >> 2]) & 1)) {
     if (!(jsvIsArrayBufferName(HEAP32[$1 + 56 >> 2]) & 1)) {
      break block1
     }
    }
    $0 = HEAP32[$1 + 56 >> 2];
    HEAP32[$1 + 60 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
    break block;
   }
   block2 : {
    if (!(jsvIsArray(HEAP32[$1 + 56 >> 2]) & 1)) {
     if (!(jsvIsArrayBuffer(HEAP32[$1 + 56 >> 2]) & 1)) {
      break block2
     }
    }
    HEAP32[$1 + 52 >> 2] = jsvGetLength(HEAP32[$1 + 56 >> 2]);
    if (!HEAP32[$1 + 52 >> 2]) {
     HEAP32[$1 + 60 >> 2] = 0;
     break block;
    }
    if (HEAP32[$1 + 52 >> 2] == 1) {
     if (jsvIsArrayBuffer(HEAP32[$1 + 56 >> 2]) & 1) {
      HEAP32[$1 + 60 >> 2] = jsvGetIntegerAndUnLock(jsvArrayBufferGet(HEAP32[$1 + 56 >> 2], 0));
      break block;
     }
     HEAP32[$1 + 60 >> 2] = jsvGetIntegerAndUnLock(jsvSkipNameAndUnLock(jsvGetArrayItem(HEAP32[$1 + 56 >> 2], 0)));
     break block;
    }
   }
   if (jsvIsFloat(HEAP32[$1 + 56 >> 2]) & 1) {
    $2 = HEAP32[$1 + 56 >> 2];
    $4 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
    $0 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
    wasm2js_scratch_store_i32(0, $4 | 0);
    wasm2js_scratch_store_i32(1, $0 | 0);
    $0 = __DOUBLE_BITS(+wasm2js_scratch_load_f64());
    $2 = $0;
    $4 = i64toi32_i32$HIGH_BITS;
    $0 = $4 & 2147483647;
    if (!(($0 | 0) == 2146435072 | $0 >>> 0 > 2146435072)) {
     $0 = HEAP32[$1 + 56 >> 2];
     $4 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
     $0 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
     wasm2js_scratch_store_i32(0, $4 | 0);
     wasm2js_scratch_store_i32(1, $0 | 0);
     $3 = +wasm2js_scratch_load_f64();
     if (Math_abs($3) < 9223372036854775808.0) {
      if (Math_abs($3) >= 1.0) {
       $0 = ~~($3 > 0.0 ? Math_min(Math_floor($3 * 2.3283064365386963e-10), 4294967295.0) : Math_ceil(($3 - +(~~$3 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0
      } else {
       $0 = 0
      }
      $5 = ~~$3 >>> 0;
     } else {
      $0 = -2147483648
     }
     HEAP32[$1 + 60 >> 2] = $5;
     break block;
    }
    HEAP32[$1 + 60 >> 2] = 0;
    break block;
   }
   block4 : {
    if (!(jsvIsString(HEAP32[$1 + 56 >> 2]) & 1)) {
     break block4
    }
    if (!(jsvIsStringNumericInt(HEAP32[$1 + 56 >> 2], 1) & 1)) {
     break block4
    }
    block5 : {
     if ((jsvGetString(HEAP32[$1 + 56 >> 2], $1 + 16 | 0, 32) | 0) == 32) {
      jsExceptionHere(1, 128295, 0);
      break block5;
     }
     $0 = stringToInt($1 + 16 | 0);
     HEAP32[$1 + 60 >> 2] = $0;
     break block;
    }
   }
   HEAP32[$1 + 60 >> 2] = 0;
  }
  __stack_pointer = $1 - -64 | 0;
  return HEAP32[$1 + 60 >> 2];
 }
 
 function jsvGetTypeOf($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (jsvIsUndefined(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = 138928;
    break block;
   }
   block2 : {
    block1 : {
     if (jsvIsNull(HEAP32[$1 + 8 >> 2]) & 1) {
      break block1
     }
     if (jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1) {
      break block1
     }
     if (jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1) {
      break block1
     }
     if (!(jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1)) {
      break block2
     }
    }
    HEAP32[$1 + 12 >> 2] = 125079;
    break block;
   }
   if (jsvIsFunction(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = 135330;
    break block;
   }
   if (jsvIsString(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = 136536;
    break block;
   }
   if (jsvIsBoolean(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = 135485;
    break block;
   }
   if (jsvIsNumeric(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = 128366;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = 141446;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvGetValueOf($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!(jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1)) {
    HEAP32[$1 + 12 >> 2] = jsvLockAgainSafe(HEAP32[$1 + 8 >> 2]);
    break block;
   }
   HEAP32[$1 + 4 >> 2] = jspGetNamedField(HEAP32[$1 + 8 >> 2], 136938, 0);
   if (!(jsvIsFunction(HEAP32[$1 + 4 >> 2]) & 1)) {
    jsvUnLock(HEAP32[$1 + 4 >> 2]);
    HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[$1 + 8 >> 2]);
    break block;
   }
   HEAP32[$1 + 8 >> 2] = jspeFunctionCall(HEAP32[$1 + 4 >> 2], 0, HEAP32[$1 + 8 >> 2], 0, 0, 0);
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2];
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvGetString($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 80 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 72 >> 2] = $0;
  HEAP32[$3 + 68 >> 2] = $1;
  HEAP32[$3 + 64 >> 2] = $2;
  HEAP32[$3 + 60 >> 2] = jsvGetConstString(HEAP32[$3 + 72 >> 2]);
  block : {
   if (HEAP32[$3 + 60 >> 2]) {
    HEAP32[$3 + 64 >> 2] = HEAP32[$3 + 64 >> 2] - 1;
    HEAP32[$3 + 56 >> 2] = 0;
    while (1) {
     $0 = 0;
     $0 = HEAP8[HEAP32[$3 + 60 >> 2] + HEAP32[$3 + 56 >> 2] | 0] << 24 >> 24 ? HEAPU32[$3 + 56 >> 2] < HEAPU32[$3 + 64 >> 2] : $0;
     if ($0) {
      HEAP8[HEAP32[$3 + 68 >> 2] + HEAP32[$3 + 56 >> 2] | 0] = HEAPU8[HEAP32[$3 + 60 >> 2] + HEAP32[$3 + 56 >> 2] | 0];
      HEAP32[$3 + 56 >> 2] = HEAP32[$3 + 56 >> 2] + 1;
      continue;
     }
     break;
    };
    HEAP8[HEAP32[$3 + 68 >> 2] + HEAP32[$3 + 56 >> 2] | 0] = 0;
    HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 56 >> 2];
    break block;
   }
   if (jsvIsInt(HEAP32[$3 + 72 >> 2]) & 1) {
    $0 = HEAP32[$3 + 72 >> 2];
    itostr_207(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), HEAP32[$3 + 68 >> 2], 10);
    HEAP32[$3 + 76 >> 2] = strlen(HEAP32[$3 + 68 >> 2]);
    break block;
   }
   if (jsvIsFloat(HEAP32[$3 + 72 >> 2]) & 1) {
    $0 = HEAP32[$3 + 72 >> 2];
    $1 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
    wasm2js_scratch_store_i32(0, HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24));
    wasm2js_scratch_store_i32(1, $1 | 0);
    ftoa_bounded(+wasm2js_scratch_load_f64(), HEAP32[$3 + 68 >> 2], HEAP32[$3 + 64 >> 2]);
    HEAP32[$3 + 76 >> 2] = strlen(HEAP32[$3 + 68 >> 2]);
    break block;
   }
   if (jsvHasCharacterData(HEAP32[$3 + 72 >> 2]) & 1) {
    HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 64 >> 2];
    jsvStringIteratorNew($3 + 16 | 0, HEAP32[$3 + 72 >> 2], 0);
    while (1) {
     if (jsvStringIteratorHasChar_180($3 + 16 | 0) & 1) {
      $0 = HEAP32[$3 + 52 >> 2];
      HEAP32[$3 + 52 >> 2] = $0 - 1;
      if ($0 >>> 0 <= 1) {
       HEAP8[HEAP32[$3 + 68 >> 2]] = 0;
       jsvStringIteratorFree_161($3 + 16 | 0);
       HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 64 >> 2];
       break block;
      } else {
       $1 = jsvStringIteratorGetChar_182($3 + 16 | 0);
       $0 = HEAP32[$3 + 68 >> 2];
       HEAP32[$3 + 68 >> 2] = $0 + 1;
       HEAP8[$0 | 0] = $1;
       jsvStringIteratorNext($3 + 16 | 0);
       continue;
      }
     }
     break;
    };
    jsvStringIteratorFree_161($3 + 16 | 0);
    HEAP8[HEAP32[$3 + 68 >> 2]] = 0;
    HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 64 >> 2] - HEAP32[$3 + 52 >> 2];
    break block;
   }
   HEAP32[$3 + 12 >> 2] = jsvAsString(HEAP32[$3 + 72 >> 2]);
   if (HEAP32[$3 + 12 >> 2]) {
    HEAP32[$3 + 8 >> 2] = jsvGetStringChars(HEAP32[$3 + 12 >> 2], 0, HEAP32[$3 + 68 >> 2], HEAP32[$3 + 64 >> 2]);
    jsvUnLock(HEAP32[$3 + 12 >> 2]);
    if (HEAPU32[$3 + 8 >> 2] >= HEAPU32[$3 + 64 >> 2]) {
     HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 64 >> 2] - 1
    }
    HEAP8[HEAP32[$3 + 68 >> 2] + HEAP32[$3 + 8 >> 2] | 0] = 0;
    HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 8 >> 2];
    break block;
   }
   HEAP8[HEAP32[$3 + 68 >> 2]] = 0;
   jsExceptionHere(4, 136499, 0);
   HEAP32[$3 + 76 >> 2] = 0;
  }
  __stack_pointer = $3 + 80 | 0;
  return HEAP32[$3 + 76 >> 2];
 }
 
 function itostr_207($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  itostr_extra(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], 1, HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jsvAsString($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 112 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 108 >> 2] = $0;
  HEAP32[$1 + 104 >> 2] = 0;
  block1 : {
   block : {
    if (!(jsvHasCharacterData(HEAP32[$1 + 108 >> 2]) & 1)) {
     break block
    }
    if (!(jsvIsName(HEAP32[$1 + 108 >> 2]) & 1)) {
     break block
    }
    HEAP32[$1 + 104 >> 2] = jsvNewFromStringVarComplete(HEAP32[$1 + 108 >> 2]);
    break block1;
   }
   block2 : {
    if (jsvIsString(HEAP32[$1 + 108 >> 2]) & 1) {
     HEAP32[$1 + 104 >> 2] = jsvLockAgain(HEAP32[$1 + 108 >> 2]);
     break block2;
    }
    block5 : {
     if (jsvIsObject(HEAP32[$1 + 108 >> 2]) & 1) {
      HEAP32[$1 + 100 >> 2] = jspGetNamedField(HEAP32[$1 + 108 >> 2], 136543, 0);
      block4 : {
       block3 : {
        if (!HEAP32[$1 + 100 >> 2]) {
         break block3
        }
        $0 = HEAP32[$1 + 100 >> 2];
        if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 1) {
         break block3
        }
        HEAP32[$1 + 96 >> 2] = jspExecuteFunction(HEAP32[$1 + 100 >> 2], HEAP32[$1 + 108 >> 2], 0, 0);
        jsvUnLock(HEAP32[$1 + 100 >> 2]);
        HEAP32[$1 + 104 >> 2] = jsvAsStringAndUnLock(HEAP32[$1 + 96 >> 2]);
        break block4;
       }
       jsvUnLock(HEAP32[$1 + 100 >> 2]);
       HEAP32[$1 + 104 >> 2] = jsvNewFromString(140449);
      }
      break block5;
     }
     HEAP32[$1 + 92 >> 2] = jsvGetConstString(HEAP32[$1 + 108 >> 2]);
     block6 : {
      if (HEAP32[$1 + 92 >> 2]) {
       HEAP32[$1 + 104 >> 2] = jsvNewFromString(HEAP32[$1 + 92 >> 2]);
       break block6;
      }
      block7 : {
       if (jsvIsPin(HEAP32[$1 + 108 >> 2]) & 1) {
        $0 = HEAP32[$1 + 108 >> 2];
        jshGetPinString($1 + 16 | 0, (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) & 255);
        HEAP32[$1 + 104 >> 2] = jsvNewFromString($1 + 16 | 0);
        break block7;
       }
       block8 : {
        if (jsvIsInt(HEAP32[$1 + 108 >> 2]) & 1) {
         $0 = HEAP32[$1 + 108 >> 2];
         itostr_207(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), $1 + 16 | 0, 10);
         HEAP32[$1 + 104 >> 2] = jsvNewFromString($1 + 16 | 0);
         break block8;
        }
        block9 : {
         if (jsvIsFloat(HEAP32[$1 + 108 >> 2]) & 1) {
          $0 = HEAP32[$1 + 108 >> 2];
          $2 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
          wasm2js_scratch_store_i32(0, HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24));
          wasm2js_scratch_store_i32(1, $2 | 0);
          ftoa_bounded(+wasm2js_scratch_load_f64(), $1 + 16 | 0, 70);
          HEAP32[$1 + 104 >> 2] = jsvNewFromString($1 + 16 | 0);
          break block9;
         }
         block11 : {
          block10 : {
           if (!(jsvIsArray(HEAP32[$1 + 108 >> 2]) & 1)) {
            if (!(jsvIsArrayBuffer(HEAP32[$1 + 108 >> 2]) & 1)) {
             break block10
            }
           }
           HEAP32[$1 + 12 >> 2] = jsvNewFromString(142566);
           HEAP32[$1 + 104 >> 2] = jsvArrayJoin(HEAP32[$1 + 108 >> 2], HEAP32[$1 + 12 >> 2], 1);
           jsvUnLock(HEAP32[$1 + 12 >> 2]);
           break block11;
          }
          block12 : {
           if (jsvIsFunction(HEAP32[$1 + 108 >> 2]) & 1) {
            HEAP32[$1 + 104 >> 2] = jsvNewFromEmptyString_186();
            if (HEAP32[$1 + 104 >> 2]) {
             jsfGetJSON(HEAP32[$1 + 108 >> 2], HEAP32[$1 + 104 >> 2], 0)
            }
            break block12;
           }
           jsExceptionHere(4, 136499, 0);
          }
         }
        }
       }
      }
     }
    }
   }
  }
  __stack_pointer = $1 + 112 | 0;
  return HEAP32[$1 + 104 >> 2];
 }
 
 function jsvGetStringChars($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer + -64 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 56 >> 2] = $0;
  HEAP32[$4 + 52 >> 2] = $1;
  HEAP32[$4 + 48 >> 2] = $2;
  HEAP32[$4 + 44 >> 2] = $3;
  HEAP32[$4 + 40 >> 2] = HEAP32[$4 + 44 >> 2];
  jsvStringIteratorNew($4 + 4 | 0, HEAP32[$4 + 56 >> 2], HEAP32[$4 + 52 >> 2]);
  block : {
   while (1) {
    if (jsvStringIteratorHasChar_180($4 + 4 | 0) & 1) {
     $0 = HEAP32[$4 + 40 >> 2];
     HEAP32[$4 + 40 >> 2] = $0 - 1;
     if ($0) {
      $1 = jsvStringIteratorGetCharAndNext($4 + 4 | 0);
      $0 = HEAP32[$4 + 48 >> 2];
      HEAP32[$4 + 48 >> 2] = $0 + 1;
      HEAP8[$0 | 0] = $1;
      continue;
     } else {
      jsvStringIteratorFree_161($4 + 4 | 0);
      HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 44 >> 2];
      break block;
     }
    }
    break;
   };
   jsvStringIteratorFree_161($4 + 4 | 0);
   HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 44 >> 2] - HEAP32[$4 + 40 >> 2];
  }
  __stack_pointer = $4 - -64 | 0;
  return HEAP32[$4 + 60 >> 2];
 }
 
 function jsvNewFromStringVarComplete($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jsvNewWritableStringFromStringVar(HEAP32[$1 + 12 >> 2], 0, 2147483647);
  __stack_pointer = $1 + 16 | 0;
  return $0;
 }
 
 function jsvAsStringAndUnLock($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = jsvAsString(HEAP32[$1 + 12 >> 2]);
  jsvUnLock(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 8 >> 2];
 }
 
 function jsvArrayJoin($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 144 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 136 >> 2] = $0;
  HEAP32[$3 + 132 >> 2] = $1;
  HEAP8[$3 + 131 | 0] = $2;
  HEAP32[$3 + 124 >> 2] = jsvNewFromEmptyString_186();
  block : {
   if (!HEAP32[$3 + 124 >> 2]) {
    HEAP32[$3 + 140 >> 2] = 0;
    break block;
   }
   jsvIteratorNew($3 - -64 | 0, HEAP32[$3 + 136 >> 2], 1);
   jsvStringIteratorNew($3 + 28 | 0, HEAP32[$3 + 124 >> 2], 0);
   HEAP8[$3 + 27 | 0] = 1;
   while (1) {
    $0 = 0;
    if (!(jspIsInterrupted() & 1)) {
     $0 = jsvIteratorHasElement($3 - -64 | 0)
    }
    if ($0 & 1) {
     HEAP32[$3 + 20 >> 2] = jsvIteratorGetKey($3 - -64 | 0);
     if (jsvIsInt(HEAP32[$3 + 20 >> 2]) & 1) {
      if (!(!HEAP32[$3 + 132 >> 2] | HEAP8[$3 + 27 | 0] & 1)) {
       jsvStringIteratorAppendString($3 + 28 | 0, HEAP32[$3 + 132 >> 2], 0, 2147483647)
      }
      HEAP8[$3 + 27 | 0] = 0;
      HEAP32[$3 + 16 >> 2] = jsvIteratorGetValue($3 - -64 | 0);
      block2 : {
       if (!HEAP32[$3 + 16 >> 2]) {
        break block2
       }
       if (HEAP8[$3 + 131 | 0] & 1) {
        if (jsvIsNull(HEAP32[$3 + 16 >> 2]) & 1) {
         break block2
        }
       }
       HEAP32[$3 + 12 >> 2] = jsvAsString(HEAP32[$3 + 16 >> 2]);
       if (HEAP32[$3 + 12 >> 2]) {
        jsvStringIteratorAppendString($3 + 28 | 0, HEAP32[$3 + 12 >> 2], 0, 2147483647);
        jsvUnLock(HEAP32[$3 + 12 >> 2]);
       }
      }
      jsvUnLock(HEAP32[$3 + 16 >> 2]);
     }
     jsvUnLock(HEAP32[$3 + 20 >> 2]);
     jsvIteratorNext($3 - -64 | 0);
     continue;
    }
    break;
   };
   jsvIteratorFree($3 - -64 | 0);
   jsvStringIteratorFree_161($3 + 28 | 0);
   HEAP32[$3 + 140 >> 2] = HEAP32[$3 + 124 >> 2];
  }
  __stack_pointer = $3 + 144 | 0;
  return HEAP32[$3 + 140 >> 2];
 }
 
 function jsvNewWritableStringFromStringVar($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  HEAP32[$3 >> 2] = jsvNewFromEmptyString_186();
  jsvAppendStringVar(HEAP32[$3 >> 2], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 16 | 0;
  return HEAP32[$3 >> 2];
 }
 
 function jsvAsFlatString($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (jsvIsFlatString(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[$1 + 8 >> 2]);
    break block;
   }
   HEAP32[$1 + 4 >> 2] = jsvAsString(HEAP32[$1 + 8 >> 2]);
   HEAP32[$1 >> 2] = jsvNewFlatStringFromStringVar(HEAP32[$1 + 4 >> 2], 0, 2147483647);
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvNewFlatStringFromStringVar($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 96 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 92 >> 2] = $0;
  HEAP32[$3 + 88 >> 2] = $1;
  HEAP32[$3 + 84 >> 2] = $2;
  HEAP32[$3 + 80 >> 2] = jsvGetStringLength(HEAP32[$3 + 92 >> 2]);
  block : {
   if (HEAPU32[$3 + 88 >> 2] > HEAPU32[$3 + 80 >> 2]) {
    HEAP32[$3 + 80 >> 2] = 0;
    break block;
   }
   HEAP32[$3 + 80 >> 2] = HEAP32[$3 + 80 >> 2] - HEAP32[$3 + 88 >> 2];
  }
  if (HEAPU32[$3 + 80 >> 2] > HEAPU32[$3 + 84 >> 2]) {
   HEAP32[$3 + 80 >> 2] = HEAP32[$3 + 84 >> 2]
  }
  HEAP32[$3 + 76 >> 2] = jsvNewFlatStringOfLength(HEAP32[$3 + 80 >> 2]);
  if (HEAP32[$3 + 76 >> 2]) {
   jsvStringIteratorNew($3 + 40 | 0, HEAP32[$3 + 92 >> 2], HEAP32[$3 + 88 >> 2]);
   jsvStringIteratorNew($3 + 4 | 0, HEAP32[$3 + 76 >> 2], 0);
   while (1) {
    $0 = HEAP32[$3 + 80 >> 2];
    HEAP32[$3 + 80 >> 2] = $0 - 1;
    if ($0) {
     jsvStringIteratorSetCharAndNext($3 + 4 | 0, jsvStringIteratorGetCharAndNext($3 + 40 | 0) << 24 >> 24);
     continue;
    }
    break;
   };
   jsvStringIteratorFree_161($3 + 40 | 0);
   jsvStringIteratorFree_161($3 + 4 | 0);
  }
  __stack_pointer = $3 + 96 | 0;
  return HEAP32[$3 + 76 >> 2];
 }
 
 function jsvAsArrayIndex($0) {
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 24 >> 2] = $0;
  block1 : {
   block : {
    if (!(jsvIsSimpleInt(HEAP32[$1 + 24 >> 2]) & 1)) {
     break block
    }
    if ((jsvGetInteger(HEAP32[$1 + 24 >> 2]) | 0) < 0) {
     break block
    }
    HEAP32[$1 + 28 >> 2] = jsvLockAgain(HEAP32[$1 + 24 >> 2]);
    break block1;
   }
   if (jsvIsString(HEAP32[$1 + 24 >> 2]) & 1) {
    if (jsvIsStringNumericStrict(HEAP32[$1 + 24 >> 2]) & 1) {
     HEAP32[$1 + 20 >> 2] = jsvNewFromInteger(jsvGetInteger(HEAP32[$1 + 24 >> 2]));
     HEAP32[$1 + 16 >> 2] = jsvAsString(HEAP32[$1 + 20 >> 2]);
     if (!jsvCompareString(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 16 >> 2], 0, 0, 0)) {
      jsvUnLock(HEAP32[$1 + 16 >> 2]);
      HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
      break block1;
     }
     jsvUnLock2(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 16 >> 2]);
    }
    HEAP32[$1 + 28 >> 2] = jsvLockAgain(HEAP32[$1 + 24 >> 2]);
    break block1;
   }
   if (jsvIsFloat(HEAP32[$1 + 24 >> 2]) & 1) {
    HEAPF64[$1 + 8 >> 3] = jsvGetFloat(HEAP32[$1 + 24 >> 2]);
    HEAP32[$1 + 4 >> 2] = jsvGetInteger(HEAP32[$1 + 24 >> 2]);
    if (HEAPF64[$1 + 8 >> 3] == +HEAP32[$1 + 4 >> 2]) {
     HEAP32[$1 + 28 >> 2] = jsvNewFromInteger(HEAP32[$1 + 4 >> 2]);
     break block1;
    }
   }
   HEAP32[$1 + 28 >> 2] = jsvAsString(HEAP32[$1 + 24 >> 2]);
  }
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 28 >> 2];
 }
 
 function jsvIsStringNumericStrict($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer + -64 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 56 >> 2] = $0;
  jsvStringIteratorNew($1 + 20 | 0, HEAP32[$1 + 56 >> 2], 0);
  HEAP8[$1 + 19 | 0] = 0;
  HEAP8[$1 + 18 | 0] = 0;
  HEAP32[$1 + 12 >> 2] = 0;
  block : {
   while (1) {
    if (jsvStringIteratorHasChar_180($1 + 20 | 0) & 1) {
     HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] + 1;
     HEAP8[$1 + 11 | 0] = jsvStringIteratorGetCharAndNext($1 + 20 | 0);
     if (!(isNumeric(HEAP8[$1 + 11 | 0] << 24 >> 24) & 1)) {
      jsvStringIteratorFree_161($1 + 20 | 0);
      HEAP8[$1 + 63 | 0] = 0;
      break block;
     }
     if (!(HEAP8[$1 + 19 | 0] & 1 | HEAPU8[$1 + 11 | 0] != 48)) {
      HEAP8[$1 + 18 | 0] = 1
     }
     if (HEAPU8[$1 + 11 | 0] != 48) {
      HEAP8[$1 + 19 | 0] = 1
     }
     continue;
    }
    break;
   };
   jsvStringIteratorFree_161($1 + 20 | 0);
   if (HEAP32[$1 + 12 >> 2] > 0) {
    $2 = 1;
    $2 = HEAP8[$1 + 18 | 0] & 1 ? HEAP32[$1 + 12 >> 2] == 1 : $2;
   }
   HEAP8[$1 + 63 | 0] = $2 & 1;
  }
  __stack_pointer = $1 - -64 | 0;
  return HEAP8[$1 + 63 | 0] & 1;
 }
 
 function jsvCompareString($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 112 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 104 >> 2] = $0;
  HEAP32[$5 + 100 >> 2] = $1;
  HEAP32[$5 + 96 >> 2] = $2;
  HEAP32[$5 + 92 >> 2] = $3;
  HEAP8[$5 + 91 | 0] = $4;
  jsvStringIteratorNewUTF8($5 + 52 | 0, HEAP32[$5 + 104 >> 2], HEAP32[$5 + 96 >> 2]);
  jsvStringIteratorNewUTF8($5 + 16 | 0, HEAP32[$5 + 100 >> 2], HEAP32[$5 + 92 >> 2]);
  while (1) {
   block1 : {
    HEAP32[$5 + 12 >> 2] = jsvStringIteratorGetUTF8CharAndNext($5 + 52 | 0);
    HEAP32[$5 + 8 >> 2] = jsvStringIteratorGetUTF8CharAndNext($5 + 16 | 0);
    if (HEAP32[$5 + 12 >> 2] != HEAP32[$5 + 8 >> 2]) {
     jsvStringIteratorFree_161($5 + 52 | 0);
     jsvStringIteratorFree_161($5 + 16 | 0);
     if (!(!(HEAP8[$5 + 91 | 0] & 1) | (HEAP32[$5 + 12 >> 2] | HEAP32[$5 + 8 >> 2]) >= 0)) {
      HEAP32[$5 + 108 >> 2] = 0;
      break block1;
     }
     HEAP32[$5 + 108 >> 2] = HEAP32[$5 + 12 >> 2] - HEAP32[$5 + 8 >> 2];
     break block1;
    }
    if (HEAP32[$5 + 12 >> 2] >= 0) {
     continue
    }
    jsvStringIteratorFree_161($5 + 52 | 0);
    jsvStringIteratorFree_161($5 + 16 | 0);
    HEAP32[$5 + 108 >> 2] = 0;
   }
   break;
  };
  __stack_pointer = $5 + 112 | 0;
  return HEAP32[$5 + 108 >> 2];
 }
 
 function jsvGetLength($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = jsvGetArrayLength(HEAP32[$1 + 8 >> 2]);
    break block;
   }
   if (jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = jsvGetArrayBufferLength(HEAP32[$1 + 8 >> 2]);
    break block;
   }
   if (jsvIsString(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = jsvGetStringLength(HEAP32[$1 + 8 >> 2]);
    break block;
   }
   block1 : {
    if (!(jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1)) {
     if (!(jsvIsFunction(HEAP32[$1 + 8 >> 2]) & 1)) {
      break block1
     }
    }
    HEAP32[$1 + 12 >> 2] = jsvGetChildren(HEAP32[$1 + 8 >> 2]);
    break block;
   }
   HEAP32[$1 + 12 >> 2] = 1;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvArrayBufferGet($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 80 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 76 >> 2] = $0;
  HEAP32[$2 + 72 >> 2] = $1;
  jsvArrayBufferIteratorNew($2 + 16 | 0, HEAP32[$2 + 76 >> 2], HEAP32[$2 + 72 >> 2]);
  HEAP32[$2 + 12 >> 2] = jsvArrayBufferIteratorGetValue($2 + 16 | 0, 0);
  jsvArrayBufferIteratorFree($2 + 16 | 0);
  __stack_pointer = $2 + 80 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function jsvGetIntegerAndUnLock($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = _jsvGetIntegerAndUnLock(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return $0;
 }
 
 function jsvGetArrayItem($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $0 = jsvSkipNameAndUnLock(jsvGetArrayIndex(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]));
  __stack_pointer = $2 + 16 | 0;
  return $0;
 }
 
 function jsvIsStringNumericInt($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 80 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 72 >> 2] = $0;
  HEAP8[$2 + 71 | 0] = $1;
  jsvStringIteratorNew($2 + 32 | 0, HEAP32[$2 + 72 >> 2], 0);
  while (1) {
   $0 = 0;
   if (jsvStringIteratorHasChar_180($2 + 32 | 0) & 1) {
    $0 = isWhitespace(jsvStringIteratorGetChar_182($2 + 32 | 0) << 24 >> 24)
   }
   if ($0 & 1) {
    jsvStringIteratorNext($2 + 32 | 0);
    continue;
   }
   break;
  };
  block : {
   if ((jsvStringIteratorGetChar_182($2 + 32 | 0) & 255) != 45) {
    if ((jsvStringIteratorGetChar_182($2 + 32 | 0) & 255) != 43) {
     break block
    }
   }
   jsvStringIteratorNext($2 + 32 | 0);
  }
  HEAP32[$2 + 28 >> 2] = 0;
  if ((jsvStringIteratorGetChar_182($2 + 32 | 0) & 255) == 48) {
   jsvStringIteratorNext($2 + 32 | 0);
   HEAP8[$2 + 25 | 0] = 48;
   HEAP8[$2 + 26 | 0] = jsvStringIteratorGetChar_182($2 + 32 | 0);
   HEAP8[$2 + 27 | 0] = 0;
   HEAP32[$2 + 20 >> 2] = $2 + 25;
   HEAP32[$2 + 28 >> 2] = getRadix($2 + 20 | 0);
   if (HEAPU32[$2 + 20 >> 2] > $2 + 26 >>> 0) {
    jsvStringIteratorNext($2 + 32 | 0)
   }
  }
  if (!HEAP32[$2 + 28 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 10
  }
  HEAP32[$2 + 16 >> 2] = 0;
  block4 : {
   while (1) {
    if (jsvStringIteratorHasChar_180($2 + 32 | 0) & 1) {
     HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 16 >> 2] + 1;
     HEAP8[$2 + 15 | 0] = jsvStringIteratorGetCharAndNext($2 + 32 | 0);
     block2 : {
      if (!(!(HEAP8[$2 + 71 | 0] & 1) | HEAPU8[$2 + 15 | 0] != 46)) {
       HEAP8[$2 + 71 | 0] = 0;
       break block2;
      }
      HEAP32[$2 + 8 >> 2] = chtod(HEAP8[$2 + 15 | 0] << 24 >> 24);
      if (!(HEAP32[$2 + 8 >> 2] < HEAP32[$2 + 28 >> 2] & HEAP32[$2 + 8 >> 2] >= 0)) {
       jsvStringIteratorFree_161($2 + 32 | 0);
       HEAP8[$2 + 79 | 0] = 0;
       break block4;
      }
     }
     continue;
    }
    break;
   };
   jsvStringIteratorFree_161($2 + 32 | 0);
   HEAP8[$2 + 79 | 0] = HEAP32[$2 + 16 >> 2] > 0;
  }
  __stack_pointer = $2 + 80 | 0;
  return HEAP8[$2 + 79 | 0] & 1;
 }
 
 function jsvGetFloatAndUnLock($0) {
  var $1 = 0, $2 = 0.0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $2 = _jsvGetFloatAndUnLock(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return $2;
 }
 
 function jsvAsArrayIndexAndUnLock($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = jsvAsArrayIndex(HEAP32[$1 + 12 >> 2]);
  jsvUnLock(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 8 >> 2];
 }
 
 function jsvIsEmptyString($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!(jsvHasCharacterData(HEAP32[$1 + 8 >> 2]) & 1)) {
    HEAP8[$1 + 15 | 0] = 1;
    break block;
   }
   HEAP8[$1 + 15 | 0] = !jsvGetCharactersInVar(HEAP32[$1 + 8 >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvGetFlatStringFromPointer($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 12 >> 2];
  HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 8 >> 2] - 14;
  return HEAP32[$1 + 4 >> 2];
 }
 
 function jsvGetDataPointer($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  block : {
   if (jsvIsArrayBuffer(HEAP32[$2 + 24 >> 2]) & 1) {
    HEAP32[$2 + 16 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$2 + 24 >> 2], 0);
    HEAP32[$2 + 12 >> 2] = jsvGetDataPointer(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 20 >> 2]);
    jsvUnLock(HEAP32[$2 + 16 >> 2]);
    if (HEAP32[$2 + 12 >> 2]) {
     $0 = HEAP32[$2 + 24 >> 2];
     HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8);
     $0 = HEAP32[$2 + 24 >> 2];
     HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = HEAPU8[$0 + 4 | 0] << 16 | (HEAPU8[$0 + 2 | 0] | HEAPU8[$0 + 3 | 0] << 8);
    }
    HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
    break block;
   }
   if (jsvIsNativeString(HEAP32[$2 + 24 >> 2]) & 1) {
    $0 = HEAP32[$2 + 24 >> 2];
    HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
    $0 = HEAP32[$2 + 24 >> 2];
    HEAP32[$2 + 28 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
    break block;
   }
   if (jsvIsFlatString(HEAP32[$2 + 24 >> 2]) & 1) {
    $0 = jsvGetStringLength(HEAP32[$2 + 24 >> 2]);
    HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = $0;
    HEAP32[$2 + 28 >> 2] = jsvGetFlatStringPointer(HEAP32[$2 + 24 >> 2]);
    break block;
   }
   block1 : {
    if (!(jsvIsBasicString(HEAP32[$2 + 24 >> 2]) & 1)) {
     break block1
    }
    if (jsvGetLastChild(HEAP32[$2 + 24 >> 2]) & 65535) {
     break block1
    }
    $0 = jsvGetCharactersInVar(HEAP32[$2 + 24 >> 2]);
    HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = $0;
    HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 24 >> 2];
    break block;
   }
   HEAP32[$2 + 28 >> 2] = 0;
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jsvGetArrayBufferBackingString($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  block : {
   if (!HEAP32[$2 + 8 >> 2]) {
    HEAP32[$2 + 12 >> 2] = 0;
    break block;
   }
   jsvLockAgain(HEAP32[$2 + 8 >> 2]);
   if (HEAP32[$2 + 4 >> 2]) {
    HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = 0
   }
   while (1) {
    if (jsvIsArrayBuffer(HEAP32[$2 + 8 >> 2]) & 1) {
     if (HEAP32[$2 + 4 >> 2]) {
      $0 = HEAP32[$2 + 4 >> 2];
      $1 = HEAP32[$2 + 8 >> 2];
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8);
     }
     HEAP32[$2 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$2 + 8 >> 2]) & 65535);
     jsvUnLock(HEAP32[$2 + 8 >> 2]);
     HEAP32[$2 + 8 >> 2] = HEAP32[$2 >> 2];
     continue;
    }
    break;
   };
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 8 >> 2];
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function jsvGetLinesInString($0) {
  var $1 = 0;
  $1 = __stack_pointer - 48 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 44 >> 2] = $0;
  HEAP32[$1 + 40 >> 2] = 1;
  jsvStringIteratorNew($1 + 4 | 0, HEAP32[$1 + 44 >> 2], 0);
  while (1) {
   if (jsvStringIteratorHasChar_180($1 + 4 | 0) & 1) {
    if ((jsvStringIteratorGetCharAndNext($1 + 4 | 0) & 255) == 10) {
     HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1
    }
    continue;
   }
   break;
  };
  jsvStringIteratorFree_161($1 + 4 | 0);
  __stack_pointer = $1 + 48 | 0;
  return HEAP32[$1 + 40 >> 2];
 }
 
 function jsvGetCharsOnLine($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer + -64 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 60 >> 2] = $0;
  HEAP32[$2 + 56 >> 2] = $1;
  HEAP32[$2 + 52 >> 2] = 1;
  HEAP32[$2 + 48 >> 2] = 0;
  jsvStringIteratorNew($2 + 12 | 0, HEAP32[$2 + 60 >> 2], 0);
  while (1) {
   block : {
    if (!(jsvStringIteratorHasChar_180($2 + 12 | 0) & 1)) {
     break block
    }
    block1 : {
     if ((jsvStringIteratorGetCharAndNext($2 + 12 | 0) & 255) == 10) {
      HEAP32[$2 + 52 >> 2] = HEAP32[$2 + 52 >> 2] + 1;
      if (HEAPU32[$2 + 52 >> 2] > HEAPU32[$2 + 56 >> 2]) {
       break block
      }
      break block1;
     }
     if (HEAP32[$2 + 52 >> 2] == HEAP32[$2 + 56 >> 2]) {
      HEAP32[$2 + 48 >> 2] = HEAP32[$2 + 48 >> 2] + 1
     }
    }
    continue;
   }
   break;
  };
  jsvStringIteratorFree_161($2 + 12 | 0);
  __stack_pointer = $2 - -64 | 0;
  return HEAP32[$2 + 48 >> 2];
 }
 
 function jsvGetLineAndCol($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 80 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 76 >> 2] = $0;
  HEAP32[$4 + 72 >> 2] = $1;
  HEAP32[$4 + 68 >> 2] = $2;
  HEAP32[$4 + 64 >> 2] = $3;
  HEAP32[$4 + 60 >> 2] = 1;
  HEAP32[$4 + 56 >> 2] = 1;
  HEAP32[$4 + 52 >> 2] = 0;
  jsvStringIteratorNew($4 + 16 | 0, HEAP32[$4 + 76 >> 2], 0);
  while (1) {
   block : {
    if (!(jsvStringIteratorHasChar_180($4 + 16 | 0) & 1)) {
     break block
    }
    HEAP8[$4 + 15 | 0] = jsvStringIteratorGetCharAndNext($4 + 16 | 0);
    if (HEAP32[$4 + 52 >> 2] == HEAP32[$4 + 72 >> 2]) {
     break block
    }
    HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 60 >> 2] + 1;
    if (HEAPU8[$4 + 15 | 0] == 10) {
     HEAP32[$4 + 60 >> 2] = 1;
     HEAP32[$4 + 56 >> 2] = HEAP32[$4 + 56 >> 2] + 1;
    }
    HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 52 >> 2] + 1;
    continue;
   }
   break;
  };
  jsvStringIteratorFree_161($4 + 16 | 0);
  HEAP32[HEAP32[$4 + 68 >> 2] >> 2] = HEAP32[$4 + 56 >> 2];
  HEAP32[HEAP32[$4 + 64 >> 2] >> 2] = HEAP32[$4 + 60 >> 2];
  __stack_pointer = $4 + 80 | 0;
 }
 
 function jsvGetIndexFromLineAndCol($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 80 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 72 >> 2] = $0;
  HEAP32[$3 + 68 >> 2] = $1;
  HEAP32[$3 + 64 >> 2] = $2;
  HEAP32[$3 + 60 >> 2] = 1;
  HEAP32[$3 + 56 >> 2] = 1;
  HEAP32[$3 + 52 >> 2] = 0;
  jsvStringIteratorNew($3 + 16 | 0, HEAP32[$3 + 72 >> 2], 0);
  block3 : {
   while (1) {
    if (jsvStringIteratorHasChar_180($3 + 16 | 0) & 1) {
     HEAP8[$3 + 15 | 0] = jsvStringIteratorGetCharAndNext($3 + 16 | 0);
     if (!(!(HEAP32[$3 + 56 >> 2] == HEAP32[$3 + 68 >> 2] & HEAPU32[$3 + 60 >> 2] >= HEAPU32[$3 + 64 >> 2]) & HEAPU32[$3 + 56 >> 2] <= HEAPU32[$3 + 68 >> 2])) {
      jsvStringIteratorFree_161($3 + 16 | 0);
      if (HEAPU32[$3 + 56 >> 2] > HEAPU32[$3 + 68 >> 2]) {
       $0 = HEAP32[$3 + 52 >> 2] - 1 | 0
      } else {
       $0 = HEAP32[$3 + 52 >> 2]
      }
      HEAP32[$3 + 76 >> 2] = $0;
      break block3;
     }
     HEAP32[$3 + 60 >> 2] = HEAP32[$3 + 60 >> 2] + 1;
     if (HEAPU8[$3 + 15 | 0] == 10) {
      HEAP32[$3 + 60 >> 2] = 1;
      HEAP32[$3 + 56 >> 2] = HEAP32[$3 + 56 >> 2] + 1;
     }
     HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
     continue;
    }
    break;
   };
   jsvStringIteratorFree_161($3 + 16 | 0);
   HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 52 >> 2];
  }
  __stack_pointer = $3 + 80 | 0;
  return HEAP32[$3 + 76 >> 2];
 }
 
 function jsvAppendString($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 44 >> 2] = $0;
  HEAP32[$2 + 40 >> 2] = $1;
  jsvStringIteratorNew($2 + 4 | 0, HEAP32[$2 + 44 >> 2], 0);
  jsvStringIteratorGotoEnd($2 + 4 | 0);
  while (1) {
   if (HEAPU8[HEAP32[$2 + 40 >> 2]]) {
    $0 = HEAP32[$2 + 40 >> 2];
    HEAP32[$2 + 40 >> 2] = $0 + 1;
    jsvStringIteratorAppend($2 + 4 | 0, HEAP8[$0 | 0] << 24 >> 24);
    continue;
   }
   break;
  };
  jsvStringIteratorFree_161($2 + 4 | 0);
  __stack_pointer = $2 + 48 | 0;
 }
 
 function jsvAppendStringBuf($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 44 >> 2] = $0;
  HEAP32[$3 + 40 >> 2] = $1;
  HEAP32[$3 + 36 >> 2] = $2;
  jsvStringIteratorNew($3, HEAP32[$3 + 44 >> 2], 0);
  jsvStringIteratorGotoEnd($3);
  while (1) {
   if (HEAP32[$3 + 36 >> 2]) {
    $0 = HEAP32[$3 + 40 >> 2];
    HEAP32[$3 + 40 >> 2] = $0 + 1;
    jsvStringIteratorAppend($3, HEAP8[$0 | 0] << 24 >> 24);
    HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 36 >> 2] - 1;
    continue;
   }
   break;
  };
  jsvStringIteratorFree_161($3);
  __stack_pointer = $3 + 48 | 0;
 }
 
 function jsvStringIteratorPrintfCallback($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  while (1) {
   if (HEAPU8[HEAP32[$2 + 12 >> 2]]) {
    $1 = HEAP32[$2 + 8 >> 2];
    $0 = HEAP32[$2 + 12 >> 2];
    HEAP32[$2 + 12 >> 2] = $0 + 1;
    jsvStringIteratorAppend($1, HEAP8[$0 | 0] << 24 >> 24);
    continue;
   }
   break;
  };
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsvVarPrintf($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer + -64 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 56 >> 2] = $0;
  HEAP32[$2 + 52 >> 2] = jsvNewFromEmptyString_186();
  block : {
   if (!HEAP32[$2 + 52 >> 2]) {
    HEAP32[$2 + 60 >> 2] = 0;
    break block;
   }
   jsvStringIteratorNew($2 + 16 | 0, HEAP32[$2 + 52 >> 2], 0);
   jsvStringIteratorGotoEnd($2 + 16 | 0);
   HEAP32[$2 + 12 >> 2] = $1;
   vcbprintf(2, $2 + 16 | 0, HEAP32[$2 + 56 >> 2], HEAP32[$2 + 12 >> 2]);
   jsvStringIteratorFree_161($2 + 16 | 0);
   HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 52 >> 2];
  }
  __stack_pointer = $2 - -64 | 0;
  return HEAP32[$2 + 60 >> 2];
 }
 
 function jsvNewFromStringVar($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP32[$3 + 16 >> 2] = $2;
  block1 : {
   block : {
    if (!(jsvIsNativeString(HEAP32[$3 + 24 >> 2]) & 1)) {
     if (!(jsvIsFlashString(HEAP32[$3 + 24 >> 2]) & 1)) {
      break block
     }
    }
    HEAP32[$3 + 12 >> 2] = jsvGetStringLength(HEAP32[$3 + 24 >> 2]);
    if (HEAPU32[$3 + 20 >> 2] > HEAPU32[$3 + 12 >> 2]) {
     HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 12 >> 2]
    }
    if (HEAPU32[$3 + 12 >> 2] < HEAP32[$3 + 20 >> 2] + HEAP32[$3 + 16 >> 2] >>> 0) {
     HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 12 >> 2] - HEAP32[$3 + 20 >> 2]
    }
    $0 = HEAP32[$3 + 24 >> 2];
    HEAP32[$3 + 8 >> 2] = jsvNewWithFlags((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63);
    $0 = HEAP32[$3 + 8 >> 2];
    $1 = HEAP32[$3 + 24 >> 2];
    $1 = HEAP32[$3 + 20 >> 2] + (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24)) | 0;
    HEAP8[$0 | 0] = $1;
    HEAP8[$0 + 1 | 0] = $1 >>> 8;
    HEAP8[$0 + 2 | 0] = $1 >>> 16;
    HEAP8[$0 + 3 | 0] = $1 >>> 24;
    $0 = HEAP32[$3 + 8 >> 2];
    $1 = HEAP32[$3 + 16 >> 2];
    HEAP8[$0 + 4 | 0] = $1;
    HEAP8[$0 + 5 | 0] = $1 >>> 8;
    HEAP8[$0 + 6 | 0] = $1 >>> 16;
    HEAP8[$0 + 7 | 0] = $1 >>> 24;
    HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 8 >> 2];
    break block1;
   }
   if (jsvIsFlatString(HEAP32[$3 + 24 >> 2]) & 1) {
    HEAP32[$3 + 4 >> 2] = jsvGetCharactersInVar(HEAP32[$3 + 24 >> 2]);
    block2 : {
     if (HEAPU32[$3 + 20 >> 2] >= HEAPU32[$3 + 4 >> 2]) {
      HEAP32[$3 + 4 >> 2] = 0;
      break block2;
     }
     HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] - HEAP32[$3 + 20 >> 2];
    }
    if (HEAPU32[$3 + 4 >> 2] > HEAPU32[$3 + 16 >> 2]) {
     HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 16 >> 2]
    }
    if (HEAPU32[$3 + 4 >> 2] > 19) {
     HEAP32[$3 >> 2] = jsvNewFlatStringFromStringVar(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 4 >> 2]);
     if (HEAP32[$3 >> 2]) {
      HEAP32[$3 + 28 >> 2] = HEAP32[$3 >> 2];
      break block1;
     }
    }
   }
   HEAP32[$3 + 28 >> 2] = jsvNewWritableStringFromStringVar(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2]);
  }
  __stack_pointer = $3 + 32 | 0;
  return HEAP32[$3 + 28 >> 2];
 }
 
 function jsvGetCharInString($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer + -64 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 56 >> 2] = $0;
  HEAP32[$2 + 52 >> 2] = $1;
  block : {
   if (!(jsvIsString(HEAP32[$2 + 56 >> 2]) & 1)) {
    HEAP32[$2 + 60 >> 2] = 0;
    break block;
   }
   jsvStringIteratorNewUTF8($2 + 16 | 0, HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2]);
   HEAP32[$2 + 12 >> 2] = jsvStringIteratorGetUTF8CharAndNext($2 + 16 | 0);
   jsvStringIteratorFree_161($2 + 16 | 0);
   HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 12 >> 2];
  }
  __stack_pointer = $2 - -64 | 0;
  return HEAP32[$2 + 60 >> 2];
 }
 
 function jsvSetCharInString($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 44 >> 2] = $0;
  HEAP32[$4 + 40 >> 2] = $1;
  HEAP8[$4 + 39 | 0] = $2;
  HEAP8[$4 + 38 | 0] = $3;
  if (jsvIsString(HEAP32[$4 + 44 >> 2]) & 1) {
   jsvStringIteratorNew($4, HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2]);
   if (HEAP8[$4 + 38 | 0] & 1) {
    HEAP8[$4 + 39 | 0] = jsvStringIteratorGetChar_182($4) << 24 >> 24 | HEAP8[$4 + 39 | 0] << 24 >> 24
   }
   jsvStringIteratorSetChar($4, HEAP8[$4 + 39 | 0] << 24 >> 24);
   jsvStringIteratorFree_161($4);
  }
  __stack_pointer = $4 + 48 | 0;
 }
 
 function jsvGetStringIndexOf($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer + -64 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 56 >> 2] = $0;
  HEAP8[$2 + 55 | 0] = $1;
  jsvStringIteratorNew($2 + 16 | 0, HEAP32[$2 + 56 >> 2], 0);
  block : {
   while (1) {
    if (jsvStringIteratorHasChar_180($2 + 16 | 0) & 1) {
     if ((jsvStringIteratorGetChar_182($2 + 16 | 0) & 255) == HEAPU8[$2 + 55 | 0]) {
      HEAP32[$2 + 12 >> 2] = jsvStringIteratorGetIndex_242($2 + 16 | 0);
      jsvStringIteratorFree_161($2 + 16 | 0);
      HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 12 >> 2];
      break block;
     } else {
      jsvStringIteratorNext($2 + 16 | 0);
      continue;
     }
    }
    break;
   };
   jsvStringIteratorFree_161($2 + 16 | 0);
   HEAP32[$2 + 60 >> 2] = -1;
  }
  __stack_pointer = $2 - -64 | 0;
  return HEAP32[$2 + 60 >> 2];
 }
 
 function jsvStringIteratorGetIndex_242($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + HEAP32[HEAP32[$1 + 12 >> 2] >> 2] | 0;
 }
 
 function jsvConvertFromUTF8Index($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  return HEAP32[$2 + 8 >> 2];
 }
 
 function jsvConvertToUTF8Index($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  return HEAP32[$2 + 8 >> 2];
 }
 
 function jsvGetArrayBufferLength($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  return HEAPU8[$0 + 4 | 0] << 16 | (HEAPU8[$0 + 2 | 0] | HEAPU8[$0 + 3 | 0] << 8);
 }
 
 function jsvGetChildren($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP16[$1 + 6 >> 1] = jsvGetFirstChild(HEAP32[$1 + 12 >> 2]);
  while (1) {
   if (HEAPU16[$1 + 6 >> 1]) {
    HEAP32[$1 >> 2] = jsvLock(HEAPU16[$1 + 6 >> 1]);
    HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
    HEAP16[$1 + 6 >> 1] = jsvGetNextSibling(HEAP32[$1 >> 2]);
    jsvUnLock(HEAP32[$1 >> 2]);
    continue;
   }
   break;
  };
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 8 >> 2];
 }
 
 function _jsvGetIntegerAndUnLock($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = jsvGetInteger(HEAP32[$1 + 12 >> 2]);
  jsvUnLock(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 8 >> 2];
 }
 
 function jsvGetArrayIndex($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  HEAP16[$2 + 18 >> 1] = jsvGetLastChild(HEAP32[$2 + 24 >> 2]);
  HEAP32[$2 + 12 >> 2] = 0;
  block : {
   while (1) {
    if (HEAPU16[$2 + 18 >> 1]) {
     HEAP32[$2 + 8 >> 2] = jsvLock(HEAPU16[$2 + 18 >> 1]);
     if (jsvIsInt(HEAP32[$2 + 8 >> 2]) & 1) {
      $0 = HEAP32[$2 + 8 >> 2];
      HEAP32[$2 + 12 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
      if (HEAP32[$2 + 12 >> 2] == HEAP32[$2 + 20 >> 2]) {
       HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 8 >> 2];
       break block;
      }
      jsvUnLock(HEAP32[$2 + 8 >> 2]);
     } else {
      HEAP16[$2 + 18 >> 1] = jsvGetPrevSibling(HEAP32[$2 + 8 >> 2]);
      jsvUnLock(HEAP32[$2 + 8 >> 2]);
      continue;
     }
    }
    break;
   };
   if (HEAP32[$2 + 20 >> 2] > HEAP32[$2 + 12 >> 2]) {
    HEAP32[$2 + 28 >> 2] = 0;
    break block;
   }
   block1 : {
    if (HEAP32[$2 + 20 >> 2] > (HEAP32[$2 + 12 >> 2] / 2 | 0)) {
     while (1) {
      if (HEAPU16[$2 + 18 >> 1]) {
       HEAP32[$2 + 4 >> 2] = jsvLock(HEAPU16[$2 + 18 >> 1]);
       $0 = HEAP32[$2 + 4 >> 2];
       if (HEAP32[$2 + 20 >> 2] == (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24))) {
        HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 4 >> 2];
        break block;
       } else {
        HEAP16[$2 + 18 >> 1] = jsvGetPrevSibling(HEAP32[$2 + 4 >> 2]);
        jsvUnLock(HEAP32[$2 + 4 >> 2]);
        continue;
       }
      }
      break;
     };
     break block1;
    }
    HEAP16[$2 + 18 >> 1] = jsvGetFirstChild(HEAP32[$2 + 24 >> 2]);
    while (1) {
     if (HEAPU16[$2 + 18 >> 1]) {
      HEAP32[$2 >> 2] = jsvLock(HEAPU16[$2 + 18 >> 1]);
      $0 = HEAP32[$2 >> 2];
      if (HEAP32[$2 + 20 >> 2] == (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24))) {
       HEAP32[$2 + 28 >> 2] = HEAP32[$2 >> 2];
       break block;
      } else {
       HEAP16[$2 + 18 >> 1] = jsvGetNextSibling(HEAP32[$2 >> 2]);
       jsvUnLock(HEAP32[$2 >> 2]);
       continue;
      }
     }
     break;
    };
   }
   HEAP32[$2 + 28 >> 2] = 0;
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jsvGetLongInteger($0) {
  var $1 = 0, $2 = 0, $3 = 0.0, $4 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 4 >> 2] = $0;
  block : {
   if (jsvIsInt(HEAP32[$1 + 4 >> 2]) & 1) {
    $2 = jsvGetInteger(HEAP32[$1 + 4 >> 2]);
    $0 = $2 >> 31;
    HEAP32[$1 + 8 >> 2] = $2;
    HEAP32[$1 + 12 >> 2] = $0;
    break block;
   }
   $2 = $1;
   $3 = jsvGetFloat(HEAP32[$1 + 4 >> 2]);
   if (Math_abs($3) < 9223372036854775808.0) {
    if (Math_abs($3) >= 1.0) {
     $0 = ~~($3 > 0.0 ? Math_min(Math_floor($3 * 2.3283064365386963e-10), 4294967295.0) : Math_ceil(($3 - +(~~$3 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0
    } else {
     $0 = 0
    }
    $4 = ~~$3 >>> 0;
   } else {
    $0 = -2147483648
   }
   HEAP32[$2 + 8 >> 2] = $4;
   HEAP32[$2 + 12 >> 2] = $0;
  }
  __stack_pointer = $1 + 16 | 0;
  $2 = HEAP32[$1 + 12 >> 2];
  i64toi32_i32$HIGH_BITS = $2;
  $0 = HEAP32[$1 + 8 >> 2];
  return $0;
 }
 
 function jsvGetLongIntegerAndUnLock($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 >> 2] = jsvGetLongInteger(HEAP32[$1 + 12 >> 2]);
  HEAP32[$1 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
  jsvUnLock(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  return HEAP32[$1 >> 2];
 }
 
 function jsvSetInteger($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $0 = HEAP32[$2 + 12 >> 2];
  $1 = HEAP32[$2 + 8 >> 2];
  HEAP8[$0 | 0] = $1;
  HEAP8[$0 + 1 | 0] = $1 >>> 8;
  HEAP8[$0 + 2 | 0] = $1 >>> 16;
  HEAP8[$0 + 3 | 0] = $1 >>> 24;
 }
 
 function _jsvGetFloatAndUnLock($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAPF64[$1 >> 3] = jsvGetFloat(HEAP32[$1 + 12 >> 2]);
  jsvUnLock(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return HEAPF64[$1 >> 3];
 }
 
 function jsvAsNumber($0) {
  var $1 = 0;
  $1 = __stack_pointer - 80 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 72 >> 2] = $0;
  block1 : {
   block : {
    if (!(jsvIsInt(HEAP32[$1 + 72 >> 2]) & 1)) {
     if (!(jsvIsFloat(HEAP32[$1 + 72 >> 2]) & 1)) {
      break block
     }
    }
    HEAP32[$1 + 76 >> 2] = jsvLockAgain(HEAP32[$1 + 72 >> 2]);
    break block1;
   }
   block3 : {
    block2 : {
     if (jsvIsBoolean(HEAP32[$1 + 72 >> 2]) & 1) {
      break block2
     }
     if (jsvIsPin(HEAP32[$1 + 72 >> 2]) & 1) {
      break block2
     }
     if (jsvIsNull(HEAP32[$1 + 72 >> 2]) & 1) {
      break block2
     }
     if (jsvIsBoolean(HEAP32[$1 + 72 >> 2]) & 1) {
      break block2
     }
     if (!(jsvIsArrayBufferName(HEAP32[$1 + 72 >> 2]) & 1)) {
      break block3
     }
    }
    HEAP32[$1 + 76 >> 2] = jsvNewFromInteger(jsvGetInteger(HEAP32[$1 + 72 >> 2]));
    break block1;
   }
   block4 : {
    if (!(jsvIsString(HEAP32[$1 + 72 >> 2]) & 1)) {
     break block4
    }
    if (!(jsvIsEmptyString(HEAP32[$1 + 72 >> 2]) & 1)) {
     if (!(jsvIsStringNumericInt(HEAP32[$1 + 72 >> 2], 0) & 1)) {
      break block4
     }
    }
    if ((jsvGetString(HEAP32[$1 + 72 >> 2], $1, 64) | 0) == 64) {
     jsExceptionHere(1, 128295, 0);
     HEAP32[$1 + 76 >> 2] = jsvNewFromFloat(NaN);
     break block1;
    }
    HEAP32[$1 + 76 >> 2] = jsvNewFromLongInteger(stringToInt($1), i64toi32_i32$HIGH_BITS);
    break block1;
   }
   HEAP32[$1 + 76 >> 2] = jsvNewFromFloat(jsvGetFloat(HEAP32[$1 + 72 >> 2]));
  }
  __stack_pointer = $1 + 80 | 0;
  return HEAP32[$1 + 76 >> 2];
 }
 
 function jsvAsNumberAndUnLock($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = jsvAsNumber(HEAP32[$1 + 12 >> 2]);
  jsvUnLock(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 8 >> 2];
 }
 
 function jsvGetBoolAndUnLock($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = _jsvGetBoolAndUnLock(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return $0 & 1;
 }
 
 function _jsvGetBoolAndUnLock($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP8[$1 + 11 | 0] = jsvGetBool(HEAP32[$1 + 12 >> 2]) & 1;
  jsvUnLock(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return HEAP8[$1 + 11 | 0] & 1;
 }
 
 function jsvExecuteGetter($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  block : {
   if (!(jsvIsGetterOrSetter(HEAP32[$2 + 20 >> 2]) & 1)) {
    HEAP32[$2 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 20 >> 2], 125075);
   if (!(jsvIsFunction(HEAP32[$2 + 16 >> 2]) & 1)) {
    jsvUnLock(HEAP32[$2 + 16 >> 2]);
    HEAP32[$2 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 12 >> 2] = jspExecuteFunction(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 24 >> 2], 0, 0);
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jsvObjectGetChildIfExists($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  block : {
   if (!HEAP32[$2 + 8 >> 2]) {
    HEAP32[$2 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 12 >> 2] = jsvSkipNameAndUnLock(jsvFindChildFromString(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]));
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function jsvExecuteSetter($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  block : {
   if (!(jsvIsGetterOrSetter(HEAP32[$3 + 8 >> 2]) & 1)) {
    break block
   }
   HEAP32[$3 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 8 >> 2], 125061);
   if (!(jsvIsFunction(HEAP32[$3 >> 2]) & 1)) {
    jsvUnLock(HEAP32[$3 >> 2]);
    break block;
   }
   if (!HEAP32[$3 >> 2]) {
    break block
   }
   jsvUnLock2(jspExecuteFunction(HEAP32[$3 >> 2], HEAP32[$3 + 12 >> 2], 1, $3 + 4 | 0), HEAP32[$3 >> 2]);
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jsvAddGetterOrSetter($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP8[$4 + 23 | 0] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  HEAP32[$4 + 12 >> 2] = jsvFindChildFromVar(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2], 1);
  if (jsvIsName(HEAP32[$4 + 12 >> 2]) & 1) {
   HEAP32[$4 + 8 >> 2] = jsvGetValueOfName(HEAP32[$4 + 12 >> 2]);
   if (!(jsvIsGetterOrSetter(HEAP32[$4 + 8 >> 2]) & 1)) {
    jsvUnLock(HEAP32[$4 + 8 >> 2]);
    HEAP32[$4 + 8 >> 2] = jsvNewWithFlags(6);
    jsvSetValueOfName(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2]);
   }
   if (jsvIsGetterOrSetter(HEAP32[$4 + 8 >> 2]) & 1) {
    jsvObjectSetChild(HEAP32[$4 + 8 >> 2], HEAP8[$4 + 23 | 0] & 1 ? 125075 : 125061, HEAP32[$4 + 16 >> 2])
   }
   jsvUnLock(HEAP32[$4 + 8 >> 2]);
  }
  jsvUnLock(HEAP32[$4 + 12 >> 2]);
  __stack_pointer = $4 + 32 | 0;
 }
 
 function jsvFindChildFromVar($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP8[$3 + 19 | 0] = $2;
  HEAP16[$3 + 10 >> 1] = jsvGetFirstChild(HEAP32[$3 + 24 >> 2]);
  block : {
   while (1) {
    if (HEAPU16[$3 + 10 >> 1]) {
     HEAP32[$3 + 12 >> 2] = jsvLock(HEAPU16[$3 + 10 >> 1]);
     if (jsvIsBasicVarEqual(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 20 >> 2]) & 1) {
      break block
     }
     HEAP16[$3 + 10 >> 1] = jsvGetNextSibling(HEAP32[$3 + 12 >> 2]);
     jsvUnLock(HEAP32[$3 + 12 >> 2]);
     continue;
    }
    break;
   };
   HEAP32[$3 + 12 >> 2] = 0;
   if (!(!(HEAP8[$3 + 19 | 0] & 1) | !HEAP32[$3 + 20 >> 2])) {
    HEAP32[$3 + 12 >> 2] = jsvAsName(HEAP32[$3 + 20 >> 2]);
    jsvAddName(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 12 >> 2]);
   }
  }
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
  __stack_pointer = $3 + 32 | 0;
  return HEAP32[$3 + 28 >> 2];
 }
 
 function jsvGetValueOfName($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP16[$1 + 6 >> 1] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   if (HEAPU16[$1 + 6 >> 1] == 14) {
    HEAP32[$1 + 12 >> 2] = jsvArrayBufferGetFromName(HEAP32[$1 + 8 >> 2]);
    break block;
   }
   if (!((HEAPU16[$1 + 6 >> 1] < 18 | HEAPU16[$1 + 6 >> 1] > 22) & HEAPU16[$1 + 6 >> 1] != 16)) {
    HEAP32[$1 + 12 >> 2] = jsvNewFromInteger(jsvGetFirstChildSigned(HEAP32[$1 + 8 >> 2]) << 16 >> 16);
    break block;
   }
   if (HEAPU16[$1 + 6 >> 1] == 17) {
    HEAP32[$1 + 12 >> 2] = jsvNewFromBool((jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535) != 0);
    break block;
   }
   if (!(HEAPU16[$1 + 6 >> 1] < 14 | HEAPU16[$1 + 6 >> 1] > 27)) {
    HEAP32[$1 + 12 >> 2] = jsvLockSafe(jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535);
    break block;
   }
   HEAP32[$1 + 12 >> 2] = 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvObjectSetChild($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP32[$3 + 16 >> 2] = $2;
  block : {
   if (!(jsvHasChildren(HEAP32[$3 + 24 >> 2]) & 1)) {
    HEAP32[$3 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$3 + 12 >> 2] = jsvFindOrAddChildFromString(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
   if (!HEAP32[$3 + 12 >> 2]) {
    HEAP32[$3 + 28 >> 2] = 0;
    break block;
   }
   jsvSetValueOfName(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 16 >> 2]);
   jsvUnLock(HEAP32[$3 + 12 >> 2]);
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 16 >> 2];
  }
  __stack_pointer = $3 + 32 | 0;
  return HEAP32[$3 + 28 >> 2];
 }
 
 function jsvAsName($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   if (!(jsvGetRefs(HEAP32[$1 + 8 >> 2]) & 65535)) {
    if (!(jsvIsName(HEAP32[$1 + 8 >> 2]) & 1)) {
     HEAP32[$1 + 12 >> 2] = jsvMakeIntoVariableName(jsvLockAgain(HEAP32[$1 + 8 >> 2]), 0);
     break block;
    }
    HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[$1 + 8 >> 2]);
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvMakeIntoVariableName(jsvCopy(HEAP32[$1 + 8 >> 2], 0), 0);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvArrayBufferGetFromName($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = jsvGetInteger(HEAP32[$1 + 12 >> 2]);
  HEAP32[$1 + 4 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$1 + 12 >> 2]) & 65535);
  HEAP32[$1 >> 2] = jsvArrayBufferGet(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 8 >> 2]);
  jsvUnLock(HEAP32[$1 + 4 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 >> 2];
 }
 
 function jsvFindOrAddChildFromString($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = jsvFindChildFromString(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
  if (!HEAP32[$2 + 4 >> 2]) {
   HEAP32[$2 + 4 >> 2] = jsvNewNameFromString(HEAP32[$2 + 8 >> 2]);
   if (HEAP32[$2 + 4 >> 2]) {
    jsvAddName(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2])
   }
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 4 >> 2];
 }
 
 function jsvReplaceWith($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 44 >> 2] = $0;
  HEAP32[$2 + 40 >> 2] = $1;
  block : {
   if (jsvIsArrayBufferName(HEAP32[$2 + 44 >> 2]) & 1) {
    HEAP32[$2 + 36 >> 2] = jsvGetInteger(HEAP32[$2 + 44 >> 2]);
    HEAP32[$2 + 32 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$2 + 44 >> 2]) & 65535);
    jsvArrayBufferSet(HEAP32[$2 + 32 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 40 >> 2]);
    jsvUnLock(HEAP32[$2 + 32 >> 2]);
    break block;
   }
   if (!(jsvIsName(HEAP32[$2 + 44 >> 2]) & 1)) {
    HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 44 >> 2];
    jsExceptionHere(1, 126484, $2 + 16 | 0);
    break block;
   }
   if (jsvIsConstant(HEAP32[$2 + 44 >> 2]) & 1) {
    jsExceptionHere(3, 124797, 0);
    break block;
   }
   HEAP32[$2 + 28 >> 2] = jsvGetValueOfName(HEAP32[$2 + 44 >> 2]);
   if (jsvIsGetterOrSetter(HEAP32[$2 + 28 >> 2]) & 1) {
    block1 : {
     if (jsvIsNewChild(HEAP32[$2 + 44 >> 2]) & 1) {
      $0 = jsvLock(jsvGetNextSibling(HEAP32[$2 + 44 >> 2]) & 65535);
      break block1;
     }
     $0 = 0;
    }
    HEAP32[$2 + 24 >> 2] = $0;
    jsvExecuteSetter(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 40 >> 2]);
    jsvUnLock2(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2]);
    break block;
   }
   jsvUnLock(HEAP32[$2 + 28 >> 2]);
   jsvSetValueOfName(HEAP32[$2 + 44 >> 2], HEAP32[$2 + 40 >> 2]);
   if (!(jsvIsNewChild(HEAP32[$2 + 44 >> 2]) & 1)) {
    break block
   }
   HEAP32[$2 + 20 >> 2] = jsvLock(jsvGetNextSibling(HEAP32[$2 + 44 >> 2]) & 65535);
   if (!(jsvIsString(HEAP32[$2 + 20 >> 2]) & 1)) {
    block2 : {
     if (!(jsvHasChildren(HEAP32[$2 + 20 >> 2]) & 1)) {
      $0 = HEAP32[$2 + 44 >> 2];
      HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 20 >> 2];
      HEAP32[$2 >> 2] = $0;
      jsExceptionHere(1, 126377, $2);
      break block2;
     }
     jsvUnRef(HEAP32[$2 + 20 >> 2]);
     jsvSetNextSibling(HEAP32[$2 + 44 >> 2], 0);
     jsvUnRef(HEAP32[$2 + 20 >> 2]);
     jsvSetPrevSibling(HEAP32[$2 + 44 >> 2], 0);
     jsvAddName(HEAP32[$2 + 20 >> 2], HEAP32[$2 + 44 >> 2]);
    }
   }
   jsvUnLock(HEAP32[$2 + 20 >> 2]);
  }
  __stack_pointer = $2 + 48 | 0;
 }
 
 function jsvArrayBufferSet($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 80 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 76 >> 2] = $0;
  HEAP32[$3 + 72 >> 2] = $1;
  HEAP32[$3 + 68 >> 2] = $2;
  jsvArrayBufferIteratorNew($3 + 12 | 0, HEAP32[$3 + 76 >> 2], HEAP32[$3 + 72 >> 2]);
  jsvArrayBufferIteratorSetValue($3 + 12 | 0, HEAP32[$3 + 68 >> 2], 0);
  jsvArrayBufferIteratorFree($3 + 12 | 0);
  __stack_pointer = $3 + 80 | 0;
 }
 
 function jsvReplaceWithOrAddToRoot($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  block : {
   if (jsvGetRefs(HEAP32[$2 + 12 >> 2]) & 65535) {
    break block
   }
   if (!(jsvIsName(HEAP32[$2 + 12 >> 2]) & 1)) {
    break block
   }
   block1 : {
    if (jsvIsArrayBufferName(HEAP32[$2 + 12 >> 2]) & 1) {
     break block1
    }
    if (jsvIsNewChild(HEAP32[$2 + 12 >> 2]) & 1) {
     break block1
    }
    jsvAddName(HEAP32[92130], HEAP32[$2 + 12 >> 2]);
   }
  }
  jsvReplaceWith(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsvGetFunctionArgumentLength($0) {
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 24 >> 2] = $0;
  HEAP32[$1 + 20 >> 2] = jsvNewEmptyArray();
  block : {
   if (!HEAP32[$1 + 20 >> 2]) {
    HEAP32[$1 + 28 >> 2] = 0;
    break block;
   }
   jsvObjectIteratorNew($1 + 16 | 0, HEAP32[$1 + 24 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue($1 + 16 | 0) & 1) {
     HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetKey($1 + 16 | 0);
     if (jsvIsFunctionParameter(HEAP32[$1 + 12 >> 2]) & 1) {
      HEAP32[$1 + 8 >> 2] = jsvSkipOneName(HEAP32[$1 + 12 >> 2]);
      jsvArrayPushAndUnLock(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 8 >> 2]);
     }
     jsvUnLock(HEAP32[$1 + 12 >> 2]);
     jsvObjectIteratorNext($1 + 16 | 0);
     continue;
    }
    break;
   };
   jsvObjectIteratorFree($1 + 16 | 0);
   HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
  }
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 28 >> 2];
 }
 
 function jsvObjectIteratorHasValue($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
 }
 
 function jsvObjectIteratorGetKey($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvSkipOneName($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jsvSkipNameWithParent(HEAP32[$1 + 12 >> 2], 0, 0);
  __stack_pointer = $1 + 16 | 0;
  return $0;
 }
 
 function jsvObjectIteratorFree($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvSkipNameWithParent($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 40 >> 2] = $0;
  HEAP8[$3 + 39 | 0] = $1;
  HEAP32[$3 + 32 >> 2] = $2;
  block : {
   if (!HEAP32[$3 + 40 >> 2]) {
    HEAP32[$3 + 44 >> 2] = 0;
    break block;
   }
   $0 = HEAP32[$3 + 40 >> 2];
   HEAP16[$3 + 30 >> 1] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   if (HEAPU16[$3 + 30 >> 1] == 14) {
    HEAP32[$3 + 44 >> 2] = jsvArrayBufferGetFromName(HEAP32[$3 + 40 >> 2]);
    break block;
   }
   if (!((HEAPU16[$3 + 30 >> 1] < 18 | HEAPU16[$3 + 30 >> 1] > 22) & HEAPU16[$3 + 30 >> 1] != 16)) {
    HEAP32[$3 + 44 >> 2] = jsvNewFromInteger(jsvGetFirstChildSigned(HEAP32[$3 + 40 >> 2]) << 16 >> 16);
    break block;
   }
   if (HEAPU16[$3 + 30 >> 1] == 17) {
    HEAP32[$3 + 44 >> 2] = jsvNewFromBool((jsvGetFirstChild(HEAP32[$3 + 40 >> 2]) & 65535) != 0);
    break block;
   }
   HEAP32[$3 + 24 >> 2] = jsvLockAgain(HEAP32[$3 + 40 >> 2]);
   while (1) {
    $0 = 0;
    block2 : {
     $0 = HEAPU16[$3 + 30 >> 1] >= 14 ? HEAPU16[$3 + 30 >> 1] <= 27 : $0;
     if (!$0) {
      break block2
     }
     HEAP16[$3 + 22 >> 1] = jsvGetFirstChild(HEAP32[$3 + 24 >> 2]);
     jsvUnLock(HEAP32[$3 + 24 >> 2]);
     if (!HEAPU16[$3 + 22 >> 1]) {
      if (HEAP32[$3 + 24 >> 2] == HEAP32[$3 + 40 >> 2]) {
       jsvCheckReferenceError(HEAP32[$3 + 40 >> 2])
      }
      HEAP32[$3 + 44 >> 2] = 0;
      break block;
     }
     HEAP32[$3 + 24 >> 2] = jsvLock(HEAPU16[$3 + 22 >> 1]);
     $0 = HEAP32[$3 + 24 >> 2];
     HEAP16[$3 + 30 >> 1] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
     if (!(HEAP8[$3 + 39 | 0] & 1)) {
      break block2
     }
     continue;
    }
    break;
   };
   if (jsvIsGetterOrSetter(HEAP32[$3 + 24 >> 2]) & 1) {
    block3 : {
     if (jsvIsNewChild(HEAP32[$3 + 40 >> 2]) & 1) {
      $0 = jsvLock(jsvGetNextSibling(HEAP32[$3 + 40 >> 2]) & 65535);
      break block3;
     }
     $0 = 0;
    }
    HEAP32[$3 + 16 >> 2] = $0;
    if (HEAP32[$3 + 16 >> 2]) {
     $0 = HEAP32[$3 + 16 >> 2]
    } else {
     $0 = HEAP32[$3 + 32 >> 2]
    }
    HEAP32[$3 + 12 >> 2] = jsvExecuteGetter($0, HEAP32[$3 + 24 >> 2]);
    jsvUnLock2(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 24 >> 2]);
    HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 12 >> 2];
   }
   HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 24 >> 2];
  }
  __stack_pointer = $3 + 48 | 0;
  return HEAP32[$3 + 44 >> 2];
 }
 
 function jsvIsVariableDefined($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = 1;
  block : {
   if (!(jsvIsName(HEAP32[$1 + 12 >> 2]) & 1)) {
    break block
   }
   $0 = 1;
   if (jsvIsNameWithValue(HEAP32[$1 + 12 >> 2]) & 1) {
    break block
   }
   $0 = (jsvGetFirstChild(HEAP32[$1 + 12 >> 2]) & 65535) != 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return $0;
 }
 
 function jsvCheckReferenceError($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  block : {
   if (!(jsvIsBasicName(HEAP32[$1 + 12 >> 2]) & 1)) {
    break block
   }
   if (jsvGetRefs(HEAP32[$1 + 12 >> 2]) & 65535) {
    break block
   }
   if (jsvIsNewChild(HEAP32[$1 + 12 >> 2]) & 1) {
    break block
   }
   if (jsvGetFirstChild(HEAP32[$1 + 12 >> 2]) & 65535) {
    break block
   }
   HEAP32[$1 >> 2] = HEAP32[$1 + 12 >> 2];
   jsExceptionHere(5, 138938, $1);
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvSkipToLastName($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = jsvLockAgain(HEAP32[$1 + 8 >> 2]);
  while (1) {
   block : {
    if (!(jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535)) {
     break block
    }
    HEAP32[$1 + 4 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535);
    block1 : {
     if (jsvIsName(HEAP32[$1 + 4 >> 2]) & 1) {
      jsvUnLock(HEAP32[$1 + 8 >> 2]);
      HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 4 >> 2];
      break block1;
     }
     jsvUnLock(HEAP32[$1 + 4 >> 2]);
     break block;
    }
    continue;
   }
   break;
  };
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2];
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvSkipOneNameAndUnLock($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = jsvSkipOneName(HEAP32[$1 + 12 >> 2]);
  jsvUnLock(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 8 >> 2];
 }
 
 function jsvIsStringEqualOrStartsWithOffset($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer + -64 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 56 >> 2] = $0;
  HEAP32[$5 + 52 >> 2] = $1;
  HEAP8[$5 + 51 | 0] = $2;
  HEAP32[$5 + 44 >> 2] = $3;
  HEAP8[$5 + 43 | 0] = $4;
  block : {
   if (!(jsvHasCharacterData(HEAP32[$5 + 56 >> 2]) & 1)) {
    HEAP8[$5 + 63 | 0] = 0;
    break block;
   }
   jsvStringIteratorNew($5 + 4 | 0, HEAP32[$5 + 56 >> 2], HEAP32[$5 + 44 >> 2]);
   block2 : {
    if (HEAP8[$5 + 43 | 0] & 1) {
     while (1) {
      $0 = 0;
      block1 : {
       if (!(jsvStringIteratorHasChar_180($5 + 4 | 0) & 1)) {
        break block1
       }
       $0 = 0;
       if (!HEAPU8[HEAP32[$5 + 52 >> 2]]) {
        break block1
       }
       $0 = (charToLowerCase(jsvStringIteratorGetChar_182($5 + 4 | 0) << 24 >> 24) & 255) == (charToLowerCase(HEAP8[HEAP32[$5 + 52 >> 2]] << 24 >> 24) & 255);
      }
      if ($0) {
       HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 52 >> 2] + 1;
       jsvStringIteratorNext($5 + 4 | 0);
       continue;
      }
      break;
     };
     break block2;
    }
    while (1) {
     $0 = 0;
     block3 : {
      if (!(jsvStringIteratorHasChar_180($5 + 4 | 0) & 1)) {
       break block3
      }
      $0 = 0;
      if (!HEAPU8[HEAP32[$5 + 52 >> 2]]) {
       break block3
      }
      $0 = (jsvStringIteratorGetChar_182($5 + 4 | 0) & 255) == HEAPU8[HEAP32[$5 + 52 >> 2]];
     }
     if ($0) {
      HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 52 >> 2] + 1;
      jsvStringIteratorNext($5 + 4 | 0);
      continue;
     }
     break;
    };
   }
   block4 : {
    if (HEAP8[$5 + 51 | 0] & 1) {
     $0 = 1;
     if (!HEAPU8[HEAP32[$5 + 52 >> 2]]) {
      break block4
     }
    }
    $0 = (jsvStringIteratorGetChar_182($5 + 4 | 0) & 255) == HEAPU8[HEAP32[$5 + 52 >> 2]];
   }
   HEAP8[$5 + 3 | 0] = $0;
   jsvStringIteratorFree_161($5 + 4 | 0);
   HEAP8[$5 + 63 | 0] = HEAP8[$5 + 3 | 0] & 1;
  }
  __stack_pointer = $5 - -64 | 0;
  return HEAP8[$5 + 63 | 0] & 1;
 }
 
 function jsvIsStringEqualOrStartsWith($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP8[$3 + 7 | 0] = $2;
  $0 = jsvIsStringEqualOrStartsWithOffset(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1, 0, 0);
  __stack_pointer = $3 + 16 | 0;
  return $0 & 1;
 }
 
 function jsvGetCommonCharacters($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 96 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 88 >> 2] = $0;
  HEAP32[$2 + 84 >> 2] = $1;
  HEAP32[$2 + 80 >> 2] = jsvNewFromEmptyString_186();
  block : {
   if (!HEAP32[$2 + 80 >> 2]) {
    HEAP32[$2 + 92 >> 2] = 0;
    break block;
   }
   jsvStringIteratorNewUTF8($2 + 44 | 0, HEAP32[$2 + 88 >> 2], 0);
   jsvStringIteratorNewUTF8($2 + 8 | 0, HEAP32[$2 + 84 >> 2], 0);
   HEAP32[$2 + 4 >> 2] = jsvStringIteratorGetUTF8CharAndNext($2 + 44 | 0);
   HEAP32[$2 >> 2] = jsvStringIteratorGetUTF8CharAndNext($2 + 8 | 0);
   while (1) {
    $0 = 0;
    block1 : {
     if (HEAP32[$2 + 4 >> 2] <= 0) {
      break block1
     }
     $0 = 0;
     if (HEAP32[$2 >> 2] <= 0) {
      break block1
     }
     $0 = HEAP32[$2 + 4 >> 2] == HEAP32[$2 >> 2];
    }
    if ($0) {
     jsvAppendCharacter(HEAP32[$2 + 80 >> 2], HEAP32[$2 + 4 >> 2] << 24 >> 24);
     HEAP32[$2 + 4 >> 2] = jsvStringIteratorGetUTF8CharAndNext($2 + 44 | 0);
     HEAP32[$2 >> 2] = jsvStringIteratorGetUTF8CharAndNext($2 + 8 | 0);
     continue;
    }
    break;
   };
   jsvStringIteratorFree_161($2 + 44 | 0);
   jsvStringIteratorFree_161($2 + 8 | 0);
   HEAP32[$2 + 92 >> 2] = HEAP32[$2 + 80 >> 2];
  }
  __stack_pointer = $2 + 96 | 0;
  return HEAP32[$2 + 92 >> 2];
 }
 
 function jsvAppendCharacter($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP8[$2 + 11 | 0] = $1;
  jsvAppendStringBuf(HEAP32[$2 + 12 >> 2], $2 + 11 | 0, 1);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsvCopyNameOnly($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP8[$3 + 23 | 0] = $1;
  HEAP8[$3 + 22 | 0] = $2;
  $0 = HEAP32[$3 + 24 >> 2];
  HEAP16[$3 + 20 >> 1] = HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8;
  HEAP32[$3 + 16 >> 2] = 0;
  block2 : {
   if (!(HEAP8[$3 + 22 | 0] & 1)) {
    $0 = HEAP32[$3 + 24 >> 2];
    HEAP16[$3 + 14 >> 1] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
    block1 : {
     if (!(HEAPU16[$3 + 14 >> 1] < 15 | HEAPU16[$3 + 14 >> 1] > 17)) {
      HEAP16[$3 + 20 >> 1] = HEAPU16[$3 + 20 >> 1] & -64 | 10;
      break block1;
     }
     block3 : {
      if (jsvGetLastChild(HEAP32[$3 + 24 >> 2]) & 65535) {
       HEAP32[$3 + 16 >> 2] = jsvNewFromStringVarComplete(HEAP32[$3 + 24 >> 2]);
       if (!HEAP32[$3 + 16 >> 2]) {
        HEAP32[$3 + 28 >> 2] = 0;
        break block2;
       }
       break block3;
      }
      HEAP16[$3 + 20 >> 1] = HEAPU16[$3 + 20 >> 1] & 65472 | jsvGetCharactersInVar(HEAP32[$3 + 24 >> 2]) + 28;
     }
    }
   }
   if (!HEAP32[$3 + 16 >> 2]) {
    HEAP32[$3 + 16 >> 2] = jsvNewWithFlags(HEAPU16[$3 + 20 >> 1] & 255);
    if (!HEAP32[$3 + 16 >> 2]) {
     HEAP32[$3 + 28 >> 2] = 0;
     break block2;
    }
    $0 = HEAP32[$3 + 16 >> 2];
    $1 = HEAP32[$3 + 24 >> 2];
    $1 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP8[$0 | 0] = $1;
    HEAP8[$0 + 1 | 0] = $1 >>> 8;
    HEAP8[$0 + 2 | 0] = $1 >>> 16;
    HEAP8[$0 + 3 | 0] = $1 >>> 24;
    if (jsvHasStringExt(HEAP32[$3 + 24 >> 2]) & 1) {
     if (jsvGetLastChild(HEAP32[$3 + 24 >> 2]) & 65535) {
      HEAP32[$3 + 8 >> 2] = jsvLock(jsvGetLastChild(HEAP32[$3 + 24 >> 2]) & 65535);
      HEAP32[$3 + 4 >> 2] = jsvCopy(HEAP32[$3 + 8 >> 2], 1);
      if (HEAP32[$3 + 4 >> 2]) {
       jsvSetLastChild(HEAP32[$3 + 16 >> 2], jsvGetRef(HEAP32[$3 + 4 >> 2]) & 65535);
       jsvUnLock(HEAP32[$3 + 4 >> 2]);
      }
      jsvUnLock(HEAP32[$3 + 8 >> 2]);
     }
    }
   }
   block4 : {
    if (!(HEAP8[$3 + 23 | 0] & 1)) {
     break block4
    }
    if (!(jsvGetFirstChild(HEAP32[$3 + 24 >> 2]) & 65535)) {
     break block4
    }
    block5 : {
     if (jsvIsNameWithValue(HEAP32[$3 + 24 >> 2]) & 1) {
      jsvSetFirstChild(HEAP32[$3 + 16 >> 2], jsvGetFirstChild(HEAP32[$3 + 24 >> 2]) & 65535);
      break block5;
     }
     jsvSetFirstChild(HEAP32[$3 + 16 >> 2], jsvRefRef(jsvGetFirstChild(HEAP32[$3 + 24 >> 2]) & 65535) & 65535);
    }
   }
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 16 >> 2];
  }
  __stack_pointer = $3 + 32 | 0;
  return HEAP32[$3 + 28 >> 2];
 }
 
 function jsvCopy($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer + -64 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 56 >> 2] = $0;
  HEAP8[$2 + 55 | 0] = $1;
  block : {
   if (jsvIsFlatString(HEAP32[$2 + 56 >> 2]) & 1) {
    HEAP32[$2 + 60 >> 2] = jsvNewFromStringVarComplete(HEAP32[$2 + 56 >> 2]);
    break block;
   }
   $0 = HEAP32[$2 + 56 >> 2];
   HEAP32[$2 + 48 >> 2] = jsvNewWithFlags((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 255);
   if (!HEAP32[$2 + 48 >> 2]) {
    HEAP32[$2 + 60 >> 2] = 0;
    break block;
   }
   block3 : {
    if (!(jsvIsStringExt(HEAP32[$2 + 56 >> 2]) & 1)) {
     $0 = 1;
     block1 : {
      if (jsvIsBasicString(HEAP32[$2 + 56 >> 2]) & 1) {
       break block1
      }
      $0 = 1;
      if (jsvIsNativeString(HEAP32[$2 + 56 >> 2]) & 1) {
       break block1
      }
      $0 = 1;
      if (jsvIsFlashString(HEAP32[$2 + 56 >> 2]) & 1) {
       break block1
      }
      $0 = jsvIsNativeFunction(HEAP32[$2 + 56 >> 2]);
     }
     HEAP8[$2 + 47 | 0] = $0 & 1;
     $1 = HEAP32[$2 + 48 >> 2];
     $4 = HEAP32[$2 + 56 >> 2];
     $0 = HEAP8[$2 + 47 | 0] & 1 ? 9 : 4;
     if ($0) {
      wasm2js_memory_copy($1, $4, $0)
     }
     if (jsvIsNativeFunction(HEAP32[$2 + 56 >> 2]) & 1) {
      jsvSetFirstChild(HEAP32[$2 + 48 >> 2], 0)
     }
     block2 : {
      if (HEAP8[$2 + 47 | 0] & 1) {
       break block2
      }
     }
     break block3;
    }
    $3 = HEAP32[$2 + 56 >> 2];
    $1 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
    $4 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
    $0 = $1;
    $1 = HEAP32[$2 + 48 >> 2];
    HEAP8[$1 | 0] = $0;
    HEAP8[$1 + 1 | 0] = $0 >>> 8;
    HEAP8[$1 + 2 | 0] = $0 >>> 16;
    HEAP8[$1 + 3 | 0] = $0 >>> 24;
    HEAP8[$1 + 4 | 0] = $4;
    HEAP8[$1 + 5 | 0] = $4 >>> 8;
    HEAP8[$1 + 6 | 0] = $4 >>> 16;
    HEAP8[$1 + 7 | 0] = $4 >>> 24;
    $0 = HEAPU8[$3 + 8 | 0] | HEAPU8[$3 + 9 | 0] << 8;
    HEAP8[$1 + 8 | 0] = $0;
    HEAP8[$1 + 9 | 0] = $0 >>> 8;
   }
   block4 : {
    if (!(HEAP8[$2 + 55 | 0] & 1)) {
     break block4
    }
    if (!(jsvIsName(HEAP32[$2 + 56 >> 2]) & 1)) {
     break block4
    }
    if (jsvGetFirstChild(HEAP32[$2 + 56 >> 2]) & 65535) {
     block5 : {
      if (jsvIsNameWithValue(HEAP32[$2 + 56 >> 2]) & 1) {
       jsvSetFirstChild(HEAP32[$2 + 48 >> 2], jsvGetFirstChild(HEAP32[$2 + 56 >> 2]) & 65535);
       break block5;
      }
      HEAP32[$2 + 40 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$2 + 56 >> 2]) & 65535);
      HEAP32[$2 + 36 >> 2] = jsvRef(jsvCopy(HEAP32[$2 + 40 >> 2], 1));
      jsvUnLock(HEAP32[$2 + 40 >> 2]);
      if (HEAP32[$2 + 36 >> 2]) {
       jsvSetFirstChild(HEAP32[$2 + 48 >> 2], jsvGetRef(HEAP32[$2 + 36 >> 2]) & 65535);
       jsvUnLock(HEAP32[$2 + 36 >> 2]);
      }
     }
    }
   }
   block7 : {
    if (jsvHasStringExt(HEAP32[$2 + 56 >> 2]) & 1) {
     HEAP32[$2 + 56 >> 2] = jsvLockAgain(HEAP32[$2 + 56 >> 2]);
     HEAP32[$2 + 32 >> 2] = jsvLockAgain(HEAP32[$2 + 48 >> 2]);
     while (1) {
      if (jsvGetLastChild(HEAP32[$2 + 56 >> 2]) & 65535) {
       HEAP32[$2 + 28 >> 2] = jsvLock(jsvGetLastChild(HEAP32[$2 + 56 >> 2]) & 65535);
       block6 : {
        if (jsvIsStringExt(HEAP32[$2 + 28 >> 2]) & 1) {
         $0 = HEAP32[$2 + 28 >> 2];
         HEAP32[$2 + 24 >> 2] = jsvNewWithFlags((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 255);
         if (HEAP32[$2 + 24 >> 2]) {
          $3 = HEAP32[$2 + 28 >> 2];
          $4 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
          $1 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
          $0 = $4;
          $4 = HEAP32[$2 + 24 >> 2];
          HEAP8[$4 | 0] = $0;
          HEAP8[$4 + 1 | 0] = $0 >>> 8;
          HEAP8[$4 + 2 | 0] = $0 >>> 16;
          HEAP8[$4 + 3 | 0] = $0 >>> 24;
          HEAP8[$4 + 4 | 0] = $1;
          HEAP8[$4 + 5 | 0] = $1 >>> 8;
          HEAP8[$4 + 6 | 0] = $1 >>> 16;
          HEAP8[$4 + 7 | 0] = $1 >>> 24;
          $0 = HEAPU8[$3 + 8 | 0] | HEAPU8[$3 + 9 | 0] << 8;
          HEAP8[$4 + 8 | 0] = $0;
          HEAP8[$4 + 9 | 0] = $0 >>> 8;
          jsvSetLastChild(HEAP32[$2 + 32 >> 2], jsvGetRef(HEAP32[$2 + 24 >> 2]) & 65535);
         }
         jsvUnLock2(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 32 >> 2]);
         HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 28 >> 2];
         HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 24 >> 2];
         break block6;
        }
        HEAP32[$2 + 20 >> 2] = jsvCopy(HEAP32[$2 + 28 >> 2], 1);
        if (HEAP32[$2 + 20 >> 2]) {
         jsvSetLastChild(HEAP32[$2 + 32 >> 2], jsvGetRef(jsvRef(HEAP32[$2 + 20 >> 2])) & 65535);
         jsvUnLock(HEAP32[$2 + 20 >> 2]);
        }
        jsvUnLock3(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 32 >> 2], HEAP32[$2 + 28 >> 2]);
        HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 48 >> 2];
        break block;
       }
       continue;
      }
      break;
     };
     jsvUnLock2(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 32 >> 2]);
     break block7;
    }
    if (jsvHasChildren(HEAP32[$2 + 56 >> 2]) & 1 & (HEAP8[$2 + 55 | 0] & 1)) {
     HEAP16[$2 + 18 >> 1] = jsvGetFirstChild(HEAP32[$2 + 56 >> 2]);
     while (1) {
      if (HEAPU16[$2 + 18 >> 1]) {
       HEAP32[$2 + 12 >> 2] = jsvLock(HEAPU16[$2 + 18 >> 1]);
       HEAP32[$2 + 8 >> 2] = jsvCopyNameOnly(HEAP32[$2 + 12 >> 2], 1, 1);
       if (HEAP32[$2 + 8 >> 2]) {
        jsvAddName(HEAP32[$2 + 48 >> 2], HEAP32[$2 + 8 >> 2]);
        jsvUnLock(HEAP32[$2 + 8 >> 2]);
       }
       HEAP16[$2 + 18 >> 1] = jsvGetNextSibling(HEAP32[$2 + 12 >> 2]);
       jsvUnLock(HEAP32[$2 + 12 >> 2]);
       continue;
      }
      break;
     };
    }
   }
   HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 48 >> 2];
  }
  __stack_pointer = $2 - -64 | 0;
  return HEAP32[$2 + 60 >> 2];
 }
 
 function jsvAddNamedChild($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP32[$3 + 16 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = jsvNewNameFromString(HEAP32[$3 + 16 >> 2]);
  block : {
   if (!HEAP32[$3 + 12 >> 2]) {
    HEAP32[$3 + 28 >> 2] = 0;
    break block;
   }
   if (HEAP32[$3 + 20 >> 2]) {
    jsvSetFirstChild(HEAP32[$3 + 12 >> 2], jsvGetRef(jsvRef(HEAP32[$3 + 20 >> 2])) & 65535)
   }
   jsvAddName(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 12 >> 2]);
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
  }
  __stack_pointer = $3 + 32 | 0;
  return HEAP32[$3 + 28 >> 2];
 }
 
 function jsvAddNamedChildAndUnLock($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  jsvUnLock2(jsvAddNamedChild(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]), HEAP32[$3 + 8 >> 2]);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jsvFindChildFromStringI($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  HEAP16[$2 + 18 >> 1] = jsvGetFirstChild(HEAP32[$2 + 24 >> 2]);
  block1 : {
   while (1) {
    if (HEAPU16[$2 + 18 >> 1]) {
     HEAP32[$2 + 12 >> 2] = jsvGetAddressOf(HEAPU16[$2 + 18 >> 1]);
     block : {
      if (!(jsvHasCharacterData(HEAP32[$2 + 12 >> 2]) & 1)) {
       break block
      }
      if (!(jsvIsStringEqualOrStartsWithOffset(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 20 >> 2], 0, 0, 1) & 1)) {
       break block
      }
      HEAP32[$2 + 28 >> 2] = jsvLockAgain(HEAP32[$2 + 12 >> 2]);
      break block1;
     }
     HEAP16[$2 + 18 >> 1] = jsvGetNextSibling(HEAP32[$2 + 12 >> 2]);
     continue;
    }
    break;
   };
   HEAP32[$2 + 28 >> 2] = 0;
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jsvCreateNewChild($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP32[$3 + 16 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = jsvAsName(HEAP32[$3 + 20 >> 2]);
  block : {
   if (!HEAP32[$3 + 12 >> 2]) {
    HEAP32[$3 + 28 >> 2] = 0;
    break block;
   }
   if (HEAP32[$3 + 16 >> 2]) {
    jsvSetValueOfName(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 16 >> 2])
   }
   HEAP16[$3 + 10 >> 1] = jsvGetRef(jsvRef(jsvRef(HEAP32[$3 + 24 >> 2])));
   jsvSetNextSibling(HEAP32[$3 + 12 >> 2], HEAPU16[$3 + 10 >> 1]);
   jsvSetPrevSibling(HEAP32[$3 + 12 >> 2], HEAPU16[$3 + 10 >> 1]);
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
  }
  __stack_pointer = $3 + 32 | 0;
  return HEAP32[$3 + 28 >> 2];
 }
 
 function jsvRemoveChild($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  HEAP16[$2 + 22 >> 1] = jsvGetRef(HEAP32[$2 + 24 >> 2]);
  HEAP8[$2 + 21 | 0] = 0;
  if ((jsvGetFirstChild(HEAP32[$2 + 28 >> 2]) & 65535) == HEAPU16[$2 + 22 >> 1]) {
   jsvSetFirstChild(HEAP32[$2 + 28 >> 2], jsvGetNextSibling(HEAP32[$2 + 24 >> 2]) & 65535);
   HEAP8[$2 + 21 | 0] = 1;
  }
  if ((jsvGetLastChild(HEAP32[$2 + 28 >> 2]) & 65535) == HEAPU16[$2 + 22 >> 1]) {
   jsvSetLastChild(HEAP32[$2 + 28 >> 2], jsvGetPrevSibling(HEAP32[$2 + 24 >> 2]) & 65535);
   HEAP8[$2 + 21 | 0] = 1;
   if (jsvIsArray(HEAP32[$2 + 28 >> 2]) & 1) {
    HEAP32[$2 + 16 >> 2] = 0;
    if (jsvGetLastChild(HEAP32[$2 + 28 >> 2]) & 65535) {
     HEAP32[$2 + 16 >> 2] = jsvGetIntegerAndUnLock(jsvLock(jsvGetLastChild(HEAP32[$2 + 28 >> 2]) & 65535)) + 1
    }
    jsvSetArrayLength(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 16 >> 2], 0);
   }
  }
  if (jsvGetPrevSibling(HEAP32[$2 + 24 >> 2]) & 65535) {
   HEAP32[$2 + 12 >> 2] = jsvLock(jsvGetPrevSibling(HEAP32[$2 + 24 >> 2]) & 65535);
   jsvSetNextSibling(HEAP32[$2 + 12 >> 2], jsvGetNextSibling(HEAP32[$2 + 24 >> 2]) & 65535);
   jsvUnLock(HEAP32[$2 + 12 >> 2]);
   HEAP8[$2 + 21 | 0] = 1;
  }
  if (jsvGetNextSibling(HEAP32[$2 + 24 >> 2]) & 65535) {
   HEAP32[$2 + 8 >> 2] = jsvLock(jsvGetNextSibling(HEAP32[$2 + 24 >> 2]) & 65535);
   jsvSetPrevSibling(HEAP32[$2 + 8 >> 2], jsvGetPrevSibling(HEAP32[$2 + 24 >> 2]) & 65535);
   jsvUnLock(HEAP32[$2 + 8 >> 2]);
   HEAP8[$2 + 21 | 0] = 1;
  }
  jsvSetPrevSibling(HEAP32[$2 + 24 >> 2], 0);
  jsvSetNextSibling(HEAP32[$2 + 24 >> 2], 0);
  if (HEAP8[$2 + 21 | 0] & 1) {
   jsvUnRef(HEAP32[$2 + 24 >> 2])
  }
  __stack_pointer = $2 + 32 | 0;
 }
 
 function jsvRemoveChildAndUnLock($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  jsvRemoveChild(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
  jsvUnLock(HEAP32[$2 + 8 >> 2]);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsvRemoveAllChildren($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  while (1) {
   if (jsvGetFirstChild(HEAP32[$1 + 12 >> 2]) & 65535) {
    HEAP32[$1 + 8 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$1 + 12 >> 2]) & 65535);
    jsvRemoveChildAndUnLock(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 8 >> 2]);
    continue;
   }
   break;
  };
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvIsChild($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  HEAP16[$2 + 18 >> 1] = jsvGetRef(HEAP32[$2 + 20 >> 2]);
  HEAP16[$2 + 16 >> 1] = jsvGetFirstChild(HEAP32[$2 + 24 >> 2]);
  block : {
   while (1) {
    if (HEAPU16[$2 + 16 >> 1]) {
     if (HEAPU16[$2 + 16 >> 1] == HEAPU16[$2 + 18 >> 1]) {
      HEAP8[$2 + 31 | 0] = 1;
      break block;
     } else {
      HEAP32[$2 + 12 >> 2] = jsvLock(HEAPU16[$2 + 16 >> 1]);
      HEAP16[$2 + 16 >> 1] = jsvGetNextSibling(HEAP32[$2 + 12 >> 2]);
      jsvUnLock(HEAP32[$2 + 12 >> 2]);
      continue;
     }
    }
    break;
   };
   HEAP8[$2 + 31 | 0] = 0;
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP8[$2 + 31 | 0] & 1;
 }
 
 function jsvObjectGetChild($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP16[$3 + 18 >> 1] = $2;
  block : {
   if (!HEAP32[$3 + 24 >> 2]) {
    HEAP32[$3 + 28 >> 2] = 0;
    break block;
   }
   block1 : {
    if (HEAPU16[$3 + 18 >> 1]) {
     $0 = jsvFindOrAddChildFromString(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
     break block1;
    }
    $0 = jsvFindChildFromString(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
   }
   HEAP32[$3 + 12 >> 2] = $0;
   HEAP32[$3 + 8 >> 2] = jsvSkipName(HEAP32[$3 + 12 >> 2]);
   if (!(!HEAP32[$3 + 12 >> 2] | (HEAP32[$3 + 8 >> 2] | !HEAPU16[$3 + 18 >> 1]))) {
    HEAP32[$3 + 8 >> 2] = jsvNewWithFlags(HEAPU16[$3 + 18 >> 1]);
    jsvSetValueOfName(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
    jsvUnLock(HEAP32[$3 + 12 >> 2]);
    HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 8 >> 2];
    break block;
   }
   jsvUnLock(HEAP32[$3 + 12 >> 2]);
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 8 >> 2];
  }
  __stack_pointer = $3 + 32 | 0;
  return HEAP32[$3 + 28 >> 2];
 }
 
 function jsvObjectGetChildI($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  block : {
   if (!HEAP32[$2 + 8 >> 2]) {
    HEAP32[$2 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 12 >> 2] = jsvSkipNameAndUnLock(jsvFindChildFromStringI(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]));
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function jsvObjectGetBoolChild($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $0 = jsvObjectGetIntegerChild(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
  __stack_pointer = $2 + 16 | 0;
  return ($0 | 0) != 0;
 }
 
 function jsvObjectGetIntegerChild($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  block : {
   if (!HEAP32[$2 + 24 >> 2]) {
    HEAP32[$2 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 16 >> 2] = jsvFindChildFromString(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2]);
   block1 : {
    if (!(jsvIsNameInt(HEAP32[$2 + 16 >> 2]) & 1)) {
     if (!(jsvIsNameIntBool(HEAP32[$2 + 16 >> 2]) & 1)) {
      break block1
     }
    }
    HEAP32[$2 + 12 >> 2] = jsvGetFirstChildSigned(HEAP32[$2 + 16 >> 2]) << 16 >> 16;
    jsvUnLock(HEAP32[$2 + 16 >> 2]);
    HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
    break block;
   }
   HEAP32[$2 + 28 >> 2] = jsvGetIntegerAndUnLock(jsvSkipNameAndUnLock(HEAP32[$2 + 16 >> 2]));
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jsvObjectGetFloatChild($0, $1) {
  var $2 = 0, $3 = 0.0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $3 = jsvGetFloatAndUnLock(jsvObjectGetChildIfExists(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]));
  __stack_pointer = $2 + 16 | 0;
  return $3;
 }
 
 function jsvObjectSetChildVar($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP32[$3 + 16 >> 2] = $2;
  block : {
   if (!(jsvHasChildren(HEAP32[$3 + 24 >> 2]) & 1)) {
    HEAP32[$3 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$3 + 12 >> 2] = jsvFindChildFromVar(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], 1);
   if (!HEAP32[$3 + 12 >> 2]) {
    HEAP32[$3 + 28 >> 2] = 0;
    break block;
   }
   jsvSetValueOfName(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 16 >> 2]);
   jsvUnLock(HEAP32[$3 + 12 >> 2]);
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 16 >> 2];
  }
  __stack_pointer = $3 + 32 | 0;
  return HEAP32[$3 + 28 >> 2];
 }
 
 function jsvObjectSetChildAndUnLock($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  jsvObjectSetChild(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
  jsvUnLock(HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jsvObjectRemoveChild($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = jsvFindChildFromString(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
  if (HEAP32[$2 + 4 >> 2]) {
   jsvRemoveChildAndUnLock(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2])
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsvObjectSetOrRemoveChild($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  block : {
   if (HEAP32[$3 + 4 >> 2]) {
    jsvObjectSetChild(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
    break block;
   }
   jsvObjectRemoveChild(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
  }
  __stack_pointer = $3 + 16 | 0;
  return HEAP32[$3 + 4 >> 2];
 }
 
 function jsvObjectAppendAll($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  jsvObjectIteratorNew($2 + 20 | 0, HEAP32[$2 + 24 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue($2 + 20 | 0) & 1) {
    HEAP32[$2 + 16 >> 2] = jsvObjectIteratorGetKey($2 + 20 | 0);
    HEAP32[$2 + 12 >> 2] = jsvSkipName(HEAP32[$2 + 16 >> 2]);
    if (!(jsvIsInternalObjectKey(HEAP32[$2 + 16 >> 2]) & 1)) {
     jsvObjectSetChildVar(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2])
    }
    jsvUnLock2(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2]);
    jsvObjectIteratorNext($2 + 20 | 0);
    continue;
   }
   break;
  };
  jsvObjectIteratorFree($2 + 20 | 0);
  __stack_pointer = $2 + 32 | 0;
 }
 
 function jsvIsInternalObjectKey($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  if (jsvIsString(HEAP32[$1 + 12 >> 2]) & 1) {
   $2 = 1;
   block : {
    if (HEAPU8[HEAP32[$1 + 12 >> 2]] == 255) {
     break block
    }
    $2 = 1;
    if (jsvIsStringEqual(HEAP32[$1 + 12 >> 2], 140424) & 1) {
     break block
    }
    $2 = jsvIsStringEqual(HEAP32[$1 + 12 >> 2], 127861);
   }
  }
  __stack_pointer = $1 + 16 | 0;
  return $2 & 1;
 }
 
 function jsvCountJsVarsUsed($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  if (!(!HEAP32[92130] | HEAP32[$1 + 12 >> 2] == HEAP32[92130])) {
   $0 = HEAP32[92130];
   $2 = HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8 | 512;
   HEAP8[$0 + 12 | 0] = $2;
   HEAP8[$0 + 13 | 0] = $2 >>> 8;
  }
  HEAP32[$1 + 8 >> 2] = _jsvCountJsVarsUsedRecursive(HEAP32[$1 + 12 >> 2], 0);
  _jsvCountJsVarsUsedRecursive(HEAP32[$1 + 12 >> 2], 1);
  if (!(!HEAP32[92130] | HEAP32[$1 + 12 >> 2] == HEAP32[92130])) {
   $0 = HEAP32[92130];
   $2 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & -513;
   HEAP8[$0 + 12 | 0] = $2;
   HEAP8[$0 + 13 | 0] = $2 >>> 8;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 8 >> 2];
 }
 
 function _jsvCountJsVarsUsedRecursive($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 40 >> 2] = $0;
  HEAP8[$2 + 39 | 0] = $1;
  block : {
   if (!HEAP32[$2 + 40 >> 2]) {
    HEAP32[$2 + 44 >> 2] = 0;
    break block;
   }
   block1 : {
    if (HEAP8[$2 + 39 | 0] & 1) {
     $0 = HEAP32[$2 + 40 >> 2];
     if (!((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 512)) {
      HEAP32[$2 + 44 >> 2] = 0;
      break block;
     }
     $0 = HEAP32[$2 + 40 >> 2];
     $1 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & -513;
     HEAP8[$0 + 12 | 0] = $1;
     HEAP8[$0 + 13 | 0] = $1 >>> 8;
     break block1;
    }
    $0 = HEAP32[$2 + 40 >> 2];
    if ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 512) {
     HEAP32[$2 + 44 >> 2] = 0;
     break block;
    }
    $0 = HEAP32[$2 + 40 >> 2];
    $1 = HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8 | 512;
    HEAP8[$0 + 12 | 0] = $1;
    HEAP8[$0 + 13 | 0] = $1 >>> 8;
   }
   HEAP32[$2 + 32 >> 2] = 1;
   block4 : {
    block2 : {
     if (!(jsvHasSingleChild(HEAP32[$2 + 40 >> 2]) & 1)) {
      if (!(jsvHasChildren(HEAP32[$2 + 40 >> 2]) & 1)) {
       break block2
      }
     }
     HEAP16[$2 + 30 >> 1] = jsvGetFirstChild(HEAP32[$2 + 40 >> 2]);
     while (1) {
      if (HEAPU16[$2 + 30 >> 1]) {
       HEAP32[$2 + 24 >> 2] = jsvLock(HEAPU16[$2 + 30 >> 1]);
       HEAP32[$2 + 32 >> 2] = _jsvCountJsVarsUsedRecursive(HEAP32[$2 + 24 >> 2], HEAP8[$2 + 39 | 0] & 1) + HEAP32[$2 + 32 >> 2];
       block3 : {
        if (jsvHasChildren(HEAP32[$2 + 40 >> 2]) & 1) {
         HEAP16[$2 + 30 >> 1] = jsvGetNextSibling(HEAP32[$2 + 24 >> 2]);
         break block3;
        }
        HEAP16[$2 + 30 >> 1] = 0;
       }
       jsvUnLock(HEAP32[$2 + 24 >> 2]);
       continue;
      }
      break;
     };
     break block4;
    }
    if (jsvIsFlatString(HEAP32[$2 + 40 >> 2]) & 1) {
     HEAP32[$2 + 32 >> 2] = jsvGetFlatStringBlocks(HEAP32[$2 + 40 >> 2]) + HEAP32[$2 + 32 >> 2]
    }
   }
   if (jsvHasCharacterData(HEAP32[$2 + 40 >> 2]) & 1) {
    HEAP16[$2 + 22 >> 1] = jsvGetLastChild(HEAP32[$2 + 40 >> 2]);
    while (1) {
     if (HEAPU16[$2 + 22 >> 1]) {
      HEAP32[$2 + 16 >> 2] = jsvLock(HEAPU16[$2 + 22 >> 1]);
      HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 32 >> 2] + 1;
      HEAP16[$2 + 22 >> 1] = jsvGetLastChild(HEAP32[$2 + 16 >> 2]);
      jsvUnLock(HEAP32[$2 + 16 >> 2]);
      continue;
     }
     break;
    };
   }
   block5 : {
    if (!(jsvIsName(HEAP32[$2 + 40 >> 2]) & 1)) {
     break block5
    }
    if (jsvIsNameWithValue(HEAP32[$2 + 40 >> 2]) & 1) {
     break block5
    }
    if (!(jsvGetFirstChild(HEAP32[$2 + 40 >> 2]) & 65535)) {
     break block5
    }
    HEAP32[$2 + 12 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$2 + 40 >> 2]) & 65535);
    HEAP32[$2 + 32 >> 2] = _jsvCountJsVarsUsedRecursive(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 39 | 0] & 1) + HEAP32[$2 + 32 >> 2];
    jsvUnLock(HEAP32[$2 + 12 >> 2]);
   }
   HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
  }
  __stack_pointer = $2 + 48 | 0;
  return HEAP32[$2 + 44 >> 2];
 }
 
 function jsvGetLastArrayItem($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP16[$1 + 6 >> 1] = jsvGetLastChild(HEAP32[$1 + 8 >> 2]);
  block : {
   if (!HEAPU16[$1 + 6 >> 1]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvSkipNameAndUnLock(jsvLock(HEAPU16[$1 + 6 >> 1]));
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvSetArrayItem($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  HEAP32[$3 >> 2] = jsvGetArrayIndex(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
  block : {
   if (HEAP32[$3 >> 2]) {
    jsvSetValueOfName(HEAP32[$3 >> 2], HEAP32[$3 + 4 >> 2]);
    break block;
   }
   HEAP32[$3 >> 2] = jsvMakeIntoVariableName(jsvNewFromInteger(HEAP32[$3 + 8 >> 2]), HEAP32[$3 + 4 >> 2]);
   if (HEAP32[$3 >> 2]) {
    jsvAddName(HEAP32[$3 + 12 >> 2], HEAP32[$3 >> 2])
   }
  }
  jsvUnLock(HEAP32[$3 >> 2]);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jsvGetArrayItems($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  jsvObjectIteratorNew($3 + 16 | 0, HEAP32[$3 + 28 >> 2]);
  HEAP32[$3 + 12 >> 2] = 0;
  while (1) {
   if (jsvObjectIteratorHasValue($3 + 16 | 0) & 1) {
    if (HEAPU32[$3 + 12 >> 2] < HEAPU32[$3 + 24 >> 2]) {
     $1 = jsvObjectIteratorGetValue($3 + 16 | 0);
     $2 = HEAP32[$3 + 20 >> 2];
     $0 = HEAP32[$3 + 12 >> 2];
     HEAP32[$3 + 12 >> 2] = $0 + 1;
     HEAP32[($0 << 2) + $2 >> 2] = $1;
    }
    jsvObjectIteratorNext($3 + 16 | 0);
    continue;
   }
   break;
  };
  jsvObjectIteratorFree($3 + 16 | 0);
  while (1) {
   if (HEAPU32[$3 + 12 >> 2] < HEAPU32[$3 + 24 >> 2]) {
    $1 = HEAP32[$3 + 20 >> 2];
    $0 = HEAP32[$3 + 12 >> 2];
    HEAP32[$3 + 12 >> 2] = $0 + 1;
    HEAP32[($0 << 2) + $1 >> 2] = 0;
    continue;
   }
   break;
  };
  __stack_pointer = $3 + 32 | 0;
 }
 
 function jsvObjectIteratorGetValue($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvGetIndexOfFull($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 96 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 88 >> 2] = $0;
  HEAP32[$5 + 84 >> 2] = $1;
  HEAP8[$5 + 83 | 0] = $2;
  HEAP8[$5 + 82 | 0] = $3;
  HEAP32[$5 + 76 >> 2] = $4;
  block : {
   if (!(jsvIsIterable(HEAP32[$5 + 88 >> 2]) & 1)) {
    HEAP32[$5 + 92 >> 2] = 0;
    break block;
   }
   jsvIteratorNew($5 + 16 | 0, HEAP32[$5 + 88 >> 2], 0);
   while (1) {
    if (jsvIteratorHasElement($5 + 16 | 0) & 1) {
     HEAP32[$5 + 12 >> 2] = jsvIteratorGetKey($5 + 16 | 0);
     block1 : {
      if (HEAP8[$5 + 82 | 0] & 1) {
       if (!(jsvIsInt(HEAP32[$5 + 12 >> 2]) & 1)) {
        break block1
       }
       if ((jsvGetInteger(HEAP32[$5 + 12 >> 2]) | 0) < HEAP32[$5 + 76 >> 2]) {
        break block1
       }
      }
      HEAP32[$5 + 8 >> 2] = jsvIteratorGetValue($5 + 16 | 0);
      block2 : {
       if (HEAP32[$5 + 8 >> 2] != HEAP32[$5 + 84 >> 2]) {
        if (HEAP8[$5 + 83 | 0] & 1) {
         break block2
        }
        if (!(jsvMathsOpTypeEqual(HEAP32[$5 + 8 >> 2], HEAP32[$5 + 84 >> 2]) & 1)) {
         break block2
        }
       }
       jsvUnLock(HEAP32[$5 + 8 >> 2]);
       jsvIteratorFree($5 + 16 | 0);
       HEAP32[$5 + 92 >> 2] = HEAP32[$5 + 12 >> 2];
       break block;
      }
      jsvUnLock(HEAP32[$5 + 8 >> 2]);
     }
     jsvUnLock(HEAP32[$5 + 12 >> 2]);
     jsvIteratorNext($5 + 16 | 0);
     continue;
    }
    break;
   };
   jsvIteratorFree($5 + 16 | 0);
   HEAP32[$5 + 92 >> 2] = 0;
  }
  __stack_pointer = $5 + 96 | 0;
  return HEAP32[$5 + 92 >> 2];
 }
 
 function jsvMathsOpTypeEqual($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP8[$2 + 7 | 0] = (!HEAP32[$2 + 12 >> 2] | 0) == (!HEAP32[$2 + 8 >> 2] | 0);
  if (!(!HEAP32[$2 + 12 >> 2] | !HEAP32[$2 + 8 >> 2])) {
   block2 : {
    block1 : {
     if (!(jsvIsInt(HEAP32[$2 + 12 >> 2]) & 1)) {
      if (!(jsvIsFloat(HEAP32[$2 + 12 >> 2]) & 1)) {
       break block1
      }
     }
     $0 = 1;
     if (jsvIsInt(HEAP32[$2 + 8 >> 2]) & 1) {
      break block2
     }
     $0 = 1;
     if (jsvIsFloat(HEAP32[$2 + 8 >> 2]) & 1) {
      break block2
     }
    }
    if (jsvIsString(HEAP32[$2 + 12 >> 2]) & 1) {
     $0 = 1;
     if (jsvIsString(HEAP32[$2 + 8 >> 2]) & 1) {
      break block2
     }
    }
    $0 = HEAP32[$2 + 12 >> 2];
    $1 = HEAP32[$2 + 8 >> 2];
    $0 = ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63) == ((HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & 63);
   }
   HEAP8[$2 + 7 | 0] = $0;
  }
  if (HEAP8[$2 + 7 | 0] & 1) {
   HEAP32[$2 >> 2] = jsvMathsOp(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 138);
   if (!(jsvGetBool(HEAP32[$2 >> 2]) & 1)) {
    HEAP8[$2 + 7 | 0] = 0
   }
   jsvUnLock(HEAP32[$2 >> 2]);
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP8[$2 + 7 | 0] & 1;
 }
 
 function jsvMathsOp($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $3 = __stack_pointer - 80 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 72 >> 2] = $0;
  HEAP32[$3 + 68 >> 2] = $1;
  HEAP32[$3 + 64 >> 2] = $2;
  block1 : {
   if (!(HEAP32[$3 + 64 >> 2] != 139 & HEAP32[$3 + 64 >> 2] != 141)) {
    HEAP8[$3 + 63 | 0] = jsvMathsOpTypeEqual(HEAP32[$3 + 72 >> 2], HEAP32[$3 + 68 >> 2]) & 1;
    if (HEAP32[$3 + 64 >> 2] == 139) {
     HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP8[$3 + 63 | 0] & 1);
     break block1;
    }
    HEAP32[$3 + 76 >> 2] = jsvNewFromBool((HEAPU8[$3 + 63 | 0] ^ -1) & 1);
    break block1;
   }
   $0 = 1;
   block2 : {
    if (HEAP32[$3 + 64 >> 2] == 38) {
     break block2
    }
    $0 = 1;
    if (HEAP32[$3 + 64 >> 2] == 124) {
     break block2
    }
    $0 = 1;
    if (HEAP32[$3 + 64 >> 2] == 94) {
     break block2
    }
    $0 = 1;
    if (HEAP32[$3 + 64 >> 2] == 143) {
     break block2
    }
    $0 = 1;
    if (HEAP32[$3 + 64 >> 2] == 146) {
     break block2
    }
    $0 = HEAP32[$3 + 64 >> 2] == 147;
   }
   HEAP8[$3 + 62 | 0] = $0;
   $0 = 1;
   block3 : {
    if (HEAP8[$3 + 62 | 0] & 1) {
     break block3
    }
    $0 = 1;
    if (HEAP32[$3 + 64 >> 2] == 42) {
     break block3
    }
    $0 = 1;
    if (HEAP32[$3 + 64 >> 2] == 47) {
     break block3
    }
    $0 = 1;
    if (HEAP32[$3 + 64 >> 2] == 37) {
     break block3
    }
    $0 = HEAP32[$3 + 64 >> 2] == 45;
   }
   HEAP8[$3 + 61 | 0] = $0;
   $0 = 1;
   block4 : {
    if (HEAP32[$3 + 64 >> 2] == 138) {
     break block4
    }
    $0 = 1;
    if (HEAP32[$3 + 64 >> 2] == 140) {
     break block4
    }
    $0 = 1;
    if (HEAP32[$3 + 64 >> 2] == 60) {
     break block4
    }
    $0 = 1;
    if (HEAP32[$3 + 64 >> 2] == 142) {
     break block4
    }
    $0 = 1;
    if (HEAP32[$3 + 64 >> 2] == 62) {
     break block4
    }
    $0 = HEAP32[$3 + 64 >> 2] == 145;
   }
   HEAP8[$3 + 60 | 0] = $0;
   if (HEAP8[$3 + 60 | 0] & 1) {
    block6 : {
     block5 : {
      if (!(jsvIsNumeric(HEAP32[$3 + 72 >> 2]) & 1)) {
       break block5
      }
      if (!(jsvIsString(HEAP32[$3 + 68 >> 2]) & 1)) {
       break block5
      }
      HEAP8[$3 + 61 | 0] = 1;
      if (jsvIsIntegerish(HEAP32[$3 + 72 >> 2]) & 1) {
       $5 = jsvIsStringNumericInt(HEAP32[$3 + 68 >> 2], 0)
      }
      HEAP8[$3 + 62 | 0] = $5 & 1;
      break block6;
     }
     block7 : {
      if (!(jsvIsNumeric(HEAP32[$3 + 68 >> 2]) & 1)) {
       break block7
      }
      if (!(jsvIsString(HEAP32[$3 + 72 >> 2]) & 1)) {
       break block7
      }
      HEAP8[$3 + 61 | 0] = 1;
      if (jsvIsIntegerish(HEAP32[$3 + 68 >> 2]) & 1) {
       $5 = jsvIsStringNumericInt(HEAP32[$3 + 72 >> 2], 0)
      }
      HEAP8[$3 + 62 | 0] = $5 & 1;
     }
    }
   }
   block8 : {
    if (!(jsvIsUndefined(HEAP32[$3 + 72 >> 2]) & 1)) {
     break block8
    }
    if (!(jsvIsUndefined(HEAP32[$3 + 68 >> 2]) & 1)) {
     break block8
    }
    if (HEAP32[$3 + 64 >> 2] == 138) {
     HEAP32[$3 + 76 >> 2] = jsvNewFromBool(1);
     break block1;
    }
    if (HEAP32[$3 + 64 >> 2] == 140) {
     HEAP32[$3 + 76 >> 2] = jsvNewFromBool(0);
     break block1;
    }
    HEAP32[$3 + 76 >> 2] = 0;
    break block1;
   }
   block11 : {
    block9 : {
     if (HEAP8[$3 + 61 | 0] & 1) {
      break block9
     }
     block10 : {
      if (jsvIsNumeric(HEAP32[$3 + 72 >> 2]) & 1) {
       break block10
      }
      if (jsvIsUndefined(HEAP32[$3 + 72 >> 2]) & 1) {
       break block10
      }
      if (!(jsvIsNull(HEAP32[$3 + 72 >> 2]) & 1)) {
       break block11
      }
     }
     if (jsvIsNumeric(HEAP32[$3 + 68 >> 2]) & 1) {
      break block9
     }
     if (jsvIsUndefined(HEAP32[$3 + 68 >> 2]) & 1) {
      break block9
     }
     if (!(jsvIsNull(HEAP32[$3 + 68 >> 2]) & 1)) {
      break block11
     }
    }
    block12 : {
     if (!(HEAP8[$3 + 62 | 0] & 1)) {
      if (!(jsvIsIntegerish(HEAP32[$3 + 72 >> 2]) & 1)) {
       break block12
      }
      if (!(jsvIsIntegerish(HEAP32[$3 + 68 >> 2]) & 1)) {
       break block12
      }
     }
     HEAP32[$3 + 56 >> 2] = jsvGetInteger(HEAP32[$3 + 72 >> 2]);
     HEAP32[$3 + 52 >> 2] = jsvGetInteger(HEAP32[$3 + 68 >> 2]);
     block15 : {
      switch (HEAP32[$3 + 64 >> 2] - 37 | 0) {
      case 6:
       $0 = HEAP32[$3 + 56 >> 2];
       $4 = $0 >> 31;
       $1 = $0;
       $5 = $4;
       $4 = HEAP32[$3 + 52 >> 2];
       $0 = $4 >> 31;
       $2 = $0;
       $6 = $4;
       $1 = $1 + $4 | 0;
       $0 = $5;
       $4 = $2;
       $2 = $0 + $4 | 0;
       $2 = $1 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
       HEAP32[$3 + 76 >> 2] = jsvNewFromLongInteger($1, $2);
       break block1;
      case 8:
       $2 = HEAP32[$3 + 56 >> 2];
       $1 = $2 >> 31;
       $0 = $2;
       $7 = $1;
       $1 = HEAP32[$3 + 52 >> 2];
       $2 = $1 >> 31;
       $5 = $2;
       $6 = $1;
       $4 = $0 - $1 | 0;
       $2 = $7;
       $1 = $5;
       $1 = $1 + ($0 >>> 0 < $6 >>> 0) | 0;
       $1 = $2 - $1 | 0;
       HEAP32[$3 + 76 >> 2] = jsvNewFromLongInteger($4, $1);
       break block1;
      case 5:
       $1 = HEAP32[$3 + 56 >> 2];
       $0 = $1 >> 31;
       $5 = $1;
       $4 = $0;
       $0 = HEAP32[$3 + 52 >> 2];
       $1 = $0 >> 31;
       $2 = $1;
       $1 = $4;
       $4 = $0;
       $0 = $2;
       $0 = __wasm_i64_mul($5, $1, $4, $0);
       $1 = i64toi32_i32$HIGH_BITS;
       HEAP32[$3 + 76 >> 2] = jsvNewFromLongInteger($0, $1);
       break block1;
      case 10:
       HEAP32[$3 + 76 >> 2] = jsvNewFromFloat(+HEAP32[$3 + 56 >> 2] / +HEAP32[$3 + 52 >> 2]);
       break block1;
      case 1:
       HEAP32[$3 + 76 >> 2] = jsvNewFromInteger(HEAP32[$3 + 56 >> 2] & HEAP32[$3 + 52 >> 2]);
       break block1;
      case 87:
       HEAP32[$3 + 76 >> 2] = jsvNewFromInteger(HEAP32[$3 + 56 >> 2] | HEAP32[$3 + 52 >> 2]);
       break block1;
      case 57:
       HEAP32[$3 + 76 >> 2] = jsvNewFromInteger(HEAP32[$3 + 56 >> 2] ^ HEAP32[$3 + 52 >> 2]);
       break block1;
      case 0:
       if (HEAP32[$3 + 52 >> 2] < 0) {
        HEAP32[$3 + 52 >> 2] = 0 - HEAP32[$3 + 52 >> 2]
       }
       block31 : {
        if (HEAP32[$3 + 52 >> 2]) {
         $0 = jsvNewFromInteger(HEAP32[$3 + 56 >> 2] % HEAP32[$3 + 52 >> 2] | 0);
         break block31;
        }
        $0 = jsvNewFromFloat(NaN);
       }
       HEAP32[$3 + 76 >> 2] = $0;
       break block1;
      case 106:
       HEAP32[$3 + 76 >> 2] = jsvNewFromInteger(HEAP32[$3 + 56 >> 2] << HEAP32[$3 + 52 >> 2]);
       break block1;
      case 109:
       HEAP32[$3 + 76 >> 2] = jsvNewFromInteger(HEAP32[$3 + 56 >> 2] >> HEAP32[$3 + 52 >> 2]);
       break block1;
      case 110:
       HEAP32[$3 + 76 >> 2] = jsvNewFromLongInteger(HEAP32[$3 + 56 >> 2] >>> HEAP32[$3 + 52 >> 2] | 0, 0);
       break block1;
      case 101:
       if (HEAP32[$3 + 56 >> 2] == HEAP32[$3 + 52 >> 2]) {
        $4 = (jsvIsNull(HEAP32[$3 + 72 >> 2]) & 1) == (jsvIsNull(HEAP32[$3 + 68 >> 2]) & 1)
       }
       HEAP32[$3 + 76 >> 2] = jsvNewFromBool($4);
       break block1;
      case 103:
       $0 = 1;
       if (HEAP32[$3 + 56 >> 2] == HEAP32[$3 + 52 >> 2]) {
        $0 = (jsvIsNull(HEAP32[$3 + 72 >> 2]) & 1) != (jsvIsNull(HEAP32[$3 + 68 >> 2]) & 1)
       }
       HEAP32[$3 + 76 >> 2] = jsvNewFromBool($0);
       break block1;
      case 23:
       HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 56 >> 2] < HEAP32[$3 + 52 >> 2]);
       break block1;
      case 105:
       HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 56 >> 2] <= HEAP32[$3 + 52 >> 2]);
       break block1;
      case 25:
       HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 56 >> 2] > HEAP32[$3 + 52 >> 2]);
       break block1;
      case 108:
       HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 56 >> 2] >= HEAP32[$3 + 52 >> 2]);
       break block1;
      default:
       break block15;
      };
     }
     HEAP32[$3 + 76 >> 2] = jsvMathsOpError(HEAP32[$3 + 64 >> 2], 128134);
     break block1;
    }
    HEAPF64[$3 + 40 >> 3] = jsvGetFloat(HEAP32[$3 + 72 >> 2]);
    HEAPF64[$3 + 32 >> 3] = jsvGetFloat(HEAP32[$3 + 68 >> 2]);
    block33 : {
     switch (HEAP32[$3 + 64 >> 2] - 37 | 0) {
     case 6:
      HEAP32[$3 + 76 >> 2] = jsvNewFromFloat(HEAPF64[$3 + 40 >> 3] + HEAPF64[$3 + 32 >> 3]);
      break block1;
     case 8:
      HEAP32[$3 + 76 >> 2] = jsvNewFromFloat(HEAPF64[$3 + 40 >> 3] - HEAPF64[$3 + 32 >> 3]);
      break block1;
     case 5:
      HEAP32[$3 + 76 >> 2] = jsvNewFromFloat(HEAPF64[$3 + 40 >> 3] * HEAPF64[$3 + 32 >> 3]);
      break block1;
     case 10:
      HEAP32[$3 + 76 >> 2] = jsvNewFromFloat(HEAPF64[$3 + 40 >> 3] / HEAPF64[$3 + 32 >> 3]);
      break block1;
     case 0:
      HEAP32[$3 + 76 >> 2] = jsvNewFromFloat(jswrap_math_mod(HEAPF64[$3 + 40 >> 3], HEAPF64[$3 + 32 >> 3]));
      break block1;
     case 101:
     case 103:
      if (HEAPF64[$3 + 40 >> 3] == HEAPF64[$3 + 32 >> 3]) {
       $4 = (jsvIsNull(HEAP32[$3 + 72 >> 2]) & 1) == (jsvIsNull(HEAP32[$3 + 68 >> 2]) & 1)
      }
      HEAP8[$3 + 31 | 0] = $4;
      block44 : {
       block43 : {
        if (jsvIsNull(HEAP32[$3 + 72 >> 2]) & 1) {
         if (jsvIsUndefined(HEAP32[$3 + 68 >> 2]) & 1) {
          break block43
         }
        }
        if (!(jsvIsNull(HEAP32[$3 + 68 >> 2]) & 1)) {
         break block44
        }
        if (!(jsvIsUndefined(HEAP32[$3 + 72 >> 2]) & 1)) {
         break block44
        }
       }
       HEAP8[$3 + 31 | 0] = 1;
      }
      if (HEAP32[$3 + 64 >> 2] == 138) {
       $0 = HEAP8[$3 + 31 | 0] & 1
      } else {
       $0 = (HEAPU8[$3 + 31 | 0] ^ -1) & 1
      }
      HEAP32[$3 + 76 >> 2] = jsvNewFromBool($0);
      break block1;
     case 23:
      HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAPF64[$3 + 40 >> 3] < HEAPF64[$3 + 32 >> 3]);
      break block1;
     case 105:
      HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAPF64[$3 + 40 >> 3] <= HEAPF64[$3 + 32 >> 3]);
      break block1;
     case 25:
      HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAPF64[$3 + 40 >> 3] > HEAPF64[$3 + 32 >> 3]);
      break block1;
     case 108:
      HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAPF64[$3 + 40 >> 3] >= HEAPF64[$3 + 32 >> 3]);
      break block1;
     default:
      break block33;
     };
    }
    HEAP32[$3 + 76 >> 2] = jsvMathsOpError(HEAP32[$3 + 64 >> 2], 137699);
    break block1;
   }
   block47 : {
    block46 : {
     if (jsvIsArray(HEAP32[$3 + 72 >> 2]) & 1) {
      break block46
     }
     if (jsvIsObject(HEAP32[$3 + 72 >> 2]) & 1) {
      break block46
     }
     if (jsvIsFunction(HEAP32[$3 + 72 >> 2]) & 1) {
      break block46
     }
     if (jsvIsArray(HEAP32[$3 + 68 >> 2]) & 1) {
      break block46
     }
     if (jsvIsObject(HEAP32[$3 + 68 >> 2]) & 1) {
      break block46
     }
     if (!(jsvIsFunction(HEAP32[$3 + 68 >> 2]) & 1)) {
      break block47
     }
    }
    if ((jsvIsArray(HEAP32[$3 + 72 >> 2]) & 1) != (jsvIsArray(HEAP32[$3 + 68 >> 2]) & 1) | HEAP32[$3 + 64 >> 2] != 138 & HEAP32[$3 + 64 >> 2] != 140) {
     break block47
    }
    HEAP8[$3 + 30 | 0] = HEAP32[$3 + 72 >> 2] == HEAP32[$3 + 68 >> 2];
    block48 : {
     if (!(jsvIsNativeFunction(HEAP32[$3 + 72 >> 2]) & 1)) {
      if (!(jsvIsNativeFunction(HEAP32[$3 + 68 >> 2]) & 1)) {
       break block48
      }
     }
     $2 = 0;
     block49 : {
      if (!HEAP32[$3 + 72 >> 2]) {
       break block49
      }
      $2 = 0;
      if (!HEAP32[$3 + 68 >> 2]) {
       break block49
      }
      $1 = HEAP32[$3 + 72 >> 2];
      $0 = HEAP32[$3 + 68 >> 2];
      $2 = 0;
      if ((HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24)) != (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24))) {
       break block49
      }
      $1 = HEAP32[$3 + 72 >> 2];
      $0 = HEAP32[$3 + 68 >> 2];
      $2 = 0;
      if ((HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8) != (HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8)) {
       break block49
      }
      $2 = (jsvGetFirstChild(HEAP32[$3 + 72 >> 2]) & 65535) == (jsvGetFirstChild(HEAP32[$3 + 68 >> 2]) & 65535);
     }
     HEAP8[$3 + 30 | 0] = $2;
    }
    block51 : {
     switch (HEAP32[$3 + 64 >> 2] - 138 | 0) {
     case 0:
      HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP8[$3 + 30 | 0] & 1);
      break block1;
     case 2:
      HEAP32[$3 + 76 >> 2] = jsvNewFromBool((HEAPU8[$3 + 30 | 0] ^ -1) & 1);
      break block1;
     default:
      break block51;
     };
    }
    HEAP32[$3 + 76 >> 2] = jsvMathsOpError(HEAP32[$3 + 64 >> 2], jsvIsArray(HEAP32[$3 + 72 >> 2]) & 1 ? 123888 : 125086);
    break block1;
   }
   HEAP32[$3 + 24 >> 2] = jsvAsString(HEAP32[$3 + 72 >> 2]);
   HEAP32[$3 + 20 >> 2] = jsvAsString(HEAP32[$3 + 68 >> 2]);
   if (!(HEAP32[$3 + 20 >> 2] ? HEAP32[$3 + 24 >> 2] : 0)) {
    jsvUnLock2(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
    HEAP32[$3 + 76 >> 2] = 0;
    break block1;
   }
   if (HEAP32[$3 + 64 >> 2] == 43) {
    $0 = HEAP32[$3 + 24 >> 2];
    HEAP16[$3 + 14 >> 1] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
    block55 : {
     block54 : {
      if (HEAPU16[$3 + 14 >> 1] < 28 | HEAPU16[$3 + 14 >> 1] > 37) {
       break block54
      }
      if ((jsvGetLocks(HEAP32[$3 + 24 >> 2]) & 255) != 1) {
       break block54
      }
      if (jsvGetRefs(HEAP32[$3 + 24 >> 2]) & 65535) {
       break block54
      }
      HEAP32[$3 + 16 >> 2] = jsvLockAgain(HEAP32[$3 + 24 >> 2]);
      break block55;
     }
     block58 : {
      if (!(!(HEAPU16[$3 + 14 >> 1] == 38 | HEAPU16[$3 + 14 >> 1] == 39) & HEAPU16[$3 + 14 >> 1] != 40)) {
       HEAP32[$3 + 16 >> 2] = jsvNewFromStringVarComplete(HEAP32[$3 + 24 >> 2]);
       break block58;
      }
      HEAP32[$3 + 16 >> 2] = jsvCopy(HEAP32[$3 + 24 >> 2], 0);
     }
    }
    if (HEAP32[$3 + 16 >> 2]) {
     jsvAppendStringVarComplete(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 20 >> 2])
    }
    jsvUnLock2(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
    HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 16 >> 2];
    break block1;
   }
   HEAP32[$3 + 8 >> 2] = jsvCompareString(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], 0, 0, 0);
   jsvUnLock2(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
   block61 : {
    block63 : {
     block59 : {
      block62 : {
       $0 = HEAP32[$3 + 64 >> 2];
       if (($0 | 0) != 60) {
        if (($0 | 0) == 62) {
         break block59
        }
        block60 : {
         if (($0 | 0) != 138) {
          switch ($0 - 140 | 0) {
          case 0:
           break block60;
          case 2:
           break block62;
          case 5:
           break block63;
          default:
           break block61;
          }
         }
         HEAP32[$3 + 76 >> 2] = jsvNewFromBool(!HEAP32[$3 + 8 >> 2]);
         break block1;
        }
        HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 8 >> 2] != 0);
        break block1;
       }
       HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 8 >> 2] < 0);
       break block1;
      }
      HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 8 >> 2] <= 0);
      break block1;
     }
     HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 8 >> 2] > 0);
     break block1;
    }
    HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 8 >> 2] >= 0);
    break block1;
   }
   HEAP32[$3 + 76 >> 2] = jsvMathsOpError(HEAP32[$3 + 64 >> 2], 136708);
  }
  __stack_pointer = $3 + 80 | 0;
  return HEAP32[$3 + 76 >> 2];
 }
 
 function jsvGetIndexOf($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP8[$3 + 7 | 0] = $2;
  $0 = jsvGetIndexOfFull(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1, 0, 0);
  __stack_pointer = $3 + 16 | 0;
  return $0;
 }
 
 function jsvArrayAddToEnd($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP32[$3 + 16 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 16 >> 2];
  if (jsvGetLastChild(HEAP32[$3 + 24 >> 2]) & 65535) {
   HEAP32[$3 + 8 >> 2] = jsvLock(jsvGetLastChild(HEAP32[$3 + 24 >> 2]) & 65535);
   HEAP32[$3 + 12 >> 2] = jsvGetInteger(HEAP32[$3 + 8 >> 2]) + 1;
   jsvUnLock(HEAP32[$3 + 8 >> 2]);
  }
  HEAP32[$3 + 4 >> 2] = jsvMakeIntoVariableName(jsvNewFromInteger(HEAP32[$3 + 12 >> 2]), HEAP32[$3 + 20 >> 2]);
  block : {
   if (!HEAP32[$3 + 4 >> 2]) {
    HEAP32[$3 + 28 >> 2] = 0;
    break block;
   }
   jsvAddName(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 4 >> 2]);
   jsvUnLock(HEAP32[$3 + 4 >> 2]);
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
  }
  __stack_pointer = $3 + 32 | 0;
  return HEAP32[$3 + 28 >> 2];
 }
 
 function jsvArrayPushString($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $0 = jsvArrayPushAndUnLock(HEAP32[$2 + 12 >> 2], jsvNewFromString(HEAP32[$2 + 8 >> 2]));
  __stack_pointer = $2 + 16 | 0;
  return $0;
 }
 
 function jsvArrayPush2Int($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  jsvArrayPushAndUnLock(HEAP32[$3 + 12 >> 2], jsvNewFromInteger(HEAP32[$3 + 8 >> 2]));
  jsvArrayPushAndUnLock(HEAP32[$3 + 12 >> 2], jsvNewFromInteger(HEAP32[$3 + 4 >> 2]));
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jsvArrayPushAll($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP8[$3 + 23 | 0] = $2;
  jsvObjectIteratorNew($3 + 16 | 0, HEAP32[$3 + 24 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue($3 + 16 | 0) & 1) {
    HEAP32[$3 + 12 >> 2] = jsvObjectIteratorGetValue($3 + 16 | 0);
    HEAP8[$3 + 11 | 0] = 1;
    if (HEAP8[$3 + 23 | 0] & 1) {
     HEAP32[$3 + 4 >> 2] = jsvGetIndexOf(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 12 >> 2], 0);
     if (HEAP32[$3 + 4 >> 2]) {
      HEAP8[$3 + 11 | 0] = 0;
      jsvUnLock(HEAP32[$3 + 4 >> 2]);
     }
    }
    if (HEAP8[$3 + 11 | 0] & 1) {
     jsvArrayPush(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 12 >> 2])
    }
    jsvUnLock(HEAP32[$3 + 12 >> 2]);
    jsvObjectIteratorNext($3 + 16 | 0);
    continue;
   }
   break;
  };
  jsvObjectIteratorFree($3 + 16 | 0);
  __stack_pointer = $3 + 32 | 0;
 }
 
 function jsvArrayPop($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = jsvGetArrayLength(HEAP32[$1 + 12 >> 2]);
  if (HEAP32[$1 + 4 >> 2] > 0) {
   HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - 1;
   if (jsvGetLastChild(HEAP32[$1 + 12 >> 2]) & 65535) {
    HEAP16[$1 + 2 >> 1] = jsvGetLastChild(HEAP32[$1 + 12 >> 2]);
    HEAP32[$1 + 8 >> 2] = jsvLock(HEAPU16[$1 + 2 >> 1]);
    while (1) {
     $0 = 0;
     if (HEAP32[$1 + 8 >> 2]) {
      $0 = jsvIsInt(HEAP32[$1 + 8 >> 2]) ^ -1
     }
     if ($0 & 1) {
      HEAP16[$1 + 2 >> 1] = jsvGetPrevSibling(HEAP32[$1 + 8 >> 2]);
      jsvUnLock(HEAP32[$1 + 8 >> 2]);
      block : {
       if (HEAPU16[$1 + 2 >> 1]) {
        HEAP32[$1 + 8 >> 2] = jsvLock(HEAPU16[$1 + 2 >> 1]);
        break block;
       }
       HEAP32[$1 + 8 >> 2] = 0;
      }
      continue;
     }
     break;
    };
    if (HEAP32[$1 + 8 >> 2]) {
     block1 : {
      if ((jsvGetInteger(HEAP32[$1 + 8 >> 2]) | 0) == HEAP32[$1 + 4 >> 2]) {
       jsvRemoveChild(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 8 >> 2]);
       break block1;
      }
      jsvUnLock(HEAP32[$1 + 8 >> 2]);
      HEAP32[$1 + 8 >> 2] = 0;
     }
    }
   }
   jsvSetArrayLength(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 4 >> 2], 0);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 8 >> 2];
 }
 
 function jsvArrayPopFirst($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535) {
    HEAP32[$1 + 4 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535);
    if ((jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535) == (jsvGetLastChild(HEAP32[$1 + 8 >> 2]) & 65535)) {
     jsvSetLastChild(HEAP32[$1 + 8 >> 2], 0)
    }
    jsvSetFirstChild(HEAP32[$1 + 8 >> 2], jsvGetNextSibling(HEAP32[$1 + 4 >> 2]) & 65535);
    jsvUnRef(HEAP32[$1 + 4 >> 2]);
    if (jsvGetNextSibling(HEAP32[$1 + 4 >> 2]) & 65535) {
     HEAP32[$1 >> 2] = jsvLock(jsvGetNextSibling(HEAP32[$1 + 4 >> 2]) & 65535);
     jsvSetPrevSibling(HEAP32[$1 >> 2], 0);
     jsvUnLock(HEAP32[$1 >> 2]);
    }
    jsvSetNextSibling(HEAP32[$1 + 4 >> 2], 0);
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
    break block;
   }
   HEAP32[$1 + 12 >> 2] = 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvArrayAddUnique($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = jsvGetIndexOf(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0);
  block : {
   if (!HEAP32[$2 + 4 >> 2]) {
    jsvArrayPush(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
    break block;
   }
   jsvUnLock(HEAP32[$2 + 4 >> 2]);
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsvArrayInsertBefore($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  block : {
   if (HEAP32[$3 + 24 >> 2]) {
    HEAP32[$3 + 16 >> 2] = jsvMakeIntoVariableName(jsvNewFromInteger(0), HEAP32[$3 + 20 >> 2]);
    if (!HEAP32[$3 + 16 >> 2]) {
     break block
    }
    HEAP16[$3 + 14 >> 1] = jsvGetRef(jsvRef(HEAP32[$3 + 16 >> 2]));
    HEAP16[$3 + 12 >> 1] = jsvGetPrevSibling(HEAP32[$3 + 24 >> 2]);
    block1 : {
     if (HEAPU16[$3 + 12 >> 1]) {
      HEAP32[$3 + 8 >> 2] = jsvRef(jsvLock(HEAPU16[$3 + 12 >> 1]));
      jsvSetInteger(HEAP32[$3 + 16 >> 2], jsvGetInteger(HEAP32[$3 + 8 >> 2]) + 1 | 0);
      jsvSetNextSibling(HEAP32[$3 + 8 >> 2], HEAPU16[$3 + 14 >> 1]);
      jsvUnLock(HEAP32[$3 + 8 >> 2]);
      jsvSetPrevSibling(HEAP32[$3 + 16 >> 2], HEAPU16[$3 + 12 >> 1]);
      break block1;
     }
     jsvSetPrevSibling(HEAP32[$3 + 16 >> 2], 0);
     jsvSetFirstChild(HEAP32[$3 + 28 >> 2], HEAPU16[$3 + 14 >> 1]);
    }
    jsvSetPrevSibling(HEAP32[$3 + 24 >> 2], HEAPU16[$3 + 14 >> 1]);
    jsvSetNextSibling(HEAP32[$3 + 16 >> 2], jsvGetRef(jsvRef(HEAP32[$3 + 24 >> 2])) & 65535);
    jsvUnLock(HEAP32[$3 + 16 >> 2]);
    break block;
   }
   jsvArrayPush(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 20 >> 2]);
  }
  __stack_pointer = $3 + 32 | 0;
 }
 
 function jsvMathsOpSkipNames($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  HEAP32[$3 + 16 >> 2] = jsvSkipName(HEAP32[$3 + 28 >> 2]);
  HEAP32[$3 + 12 >> 2] = jsvSkipName(HEAP32[$3 + 24 >> 2]);
  HEAP32[$3 + 8 >> 2] = jsvGetValueOf(HEAP32[$3 + 16 >> 2]);
  HEAP32[$3 + 4 >> 2] = jsvGetValueOf(HEAP32[$3 + 12 >> 2]);
  jsvUnLock2(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 12 >> 2]);
  HEAP32[$3 >> 2] = jsvMathsOp(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], HEAP32[$3 + 20 >> 2]);
  jsvUnLock2(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 32 | 0;
  return HEAP32[$3 >> 2];
 }
 
 function jsvMathsOpError($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer + -64 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 60 >> 2] = $0;
  HEAP32[$2 + 56 >> 2] = $1;
  jslTokenAsString(HEAP32[$2 + 60 >> 2], $2 + 16 | 0, 32);
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 56 >> 2];
  HEAP32[$2 >> 2] = $2 + 16;
  jsError(137503, $2);
  __stack_pointer = $2 - -64 | 0;
  return 0;
 }
 
 function jsvNegateAndUnLock($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = jsvNewFromInteger(0);
  HEAP32[$1 + 4 >> 2] = jsvMathsOpSkipNames(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2], 45);
  jsvUnLock2(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 4 >> 2];
 }
 
 function jsvGetPathTo($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  HEAP32[$4 + 12 >> 2] = 0;
  $0 = jsvGetPathTo_int(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2], $4 + 12 | 0);
  __stack_pointer = $4 + 32 | 0;
  return $0;
 }
 
 function jsvGetPathTo_int($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 128 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 120 >> 2] = $0;
  HEAP32[$5 + 116 >> 2] = $1;
  HEAP32[$5 + 112 >> 2] = $2;
  HEAP32[$5 + 108 >> 2] = $3;
  HEAP32[$5 + 104 >> 2] = $4;
  block : {
   if (HEAP32[$5 + 112 >> 2] <= 0) {
    HEAP32[$5 + 124 >> 2] = 0;
    break block;
   }
   HEAP32[$5 + 100 >> 2] = HEAP32[$5 + 112 >> 2] + 1;
   HEAP32[$5 + 96 >> 2] = 0;
   jsvIteratorNew($5 + 36 | 0, HEAP32[$5 + 120 >> 2], 0);
   while (1) {
    if (jsvIteratorHasElement($5 + 36 | 0) & 1) {
     HEAP32[$5 + 32 >> 2] = jsvIteratorGetValue($5 + 36 | 0);
     if (!(HEAP32[$5 + 120 >> 2] == HEAP32[$5 + 108 >> 2] | HEAP32[$5 + 32 >> 2] != HEAP32[$5 + 116 >> 2])) {
      HEAP32[$5 + 28 >> 2] = jsvAsStringAndUnLock(jsvIteratorGetKey($5 + 36 | 0));
      jsvIteratorFree($5 + 36 | 0);
      HEAP32[$5 + 124 >> 2] = HEAP32[$5 + 28 >> 2];
      break block;
     }
     block3 : {
      block2 : {
       if (jsvIsObject(HEAP32[$5 + 32 >> 2]) & 1) {
        break block2
       }
       if (jsvIsArray(HEAP32[$5 + 32 >> 2]) & 1) {
        break block2
       }
       if (!(jsvIsFunction(HEAP32[$5 + 32 >> 2]) & 1)) {
        break block3
       }
      }
      HEAP32[$5 + 20 >> 2] = jsvGetPathTo_int(HEAP32[$5 + 32 >> 2], HEAP32[$5 + 116 >> 2], HEAP32[$5 + 112 >> 2] - 1 | 0, HEAP32[$5 + 108 >> 2], $5 + 24 | 0);
      if (!(!HEAP32[$5 + 20 >> 2] | HEAP32[$5 + 24 >> 2] >= HEAP32[$5 + 100 >> 2])) {
       HEAP32[$5 + 100 >> 2] = HEAP32[$5 + 24 >> 2];
       HEAP32[$5 + 16 >> 2] = jsvIteratorGetKey($5 + 36 | 0);
       jsvUnLock(HEAP32[$5 + 96 >> 2]);
       $0 = jsvIsObject(HEAP32[$5 + 32 >> 2]) & 1;
       $1 = HEAP32[$5 + 16 >> 2];
       HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 20 >> 2];
       HEAP32[$5 >> 2] = $1;
       HEAP32[$5 + 96 >> 2] = jsvVarPrintf($0 ? 124254 : 140465, $5);
       jsvUnLock(HEAP32[$5 + 16 >> 2]);
      }
      jsvUnLock(HEAP32[$5 + 20 >> 2]);
     }
     jsvIteratorNext($5 + 36 | 0);
     continue;
    }
    break;
   };
   jsvIteratorFree($5 + 36 | 0);
   HEAP32[HEAP32[$5 + 104 >> 2] >> 2] = HEAP32[$5 + 100 >> 2];
   HEAP32[$5 + 124 >> 2] = HEAP32[$5 + 96 >> 2];
  }
  __stack_pointer = $5 + 128 | 0;
  return HEAP32[$5 + 124 >> 2];
 }
 
 function jsvTraceLockInfo($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jsvGetRef(HEAP32[$1 + 12 >> 2]);
  $2 = jsvGetRefs(HEAP32[$1 + 12 >> 2]);
  HEAP32[$1 + 8 >> 2] = jsvGetLocks(HEAP32[$1 + 12 >> 2]) & 255;
  HEAP32[$1 + 4 >> 2] = $2 & 65535;
  HEAP32[$1 >> 2] = $0 & 65535;
  jsiConsolePrintf(146813, $1);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function _jsvTraceGetLowestLevel($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 40 >> 2] = $0;
  HEAP32[$2 + 36 >> 2] = $1;
  block : {
   if (HEAP32[$2 + 40 >> 2] == HEAP32[$2 + 36 >> 2]) {
    HEAP32[$2 + 44 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 32 >> 2] = -1;
   $0 = HEAP32[$2 + 40 >> 2];
   if ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 512) {
    HEAP32[$2 + 44 >> 2] = -1;
    break block;
   }
   $0 = HEAP32[$2 + 40 >> 2];
   $1 = HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8 | 512;
   HEAP8[$0 + 12 | 0] = $1;
   HEAP8[$0 + 13 | 0] = $1 >>> 8;
   block1 : {
    if (!(jsvHasSingleChild(HEAP32[$2 + 40 >> 2]) & 1)) {
     break block1
    }
    if (!(jsvGetFirstChild(HEAP32[$2 + 40 >> 2]) & 65535)) {
     break block1
    }
    HEAP32[$2 + 28 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$2 + 40 >> 2]) & 65535);
    HEAP32[$2 + 24 >> 2] = _jsvTraceGetLowestLevel(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 36 >> 2]);
    jsvUnLock(HEAP32[$2 + 28 >> 2]);
    if (!(HEAP32[$2 + 32 >> 2] >= 0 & HEAP32[$2 + 24 >> 2] >= HEAP32[$2 + 32 >> 2] | HEAP32[$2 + 24 >> 2] < 0)) {
     HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 24 >> 2] + 1
    }
   }
   if (jsvHasChildren(HEAP32[$2 + 40 >> 2]) & 1) {
    HEAP16[$2 + 22 >> 1] = jsvGetFirstChild(HEAP32[$2 + 40 >> 2]);
    while (1) {
     if (HEAPU16[$2 + 22 >> 1]) {
      HEAP32[$2 + 16 >> 2] = jsvLock(HEAPU16[$2 + 22 >> 1]);
      HEAP32[$2 + 12 >> 2] = _jsvTraceGetLowestLevel(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 36 >> 2]);
      if (!(HEAP32[$2 + 32 >> 2] >= 0 & HEAP32[$2 + 12 >> 2] >= HEAP32[$2 + 32 >> 2] | HEAP32[$2 + 12 >> 2] < 0)) {
       HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 12 >> 2] + 1
      }
      HEAP16[$2 + 22 >> 1] = jsvGetNextSibling(HEAP32[$2 + 16 >> 2]);
      jsvUnLock(HEAP32[$2 + 16 >> 2]);
      continue;
     }
     break;
    };
   }
   $0 = HEAP32[$2 + 40 >> 2];
   $1 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & -513;
   HEAP8[$0 + 12 | 0] = $1;
   HEAP8[$0 + 13 | 0] = $1 >>> 8;
   HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
  }
  __stack_pointer = $2 + 48 | 0;
  return HEAP32[$2 + 44 >> 2];
 }
 
 function jsvGarbageCollectMarkUsed($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  $0 = HEAP32[$1 + 8 >> 2];
  $2 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 65279;
  HEAP8[$0 + 12 | 0] = $2;
  HEAP8[$0 + 13 | 0] = $2 >>> 8;
  if (jsvHasStringExt(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP16[$1 + 6 >> 1] = jsvGetLastChild(HEAP32[$1 + 8 >> 2]);
   while (1) {
    if (HEAPU16[$1 + 6 >> 1]) {
     HEAP32[$1 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 6 >> 1]);
     $0 = HEAP32[$1 >> 2];
     $2 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 65279;
     HEAP8[$0 + 12 | 0] = $2;
     HEAP8[$0 + 13 | 0] = $2 >>> 8;
     HEAP16[$1 + 6 >> 1] = jsvGetLastChild(HEAP32[$1 >> 2]);
     continue;
    }
    break;
   };
  }
  block : {
   block1 : {
    if (jsvHasSingleChild(HEAP32[$1 + 8 >> 2]) & 1) {
     if (jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535) {
      HEAP32[$1 >> 2] = jsvGetAddressOf(jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535);
      $0 = HEAP32[$1 >> 2];
      if ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 256) {
       if (!(jsvGarbageCollectMarkUsed(HEAP32[$1 >> 2]) & 1)) {
        HEAP8[$1 + 15 | 0] = 0;
        break block;
       }
      }
     }
     break block1;
    }
    if (jsvHasChildren(HEAP32[$1 + 8 >> 2]) & 1) {
     if (jsuGetFreeStack() >>> 0 < 256) {
      HEAP8[$1 + 15 | 0] = 0;
      break block;
     }
     HEAP16[$1 + 6 >> 1] = jsvGetFirstChild(HEAP32[$1 + 8 >> 2]);
     while (1) {
      if (HEAPU16[$1 + 6 >> 1]) {
       HEAP32[$1 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 6 >> 1]);
       $0 = HEAP32[$1 >> 2];
       if ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 256) {
        if (!(jsvGarbageCollectMarkUsed(HEAP32[$1 >> 2]) & 1)) {
         HEAP8[$1 + 15 | 0] = 0;
         break block;
        }
       }
       HEAP16[$1 + 6 >> 1] = jsvGetNextSibling(HEAP32[$1 >> 2]);
       continue;
      }
      break;
     };
    }
   }
   HEAP8[$1 + 15 | 0] = 1;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvDefragment() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $0 = __stack_pointer - 560 | 0;
  __stack_pointer = $0;
  jsvGarbageCollect();
  jshInterruptOff();
  HEAP32[$0 + 556 >> 2] = 256;
  HEAP32[$0 + 552 >> 2] = $0;
  wasm2js_memory_fill($0, 0, 512);
  HEAP32[$0 + 548 >> 2] = 0;
  HEAP32[$0 + 544 >> 2] = 0;
  while (1) {
   if (HEAPU32[$0 + 544 >> 2] < jsvGetMemoryTotal() >>> 0) {
    HEAP16[$0 + 542 >> 1] = HEAP32[$0 + 544 >> 2] + 1;
    HEAP32[$0 + 536 >> 2] = _jsvGetAddressOf(HEAPU16[$0 + 542 >> 1]);
    $1 = HEAP32[$0 + 536 >> 2];
    if ((HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & 63) {
     block : {
      if (jsvIsFlatString(HEAP32[$0 + 536 >> 2]) & 1) {
       HEAP32[$0 + 544 >> 2] = jsvGetFlatStringBlocks(HEAP32[$0 + 536 >> 2]) + HEAP32[$0 + 544 >> 2];
       break block;
      }
      if (!(jsvGetLocks(HEAP32[$0 + 536 >> 2]) & 255)) {
       HEAP16[(HEAP32[$0 + 548 >> 2] << 1) + $0 >> 1] = HEAPU16[$0 + 542 >> 1];
       HEAP32[$0 + 548 >> 2] = HEAP32[$0 + 548 >> 2] + 1 & 255;
      }
     }
    }
    HEAP32[$0 + 544 >> 2] = HEAP32[$0 + 544 >> 2] + 1;
    continue;
   }
   break;
  };
  HEAP32[$0 + 548 >> 2] = HEAP32[$0 + 548 >> 2] - 1;
  if (HEAP32[$0 + 548 >> 2] < 0) {
   HEAP32[$0 + 548 >> 2] = HEAP32[$0 + 548 >> 2] + 256
  }
  while (1) {
   block1 : {
    if (!HEAPU16[(HEAP32[$0 + 548 >> 2] << 1) + $0 >> 1]) {
     break block1
    }
    HEAP16[$0 + 534 >> 1] = HEAPU16[(HEAP32[$0 + 548 >> 2] << 1) + $0 >> 1];
    HEAP16[$0 + 532 >> 1] = HEAPU16[100250];
    if (!HEAPU16[$0 + 532 >> 1] | HEAPU16[$0 + 534 >> 1] < HEAPU16[$0 + 532 >> 1]) {
     break block1
    }
    HEAP32[$0 + 528 >> 2] = _jsvGetAddressOf(HEAPU16[$0 + 534 >> 1]);
    HEAP32[$0 + 524 >> 2] = _jsvGetAddressOf(HEAPU16[$0 + 532 >> 1]);
    HEAP16[100250] = jsvGetNextSibling(HEAP32[$0 + 524 >> 2]);
    $2 = HEAP32[$0 + 528 >> 2];
    $1 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
    $3 = HEAP32[$0 + 524 >> 2];
    $4 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
    HEAP8[$3 | 0] = $4;
    HEAP8[$3 + 1 | 0] = $4 >>> 8;
    HEAP8[$3 + 2 | 0] = $4 >>> 16;
    HEAP8[$3 + 3 | 0] = $4 >>> 24;
    HEAP8[$3 + 4 | 0] = $1;
    HEAP8[$3 + 5 | 0] = $1 >>> 8;
    HEAP8[$3 + 6 | 0] = $1 >>> 16;
    HEAP8[$3 + 7 | 0] = $1 >>> 24;
    $1 = HEAPU8[$2 + 12 | 0] | HEAPU8[$2 + 13 | 0] << 8;
    HEAP8[$3 + 12 | 0] = $1;
    HEAP8[$3 + 13 | 0] = $1 >>> 8;
    $1 = HEAPU8[$2 + 8 | 0] | HEAPU8[$2 + 9 | 0] << 8 | (HEAPU8[$2 + 10 | 0] << 16 | HEAPU8[$2 + 11 | 0] << 24);
    HEAP8[$3 + 8 | 0] = $1;
    HEAP8[$3 + 9 | 0] = $1 >>> 8;
    HEAP8[$3 + 10 | 0] = $1 >>> 16;
    HEAP8[$3 + 11 | 0] = $1 >>> 24;
    $1 = HEAP32[$0 + 528 >> 2];
    HEAP8[$1 + 12 | 0] = 0;
    HEAP8[$1 + 13 | 0] = 0;
    HEAP32[$0 + 520 >> 2] = 0;
    while (1) {
     if (HEAPU32[$0 + 520 >> 2] < jsvGetMemoryTotal() >>> 0) {
      HEAP16[$0 + 518 >> 1] = HEAP32[$0 + 520 >> 2] + 1;
      HEAP32[$0 + 512 >> 2] = _jsvGetAddressOf(HEAPU16[$0 + 518 >> 1]);
      $1 = HEAP32[$0 + 512 >> 2];
      if ((HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & 63) {
       block2 : {
        if (jsvIsFlatString(HEAP32[$0 + 512 >> 2]) & 1) {
         HEAP32[$0 + 520 >> 2] = jsvGetFlatStringBlocks(HEAP32[$0 + 512 >> 2]) + HEAP32[$0 + 520 >> 2];
         break block2;
        }
        if (jsvHasSingleChild(HEAP32[$0 + 512 >> 2]) & 1) {
         if ((jsvGetFirstChild(HEAP32[$0 + 512 >> 2]) & 65535) == HEAPU16[$0 + 534 >> 1]) {
          jsvSetFirstChild(HEAP32[$0 + 512 >> 2], HEAPU16[$0 + 532 >> 1])
         }
        }
        if (jsvHasStringExt(HEAP32[$0 + 512 >> 2]) & 1) {
         if ((jsvGetLastChild(HEAP32[$0 + 512 >> 2]) & 65535) == HEAPU16[$0 + 534 >> 1]) {
          jsvSetLastChild(HEAP32[$0 + 512 >> 2], HEAPU16[$0 + 532 >> 1])
         }
        }
        if (jsvHasChildren(HEAP32[$0 + 512 >> 2]) & 1) {
         if ((jsvGetFirstChild(HEAP32[$0 + 512 >> 2]) & 65535) == HEAPU16[$0 + 534 >> 1]) {
          jsvSetFirstChild(HEAP32[$0 + 512 >> 2], HEAPU16[$0 + 532 >> 1])
         }
         if ((jsvGetLastChild(HEAP32[$0 + 512 >> 2]) & 65535) == HEAPU16[$0 + 534 >> 1]) {
          jsvSetLastChild(HEAP32[$0 + 512 >> 2], HEAPU16[$0 + 532 >> 1])
         }
        }
        if (jsvIsName(HEAP32[$0 + 512 >> 2]) & 1) {
         if ((jsvGetNextSibling(HEAP32[$0 + 512 >> 2]) & 65535) == HEAPU16[$0 + 534 >> 1]) {
          jsvSetNextSibling(HEAP32[$0 + 512 >> 2], HEAPU16[$0 + 532 >> 1])
         }
         if ((jsvGetPrevSibling(HEAP32[$0 + 512 >> 2]) & 65535) == HEAPU16[$0 + 534 >> 1]) {
          jsvSetPrevSibling(HEAP32[$0 + 512 >> 2], HEAPU16[$0 + 532 >> 1])
         }
        }
       }
      }
      HEAP32[$0 + 520 >> 2] = HEAP32[$0 + 520 >> 2] + 1;
      continue;
     }
     break;
    };
    HEAP16[(HEAP32[$0 + 548 >> 2] << 1) + $0 >> 1] = 0;
    HEAP32[$0 + 548 >> 2] = HEAP32[$0 + 548 >> 2] - 1;
    if (HEAP32[$0 + 548 >> 2] < 0) {
     HEAP32[$0 + 548 >> 2] = HEAP32[$0 + 548 >> 2] + 256
    }
    jshKickWatchDog();
    jshKickSoftWatchDog();
    continue;
   }
   break;
  };
  jsvCreateEmptyVarList();
  jshInterruptOn();
  $0 = HEAP32[$0 + 552 >> 2];
  __stack_pointer = $0 + 560 | 0;
 }
 
 function jsvStringTrimRight($0) {
  var $1 = 0;
  $1 = __stack_pointer - 96 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 92 >> 2] = $0;
  HEAP32[$1 + 16 >> 2] = jsvNewFromEmptyString_186();
  jsvStringIteratorNew($1 + 56 | 0, HEAP32[$1 + 92 >> 2], 0);
  jsvStringIteratorNew($1 + 20 | 0, HEAP32[$1 + 16 >> 2], 0);
  HEAP32[$1 + 12 >> 2] = 0;
  while (1) {
   if (jsvStringIteratorHasChar_180($1 + 56 | 0) & 1) {
    HEAP8[$1 + 11 | 0] = jsvStringIteratorGetCharAndNext($1 + 56 | 0);
    block : {
     if (HEAPU8[$1 + 11 | 0] == 32) {
      HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] + 1;
      break block;
     }
     block1 : {
      if (HEAPU8[$1 + 11 | 0] == 10) {
       HEAP32[$1 + 12 >> 2] = 0;
       break block1;
      }
      while (1) {
       if (HEAP32[$1 + 12 >> 2] > 0) {
        jsvStringIteratorAppend($1 + 20 | 0, 32);
        HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] - 1;
        continue;
       }
       break;
      };
     }
     jsvStringIteratorAppend($1 + 20 | 0, HEAP8[$1 + 11 | 0] << 24 >> 24);
    }
    continue;
   }
   break;
  };
  jsvStringIteratorFree_161($1 + 56 | 0);
  jsvStringIteratorFree_161($1 + 20 | 0);
  __stack_pointer = $1 + 96 | 0;
  return HEAP32[$1 + 16 >> 2];
 }
 
 function jsvIsInternalFunctionKey($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  block : {
   if (jsvIsString(HEAP32[$1 + 12 >> 2]) & 1) {
    $0 = 1;
    if (HEAPU8[HEAP32[$1 + 12 >> 2]] == 255) {
     break block
    }
   }
   $0 = jsvIsFunctionParameter(HEAP32[$1 + 12 >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return $0 & 1;
 }
 
 function jsvGetInternalFunctionCheckerFor($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (jsvIsFunction(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = 3;
    break block;
   }
   if (jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = 4;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvReadConfigObject($0, $1, $2) {
  var $3 = 0, $4 = 0.0;
  $3 = __stack_pointer + -64 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 56 >> 2] = $0;
  HEAP32[$3 + 52 >> 2] = $1;
  HEAP32[$3 + 48 >> 2] = $2;
  block : {
   if (jsvIsUndefined(HEAP32[$3 + 56 >> 2]) & 1) {
    HEAP8[$3 + 63 | 0] = 1;
    break block;
   }
   if (!(jsvIsObject(HEAP32[$3 + 56 >> 2]) & 1)) {
    HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 56 >> 2];
    jsExceptionHere(1, 126261, $3 + 16 | 0);
    HEAP8[$3 + 63 | 0] = 0;
    break block;
   }
   jsvObjectIteratorNew($3 + 44 | 0, HEAP32[$3 + 56 >> 2]);
   HEAP8[$3 + 43 | 0] = 1;
   while (1) {
    $0 = 0;
    if (HEAP8[$3 + 43 | 0] & 1) {
     $0 = jsvObjectIteratorHasValue($3 + 44 | 0)
    }
    if ($0 & 1) {
     HEAP32[$3 + 36 >> 2] = jsvObjectIteratorGetKey($3 + 44 | 0);
     HEAP8[$3 + 35 | 0] = 0;
     HEAP32[$3 + 28 >> 2] = 0;
     while (1) {
      if (HEAP32[$3 + 28 >> 2] < HEAP32[$3 + 48 >> 2]) {
       if (jsvIsStringEqual(HEAP32[$3 + 36 >> 2], HEAP32[HEAP32[$3 + 52 >> 2] + Math_imul(HEAP32[$3 + 28 >> 2], 12) >> 2]) & 1) {
        HEAP8[$3 + 35 | 0] = 1;
        if (HEAP32[(HEAP32[$3 + 52 >> 2] + Math_imul(HEAP32[$3 + 28 >> 2], 12) | 0) + 8 >> 2]) {
         HEAP32[$3 + 24 >> 2] = jsvObjectIteratorGetValue($3 + 44 | 0);
         block2 : {
          block4 : {
           switch (HEAPU16[(HEAP32[$3 + 52 >> 2] + Math_imul(HEAP32[$3 + 28 >> 2], 12) | 0) + 4 >> 1] - 3 | 0) {
           case 0:
           case 2:
           case 4:
           case 25:
            $0 = jsvLockAgain(HEAP32[$3 + 24 >> 2]);
            HEAP32[HEAP32[(HEAP32[$3 + 52 >> 2] + Math_imul(HEAP32[$3 + 28 >> 2], 12) | 0) + 8 >> 2] >> 2] = $0;
            break block2;
           case 10:
            $0 = jshGetPinFromVar(HEAP32[$3 + 24 >> 2]);
            HEAP8[HEAP32[(HEAP32[$3 + 52 >> 2] + Math_imul(HEAP32[$3 + 28 >> 2], 12) | 0) + 8 >> 2]] = $0;
            break block2;
           case 9:
            $0 = jsvGetBool(HEAP32[$3 + 24 >> 2]);
            HEAP8[HEAP32[(HEAP32[$3 + 52 >> 2] + Math_imul(HEAP32[$3 + 28 >> 2], 12) | 0) + 8 >> 2]] = $0 & 1;
            break block2;
           case 7:
            $0 = jsvGetInteger(HEAP32[$3 + 24 >> 2]);
            HEAP32[HEAP32[(HEAP32[$3 + 52 >> 2] + Math_imul(HEAP32[$3 + 28 >> 2], 12) | 0) + 8 >> 2] >> 2] = $0;
            break block2;
           case 8:
            break block4;
           default:
            break block2;
           };
          }
          $4 = jsvGetFloat(HEAP32[$3 + 24 >> 2]);
          HEAPF64[HEAP32[(HEAP32[$3 + 52 >> 2] + Math_imul(HEAP32[$3 + 28 >> 2], 12) | 0) + 8 >> 2] >> 3] = $4;
         }
         jsvUnLock(HEAP32[$3 + 24 >> 2]);
        }
       }
       HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 28 >> 2] + 1;
       continue;
      }
      break;
     };
     if (!(HEAP8[$3 + 35 | 0] & 1)) {
      HEAP32[$3 >> 2] = HEAP32[$3 + 36 >> 2];
      jsExceptionHere(1, 128448, $3);
      HEAP8[$3 + 43 | 0] = 0;
     }
     jsvUnLock(HEAP32[$3 + 36 >> 2]);
     jsvObjectIteratorNext($3 + 44 | 0);
     continue;
    }
    break;
   };
   jsvObjectIteratorFree($3 + 44 | 0);
   HEAP8[$3 + 63 | 0] = HEAP8[$3 + 43 | 0] & 1;
  }
  __stack_pointer = $3 - -64 | 0;
  return HEAP8[$3 + 63 | 0] & 1;
 }
 
 function jsvCreateConfigObject($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  HEAP32[$2 + 16 >> 2] = jsvNewObject();
  block : {
   if (!HEAP32[$2 + 16 >> 2]) {
    HEAP32[$2 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 12 >> 2] = 0;
   while (1) {
    if (HEAP32[$2 + 12 >> 2] < HEAP32[$2 + 20 >> 2]) {
     if (HEAP32[(HEAP32[$2 + 24 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], 12) | 0) + 8 >> 2]) {
      HEAP32[$2 + 8 >> 2] = 0;
      block2 : {
       block4 : {
        switch (HEAPU16[(HEAP32[$2 + 24 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], 12) | 0) + 4 >> 1] - 3 | 0) {
        case 0:
        case 2:
        case 4:
        case 25:
         HEAP32[$2 + 8 >> 2] = jsvLockAgain(HEAP32[HEAP32[(HEAP32[$2 + 24 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], 12) | 0) + 8 >> 2] >> 2]);
         break block2;
        case 10:
         HEAP32[$2 + 8 >> 2] = jsvNewFromPin(HEAPU8[HEAP32[(HEAP32[$2 + 24 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], 12) | 0) + 8 >> 2]]);
         break block2;
        case 9:
         HEAP32[$2 + 8 >> 2] = jsvNewFromBool(HEAP8[HEAP32[(HEAP32[$2 + 24 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], 12) | 0) + 8 >> 2]] & 1);
         break block2;
        case 7:
         HEAP32[$2 + 8 >> 2] = jsvNewFromInteger(HEAP32[HEAP32[(HEAP32[$2 + 24 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], 12) | 0) + 8 >> 2] >> 2]);
         break block2;
        case 8:
         break block4;
        default:
         break block2;
        };
       }
       HEAP32[$2 + 8 >> 2] = jsvNewFromFloat(HEAPF64[HEAP32[(HEAP32[$2 + 24 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], 12) | 0) + 8 >> 2] >> 3]);
      }
      jsvObjectSetChildAndUnLock(HEAP32[$2 + 16 >> 2], HEAP32[HEAP32[$2 + 24 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], 12) >> 2], HEAP32[$2 + 8 >> 2]);
     }
     HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
     continue;
    }
    break;
   };
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jsvIsInstanceOf($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  HEAP8[$2 + 19 | 0] = 0;
  block : {
   if (!(jsvHasChildren(HEAP32[$2 + 24 >> 2]) & 1)) {
    HEAP8[$2 + 31 | 0] = 0;
    break block;
   }
   HEAP32[$2 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 24 >> 2], 140424);
   if (jsvIsObject(HEAP32[$2 + 12 >> 2]) & 1) {
    HEAP32[$2 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 12 >> 2], 127861);
    if (HEAP32[$2 + 8 >> 2]) {
     HEAP8[$2 + 19 | 0] = jspIsConstructor(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 20 >> 2]) & 1
    }
    jsvUnLock(HEAP32[$2 + 8 >> 2]);
   }
   jsvUnLock(HEAP32[$2 + 12 >> 2]);
   HEAP8[$2 + 31 | 0] = HEAP8[$2 + 19 | 0] & 1;
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP8[$2 + 31 | 0] & 1;
 }
 
 function jsvNewTypedArray($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP8[$2 + 27 | 0] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  HEAP32[$2 + 16 >> 2] = jsvNewFromInteger(HEAP32[$2 + 20 >> 2]);
  block : {
   if (!HEAP32[$2 + 16 >> 2]) {
    HEAP32[$2 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 12 >> 2] = jswrap_typedarray_constructor(HEAPU8[$2 + 27 | 0], HEAP32[$2 + 16 >> 2], 0, 0);
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jsvNewArrayBufferWithPtr($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = 0;
  HEAP32[$2 + 16 >> 2] = jsvNewFlatStringOfLength(HEAP32[$2 + 24 >> 2]);
  block : {
   if (!HEAP32[$2 + 16 >> 2]) {
    HEAP32[$2 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 12 >> 2] = jsvNewArrayBufferFromString(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 24 >> 2]);
   if (!HEAP32[$2 + 12 >> 2]) {
    jsvUnLock(HEAP32[$2 + 16 >> 2]);
    HEAP32[$2 + 28 >> 2] = 0;
    break block;
   }
   $0 = jsvGetFlatStringPointer(HEAP32[$2 + 16 >> 2]);
   HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = $0;
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jsvNewArrayBufferWithData($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  HEAP32[$2 + 16 >> 2] = 0;
  HEAP32[$2 + 12 >> 2] = jsvNewArrayBufferWithPtr(HEAP32[$2 + 24 >> 2], $2 + 16 | 0);
  block : {
   if (!HEAP32[$2 + 16 >> 2]) {
    jsvUnLock(HEAP32[$2 + 12 >> 2]);
    HEAP32[$2 + 28 >> 2] = 0;
    break block;
   }
   $1 = HEAP32[$2 + 16 >> 2];
   $3 = HEAP32[$2 + 20 >> 2];
   $0 = HEAP32[$2 + 24 >> 2];
   if ($0) {
    wasm2js_memory_copy($1, $3, $0)
   }
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jsvMalloc($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = jsvNewFlatStringOfLength(HEAP32[$1 + 12 >> 2]);
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[368518] = HEAPU8[368518] | 8;
   while (1) {
    if (jsiFreeMoreMemory() & 1) {
     continue
    }
    break;
   };
   jsvGarbageCollect();
   HEAP32[$1 + 8 >> 2] = jsvNewFlatStringOfLength(HEAP32[$1 + 12 >> 2]);
  }
  HEAP32[$1 + 4 >> 2] = jsvGetFlatStringPointer(HEAP32[$1 + 8 >> 2]);
  if (HEAP32[$1 + 4 >> 2]) {
   $2 = HEAP32[$1 + 4 >> 2];
   $0 = HEAP32[$1 + 12 >> 2];
   if ($0) {
    wasm2js_memory_fill($2, 0, $0)
   }
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 4 >> 2];
 }
 
 function jsvFree($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = jsvGetFlatStringFromPointer(HEAP32[$1 + 12 >> 2]);
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvIterateCallback($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 240 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 232 >> 2] = $0;
  HEAP32[$3 + 228 >> 2] = $1;
  HEAP32[$3 + 224 >> 2] = $2;
  HEAP8[$3 + 223 | 0] = 1;
  block1 : {
   block : {
    if (jsvIsNumeric(HEAP32[$3 + 232 >> 2]) & 1) {
     $0 = HEAP32[$3 + 228 >> 2];
     FUNCTION_TABLE[$0 | 0](jsvGetInteger(HEAP32[$3 + 232 >> 2]), HEAP32[$3 + 224 >> 2]);
     break block;
    }
    block4 : {
     if (jsvIsObject(HEAP32[$3 + 232 >> 2]) & 1) {
      HEAP32[$3 + 216 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 232 >> 2], 135907);
      if (jsvIsFunction(HEAP32[$3 + 216 >> 2]) & 1) {
       HEAP32[$3 + 212 >> 2] = jspExecuteFunction(HEAP32[$3 + 216 >> 2], 0, 0, 0);
       jsvUnLock(HEAP32[$3 + 216 >> 2]);
       if (HEAP32[$3 + 212 >> 2]) {
        HEAP8[$3 + 211 | 0] = jsvIterateCallback(HEAP32[$3 + 212 >> 2], HEAP32[$3 + 228 >> 2], HEAP32[$3 + 224 >> 2]) & 1;
        jsvUnLock(HEAP32[$3 + 212 >> 2]);
        HEAP8[$3 + 239 | 0] = HEAP8[$3 + 211 | 0] & 1;
        break block1;
       }
       HEAP8[$3 + 239 | 0] = 1;
       break block1;
      }
      jsvUnLock(HEAP32[$3 + 216 >> 2]);
      HEAP32[$3 + 204 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 232 >> 2], 124586);
      HEAP32[$3 + 200 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 232 >> 2], 140390);
      block3 : {
       block2 : {
        if (!HEAP32[$3 + 204 >> 2] | !HEAP32[$3 + 200 >> 2]) {
         break block2
        }
        if (!(jsvIsNumeric(HEAP32[$3 + 204 >> 2]) & 1)) {
         break block2
        }
        HEAP32[$3 + 196 >> 2] = jsvGetInteger(HEAP32[$3 + 204 >> 2]);
        while (1) {
         $0 = 0;
         if (HEAP8[$3 + 223 | 0] & 1) {
          $0 = HEAP32[$3 + 196 >> 2];
          HEAP32[$3 + 196 >> 2] = $0 - 1;
          $0 = ($0 | 0) > 0;
         }
         if ($0) {
          HEAP8[$3 + 223 | 0] = jsvIterateCallback(HEAP32[$3 + 200 >> 2], HEAP32[$3 + 228 >> 2], HEAP32[$3 + 224 >> 2]) & 1;
          continue;
         }
         break;
        };
        break block3;
       }
       HEAP32[$3 >> 2] = HEAP32[$3 + 232 >> 2];
       jsExceptionHere(3, 135928, $3);
       HEAP8[$3 + 223 | 0] = 0;
      }
      jsvUnLock2(HEAP32[$3 + 204 >> 2], HEAP32[$3 + 200 >> 2]);
      break block4;
     }
     block5 : {
      if (jsvIsString(HEAP32[$3 + 232 >> 2]) & 1) {
       jsvStringIteratorNew($3 + 160 | 0, HEAP32[$3 + 232 >> 2], 0);
       while (1) {
        $0 = 0;
        if (jsvStringIteratorHasChar_345($3 + 160 | 0) & 1) {
         $0 = HEAPU8[$3 + 223 | 0]
        }
        if ($0 & 1) {
         HEAP8[$3 + 159 | 0] = jsvStringIteratorGetCharAndNext($3 + 160 | 0);
         FUNCTION_TABLE[HEAP32[$3 + 228 >> 2]](HEAP8[$3 + 159 | 0] << 24 >> 24, HEAP32[$3 + 224 >> 2]);
         continue;
        }
        break;
       };
       jsvStringIteratorFree_347($3 + 160 | 0);
       break block5;
      }
      block8 : {
       if (jsvIsArrayBuffer(HEAP32[$3 + 232 >> 2]) & 1) {
        jsvArrayBufferIteratorNew($3 + 100 | 0, HEAP32[$3 + 232 >> 2], 0);
        block7 : {
         if (!(HEAPU8[$3 + 136 | 0] & 16 | (HEAPU8[$3 + 136 | 0] & 15) != 1)) {
          HEAP32[$3 + 96 >> 2] = $3 + 100;
          HEAP32[$3 + 92 >> 2] = jsvGetArrayBufferLength(HEAP32[$3 + 232 >> 2]);
          while (1) {
           $0 = HEAP32[$3 + 92 >> 2];
           HEAP32[$3 + 92 >> 2] = $0 - 1;
           if ($0) {
            $0 = HEAP32[$3 + 228 >> 2];
            FUNCTION_TABLE[$0 | 0](jsvStringIteratorGetChar_349(HEAP32[$3 + 96 >> 2]) & 255, HEAP32[$3 + 224 >> 2]);
            jsvStringIteratorNextInline(HEAP32[$3 + 96 >> 2]);
            continue;
           }
           break;
          };
          break block7;
         }
         while (1) {
          if (jsvArrayBufferIteratorHasElement($3 + 100 | 0) & 1) {
           $0 = HEAP32[$3 + 228 >> 2];
           FUNCTION_TABLE[$0 | 0](jsvArrayBufferIteratorGetIntegerValue($3 + 100 | 0), HEAP32[$3 + 224 >> 2]);
           jsvArrayBufferIteratorNext($3 + 100 | 0);
           continue;
          }
          break;
         };
        }
        jsvArrayBufferIteratorFree($3 + 100 | 0);
        break block8;
       }
       block9 : {
        if (jsvIsIterable(HEAP32[$3 + 232 >> 2]) & 1) {
         jsvIteratorNew($3 + 32 | 0, HEAP32[$3 + 232 >> 2], 1);
         while (1) {
          $0 = 0;
          if (jsvIteratorHasElement($3 + 32 | 0) & 1) {
           $0 = HEAPU8[$3 + 223 | 0]
          }
          if ($0 & 1) {
           HEAP32[$3 + 28 >> 2] = jsvIteratorGetValue($3 + 32 | 0);
           HEAP8[$3 + 223 | 0] = jsvIterateCallback(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 228 >> 2], HEAP32[$3 + 224 >> 2]) & 1;
           jsvUnLock(HEAP32[$3 + 28 >> 2]);
           jsvIteratorNext($3 + 32 | 0);
           continue;
          }
          break;
         };
         jsvIteratorFree($3 + 32 | 0);
         break block9;
        }
        HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 232 >> 2];
        jsExceptionHere(3, 126128, $3 + 16 | 0);
        HEAP8[$3 + 223 | 0] = 0;
       }
      }
     }
    }
   }
   HEAP8[$3 + 239 | 0] = HEAP8[$3 + 223 | 0] & 1;
  }
  __stack_pointer = $3 + 240 | 0;
  return HEAP8[$3 + 239 | 0] & 1;
 }
 
 function jsvStringIteratorNew($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = jsvLockAgain(HEAP32[$3 + 8 >> 2]);
  HEAP32[HEAP32[$3 + 12 >> 2] + 12 >> 2] = $0;
  HEAP32[HEAP32[$3 + 12 >> 2] + 8 >> 2] = 0;
  $0 = jsvGetCharactersInVar(HEAP32[HEAP32[$3 + 12 >> 2] + 12 >> 2]);
  HEAP32[HEAP32[$3 + 12 >> 2] + 4 >> 2] = $0;
  block : {
   if (jsvIsFlashString(HEAP32[HEAP32[$3 + 12 >> 2] + 12 >> 2]) & 1) {
    HEAP32[HEAP32[$3 + 12 >> 2] + 4 >> 2] = 0;
    HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = HEAP32[$3 + 4 >> 2];
    jsvStringIteratorLoadFlashString_360(HEAP32[$3 + 12 >> 2]);
    break block;
   }
   jsvStringIteratorUpdatePtr(HEAP32[$3 + 12 >> 2]);
   HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = HEAP32[$3 + 4 >> 2];
   jsvStringIteratorCatchUp(HEAP32[$3 + 12 >> 2]);
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jsvStringIteratorHasChar_345($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
 }
 
 function jsvStringIteratorGetCharAndNext($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP8[$1 + 11 | 0] = jsvStringIteratorGetChar_349(HEAP32[$1 + 12 >> 2]);
  jsvStringIteratorNextInline(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return HEAP8[$1 + 11 | 0] << 24 >> 24;
 }
 
 function jsvStringIteratorFree_347($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvArrayBufferIteratorNew($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  HEAP32[HEAP32[$3 + 12 >> 2] + 48 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP8[HEAP32[$3 + 12 >> 2] + 36 | 0] = HEAPU8[HEAP32[$3 + 8 >> 2] + 5 | 0];
  $0 = HEAP32[$3 + 8 >> 2];
  HEAP32[HEAP32[$3 + 12 >> 2] + 40 >> 2] = Math_imul(HEAPU8[HEAP32[$3 + 12 >> 2] + 36 | 0] & 15, HEAPU8[$0 + 4 | 0] << 16 | (HEAPU8[$0 + 2 | 0] | HEAPU8[$0 + 3 | 0] << 8));
  $0 = HEAP32[$3 + 8 >> 2];
  HEAP32[HEAP32[$3 + 12 >> 2] + 44 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
  HEAP32[$3 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$3 + 8 >> 2], 0);
  $0 = HEAP32[$3 + 12 >> 2];
  HEAP32[$0 + 40 >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + 44 >> 2] + HEAP32[$0 + 40 >> 2];
  HEAP32[HEAP32[$3 + 12 >> 2] + 44 >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + 44 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], HEAPU8[HEAP32[$3 + 12 >> 2] + 36 | 0] & 15);
  block : {
   if (HEAPU32[HEAP32[$3 + 12 >> 2] + 44 >> 2] >= (HEAP32[HEAP32[$3 + 12 >> 2] + 40 >> 2] + 1 | 0) - (HEAPU8[HEAP32[$3 + 12 >> 2] + 36 | 0] & 15) >>> 0) {
    jsvUnLock(HEAP32[$3 >> 2]);
    HEAP8[HEAP32[$3 + 12 >> 2] + 36 | 0] = 0;
    break block;
   }
   jsvStringIteratorNew(HEAP32[$3 + 12 >> 2], HEAP32[$3 >> 2], HEAP32[HEAP32[$3 + 12 >> 2] + 44 >> 2]);
   jsvUnLock(HEAP32[$3 >> 2]);
   HEAP8[HEAP32[$3 + 12 >> 2] + 52 | 0] = 0;
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jsvStringIteratorGetChar_349($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   HEAP8[$1 + 15 | 0] = HEAPU8[HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] + HEAP32[HEAP32[$1 + 8 >> 2] >> 2] | 0];
  }
  return HEAP8[$1 + 15 | 0] << 24 >> 24;
 }
 
 function jsvStringIteratorNextInline($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
  if (HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] >= HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2]) {
   jsvStringIteratorLoadInline(HEAP32[$1 + 12 >> 2])
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvArrayBufferIteratorHasElement($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAPU8[HEAP32[$1 + 8 >> 2] + 36 | 0]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   if (HEAP8[HEAP32[$1 + 8 >> 2] + 52 | 0] & 1) {
    HEAP8[$1 + 15 | 0] = 1;
    break block;
   }
   HEAP8[$1 + 15 | 0] = HEAPU32[HEAP32[$1 + 8 >> 2] + 40 >> 2] >= HEAP32[HEAP32[$1 + 8 >> 2] + 44 >> 2] + (HEAPU8[HEAP32[$1 + 8 >> 2] + 36 | 0] & 15) >>> 0;
  }
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvArrayBufferIteratorGetIntegerValue($0) {
  var $1 = 0, $2 = 0.0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAPU8[HEAP32[$1 + 8 >> 2] + 36 | 0]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   jsvArrayBufferIteratorGetValueData(HEAP32[$1 + 8 >> 2], $1);
   if (HEAPU8[HEAP32[$1 + 8 >> 2] + 36 | 0] & 32) {
    $2 = jsvArrayBufferIteratorDataToFloat(HEAP32[$1 + 8 >> 2], $1);
    if (Math_abs($2) < 2147483647.0) {
     $0 = ~~$2
    } else {
     $0 = -2147483648
    }
    HEAP32[$1 + 12 >> 2] = $0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvArrayBufferIteratorDataToInt(HEAP32[$1 + 8 >> 2], $1);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvArrayBufferIteratorNext($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 48 >> 2] + 1;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + (HEAPU8[HEAP32[$1 + 12 >> 2] + 36 | 0] & 15);
  block : {
   if (!(HEAP8[HEAP32[$1 + 12 >> 2] + 52 | 0] & 1)) {
    HEAP32[$1 + 8 >> 2] = HEAPU8[HEAP32[$1 + 12 >> 2] + 36 | 0] & 15;
    while (1) {
     $0 = HEAP32[$1 + 8 >> 2];
     HEAP32[$1 + 8 >> 2] = $0 - 1;
     if ($0) {
      jsvStringIteratorNext(HEAP32[$1 + 12 >> 2]);
      continue;
     }
     break;
    };
    break block;
   }
   HEAP8[HEAP32[$1 + 12 >> 2] + 52 | 0] = 0;
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvArrayBufferIteratorFree($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  if (HEAPU8[HEAP32[$1 + 12 >> 2] + 36 | 0]) {
   jsvStringIteratorFree_347(HEAP32[$1 + 12 >> 2])
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvIteratorNew($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  block3 : {
   block1 : {
    block : {
     if (jsvIsArray(HEAP32[$3 + 8 >> 2]) & 1) {
      break block
     }
     if (jsvIsObject(HEAP32[$3 + 8 >> 2]) & 1) {
      break block
     }
     if (jsvIsFunction(HEAP32[$3 + 8 >> 2]) & 1) {
      break block
     }
     if (!(jsvIsGetterOrSetter(HEAP32[$3 + 8 >> 2]) & 1)) {
      break block1
     }
    }
    HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = 2;
    if (!(!(jsvIsArray(HEAP32[$3 + 8 >> 2]) & 1) | !(HEAP32[$3 + 4 >> 2] & 1))) {
     HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = 4;
     HEAP32[HEAP32[$3 + 12 >> 2] + 12 >> 2] = 0;
     $0 = jsvLockAgain(HEAP32[$3 + 8 >> 2]);
     HEAP32[HEAP32[$3 + 12 >> 2] + 8 >> 2] = $0;
    }
    jsvObjectIteratorNew(HEAP32[$3 + 12 >> 2] + 4 | 0, HEAP32[$3 + 8 >> 2]);
    break block3;
   }
   block4 : {
    if (jsvIsArrayBuffer(HEAP32[$3 + 8 >> 2]) & 1) {
     HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = 3;
     jsvArrayBufferIteratorNew(HEAP32[$3 + 12 >> 2] + 4 | 0, HEAP32[$3 + 8 >> 2], 0);
     break block4;
    }
    block5 : {
     if (jsvHasCharacterData(HEAP32[$3 + 8 >> 2]) & 1) {
      HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = 1;
      jsvStringIteratorNew(HEAP32[$3 + 12 >> 2] + 4 | 0, HEAP32[$3 + 8 >> 2], 0);
      break block5;
     }
     HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = 0;
    }
   }
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jsvIteratorHasElement($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block5 : {
   block4 : {
    switch (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] - 1 | 0) {
    case 3:
     HEAP8[$1 + 15 | 0] = HEAP32[HEAP32[$1 + 8 >> 2] + 12 >> 2] < (jsvGetArrayLength(HEAP32[HEAP32[$1 + 8 >> 2] + 8 >> 2]) | 0);
     break block5;
    case 1:
     HEAP8[$1 + 15 | 0] = jsvObjectIteratorHasValue_369(HEAP32[$1 + 8 >> 2] + 4 | 0) & 1;
     break block5;
    case 0:
     HEAP8[$1 + 15 | 0] = jsvStringIteratorHasChar_345(HEAP32[$1 + 8 >> 2] + 4 | 0) & 1;
     break block5;
    case 2:
     HEAP8[$1 + 15 | 0] = jsvArrayBufferIteratorHasElement(HEAP32[$1 + 8 >> 2] + 4 | 0) & 1;
     break block5;
    default:
     break block4;
    };
   }
   HEAP8[$1 + 15 | 0] = 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsvIteratorGetValue($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block6 : {
   block4 : {
    switch (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] - 1 | 0) {
    case 3:
     block5 : {
      if (!(jsvIsIntegerish(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) & 1)) {
       break block5
      }
      if ((jsvGetInteger(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) | 0) != HEAP32[HEAP32[$1 + 8 >> 2] + 12 >> 2]) {
       break block5
      }
      HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetValue_370(HEAP32[$1 + 8 >> 2] + 4 | 0);
      break block6;
     }
     HEAP32[$1 + 12 >> 2] = 0;
     break block6;
    case 1:
     HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetValue_370(HEAP32[$1 + 8 >> 2] + 4 | 0);
     break block6;
    case 0:
     HEAP8[$1 + 7 | 0] = jsvStringIteratorGetChar_349(HEAP32[$1 + 8 >> 2] + 4 | 0);
     HEAP32[$1 + 12 >> 2] = jsvNewStringOfLength(1, $1 + 7 | 0);
     break block6;
    case 2:
     HEAP32[$1 + 12 >> 2] = jsvArrayBufferIteratorGetValueAndRewind(HEAP32[$1 + 8 >> 2] + 4 | 0);
     break block6;
    default:
     break block4;
    };
   }
   HEAP32[$1 + 12 >> 2] = 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvIteratorNext($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  block4 : {
   block2 : {
    switch (HEAP32[HEAP32[$1 + 12 >> 2] >> 2] - 1 | 0) {
    case 3:
     $0 = HEAP32[$1 + 12 >> 2];
     HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
     block5 : {
      if (!(jsvIsIntegerish(HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]) & 1)) {
       break block5
      }
      if ((jsvGetInteger(HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]) | 0) >= HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) {
       break block5
      }
      jsvObjectIteratorNext(HEAP32[$1 + 12 >> 2] + 4 | 0);
     }
     break block4;
    case 1:
     jsvObjectIteratorNext(HEAP32[$1 + 12 >> 2] + 4 | 0);
     break block4;
    case 0:
     jsvStringIteratorNext(HEAP32[$1 + 12 >> 2] + 4 | 0);
     break block4;
    case 2:
     break block2;
    default:
     break block4;
    };
   }
   jsvArrayBufferIteratorNext(HEAP32[$1 + 12 >> 2] + 4 | 0);
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvIteratorFree($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  block4 : {
   block2 : {
    switch (HEAP32[HEAP32[$1 + 12 >> 2] >> 2] - 1 | 0) {
    case 3:
     jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2]);
     jsvObjectIteratorFree_373(HEAP32[$1 + 12 >> 2] + 4 | 0);
     break block4;
    case 1:
     jsvObjectIteratorFree_373(HEAP32[$1 + 12 >> 2] + 4 | 0);
     break block4;
    case 0:
     jsvStringIteratorFree_347(HEAP32[$1 + 12 >> 2] + 4 | 0);
     break block4;
    case 2:
     break block2;
    default:
     break block4;
    };
   }
   jsvArrayBufferIteratorFree(HEAP32[$1 + 12 >> 2] + 4 | 0);
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvStringIteratorLoadFlashString_360($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2] + HEAP32[$0 + 8 >> 2];
  HEAP32[HEAP32[$1 + 12 >> 2] >> 2] = 0;
  $0 = HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
  block : {
   if (HEAPU32[HEAP32[$1 + 12 >> 2] + 8 >> 2] >= HEAPU32[$1 + 8 >> 2]) {
    HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = 0;
    HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = 0;
    break block;
   }
   HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = HEAP32[$1 + 8 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
   if (HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2] > 16) {
    HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = 16
   }
   $0 = HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2];
   jshFlashRead(HEAP32[$1 + 12 >> 2] + 20 | 0, HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) | 0, HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]);
   HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = HEAP32[$1 + 12 >> 2] + 20;
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvStringIteratorUpdatePtr($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  block : {
   if (jsvIsFlatString(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) & 1) {
    $0 = jsvGetFlatStringPointer(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
    HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = $0;
    break block;
   }
   block1 : {
    if (jsvIsNativeString(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) & 1) {
     $0 = HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2];
     HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
     break block1;
    }
    if (!(jsvIsFlashString(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) & 1)) {
     block2 : {
      if (HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) {
       HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2];
       break block2;
      }
      HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = 0;
     }
    }
   }
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvStringIteratorCatchUp($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  while (1) {
   $0 = 0;
   $0 = HEAP32[HEAP32[$1 + 12 >> 2] >> 2] ? HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] >= HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2] : $0;
   if ($0) {
    jsvStringIteratorLoadInline(HEAP32[$1 + 12 >> 2]);
    continue;
   }
   break;
  };
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvStringIteratorLoadInline($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] + HEAP32[$0 + 8 >> 2];
  block : {
   if (jsvIsFlashString(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) & 1) {
    jsvStringIteratorLoadFlashString_360(HEAP32[$1 + 12 >> 2]);
    break block;
   }
   block1 : {
    if (!HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) {
     break block1
    }
    if (!(jsvGetLastChild(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) & 65535)) {
     break block1
    }
    HEAP32[$1 + 8 >> 2] = jsvLock(jsvGetLastChild(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) & 65535);
    jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
    HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = HEAP32[$1 + 8 >> 2];
    $0 = jsvGetCharactersInVar(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
    HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = $0;
    break block;
   }
   jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
   HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2] = 0;
   HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = 0;
   HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = 0;
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2] + HEAP32[$0 + 8 >> 2];
   HEAP32[HEAP32[$1 + 12 >> 2] >> 2] = 0;
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvArrayBufferIteratorGetValueData($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  block : {
   if (!HEAPU8[HEAP32[$2 + 12 >> 2] + 36 | 0]) {
    break block
   }
   HEAP32[$2 >> 2] = HEAPU8[HEAP32[$2 + 12 >> 2] + 36 | 0] & 15;
   HEAP32[$2 + 4 >> 2] = 0;
   while (1) {
    if (HEAP32[$2 + 4 >> 2] < HEAP32[$2 >> 2]) {
     $0 = jsvStringIteratorGetChar_349(HEAP32[$2 + 12 >> 2]);
     HEAP8[HEAP32[$2 + 8 >> 2] + HEAP32[$2 + 4 >> 2] | 0] = $0;
     if (HEAP32[$2 >> 2] != 1) {
      jsvStringIteratorNext(HEAP32[$2 + 12 >> 2])
     }
     HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
     continue;
    }
    break;
   };
   if (HEAP32[$2 >> 2] == 1) {
    break block
   }
   HEAP8[HEAP32[$2 + 12 >> 2] + 52 | 0] = 1;
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsvArrayBufferIteratorDataToFloat($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  HEAP32[$2 + 20 >> 2] = HEAPU8[HEAP32[$2 + 28 >> 2] + 36 | 0] & 15;
  HEAPF64[$2 + 8 >> 3] = 0;
  block : {
   if (HEAP32[$2 + 20 >> 2] == 4) {
    HEAPF64[$2 + 8 >> 3] = HEAPF32[HEAP32[$2 + 24 >> 2] >> 2];
    break block;
   }
   if (HEAP32[$2 + 20 >> 2] == 8) {
    HEAPF64[$2 + 8 >> 3] = HEAPF64[HEAP32[$2 + 24 >> 2] >> 3]
   }
  }
  return HEAPF64[$2 + 8 >> 3];
 }
 
 function jsvArrayBufferIteratorDataToInt($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  HEAP32[$2 + 20 >> 2] = HEAPU8[HEAP32[$2 + 28 >> 2] + 36 | 0] & 15;
  HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 20 >> 2] << 3;
  $0 = HEAP32[$2 + 16 >> 2];
  HEAP32[$2 + 12 >> 2] = (($0 & 63) >>> 0 < 32 ? 1 << $0 : 0) - 1;
  HEAP32[$2 + 8 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] & HEAP32[$2 + 12 >> 2];
  if (!(!(HEAPU8[HEAP32[$2 + 28 >> 2] + 36 | 0] & 16) | !(HEAP32[$2 + 8 >> 2] & 1 << HEAP32[$2 + 16 >> 2] - 1))) {
   HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | HEAP32[$2 + 12 >> 2] ^ -1
  }
  return HEAP32[$2 + 8 >> 2];
 }
 
 function jsvStringIteratorNext($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvStringIteratorNextInline(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvObjectIteratorNew($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  block : {
   if (jsvHasChildren(HEAP32[$2 + 8 >> 2]) & 1) {
    $0 = jsvLockSafe(jsvGetFirstChild(HEAP32[$2 + 8 >> 2]) & 65535);
    break block;
   }
   $0 = 0;
  }
  HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = $0;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsvObjectIteratorHasValue_369($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
 }
 
 function jsvObjectIteratorGetValue_370($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvArrayBufferIteratorGetValueAndRewind($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $1 = __stack_pointer - 48 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 44 >> 2] = $0;
  jsvStringIteratorClone($1 + 8 | 0, HEAP32[$1 + 44 >> 2]);
  HEAP32[$1 + 4 >> 2] = jsvArrayBufferIteratorGetValue(HEAP32[$1 + 44 >> 2], 0);
  jsvStringIteratorFree_347(HEAP32[$1 + 44 >> 2]);
  $2 = HEAP32[$1 + 12 >> 2];
  $0 = HEAP32[$1 + 8 >> 2];
  $3 = $0;
  $4 = HEAP32[$1 + 44 >> 2];
  $0 = $4;
  HEAP32[$0 >> 2] = $3;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 + 32 >> 2] = HEAP32[$1 + 40 >> 2];
  $0 = HEAP32[$1 + 36 >> 2];
  $2 = HEAP32[$1 + 32 >> 2];
  $3 = $2;
  $2 = $4;
  HEAP32[$2 + 24 >> 2] = $3;
  HEAP32[$2 + 28 >> 2] = $0;
  $2 = HEAP32[$1 + 28 >> 2];
  $0 = HEAP32[$1 + 24 >> 2];
  $3 = $0;
  $0 = $4;
  HEAP32[$0 + 16 >> 2] = $3;
  HEAP32[$0 + 20 >> 2] = $2;
  $0 = HEAP32[$1 + 20 >> 2];
  $2 = HEAP32[$1 + 16 >> 2];
  $3 = $2;
  $2 = $4;
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP8[HEAP32[$1 + 44 >> 2] + 52 | 0] = 0;
  __stack_pointer = $1 + 48 | 0;
  return HEAP32[$1 + 4 >> 2];
 }
 
 function jsvObjectIteratorNext($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  if (HEAP32[HEAP32[$1 + 12 >> 2] >> 2]) {
   HEAP16[$1 + 10 >> 1] = jsvGetNextSibling(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
   jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
   $0 = jsvLockSafe(HEAPU16[$1 + 10 >> 1]);
   HEAP32[HEAP32[$1 + 12 >> 2] >> 2] = $0;
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvObjectIteratorFree_373($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvIterateBufferCallback($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 256 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 248 >> 2] = $0;
  HEAP32[$3 + 244 >> 2] = $1;
  HEAP32[$3 + 240 >> 2] = $2;
  HEAP8[$3 + 239 | 0] = 1;
  block1 : {
   block : {
    if (jsvIsNumeric(HEAP32[$3 + 248 >> 2]) & 1) {
     HEAP8[$3 + 238 | 0] = jsvGetInteger(HEAP32[$3 + 248 >> 2]);
     FUNCTION_TABLE[HEAP32[$3 + 244 >> 2]]($3 + 238 | 0, 1, HEAP32[$3 + 240 >> 2]);
     break block;
    }
    block4 : {
     if (jsvIsObject(HEAP32[$3 + 248 >> 2]) & 1) {
      HEAP32[$3 + 232 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 248 >> 2], 135907);
      if (jsvIsFunction(HEAP32[$3 + 232 >> 2]) & 1) {
       HEAP32[$3 + 228 >> 2] = jspExecuteFunction(HEAP32[$3 + 232 >> 2], 0, 0, 0);
       jsvUnLock(HEAP32[$3 + 232 >> 2]);
       if (HEAP32[$3 + 228 >> 2]) {
        HEAP8[$3 + 227 | 0] = jsvIterateBufferCallback(HEAP32[$3 + 228 >> 2], HEAP32[$3 + 244 >> 2], HEAP32[$3 + 240 >> 2]) & 1;
        jsvUnLock(HEAP32[$3 + 228 >> 2]);
        HEAP8[$3 + 255 | 0] = HEAP8[$3 + 227 | 0] & 1;
        break block1;
       }
       HEAP8[$3 + 255 | 0] = 1;
       break block1;
      }
      jsvUnLock(HEAP32[$3 + 232 >> 2]);
      HEAP32[$3 + 220 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 248 >> 2], 124586);
      HEAP32[$3 + 216 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 248 >> 2], 140390);
      block3 : {
       block2 : {
        if (!HEAP32[$3 + 220 >> 2] | !HEAP32[$3 + 216 >> 2]) {
         break block2
        }
        if (!(jsvIsNumeric(HEAP32[$3 + 220 >> 2]) & 1)) {
         break block2
        }
        HEAP32[$3 + 212 >> 2] = jsvGetInteger(HEAP32[$3 + 220 >> 2]);
        while (1) {
         $0 = 0;
         if (HEAP8[$3 + 239 | 0] & 1) {
          $0 = HEAP32[$3 + 212 >> 2];
          HEAP32[$3 + 212 >> 2] = $0 - 1;
          $0 = ($0 | 0) > 0;
         }
         if ($0) {
          HEAP8[$3 + 239 | 0] = jsvIterateBufferCallback(HEAP32[$3 + 216 >> 2], HEAP32[$3 + 244 >> 2], HEAP32[$3 + 240 >> 2]) & 1;
          continue;
         }
         break;
        };
        break block3;
       }
       HEAP32[$3 >> 2] = HEAP32[$3 + 248 >> 2];
       jsExceptionHere(3, 135928, $3);
       HEAP8[$3 + 239 | 0] = 0;
      }
      jsvUnLock2(HEAP32[$3 + 220 >> 2], HEAP32[$3 + 216 >> 2]);
      break block4;
     }
     block5 : {
      if (jsvIsString(HEAP32[$3 + 248 >> 2]) & 1) {
       jsvStringIteratorNew($3 + 176 | 0, HEAP32[$3 + 248 >> 2], 0);
       while (1) {
        $0 = 0;
        if (jsvStringIteratorHasChar_345($3 + 176 | 0) & 1) {
         $0 = HEAPU8[$3 + 239 | 0]
        }
        if ($0 & 1) {
         jsvStringIteratorGetPtrAndNext($3 + 176 | 0, $3 + 172 | 0, $3 + 168 | 0);
         FUNCTION_TABLE[HEAP32[$3 + 244 >> 2]](HEAP32[$3 + 172 >> 2], HEAP32[$3 + 168 >> 2], HEAP32[$3 + 240 >> 2]);
         continue;
        }
        break;
       };
       jsvStringIteratorFree_347($3 + 176 | 0);
       break block5;
      }
      block8 : {
       if (jsvIsArrayBuffer(HEAP32[$3 + 248 >> 2]) & 1) {
        jsvArrayBufferIteratorNew($3 + 112 | 0, HEAP32[$3 + 248 >> 2], 0);
        block7 : {
         if (!(HEAPU8[$3 + 148 | 0] & 16 | (HEAPU8[$3 + 148 | 0] & 15) != 1)) {
          HEAP32[$3 + 108 >> 2] = $3 + 112;
          HEAP32[$3 + 104 >> 2] = jsvGetArrayBufferLength(HEAP32[$3 + 248 >> 2]);
          while (1) {
           if (HEAP32[$3 + 104 >> 2]) {
            jsvStringIteratorGetPtrAndNext(HEAP32[$3 + 108 >> 2], $3 + 100 | 0, $3 + 96 | 0);
            if (HEAPU32[$3 + 96 >> 2] > HEAPU32[$3 + 104 >> 2]) {
             HEAP32[$3 + 96 >> 2] = HEAP32[$3 + 104 >> 2]
            }
            FUNCTION_TABLE[HEAP32[$3 + 244 >> 2]](HEAP32[$3 + 100 >> 2], HEAP32[$3 + 96 >> 2], HEAP32[$3 + 240 >> 2]);
            HEAP32[$3 + 104 >> 2] = HEAP32[$3 + 104 >> 2] - HEAP32[$3 + 96 >> 2];
            continue;
           }
           break;
          };
          break block7;
         }
         while (1) {
          if (jsvArrayBufferIteratorHasElement($3 + 112 | 0) & 1) {
           HEAP8[$3 + 95 | 0] = jsvArrayBufferIteratorGetIntegerValue($3 + 112 | 0);
           FUNCTION_TABLE[HEAP32[$3 + 244 >> 2]]($3 + 95 | 0, 1, HEAP32[$3 + 240 >> 2]);
           jsvArrayBufferIteratorNext($3 + 112 | 0);
           continue;
          }
          break;
         };
        }
        jsvArrayBufferIteratorFree($3 + 112 | 0);
        break block8;
       }
       block9 : {
        if (jsvIsIterable(HEAP32[$3 + 248 >> 2]) & 1) {
         jsvIteratorNew($3 + 32 | 0, HEAP32[$3 + 248 >> 2], 1);
         while (1) {
          $0 = 0;
          if (jsvIteratorHasElement($3 + 32 | 0) & 1) {
           $0 = HEAPU8[$3 + 239 | 0]
          }
          if ($0 & 1) {
           HEAP32[$3 + 28 >> 2] = jsvIteratorGetValue($3 + 32 | 0);
           HEAP8[$3 + 239 | 0] = jsvIterateBufferCallback(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 244 >> 2], HEAP32[$3 + 240 >> 2]) & 1;
           jsvUnLock(HEAP32[$3 + 28 >> 2]);
           jsvIteratorNext($3 + 32 | 0);
           continue;
          }
          break;
         };
         jsvIteratorFree($3 + 32 | 0);
         break block9;
        }
        HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 248 >> 2];
        jsExceptionHere(3, 126128, $3 + 16 | 0);
        HEAP8[$3 + 239 | 0] = 0;
       }
      }
     }
    }
   }
   HEAP8[$3 + 255 | 0] = HEAP8[$3 + 239 | 0] & 1;
  }
  __stack_pointer = $3 + 256 | 0;
  return HEAP8[$3 + 255 | 0] & 1;
 }
 
 function jsvStringIteratorGetPtrAndNext($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + 16 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2];
  HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + 4 >> 2] - HEAP32[HEAP32[$3 + 12 >> 2] >> 2];
  HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + 4 >> 2] - 1;
  jsvStringIteratorNextInline(HEAP32[$3 + 12 >> 2]);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jsvIterateCallbackCount($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = 0;
  jsvIterateBufferCallback(HEAP32[$1 + 12 >> 2], 5, $1 + 8 | 0);
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 8 >> 2];
 }
 
 function jsvIterateCallbackCountCb($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  HEAP32[$3 >> 2] = HEAP32[$3 + 4 >> 2];
  $0 = HEAP32[$3 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$3 + 8 >> 2] + HEAP32[$0 >> 2];
 }
 
 function jsvIterateCallbackToBytes($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 24 >> 2];
  HEAP32[$3 + 12 >> 2] = 0;
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 20 >> 2];
  jsvIterateCallback(HEAP32[$3 + 28 >> 2], 6, $3 + 8 | 0);
  __stack_pointer = $3 + 32 | 0;
  return HEAP32[$3 + 12 >> 2];
 }
 
 function jsvIterateCallbackToBytesCb($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
  if (HEAPU32[HEAP32[$2 + 4 >> 2] + 4 >> 2] < HEAPU32[HEAP32[$2 + 4 >> 2] + 8 >> 2]) {
   HEAP8[HEAP32[HEAP32[$2 + 4 >> 2] >> 2] + HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2] | 0] = HEAP32[$2 + 12 >> 2]
  }
  $0 = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
 }
 
 function jsvStringIteratorNewUTF8($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  jsvStringIteratorNew(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jsvStringIteratorClone($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $3 = HEAP32[$2 + 8 >> 2];
  $0 = HEAP32[$3 >> 2];
  $1 = HEAP32[$3 + 4 >> 2];
  $4 = $0;
  $5 = HEAP32[$2 + 12 >> 2];
  $0 = $5;
  HEAP32[$0 >> 2] = $4;
  HEAP32[$0 + 4 >> 2] = $1;
  HEAP32[$0 + 32 >> 2] = HEAP32[$3 + 32 >> 2];
  $0 = HEAP32[$3 + 28 >> 2];
  $1 = HEAP32[$3 + 24 >> 2];
  $4 = $1;
  $1 = $5;
  HEAP32[$1 + 24 >> 2] = $4;
  HEAP32[$1 + 28 >> 2] = $0;
  $1 = HEAP32[$3 + 20 >> 2];
  $0 = HEAP32[$3 + 16 >> 2];
  $4 = $0;
  $0 = $5;
  HEAP32[$0 + 16 >> 2] = $4;
  HEAP32[$0 + 20 >> 2] = $1;
  $0 = HEAP32[$3 + 12 >> 2];
  $1 = HEAP32[$3 + 8 >> 2];
  $4 = $1;
  $1 = $5;
  HEAP32[$1 + 8 >> 2] = $4;
  HEAP32[$1 + 12 >> 2] = $0;
  if (HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]) {
   jsvLockAgain(HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]);
   if (HEAP32[HEAP32[$2 + 8 >> 2] + 16 >> 2] == (HEAP32[$2 + 8 >> 2] + 20 | 0)) {
    HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] = HEAP32[$2 + 12 >> 2] + 20
   }
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsvStringIteratorGetUTF8CharAndNext($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!(jsvStringIteratorHasChar_345(HEAP32[$1 + 8 >> 2]) & 1)) {
    jsvStringIteratorNext(HEAP32[$1 + 8 >> 2]);
    HEAP32[$1 + 12 >> 2] = -1;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvStringIteratorGetCharAndNext(HEAP32[$1 + 8 >> 2]) & 255;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvStringIteratorGetCharOrMinusOne($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block1 : {
   if (!(HEAPU32[HEAP32[$1 + 8 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 8 >> 2] + 4 >> 2] ? HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] : 0)) {
    HEAP32[$1 + 12 >> 2] = -1;
    break block1;
   }
   HEAP32[$1 + 12 >> 2] = HEAPU8[HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] + HEAP32[HEAP32[$1 + 8 >> 2] >> 2] | 0];
  }
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvStringIteratorSetChar($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP8[$2 + 11 | 0] = $1;
  if (jsvStringIteratorHasChar_345(HEAP32[$2 + 12 >> 2]) & 1) {
   HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0] = HEAPU8[$2 + 11 | 0]
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsvStringIteratorSetCharAndNext($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP8[$2 + 11 | 0] = $1;
  if (jsvStringIteratorHasChar_345(HEAP32[$2 + 12 >> 2]) & 1) {
   HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0] = HEAPU8[$2 + 11 | 0]
  }
  jsvStringIteratorNextInline(HEAP32[$2 + 12 >> 2]);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsvStringIteratorNextUTF8($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvStringIteratorNext(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvStringIteratorGotoEnd($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  while (1) {
   if (jsvGetLastChild(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) & 65535) {
    HEAP32[$1 + 8 >> 2] = jsvLock(jsvGetLastChild(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) & 65535);
    jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
    HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2] = HEAP32[$1 + 8 >> 2];
    $0 = HEAP32[$1 + 12 >> 2];
    HEAP32[$0 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] + HEAP32[$0 + 8 >> 2];
    $0 = jsvGetCharactersInVar(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
    HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = $0;
    continue;
   }
   break;
  };
  HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2];
  block : {
   if (HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]) {
    HEAP32[HEAP32[$1 + 12 >> 2] >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] - 1;
    break block;
   }
   HEAP32[HEAP32[$1 + 12 >> 2] >> 2] = 0;
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvStringIteratorGoto($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  block : {
   if (HEAPU32[$3 + 4 >> 2] >= HEAPU32[HEAP32[$3 + 12 >> 2] + 8 >> 2]) {
    HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = HEAP32[$3 + 4 >> 2] - HEAP32[HEAP32[$3 + 12 >> 2] + 8 >> 2];
    jsvStringIteratorCatchUp(HEAP32[$3 + 12 >> 2]);
    break block;
   }
   jsvStringIteratorFree_347(HEAP32[$3 + 12 >> 2]);
   jsvStringIteratorNew(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jsvStringIteratorGotoUTF8($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  jsvStringIteratorGoto(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jsvStringIteratorAppend($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP8[$2 + 11 | 0] = $1;
  block : {
   if (!HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]) {
    break block
   }
   if (HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2]) {
    $0 = HEAP32[$2 + 12 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
   }
   if (HEAPU32[HEAP32[$2 + 12 >> 2] >> 2] >= jsvGetMaxCharactersInVar(HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]) >>> 0) {
    if (!(jsvHasStringExt(HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]) & 1)) {
     break block
    }
    HEAP32[$2 + 4 >> 2] = jsvNewWithFlags(41);
    if (!HEAP32[$2 + 4 >> 2]) {
     jsvUnLock(HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]);
     HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] = 0;
     HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] = 0;
     HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = 0;
     break block;
    }
    jsvSetLastChild(HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2], jsvGetRef(HEAP32[$2 + 4 >> 2]) & 65535);
    jsvUnLock(HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]);
    HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] = HEAP32[$2 + 4 >> 2];
    HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] = HEAP32[$2 + 4 >> 2];
    $0 = HEAP32[$2 + 12 >> 2];
    HEAP32[$0 + 8 >> 2] = HEAP32[HEAP32[$2 + 12 >> 2] >> 2] + HEAP32[$0 + 8 >> 2];
    HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = 0;
   }
   HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0] = HEAPU8[$2 + 11 | 0];
   HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2] = HEAP32[HEAP32[$2 + 12 >> 2] >> 2] + 1;
   jsvSetCharactersInVar(HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2], HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2]);
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsvStringIteratorAppendString($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer + -64 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 60 >> 2] = $0;
  HEAP32[$4 + 56 >> 2] = $1;
  HEAP32[$4 + 52 >> 2] = $2;
  HEAP32[$4 + 48 >> 2] = $3;
  jsvStringIteratorNew($4 + 12 | 0, HEAP32[$4 + 56 >> 2], HEAP32[$4 + 52 >> 2]);
  while (1) {
   $0 = 0;
   if (jsvStringIteratorHasChar_345($4 + 12 | 0) & 1) {
    $0 = HEAP32[$4 + 48 >> 2] > 0
   }
   if ($0) {
    jsvStringIteratorAppend(HEAP32[$4 + 60 >> 2], jsvStringIteratorGetCharAndNext($4 + 12 | 0) << 24 >> 24);
    HEAP32[$4 + 48 >> 2] = HEAP32[$4 + 48 >> 2] - 1;
    continue;
   }
   break;
  };
  jsvStringIteratorFree_347($4 + 12 | 0);
  __stack_pointer = $4 - -64 | 0;
 }
 
 function jsvObjectIteratorClone($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
  jsvLockAgainSafe(HEAP32[HEAP32[$2 + 12 >> 2] >> 2]);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsvObjectIteratorSetValue($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  if (HEAP32[HEAP32[$2 + 12 >> 2] >> 2]) {
   jsvSetValueOfName(HEAP32[HEAP32[$2 + 12 >> 2] >> 2], HEAP32[$2 + 8 >> 2])
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsvObjectIteratorRemoveAndGotoNext($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  if (HEAP32[HEAP32[$2 + 12 >> 2] >> 2]) {
   HEAP16[$2 + 6 >> 1] = jsvGetNextSibling(HEAP32[HEAP32[$2 + 12 >> 2] >> 2]);
   jsvRemoveChildAndUnLock(HEAP32[$2 + 8 >> 2], HEAP32[HEAP32[$2 + 12 >> 2] >> 2]);
   $0 = jsvLockSafe(HEAPU16[$2 + 6 >> 1]);
   HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = $0;
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsvArrayBufferIteratorClone($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 12 >> 2] = $0;
  HEAP32[$5 + 8 >> 2] = $1;
  $3 = HEAP32[$5 + 8 >> 2];
  $0 = HEAP32[$3 >> 2];
  $2 = HEAP32[$3 + 4 >> 2];
  $4 = $0;
  $1 = HEAP32[$5 + 12 >> 2];
  $0 = $1;
  HEAP32[$0 >> 2] = $4;
  HEAP32[$0 + 4 >> 2] = $2;
  $0 = HEAP32[$3 + 52 >> 2];
  $2 = HEAP32[$3 + 48 >> 2];
  $4 = $2;
  $2 = $1;
  HEAP32[$2 + 48 >> 2] = $4;
  HEAP32[$2 + 52 >> 2] = $0;
  $2 = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$3 + 40 >> 2];
  $4 = $0;
  $0 = $1;
  HEAP32[$0 + 40 >> 2] = $4;
  HEAP32[$0 + 44 >> 2] = $2;
  $0 = HEAP32[$3 + 36 >> 2];
  $2 = HEAP32[$3 + 32 >> 2];
  $4 = $2;
  $2 = $1;
  HEAP32[$2 + 32 >> 2] = $4;
  HEAP32[$2 + 36 >> 2] = $0;
  $2 = HEAP32[$3 + 28 >> 2];
  $0 = HEAP32[$3 + 24 >> 2];
  $4 = $0;
  $0 = $1;
  HEAP32[$0 + 24 >> 2] = $4;
  HEAP32[$0 + 28 >> 2] = $2;
  $0 = HEAP32[$3 + 20 >> 2];
  $2 = HEAP32[$3 + 16 >> 2];
  $4 = $2;
  $2 = $1;
  HEAP32[$2 + 16 >> 2] = $4;
  HEAP32[$2 + 20 >> 2] = $0;
  $2 = HEAP32[$3 + 12 >> 2];
  $0 = HEAP32[$3 + 8 >> 2];
  $4 = $0;
  $0 = $1;
  HEAP32[$0 + 8 >> 2] = $4;
  HEAP32[$0 + 12 >> 2] = $2;
  jsvStringIteratorClone(HEAP32[$5 + 12 >> 2], HEAP32[$5 + 8 >> 2]);
  __stack_pointer = $5 + 16 | 0;
 }
 
 function jsvArrayBufferIteratorGetValue($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP8[$2 + 23 | 0] = $1;
  block : {
   if (!HEAPU8[HEAP32[$2 + 24 >> 2] + 36 | 0]) {
    HEAP32[$2 + 28 >> 2] = 0;
    break block;
   }
   jsvArrayBufferIteratorGetValueData(HEAP32[$2 + 24 >> 2], $2 + 12 | 0);
   if (HEAP8[$2 + 23 | 0] & 1) {
    reverseBytes($2 + 12 | 0, HEAPU8[HEAP32[$2 + 24 >> 2] + 36 | 0] & 15)
   }
   if (HEAPU8[HEAP32[$2 + 24 >> 2] + 36 | 0] & 32) {
    HEAP32[$2 + 28 >> 2] = jsvNewFromFloat(jsvArrayBufferIteratorDataToFloat(HEAP32[$2 + 24 >> 2], $2 + 12 | 0));
    break block;
   }
   HEAP32[$2 + 8 >> 2] = jsvArrayBufferIteratorDataToInt(HEAP32[$2 + 24 >> 2], $2 + 12 | 0);
   if (HEAPU8[HEAP32[$2 + 24 >> 2] + 36 | 0] == 4) {
    HEAP32[$2 + 28 >> 2] = jsvNewFromLongInteger(HEAP32[$2 + 8 >> 2], 0);
    break block;
   }
   HEAP32[$2 + 28 >> 2] = jsvNewFromInteger(HEAP32[$2 + 8 >> 2]);
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jsvArrayBufferIteratorGetFloatValue($0) {
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 20 >> 2] = $0;
  block : {
   if (!HEAPU8[HEAP32[$1 + 20 >> 2] + 36 | 0]) {
    HEAPF64[$1 + 24 >> 3] = 0;
    break block;
   }
   jsvArrayBufferIteratorGetValueData(HEAP32[$1 + 20 >> 2], $1 + 12 | 0);
   if (HEAPU8[HEAP32[$1 + 20 >> 2] + 36 | 0] & 32) {
    HEAPF64[$1 + 24 >> 3] = jsvArrayBufferIteratorDataToFloat(HEAP32[$1 + 20 >> 2], $1 + 12 | 0);
    break block;
   }
   HEAPF64[$1 + 24 >> 3] = jsvArrayBufferIteratorDataToInt(HEAP32[$1 + 20 >> 2], $1 + 12 | 0) | 0;
  }
  __stack_pointer = $1 + 32 | 0;
  return HEAPF64[$1 + 24 >> 3];
 }
 
 function jsvArrayBufferIteratorSetIntegerValue($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  block : {
   if (!HEAPU8[HEAP32[$2 + 28 >> 2] + 36 | 0]) {
    break block
   }
   HEAP32[$2 + 8 >> 2] = HEAPU8[HEAP32[$2 + 28 >> 2] + 36 | 0] & 15;
   block1 : {
    if (HEAPU8[HEAP32[$2 + 28 >> 2] + 36 | 0] & 32) {
     jsvArrayBufferIteratorFloatToData($2 + 16 | 0, HEAP32[$2 + 8 >> 2], HEAPU8[HEAP32[$2 + 28 >> 2] + 36 | 0], +HEAP32[$2 + 24 >> 2]);
     break block1;
    }
    jsvArrayBufferIteratorIntToData($2 + 16 | 0, HEAP32[$2 + 8 >> 2], HEAPU8[HEAP32[$2 + 28 >> 2] + 36 | 0], HEAP32[$2 + 24 >> 2]);
   }
   HEAP32[$2 + 12 >> 2] = 0;
   while (1) {
    if (HEAPU32[$2 + 12 >> 2] < HEAPU32[$2 + 8 >> 2]) {
     jsvStringIteratorSetChar(HEAP32[$2 + 28 >> 2], HEAP8[HEAP32[$2 + 12 >> 2] + ($2 + 16 | 0) | 0] << 24 >> 24);
     if (HEAP32[$2 + 8 >> 2] != 1) {
      jsvStringIteratorNext(HEAP32[$2 + 28 >> 2])
     }
     HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
     continue;
    }
    break;
   };
   if (HEAP32[$2 + 8 >> 2] == 1) {
    break block
   }
   HEAP8[HEAP32[$2 + 28 >> 2] + 52 | 0] = 1;
  }
  __stack_pointer = $2 + 32 | 0;
 }
 
 function jsvArrayBufferIteratorFloatToData($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAPF64[$4 + 8 >> 3] = $3;
  block : {
   if (HEAP32[$4 + 24 >> 2] == 4) {
    HEAPF32[HEAP32[$4 + 28 >> 2] >> 2] = HEAPF64[$4 + 8 >> 3];
    break block;
   }
   if (HEAP32[$4 + 24 >> 2] == 8) {
    HEAPF64[HEAP32[$4 + 28 >> 2] >> 3] = HEAPF64[$4 + 8 >> 3]
   }
  }
 }
 
 function jsvArrayBufferIteratorIntToData($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
  if (HEAP32[$4 + 4 >> 2] & 64) {
   if (HEAP32[$4 >> 2] < 0) {
    HEAP32[$4 >> 2] = 0
   }
   if (HEAP32[$4 >> 2] > 255) {
    HEAP32[$4 >> 2] = 255
   }
  }
  block : {
   if (HEAP32[$4 + 8 >> 2] == 8) {
    $0 = HEAP32[$4 >> 2];
    $2 = $0 >> 31;
    $1 = $0;
    $0 = HEAP32[$4 + 12 >> 2];
    HEAP32[$0 >> 2] = $1;
    HEAP32[$0 + 4 >> 2] = $2;
    break block;
   }
   HEAP32[HEAP32[$4 + 12 >> 2] >> 2] = HEAP32[$4 >> 2];
  }
 }
 
 function jsvArrayBufferIteratorSetValue($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP8[$3 + 23 | 0] = $2;
  block : {
   if (!HEAPU8[HEAP32[$3 + 28 >> 2] + 36 | 0]) {
    break block
   }
   HEAP32[$3 + 4 >> 2] = HEAPU8[HEAP32[$3 + 28 >> 2] + 36 | 0] & 15;
   block1 : {
    if (HEAPU8[HEAP32[$3 + 28 >> 2] + 36 | 0] & 32) {
     jsvArrayBufferIteratorFloatToData($3 + 12 | 0, HEAP32[$3 + 4 >> 2], HEAPU8[HEAP32[$3 + 28 >> 2] + 36 | 0], jsvGetFloat(HEAP32[$3 + 24 >> 2]));
     break block1;
    }
    jsvArrayBufferIteratorIntToData($3 + 12 | 0, HEAP32[$3 + 4 >> 2], HEAPU8[HEAP32[$3 + 28 >> 2] + 36 | 0], jsvGetInteger(HEAP32[$3 + 24 >> 2]));
   }
   if (HEAP8[$3 + 23 | 0] & 1) {
    reverseBytes($3 + 12 | 0, HEAP32[$3 + 4 >> 2])
   }
   HEAP32[$3 + 8 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 8 >> 2] < HEAP32[$3 + 4 >> 2]) {
     jsvStringIteratorSetChar(HEAP32[$3 + 28 >> 2], HEAP8[HEAP32[$3 + 8 >> 2] + ($3 + 12 | 0) | 0] << 24 >> 24);
     if (HEAP32[$3 + 4 >> 2] != 1) {
      jsvStringIteratorNext(HEAP32[$3 + 28 >> 2])
     }
     HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + 1;
     continue;
    }
    break;
   };
   if (HEAP32[$3 + 4 >> 2] == 1) {
    break block
   }
   HEAP8[HEAP32[$3 + 28 >> 2] + 52 | 0] = 1;
  }
  __stack_pointer = $3 + 32 | 0;
 }
 
 function jsvArrayBufferIteratorSetByteValue($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP8[$2 + 11 | 0] = $1;
  if ((HEAPU8[HEAP32[$2 + 12 >> 2] + 36 | 0] & 15) == 1) {
   jsvStringIteratorSetChar(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 11 | 0] << 24 >> 24)
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsvArrayBufferIteratorSetValueAndRewind($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 44 >> 2] = $0;
  HEAP32[$2 + 40 >> 2] = $1;
  jsvStringIteratorClone($2 + 4 | 0, HEAP32[$2 + 44 >> 2]);
  jsvArrayBufferIteratorSetValue(HEAP32[$2 + 44 >> 2], HEAP32[$2 + 40 >> 2], 0);
  jsvStringIteratorFree_347(HEAP32[$2 + 44 >> 2]);
  jsvStringIteratorClone(HEAP32[$2 + 44 >> 2], $2 + 4 | 0);
  jsvStringIteratorFree_347($2 + 4 | 0);
  HEAP8[HEAP32[$2 + 44 >> 2] + 52 | 0] = 0;
  __stack_pointer = $2 + 48 | 0;
 }
 
 function jsvArrayBufferIteratorGetIndex($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jsvNewFromInteger(HEAP32[HEAP32[$1 + 12 >> 2] + 48 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return $0;
 }
 
 function jsvIteratorGetKey($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block5 : {
   block4 : {
    switch (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] - 1 | 0) {
    case 3:
     HEAP32[$1 + 12 >> 2] = jsvNewFromInteger(HEAP32[HEAP32[$1 + 8 >> 2] + 12 >> 2]);
     break block5;
    case 1:
     HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetKey_406(HEAP32[$1 + 8 >> 2] + 4 | 0);
     break block5;
    case 0:
     HEAP32[$1 + 12 >> 2] = jsvMakeIntoVariableName(jsvNewFromInteger(jsvStringIteratorGetIndex_407(HEAP32[$1 + 8 >> 2] + 4 | 0)), 0);
     break block5;
    case 2:
     HEAP32[$1 + 12 >> 2] = jsvMakeIntoVariableName(jsvArrayBufferIteratorGetIndex(HEAP32[$1 + 8 >> 2] + 4 | 0), 0);
     break block5;
    default:
     break block4;
    };
   }
   HEAP32[$1 + 12 >> 2] = 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvObjectIteratorGetKey_406($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvStringIteratorGetIndex_407($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + HEAP32[HEAP32[$1 + 12 >> 2] >> 2] | 0;
 }
 
 function jsvIteratorGetIntegerValue($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block6 : {
   block4 : {
    switch (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] - 1 | 0) {
    case 3:
     block5 : {
      if (!(jsvIsNameInt(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) & 1)) {
       break block5
      }
      if ((jsvGetInteger(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) | 0) != HEAP32[HEAP32[$1 + 8 >> 2] + 12 >> 2]) {
       break block5
      }
      HEAP32[$1 + 12 >> 2] = jsvGetFirstChildSigned(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) << 16 >> 16;
      break block6;
     }
     block7 : {
      if (!(jsvIsIntegerish(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) & 1)) {
       break block7
      }
      if ((jsvGetInteger(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) | 0) != HEAP32[HEAP32[$1 + 8 >> 2] + 12 >> 2]) {
       break block7
      }
      HEAP32[$1 + 12 >> 2] = jsvGetIntegerAndUnLock(jsvObjectIteratorGetValue_370(HEAP32[$1 + 8 >> 2] + 4 | 0));
      break block6;
     }
     HEAP32[$1 + 12 >> 2] = 0;
     break block6;
    case 1:
     if (jsvIsNameInt(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) & 1) {
      HEAP32[$1 + 12 >> 2] = jsvGetFirstChildSigned(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) << 16 >> 16;
      break block6;
     }
     HEAP32[$1 + 12 >> 2] = jsvGetIntegerAndUnLock(jsvObjectIteratorGetValue_370(HEAP32[$1 + 8 >> 2] + 4 | 0));
     break block6;
    case 0:
     HEAP32[$1 + 12 >> 2] = jsvStringIteratorGetChar_349(HEAP32[$1 + 8 >> 2] + 4 | 0) << 24 >> 24;
     break block6;
    case 2:
     HEAP32[$1 + 12 >> 2] = jsvArrayBufferIteratorGetIntegerValue(HEAP32[$1 + 8 >> 2] + 4 | 0);
     break block6;
    default:
     break block4;
    };
   }
   HEAP32[$1 + 12 >> 2] = 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvIteratorGetFloatValue($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 4 >> 2] = $0;
  block5 : {
   block3 : {
    switch (HEAP32[HEAP32[$1 + 4 >> 2] >> 2] - 2 | 0) {
    case 2:
     block4 : {
      if (!(jsvIsIntegerish(HEAP32[HEAP32[$1 + 4 >> 2] + 4 >> 2]) & 1)) {
       break block4
      }
      if ((jsvGetInteger(HEAP32[HEAP32[$1 + 4 >> 2] + 4 >> 2]) | 0) != HEAP32[HEAP32[$1 + 4 >> 2] + 12 >> 2]) {
       break block4
      }
      HEAPF64[$1 + 8 >> 3] = jsvGetFloatAndUnLock(jsvObjectIteratorGetValue_370(HEAP32[$1 + 4 >> 2] + 4 | 0));
      break block5;
     }
     HEAPF64[$1 + 8 >> 3] = NaN;
     break block5;
    case 0:
     HEAPF64[$1 + 8 >> 3] = jsvGetFloatAndUnLock(jsvObjectIteratorGetValue_370(HEAP32[$1 + 4 >> 2] + 4 | 0));
     break block5;
    case 1:
     HEAPF64[$1 + 8 >> 3] = jsvArrayBufferIteratorGetFloatValue(HEAP32[$1 + 4 >> 2] + 4 | 0);
     break block5;
    default:
     break block3;
    };
   }
   HEAPF64[$1 + 8 >> 3] = jsvIteratorGetIntegerValue(HEAP32[$1 + 4 >> 2]) | 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAPF64[$1 + 8 >> 3];
 }
 
 function jsvIteratorSetValue($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  block4 : {
   block2 : {
    switch (HEAP32[HEAP32[$2 + 12 >> 2] >> 2] - 1 | 0) {
    case 3:
     block5 : {
      if (!(jsvIsIntegerish(HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2]) & 1)) {
       break block5
      }
      if ((jsvGetInteger(HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2]) | 0) != HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]) {
       break block5
      }
      jsvObjectIteratorSetValue(HEAP32[$2 + 12 >> 2] + 4 | 0, HEAP32[$2 + 8 >> 2]);
     }
     jsvSetArrayItem(HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2], HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2], HEAP32[$2 + 8 >> 2]);
     break block4;
    case 1:
     jsvObjectIteratorSetValue(HEAP32[$2 + 12 >> 2] + 4 | 0, HEAP32[$2 + 8 >> 2]);
     break block4;
    case 0:
     $1 = HEAP32[$2 + 12 >> 2] + 4 | 0;
     block6 : {
      if (jsvIsString(HEAP32[$2 + 8 >> 2]) & 1) {
       $0 = HEAP8[HEAP32[$2 + 8 >> 2]] << 24 >> 24;
       break block6;
      }
      $0 = jsvGetInteger(HEAP32[$2 + 8 >> 2]) << 24 >> 24;
     }
     jsvStringIteratorSetChar($1, $0);
     break block4;
    case 2:
     break block2;
    default:
     break block4;
    };
   }
   jsvArrayBufferIteratorSetValueAndRewind(HEAP32[$2 + 12 >> 2] + 4 | 0, HEAP32[$2 + 8 >> 2]);
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 8 >> 2];
 }
 
 function jsvIteratorClone($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
  block4 : {
   block2 : {
    switch (HEAP32[HEAP32[$2 + 8 >> 2] >> 2] - 1 | 0) {
    case 3:
     HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] + 12 >> 2];
     $0 = jsvLockAgain(HEAP32[HEAP32[$2 + 8 >> 2] + 8 >> 2]);
     HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = $0;
     jsvObjectIteratorClone(HEAP32[$2 + 12 >> 2] + 4 | 0, HEAP32[$2 + 8 >> 2] + 4 | 0);
     break block4;
    case 1:
     jsvObjectIteratorClone(HEAP32[$2 + 12 >> 2] + 4 | 0, HEAP32[$2 + 8 >> 2] + 4 | 0);
     break block4;
    case 0:
     jsvStringIteratorClone(HEAP32[$2 + 12 >> 2] + 4 | 0, HEAP32[$2 + 8 >> 2] + 4 | 0);
     break block4;
    case 2:
     break block2;
    default:
     break block4;
    };
   }
   jsvArrayBufferIteratorClone(HEAP32[$2 + 12 >> 2] + 4 | 0, HEAP32[$2 + 8 >> 2] + 4 | 0);
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function isWhitespace($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  $0 = isWhitespaceInline_413(HEAP8[$1 + 15 | 0] << 24 >> 24);
  __stack_pointer = $1 + 16 | 0;
  return $0 & 1;
 }
 
 function isWhitespaceInline_413($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP8[$1 + 15 | 0] = $0;
  $0 = 1;
  block : {
   if (HEAPU8[$1 + 15 | 0] == 9) {
    break block
   }
   $0 = 1;
   if (HEAPU8[$1 + 15 | 0] == 11) {
    break block
   }
   $0 = 1;
   if (HEAPU8[$1 + 15 | 0] == 12) {
    break block
   }
   $0 = 1;
   if (HEAPU8[$1 + 15 | 0] == 32) {
    break block
   }
   $0 = 1;
   if (HEAPU8[$1 + 15 | 0] == 10) {
    break block
   }
   $0 = HEAPU8[$1 + 15 | 0] == 13;
  }
  return $0;
 }
 
 function isHexadecimal($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP8[$1 + 15 | 0] = $0;
  block : {
   if (HEAP8[$1 + 15 | 0] << 24 >> 24 >= 48) {
    $0 = 1;
    if (HEAP8[$1 + 15 | 0] << 24 >> 24 <= 57) {
     break block
    }
   }
   if (HEAP8[$1 + 15 | 0] << 24 >> 24 >= 97) {
    $0 = 1;
    if (HEAP8[$1 + 15 | 0] << 24 >> 24 <= 102) {
     break block
    }
   }
   $2 = HEAP8[$1 + 15 | 0] << 24 >> 24 >= 65 ? HEAP8[$1 + 15 | 0] << 24 >> 24 <= 70 : $2;
   $0 = $2;
  }
  return $0 & 1;
 }
 
 function isAlpha($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  $0 = isAlphaInline_416(HEAP8[$1 + 15 | 0] << 24 >> 24);
  __stack_pointer = $1 + 16 | 0;
  return $0 & 1;
 }
 
 function isAlphaInline_416($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP8[$1 + 15 | 0] = $0;
  block : {
   if (HEAP8[$1 + 15 | 0] << 24 >> 24 >= 97) {
    $0 = 1;
    if (HEAP8[$1 + 15 | 0] << 24 >> 24 <= 122) {
     break block
    }
   }
   if (HEAP8[$1 + 15 | 0] << 24 >> 24 >= 65) {
    $0 = 1;
    if (HEAP8[$1 + 15 | 0] << 24 >> 24 <= 90) {
     break block
    }
   }
   $0 = HEAPU8[$1 + 15 | 0] == 95;
  }
  return $0;
 }
 
 function isNumeric($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  $0 = isNumericInline_418(HEAP8[$1 + 15 | 0] << 24 >> 24);
  __stack_pointer = $1 + 16 | 0;
  return $0 & 1;
 }
 
 function isNumericInline_418($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP8[$1 + 15 | 0] = $0;
  $2 = HEAP8[$1 + 15 | 0] << 24 >> 24 >= 48 ? HEAP8[$1 + 15 | 0] << 24 >> 24 <= 57 : $2;
  return $2;
 }
 
 function isIDString($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!(isAlpha(HEAP8[HEAP32[$1 + 8 >> 2]] << 24 >> 24) & 1)) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   while (1) {
    if (HEAPU8[HEAP32[$1 + 8 >> 2]]) {
     block1 : {
      if (isAlpha(HEAP8[HEAP32[$1 + 8 >> 2]] << 24 >> 24) & 1) {
       break block1
      }
      if (isNumeric(HEAP8[HEAP32[$1 + 8 >> 2]] << 24 >> 24) & 1) {
       break block1
      }
      HEAP8[$1 + 15 | 0] = 0;
      break block;
     }
     HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
     continue;
    }
    break;
   };
   HEAP8[$1 + 15 | 0] = 1;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function dtohex($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] & 15;
  if (HEAP32[$1 + 12 >> 2] < 10) {
   $0 = HEAP32[$1 + 12 >> 2] + 48 | 0
  } else {
   $0 = HEAP32[$1 + 12 >> 2] + 55 | 0
  }
  return $0 << 24 >> 24;
 }
 
 function charToUpperCase($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP8[$1 + 15 | 0] = $0;
  block2 : {
   block1 : {
    if (!(HEAP8[$1 + 15 | 0] << 24 >> 24 <= 122 & HEAP8[$1 + 15 | 0] << 24 >> 24 >= 97 | HEAP8[$1 + 15 | 0] << 24 >> 24 >>> 0 <= 246 & HEAP8[$1 + 15 | 0] << 24 >> 24 >>> 0 >= 224)) {
     if (HEAP8[$1 + 15 | 0] << 24 >> 24 >>> 0 < 248 | HEAP8[$1 + 15 | 0] << 24 >> 24 >>> 0 > 254) {
      break block1
     }
    }
    $0 = (HEAP8[$1 + 15 | 0] << 24 >> 24) - 32 | 0;
    break block2;
   }
   $0 = HEAP8[$1 + 15 | 0] << 24 >> 24;
  }
  return $0 << 24 >> 24;
 }
 
 function charToLowerCase($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP8[$1 + 15 | 0] = $0;
  block2 : {
   block1 : {
    if (!(HEAP8[$1 + 15 | 0] << 24 >> 24 <= 90 & HEAP8[$1 + 15 | 0] << 24 >> 24 >= 65 | HEAP8[$1 + 15 | 0] << 24 >> 24 >>> 0 <= 214 & HEAP8[$1 + 15 | 0] << 24 >> 24 >>> 0 >= 192)) {
     if (HEAP8[$1 + 15 | 0] << 24 >> 24 >>> 0 < 216 | HEAP8[$1 + 15 | 0] << 24 >> 24 >>> 0 > 222) {
      break block1
     }
    }
    $0 = (HEAP8[$1 + 15 | 0] << 24 >> 24) + 32 | 0;
    break block2;
   }
   $0 = HEAP8[$1 + 15 | 0] << 24 >> 24;
  }
  return $0 << 24 >> 24;
 }
 
 function escapeCharacter($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP8[$3 + 19 | 0] = $2;
  block : {
   if (HEAP32[$3 + 24 >> 2] == 10) {
    HEAP32[$3 + 28 >> 2] = 135493;
    break block;
   }
   if (HEAP32[$3 + 24 >> 2] == 9) {
    HEAP32[$3 + 28 >> 2] = 125135;
    break block;
   }
   if (HEAP32[$3 + 24 >> 2] == 8) {
    HEAP32[$3 + 28 >> 2] = 140286;
    break block;
   }
   if (!(HEAP8[$3 + 19 | 0] & 1 | HEAP32[$3 + 24 >> 2] != 11)) {
    HEAP32[$3 + 28 >> 2] = 124235;
    break block;
   }
   if (HEAP32[$3 + 24 >> 2] == 12) {
    HEAP32[$3 + 28 >> 2] = 136915;
    break block;
   }
   if (HEAP32[$3 + 24 >> 2] == 13) {
    HEAP32[$3 + 28 >> 2] = 128395;
    break block;
   }
   if (HEAP32[$3 + 24 >> 2] == 92) {
    HEAP32[$3 + 28 >> 2] = 140507;
    break block;
   }
   if (HEAP32[$3 + 24 >> 2] == 34) {
    HEAP32[$3 + 28 >> 2] = 146611;
    break block;
   }
   if (!(HEAP32[$3 + 20 >> 2] <= 55 & HEAP32[$3 + 20 >> 2] >= 48 | (HEAP8[$3 + 19 | 0] & 1 | HEAP32[$3 + 24 >> 2] >= 8))) {
    HEAP8[368504] = 92;
    HEAP8[368505] = HEAP32[$3 + 24 >> 2] + 48;
    HEAP8[368506] = 0;
    HEAP32[$3 + 28 >> 2] = 368504;
    break block;
   }
   if (!(HEAP32[$3 + 24 >> 2] < 127 & HEAP32[$3 + 24 >> 2] >= 32)) {
    HEAP32[$3 + 12 >> 2] = 368504;
    $0 = 1;
    $0 = HEAP8[$3 + 19 | 0] & 1 ? $0 : HEAP32[$3 + 24 >> 2] > 255;
    HEAP32[$3 + 12 >> 2] = numericEscapeChar(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 24 >> 2], $0);
    HEAP8[HEAP32[$3 + 12 >> 2]] = 0;
    HEAP32[$3 + 28 >> 2] = 368504;
    break block;
   }
   HEAP8[368505] = 0;
   HEAP8[368504] = HEAP32[$3 + 24 >> 2];
   HEAP32[$3 + 28 >> 2] = 368504;
  }
  __stack_pointer = $3 + 32 | 0;
  return HEAP32[$3 + 28 >> 2];
 }
 
 function numericEscapeChar($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP8[$3 + 7 | 0] = $2;
  $0 = HEAP32[$3 + 12 >> 2];
  HEAP32[$3 + 12 >> 2] = $0 + 1;
  HEAP8[$0 | 0] = 92;
  block : {
   if (HEAP8[$3 + 7 | 0] & 1) {
    $0 = HEAP32[$3 + 12 >> 2];
    HEAP32[$3 + 12 >> 2] = $0 + 1;
    HEAP8[$0 | 0] = 117;
    $1 = dtohex(HEAP32[$3 + 8 >> 2] >> 12);
    $0 = HEAP32[$3 + 12 >> 2];
    HEAP32[$3 + 12 >> 2] = $0 + 1;
    HEAP8[$0 | 0] = $1;
    $1 = dtohex(HEAP32[$3 + 8 >> 2] >> 8);
    $0 = HEAP32[$3 + 12 >> 2];
    HEAP32[$3 + 12 >> 2] = $0 + 1;
    HEAP8[$0 | 0] = $1;
    break block;
   }
   $0 = HEAP32[$3 + 12 >> 2];
   HEAP32[$3 + 12 >> 2] = $0 + 1;
   HEAP8[$0 | 0] = 120;
  }
  $1 = dtohex(HEAP32[$3 + 8 >> 2] >> 4);
  $0 = HEAP32[$3 + 12 >> 2];
  HEAP32[$3 + 12 >> 2] = $0 + 1;
  HEAP8[$0 | 0] = $1;
  $1 = dtohex(HEAP32[$3 + 8 >> 2]);
  $0 = HEAP32[$3 + 12 >> 2];
  HEAP32[$3 + 12 >> 2] = $0 + 1;
  HEAP8[$0 | 0] = $1;
  __stack_pointer = $3 + 16 | 0;
  return HEAP32[$3 + 12 >> 2];
 }
 
 function getRadix($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = 10;
  if (HEAPU8[HEAP32[HEAP32[$1 + 12 >> 2] >> 2]] == 48) {
   HEAP32[$1 + 8 >> 2] = 8;
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
   block1 : {
    if (!(HEAPU8[HEAP32[HEAP32[$1 + 12 >> 2] >> 2]] != 111 & HEAPU8[HEAP32[HEAP32[$1 + 12 >> 2] >> 2]] != 79)) {
     HEAP32[$1 + 8 >> 2] = 8;
     $0 = HEAP32[$1 + 12 >> 2];
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     break block1;
    }
    block3 : {
     if (!(HEAPU8[HEAP32[HEAP32[$1 + 12 >> 2] >> 2]] != 120 & HEAPU8[HEAP32[HEAP32[$1 + 12 >> 2] >> 2]] != 88)) {
      HEAP32[$1 + 8 >> 2] = 16;
      $0 = HEAP32[$1 + 12 >> 2];
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
      break block3;
     }
     block5 : {
      if (!(HEAPU8[HEAP32[HEAP32[$1 + 12 >> 2] >> 2]] != 98 & HEAPU8[HEAP32[HEAP32[$1 + 12 >> 2] >> 2]] != 66)) {
       HEAP32[$1 + 8 >> 2] = 2;
       $0 = HEAP32[$1 + 12 >> 2];
       HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
       break block5;
      }
      HEAP32[$1 + 4 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
      while (1) {
       block6 : {
        if (!HEAPU8[HEAP32[$1 + 4 >> 2]]) {
         break block6
        }
        block9 : {
         if (!(!(HEAPU8[HEAP32[$1 + 4 >> 2]] == 46 | HEAPU8[HEAP32[$1 + 4 >> 2]] == 56) & HEAPU8[HEAP32[$1 + 4 >> 2]] != 57)) {
          HEAP32[$1 + 8 >> 2] = 10;
          break block9;
         }
         if (HEAP8[HEAP32[$1 + 4 >> 2]] << 24 >> 24 < 48 | HEAP8[HEAP32[$1 + 4 >> 2]] << 24 >> 24 > 57) {
          break block6
         }
        }
        HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
        continue;
       }
       break;
      };
     }
    }
   }
  }
  return HEAP32[$1 + 8 >> 2];
 }
 
 function chtod($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP8[$1 + 11 | 0] = $0;
  block1 : {
   if (!(HEAP8[$1 + 11 | 0] << 24 >> 24 < 48 | HEAP8[$1 + 11 | 0] << 24 >> 24 > 57)) {
    HEAP32[$1 + 12 >> 2] = (HEAP8[$1 + 11 | 0] << 24 >> 24) - 48;
    break block1;
   }
   if (!(HEAP8[$1 + 11 | 0] << 24 >> 24 < 97 | HEAP8[$1 + 11 | 0] << 24 >> 24 > 122)) {
    HEAP32[$1 + 12 >> 2] = (HEAP8[$1 + 11 | 0] << 24 >> 24) - 87;
    break block1;
   }
   if (!(HEAP8[$1 + 11 | 0] << 24 >> 24 < 65 | HEAP8[$1 + 11 | 0] << 24 >> 24 > 90)) {
    HEAP32[$1 + 12 >> 2] = (HEAP8[$1 + 11 | 0] << 24 >> 24) - 55;
    break block1;
   }
   HEAP32[$1 + 12 >> 2] = -1;
  }
  return HEAP32[$1 + 12 >> 2];
 }
 
 function hexToByte($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP8[$2 + 11 | 0] = $0;
  HEAP8[$2 + 10 | 0] = $1;
  HEAP32[$2 + 4 >> 2] = chtod(HEAP8[$2 + 11 | 0] << 24 >> 24);
  HEAP32[$2 >> 2] = chtod(HEAP8[$2 + 10 | 0] << 24 >> 24);
  block1 : {
   if ((HEAP32[$2 + 4 >> 2] | HEAP32[$2 >> 2]) < 0) {
    HEAP32[$2 + 12 >> 2] = -1;
    break block1;
   }
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2] | HEAP32[$2 + 4 >> 2] << 4;
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function stringToIntWithRadix($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = __stack_pointer + -64 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 52 >> 2] = $0;
  HEAP32[$4 + 48 >> 2] = $1;
  HEAP32[$4 + 44 >> 2] = $2;
  HEAP32[$4 + 40 >> 2] = $3;
  while (1) {
   if (isWhitespace(HEAP8[HEAP32[$4 + 52 >> 2]] << 24 >> 24) & 1) {
    HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 52 >> 2] + 1;
    continue;
   }
   break;
  };
  HEAP8[$4 + 39 | 0] = 0;
  HEAP32[$4 + 24 >> 2] = 0;
  HEAP32[$4 + 28 >> 2] = 0;
  block : {
   if (HEAPU8[HEAP32[$4 + 52 >> 2]] == 45) {
    HEAP8[$4 + 39 | 0] = 1;
    HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 52 >> 2] + 1;
    break block;
   }
   if (HEAPU8[HEAP32[$4 + 52 >> 2]] == 43) {
    HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 52 >> 2] + 1
   }
  }
  HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 52 >> 2];
  if (HEAP32[$4 + 40 >> 2]) {
   HEAP32[HEAP32[$4 + 40 >> 2] >> 2] = HEAP32[$4 + 52 >> 2]
  }
  if (HEAP32[$4 + 48 >> 2]) {
   $0 = HEAP32[$4 + 48 >> 2]
  } else {
   $0 = getRadix($4 + 52 | 0)
  }
  HEAP32[$4 + 16 >> 2] = $0;
  block2 : {
   if (!HEAP32[$4 + 16 >> 2]) {
    HEAP32[$4 + 56 >> 2] = 0;
    HEAP32[$4 + 60 >> 2] = 0;
    break block2;
   }
   while (1) {
    block3 : {
     if (!HEAPU8[HEAP32[$4 + 52 >> 2]]) {
      break block3
     }
     HEAP32[$4 + 12 >> 2] = chtod(HEAP8[HEAP32[$4 + 52 >> 2]] << 24 >> 24);
     if (HEAP32[$4 + 12 >> 2] < 0 | HEAP32[$4 + 12 >> 2] >= HEAP32[$4 + 16 >> 2]) {
      break block3
     }
     $1 = HEAP32[$4 + 12 >> 2];
     $0 = $1 >> 31;
     $6 = $1;
     $2 = $0;
     $0 = HEAP32[$4 + 24 >> 2];
     $7 = $0;
     $1 = HEAP32[$4 + 28 >> 2];
     $3 = $1;
     $1 = HEAP32[$4 + 16 >> 2];
     $0 = $1 >> 31;
     $5 = $0;
     $0 = $3;
     $3 = $1;
     $1 = $5;
     $1 = __wasm_i64_mul($7, $0, $3, $1);
     $3 = $1;
     $5 = $1 + $6 | 0;
     $0 = i64toi32_i32$HIGH_BITS;
     $1 = $0;
     $0 = $2;
     $0 = $1 + $0 | 0;
     HEAP32[$4 + 24 >> 2] = $5;
     $0 = $5 >>> 0 < $3 >>> 0 ? $0 + 1 | 0 : $0;
     HEAP32[$4 + 28 >> 2] = $0;
     HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 52 >> 2] + 1;
     continue;
    }
    break;
   };
   if (HEAP32[$4 + 44 >> 2]) {
    HEAP8[HEAP32[$4 + 44 >> 2]] = HEAP32[$4 + 52 >> 2] == HEAP32[$4 + 20 >> 2]
   }
   if (HEAP32[$4 + 40 >> 2]) {
    HEAP32[HEAP32[$4 + 40 >> 2] >> 2] = HEAP32[$4 + 52 >> 2]
   }
   if (HEAP8[$4 + 39 | 0] & 1) {
    $2 = HEAP32[$4 + 28 >> 2];
    $0 = HEAP32[$4 + 24 >> 2];
    $3 = $0;
    $1 = 0 - $0 | 0;
    HEAP32[$4 + 56 >> 2] = $1;
    $0 = $2;
    $5 = $0 + (($3 | 0) != 0) | 0;
    $5 = 0 - $5 | 0;
    HEAP32[$4 + 60 >> 2] = $5;
    break block2;
   }
   $0 = HEAP32[$4 + 28 >> 2];
   $5 = HEAP32[$4 + 24 >> 2];
   HEAP32[$4 + 56 >> 2] = $5;
   HEAP32[$4 + 60 >> 2] = $0;
  }
  __stack_pointer = $4 - -64 | 0;
  $5 = HEAP32[$4 + 60 >> 2];
  i64toi32_i32$HIGH_BITS = $5;
  $0 = HEAP32[$4 + 56 >> 2];
  return $0;
 }
 
 function stringToInt($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = stringToIntWithRadix(HEAP32[$1 + 12 >> 2], 0, 0, 0);
  __stack_pointer = $1 + 16 | 0;
  return $0;
 }
 
 function jsError($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  jsiConsoleRemoveInputLine();
  jsiConsolePrintString(146898);
  HEAP32[$2 + 8 >> 2] = $1;
  vcbprintf(7, 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
  jsiConsolePrintString(148265);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function vcbprintf($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 144 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 140 >> 2] = $0;
  HEAP32[$4 + 136 >> 2] = $1;
  HEAP32[$4 + 132 >> 2] = $2;
  HEAP32[$4 + 128 >> 2] = $3;
  while (1) {
   block : {
    if (!HEAPU8[HEAP32[$4 + 132 >> 2]]) {
     break block
    }
    block16 : {
     if (HEAPU8[HEAP32[$4 + 132 >> 2]] == 37) {
      HEAP32[$4 + 132 >> 2] = HEAP32[$4 + 132 >> 2] + 1;
      $0 = HEAP32[$4 + 132 >> 2];
      HEAP32[$4 + 132 >> 2] = $0 + 1;
      HEAP8[$4 + 95 | 0] = HEAPU8[$0 | 0];
      block12 : {
       block8 : {
        switch (HEAP8[$4 + 95 | 0] - 32 | 0) {
        case 0:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
         HEAP32[$4 + 88 >> 2] = 147034;
         if (!HEAPU8[HEAP32[$4 + 132 >> 2]]) {
          break block12
         }
         if (HEAPU8[$4 + 95 | 0] == 48) {
          HEAP32[$4 + 88 >> 2] = 142266;
          $0 = HEAP32[$4 + 132 >> 2];
          HEAP32[$4 + 132 >> 2] = $0 + 1;
          HEAP8[$4 + 95 | 0] = HEAPU8[$0 | 0];
          if (!HEAPU8[HEAP32[$4 + 132 >> 2]]) {
           break block12
          }
         }
         HEAP32[$4 + 84 >> 2] = (HEAP8[$4 + 95 | 0] << 24 >> 24) - 48;
         $0 = HEAP32[$4 + 128 >> 2];
         HEAP32[$4 + 128 >> 2] = $0 + 4;
         HEAP32[$4 + 80 >> 2] = HEAP32[$0 >> 2];
         block13 : {
          if (HEAPU8[HEAP32[$4 + 132 >> 2]] == 120) {
           itostr_extra(HEAP32[$4 + 80 >> 2], $4 + 96 | 0, 0, 16);
           break block13;
          }
          itostr_433(HEAP32[$4 + 80 >> 2], $4 + 96 | 0, 10);
         }
         HEAP32[$4 + 132 >> 2] = HEAP32[$4 + 132 >> 2] + 1;
         HEAP32[$4 + 76 >> 2] = strlen($4 + 96 | 0);
         while (1) {
          if (HEAP32[$4 + 76 >> 2] < HEAP32[$4 + 84 >> 2]) {
           FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]](HEAP32[$4 + 88 >> 2], HEAP32[$4 + 136 >> 2]);
           HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 76 >> 2] + 1;
           continue;
          }
          break;
         };
         FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
         break block12;
        case 68:
        case 73:
         $0 = HEAP32[$4 + 128 >> 2];
         HEAP32[$4 + 128 >> 2] = $0 + 4;
         itostr_433(HEAP32[$0 >> 2], $4 + 96 | 0, 10);
         FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
         break block12;
        case 88:
         $0 = HEAP32[$4 + 128 >> 2];
         HEAP32[$4 + 128 >> 2] = $0 + 4;
         itostr_extra(HEAP32[$0 >> 2], $4 + 96 | 0, 0, 16);
         FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
         break block12;
        case 44:
         HEAP32[$4 + 72 >> 2] = 10;
         HEAP8[$4 + 71 | 0] = 1;
         if (HEAPU8[HEAP32[$4 + 132 >> 2]] == 120) {
          HEAP32[$4 + 72 >> 2] = 16;
          HEAP32[$4 + 132 >> 2] = HEAP32[$4 + 132 >> 2] + 1;
          HEAP8[$4 + 71 | 0] = 0;
         }
         $0 = HEAP32[$4 + 128 >> 2];
         HEAP32[$4 + 128 >> 2] = $0 + 4;
         itostr_extra(HEAP32[$0 >> 2], $4 + 96 | 0, HEAP8[$4 + 71 | 0] & 1, HEAP32[$4 + 72 >> 2]);
         FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
         break block12;
        case 70:
         $0 = HEAP32[$4 + 128 >> 2] + 7 & -8;
         HEAP32[$4 + 128 >> 2] = $0 + 8;
         ftoa_bounded(HEAPF64[$0 >> 3], $4 + 96 | 0, 32);
         FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
         break block12;
        case 83:
         $1 = HEAP32[$4 + 140 >> 2];
         $0 = HEAP32[$4 + 128 >> 2];
         HEAP32[$4 + 128 >> 2] = $0 + 4;
         FUNCTION_TABLE[$1 | 0](HEAP32[$0 >> 2], HEAP32[$4 + 136 >> 2]);
         break block12;
        case 67:
         $0 = HEAP32[$4 + 128 >> 2];
         HEAP32[$4 + 128 >> 2] = $0 + 4;
         HEAP8[$4 + 96 | 0] = HEAP32[$0 >> 2];
         HEAP8[$4 + 97 | 0] = 0;
         FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
         break block12;
        case 49:
        case 81:
        case 86:
         HEAP8[$4 + 70 | 0] = HEAPU8[$4 + 95 | 0] != 118;
         HEAP8[$4 + 69 | 0] = HEAPU8[$4 + 95 | 0] == 81;
         if (HEAP8[$4 + 70 | 0] & 1) {
          FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]](146612, HEAP32[$4 + 136 >> 2])
         }
         $0 = HEAP32[$4 + 128 >> 2];
         HEAP32[$4 + 128 >> 2] = $0 + 4;
         HEAP32[$4 + 64 >> 2] = jsvAsString(HEAP32[$0 >> 2]);
         if (jsvIsUTF8String(HEAP32[$4 + 64 >> 2]) & 1) {
          HEAP8[$4 + 69 | 0] = 1
         }
         HEAP8[$4 + 97 | 0] = 0;
         if (jsvIsString(HEAP32[$4 + 64 >> 2]) & 1) {
          jsvStringIteratorNewUTF8($4 + 28 | 0, HEAP32[$4 + 64 >> 2], 0);
          block15 : {
           if (HEAP8[$4 + 70 | 0] & 1) {
            HEAP32[$4 + 24 >> 2] = jsvStringIteratorGetUTF8CharAndNext($4 + 28 | 0);
            while (1) {
             $0 = 1;
             if (!(jsvStringIteratorHasChar_435($4 + 28 | 0) & 1)) {
              $0 = HEAP32[$4 + 24 >> 2] >= 0
             }
             if ($0) {
              HEAP32[$4 + 20 >> 2] = jsvStringIteratorGetUTF8CharAndNext($4 + 28 | 0);
              block14 : {
               if (HEAP8[$4 + 70 | 0] & 1) {
                $0 = HEAP32[$4 + 140 >> 2];
                FUNCTION_TABLE[$0 | 0](escapeCharacter(HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], HEAP8[$4 + 69 | 0] & 1), HEAP32[$4 + 136 >> 2]);
                break block14;
               }
               FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
              }
              HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 20 >> 2];
              continue;
             }
             break;
            };
            break block15;
           }
           while (1) {
            if (jsvStringIteratorHasChar_435($4 + 28 | 0) & 1) {
             HEAP8[$4 + 96 | 0] = jsvStringIteratorGetCharAndNext($4 + 28 | 0);
             FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
             continue;
            }
            break;
           };
          }
          jsvStringIteratorFree_436($4 + 28 | 0);
          jsvUnLock(HEAP32[$4 + 64 >> 2]);
         }
         if (HEAP8[$4 + 70 | 0] & 1) {
          FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]](146612, HEAP32[$4 + 136 >> 2])
         }
         break block12;
        case 74:
         $0 = HEAP32[$4 + 128 >> 2];
         HEAP32[$4 + 128 >> 2] = $0 + 4;
         HEAP32[$4 + 16 >> 2] = HEAP32[$0 >> 2];
         jsfGetJSONWithCallback(HEAP32[$4 + 16 >> 2], 0, 8229, 0, HEAP32[$4 + 140 >> 2], HEAP32[$4 + 136 >> 2]);
         break block12;
        case 84:
         $0 = HEAP32[$4 + 128 >> 2];
         HEAP32[$4 + 128 >> 2] = $0 + 4;
         HEAP32[$4 + 12 >> 2] = HEAP32[$0 >> 2];
         if (jsvIsNull(HEAP32[$4 + 12 >> 2]) & 1) {
          $0 = 135673
         } else {
          $0 = jswGetBasicObjectName(HEAP32[$4 + 12 >> 2])
         }
         HEAP32[$4 + 8 >> 2] = $0;
         if (!HEAP32[$4 + 8 >> 2]) {
          HEAP32[$4 + 8 >> 2] = jsvGetTypeOf(HEAP32[$4 + 12 >> 2])
         }
         FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]](HEAP32[$4 + 8 >> 2], HEAP32[$4 + 136 >> 2]);
         break block12;
        case 80:
         break block8;
        default:
         break block;
        };
       }
       $0 = HEAP32[$4 + 128 >> 2];
       HEAP32[$4 + 128 >> 2] = $0 + 4;
       jshGetPinString($4 + 96 | 0, HEAP32[$0 >> 2] & 255);
       FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
      }
      break block16;
     }
     $0 = HEAP32[$4 + 132 >> 2];
     HEAP32[$4 + 132 >> 2] = $0 + 1;
     HEAP8[$4 + 96 | 0] = HEAPU8[$0 | 0];
     HEAP8[$4 + 97 | 0] = 0;
     FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
    }
    continue;
   }
   break;
  };
  __stack_pointer = $4 + 144 | 0;
 }
 
 function itostr_extra($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP8[$4 + 23 | 0] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  block1 : {
   if (!(!(HEAP8[$4 + 23 | 0] & 1) | HEAP32[$4 + 28 >> 2] >= 0)) {
    $0 = HEAP32[$4 + 24 >> 2];
    HEAP32[$4 + 24 >> 2] = $0 + 1;
    HEAP8[$0 | 0] = 45;
    HEAP32[$4 + 12 >> 2] = 0 - HEAP32[$4 + 28 >> 2];
    break block1;
   }
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 28 >> 2];
  }
  HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 12 >> 2];
  HEAP32[$4 + 4 >> 2] = 1;
  while (1) {
   if (HEAPU32[$4 + 8 >> 2] >= HEAPU32[$4 + 16 >> 2]) {
    HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] + 1;
    HEAP32[$4 + 8 >> 2] = HEAPU32[$4 + 8 >> 2] / HEAPU32[$4 + 16 >> 2];
    continue;
   }
   break;
  };
  HEAP32[$4 >> 2] = HEAP32[$4 + 4 >> 2] - 1;
  while (1) {
   if (HEAP32[$4 >> 2] >= 0) {
    $0 = itoch(HEAPU32[$4 + 12 >> 2] % HEAPU32[$4 + 16 >> 2] | 0);
    HEAP8[HEAP32[$4 + 24 >> 2] + HEAP32[$4 >> 2] | 0] = $0;
    HEAP32[$4 + 12 >> 2] = HEAPU32[$4 + 12 >> 2] / HEAPU32[$4 + 16 >> 2];
    HEAP32[$4 >> 2] = HEAP32[$4 >> 2] - 1;
    continue;
   }
   break;
  };
  HEAP8[HEAP32[$4 + 24 >> 2] + HEAP32[$4 + 4 >> 2] | 0] = 0;
  __stack_pointer = $4 + 32 | 0;
 }
 
 function itostr_433($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  itostr_extra(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], 1, HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function ftoa_bounded($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAPF64[$3 + 8 >> 3] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 >> 2] = $2;
  ftoa_bounded_extra(HEAPF64[$3 + 8 >> 3], HEAP32[$3 + 4 >> 2], HEAP32[$3 >> 2], 10, -1);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jsvStringIteratorHasChar_435($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
 }
 
 function jsvStringIteratorFree_436($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsWarn($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  jsiConsoleRemoveInputLine();
  jsiConsolePrintString(146906);
  HEAP32[$2 + 8 >> 2] = $1;
  vcbprintf(7, 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
  jsiConsolePrintString(148265);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsExceptionHere($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer + -64 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 60 >> 2] = $0;
  HEAP32[$3 + 56 >> 2] = $1;
  block : {
   if (jspHasError() & 1) {
    break block
   }
   jsiConsoleRemoveInputLine();
   HEAP32[$3 + 52 >> 2] = jsvNewFromEmptyString_439();
   if (!HEAP32[$3 + 52 >> 2]) {
    jspSetError();
    break block;
   }
   jsvStringIteratorNew($3 + 16 | 0, HEAP32[$3 + 52 >> 2], 0);
   jsvStringIteratorGotoEnd($3 + 16 | 0);
   HEAP32[$3 + 12 >> 2] = 2;
   HEAP32[$3 + 8 >> 2] = $2;
   vcbprintf(HEAP32[$3 + 12 >> 2], $3 + 16 | 0, HEAP32[$3 + 56 >> 2], HEAP32[$3 + 8 >> 2]);
   jsvStringIteratorFree_436($3 + 16 | 0);
   if (HEAP32[$3 + 60 >> 2]) {
    HEAP32[$3 + 4 >> 2] = 0;
    block1 : {
     if (HEAP32[$3 + 60 >> 2] == 1) {
      HEAP32[$3 + 4 >> 2] = jswrap_error_constructor(HEAP32[$3 + 52 >> 2]);
      break block1;
     }
     block2 : {
      if (HEAP32[$3 + 60 >> 2] == 2) {
       HEAP32[$3 + 4 >> 2] = jswrap_syntaxerror_constructor(HEAP32[$3 + 52 >> 2]);
       break block2;
      }
      block3 : {
       if (HEAP32[$3 + 60 >> 2] == 3) {
        HEAP32[$3 + 4 >> 2] = jswrap_typeerror_constructor(HEAP32[$3 + 52 >> 2]);
        break block3;
       }
       block4 : {
        if (HEAP32[$3 + 60 >> 2] == 4) {
         HEAP32[$3 + 4 >> 2] = jswrap_internalerror_constructor(HEAP32[$3 + 52 >> 2]);
         break block4;
        }
        if (HEAP32[$3 + 60 >> 2] == 5) {
         HEAP32[$3 + 4 >> 2] = jswrap_referenceerror_constructor(HEAP32[$3 + 52 >> 2])
        }
       }
      }
     }
    }
    jsvUnLock(HEAP32[$3 + 52 >> 2]);
    HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 4 >> 2];
   }
   jspSetException(HEAP32[$3 + 52 >> 2]);
   jsvUnLock(HEAP32[$3 + 52 >> 2]);
  }
  __stack_pointer = $3 - -64 | 0;
 }
 
 function jsvNewFromEmptyString_439() {
  return jsvNewWithFlags(28);
 }
 
 function stringToFloatWithRadix($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer + -64 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 52 >> 2] = $0;
  HEAP32[$3 + 48 >> 2] = $1;
  HEAP32[$3 + 44 >> 2] = $2;
  while (1) {
   if (isWhitespace(HEAP8[HEAP32[$3 + 52 >> 2]] << 24 >> 24) & 1) {
    HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
    continue;
   }
   break;
  };
  HEAP8[$3 + 43 | 0] = 0;
  block : {
   if (HEAPU8[HEAP32[$3 + 52 >> 2]] == 45) {
    HEAP8[$3 + 43 | 0] = 1;
    HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
    break block;
   }
   if (HEAPU8[HEAP32[$3 + 52 >> 2]] == 43) {
    HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1
   }
  }
  HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 52 >> 2];
  if (HEAP32[$3 + 44 >> 2]) {
   HEAP32[HEAP32[$3 + 44 >> 2] >> 2] = HEAP32[$3 + 52 >> 2]
  }
  if (HEAP32[$3 + 48 >> 2]) {
   $0 = HEAP32[$3 + 48 >> 2]
  } else {
   $0 = getRadix($3 + 52 | 0)
  }
  HEAP32[$3 + 32 >> 2] = $0;
  block2 : {
   if (!HEAP32[$3 + 32 >> 2]) {
    HEAPF64[$3 + 56 >> 3] = NaN;
    break block2;
   }
   HEAPF64[$3 + 24 >> 3] = 0;
   HEAPF64[$3 + 16 >> 3] = .1;
   while (1) {
    block3 : {
     if (!HEAPU8[HEAP32[$3 + 52 >> 2]]) {
      break block3
     }
     HEAP32[$3 + 12 >> 2] = chtod(HEAP8[HEAP32[$3 + 52 >> 2]] << 24 >> 24);
     if (HEAP32[$3 + 12 >> 2] < 0 | HEAP32[$3 + 12 >> 2] >= HEAP32[$3 + 32 >> 2]) {
      break block3
     }
     HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 24 >> 3] * +HEAP32[$3 + 32 >> 2] + +HEAP32[$3 + 12 >> 2];
     HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
     continue;
    }
    break;
   };
   if (HEAP32[$3 + 32 >> 2] == 10) {
    if (HEAPU8[HEAP32[$3 + 52 >> 2]] == 46) {
     HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
     while (1) {
      if (!(!HEAPU8[HEAP32[$3 + 52 >> 2]] | HEAP8[HEAP32[$3 + 52 >> 2]] << 24 >> 24 < 48 | HEAP8[HEAP32[$3 + 52 >> 2]] << 24 >> 24 > 57)) {
       HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 16 >> 3] * +((HEAP8[HEAP32[$3 + 52 >> 2]] << 24 >> 24) - 48 | 0) + HEAPF64[$3 + 24 >> 3];
       HEAPF64[$3 + 16 >> 3] = HEAPF64[$3 + 16 >> 3] / 10.0;
       HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
       continue;
      }
      break;
     };
    }
    if (!(HEAPU8[HEAP32[$3 + 52 >> 2]] != 101 & HEAPU8[HEAP32[$3 + 52 >> 2]] != 69)) {
     HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
     HEAP8[$3 + 11 | 0] = 0;
     if (!(HEAPU8[HEAP32[$3 + 52 >> 2]] != 45 & HEAPU8[HEAP32[$3 + 52 >> 2]] != 43)) {
      HEAP8[$3 + 11 | 0] = HEAPU8[HEAP32[$3 + 52 >> 2]] == 45;
      HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
     }
     HEAP32[$3 + 4 >> 2] = 0;
     while (1) {
      if (!(!HEAPU8[HEAP32[$3 + 52 >> 2]] | HEAP8[HEAP32[$3 + 52 >> 2]] << 24 >> 24 < 48 | HEAP8[HEAP32[$3 + 52 >> 2]] << 24 >> 24 > 57)) {
       HEAP32[$3 + 4 >> 2] = ((HEAP8[HEAP32[$3 + 52 >> 2]] << 24 >> 24) - 48 | 0) + Math_imul(HEAP32[$3 + 4 >> 2], 10);
       HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
       continue;
      }
      break;
     };
     if (HEAP8[$3 + 11 | 0] & 1) {
      HEAP32[$3 + 4 >> 2] = 0 - HEAP32[$3 + 4 >> 2]
     }
     while (1) {
      if (HEAP32[$3 + 4 >> 2] > 0) {
       HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 24 >> 3] * 10.0;
       HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] - 1;
       continue;
      }
      break;
     };
     while (1) {
      if (HEAP32[$3 + 4 >> 2] < 0) {
       HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 24 >> 3] / 10.0;
       HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
       continue;
      }
      break;
     };
    }
   }
   if (HEAP32[$3 + 44 >> 2]) {
    HEAP32[HEAP32[$3 + 44 >> 2] >> 2] = HEAP32[$3 + 52 >> 2]
   }
   block8 : {
    if (HEAP32[$3 + 36 >> 2] != HEAP32[$3 + 52 >> 2]) {
     if (HEAPU8[HEAP32[$3 + 36 >> 2]] != 46 | HEAP32[$3 + 52 >> 2] != (HEAP32[$3 + 36 >> 2] + 1 | 0)) {
      break block8
     }
    }
    HEAPF64[$3 + 56 >> 3] = NaN;
    break block2;
   }
   if (HEAP8[$3 + 43 | 0] & 1) {
    HEAPF64[$3 + 56 >> 3] = -HEAPF64[$3 + 24 >> 3];
    break block2;
   }
   HEAPF64[$3 + 56 >> 3] = HEAPF64[$3 + 24 >> 3];
  }
  __stack_pointer = $3 - -64 | 0;
  return HEAPF64[$3 + 56 >> 3];
 }
 
 function stringToFloat($0) {
  var $1 = 0, $2 = 0.0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $2 = stringToFloatWithRadix(HEAP32[$1 + 12 >> 2], 0, 0);
  __stack_pointer = $1 + 16 | 0;
  return $2;
 }
 
 function itoch($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (HEAP32[$1 + 8 >> 2] < 10) {
    HEAP8[$1 + 15 | 0] = HEAP32[$1 + 8 >> 2] + 48;
    break block;
   }
   HEAP8[$1 + 15 | 0] = HEAP32[$1 + 8 >> 2] + 87;
  }
  return HEAP8[$1 + 15 | 0] << 24 >> 24;
 }
 
 function ftoa_bounded_extra($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 96 | 0;
  __stack_pointer = $5;
  HEAPF64[$5 + 88 >> 3] = $0;
  HEAP32[$5 + 84 >> 2] = $1;
  HEAP32[$5 + 80 >> 2] = $2;
  HEAP32[$5 + 76 >> 2] = $3;
  HEAP32[$5 + 72 >> 2] = $4;
  HEAPF64[$5 + 64 >> 3] = 1e-07;
  $2 = __DOUBLE_BITS_445(HEAPF64[$5 + 88 >> 3]);
  $3 = $2;
  $1 = i64toi32_i32$HIGH_BITS;
  $2 = $1 & 2147483647;
  $1 = $3;
  block1 : {
   if (!(!$1 & ($2 | 0) == 2146435072 | $2 >>> 0 < 2146435072)) {
    strcpy(HEAP32[$5 + 84 >> 2], 140928);
    break block1;
   }
   $1 = __DOUBLE_BITS_445(HEAPF64[$5 + 88 >> 3]);
   $3 = $1;
   $2 = i64toi32_i32$HIGH_BITS;
   $1 = $2 & 2147483647;
   block3 : {
    if (($1 | 0) == 2146435072 | $1 >>> 0 > 2146435072) {
     if (HEAPF64[$5 + 88 >> 3] < 0.0) {
      strcpy(HEAP32[$5 + 84 >> 2], 123617);
      break block3;
     }
     strcpy(HEAP32[$5 + 84 >> 2], 123618);
     break block3;
    }
    if (HEAPF64[$5 + 88 >> 3] < 0.0) {
     $1 = HEAP32[$5 + 80 >> 2] - 1 | 0;
     HEAP32[$5 + 80 >> 2] = $1;
     if (!$1) {
      HEAP8[HEAP32[$5 + 84 >> 2]] = 0;
      break block1;
     }
     $1 = HEAP32[$5 + 84 >> 2];
     HEAP32[$5 + 84 >> 2] = $1 + 1;
     HEAP8[$1 | 0] = 45;
     HEAPF64[$5 + 88 >> 3] = -HEAPF64[$5 + 88 >> 3];
    }
    HEAP32[$5 + 60 >> 2] = 0;
    if (!(!(HEAPF64[$5 + 88 >> 3] > 0.0) | HEAP32[$5 + 76 >> 2] != 10 | HEAP32[$5 + 72 >> 2] >= 0)) {
     block5 : {
      if (HEAPF64[$5 + 88 >> 3] >= 1.0e21) {
       while (1) {
        if (HEAPF64[$5 + 88 >> 3] > 1.0e5) {
         HEAPF64[$5 + 88 >> 3] = HEAPF64[$5 + 88 >> 3] / 1.0e5;
         HEAP32[$5 + 60 >> 2] = HEAP32[$5 + 60 >> 2] + 5;
         continue;
        }
        break;
       };
       while (1) {
        if (HEAPF64[$5 + 88 >> 3] > 10.0) {
         HEAPF64[$5 + 88 >> 3] = HEAPF64[$5 + 88 >> 3] / 10.0;
         HEAP32[$5 + 60 >> 2] = HEAP32[$5 + 60 >> 2] + 1;
         continue;
        }
        break;
       };
       break block5;
      }
      if (HEAPF64[$5 + 88 >> 3] < 1.0e-06) {
       while (1) {
        if (HEAPF64[$5 + 88 >> 3] < 1.0e-05) {
         HEAPF64[$5 + 88 >> 3] = HEAPF64[$5 + 88 >> 3] * 1.0e5;
         HEAP32[$5 + 60 >> 2] = HEAP32[$5 + 60 >> 2] - 5;
         continue;
        }
        break;
       };
       while (1) {
        if (HEAPF64[$5 + 88 >> 3] < 1.0) {
         HEAPF64[$5 + 88 >> 3] = HEAPF64[$5 + 88 >> 3] * 10.0;
         HEAP32[$5 + 60 >> 2] = HEAP32[$5 + 60 >> 2] - 1;
         continue;
        }
        break;
       };
      }
     }
    }
    $0 = HEAPF64[$5 + 88 >> 3] + 1.0e-07;
    if (Math_abs($0) < 2147483647.0) {
     $1 = ~~$0
    } else {
     $1 = -2147483648
    }
    $0 = HEAPF64[$5 + 88 >> 3];
    if (Math_abs($0) < 2147483647.0) {
     $2 = ~~$0
    } else {
     $2 = -2147483648
    }
    if (($1 | 0) == ($2 + 1 | 0)) {
     $0 = HEAPF64[$5 + 88 >> 3];
     if (Math_abs($0) < 2147483647.0) {
      $1 = ~~$0
     } else {
      $1 = -2147483648
     }
     HEAPF64[$5 + 88 >> 3] = $1 + 1 | 0;
    }
    HEAPF64[$5 + 48 >> 3] = 1;
    while (1) {
     if (HEAPF64[$5 + 88 >> 3] >= HEAPF64[$5 + 48 >> 3] * +HEAP32[$5 + 76 >> 2]) {
      HEAPF64[$5 + 48 >> 3] = HEAPF64[$5 + 48 >> 3] * +HEAP32[$5 + 76 >> 2];
      continue;
     }
     break;
    };
    while (1) {
     if (HEAPF64[$5 + 48 >> 3] >= 1.0) {
      $0 = HEAPF64[$5 + 88 >> 3] / HEAPF64[$5 + 48 >> 3];
      if (Math_abs($0) < 2147483647.0) {
       $1 = ~~$0
      } else {
       $1 = -2147483648
      }
      HEAP32[$5 + 44 >> 2] = $1;
      HEAPF64[$5 + 88 >> 3] = -+HEAP32[$5 + 44 >> 2] * HEAPF64[$5 + 48 >> 3] + HEAPF64[$5 + 88 >> 3];
      $1 = HEAP32[$5 + 80 >> 2] - 1 | 0;
      HEAP32[$5 + 80 >> 2] = $1;
      if ($1) {
       $2 = itoch(HEAP32[$5 + 44 >> 2]);
       $1 = HEAP32[$5 + 84 >> 2];
       HEAP32[$5 + 84 >> 2] = $1 + 1;
       HEAP8[$1 | 0] = $2;
       HEAPF64[$5 + 48 >> 3] = HEAPF64[$5 + 48 >> 3] / +HEAP32[$5 + 76 >> 2];
       continue;
      } else {
       HEAP8[HEAP32[$5 + 84 >> 2]] = 0;
       break block1;
      }
     }
     break;
    };
    if (!(!(HEAP32[$5 + 72 >> 2] < 0 & HEAPF64[$5 + 88 >> 3] > 0.0) & HEAP32[$5 + 72 >> 2] <= 0)) {
     HEAP8[$5 + 43 | 0] = 0;
     HEAPF64[$5 + 88 >> 3] = HEAPF64[$5 + 88 >> 3] * +HEAP32[$5 + 76 >> 2];
     while (1) {
      block9 : {
       if (!(HEAP32[$5 + 72 >> 2] <= -12 | HEAP32[$5 + 72 >> 2] >= 0)) {
        $1 = 1;
        if (HEAPF64[$5 + 88 >> 3] > 1.0e-07) {
         break block9
        }
       }
       $1 = HEAP32[$5 + 72 >> 2] > 0;
      }
      if ($1) {
       $0 = HEAPF64[$5 + 88 >> 3] + (HEAP32[$5 + 72 >> 2] == 1 ? .5 : 1.0e-08);
       if (Math_abs($0) < 2147483647.0) {
        $1 = ~~$0
       } else {
        $1 = -2147483648
       }
       HEAP32[$5 + 36 >> 2] = $1;
       HEAPF64[$5 + 88 >> 3] = (HEAPF64[$5 + 88 >> 3] - +HEAP32[$5 + 36 >> 2]) * +HEAP32[$5 + 76 >> 2];
       if (HEAP32[$5 + 36 >> 2] == HEAP32[$5 + 76 >> 2]) {
        HEAP32[$5 + 36 >> 2] = HEAP32[$5 + 76 >> 2] - 1
       }
       if (!(HEAP8[$5 + 43 | 0] & 1)) {
        HEAP8[$5 + 43 | 0] = 1;
        $1 = HEAP32[$5 + 80 >> 2] - 1 | 0;
        HEAP32[$5 + 80 >> 2] = $1;
        if (!$1) {
         HEAP8[HEAP32[$5 + 84 >> 2]] = 0;
         break block1;
        }
        $1 = HEAP32[$5 + 84 >> 2];
        HEAP32[$5 + 84 >> 2] = $1 + 1;
        HEAP8[$1 | 0] = 46;
       }
       $1 = HEAP32[$5 + 80 >> 2] - 1 | 0;
       HEAP32[$5 + 80 >> 2] = $1;
       if (!$1) {
        HEAP8[HEAP32[$5 + 84 >> 2]] = 0;
        break block1;
       }
       $2 = itoch(HEAP32[$5 + 36 >> 2]);
       $1 = HEAP32[$5 + 84 >> 2];
       HEAP32[$5 + 84 >> 2] = $1 + 1;
       HEAP8[$1 | 0] = $2;
       HEAP32[$5 + 72 >> 2] = HEAP32[$5 + 72 >> 2] - 1;
       continue;
      }
      break;
     };
    }
    if (!(!HEAP32[$5 + 60 >> 2] | HEAPU32[$5 + 80 >> 2] <= 5)) {
     $1 = HEAP32[$5 + 84 >> 2];
     HEAP32[$5 + 84 >> 2] = $1 + 1;
     HEAP8[$1 | 0] = 101;
     if (HEAP32[$5 + 60 >> 2] > 0) {
      $1 = HEAP32[$5 + 84 >> 2];
      HEAP32[$5 + 84 >> 2] = $1 + 1;
      HEAP8[$1 | 0] = 43;
     }
     itostr_433(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 84 >> 2], 10);
     break block1;
    }
    $1 = HEAP32[$5 + 84 >> 2];
    HEAP32[$5 + 84 >> 2] = $1 + 1;
    HEAP8[$1 | 0] = 0;
   }
  }
  __stack_pointer = $5 + 96 | 0;
 }
 
 function __DOUBLE_BITS_445($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAPF64[$1 + 8 >> 3] = $0;
  HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  return HEAP32[$1 >> 2];
 }
 
 function wrapAround($0, $1) {
  $0 = +$0;
  $1 = +$1;
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 32 | 0;
  HEAPF64[$2 + 16 >> 3] = $0;
  HEAPF64[$2 + 8 >> 3] = $1;
  block : {
   if (HEAPF64[$2 + 8 >> 3] < 0.0) {
    HEAPF64[$2 + 24 >> 3] = 0;
    break block;
   }
   HEAPF64[$2 + 16 >> 3] = HEAPF64[$2 + 16 >> 3] / HEAPF64[$2 + 8 >> 3];
   $0 = HEAPF64[$2 + 16 >> 3];
   $1 = HEAPF64[$2 + 16 >> 3];
   if (Math_abs($1) < 2147483647.0) {
    $3 = ~~$1
   } else {
    $3 = -2147483648
   }
   HEAPF64[$2 + 16 >> 3] = $0 - +($3 | 0);
   HEAPF64[$2 + 24 >> 3] = HEAPF64[$2 + 16 >> 3] * HEAPF64[$2 + 8 >> 3];
  }
  return +HEAPF64[$2 + 24 >> 3];
 }
 
 function cbprintf($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
  vcbprintf(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function espruino_snprintf_cb($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
  while (1) {
   if (HEAPU8[HEAP32[$2 + 12 >> 2]]) {
    if (HEAPU32[HEAP32[$2 + 4 >> 2] + 4 >> 2] < HEAPU32[HEAP32[$2 + 4 >> 2] + 8 >> 2]) {
     HEAP8[HEAP32[HEAP32[$2 + 4 >> 2] >> 2] + HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2] | 0] = HEAPU8[HEAP32[$2 + 12 >> 2]]
    }
    $0 = HEAP32[$2 + 4 >> 2];
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
    continue;
   }
   break;
  };
 }
 
 function espruino_snprintf_va($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 28 >> 2];
  HEAP32[$4 + 8 >> 2] = 0;
  HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 24 >> 2];
  vcbprintf(8, $4 + 4 | 0, HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
  block : {
   if (HEAPU32[$4 + 8 >> 2] < HEAPU32[$4 + 12 >> 2]) {
    HEAP8[HEAP32[$4 + 4 >> 2] + HEAP32[$4 + 8 >> 2] | 0] = 0;
    break block;
   }
   HEAP8[HEAP32[$4 + 4 >> 2] + (HEAP32[$4 + 12 >> 2] - 1 | 0) | 0] = 0;
  }
  __stack_pointer = $4 + 32 | 0;
  return HEAP32[$4 + 8 >> 2];
 }
 
 function espruino_snprintf($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  HEAP32[$4 + 12 >> 2] = espruino_snprintf_va(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
  __stack_pointer = $4 + 32 | 0;
  return HEAP32[$4 + 12 >> 2];
 }
 
 function jsuGetFreeStack() {
  return 1e6;
 }
 
 function rand() {
  HEAP32[49999] = Math_imul(HEAP32[49999] & 65535, 36969) + (HEAP32[49999] >>> 16 | 0);
  HEAP32[49998] = Math_imul(HEAP32[49998] & 65535, 18e3) + (HEAP32[49998] >>> 16 | 0);
  return HEAP32[49998] + (HEAP32[49999] << 16) & 2147483647;
 }
 
 function srand($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[49998] = HEAP32[$1 + 12 >> 2] & 65535 | HEAP32[$1 + 12 >> 2] << 16;
  HEAP32[49999] = HEAP32[$1 + 12 >> 2] & -65536 | HEAP32[$1 + 12 >> 2] >>> 16;
 }
 
 function int_sqrt32($0) {
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  HEAP32[$1 + 28 >> 2] = $0;
  HEAP16[$1 + 26 >> 1] = 0;
  HEAP16[$1 + 24 >> 1] = 32768;
  HEAP32[$1 + 20 >> 2] = 0;
  while (1) {
   if (HEAP32[$1 + 20 >> 2] < 16) {
    HEAP16[$1 + 18 >> 1] = HEAPU16[$1 + 26 >> 1] | HEAPU16[$1 + 24 >> 1];
    HEAP32[$1 + 12 >> 2] = Math_imul(HEAPU16[$1 + 18 >> 1], HEAPU16[$1 + 18 >> 1]);
    if (HEAPU32[$1 + 28 >> 2] >= HEAPU32[$1 + 12 >> 2]) {
     HEAP16[$1 + 26 >> 1] = HEAPU16[$1 + 18 >> 1]
    }
    HEAP16[$1 + 24 >> 1] = HEAPU16[$1 + 24 >> 1] >>> 1;
    HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 20 >> 2] + 1;
    continue;
   }
   break;
  };
  return HEAPU16[$1 + 26 >> 1];
 }
 
 function reverseBytes($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 24 >> 2] >> 1;
  HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 24 >> 2] - 1;
  HEAP32[$2 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 12 >> 2] < HEAP32[$2 + 20 >> 2]) {
    HEAP8[$2 + 11 | 0] = HEAPU8[HEAP32[$2 + 28 >> 2] + HEAP32[$2 + 12 >> 2] | 0];
    HEAP8[HEAP32[$2 + 28 >> 2] + HEAP32[$2 + 12 >> 2] | 0] = HEAPU8[HEAP32[$2 + 28 >> 2] + HEAP32[$2 + 16 >> 2] | 0];
    HEAP8[HEAP32[$2 + 28 >> 2] + HEAP32[$2 + 16 >> 2] | 0] = HEAPU8[$2 + 11 | 0];
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
    HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 16 >> 2] - 1;
    continue;
   }
   break;
  };
 }
 
 function jsnCallFunction($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 28 >> 2] = $0;
  HEAP16[$5 + 26 >> 1] = $1;
  HEAP32[$5 + 20 >> 2] = $2;
  HEAP32[$5 + 16 >> 2] = $3;
  HEAP32[$5 + 12 >> 2] = $4;
  $0 = jswCallFunctionHack(HEAP32[$5 + 28 >> 2], HEAPU16[$5 + 26 >> 1], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2]);
  __stack_pointer = $5 + 32 | 0;
  return $0;
 }
 
 function jspDebuggerLoopIfCtrlC() {
  
 }
 
 function jspIsInterrupted() {
  return (HEAP32[92138] & 16) != 0;
 }
 
 function jspSetInterrupted($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP8[$1 + 15 | 0] = $0;
  block : {
   if (HEAP8[$1 + 15 | 0] & 1) {
    HEAP32[92138] = HEAP32[92138] | 16;
    break block;
   }
   HEAP32[92138] = HEAP32[92138] & -17;
  }
 }
 
 function jspSetError() {
  HEAP32[92138] = HEAP32[92138] & -2 | 64;
 }
 
 function jspHasError() {
  return (HEAP32[92138] & 112) != 0;
 }
 
 function jspeiClearScopes() {
  jsvUnLock(HEAP32[92132]);
  HEAP32[92132] = 0;
 }
 
 function jspeiAddScope($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  if (!HEAP32[92132]) {
   HEAP32[92132] = jsvNewEmptyArray()
  }
  block : {
   if (!HEAP32[92132]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   jsvArrayPush(HEAP32[92132], HEAP32[$1 + 8 >> 2]);
   HEAP8[$1 + 15 | 0] = 1;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jspeiRemoveScope() {
  block : {
   if (!HEAP32[92132]) {
    break block
   }
   if (!jsvGetArrayLength(HEAP32[92132])) {
    break block
   }
   jsvUnLock(jsvArrayPop(HEAP32[92132]));
   if (jsvGetFirstChild(HEAP32[92132]) & 65535) {
    break block
   }
   jsvUnLock(HEAP32[92132]);
   HEAP32[92132] = 0;
  }
 }
 
 function jspeiFindInScopes($0) {
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 24 >> 2] = $0;
  block : {
   if (HEAP32[92132]) {
    HEAP32[$1 + 20 >> 2] = jsvLockSafe(jsvGetLastChild(HEAP32[92132]) & 65535);
    while (1) {
     if (HEAP32[$1 + 20 >> 2]) {
      HEAP32[$1 + 16 >> 2] = jsvSkipName(HEAP32[$1 + 20 >> 2]);
      HEAP16[$1 + 14 >> 1] = jsvGetPrevSibling(HEAP32[$1 + 20 >> 2]);
      HEAP32[$1 + 8 >> 2] = jsvFindChildFromString(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 24 >> 2]);
      jsvUnLock2(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 16 >> 2]);
      if (HEAP32[$1 + 8 >> 2]) {
       HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 8 >> 2];
       break block;
      } else {
       HEAP32[$1 + 20 >> 2] = jsvLockSafe(HEAPU16[$1 + 14 >> 1]);
       continue;
      }
     }
     break;
    };
   }
   HEAP32[$1 + 28 >> 2] = jsvFindChildFromString(HEAP32[92130], HEAP32[$1 + 24 >> 2]);
  }
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 28 >> 2];
 }
 
 function jspFindPrototypeFor($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[92130], HEAP32[$1 + 8 >> 2]);
  block : {
   if (!HEAP32[$1 + 4 >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 4 >> 2], 137493);
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jspeiFindChildFromStringInParents($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 40 >> 2] = $0;
  HEAP32[$2 + 36 >> 2] = $1;
  block1 : {
   block3 : {
    if (jsvIsObject(HEAP32[$2 + 40 >> 2]) & 1) {
     HEAP32[$2 + 32 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 40 >> 2], 140424);
     if (!HEAP32[$2 + 32 >> 2]) {
      HEAP32[$2 + 32 >> 2] = jspFindPrototypeFor(125086)
     }
     block2 : {
      if (!(!HEAP32[$2 + 32 >> 2] | HEAP32[$2 + 32 >> 2] == HEAP32[$2 + 40 >> 2])) {
       HEAP32[$2 + 28 >> 2] = jsvFindChildFromString(HEAP32[$2 + 32 >> 2], HEAP32[$2 + 36 >> 2]);
       if (!HEAP32[$2 + 28 >> 2]) {
        HEAP32[$2 + 28 >> 2] = jspeiFindChildFromStringInParents(HEAP32[$2 + 32 >> 2], HEAP32[$2 + 36 >> 2])
       }
       jsvUnLock(HEAP32[$2 + 32 >> 2]);
       if (HEAP32[$2 + 28 >> 2]) {
        HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 28 >> 2];
        break block1;
       }
       break block2;
      }
      jsvUnLock(HEAP32[$2 + 32 >> 2]);
     }
     break block3;
    }
    HEAP32[$2 + 24 >> 2] = jswGetBasicObjectName(HEAP32[$2 + 40 >> 2]);
    while (1) {
     if (HEAP32[$2 + 24 >> 2]) {
      HEAP32[$2 + 20 >> 2] = jsvFindChildFromString(HEAP32[92130], HEAP32[$2 + 24 >> 2]);
      if (!HEAP32[$2 + 20 >> 2]) {
       HEAP32[$2 + 20 >> 2] = jspNewPrototype(HEAP32[$2 + 24 >> 2], 1)
      }
      if (HEAP32[$2 + 20 >> 2]) {
       HEAP32[$2 + 16 >> 2] = 0;
       HEAP32[$2 + 12 >> 2] = jsvSkipNameAndUnLock(HEAP32[$2 + 20 >> 2]);
       if (jsvHasChildren(HEAP32[$2 + 12 >> 2]) & 1) {
        HEAP32[$2 + 8 >> 2] = jspGetNamedField(HEAP32[$2 + 12 >> 2], 137493, 0);
        if (HEAP32[$2 + 8 >> 2]) {
         HEAP32[$2 + 16 >> 2] = jsvFindChildFromString(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 36 >> 2]);
         jsvUnLock(HEAP32[$2 + 8 >> 2]);
        }
       }
       jsvUnLock(HEAP32[$2 + 12 >> 2]);
       if (HEAP32[$2 + 16 >> 2]) {
        HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 16 >> 2];
        break block1;
       }
      }
      HEAP32[$2 + 24 >> 2] = jswGetBasicObjectPrototypeName(HEAP32[$2 + 24 >> 2]);
      continue;
     }
     break;
    };
   }
   HEAP32[$2 + 44 >> 2] = 0;
  }
  __stack_pointer = $2 + 48 | 0;
  return HEAP32[$2 + 44 >> 2];
 }
 
 function jspNewPrototype($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP8[$2 + 23 | 0] = $1;
  HEAP32[$2 + 16 >> 2] = jsvFindOrAddChildFromString(HEAP32[92130], HEAP32[$2 + 24 >> 2]);
  block : {
   if (!HEAP32[$2 + 16 >> 2]) {
    HEAP32[$2 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 12 >> 2] = jsvSkipName(HEAP32[$2 + 16 >> 2]);
   if (!HEAP32[$2 + 12 >> 2]) {
    HEAP32[$2 + 12 >> 2] = jspNewBuiltin(HEAP32[$2 + 24 >> 2]);
    if (!HEAP32[$2 + 12 >> 2]) {
     jsvUnLock(HEAP32[$2 + 16 >> 2]);
     HEAP32[$2 + 28 >> 2] = 0;
     break block;
    }
    jsvSetValueOfName(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2]);
   }
   HEAP32[$2 + 8 >> 2] = jsvFindOrAddChildFromString(HEAP32[$2 + 12 >> 2], 137493);
   jspEnsureIsPrototype(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
   if (HEAP8[$2 + 23 | 0] & 1) {
    $0 = HEAP32[$2 + 8 >> 2]
   } else {
    $0 = HEAP32[$2 + 12 >> 2]
   }
   jsvUnLock2($0, HEAP32[$2 + 16 >> 2]);
   if (HEAP8[$2 + 23 | 0] & 1) {
    $0 = HEAP32[$2 + 12 >> 2]
   } else {
    $0 = HEAP32[$2 + 8 >> 2]
   }
   HEAP32[$2 + 28 >> 2] = $0;
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jspGetNamedField($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP8[$3 + 19 | 0] = $2;
  HEAP32[$3 + 12 >> 2] = 0;
  if (jsvHasChildren(HEAP32[$3 + 24 >> 2]) & 1) {
   HEAP32[$3 + 12 >> 2] = jsvFindChildFromString(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2])
  }
  if (!HEAP32[$3 + 12 >> 2]) {
   HEAP8[$3 + 11 | 0] = !strcmp(HEAP32[$3 + 20 >> 2], 137493);
   if (!(HEAP8[$3 + 11 | 0] & 1)) {
    HEAP32[$3 + 12 >> 2] = jspGetNamedFieldInParents(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP8[$3 + 19 | 0] & 1)
   }
   block : {
    if (HEAP32[$3 + 12 >> 2]) {
     break block
    }
    if (!(jsvIsFunction(HEAP32[$3 + 24 >> 2]) & 1) | !(HEAP8[$3 + 11 | 0] & 1)) {
     break block
    }
    HEAP32[$3 + 4 >> 2] = jsvNewObject();
    HEAP32[$3 + 12 >> 2] = jsvAddNamedChild(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 4 >> 2], 137493);
    jsvUnLock(HEAP32[$3 + 4 >> 2]);
   }
  }
  block1 : {
   if (HEAP8[$3 + 19 | 0] & 1) {
    HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
    break block1;
   }
   HEAP32[$3 + 28 >> 2] = jsvSkipNameAndUnLock(HEAP32[$3 + 12 >> 2]);
  }
  __stack_pointer = $3 + 32 | 0;
  return HEAP32[$3 + 28 >> 2];
 }
 
 function jspNewBuiltin($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = jswFindBuiltInFunction(0, HEAP32[$1 + 8 >> 2]);
  block : {
   if (!HEAP32[$1 + 4 >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jspEnsureIsPrototype($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  if (HEAP32[$2 + 24 >> 2]) {
   HEAP32[$2 + 20 >> 2] = jsvSkipName(HEAP32[$2 + 24 >> 2]);
   block : {
    if (jsvIsObject(HEAP32[$2 + 20 >> 2]) & 1) {
     break block
    }
    if (jsvIsFunction(HEAP32[$2 + 20 >> 2]) & 1) {
     break block
    }
    if (!(jsvIsUndefined(HEAP32[$2 + 20 >> 2]) & 1)) {
     HEAP32[$2 >> 2] = HEAP32[$2 + 20 >> 2];
     jsExceptionHere(3, 125603, $2);
    }
    jsvUnLock(HEAP32[$2 + 20 >> 2]);
    HEAP32[$2 + 20 >> 2] = jsvNewObject();
    HEAP32[$2 + 16 >> 2] = jsvSkipToLastName(HEAP32[$2 + 24 >> 2]);
    jsvSetValueOfName(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 20 >> 2]);
    jsvUnLock(HEAP32[$2 + 16 >> 2]);
   }
   HEAP32[$2 + 12 >> 2] = jsvFindOrAddChildFromString(HEAP32[$2 + 20 >> 2], 127861);
   if (HEAP32[$2 + 12 >> 2]) {
    jsvSetValueOfName(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 28 >> 2])
   }
   jsvUnLock2(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 20 >> 2]);
  }
  __stack_pointer = $2 + 32 | 0;
 }
 
 function jspGetNamedFieldInParents($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 44 >> 2] = $0;
  HEAP32[$3 + 40 >> 2] = $1;
  HEAP8[$3 + 39 | 0] = $2;
  HEAP32[$3 + 32 >> 2] = jspeiFindChildFromStringInParents(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2]);
  if (!HEAP32[$3 + 32 >> 2]) {
   HEAP32[$3 + 32 >> 2] = jswFindBuiltInFunction(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2])
  }
  if (!(!HEAP32[$3 + 32 >> 2] | !(HEAP8[$3 + 39 | 0] & 1))) {
   if (jsvIsName(HEAP32[$3 + 32 >> 2]) & 1) {
    HEAP32[$3 + 28 >> 2] = jsvGetValueOfName(HEAP32[$3 + 32 >> 2]);
    jsvUnLock(HEAP32[$3 + 32 >> 2]);
    HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 28 >> 2];
   }
   HEAP32[$3 + 24 >> 2] = jsvNewNameFromString(HEAP32[$3 + 40 >> 2]);
   HEAP32[$3 + 20 >> 2] = jsvCreateNewChild(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 32 >> 2]);
   jsvUnLock2(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 32 >> 2]);
   HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 20 >> 2];
   block1 : {
    if (!HEAP32[$3 + 32 >> 2]) {
     break block1
    }
    if (!(jsvIsArray(HEAP32[$3 + 44 >> 2]) & 1)) {
     break block1
    }
    if (strcmp(HEAP32[$3 + 40 >> 2], 136130)) {
     break block1
    }
    $0 = HEAP32[$3 + 32 >> 2];
    $1 = HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8 | 64;
    HEAP8[$0 + 12 | 0] = $1;
    HEAP8[$0 + 13 | 0] = $1 >>> 8;
   }
  }
  if (!HEAP32[$3 + 32 >> 2]) {
   block3 : {
    block2 : {
     if (!(jsvIsFunction(HEAP32[$3 + 44 >> 2]) & 1)) {
      break block2
     }
     if (strcmp(HEAP32[$3 + 40 >> 2], 137493)) {
      break block2
     }
     HEAP32[$3 + 16 >> 2] = jsvNewObject();
     jsvObjectSetChild(HEAP32[$3 + 16 >> 2], 127861, HEAP32[$3 + 44 >> 2]);
     HEAP32[$3 + 32 >> 2] = jsvAddNamedChild(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 16 >> 2], 137493);
     jspEnsureIsPrototype(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 32 >> 2]);
     jsvUnLock(HEAP32[$3 + 16 >> 2]);
     break block3;
    }
    if (!strcmp(HEAP32[$3 + 40 >> 2], 140424)) {
     HEAP32[$3 + 12 >> 2] = jswGetBasicObjectName(HEAP32[$3 + 44 >> 2]);
     if (HEAP32[$3 + 12 >> 2]) {
      HEAP32[$3 + 8 >> 2] = jsvSkipNameAndUnLock(jspNewPrototype(HEAP32[$3 + 12 >> 2], 0));
      HEAP32[$3 + 4 >> 2] = jsvNewNameFromString(140424);
      if (HEAP32[$3 + 8 >> 2]) {
       HEAP32[$3 + 32 >> 2] = jsvCreateNewChild(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 4 >> 2], HEAP32[$3 + 8 >> 2])
      }
      jsvUnLock2(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
     }
    }
   }
  }
  __stack_pointer = $3 + 48 | 0;
  return HEAP32[$3 + 32 >> 2];
 }
 
 function jspeiGetScopesAsVar() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  block : {
   if (!HEAP32[92132]) {
    HEAP32[$0 + 12 >> 2] = 0;
    break block;
   }
   if ((jsvGetArrayLength(HEAP32[92132]) | 0) == 1) {
    HEAP32[$0 + 8 >> 2] = jsvGetLastArrayItem(HEAP32[92132]);
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
    break block;
   }
   HEAP32[$0 + 12 >> 2] = jsvCopy(HEAP32[92132], 1);
  }
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function jspeiLoadScopesFromVar($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[92132]);
  HEAP32[92132] = 0;
  if (HEAP32[$1 + 12 >> 2]) {
   block : {
    if (jsvIsArray(HEAP32[$1 + 12 >> 2]) & 1) {
     HEAP32[92132] = jsvCopy(HEAP32[$1 + 12 >> 2], 1);
     break block;
    }
    HEAP32[92132] = jsvNewArray($1 + 12 | 0, 1);
   }
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jspCheckStackPosition() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  block : {
   if (jsuGetFreeStack() >>> 0 < 512) {
    jsExceptionHere(1, 124032, 0);
    jspSetInterrupted(1);
    HEAP8[$0 + 15 | 0] = 0;
    break block;
   }
   HEAP8[$0 + 15 | 0] = 1;
  }
  __stack_pointer = $0 + 16 | 0;
  return HEAP8[$0 + 15 | 0] & 1;
 }
 
 function jspSetNoExecute() {
  HEAP32[92138] = HEAP32[92138] & -64;
 }
 
 function jspAppendStackTrace($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 44 >> 2] = $0;
  HEAP32[$2 + 40 >> 2] = $1;
  jsvStringIteratorNew($2 + 4 | 0, HEAP32[$2 + 44 >> 2], 0);
  jsvStringIteratorGotoEnd($2 + 4 | 0);
  jslPrintStackTrace(2, $2 + 4 | 0, HEAP32[$2 + 40 >> 2]);
  jsvStringIteratorFree_478($2 + 4 | 0);
  __stack_pointer = $2 + 48 | 0;
 }
 
 function jsvStringIteratorFree_478($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jspSetException($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = jsvFindOrAddChildFromString(HEAP32[92131], 124579);
  if (HEAP32[$1 + 8 >> 2]) {
   jsvSetValueOfName(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
   jsvUnLock(HEAP32[$1 + 8 >> 2]);
  }
  HEAP32[92138] = HEAP32[92138] | 32;
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jspGetException() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 8 >> 2] = jsvFindChildFromString(HEAP32[92131], 124579);
  block : {
   if (HEAP32[$0 + 8 >> 2]) {
    HEAP32[$0 + 4 >> 2] = jsvSkipName(HEAP32[$0 + 8 >> 2]);
    jsvRemoveChildAndUnLock(HEAP32[92131], HEAP32[$0 + 8 >> 2]);
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 4 >> 2];
    break block;
   }
   HEAP32[$0 + 12 >> 2] = 0;
  }
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function jspGetStackTrace() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 8 >> 2] = jsvFindChildFromString(HEAP32[92131], 138079);
  block : {
   if (HEAP32[$0 + 8 >> 2]) {
    HEAP32[$0 + 4 >> 2] = jsvSkipName(HEAP32[$0 + 8 >> 2]);
    jsvRemoveChildAndUnLock(HEAP32[92131], HEAP32[$0 + 8 >> 2]);
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 4 >> 2];
    break block;
   }
   HEAP32[$0 + 12 >> 2] = 0;
  }
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function jspeFunctionArguments($0) {
  var $1 = 0;
  $1 = __stack_pointer - 96 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 88 >> 2] = $0;
  block : {
   if (!(jslMatch(40) & 1)) {
    HEAP8[$1 + 95 | 0] = 0;
    break block;
   }
   while (1) {
    if (HEAPU16[HEAP32[50123] + 2 >> 1] != 41) {
     if (HEAP32[$1 + 88 >> 2]) {
      HEAP8[$1 + 16 | 0] = 255;
      strcpy($1 + 17 | 0, jslGetTokenValueAsString());
      HEAP32[$1 + 12 >> 2] = jsvAddNamedChild(HEAP32[$1 + 88 >> 2], 0, $1 + 16 | 0);
      if (!HEAP32[$1 + 12 >> 2]) {
       jspSetError();
       HEAP8[$1 + 95 | 0] = 0;
       break block;
      }
      HEAP32[$1 + 12 >> 2] = jsvMakeFunctionParameter(HEAP32[$1 + 12 >> 2]);
      jsvUnLock(HEAP32[$1 + 12 >> 2]);
     }
     if (!(jslMatch(128) & 1)) {
      HEAP8[$1 + 95 | 0] = 0;
      break block;
     }
     if (HEAPU16[HEAP32[50123] + 2 >> 1] != 41) {
      if (!(jslMatch(44) & 1)) {
       HEAP8[$1 + 95 | 0] = 0;
       break block;
      }
     }
     continue;
    }
    break;
   };
   if (!(jslMatch(41) & 1)) {
    HEAP8[$1 + 95 | 0] = 0;
    break block;
   }
   HEAP8[$1 + 95 | 0] = 1;
  }
  __stack_pointer = $1 + 96 | 0;
  return HEAP8[$1 + 95 | 0] & 1;
 }
 
 function jspeFunctionDefinitionInternal($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 112 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 104 >> 2] = $0;
  HEAP8[$2 + 103 | 0] = $1;
  HEAP8[$2 + 59 | 0] = 0;
  block1 : {
   block : {
    if (HEAP8[$2 + 103 | 0] & 1) {
     if (HEAP32[$2 + 104 >> 2]) {
      $0 = HEAP32[$2 + 104 >> 2];
      $1 = HEAP32[$2 + 104 >> 2];
      $1 = (HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & -64 | 9;
      HEAP8[$0 + 12 | 0] = $1;
      HEAP8[$0 + 13 | 0] = $1 >>> 8;
     }
     break block;
    }
    HEAP32[$2 + 52 >> 2] = HEAP32[92138];
    HEAP32[92138] = 1;
    if (!(jslMatch(123) & 1)) {
     HEAP8[$2 + 111 | 0] = 0;
     break block1;
    }
    HEAP32[92138] = HEAP32[$2 + 52 >> 2];
    if (HEAPU16[HEAP32[50123] + 2 >> 1] == 131) {
     HEAP32[$2 + 48 >> 2] = jslGetTokenValueAsVar();
     block2 : {
      if (jsvIsStringEqual(HEAP32[$2 + 48 >> 2], 138976) & 1) {
       jsWarn(135548, 0);
       break block2;
      }
      if (jsvIsStringEqual(HEAP32[$2 + 48 >> 2], 135635) & 1) {
       jslGetNextToken();
       if (HEAPU16[HEAP32[50123] + 2 >> 1] == 59) {
        jslGetNextToken()
       }
       HEAP8[$2 + 59 | 0] = 1;
      }
     }
     jsvUnLock(HEAP32[$2 + 48 >> 2]);
    }
    if (!(!HEAP32[$2 + 104 >> 2] | HEAPU16[HEAP32[50123] + 2 >> 1] != 171)) {
     $0 = HEAP32[$2 + 104 >> 2];
     $1 = HEAP32[$2 + 104 >> 2];
     $1 = (HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & -64 | 9;
     HEAP8[$0 + 12 | 0] = $1;
     HEAP8[$0 + 13 | 0] = $1 >>> 8;
     jslGetNextToken();
    }
   }
   jslSkipWhiteSpace();
   jslCharPosNew($2 + 60 | 0, HEAP32[HEAP32[50123] + 84 >> 2], HEAP32[HEAP32[50123] + 4 >> 2]);
   HEAP32[$2 + 44 >> 2] = -1;
   HEAP8[HEAP32[50123] + 81 | 0] = HEAPU16[HEAP32[50123] + 2 >> 1] == 175;
   block4 : {
    if (!(HEAP8[$2 + 103 | 0] & 1)) {
     HEAP32[$2 + 40 >> 2] = 0;
     HEAP32[$2 + 36 >> 2] = HEAP32[92138];
     HEAP32[92138] = 0;
     while (1) {
      $0 = 0;
      if (HEAP16[HEAP32[50123] + 2 >> 1] << 16 >> 16) {
       $0 = 1;
       $0 = HEAP32[$2 + 40 >> 2] ? $0 : HEAPU16[HEAP32[50123] + 2 >> 1] != 125;
      }
      if ($0 & 1) {
       if (HEAPU16[HEAP32[50123] + 2 >> 1] == 123) {
        HEAP32[$2 + 40 >> 2] = HEAP32[$2 + 40 >> 2] + 1
       }
       if (HEAPU16[HEAP32[50123] + 2 >> 1] == 125) {
        HEAP32[$2 + 40 >> 2] = HEAP32[$2 + 40 >> 2] - 1
       }
       HEAP32[$2 + 44 >> 2] = jsvStringIteratorGetIndex_484(HEAP32[50123] + 88 | 0) - 1;
       jslGetNextToken();
       continue;
      }
      break;
     };
     HEAP32[92138] = HEAP32[$2 + 36 >> 2];
     break block4;
    }
    HEAP32[$2 + 32 >> 2] = HEAP32[92138];
    HEAP32[92138] = 0;
    jsvUnLock(jspeAssignmentExpression());
    HEAP32[92138] = HEAP32[$2 + 32 >> 2];
    HEAP32[$2 + 44 >> 2] = HEAP32[HEAP32[50123] + 4 >> 2];
   }
   HEAP8[$2 + 31 | 0] = HEAP8[HEAP32[50123] + 81 | 0] & 1;
   if (!(!HEAP32[$2 + 104 >> 2] | HEAP32[$2 + 44 >> 2] <= 0)) {
    block7 : {
     block6 : {
      if (HEAP8[$2 + 59 | 0] & 1) {
       break block6
      }
      if (!(jsvIsNativeString(HEAP32[HEAP32[50123] + 84 >> 2]) & 1)) {
       break block6
      }
      HEAP32[$2 + 20 >> 2] = jsvStringIteratorGetIndex_484($2 + 60 | 0) - 1;
      $0 = HEAP32[HEAP32[50123] + 84 >> 2];
      HEAP32[$2 + 24 >> 2] = jsvNewNativeString(HEAP32[$2 + 20 >> 2] + (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) | 0, HEAP32[$2 + 44 >> 2] - HEAP32[$2 + 20 >> 2] | 0);
      break block7;
     }
     block9 : {
      block8 : {
       if (HEAP8[$2 + 59 | 0] & 1) {
        break block8
       }
       if (!(jsvIsFlashString(HEAP32[HEAP32[50123] + 84 >> 2]) & 1)) {
        break block8
       }
       HEAP32[$2 + 16 >> 2] = jsvStringIteratorGetIndex_484($2 + 60 | 0) - 1;
       $0 = HEAP32[HEAP32[50123] + 84 >> 2];
       HEAP32[$2 + 24 >> 2] = jsvNewFlashString(HEAP32[$2 + 16 >> 2] + (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) | 0, HEAP32[$2 + 44 >> 2] - HEAP32[$2 + 16 >> 2] | 0);
       break block9;
      }
      block11 : {
       if (jsfGetFlag(8) & 1 | HEAP8[$2 + 59 | 0] & 1) {
        HEAP32[$2 + 24 >> 2] = jslNewTokenisedStringFromLexer($2 + 60 | 0, HEAP32[$2 + 44 >> 2]);
        break block11;
       }
       HEAP32[$2 + 24 >> 2] = jslNewStringFromLexer($2 + 60 | 0, HEAP32[$2 + 44 >> 2]);
      }
     }
    }
    jsvAddNamedChildAndUnLock(HEAP32[$2 + 104 >> 2], HEAP32[$2 + 24 >> 2], 138400);
    HEAP32[$2 + 12 >> 2] = jspeiGetScopesAsVar();
    if (HEAP32[$2 + 12 >> 2]) {
     jsvAddNamedChildAndUnLock(HEAP32[$2 + 104 >> 2], HEAP32[$2 + 12 >> 2], 135032)
    }
   }
   jslCharPosFree($2 + 60 | 0);
   if (!(HEAP8[$2 + 103 | 0] & 1)) {
    if (!(jslMatch(125) & 1)) {
     HEAP8[$2 + 111 | 0] = 0;
     break block1;
    }
   }
   HEAP8[$2 + 111 | 0] = HEAP8[$2 + 31 | 0] & 1;
  }
  __stack_pointer = $2 + 112 | 0;
  return HEAP8[$2 + 111 | 0] & 1;
 }
 
 function jsvStringIteratorGetIndex_484($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + HEAP32[HEAP32[$1 + 12 >> 2] >> 2] | 0;
 }
 
 function jspeAssignmentExpression() {
  return __jspeAssignmentExpression(jspeConditionalExpression());
 }
 
 function jspeFunctionDefinition($0) {
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 27 | 0] = $0;
  HEAP32[$1 + 20 >> 2] = 0;
  HEAP8[$1 + 19 | 0] = (HEAP32[92138] & 63) == 1;
  if (HEAP8[$1 + 19 | 0] & 1) {
   HEAP32[$1 + 20 >> 2] = jsvNewWithFlags(7)
  }
  HEAP32[$1 + 12 >> 2] = 0;
  if (!(!(HEAP8[$1 + 27 | 0] & 1) | HEAPU16[HEAP32[50123] + 2 >> 1] != 128)) {
   if (HEAP32[$1 + 20 >> 2]) {
    HEAP32[$1 + 12 >> 2] = jslGetTokenValueAsVar()
   }
   jslGetNextToken();
  }
  block1 : {
   if (!(jspeFunctionArguments(HEAP32[$1 + 20 >> 2]) & 1)) {
    jsvUnLock2(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 20 >> 2]);
    HEAP32[$1 + 28 >> 2] = 0;
    break block1;
   }
   jspeFunctionDefinitionInternal(HEAP32[$1 + 20 >> 2], 0);
   if (!(!HEAP32[$1 + 20 >> 2] | !HEAP32[$1 + 12 >> 2])) {
    jsvObjectSetChildAndUnLock(HEAP32[$1 + 20 >> 2], 135639, HEAP32[$1 + 12 >> 2])
   }
   HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
  }
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 28 >> 2];
 }
 
 function jspeParseFunctionCallBrackets() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  block : {
   if (!(jslMatch(40) & 1)) {
    break block
   }
   while (1) {
    $1 = 0;
    $1 = HEAP32[92138] & 80 ? $1 : HEAPU16[HEAP32[50123] + 2 >> 1] != 41;
    if ($1) {
     jsvUnLock(jspeAssignmentExpression());
     if (HEAPU16[HEAP32[50123] + 2 >> 1] == 162) {
      jsvUnLock(jspeArrowFunction(0, 0))
     }
     if (HEAPU16[HEAP32[50123] + 2 >> 1] != 41) {
      if (!(jslMatch(44) & 1)) {
       break block
      }
     }
     continue;
    }
    break;
   };
   if (!(HEAP32[92138] & 80)) {
    jslMatch(41)
   }
  }
  HEAP8[$0 + 15 | 0] = 0;
  __stack_pointer = $0 + 16 | 0;
  return HEAP8[$0 + 15 | 0] & 1;
 }
 
 function jspeArrowFunction($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  jslGetNextToken();
  if ((HEAP32[92138] & 63) == 1) {
   HEAP32[$2 + 12 >> 2] = jspeAddNamedFunctionParameter(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])
  }
  HEAP8[$2 + 7 | 0] = HEAPU16[HEAP32[50123] + 2 >> 1] != 123;
  HEAP8[$2 + 6 | 0] = jspeFunctionDefinitionInternal(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 7 | 0] & 1) & 1;
  if (HEAP8[$2 + 6 | 0] & 1) {
   jsvObjectSetChild(HEAP32[$2 + 12 >> 2], 127288, HEAP32[92136])
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function jspeAddNamedFunctionParameter($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 96 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 92 >> 2] = $0;
  HEAP32[$2 + 88 >> 2] = $1;
  if (!HEAP32[$2 + 92 >> 2]) {
   HEAP32[$2 + 92 >> 2] = jsvNewWithFlags(7)
  }
  if (HEAP32[$2 + 88 >> 2]) {
   HEAP8[$2 + 16 | 0] = 255;
   jsvGetString(HEAP32[$2 + 88 >> 2], $2 + 17 | 0, 64);
   HEAP32[$2 + 12 >> 2] = jsvAddNamedChild(HEAP32[$2 + 92 >> 2], 0, $2 + 16 | 0);
   HEAP32[$2 + 12 >> 2] = jsvMakeFunctionParameter(HEAP32[$2 + 12 >> 2]);
   jsvUnLock(HEAP32[$2 + 12 >> 2]);
  }
  __stack_pointer = $2 + 96 | 0;
  return HEAP32[$2 + 92 >> 2];
 }
 
 function jspeFunctionCall($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0;
  $7 = __stack_pointer - 368 | 0;
  $6 = $7;
  __stack_pointer = $6;
  HEAP32[$6 + 360 >> 2] = $0;
  HEAP32[$6 + 356 >> 2] = $1;
  HEAP32[$6 + 352 >> 2] = $2;
  HEAP8[$6 + 351 | 0] = $3;
  HEAP32[$6 + 344 >> 2] = $4;
  HEAP32[$6 + 340 >> 2] = $5;
  block2 : {
   if (!(HEAP32[$6 + 360 >> 2] | (HEAP32[92138] & 63) != 1)) {
    block1 : {
     if (HEAP32[$6 + 356 >> 2]) {
      HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 356 >> 2];
      jsExceptionHere(1, 146628, $6 + 16 | 0);
      break block1;
     }
     HEAP32[$6 + 32 >> 2] = HEAP32[$6 + 356 >> 2];
     jsExceptionHere(1, 146651, $6 + 32 | 0);
    }
    HEAP32[$6 + 364 >> 2] = 0;
    break block2;
   }
   if ((HEAP32[92138] & 63) == 1) {
    if (!(jspCheckStackPosition() & 1)) {
     HEAP32[$6 + 364 >> 2] = 0;
     break block2;
    }
   }
   if (!(!HEAP32[$6 + 360 >> 2] | (HEAP32[92138] & 63) != 1)) {
    HEAP32[$6 + 336 >> 2] = 0;
    if (!(jsvIsFunction(HEAP32[$6 + 360 >> 2]) & 1)) {
     HEAP32[$6 >> 2] = HEAP32[$6 + 360 >> 2];
     jsExceptionHere(1, 125948, $6);
     HEAP32[$6 + 364 >> 2] = 0;
     break block2;
    }
    HEAP32[$6 + 332 >> 2] = jsvLockAgainSafe(HEAP32[$6 + 352 >> 2]);
    if (HEAP8[$6 + 351 | 0] & 1) {
     if (!(jslMatch(40) & 1)) {
      HEAP32[$6 + 364 >> 2] = 0;
      break block2;
     }
    }
    block11 : {
     if (jsvIsNativeFunction(HEAP32[$6 + 360 >> 2]) & 1) {
      HEAP32[$6 + 328 >> 2] = 0;
      HEAP32[$6 + 324 >> 2] = 0;
      jsvObjectIteratorNew($6 + 320 | 0, HEAP32[$6 + 360 >> 2]);
      HEAP32[$6 + 316 >> 2] = jsvObjectIteratorGetKey_491($6 + 320 | 0);
      while (1) {
       if (jsvIsFunctionParameter(HEAP32[$6 + 316 >> 2]) & 1) {
        if (HEAPU32[$6 + 344 >> 2] >= HEAPU32[$6 + 328 >> 2]) {
         if (HEAP32[$6 + 328 >> 2]) {
          $0 = HEAP32[$6 + 328 >> 2]
         } else {
          $0 = HEAP32[$6 + 344 >> 2]
         }
         HEAP32[$6 + 312 >> 2] = $0 << 2;
         HEAP32[$6 + 308 >> 2] = HEAP32[$6 + 312 >> 2] << 2;
         if (jsuGetFreeStack() >>> 0 < HEAP32[$6 + 308 >> 2] + 256 >>> 0) {
          jsExceptionHere(1, 126827, 0);
          jsvUnLock(HEAP32[$6 + 332 >> 2]);
          HEAP32[$6 + 364 >> 2] = 0;
          break block2;
         }
         $7 = $7 - (HEAP32[$6 + 308 >> 2] + 15 & -16) | 0;
         __stack_pointer = $7;
         HEAP32[$6 + 304 >> 2] = $7;
         $1 = HEAP32[$6 + 304 >> 2];
         $2 = HEAP32[$6 + 340 >> 2];
         $0 = HEAP32[$6 + 344 >> 2] << 2;
         if ($0) {
          wasm2js_memory_copy($1, $2, $0)
         }
         HEAP32[$6 + 340 >> 2] = HEAP32[$6 + 304 >> 2];
         HEAP32[$6 + 328 >> 2] = HEAP32[$6 + 312 >> 2];
        }
        HEAP32[$6 + 300 >> 2] = HEAP32[$6 + 344 >> 2] - 1;
        while (1) {
         if (HEAP32[$6 + 300 >> 2] >= HEAP32[$6 + 324 >> 2]) {
          HEAP32[HEAP32[$6 + 340 >> 2] + (HEAP32[$6 + 300 >> 2] + 1 << 2) >> 2] = HEAP32[HEAP32[$6 + 340 >> 2] + (HEAP32[$6 + 300 >> 2] << 2) >> 2];
          HEAP32[$6 + 300 >> 2] = HEAP32[$6 + 300 >> 2] - 1;
          continue;
         }
         break;
        };
        $0 = jsvSkipName(HEAP32[$6 + 316 >> 2]);
        HEAP32[HEAP32[$6 + 340 >> 2] + (HEAP32[$6 + 324 >> 2] << 2) >> 2] = $0;
        HEAP32[$6 + 344 >> 2] = HEAP32[$6 + 344 >> 2] + 1;
        HEAP32[$6 + 324 >> 2] = HEAP32[$6 + 324 >> 2] + 1;
        jsvUnLock(HEAP32[$6 + 316 >> 2]);
        jsvObjectIteratorNext($6 + 320 | 0);
        HEAP32[$6 + 316 >> 2] = jsvObjectIteratorGetKey_491($6 + 320 | 0);
        continue;
       }
       break;
      };
      while (1) {
       if (HEAP32[$6 + 316 >> 2]) {
        if (jsvIsStringEqual(HEAP32[$6 + 316 >> 2], 127288) & 1) {
         jsvUnLock(HEAP32[$6 + 332 >> 2]);
         HEAP32[$6 + 332 >> 2] = jsvSkipName(HEAP32[$6 + 316 >> 2]);
        } else {
         jsvUnLock(HEAP32[$6 + 316 >> 2]);
         jsvObjectIteratorNext($6 + 320 | 0);
         HEAP32[$6 + 316 >> 2] = jsvObjectIteratorGetKey_491($6 + 320 | 0);
         continue;
        }
       }
       break;
      };
      jsvUnLock(HEAP32[$6 + 316 >> 2]);
      jsvObjectIteratorFree_492($6 + 320 | 0);
      HEAP32[$6 + 296 >> 2] = HEAP32[$6 + 324 >> 2];
      if (HEAP8[$6 + 351 | 0] & 1) {
       while (1) {
        $0 = 0;
        block5 : {
         if (HEAP32[92138] & 112) {
          break block5
         }
         $0 = 0;
         if (HEAPU16[HEAP32[50123] + 2 >> 1] == 41) {
          break block5
         }
         $0 = HEAPU16[HEAP32[50123] + 2 >> 1];
        }
        if ($0) {
         if (HEAPU32[$6 + 344 >> 2] >= HEAPU32[$6 + 328 >> 2]) {
          if (HEAP32[$6 + 328 >> 2]) {
           $0 = HEAP32[$6 + 328 >> 2] << 2
          } else {
           $0 = 16
          }
          HEAP32[$6 + 292 >> 2] = $0;
          $7 = $7 - ((HEAP32[$6 + 292 >> 2] << 2) + 15 & -16) | 0;
          __stack_pointer = $7;
          HEAP32[$6 + 288 >> 2] = $7;
          $1 = HEAP32[$6 + 288 >> 2];
          $2 = HEAP32[$6 + 340 >> 2];
          $0 = HEAP32[$6 + 344 >> 2] << 2;
          if ($0) {
           wasm2js_memory_copy($1, $2, $0)
          }
          HEAP32[$6 + 340 >> 2] = HEAP32[$6 + 288 >> 2];
          HEAP32[$6 + 328 >> 2] = HEAP32[$6 + 292 >> 2];
         }
         $1 = jsvSkipNameAndUnLock(jspeAssignmentExpression());
         $2 = HEAP32[$6 + 340 >> 2];
         $0 = HEAP32[$6 + 344 >> 2];
         HEAP32[$6 + 344 >> 2] = $0 + 1;
         HEAP32[($0 << 2) + $2 >> 2] = $1;
         if (HEAPU16[HEAP32[50123] + 2 >> 1] != 41) {
          if (!(jslMatch(44) & 1)) {
           jsvUnLockMany(HEAP32[$6 + 344 >> 2], HEAP32[$6 + 340 >> 2]);
           jsvUnLock(HEAP32[$6 + 332 >> 2]);
           HEAP32[$6 + 364 >> 2] = 0;
           break block2;
          }
         }
         continue;
        }
        break;
       };
       if (!(jslMatch(41) & 1)) {
        jsvUnLockMany(HEAP32[$6 + 344 >> 2], HEAP32[$6 + 340 >> 2]);
        jsvUnLock(HEAP32[$6 + 332 >> 2]);
        HEAP32[$6 + 364 >> 2] = 0;
        break block2;
       }
       HEAP32[$6 + 296 >> 2] = HEAP32[$6 + 344 >> 2];
      }
      HEAP32[$6 + 284 >> 2] = jsvGetNativeFunctionPtr(HEAP32[$6 + 360 >> 2]);
      HEAP32[$6 + 280 >> 2] = HEAP32[92136];
      block7 : {
       if (HEAP32[$6 + 332 >> 2]) {
        HEAP32[92136] = jsvRef(HEAP32[$6 + 332 >> 2]);
        break block7;
       }
       block8 : {
        if (HEAP32[$6 + 284 >> 2] == 9) {
         if (HEAP32[92136]) {
          HEAP32[92136] = jsvRef(HEAP32[92136])
         }
         break block8;
        }
        HEAP32[92136] = jsvRef(HEAP32[92130]);
       }
      }
      block10 : {
       if (!(!HEAP32[$6 + 284 >> 2] | HEAP32[92138] & 112)) {
        $0 = HEAP32[$6 + 360 >> 2];
        HEAP32[$6 + 336 >> 2] = jsnCallFunction(HEAP32[$6 + 284 >> 2], HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8, HEAP32[$6 + 332 >> 2], HEAP32[$6 + 340 >> 2], HEAP32[$6 + 344 >> 2]);
        break block10;
       }
       HEAP32[$6 + 336 >> 2] = 0;
      }
      jsvUnLockMany(HEAP32[$6 + 296 >> 2], HEAP32[$6 + 340 >> 2]);
      if (HEAP32[92136]) {
       jsvUnRef(HEAP32[92136])
      }
      HEAP32[92136] = HEAP32[$6 + 280 >> 2];
      break block11;
     }
     HEAP32[$6 + 276 >> 2] = jsvNewWithFlags(7);
     if (!HEAP32[$6 + 276 >> 2]) {
      jspSetError();
      jsvUnLock(HEAP32[$6 + 332 >> 2]);
      HEAP32[$6 + 364 >> 2] = 0;
      break block2;
     }
     HEAP32[$6 + 272 >> 2] = 0;
     HEAP32[$6 + 268 >> 2] = 0;
     HEAP32[$6 + 264 >> 2] = 0;
     jsvObjectIteratorNew($6 + 260 | 0, HEAP32[$6 + 360 >> 2]);
     HEAP32[$6 + 256 >> 2] = jsvObjectIteratorGetKey_491($6 + 260 | 0);
     HEAP32[$6 + 252 >> 2] = jsvObjectIteratorGetValue_493($6 + 260 | 0);
     while (1) {
      $0 = 0;
      if (jsvIsFunctionParameter(HEAP32[$6 + 256 >> 2]) & 1) {
       $0 = HEAP32[$6 + 252 >> 2] != 0
      }
      if ($0) {
       jsvAddFunctionParameter(HEAP32[$6 + 276 >> 2], jsvNewFromStringVar(HEAP32[$6 + 256 >> 2], 1, 2147483647), HEAP32[$6 + 252 >> 2]);
       jsvUnLock2(HEAP32[$6 + 252 >> 2], HEAP32[$6 + 256 >> 2]);
       jsvObjectIteratorNext($6 + 260 | 0);
       HEAP32[$6 + 256 >> 2] = jsvObjectIteratorGetKey_491($6 + 260 | 0);
       HEAP32[$6 + 252 >> 2] = jsvObjectIteratorGetValue_493($6 + 260 | 0);
       continue;
      }
      break;
     };
     jsvUnLock2(HEAP32[$6 + 252 >> 2], HEAP32[$6 + 256 >> 2]);
     block14 : {
      if (HEAP8[$6 + 351 | 0] & 1) {
       HEAP32[$6 + 248 >> 2] = 0;
       while (1) {
        $0 = 0;
        $0 = HEAP32[92138] & 80 ? $0 : HEAPU16[HEAP32[50123] + 2 >> 1] != 41;
        if ($0) {
         HEAP32[$6 + 244 >> 2] = jsvObjectIteratorGetKey_491($6 + 260 | 0);
         HEAP8[$6 + 243 | 0] = jsvIsFunctionParameter(HEAP32[$6 + 244 >> 2]) & 1;
         if (!(!(HEAP8[$6 + 243 | 0] & 1) & HEAPU16[HEAP32[50123] + 2 >> 1] == 41)) {
          HEAP32[$6 + 248 >> 2] = HEAP32[$6 + 248 >> 2] + 1;
          HEAP32[$6 + 236 >> 2] = 0;
          if (HEAPU16[HEAP32[50123] + 2 >> 1] != 41) {
           HEAP32[$6 + 236 >> 2] = jspeAssignmentExpression()
          }
          HEAP32[$6 + 236 >> 2] = jsvSkipNameAndUnLock(HEAP32[$6 + 236 >> 2]);
          $1 = HEAP32[$6 + 276 >> 2];
          block13 : {
           if (HEAP8[$6 + 243 | 0] & 1) {
            $0 = jsvNewFromStringVar(HEAP32[$6 + 244 >> 2], 1, 2147483647);
            break block13;
           }
           $0 = 0;
          }
          jsvAddFunctionParameter($1, $0, HEAP32[$6 + 236 >> 2]);
          jsvUnLock(HEAP32[$6 + 236 >> 2]);
          if (HEAPU16[HEAP32[50123] + 2 >> 1] != 41) {
           if (!(jslMatch(44) & 1)) {
            HEAP32[$6 + 364 >> 2] = 0;
            break block2;
           }
          }
         }
         jsvUnLock(HEAP32[$6 + 244 >> 2]);
         if (HEAP8[$6 + 243 | 0] & 1) {
          jsvObjectIteratorNext($6 + 260 | 0)
         }
         continue;
        }
        break;
       };
       if (!(jslMatch(41) & 1)) {
        HEAP32[$6 + 364 >> 2] = 0;
        break block2;
       }
       break block14;
      }
      HEAP32[$6 + 232 >> 2] = 0;
      while (1) {
       if (HEAP32[$6 + 232 >> 2] < HEAP32[$6 + 344 >> 2]) {
        HEAP32[$6 + 228 >> 2] = jsvObjectIteratorGetKey_491($6 + 260 | 0);
        HEAP8[$6 + 227 | 0] = jsvIsFunctionParameter(HEAP32[$6 + 228 >> 2]) & 1;
        $1 = HEAP32[$6 + 276 >> 2];
        block15 : {
         if (HEAP8[$6 + 227 | 0] & 1) {
          $0 = jsvNewFromStringVar(HEAP32[$6 + 228 >> 2], 1, 2147483647);
          break block15;
         }
         $0 = 0;
        }
        jsvAddFunctionParameter($1, $0, HEAP32[HEAP32[$6 + 340 >> 2] + (HEAP32[$6 + 232 >> 2] << 2) >> 2]);
        HEAP32[$6 + 232 >> 2] = HEAP32[$6 + 232 >> 2] + 1;
        jsvUnLock(HEAP32[$6 + 228 >> 2]);
        if (HEAP8[$6 + 227 | 0] & 1) {
         jsvObjectIteratorNext($6 + 260 | 0)
        }
        continue;
       }
       break;
      };
     }
     while (1) {
      if (jsvObjectIteratorHasValue_494($6 + 260 | 0) & 1) {
       HEAP32[$6 + 220 >> 2] = jsvObjectIteratorGetKey_491($6 + 260 | 0);
       if (jsvIsString(HEAP32[$6 + 220 >> 2]) & 1) {
        block16 : {
         if (jsvIsStringEqual(HEAP32[$6 + 220 >> 2], 135032) & 1) {
          HEAP32[$6 + 272 >> 2] = jsvSkipName(HEAP32[$6 + 220 >> 2]);
          break block16;
         }
         block17 : {
          if (jsvIsStringEqual(HEAP32[$6 + 220 >> 2], 138400) & 1) {
           HEAP32[$6 + 268 >> 2] = jsvSkipName(HEAP32[$6 + 220 >> 2]);
           break block17;
          }
          block18 : {
           if (jsvIsStringEqual(HEAP32[$6 + 220 >> 2], 135639) & 1) {
            HEAP32[$6 + 264 >> 2] = jsvSkipName(HEAP32[$6 + 220 >> 2]);
            break block18;
           }
           block19 : {
            if (jsvIsStringEqual(HEAP32[$6 + 220 >> 2], 127288) & 1) {
             jsvUnLock(HEAP32[$6 + 332 >> 2]);
             HEAP32[$6 + 332 >> 2] = jsvSkipName(HEAP32[$6 + 220 >> 2]);
             break block19;
            }
            if (jsvIsFunctionParameter(HEAP32[$6 + 220 >> 2]) & 1) {
             HEAP32[$6 + 216 >> 2] = jsvSkipName(HEAP32[$6 + 220 >> 2]);
             jsvAddFunctionParameter(HEAP32[$6 + 276 >> 2], jsvNewFromStringVar(HEAP32[$6 + 220 >> 2], 1, 2147483647), HEAP32[$6 + 216 >> 2]);
             jsvUnLock(HEAP32[$6 + 216 >> 2]);
            }
           }
          }
         }
        }
       }
       jsvUnLock(HEAP32[$6 + 220 >> 2]);
       jsvObjectIteratorNext($6 + 260 | 0);
       continue;
      }
      break;
     };
     jsvObjectIteratorFree_492($6 + 260 | 0);
     if (HEAP32[$6 + 264 >> 2]) {
      HEAP32[$6 + 212 >> 2] = jsvMakeIntoVariableName(jsvNewFromStringVarComplete(HEAP32[$6 + 264 >> 2]), HEAP32[$6 + 360 >> 2]);
      jsvAddName(HEAP32[$6 + 276 >> 2], HEAP32[$6 + 212 >> 2]);
      jsvUnLock2(HEAP32[$6 + 212 >> 2], HEAP32[$6 + 264 >> 2]);
     }
     if (!(HEAP32[92138] & 112)) {
      HEAP32[$6 + 208 >> 2] = HEAP32[92132];
      HEAP32[92132] = 0;
      if (HEAP32[$6 + 272 >> 2]) {
       jspeiLoadScopesFromVar(HEAP32[$6 + 272 >> 2]);
       jsvUnLock(HEAP32[$6 + 272 >> 2]);
      }
      if (jspeiAddScope(HEAP32[$6 + 276 >> 2]) & 1) {
       HEAP32[$6 + 204 >> 2] = HEAP32[92133];
       HEAP8[$6 + 203 | 0] = HEAPU8[368540];
       HEAP32[92133] = HEAP32[$6 + 276 >> 2];
       HEAP8[368540] = 0;
       HEAP32[$6 + 196 >> 2] = HEAP32[92136];
       block20 : {
        if (HEAP32[$6 + 332 >> 2]) {
         HEAP32[92136] = jsvRef(HEAP32[$6 + 332 >> 2]);
         break block20;
        }
        HEAP32[92136] = jsvRef(HEAP32[92130]);
       }
       if (HEAP32[$6 + 268 >> 2]) {
        HEAP32[$6 + 60 >> 2] = jslSetLex($6 - -64 | 0);
        jslInit(HEAP32[$6 + 268 >> 2]);
        HEAP32[$6 + 188 >> 2] = HEAP32[$6 + 356 >> 2];
        HEAP32[$6 + 192 >> 2] = HEAP32[$6 + 60 >> 2];
        jsvUnLock(HEAP32[$6 + 268 >> 2]);
        HEAP32[$6 + 268 >> 2] = 0;
        HEAP32[$6 + 56 >> 2] = HEAP32[92138];
        HEAP32[92138] = HEAP32[92138] & 6256 | 1;
        block21 : {
         if (jsvIsFunctionReturn(HEAP32[$6 + 360 >> 2]) & 1) {
          if (HEAPU16[HEAP32[50123] + 2 >> 1] == 59 | HEAPU16[HEAP32[50123] + 2 >> 1] == 125) {
           break block21
          }
          HEAP32[$6 + 336 >> 2] = jsvSkipNameAndUnLock(jspeExpression());
          break block21;
         }
         HEAP32[$6 + 52 >> 2] = jsvAddNamedChild(HEAP32[$6 + 276 >> 2], 0, 135061);
         HEAP8[368540] = HEAPU8[368540] - 1;
         jspeBlockNoBrackets();
         HEAP8[368540] = HEAPU8[368540] + 1;
         HEAP32[$6 + 336 >> 2] = jsvSkipName(HEAP32[$6 + 52 >> 2]);
         if (HEAP32[$6 + 52 >> 2]) {
          jsvRemoveChildAndUnLock(HEAP32[$6 + 276 >> 2], HEAP32[$6 + 52 >> 2])
         }
        }
        HEAP32[$6 + 48 >> 2] = HEAP32[92138] & 112;
        HEAP32[92138] = HEAP32[92138] & -1664 | HEAP32[$6 + 56 >> 2] & 1663;
        jslKill();
        jslSetLex(HEAP32[$6 + 60 >> 2]);
        if (HEAP32[$6 + 48 >> 2]) {
         HEAP32[92138] = HEAP32[$6 + 48 >> 2] | HEAP32[92138]
        }
       }
       if (HEAP32[92136]) {
        jsvUnRef(HEAP32[92136])
       }
       HEAP32[92136] = HEAP32[$6 + 196 >> 2];
       jspeiRemoveScope();
       HEAP32[92133] = HEAP32[$6 + 204 >> 2];
       HEAP8[368540] = HEAPU8[$6 + 203 | 0];
      }
      jsvUnLock(HEAP32[92132]);
      HEAP32[92132] = HEAP32[$6 + 208 >> 2];
     }
     jsvUnLock2(HEAP32[$6 + 268 >> 2], HEAP32[$6 + 276 >> 2]);
    }
    jsvUnLock(HEAP32[$6 + 332 >> 2]);
    if (HEAP32[50123]) {
     jsvStringIteratorUpdatePtr(HEAP32[50123] + 88 | 0)
    }
    HEAP32[$6 + 364 >> 2] = HEAP32[$6 + 336 >> 2];
    break block2;
   }
   if (HEAP8[$6 + 351 | 0] & 1) {
    if (jspCheckStackPosition() & 1) {
     jspeParseFunctionCallBrackets()
    }
    HEAP32[$6 + 364 >> 2] = 0;
    break block2;
   }
   HEAP32[$6 + 364 >> 2] = 0;
  }
  __stack_pointer = $6 + 368 | 0;
  return HEAP32[$6 + 364 >> 2];
 }
 
 function jsvObjectIteratorGetKey_491($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvObjectIteratorFree_492($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsvObjectIteratorGetValue_493($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvObjectIteratorHasValue_494($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
 }
 
 function jspeExpression() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  block : {
   while (1) {
    if (((HEAP32[92138] & 80) != 0 ^ -1) & 1) {
     HEAP32[$0 + 8 >> 2] = jspeAssignmentExpression();
     if (HEAPU16[HEAP32[50123] + 2 >> 1] != 44) {
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
      break block;
     } else {
      jsvCheckReferenceError(HEAP32[$0 + 8 >> 2]);
      jsvUnLock(HEAP32[$0 + 8 >> 2]);
      jslGetNextToken();
      continue;
     }
    }
    break;
   };
   HEAP32[$0 + 12 >> 2] = 0;
  }
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function jspeBlockNoBrackets() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = jspeBlockStart();
  block1 : {
   if ((HEAP32[92138] & 63) == 1) {
    while (1) {
     $1 = 0;
     block : {
      $1 = HEAP16[HEAP32[50123] + 2 >> 1] << 16 >> 16 ? HEAPU16[HEAP32[50123] + 2 >> 1] != 125 : $1;
      if (!$1) {
       break block
      }
      HEAP32[$0 + 8 >> 2] = jspeStatement();
      jsvCheckReferenceError(HEAP32[$0 + 8 >> 2]);
      jsvUnLock(HEAP32[$0 + 8 >> 2]);
      if (HEAP32[92138] & 80) {
       break block
      }
      if ((HEAP32[92138] & 63) != 1) {
       jspeSkipBlock();
       break block;
      }
      continue;
     }
     break;
    };
    break block1;
   }
   jspeSkipBlock();
  }
  jspeBlockEnd(HEAP32[$0 + 12 >> 2]);
  __stack_pointer = $0 + 16 | 0;
 }
 
 function jspGetNamedVariable($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  block : {
   if ((HEAP32[92138] & 63) == 1) {
    $0 = jspeiFindInScopes(HEAP32[$1 + 12 >> 2]);
    break block;
   }
   $0 = 0;
  }
  HEAP32[$1 + 8 >> 2] = $0;
  if (!(HEAP32[$1 + 8 >> 2] | (HEAP32[92138] & 63) != 1)) {
   HEAP32[$1 + 8 >> 2] = jswFindBuiltInFunction(0, HEAP32[$1 + 12 >> 2]);
   block2 : {
    if (HEAP32[$1 + 8 >> 2]) {
     if (jswIsBuiltInObject(HEAP32[$1 + 12 >> 2]) & 1) {
      HEAP32[$1 + 4 >> 2] = jsvAddNamedChild(HEAP32[92130], HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
      jsvUnLock(HEAP32[$1 + 8 >> 2]);
      HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 4 >> 2];
     }
     break block2;
    }
    HEAP32[$1 + 8 >> 2] = jsvNewNameFromString(HEAP32[$1 + 12 >> 2]);
   }
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 8 >> 2];
 }
 
 function jspGetVarNamedField($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 112 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 104 >> 2] = $0;
  HEAP32[$3 + 100 >> 2] = $1;
  HEAP8[$3 + 99 | 0] = $2;
  HEAP32[$3 + 92 >> 2] = 0;
  if (jsvHasChildren(HEAP32[$3 + 104 >> 2]) & 1) {
   HEAP32[$3 + 92 >> 2] = jsvFindChildFromVar(HEAP32[$3 + 104 >> 2], HEAP32[$3 + 100 >> 2], 0)
  }
  block4 : {
   if (!HEAP32[$3 + 92 >> 2]) {
    block1 : {
     block : {
      if (!(jsvIsArrayBuffer(HEAP32[$3 + 104 >> 2]) & 1)) {
       break block
      }
      if (!(jsvIsInt(HEAP32[$3 + 100 >> 2]) & 1)) {
       break block
      }
      HEAP32[$3 + 92 >> 2] = jsvMakeIntoVariableName(jsvNewFromInteger(jsvGetInteger(HEAP32[$3 + 100 >> 2])), HEAP32[$3 + 104 >> 2]);
      if (HEAP32[$3 + 92 >> 2]) {
       $0 = HEAP32[$3 + 92 >> 2];
       $1 = HEAP32[$3 + 92 >> 2];
       $1 = (HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & -64 | 14;
       HEAP8[$0 + 12 | 0] = $1;
       HEAP8[$0 + 13 | 0] = $1 >>> 8;
      }
      break block1;
     }
     block5 : {
      block2 : {
       if (!(jsvIsString(HEAP32[$3 + 104 >> 2]) & 1)) {
        break block2
       }
       if (!(jsvIsInt(HEAP32[$3 + 100 >> 2]) & 1)) {
        break block2
       }
       HEAP32[$3 + 88 >> 2] = jsvGetInteger(HEAP32[$3 + 100 >> 2]);
       block3 : {
        if (HEAP32[$3 + 88 >> 2] < 0) {
         break block3
        }
        if (HEAP32[$3 + 88 >> 2] >= (jsvGetStringLength(HEAP32[$3 + 104 >> 2]) | 0)) {
         break block3
        }
        HEAP32[$3 + 108 >> 2] = jswrap_string_charAt_undefined(HEAP32[$3 + 104 >> 2], HEAP32[$3 + 88 >> 2]);
        break block4;
       }
       if (HEAP8[$3 + 99 | 0] & 1) {
        HEAP32[$3 + 92 >> 2] = jsvCreateNewChild(HEAP32[$3 + 104 >> 2], HEAP32[$3 + 100 >> 2], 0)
       }
       break block5;
      }
      jsvGetString(HEAP32[$3 + 100 >> 2], $3 + 16 | 0, 64);
      HEAP32[$3 + 92 >> 2] = jspGetNamedFieldInParents(HEAP32[$3 + 104 >> 2], $3 + 16 | 0, HEAP8[$3 + 99 | 0] & 1);
      block6 : {
       if (HEAP32[$3 + 92 >> 2]) {
        break block6
       }
       if (!(jsvIsFunction(HEAP32[$3 + 104 >> 2]) & 1)) {
        break block6
       }
       if (!(jsvIsStringEqual(HEAP32[$3 + 100 >> 2], 137493) & 1)) {
        break block6
       }
       HEAP32[$3 + 12 >> 2] = jsvNewObject();
       HEAP32[$3 + 92 >> 2] = jsvAddNamedChild(HEAP32[$3 + 104 >> 2], HEAP32[$3 + 12 >> 2], 137493);
       jsvUnLock(HEAP32[$3 + 12 >> 2]);
      }
     }
    }
   }
   if (HEAP8[$3 + 99 | 0] & 1) {
    HEAP32[$3 + 108 >> 2] = HEAP32[$3 + 92 >> 2];
    break block4;
   }
   HEAP32[$3 + 108 >> 2] = jsvSkipNameAndUnLock(HEAP32[$3 + 92 >> 2]);
  }
  __stack_pointer = $3 + 112 | 0;
  return HEAP32[$3 + 108 >> 2];
 }
 
 function jspeFactorMember($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 80 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 72 >> 2] = $0;
  HEAP32[$2 + 68 >> 2] = $1;
  HEAP32[$2 + 64 >> 2] = 0;
  block2 : {
   while (1) {
    $0 = 1;
    $0 = HEAPU16[HEAP32[50123] + 2 >> 1] != 46 ? HEAPU16[HEAP32[50123] + 2 >> 1] == 91 : $0;
    if ($0) {
     if (HEAPU16[HEAP32[50123] + 2 >> 1] == 46) {
      jslGetNextToken();
      block1 : {
       if (jslIsIDOrReservedWord() & 1) {
        if ((HEAP32[92138] & 63) == 1) {
         HEAP32[$2 + 60 >> 2] = jslGetTokenValueAsString();
         HEAP32[$2 + 56 >> 2] = jsvSkipNameWithParent(HEAP32[$2 + 72 >> 2], 1, HEAP32[$2 + 64 >> 2]);
         HEAP32[$2 + 52 >> 2] = 0;
         if (HEAP32[$2 + 56 >> 2]) {
          HEAP32[$2 + 52 >> 2] = jspGetNamedField(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 60 >> 2], 1)
         }
         if (!HEAP32[$2 + 52 >> 2]) {
          block : {
           if (!(jsvIsNullish(HEAP32[$2 + 56 >> 2]) & 1)) {
            HEAP32[$2 + 48 >> 2] = jsvNewNameFromString(jslGetTokenValueAsString());
            HEAP32[$2 + 52 >> 2] = jsvCreateNewChild(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 48 >> 2], 0);
            jsvUnLock(HEAP32[$2 + 48 >> 2]);
            break block;
           }
           $0 = HEAP32[$2 + 60 >> 2];
           HEAP32[$2 + 4 >> 2] = jsvIsUndefined(HEAP32[$2 + 56 >> 2]) & 1 ? 138928 : 135673;
           HEAP32[$2 >> 2] = $0;
           jsExceptionHere(1, 127681, $2);
          }
         }
         jsvUnLock(HEAP32[$2 + 64 >> 2]);
         HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 56 >> 2];
         jsvUnLock(HEAP32[$2 + 72 >> 2]);
         HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 52 >> 2];
        }
        jslGetNextToken();
        break block1;
       }
       if (!(jslMatch(128) & 1)) {
        HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 72 >> 2];
        break block2;
       }
      }
      continue;
     }
     if (HEAPU16[HEAP32[50123] + 2 >> 1] == 91) {
      jslGetNextToken();
      if (!(jspCheckStackPosition() & 1)) {
       HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 64 >> 2];
       break block2;
      }
      HEAP32[$2 + 44 >> 2] = jsvSkipNameAndUnLock(jspeAssignmentExpression());
      if (!(jslMatch(93) & 1)) {
       jsvUnLock2(HEAP32[$2 + 64 >> 2], HEAP32[$2 + 44 >> 2]);
       HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 72 >> 2];
       break block2;
      }
      if ((HEAP32[92138] & 63) == 1) {
       HEAP32[$2 + 44 >> 2] = jsvAsArrayIndexAndUnLock(HEAP32[$2 + 44 >> 2]);
       HEAP32[$2 + 40 >> 2] = jsvSkipNameWithParent(HEAP32[$2 + 72 >> 2], 1, HEAP32[$2 + 64 >> 2]);
       HEAP32[$2 + 36 >> 2] = 0;
       if (HEAP32[$2 + 40 >> 2]) {
        HEAP32[$2 + 36 >> 2] = jspGetVarNamedField(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 44 >> 2], 1)
       }
       if (!HEAP32[$2 + 36 >> 2]) {
        block3 : {
         if (jsvHasChildren(HEAP32[$2 + 40 >> 2]) & 1) {
          HEAP32[$2 + 36 >> 2] = jsvCreateNewChild(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 44 >> 2], 0);
          break block3;
         }
         $0 = HEAP32[$2 + 44 >> 2];
         HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 40 >> 2];
         HEAP32[$2 + 16 >> 2] = $0;
         jsExceptionHere(1, 126377, $2 + 16 | 0);
        }
       }
       jsvUnLock(HEAP32[$2 + 64 >> 2]);
       HEAP32[$2 + 64 >> 2] = jsvLockAgainSafe(HEAP32[$2 + 40 >> 2]);
       jsvUnLock(HEAP32[$2 + 72 >> 2]);
       HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 36 >> 2];
       jsvUnLock(HEAP32[$2 + 40 >> 2]);
      }
      jsvUnLock(HEAP32[$2 + 44 >> 2]);
     }
     continue;
    }
    break;
   };
   block4 : {
    if (HEAP32[$2 + 68 >> 2]) {
     HEAP32[HEAP32[$2 + 68 >> 2] >> 2] = HEAP32[$2 + 64 >> 2];
     break block4;
    }
    jsvUnLock(HEAP32[$2 + 64 >> 2]);
   }
   HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 72 >> 2];
  }
  __stack_pointer = $2 + 80 | 0;
  return HEAP32[$2 + 76 >> 2];
 }
 
 function jspeConstruct($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP8[$3 + 19 | 0] = $2;
  block : {
   if (!(jsvIsFunction(HEAP32[$3 + 24 >> 2]) & 1)) {
    HEAP32[$3 >> 2] = HEAP32[$3 + 24 >> 2];
    jsExceptionHere(1, 126333, $3);
    HEAP32[$3 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$3 + 12 >> 2] = jsvNewObject();
   if (!HEAP32[$3 + 12 >> 2]) {
    HEAP32[$3 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$3 + 8 >> 2] = jsvFindOrAddChildFromString(HEAP32[$3 + 24 >> 2], 137493);
   jspEnsureIsPrototype(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 8 >> 2]);
   jsvAddNamedChildAndUnLock(HEAP32[$3 + 12 >> 2], jsvSkipNameAndUnLock(HEAP32[$3 + 8 >> 2]), 140424);
   HEAP32[$3 + 4 >> 2] = jspeFunctionCall(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 12 >> 2], HEAP8[$3 + 19 | 0] & 1, 0, 0);
   block1 : {
    if (HEAP32[$3 + 4 >> 2]) {
     jsvUnLock(HEAP32[$3 + 12 >> 2]);
     HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 4 >> 2];
     break block1;
    }
    jsvUnLock(HEAP32[$3 + 4 >> 2]);
   }
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
  }
  __stack_pointer = $3 + 32 | 0;
  return HEAP32[$3 + 28 >> 2];
 }
 
 function jspeFactorFunctionCall() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 80 | 0;
  __stack_pointer = $0;
  HEAP8[$0 + 75 | 0] = 0;
  block : {
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 184) {
    jslGetNextToken();
    HEAP8[$0 + 75 | 0] = 1;
    if (HEAPU16[HEAP32[50123] + 2 >> 1] == 184) {
     jsExceptionHere(1, 138520, 0);
     jspSetError();
     HEAP32[$0 + 76 >> 2] = 0;
     break block;
    }
   }
   HEAP32[$0 + 68 >> 2] = 0;
   HEAP32[$0 + 64 >> 2] = 0;
   HEAP8[$0 + 63 | 0] = 0;
   block9 : {
    if (HEAPU16[HEAP32[50123] + 2 >> 1] == 196) {
     jslGetNextToken();
     block5 : {
      if (jsvIsObject(HEAP32[92136]) & 1) {
       block2 : {
        if (!(!HEAP32[92137] | HEAPU16[HEAP32[50123] + 2 >> 1] != 40)) {
         HEAP32[$0 + 56 >> 2] = jsvObjectGetChildIfExists(HEAP32[92137], 137493);
         break block2;
        }
        HEAP32[$0 + 56 >> 2] = jsvObjectGetChildIfExists(HEAP32[92136], 140424);
       }
       block3 : {
        if (jsvIsObject(HEAP32[$0 + 56 >> 2]) & 1) {
         $1 = jsvObjectGetChildIfExists(HEAP32[$0 + 56 >> 2], 140424);
         break block3;
        }
        $1 = 0;
       }
       HEAP32[$0 + 52 >> 2] = $1;
       jsvUnLock(HEAP32[$0 + 56 >> 2]);
       if (!HEAP32[$0 + 52 >> 2]) {
        jsExceptionHere(2, 127026, 0);
        HEAP32[$0 + 76 >> 2] = 0;
        break block;
       }
       block4 : {
        if (HEAPU16[HEAP32[50123] + 2 >> 1] == 40) {
         HEAP32[$0 + 48 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 52 >> 2], 127861);
         jsvUnLock(HEAP32[$0 + 52 >> 2]);
         HEAP32[92137] = HEAP32[$0 + 48 >> 2];
         HEAP8[$0 + 63 | 0] = 1;
         HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 48 >> 2];
         break block4;
        }
        HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 52 >> 2];
       }
       break block5;
      }
      block7 : {
       if (jsvIsFunction(HEAP32[92136]) & 1) {
        HEAP32[$0 + 44 >> 2] = jsvObjectGetChildIfExists(HEAP32[92136], 137493);
        block6 : {
         if (jsvIsObject(HEAP32[$0 + 44 >> 2]) & 1) {
          $1 = jsvObjectGetChildIfExists(HEAP32[$0 + 44 >> 2], 140424);
          break block6;
         }
         $1 = 0;
        }
        HEAP32[$0 + 40 >> 2] = $1;
        jsvUnLock(HEAP32[$0 + 44 >> 2]);
        if (!HEAP32[$0 + 40 >> 2]) {
         jsExceptionHere(2, 127026, 0);
         HEAP32[$0 + 76 >> 2] = 0;
         break block;
        }
        HEAP32[$0 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 40 >> 2], 127861);
        jsvUnLock(HEAP32[$0 + 40 >> 2]);
        HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 36 >> 2];
        break block7;
       }
       jsExceptionHere(2, 127026, 0);
       HEAP32[$0 + 76 >> 2] = 0;
       break block;
      }
     }
     HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 64 >> 2];
     HEAP32[$0 + 64 >> 2] = jspeFactorMember(HEAP32[$0 + 64 >> 2], $0 + 68 | 0);
     if (!(HEAP32[$0 + 68 >> 2] != HEAP32[$0 + 32 >> 2] ? HEAP32[$0 + 68 >> 2] : 0)) {
      jsvUnLock(HEAP32[$0 + 68 >> 2]);
      HEAP32[$0 + 68 >> 2] = jsvLockAgain(HEAP32[92136]);
     }
     break block9;
    }
    HEAP32[$0 + 64 >> 2] = jspeFactorMember(jspeFactor(), $0 + 68 | 0);
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 133) {
    jsExceptionHere(2, 138658, 0);
    jsvUnLock2(HEAP32[$0 + 64 >> 2], HEAP32[$0 + 68 >> 2]);
    HEAP32[$0 + 76 >> 2] = 0;
    break block;
   }
   while (1) {
    block10 : {
     if (HEAPU16[HEAP32[50123] + 2 >> 1] != 40) {
      $1 = 0;
      if (!(HEAP8[$0 + 75 | 0] & 1)) {
       break block10
      }
      $1 = 0;
      if ((HEAP32[92138] & 63) != 1) {
       break block10
      }
     }
     $1 = jspIsInterrupted() ^ -1;
    }
    if ($1 & 1) {
     HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 64 >> 2];
     HEAP32[$0 + 24 >> 2] = jsvSkipName(HEAP32[$0 + 28 >> 2]);
     block12 : {
      if (!(!(HEAP8[$0 + 75 | 0] & 1) | (HEAP32[92138] & 63) != 1)) {
       HEAP8[$0 + 23 | 0] = HEAPU16[HEAP32[50123] + 2 >> 1] == 40;
       HEAP32[$0 + 64 >> 2] = jspeConstruct(HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2], HEAP8[$0 + 23 | 0] & 1);
       HEAP8[$0 + 75 | 0] = 0;
       break block12;
      }
      HEAP32[$0 + 64 >> 2] = jspeFunctionCall(HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2], HEAP32[$0 + 68 >> 2], 1, 0, 0);
     }
     jsvUnLock3(HEAP32[$0 + 28 >> 2], HEAP32[$0 + 24 >> 2], HEAP32[$0 + 68 >> 2]);
     HEAP32[$0 + 68 >> 2] = 0;
     HEAP32[$0 + 64 >> 2] = jspeFactorMember(HEAP32[$0 + 64 >> 2], $0 + 68 | 0);
     continue;
    }
    break;
   };
   if (HEAP8[$0 + 63 | 0] & 1) {
    HEAP32[92137] = 0
   }
   block13 : {
    if (!HEAP32[$0 + 68 >> 2]) {
     break block13
    }
    if (!(jsvIsBasicName(HEAP32[$0 + 64 >> 2]) & 1)) {
     break block13
    }
    if (jsvIsNewChild(HEAP32[$0 + 64 >> 2]) & 1) {
     break block13
    }
    HEAP32[$0 + 16 >> 2] = jsvLockSafe(jsvGetFirstChild(HEAP32[$0 + 64 >> 2]) & 65535);
    if (jsvIsGetterOrSetter(HEAP32[$0 + 16 >> 2]) & 1) {
     HEAP32[$0 + 12 >> 2] = jsvCopyNameOnly(HEAP32[$0 + 64 >> 2], 0, 1);
     HEAP32[$0 + 8 >> 2] = jsvCreateNewChild(HEAP32[$0 + 68 >> 2], HEAP32[$0 + 12 >> 2], HEAP32[$0 + 16 >> 2]);
     jsvUnLock2(HEAP32[$0 + 12 >> 2], HEAP32[$0 + 64 >> 2]);
     HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 8 >> 2];
    }
    jsvUnLock(HEAP32[$0 + 16 >> 2]);
   }
   jsvUnLock(HEAP32[$0 + 68 >> 2]);
   HEAP32[$0 + 76 >> 2] = HEAP32[$0 + 64 >> 2];
  }
  __stack_pointer = $0 + 80 | 0;
  return HEAP32[$0 + 76 >> 2];
 }
 
 function jspeFactor() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 96 | 0;
  __stack_pointer = $0;
  block2 : {
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 128) {
    HEAP32[$0 + 88 >> 2] = jspGetNamedVariable(jslGetTokenValueAsString());
    jslGetNextToken();
    block : {
     if (HEAPU16[HEAP32[50123] + 2 >> 1] == 133) {
      jsExceptionHere(2, 138590, 0);
      break block;
     }
     block1 : {
      if (HEAPU16[HEAP32[50123] + 2 >> 1] != 162) {
       break block1
      }
      if (!(jsvIsName(HEAP32[$0 + 88 >> 2]) & 1)) {
       if (HEAP32[$0 + 88 >> 2] | (HEAP32[92138] & 63) == 1) {
        break block1
       }
      }
      HEAP32[$0 + 84 >> 2] = jspeArrowFunction(0, HEAP32[$0 + 88 >> 2]);
      jsvUnLock(HEAP32[$0 + 88 >> 2]);
      HEAP32[$0 + 88 >> 2] = HEAP32[$0 + 84 >> 2];
     }
    }
    HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 88 >> 2];
    break block2;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 129) {
    HEAP32[$0 + 80 >> 2] = 0;
    if ((HEAP32[92138] & 63) == 1) {
     HEAP32[$0 + 80 >> 2] = jslGetTokenValueAsVar()
    }
    jslGetNextToken();
    HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 80 >> 2];
    break block2;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 130) {
    HEAP32[$0 + 76 >> 2] = 0;
    if ((HEAP32[92138] & 63) == 1) {
     HEAP32[$0 + 76 >> 2] = jsvNewFromFloat(stringToFloat(jslGetTokenValueAsString()))
    }
    jslGetNextToken();
    HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 76 >> 2];
    break block2;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 40) {
    jslGetNextToken();
    if (!(jspCheckStackPosition() & 1)) {
     HEAP32[$0 + 92 >> 2] = 0;
     break block2;
    }
    HEAP32[$0 + 92 >> 2] = jspeExpressionOrArrowFunction();
    break block2;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 180) {
    jslGetNextToken();
    block3 : {
     if ((HEAP32[92138] & 63) == 1) {
      $1 = jsvNewFromBool(1);
      break block3;
     }
     $1 = 0;
    }
    HEAP32[$0 + 92 >> 2] = $1;
    break block2;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 181) {
    jslGetNextToken();
    block4 : {
     if ((HEAP32[92138] & 63) == 1) {
      $1 = jsvNewFromBool(0);
      break block4;
     }
     $1 = 0;
    }
    HEAP32[$0 + 92 >> 2] = $1;
    break block2;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 182) {
    jslGetNextToken();
    block5 : {
     if ((HEAP32[92138] & 63) == 1) {
      $1 = jsvNewWithFlags(2);
      break block5;
     }
     $1 = 0;
    }
    HEAP32[$0 + 92 >> 2] = $1;
    break block2;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 183) {
    jslGetNextToken();
    HEAP32[$0 + 92 >> 2] = 0;
    break block2;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 131) {
    HEAP32[$0 + 72 >> 2] = 0;
    if ((HEAP32[92138] & 63) == 1) {
     HEAP32[$0 + 72 >> 2] = jslGetTokenValueAsVar()
    }
    jslGetNextToken();
    HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 72 >> 2];
    break block2;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 133) {
    HEAP32[$0 + 92 >> 2] = jspeTemplateLiteral();
    break block2;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 135) {
    HEAP32[$0 + 68 >> 2] = 0;
    if ((HEAP32[92138] & 63) == 1) {
     HEAP32[$0 + 64 >> 2] = jslGetTokenValueAsVar();
     HEAP32[$0 + 60 >> 2] = 0;
     HEAP32[$0 + 56 >> 2] = 0;
     jsvStringIteratorNew($0 + 20 | 0, HEAP32[$0 + 64 >> 2], 0);
     while (1) {
      if (jsvStringIteratorHasChar_511($0 + 20 | 0) & 1) {
       HEAP32[$0 + 56 >> 2] = HEAP32[$0 + 56 >> 2] + 1;
       if ((jsvStringIteratorGetCharAndNext($0 + 20 | 0) & 255) == 47) {
        HEAP32[$0 + 60 >> 2] = HEAP32[$0 + 56 >> 2]
       }
       continue;
      }
      break;
     };
     jsvStringIteratorFree_478($0 + 20 | 0);
     HEAP32[$0 + 16 >> 2] = 0;
     if (HEAPU32[$0 + 60 >> 2] < HEAPU32[$0 + 56 >> 2]) {
      HEAP32[$0 + 16 >> 2] = jsvNewFromStringVar(HEAP32[$0 + 64 >> 2], HEAP32[$0 + 60 >> 2], 2147483647)
     }
     HEAP32[$0 + 12 >> 2] = jsvNewFromStringVar(HEAP32[$0 + 64 >> 2], 1, HEAP32[$0 + 60 >> 2] - 2 | 0);
     HEAP32[$0 + 68 >> 2] = jswrap_regexp_constructor(HEAP32[$0 + 12 >> 2], HEAP32[$0 + 16 >> 2]);
     jsvUnLock3(HEAP32[$0 + 64 >> 2], HEAP32[$0 + 16 >> 2], HEAP32[$0 + 12 >> 2]);
    }
    jslGetNextToken();
    HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 68 >> 2];
    break block2;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 123) {
    if (!(jspCheckStackPosition() & 1)) {
     HEAP32[$0 + 92 >> 2] = 0;
     break block2;
    }
    HEAP32[$0 + 92 >> 2] = jspeFactorObject();
    break block2;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 91) {
    if (!(jspCheckStackPosition() & 1)) {
     HEAP32[$0 + 92 >> 2] = 0;
     break block2;
    }
    HEAP32[$0 + 92 >> 2] = jspeFactorArray();
    break block2;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 170) {
    if (!(jspCheckStackPosition() & 1)) {
     HEAP32[$0 + 92 >> 2] = 0;
     break block2;
    }
    jslGetNextToken();
    HEAP32[$0 + 92 >> 2] = jspeFunctionDefinition(1);
    break block2;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 194) {
    if (!(jspCheckStackPosition() & 1)) {
     HEAP32[$0 + 92 >> 2] = 0;
     break block2;
    }
    jslGetNextToken();
    HEAP32[$0 + 92 >> 2] = jspeClassDefinition(1);
    break block2;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 175) {
    jslGetNextToken();
    if (HEAP32[92136]) {
     $1 = HEAP32[92136]
    } else {
     $1 = HEAP32[92130]
    }
    HEAP32[$0 + 92 >> 2] = jsvLockAgain($1);
    break block2;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 190) {
    if (!(jspCheckStackPosition() & 1)) {
     HEAP32[$0 + 92 >> 2] = 0;
     break block2;
    }
    HEAP32[$0 + 92 >> 2] = jspeFactorDelete();
    break block2;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 191) {
    if (!(jspCheckStackPosition() & 1)) {
     HEAP32[$0 + 92 >> 2] = 0;
     break block2;
    }
    HEAP32[$0 + 92 >> 2] = jspeFactorTypeOf();
    break block2;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 192) {
    if (!(jspCheckStackPosition() & 1)) {
     HEAP32[$0 + 92 >> 2] = 0;
     break block2;
    }
    jslGetNextToken();
    jsvUnLock(jspeUnaryExpression());
    HEAP32[$0 + 92 >> 2] = 0;
    break block2;
   }
   if (!(jslMatch(0) & 1)) {
    HEAP32[$0 + 92 >> 2] = 0;
    break block2;
   }
   jsExceptionHere(2, 124379, 0);
   HEAP32[$0 + 92 >> 2] = 0;
  }
  __stack_pointer = $0 + 96 | 0;
  return HEAP32[$0 + 92 >> 2];
 }
 
 function jspeFactorObject() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 112 | 0;
  __stack_pointer = $0;
  block : {
   if ((HEAP32[92138] & 63) == 1) {
    HEAP32[$0 + 104 >> 2] = jsvNewObject();
    if (!HEAP32[$0 + 104 >> 2]) {
     jspSetError();
     HEAP32[$0 + 108 >> 2] = 0;
     break block;
    }
    if (!(jslMatch(123) & 1)) {
     HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 104 >> 2];
     break block;
    }
    while (1) {
     $1 = 0;
     $1 = HEAP32[92138] & 80 ? $1 : HEAPU16[HEAP32[50123] + 2 >> 1] != 125;
     if ($1) {
      HEAP32[$0 + 100 >> 2] = 0;
      HEAP8[$0 + 99 | 0] = 0;
      block1 : {
       if (jslIsIDOrReservedWord() & 1) {
        HEAP8[$0 + 99 | 0] = HEAPU16[HEAP32[50123] + 2 >> 1] == 128;
        if ((HEAP32[92138] & 63) == 1) {
         HEAP32[$0 + 100 >> 2] = jslGetTokenValueAsVar()
        }
        jslGetNextToken();
        break block1;
       }
       block4 : {
        if (!(!(HEAPU16[HEAP32[50123] + 2 >> 1] == 131 | HEAPU16[HEAP32[50123] + 2 >> 1] == 130) & HEAPU16[HEAP32[50123] + 2 >> 1] != 129)) {
         HEAP32[$0 + 100 >> 2] = jspeFactor();
         break block4;
        }
        if (!(jslMatch(128) & 1)) {
         HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 104 >> 2];
         break block;
        }
       }
      }
      block7 : {
       block5 : {
        if (HEAPU16[HEAP32[50123] + 2 >> 1] != 128) {
         break block5
        }
        if (!(jsvIsString(HEAP32[$0 + 100 >> 2]) & 1)) {
         break block5
        }
        HEAP8[$0 + 98 | 0] = jsvIsStringEqual(HEAP32[$0 + 100 >> 2], 125075) & 1;
        HEAP8[$0 + 97 | 0] = jsvIsStringEqual(HEAP32[$0 + 100 >> 2], 125061) & 1;
        if (HEAP8[$0 + 98 | 0] & 1 | HEAP8[$0 + 97 | 0] & 1) {
         jsvUnLock(HEAP32[$0 + 100 >> 2]);
         HEAP32[$0 + 100 >> 2] = jslGetTokenValueAsVar();
         jslGetNextToken();
         HEAP32[$0 + 92 >> 2] = jspeFunctionDefinition(0);
         jsvAddGetterOrSetter(HEAP32[$0 + 104 >> 2], HEAP32[$0 + 100 >> 2], HEAP8[$0 + 98 | 0] & 1, HEAP32[$0 + 92 >> 2]);
         jsvUnLock(HEAP32[$0 + 92 >> 2]);
        }
        break block7;
       }
       block8 : {
        if (HEAPU16[HEAP32[50123] + 2 >> 1] == 40) {
         HEAP32[$0 + 88 >> 2] = jsvFindChildFromVar(HEAP32[$0 + 104 >> 2], HEAP32[$0 + 100 >> 2], 1);
         if (HEAP32[$0 + 88 >> 2]) {
          HEAP32[$0 + 84 >> 2] = jspeFunctionDefinition(0);
          jsvUnLock2(jsvSetValueOfName(HEAP32[$0 + 88 >> 2], HEAP32[$0 + 84 >> 2]), HEAP32[$0 + 84 >> 2]);
         }
         break block8;
        }
        block10 : {
         block9 : {
          if (!(HEAP8[$0 + 99 | 0] & 1) | HEAPU16[HEAP32[50123] + 2 >> 1] != 44 & HEAPU16[HEAP32[50123] + 2 >> 1] != 125) {
           break block9
          }
          if (!(jsvIsString(HEAP32[$0 + 100 >> 2]) & 1)) {
           break block9
          }
          if ((HEAP32[92138] & 63) == 1) {
           HEAP32[$0 + 100 >> 2] = jsvAsArrayIndexAndUnLock(HEAP32[$0 + 100 >> 2]);
           HEAP32[$0 + 80 >> 2] = jsvFindChildFromVar(HEAP32[$0 + 104 >> 2], HEAP32[$0 + 100 >> 2], 1);
           if (HEAP32[$0 + 80 >> 2]) {
            jsvGetString(HEAP32[$0 + 100 >> 2], $0 + 16 | 0, 64);
            HEAP32[$0 + 12 >> 2] = jsvSkipNameAndUnLock(jspGetNamedVariable($0 + 16 | 0));
            jsvUnLock2(jsvSetValueOfName(HEAP32[$0 + 80 >> 2], HEAP32[$0 + 12 >> 2]), HEAP32[$0 + 12 >> 2]);
           }
          }
          break block10;
         }
         if (!(jslMatch(58) & 1)) {
          jsvUnLock(HEAP32[$0 + 100 >> 2]);
          HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 104 >> 2];
          break block;
         }
         if ((HEAP32[92138] & 63) == 1) {
          HEAP32[$0 + 100 >> 2] = jsvAsArrayIndexAndUnLock(HEAP32[$0 + 100 >> 2]);
          HEAP32[$0 + 8 >> 2] = jsvFindChildFromVar(HEAP32[$0 + 104 >> 2], HEAP32[$0 + 100 >> 2], 1);
          if (HEAP32[$0 + 8 >> 2]) {
           HEAP32[$0 + 4 >> 2] = jsvSkipNameAndUnLock(jspeAssignmentExpression());
           jsvUnLock2(jsvSetValueOfName(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 4 >> 2]), HEAP32[$0 + 4 >> 2]);
          }
         }
        }
       }
      }
      jsvUnLock(HEAP32[$0 + 100 >> 2]);
      if (HEAPU16[HEAP32[50123] + 2 >> 1] != 125) {
       if (!(jslMatch(44) & 1)) {
        HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 104 >> 2];
        break block;
       }
      }
      continue;
     }
     break;
    };
    if (!(jslMatch(125) & 1)) {
     HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 104 >> 2];
     break block;
    }
    HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 104 >> 2];
    break block;
   }
   jspeBlock();
   HEAP32[$0 + 108 >> 2] = 0;
  }
  __stack_pointer = $0 + 112 | 0;
  return HEAP32[$0 + 108 >> 2];
 }
 
 function jspeBlock() {
  if (jslMatch(123) & 1) {
   jspeBlockNoBrackets();
   if (!(HEAP32[92138] & 80)) {
    block : {
     if (jslMatch(125) & 1) {
      break block
     }
    }
   }
  }
 }
 
 function jspeFactorArray() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 32 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  block : {
   if ((HEAP32[92138] & 63) == 1) {
    HEAP32[$0 + 20 >> 2] = jsvNewEmptyArray();
    if (!HEAP32[$0 + 20 >> 2]) {
     jspSetError();
     HEAP32[$0 + 28 >> 2] = 0;
     break block;
    }
   }
   if (!(jslMatch(91) & 1)) {
    HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 20 >> 2];
    break block;
   }
   while (1) {
    $1 = 0;
    $1 = HEAP32[92138] & 80 ? $1 : HEAPU16[HEAP32[50123] + 2 >> 1] != 93;
    if ($1) {
     block1 : {
      if ((HEAP32[92138] & 63) == 1) {
       if (HEAPU16[HEAP32[50123] + 2 >> 1] != 44) {
        $1 = jsvSkipNameAndUnLock(jspeAssignmentExpression());
        HEAP32[$0 + 16 >> 2] = $1;
        HEAP32[$0 + 16 >> 2] = $1;
        HEAP32[$0 + 12 >> 2] = jsvMakeIntoVariableName(jsvNewFromInteger(HEAP32[$0 + 24 >> 2]), HEAP32[$0 + 16 >> 2]);
        if (HEAP32[$0 + 12 >> 2]) {
         jsvAddName(HEAP32[$0 + 20 >> 2], HEAP32[$0 + 12 >> 2]);
         jsvUnLock(HEAP32[$0 + 12 >> 2]);
        }
        jsvUnLock(HEAP32[$0 + 16 >> 2]);
       }
       break block1;
      }
      jsvUnLock(jspeAssignmentExpression());
     }
     if (HEAPU16[HEAP32[50123] + 2 >> 1] != 93) {
      if (!(jslMatch(44) & 1)) {
       HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 20 >> 2];
       break block;
      }
     }
     HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + 1;
     continue;
    }
    break;
   };
   if (HEAP32[$0 + 20 >> 2]) {
    jsvSetArrayLength(HEAP32[$0 + 20 >> 2], HEAP32[$0 + 24 >> 2], 0)
   }
   if (!(jslMatch(93) & 1)) {
    HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 20 >> 2];
    break block;
   }
   HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 20 >> 2];
  }
  __stack_pointer = $0 + 32 | 0;
  return HEAP32[$0 + 28 >> 2];
 }
 
 function jspeFactorTypeOf() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  jslGetNextToken();
  HEAP32[$0 + 12 >> 2] = jspeUnaryExpression();
  HEAP32[$0 + 8 >> 2] = 0;
  if ((HEAP32[92138] & 63) == 1) {
   block : {
    if (!(jsvIsVariableDefined(HEAP32[$0 + 12 >> 2]) & 1)) {
     HEAP32[$0 + 8 >> 2] = jsvNewFromString(138928);
     break block;
    }
    HEAP32[$0 + 12 >> 2] = jsvSkipNameAndUnLock(HEAP32[$0 + 12 >> 2]);
    HEAP32[$0 + 8 >> 2] = jsvNewFromString(jsvGetTypeOf(HEAP32[$0 + 12 >> 2]));
   }
  }
  jsvUnLock(HEAP32[$0 + 12 >> 2]);
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$0 + 8 >> 2];
 }
 
 function jspeUnaryExpression() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  block2 : {
   block1 : {
    if (!(HEAPU16[HEAP32[50123] + 2 >> 1] == 33 | HEAPU16[HEAP32[50123] + 2 >> 1] == 126 | HEAPU16[HEAP32[50123] + 2 >> 1] == 45)) {
     if (HEAPU16[HEAP32[50123] + 2 >> 1] != 43) {
      break block1
     }
    }
    HEAP16[$0 + 10 >> 1] = HEAPU16[HEAP32[50123] + 2 >> 1];
    jslGetNextToken();
    if ((HEAP32[92138] & 63) != 1) {
     HEAP32[$0 + 12 >> 2] = jspeUnaryExpression();
     break block2;
    }
    HEAP32[$0 + 4 >> 2] = jsvSkipNameAndUnLock(jspeUnaryExpression());
    if (HEAPU16[$0 + 10 >> 1] == 33) {
     HEAP32[$0 + 12 >> 2] = jsvNewFromBool((jsvGetBoolAndUnLock(HEAP32[$0 + 4 >> 2]) ^ -1) & 1);
     break block2;
    }
    if (HEAPU16[$0 + 10 >> 1] == 126) {
     HEAP32[$0 + 12 >> 2] = jsvNewFromInteger(jsvGetIntegerAndUnLock(HEAP32[$0 + 4 >> 2]) ^ -1);
     break block2;
    }
    if (HEAPU16[$0 + 10 >> 1] == 45) {
     HEAP32[$0 + 12 >> 2] = jsvNegateAndUnLock(HEAP32[$0 + 4 >> 2]);
     break block2;
    }
    if (HEAPU16[$0 + 10 >> 1] == 43) {
     HEAP32[$0 + 12 >> 2] = jsvAsNumberAndUnLock(HEAP32[$0 + 4 >> 2]);
     break block2;
    }
    HEAP32[$0 + 12 >> 2] = 0;
    break block2;
   }
   HEAP32[$0 + 12 >> 2] = jspePostfixExpression();
  }
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function jspeFactorDelete() {
  var $0 = 0;
  $0 = __stack_pointer - 32 | 0;
  __stack_pointer = $0;
  jslGetNextToken();
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = jspeFactorMember(jspeFactor(), $0 + 28 | 0);
  HEAP32[$0 + 20 >> 2] = 0;
  if ((HEAP32[92138] & 63) == 1) {
   HEAP8[$0 + 19 | 0] = 0;
   block : {
    if (!(jsvIsName(HEAP32[$0 + 24 >> 2]) & 1)) {
     break block
    }
    if (jsvIsNewChild(HEAP32[$0 + 24 >> 2]) & 1) {
     break block
    }
    block1 : {
     if (HEAP32[$0 + 28 >> 2]) {
      break block1
     }
     if (!(jsvIsChild(HEAP32[92130], HEAP32[$0 + 24 >> 2]) & 1)) {
      break block1
     }
     HEAP32[$0 + 28 >> 2] = jsvLockAgain(HEAP32[92130]);
    }
    block2 : {
     if (!(jsvHasChildren(HEAP32[$0 + 28 >> 2]) & 1)) {
      break block2
     }
     if (!(jsvIsChild(HEAP32[$0 + 28 >> 2], HEAP32[$0 + 24 >> 2]) & 1)) {
      break block2
     }
     block3 : {
      if (jsvIsArray(HEAP32[$0 + 28 >> 2]) & 1) {
       HEAP32[$0 + 12 >> 2] = jsvGetArrayLength(HEAP32[$0 + 28 >> 2]);
       jsvRemoveChild(HEAP32[$0 + 28 >> 2], HEAP32[$0 + 24 >> 2]);
       jsvSetArrayLength(HEAP32[$0 + 28 >> 2], HEAP32[$0 + 12 >> 2], 0);
       break block3;
      }
      jsvRemoveChild(HEAP32[$0 + 28 >> 2], HEAP32[$0 + 24 >> 2]);
     }
     HEAP8[$0 + 19 | 0] = 1;
    }
   }
   HEAP32[$0 + 20 >> 2] = jsvNewFromBool(HEAP8[$0 + 19 | 0] & 1);
  }
  jsvUnLock2(HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2]);
  __stack_pointer = $0 + 32 | 0;
  return HEAP32[$0 + 20 >> 2];
 }
 
 function jspeTemplateLiteral() {
  var $0 = 0;
  $0 = __stack_pointer - 144 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 140 >> 2] = 0;
  if ((HEAP32[92138] & 63) == 1) {
   HEAP32[$0 + 136 >> 2] = jslGetTokenValueAsVar();
   HEAP32[$0 + 140 >> 2] = jsvNewFromEmptyString_510();
   if (!(!HEAP32[$0 + 140 >> 2] | !HEAP32[$0 + 136 >> 2])) {
    jsvStringIteratorNew($0 + 100 | 0, HEAP32[$0 + 136 >> 2], 0);
    jsvStringIteratorNew($0 - -64 | 0, HEAP32[$0 + 140 >> 2], 0);
    while (1) {
     block1 : {
      if (!(jsvStringIteratorHasChar_511($0 + 100 | 0) & 1)) {
       break block1
      }
      HEAP8[$0 + 63 | 0] = jsvStringIteratorGetCharAndNext($0 + 100 | 0);
      block4 : {
       if (HEAPU8[$0 + 63 | 0] == 36) {
        HEAP8[$0 + 63 | 0] = jsvStringIteratorGetChar_512($0 + 100 | 0);
        block3 : {
         if (HEAPU8[$0 + 63 | 0] == 123) {
          jsvStringIteratorNext($0 + 100 | 0);
          HEAP32[$0 + 56 >> 2] = 1;
          HEAP32[$0 + 52 >> 2] = jsvNewFromEmptyString_510();
          if (!HEAP32[$0 + 52 >> 2]) {
           break block1
          }
          jsvStringIteratorNew($0 + 16 | 0, HEAP32[$0 + 52 >> 2], 0);
          while (1) {
           block2 : {
            if (!(jsvStringIteratorHasChar_511($0 + 100 | 0) & 1)) {
             break block2
            }
            HEAP8[$0 + 63 | 0] = jsvStringIteratorGetCharAndNext($0 + 100 | 0);
            if (HEAPU8[$0 + 63 | 0] == 123) {
             HEAP32[$0 + 56 >> 2] = HEAP32[$0 + 56 >> 2] + 1
            }
            if (HEAPU8[$0 + 63 | 0] == 125) {
             HEAP32[$0 + 56 >> 2] = HEAP32[$0 + 56 >> 2] - 1;
             if (!HEAP32[$0 + 56 >> 2]) {
              break block2
             }
            }
            jsvStringIteratorAppend($0 + 16 | 0, HEAP8[$0 + 63 | 0] << 24 >> 24);
            continue;
           }
           break;
          };
          jsvStringIteratorFree_478($0 + 16 | 0);
          HEAP32[$0 + 12 >> 2] = jspEvaluateExpressionVar(HEAP32[$0 + 52 >> 2]);
          jsvUnLock(HEAP32[$0 + 52 >> 2]);
          HEAP32[$0 + 12 >> 2] = jsvAsStringAndUnLock(HEAP32[$0 + 12 >> 2]);
          jsvStringIteratorAppendString($0 - -64 | 0, HEAP32[$0 + 12 >> 2], 0, 2147483647);
          jsvUnLock(HEAP32[$0 + 12 >> 2]);
          break block3;
         }
         jsvStringIteratorAppend($0 - -64 | 0, 36);
        }
        break block4;
       }
       jsvStringIteratorAppend($0 - -64 | 0, HEAP8[$0 + 63 | 0] << 24 >> 24);
      }
      continue;
     }
     break;
    };
    jsvStringIteratorFree_478($0 + 100 | 0);
    jsvStringIteratorFree_478($0 - -64 | 0);
   }
   jsvUnLock(HEAP32[$0 + 136 >> 2]);
  }
  jslGetNextToken();
  __stack_pointer = $0 + 144 | 0;
  return HEAP32[$0 + 140 >> 2];
 }
 
 function jsvNewFromEmptyString_510() {
  return jsvNewWithFlags(28);
 }
 
 function jsvStringIteratorHasChar_511($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
 }
 
 function jsvStringIteratorGetChar_512($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   HEAP8[$1 + 15 | 0] = HEAPU8[HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] + HEAP32[HEAP32[$1 + 8 >> 2] >> 2] | 0];
  }
  return HEAP8[$1 + 15 | 0] << 24 >> 24;
 }
 
 function jspEvaluateExpressionVar($0) {
  var $1 = 0;
  $1 = __stack_pointer - 144 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 140 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = jslSetLex($1 + 8 | 0);
  jslInit(HEAP32[$1 + 140 >> 2]);
  HEAP32[$1 >> 2] = jspeExpression();
  jslKill();
  jslSetLex(HEAP32[$1 + 4 >> 2]);
  $0 = jsvSkipNameAndUnLock(HEAP32[$1 >> 2]);
  __stack_pointer = $1 + 144 | 0;
  return $0;
 }
 
 function jspeExpressionOrArrowFunction() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP8[$0 + 3 | 0] = 1;
  block2 : {
   while (1) {
    $1 = 0;
    if (HEAPU16[HEAP32[50123] + 2 >> 1] != 41) {
     $1 = (HEAP32[92138] & 80) != 0 ^ -1
    }
    if ($1 & 1) {
     if (!(!(HEAP8[$0 + 3 | 0] & 1) | !HEAP32[$0 + 8 >> 2])) {
      HEAP32[$0 + 4 >> 2] = jspeAddNamedFunctionParameter(HEAP32[$0 + 4 >> 2], HEAP32[$0 + 8 >> 2])
     }
     jsvUnLock(HEAP32[$0 + 8 >> 2]);
     HEAP32[$0 + 8 >> 2] = jspeAssignmentExpression();
     block1 : {
      if ((HEAP32[92138] & 63) != 1) {
       break block1
      }
      if (jsvIsName(HEAP32[$0 + 8 >> 2]) & 1) {
       if (jsvIsString(HEAP32[$0 + 8 >> 2]) & 1) {
        break block1
       }
      }
      HEAP8[$0 + 3 | 0] = 0;
     }
     if (HEAPU16[HEAP32[50123] + 2 >> 1] != 41) {
      if (!(jslMatch(44) & 1)) {
       jsvUnLock2(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 4 >> 2]);
       HEAP32[$0 + 12 >> 2] = 0;
       break block2;
      }
     }
     continue;
    }
    break;
   };
   if (!(jslMatch(41) & 1)) {
    jsvUnLock2(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 4 >> 2]);
    HEAP32[$0 + 12 >> 2] = 0;
    break block2;
   }
   if (!(!(HEAP8[$0 + 3 | 0] & 1) | HEAPU16[HEAP32[50123] + 2 >> 1] != 162)) {
    HEAP32[$0 + 4 >> 2] = jspeArrowFunction(HEAP32[$0 + 4 >> 2], HEAP32[$0 + 8 >> 2]);
    jsvUnLock(HEAP32[$0 + 8 >> 2]);
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 4 >> 2];
    break block2;
   }
   jsvUnLock(HEAP32[$0 + 4 >> 2]);
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
  }
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function jspeClassDefinition($0) {
  var $1 = 0;
  $1 = __stack_pointer - 96 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 91 | 0] = $0;
  HEAP32[$1 + 84 >> 2] = 0;
  HEAP32[$1 + 80 >> 2] = 0;
  HEAP32[$1 + 76 >> 2] = 0;
  HEAP8[$1 + 75 | 0] = (HEAP32[92138] & 63) == 1;
  if (HEAP8[$1 + 75 | 0] & 1) {
   HEAP32[$1 + 84 >> 2] = jsvNewWithFlags(7);
   HEAP32[$1 + 76 >> 2] = jsvNewObject();
   HEAP32[$1 + 68 >> 2] = jspeiGetScopesAsVar();
   if (HEAP32[$1 + 68 >> 2]) {
    jsvAddNamedChildAndUnLock(HEAP32[$1 + 84 >> 2], HEAP32[$1 + 68 >> 2], 135032)
   }
  }
  if (!(!(HEAP8[$1 + 91 | 0] & 1) | HEAPU16[HEAP32[50123] + 2 >> 1] != 128)) {
   if (HEAP32[$1 + 76 >> 2]) {
    jsvObjectSetChildAndUnLock(HEAP32[$1 + 76 >> 2], 135639, jslGetTokenValueAsVar())
   }
   jslGetNextToken();
  }
  if (HEAP32[$1 + 84 >> 2]) {
   HEAP32[$1 + 64 >> 2] = jsvFindOrAddChildFromString(HEAP32[$1 + 84 >> 2], 137493);
   jspEnsureIsPrototype(HEAP32[$1 + 84 >> 2], HEAP32[$1 + 64 >> 2]);
   HEAP32[$1 + 80 >> 2] = jsvSkipName(HEAP32[$1 + 64 >> 2]);
   jsvUnLock(HEAP32[$1 + 64 >> 2]);
  }
  block1 : {
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 195) {
    jslGetNextToken();
    HEAP32[$1 + 60 >> 2] = 0;
    HEAP32[$1 + 56 >> 2] = 0;
    if (HEAP8[$1 + 75 | 0] & 1) {
     HEAP32[$1 + 60 >> 2] = jspGetNamedVariable(jslGetTokenValueAsString());
     HEAP32[$1 + 56 >> 2] = jsvSkipName(HEAP32[$1 + 60 >> 2]);
    }
    if (!(jslMatch(128) & 1)) {
     jsvUnLock4(HEAP32[$1 + 56 >> 2], HEAP32[$1 + 84 >> 2], HEAP32[$1 + 76 >> 2], HEAP32[$1 + 80 >> 2]);
     HEAP32[$1 + 92 >> 2] = 0;
     break block1;
    }
    if (HEAP32[$1 + 80 >> 2]) {
     block2 : {
      if (jsvIsFunction(HEAP32[$1 + 56 >> 2]) & 1) {
       HEAP32[$1 + 52 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 56 >> 2], 137493);
       if (HEAP32[$1 + 52 >> 2]) {
        jsvObjectSetChild(HEAP32[$1 + 80 >> 2], 140424, HEAP32[$1 + 52 >> 2]);
        $0 = HEAP32[$1 + 84 >> 2];
        HEAP32[$1 >> 2] = HEAP32[$1 + 60 >> 2];
        jsvObjectSetChildAndUnLock($0, 138400, jsvVarPrintf(144209, $1));
        jsvUnLock(HEAP32[$1 + 52 >> 2]);
       }
       break block2;
      }
      $0 = HEAP32[$1 + 60 >> 2];
      HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 56 >> 2];
      HEAP32[$1 + 16 >> 2] = $0;
      jsExceptionHere(2, 126010, $1 + 16 | 0);
     }
    }
    jsvUnLock2(HEAP32[$1 + 56 >> 2], HEAP32[$1 + 60 >> 2]);
   }
   if (!(jslMatch(123) & 1)) {
    jsvUnLock3(HEAP32[$1 + 84 >> 2], HEAP32[$1 + 76 >> 2], HEAP32[$1 + 80 >> 2]);
    HEAP32[$1 + 92 >> 2] = 0;
    break block1;
   }
   while (1) {
    block3 : {
     if (HEAPU16[HEAP32[50123] + 2 >> 1] != 128) {
      $0 = 0;
      if (HEAPU16[HEAP32[50123] + 2 >> 1] != 197) {
       break block3
      }
     }
     $0 = jspIsInterrupted() ^ -1;
    }
    if ($0 & 1) {
     HEAP8[$1 + 51 | 0] = HEAPU16[HEAP32[50123] + 2 >> 1] == 197;
     if (HEAP8[$1 + 51 | 0] & 1) {
      jslGetNextToken()
     }
     HEAP32[$1 + 44 >> 2] = jslGetTokenValueAsVar();
     HEAP8[$1 + 43 | 0] = jsvIsStringEqual(HEAP32[$1 + 44 >> 2], 127861) & 1;
     if (!(jslMatch(128) & 1)) {
      jsvUnLock4(HEAP32[$1 + 44 >> 2], HEAP32[$1 + 84 >> 2], HEAP32[$1 + 76 >> 2], HEAP32[$1 + 80 >> 2]);
      HEAP32[$1 + 92 >> 2] = 0;
      break block1;
     }
     HEAP8[$1 + 42 | 0] = 0;
     HEAP8[$1 + 41 | 0] = 0;
     if (HEAPU16[HEAP32[50123] + 2 >> 1] == 128) {
      HEAP8[$1 + 42 | 0] = jsvIsStringEqual(HEAP32[$1 + 44 >> 2], 125075) & 1;
      HEAP8[$1 + 41 | 0] = jsvIsStringEqual(HEAP32[$1 + 44 >> 2], 125061) & 1;
      if (HEAP8[$1 + 42 | 0] & 1 | HEAP8[$1 + 41 | 0] & 1) {
       jsvUnLock(HEAP32[$1 + 44 >> 2]);
       HEAP32[$1 + 44 >> 2] = jslGetTokenValueAsVar();
       jslGetNextToken();
      }
     }
     if (HEAP8[$1 + 51 | 0] & 1) {
      $0 = HEAP32[$1 + 76 >> 2]
     } else {
      $0 = HEAP32[$1 + 80 >> 2]
     }
     HEAP32[$1 + 36 >> 2] = $0;
     if (HEAP32[$1 + 36 >> 2]) {
      block11 : {
       block7 : {
        if (!(HEAP8[$1 + 43 | 0] & 1 | (HEAP8[$1 + 42 | 0] & 1 | HEAP8[$1 + 41 | 0] & 1))) {
         if (HEAPU16[HEAP32[50123] + 2 >> 1] != 40) {
          break block7
         }
        }
        HEAP32[$1 + 32 >> 2] = jspeFunctionDefinition(0);
        block8 : {
         if (HEAP8[$1 + 43 | 0] & 1) {
          jswrap_function_replaceWith(HEAP32[$1 + 84 >> 2], HEAP32[$1 + 32 >> 2]);
          break block8;
         }
         block10 : {
          if (HEAP8[$1 + 42 | 0] & 1 | HEAP8[$1 + 41 | 0] & 1) {
           jsvAddGetterOrSetter(HEAP32[$1 + 36 >> 2], HEAP32[$1 + 44 >> 2], HEAP8[$1 + 42 | 0] & 1, HEAP32[$1 + 32 >> 2]);
           break block10;
          }
          jsvObjectSetChildVar(HEAP32[$1 + 36 >> 2], HEAP32[$1 + 44 >> 2], HEAP32[$1 + 32 >> 2]);
         }
        }
        jsvUnLock(HEAP32[$1 + 32 >> 2]);
        break block11;
       }
       if (!(jslMatch(61) & 1)) {
        jsvUnLock4(HEAP32[$1 + 44 >> 2], HEAP32[$1 + 84 >> 2], HEAP32[$1 + 76 >> 2], HEAP32[$1 + 80 >> 2]);
        HEAP32[$1 + 92 >> 2] = 0;
        break block1;
       }
       HEAP32[$1 + 28 >> 2] = jsvSkipNameAndUnLock(jspeAssignmentExpression());
       jsvObjectSetChildVar(HEAP32[$1 + 36 >> 2], HEAP32[$1 + 44 >> 2], HEAP32[$1 + 28 >> 2]);
       jsvUnLock(HEAP32[$1 + 28 >> 2]);
      }
     }
     while (1) {
      if (HEAPU16[HEAP32[50123] + 2 >> 1] == 59) {
       jslGetNextToken();
       continue;
      }
      break;
     };
     jsvUnLock(HEAP32[$1 + 44 >> 2]);
     continue;
    }
    break;
   };
   jsvUnLock(HEAP32[$1 + 80 >> 2]);
   jsvObjectAppendAll(HEAP32[$1 + 84 >> 2], HEAP32[$1 + 76 >> 2]);
   jsvUnLock(HEAP32[$1 + 76 >> 2]);
   if (!(jslMatch(125) & 1)) {
    jsvUnLock(HEAP32[$1 + 84 >> 2]);
    HEAP32[$1 + 92 >> 2] = 0;
    break block1;
   }
   HEAP32[$1 + 92 >> 2] = HEAP32[$1 + 84 >> 2];
  }
  __stack_pointer = $1 + 96 | 0;
  return HEAP32[$1 + 92 >> 2];
 }
 
 function __jspePostfixExpression($0) {
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 28 >> 2] = $0;
  while (1) {
   $0 = 1;
   $0 = HEAPU16[HEAP32[50123] + 2 >> 1] != 152 ? HEAPU16[HEAP32[50123] + 2 >> 1] == 153 : $0;
   if ($0) {
    HEAP32[$1 + 24 >> 2] = HEAP16[HEAP32[50123] + 2 >> 1] << 16 >> 16;
    jslGetNextToken();
    if ((HEAP32[92138] & 63) == 1) {
     HEAP32[$1 + 20 >> 2] = jsvNewFromInteger(1);
     HEAP32[$1 + 16 >> 2] = jsvAsNumberAndUnLock(jsvSkipName(HEAP32[$1 + 28 >> 2]));
     HEAP32[$1 + 12 >> 2] = jsvMathsOpSkipNames(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2], HEAP32[$1 + 24 >> 2] == 152 ? 43 : 45);
     jsvUnLock(HEAP32[$1 + 20 >> 2]);
     jsvReplaceWith(HEAP32[$1 + 28 >> 2], HEAP32[$1 + 12 >> 2]);
     jsvUnLock(HEAP32[$1 + 12 >> 2]);
     jsvUnLock(HEAP32[$1 + 28 >> 2]);
     HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 16 >> 2];
    }
    continue;
   }
   break;
  };
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 28 >> 2];
 }
 
 function jspePostfixExpression() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  block1 : {
   if (!(HEAPU16[HEAP32[50123] + 2 >> 1] != 152 & HEAPU16[HEAP32[50123] + 2 >> 1] != 153)) {
    HEAP32[$0 + 8 >> 2] = HEAP16[HEAP32[50123] + 2 >> 1] << 16 >> 16;
    jslGetNextToken();
    HEAP32[$0 + 12 >> 2] = jspePostfixExpression();
    if ((HEAP32[92138] & 63) == 1) {
     HEAP32[$0 + 4 >> 2] = jsvNewFromInteger(1);
     HEAP32[$0 >> 2] = jsvMathsOpSkipNames(HEAP32[$0 + 12 >> 2], HEAP32[$0 + 4 >> 2], HEAP32[$0 + 8 >> 2] == 152 ? 43 : 45);
     jsvUnLock(HEAP32[$0 + 4 >> 2]);
     jsvReplaceWith(HEAP32[$0 + 12 >> 2], HEAP32[$0 >> 2]);
     jsvUnLock(HEAP32[$0 >> 2]);
    }
    break block1;
   }
   HEAP32[$0 + 12 >> 2] = jspeFactorFunctionCall();
  }
  $1 = __jspePostfixExpression(HEAP32[$0 + 12 >> 2]);
  __stack_pointer = $0 + 16 | 0;
  return $1;
 }
 
 function jspeGetBinaryExpressionPrecedence($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block12 : {
   block2 : {
    switch (HEAP32[$1 + 8 >> 2] - 37 | 0) {
    case 123:
    case 171:
     HEAP32[$1 + 12 >> 2] = 1;
     break block12;
    case 121:
     HEAP32[$1 + 12 >> 2] = 2;
     break block12;
    case 87:
     HEAP32[$1 + 12 >> 2] = 3;
     break block12;
    case 57:
     HEAP32[$1 + 12 >> 2] = 4;
     break block12;
    case 1:
     HEAP32[$1 + 12 >> 2] = 5;
     break block12;
    case 101:
    case 102:
    case 103:
    case 104:
     HEAP32[$1 + 12 >> 2] = 6;
     break block12;
    case 23:
    case 25:
    case 105:
    case 108:
    case 149:
     HEAP32[$1 + 12 >> 2] = 7;
     break block12;
    case 148:
     HEAP32[$1 + 12 >> 2] = HEAP32[92138] & 256 ? 0 : 7;
     break block12;
    case 106:
    case 109:
    case 110:
     HEAP32[$1 + 12 >> 2] = 8;
     break block12;
    case 6:
    case 8:
     HEAP32[$1 + 12 >> 2] = 9;
     break block12;
    case 0:
    case 5:
    case 10:
     HEAP32[$1 + 12 >> 2] = 10;
     break block12;
    default:
     break block2;
    };
   }
   HEAP32[$1 + 12 >> 2] = 0;
  }
  return HEAP32[$1 + 12 >> 2];
 }
 
 function __jspeBinaryExpression($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 208 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 204 >> 2] = $0;
  HEAP32[$2 + 200 >> 2] = $1;
  HEAP32[$2 + 196 >> 2] = jspeGetBinaryExpressionPrecedence(HEAP16[HEAP32[50123] + 2 >> 1] << 16 >> 16);
  while (1) {
   $0 = 0;
   $0 = HEAP32[$2 + 196 >> 2] ? HEAPU32[$2 + 196 >> 2] > HEAPU32[$2 + 200 >> 2] : $0;
   if ($0) {
    HEAP32[$2 + 192 >> 2] = HEAP16[HEAP32[50123] + 2 >> 1] << 16 >> 16;
    jslGetNextToken();
    if ((HEAP32[92138] & 63) == 1) {
     HEAP32[$2 + 188 >> 2] = jsvSkipNameAndUnLock(HEAP32[$2 + 204 >> 2]);
     block : {
      if (HEAP32[$2 + 192 >> 2] != 186) {
       HEAP32[$2 + 204 >> 2] = jsvGetValueOf(HEAP32[$2 + 188 >> 2]);
       jsvUnLock(HEAP32[$2 + 188 >> 2]);
       break block;
      }
      HEAP32[$2 + 204 >> 2] = HEAP32[$2 + 188 >> 2];
     }
    }
    block5 : {
     if (!(HEAP32[$2 + 192 >> 2] != 158 & HEAP32[$2 + 192 >> 2] != 160)) {
      HEAP8[$2 + 187 | 0] = jsvGetBool(HEAP32[$2 + 204 >> 2]) & 1;
      block4 : {
       block3 : {
        if (!(!(HEAP8[$2 + 187 | 0] & 1) & HEAP32[$2 + 192 >> 2] == 158)) {
         if (!(HEAP8[$2 + 187 | 0] & 1) | HEAP32[$2 + 192 >> 2] != 160) {
          break block3
         }
        }
        HEAP32[$2 + 180 >> 2] = HEAP32[92138];
        jspSetNoExecute();
        jsvUnLock(__jspeBinaryExpression(jspeUnaryExpression(), HEAP32[$2 + 196 >> 2]));
        HEAP32[92138] = HEAP32[92138] & -1664 | HEAP32[$2 + 180 >> 2] & 1663;
        break block4;
       }
       jsvUnLock(HEAP32[$2 + 204 >> 2]);
       HEAP32[$2 + 204 >> 2] = __jspeBinaryExpression(jspeUnaryExpression(), HEAP32[$2 + 196 >> 2]);
      }
      break block5;
     }
     block6 : {
      if (HEAP32[$2 + 192 >> 2] == 208) {
       if (jsvIsNullish(HEAP32[$2 + 204 >> 2]) & 1) {
        jsvUnLock(HEAP32[$2 + 204 >> 2]);
        HEAP32[$2 + 204 >> 2] = __jspeBinaryExpression(jspeUnaryExpression(), HEAP32[$2 + 196 >> 2]);
        break block6;
       }
       HEAP32[$2 + 176 >> 2] = HEAP32[92138];
       jspSetNoExecute();
       jsvUnLock(__jspeBinaryExpression(jspeUnaryExpression(), HEAP32[$2 + 196 >> 2]));
       HEAP32[92138] = HEAP32[92138] & -1664 | HEAP32[$2 + 176 >> 2] & 1663;
       break block6;
      }
      HEAP32[$2 + 172 >> 2] = __jspeBinaryExpression(jspeUnaryExpression(), HEAP32[$2 + 196 >> 2]);
      if ((HEAP32[92138] & 63) == 1) {
       block11 : {
        if (HEAP32[$2 + 192 >> 2] == 185) {
         HEAP32[$2 + 168 >> 2] = jsvSkipName(HEAP32[$2 + 172 >> 2]);
         block7 : {
          if (jsvHasChildren(HEAP32[$2 + 168 >> 2]) & 1) {
           HEAP32[$2 + 164 >> 2] = jsvAsArrayIndexAndUnLock(HEAP32[$2 + 204 >> 2]);
           HEAP32[$2 + 160 >> 2] = jspGetVarNamedField(HEAP32[$2 + 168 >> 2], HEAP32[$2 + 164 >> 2], 1);
           HEAP32[$2 + 204 >> 2] = jsvNewFromBool(HEAP32[$2 + 160 >> 2] != 0);
           jsvUnLock2(HEAP32[$2 + 164 >> 2], HEAP32[$2 + 160 >> 2]);
           break block7;
          }
          HEAP32[$2 + 156 >> 2] = jswGetSymbolListForObjectProto(HEAP32[$2 + 168 >> 2]);
          block10 : {
           if (HEAP32[$2 + 156 >> 2]) {
            HEAP32[$2 + 152 >> 2] = 0;
            if (jsvGetString(HEAP32[$2 + 204 >> 2], $2 + 80 | 0, 64) >>> 0 < 64) {
             HEAP32[$2 + 152 >> 2] = jswBinarySearch(HEAP32[$2 + 156 >> 2], HEAP32[$2 + 168 >> 2], $2 + 80 | 0)
            }
            HEAP8[$2 + 79 | 0] = HEAP32[$2 + 152 >> 2] != 0;
            jsvUnLock(HEAP32[$2 + 152 >> 2]);
            block8 : {
             if (HEAP8[$2 + 79 | 0] & 1) {
              break block8
             }
             if (!(jsvIsArrayBuffer(HEAP32[$2 + 168 >> 2]) & 1)) {
              break block8
             }
             HEAPF64[$2 + 64 >> 3] = jsvGetFloat(HEAP32[$2 + 204 >> 2]);
             block9 : {
              if (!(HEAPF64[$2 + 64 >> 3] >= 0.0) | HEAPF64[$2 + 64 >> 3] != Math_floor(HEAPF64[$2 + 64 >> 3])) {
               break block9
              }
              if (!(HEAPF64[$2 + 64 >> 3] < +(jsvGetArrayBufferLength(HEAP32[$2 + 168 >> 2]) >>> 0))) {
               break block9
              }
              HEAP8[$2 + 79 | 0] = 1;
             }
            }
            jsvUnLock(HEAP32[$2 + 204 >> 2]);
            HEAP32[$2 + 204 >> 2] = jsvNewFromBool(HEAP8[$2 + 79 | 0] & 1);
            break block10;
           }
           HEAP32[$2 >> 2] = HEAP32[$2 + 168 >> 2];
           jsExceptionHere(1, 126672, $2);
           jsvUnLock(HEAP32[$2 + 204 >> 2]);
           HEAP32[$2 + 204 >> 2] = 0;
          }
         }
         jsvUnLock(HEAP32[$2 + 168 >> 2]);
         break block11;
        }
        block15 : {
         if (HEAP32[$2 + 192 >> 2] == 186) {
          HEAP8[$2 + 63 | 0] = 0;
          HEAP32[$2 + 56 >> 2] = jsvSkipName(HEAP32[$2 + 172 >> 2]);
          block12 : {
           if (!(jsvIsFunction(HEAP32[$2 + 56 >> 2]) & 1)) {
            HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 56 >> 2];
            jsExceptionHere(1, 126299, $2 + 16 | 0);
            break block12;
           }
           block13 : {
            if (!(jsvIsObject(HEAP32[$2 + 204 >> 2]) & 1)) {
             if (!(jsvIsFunction(HEAP32[$2 + 204 >> 2]) & 1)) {
              break block13
             }
            }
            HEAP32[$2 + 52 >> 2] = jspGetNamedField(HEAP32[$2 + 56 >> 2], 137493, 0);
            HEAP32[$2 + 48 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 204 >> 2], 140424);
            while (1) {
             if (jsvHasChildren(HEAP32[$2 + 48 >> 2]) & 1) {
              if (HEAP32[$2 + 48 >> 2] == HEAP32[$2 + 52 >> 2]) {
               HEAP8[$2 + 63 | 0] = 1
              }
              HEAP32[$2 + 44 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 48 >> 2], 140424);
              jsvUnLock(HEAP32[$2 + 48 >> 2]);
              HEAP32[$2 + 48 >> 2] = HEAP32[$2 + 44 >> 2];
              continue;
             }
             break;
            };
            if (jspIsConstructor(HEAP32[$2 + 56 >> 2], 125086) & 1) {
             HEAP8[$2 + 63 | 0] = 1
            }
            jsvUnLock2(HEAP32[$2 + 52 >> 2], HEAP32[$2 + 48 >> 2]);
           }
           if (!(HEAP8[$2 + 63 | 0] & 1)) {
            HEAP32[$2 + 40 >> 2] = jswGetBasicObjectName(HEAP32[$2 + 204 >> 2]);
            if (HEAP32[$2 + 40 >> 2]) {
             HEAP8[$2 + 63 | 0] = jspIsConstructor(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 40 >> 2]) & 1
            }
            block14 : {
             if (HEAP8[$2 + 63 | 0] & 1) {
              break block14
             }
             if (!(jsvIsArray(HEAP32[$2 + 204 >> 2]) & 1)) {
              if (!(jsvIsArrayBuffer(HEAP32[$2 + 204 >> 2]) & 1)) {
               break block14
              }
             }
             if (!(jspIsConstructor(HEAP32[$2 + 56 >> 2], 125086) & 1)) {
              break block14
             }
             HEAP8[$2 + 63 | 0] = 1;
            }
           }
          }
          jsvUnLock2(HEAP32[$2 + 204 >> 2], HEAP32[$2 + 56 >> 2]);
          HEAP32[$2 + 204 >> 2] = jsvNewFromBool(HEAP8[$2 + 63 | 0] & 1);
          break block15;
         }
         HEAP32[$2 + 36 >> 2] = jsvSkipName(HEAP32[$2 + 172 >> 2]);
         HEAP32[$2 + 32 >> 2] = jsvGetValueOf(HEAP32[$2 + 36 >> 2]);
         jsvUnLock(HEAP32[$2 + 36 >> 2]);
         HEAP32[$2 + 28 >> 2] = jsvMathsOp(HEAP32[$2 + 204 >> 2], HEAP32[$2 + 32 >> 2], HEAP32[$2 + 192 >> 2]);
         jsvUnLock2(HEAP32[$2 + 204 >> 2], HEAP32[$2 + 32 >> 2]);
         HEAP32[$2 + 204 >> 2] = HEAP32[$2 + 28 >> 2];
        }
       }
      }
      jsvUnLock(HEAP32[$2 + 172 >> 2]);
     }
    }
    HEAP32[$2 + 196 >> 2] = jspeGetBinaryExpressionPrecedence(HEAP16[HEAP32[50123] + 2 >> 1] << 16 >> 16);
    continue;
   }
   break;
  };
  __stack_pointer = $2 + 208 | 0;
  return HEAP32[$2 + 204 >> 2];
 }
 
 function jspIsConstructor($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  HEAP32[$2 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[92130], HEAP32[$2 + 20 >> 2]);
  block : {
   if (!HEAP32[$2 + 16 >> 2]) {
    HEAP8[$2 + 31 | 0] = 0;
    break block;
   }
   HEAP8[$2 + 15 | 0] = HEAP32[$2 + 16 >> 2] == HEAP32[$2 + 24 >> 2];
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
   HEAP8[$2 + 31 | 0] = HEAP8[$2 + 15 | 0] & 1;
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP8[$2 + 31 | 0] & 1;
 }
 
 function jspeBinaryExpression() {
  return __jspeBinaryExpression(jspeUnaryExpression(), 0);
 }
 
 function __jspeConditionalExpression($0) {
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 24 >> 2] = $0;
  block : {
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 63) {
    jslGetNextToken();
    block1 : {
     if ((HEAP32[92138] & 63) != 1) {
      jsvUnLock(jspeAssignmentExpression());
      if (!(jslMatch(58) & 1)) {
       HEAP32[$1 + 28 >> 2] = 0;
       break block;
      }
      jsvUnLock(jspeAssignmentExpression());
      break block1;
     }
     HEAP8[$1 + 23 | 0] = jsvGetBoolAndUnLock(jsvSkipName(HEAP32[$1 + 24 >> 2])) & 1;
     jsvUnLock(HEAP32[$1 + 24 >> 2]);
     block2 : {
      if (HEAP8[$1 + 23 | 0] & 1) {
       HEAP32[$1 + 24 >> 2] = jsvSkipNameAndUnLock(jspeAssignmentExpression());
       if (!(jslMatch(58) & 1)) {
        HEAP32[$1 + 28 >> 2] = 0;
        break block;
       }
       HEAP32[$1 + 16 >> 2] = HEAP32[92138];
       jspSetNoExecute();
       jsvUnLock(jspeAssignmentExpression());
       HEAP32[92138] = HEAP32[92138] & -1664 | HEAP32[$1 + 16 >> 2] & 1663;
       break block2;
      }
      HEAP32[$1 + 12 >> 2] = HEAP32[92138];
      jspSetNoExecute();
      jsvUnLock(jspeAssignmentExpression());
      HEAP32[92138] = HEAP32[92138] & -1664 | HEAP32[$1 + 12 >> 2] & 1663;
      if (!(jslMatch(58) & 1)) {
       HEAP32[$1 + 28 >> 2] = 0;
       break block;
      }
      HEAP32[$1 + 24 >> 2] = jsvSkipNameAndUnLock(jspeAssignmentExpression());
     }
    }
   }
   HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 24 >> 2];
  }
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 28 >> 2];
 }
 
 function jspeConditionalExpression() {
  return __jspeConditionalExpression(jspeBinaryExpression());
 }
 
 function __jspeAssignmentExpression($0) {
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 28 >> 2] = $0;
  block1 : {
   block : {
    if (HEAPU16[HEAP32[50123] + 2 >> 1] == 61 | HEAPU16[HEAP32[50123] + 2 >> 1] == 150 | (HEAPU16[HEAP32[50123] + 2 >> 1] == 151 | HEAPU16[HEAP32[50123] + 2 >> 1] == 154)) {
     break block
    }
    if (HEAPU16[HEAP32[50123] + 2 >> 1] == 155 | HEAPU16[HEAP32[50123] + 2 >> 1] == 156 | (HEAPU16[HEAP32[50123] + 2 >> 1] == 157 | HEAPU16[HEAP32[50123] + 2 >> 1] == 159)) {
     break block
    }
    if (HEAPU16[HEAP32[50123] + 2 >> 1] == 161 | HEAPU16[HEAP32[50123] + 2 >> 1] == 148 | HEAPU16[HEAP32[50123] + 2 >> 1] == 144) {
     break block
    }
    if (HEAPU16[HEAP32[50123] + 2 >> 1] != 149) {
     break block1
    }
   }
   HEAP32[$1 + 20 >> 2] = HEAP16[HEAP32[50123] + 2 >> 1] << 16 >> 16;
   jslGetNextToken();
   HEAP32[$1 + 24 >> 2] = jspeAssignmentExpression();
   HEAP32[$1 + 24 >> 2] = jsvSkipNameAndUnLock(HEAP32[$1 + 24 >> 2]);
   if (!(!HEAP32[$1 + 28 >> 2] | (HEAP32[92138] & 63) != 1)) {
    block3 : {
     if (HEAP32[$1 + 20 >> 2] == 61) {
      jsvReplaceWithOrAddToRoot(HEAP32[$1 + 28 >> 2], HEAP32[$1 + 24 >> 2]);
      break block3;
     }
     block4 : {
      if (HEAP32[$1 + 20 >> 2] == 150) {
       HEAP32[$1 + 20 >> 2] = 43;
       break block4;
      }
      block5 : {
       if (HEAP32[$1 + 20 >> 2] == 151) {
        HEAP32[$1 + 20 >> 2] = 45;
        break block5;
       }
       block6 : {
        if (HEAP32[$1 + 20 >> 2] == 154) {
         HEAP32[$1 + 20 >> 2] = 42;
         break block6;
        }
        block7 : {
         if (HEAP32[$1 + 20 >> 2] == 155) {
          HEAP32[$1 + 20 >> 2] = 47;
          break block7;
         }
         block8 : {
          if (HEAP32[$1 + 20 >> 2] == 156) {
           HEAP32[$1 + 20 >> 2] = 37;
           break block8;
          }
          block9 : {
           if (HEAP32[$1 + 20 >> 2] == 157) {
            HEAP32[$1 + 20 >> 2] = 38;
            break block9;
           }
           block10 : {
            if (HEAP32[$1 + 20 >> 2] == 159) {
             HEAP32[$1 + 20 >> 2] = 124;
             break block10;
            }
            block11 : {
             if (HEAP32[$1 + 20 >> 2] == 161) {
              HEAP32[$1 + 20 >> 2] = 94;
              break block11;
             }
             block12 : {
              if (HEAP32[$1 + 20 >> 2] == 148) {
               HEAP32[$1 + 20 >> 2] = 146;
               break block12;
              }
              block13 : {
               if (HEAP32[$1 + 20 >> 2] == 144) {
                HEAP32[$1 + 20 >> 2] = 143;
                break block13;
               }
               if (HEAP32[$1 + 20 >> 2] == 149) {
                HEAP32[$1 + 20 >> 2] = 147
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
     block14 : {
      if (HEAP32[$1 + 20 >> 2] != 43) {
       break block14
      }
      if (!(jsvIsName(HEAP32[$1 + 28 >> 2]) & 1)) {
       break block14
      }
      HEAP32[$1 + 16 >> 2] = jsvSkipName(HEAP32[$1 + 28 >> 2]);
      block15 : {
       if (!(jsvIsBasicString(HEAP32[$1 + 16 >> 2]) & 1)) {
        break block15
       }
       if ((jsvGetRefs(HEAP32[$1 + 16 >> 2]) & 65535) != 1 | HEAP32[$1 + 24 >> 2] == HEAP32[$1 + 16 >> 2]) {
        break block15
       }
       HEAP32[$1 + 12 >> 2] = jsvAsString(HEAP32[$1 + 24 >> 2]);
       jsvAppendStringVarComplete(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 12 >> 2]);
       jsvUnLock(HEAP32[$1 + 12 >> 2]);
       HEAP32[$1 + 20 >> 2] = 0;
      }
      jsvUnLock(HEAP32[$1 + 16 >> 2]);
     }
     if (HEAP32[$1 + 20 >> 2]) {
      HEAP32[$1 + 8 >> 2] = jsvMathsOpSkipNames(HEAP32[$1 + 28 >> 2], HEAP32[$1 + 24 >> 2], HEAP32[$1 + 20 >> 2]);
      jsvReplaceWith(HEAP32[$1 + 28 >> 2], HEAP32[$1 + 8 >> 2]);
      jsvUnLock(HEAP32[$1 + 8 >> 2]);
     }
    }
   }
   jsvUnLock(HEAP32[$1 + 24 >> 2]);
   HEAP32[$1 + 28 >> 2] = jsvSkipNameAndUnLock(HEAP32[$1 + 28 >> 2]);
  }
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 28 >> 2];
 }
 
 function jspeSkipBlock() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = 1;
  HEAP32[$0 + 8 >> 2] = HEAP32[92138];
  HEAP32[92138] = HEAP32[92138] & -64;
  while (1) {
   $1 = 0;
   block : {
    $1 = HEAP16[HEAP32[50123] + 2 >> 1] << 16 >> 16 ? HEAP32[$0 + 12 >> 2] != 0 : $1;
    if (!$1) {
     break block
    }
    block1 : {
     if (HEAPU16[HEAP32[50123] + 2 >> 1] == 123) {
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
      break block1;
     }
     if (HEAPU16[HEAP32[50123] + 2 >> 1] == 125) {
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] - 1;
      if (!HEAP32[$0 + 12 >> 2]) {
       break block
      }
     }
    }
    jslGetNextToken();
    continue;
   }
   break;
  };
  HEAP32[92138] = HEAP32[$0 + 8 >> 2];
  __stack_pointer = $0 + 16 | 0;
 }
 
 function jspeBlockStart() {
  var $0 = 0;
  HEAP8[368540] = HEAPU8[368540] + 1;
  $0 = __stack_pointer - 16 | 0;
  HEAP32[$0 + 12 >> 2] = HEAP32[92134];
  HEAP32[92134] = 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function jspeBlockEnd($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  if (HEAP32[92134]) {
   jspeiRemoveScope();
   jsvUnLock(HEAP32[92134]);
   HEAP32[92134] = 0;
  }
  HEAP32[92134] = HEAP32[$1 + 12 >> 2];
  HEAP8[368540] = HEAPU8[368540] - 1;
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jspeStatement() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  block2 : {
   block1 : {
    block : {
     if (HEAPU16[HEAP32[50123] + 2 >> 1] == 128 | HEAPU16[HEAP32[50123] + 2 >> 1] == 129 | (HEAPU16[HEAP32[50123] + 2 >> 1] == 130 | HEAPU16[HEAP32[50123] + 2 >> 1] == 131)) {
      break block
     }
     if (HEAPU16[HEAP32[50123] + 2 >> 1] == 133 | HEAPU16[HEAP32[50123] + 2 >> 1] == 135 | (HEAPU16[HEAP32[50123] + 2 >> 1] == 184 | HEAPU16[HEAP32[50123] + 2 >> 1] == 182)) {
      break block
     }
     if (HEAPU16[HEAP32[50123] + 2 >> 1] == 183 | HEAPU16[HEAP32[50123] + 2 >> 1] == 180 | (HEAPU16[HEAP32[50123] + 2 >> 1] == 181 | HEAPU16[HEAP32[50123] + 2 >> 1] == 175)) {
      break block
     }
     if (HEAPU16[HEAP32[50123] + 2 >> 1] == 190 | HEAPU16[HEAP32[50123] + 2 >> 1] == 191 | (HEAPU16[HEAP32[50123] + 2 >> 1] == 192 | HEAPU16[HEAP32[50123] + 2 >> 1] == 196)) {
      break block
     }
     if (HEAPU16[HEAP32[50123] + 2 >> 1] == 152 | HEAPU16[HEAP32[50123] + 2 >> 1] == 153 | (HEAPU16[HEAP32[50123] + 2 >> 1] == 33 | HEAPU16[HEAP32[50123] + 2 >> 1] == 45)) {
      break block
     }
     if (HEAPU16[HEAP32[50123] + 2 >> 1] == 43 | HEAPU16[HEAP32[50123] + 2 >> 1] == 126 | HEAPU16[HEAP32[50123] + 2 >> 1] == 91) {
      break block
     }
     if (HEAPU16[HEAP32[50123] + 2 >> 1] != 40) {
      break block1
     }
    }
    HEAP32[$0 + 12 >> 2] = jspeExpression();
    break block2;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 123) {
    if (!(jspCheckStackPosition() & 1)) {
     HEAP32[$0 + 12 >> 2] = 0;
     break block2;
    }
    jspeBlock();
    HEAP32[$0 + 12 >> 2] = 0;
    break block2;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 59) {
    jslGetNextToken();
    HEAP32[$0 + 12 >> 2] = 0;
    break block2;
   }
   if (!(!(HEAPU16[HEAP32[50123] + 2 >> 1] == 172 | HEAPU16[HEAP32[50123] + 2 >> 1] == 173) & HEAPU16[HEAP32[50123] + 2 >> 1] != 174)) {
    HEAP32[$0 + 12 >> 2] = jspeStatementVar();
    break block2;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 163) {
    HEAP32[$0 + 12 >> 2] = jspeStatementIf();
    break block2;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 165) {
    HEAP32[$0 + 12 >> 2] = jspeStatementDoOrWhile(0);
    break block2;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 166) {
    HEAP32[$0 + 12 >> 2] = jspeStatementDoOrWhile(1);
    break block2;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 167) {
    HEAP32[$0 + 12 >> 2] = jspeStatementFor();
    break block2;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 177) {
    HEAP32[$0 + 12 >> 2] = jspeStatementTry();
    break block2;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 171) {
    HEAP32[$0 + 12 >> 2] = jspeStatementReturn();
    break block2;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 176) {
    HEAP32[$0 + 12 >> 2] = jspeStatementThrow();
    break block2;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 170) {
    HEAP32[$0 + 12 >> 2] = jspeStatementFunctionDecl(0);
    break block2;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 194) {
    HEAP32[$0 + 12 >> 2] = jspeStatementFunctionDecl(1);
    break block2;
   }
   block6 : {
    if (HEAPU16[HEAP32[50123] + 2 >> 1] == 169) {
     jslGetNextToken();
     if ((HEAP32[92138] & 63) == 1) {
      block5 : {
       if (!(HEAP32[92138] & 512)) {
        jsExceptionHere(2, 128650, 0);
        break block5;
       }
       HEAP32[92138] = HEAP32[92138] & -64 | 4;
      }
     }
     break block6;
    }
    block8 : {
     if (HEAPU16[HEAP32[50123] + 2 >> 1] == 168) {
      jslGetNextToken();
      if ((HEAP32[92138] & 63) == 1) {
       block7 : {
        if (!(HEAP32[92138] & 1536)) {
         jsExceptionHere(2, 128698, 0);
         break block7;
        }
        HEAP32[92138] = HEAP32[92138] & -64 | 2;
       }
      }
      break block8;
     }
     if (HEAPU16[HEAP32[50123] + 2 >> 1] == 187) {
      HEAP32[$0 + 12 >> 2] = jspeStatementSwitch();
      break block2;
     }
     block9 : {
      if (HEAPU16[HEAP32[50123] + 2 >> 1] == 193) {
       jslGetNextToken();
       break block9;
      }
      if (!(jslMatch(0) & 1)) {
       HEAP32[$0 + 12 >> 2] = 0;
       break block2;
      }
     }
    }
   }
   HEAP32[$0 + 12 >> 2] = 0;
  }
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function jspeBlockOrStatement() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  block : {
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 123) {
    jspeBlock();
    HEAP32[$0 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$0 + 8 >> 2] = jspeStatement();
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
  }
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function jspParse() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = 0;
  while (1) {
   $1 = 0;
   $1 = HEAP32[92138] & 80 ? $1 : HEAPU16[HEAP32[50123] + 2 >> 1] != 0;
   if ($1) {
    jsvUnLock(HEAP32[$0 + 12 >> 2]);
    HEAP32[$0 + 12 >> 2] = jspeBlockOrStatement();
    while (1) {
     if (HEAPU16[HEAP32[50123] + 2 >> 1] == 59) {
      jslGetNextToken();
      continue;
     }
     break;
    };
    jsvCheckReferenceError(HEAP32[$0 + 12 >> 2]);
    continue;
   }
   break;
  };
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function jspeStatementVar() {
  var $0 = 0, $1 = 0, $2 = 0;
  $0 = __stack_pointer - 32 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 24 >> 2] = 0;
  block : {
   if (HEAPU16[HEAP32[50123] + 2 >> 1] != 173) {
    $1 = 0;
    if (HEAPU16[HEAP32[50123] + 2 >> 1] != 174) {
     break block
    }
   }
   $1 = HEAPU8[368540] != 0;
  }
  HEAP8[$0 + 23 | 0] = $1;
  HEAP8[$0 + 22 | 0] = HEAPU16[HEAP32[50123] + 2 >> 1] == 174;
  jslGetNextToken();
  HEAP8[$0 + 21 | 0] = 1;
  while (1) {
   $1 = 0;
   block1 : {
    if (!(HEAP8[$0 + 21 | 0] & 1)) {
     break block1
    }
    $1 = 0;
    if (HEAPU16[HEAP32[50123] + 2 >> 1] != 128) {
     break block1
    }
    $1 = jspIsInterrupted() ^ -1;
   }
   if ($1 & 1) {
    block3 : {
     HEAP32[$0 + 16 >> 2] = 0;
     if ((HEAP32[92138] & 63) == 1) {
      HEAP32[$0 + 12 >> 2] = jslGetTokenValueAsString();
      block2 : {
       if (HEAP8[$0 + 23 | 0] & 1) {
        if (!HEAP32[92134]) {
         HEAP32[92134] = jsvNewObject();
         jspeiAddScope(HEAP32[92134]);
        }
        HEAP32[$0 + 16 >> 2] = jsvFindOrAddChildFromString(HEAP32[92134], HEAP32[$0 + 12 >> 2]);
        break block2;
       }
       HEAP32[$0 + 16 >> 2] = jsvFindOrAddChildFromString(HEAP32[92133], HEAP32[$0 + 12 >> 2]);
      }
      if (!HEAP32[$0 + 16 >> 2]) {
       jspSetError();
       break block3;
      }
     }
     if (!(jslMatch(128) & 1)) {
      jsvUnLock(HEAP32[$0 + 16 >> 2]);
      break block3;
     }
     if (HEAPU16[HEAP32[50123] + 2 >> 1] == 61) {
      if (!(jslMatch(61) & 1)) {
       jsvUnLock(HEAP32[$0 + 16 >> 2]);
       break block3;
      }
      HEAP32[$0 + 8 >> 2] = jsvSkipNameAndUnLock(jspeAssignmentExpression());
      if ((HEAP32[92138] & 63) == 1) {
       jsvReplaceWith(HEAP32[$0 + 16 >> 2], HEAP32[$0 + 8 >> 2])
      }
      jsvUnLock(HEAP32[$0 + 8 >> 2]);
     }
     if (HEAP8[$0 + 22 | 0] & 1 & (HEAP32[92138] & 63) == 1) {
      $2 = HEAP32[$0 + 16 >> 2];
      $1 = HEAPU8[$2 + 12 | 0] | HEAPU8[$2 + 13 | 0] << 8 | 64;
      HEAP8[$2 + 12 | 0] = $1;
      HEAP8[$2 + 13 | 0] = $1 >>> 8;
     }
     jsvUnLock(HEAP32[$0 + 24 >> 2]);
     HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 16 >> 2];
     HEAP8[$0 + 21 | 0] = HEAPU16[HEAP32[50123] + 2 >> 1] == 44;
     if (HEAP8[$0 + 21 | 0] & 1) {
      if (!(jslMatch(44) & 1)) {
       break block3
      }
     }
     continue;
    }
   }
   break;
  };
  HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 24 >> 2];
  __stack_pointer = $0 + 32 | 0;
  return HEAP32[$0 + 28 >> 2];
 }
 
 function jspeStatementIf() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 48 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 32 >> 2] = 0;
  jslGetNextToken();
  block : {
   if (!(jslMatch(40) & 1)) {
    HEAP32[$0 + 44 >> 2] = 0;
    break block;
   }
   HEAP32[$0 + 36 >> 2] = jspeExpression();
   if (HEAP32[92138] & 80) {
    HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 36 >> 2];
    break block;
   }
   if (!(jslMatch(41) & 1)) {
    HEAP32[$0 + 44 >> 2] = 0;
    break block;
   }
   if ((HEAP32[92138] & 63) == 1) {
    $1 = jsvGetBoolAndUnLock(jsvSkipName(HEAP32[$0 + 36 >> 2]))
   }
   HEAP8[$0 + 43 | 0] = $1 & 1;
   jsvUnLock(HEAP32[$0 + 36 >> 2]);
   HEAP32[$0 + 28 >> 2] = HEAP32[92138];
   if (!(HEAP8[$0 + 43 | 0] & 1)) {
    jspSetNoExecute()
   }
   HEAP32[$0 + 24 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = 0;
   if (HEAPU16[HEAP32[50123] + 2 >> 1] != 59) {
    HEAP32[$0 + 20 >> 2] = jspeBlockOrStatement()
   }
   HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] | HEAP32[92138] & 112;
   block1 : {
    if (!(HEAP8[$0 + 43 | 0] & 1)) {
     jsvUnLock(HEAP32[$0 + 20 >> 2]);
     HEAP32[92138] = HEAP32[92138] & -1664 | HEAP32[$0 + 28 >> 2] & 1663;
     HEAP32[92138] = HEAP32[$0 + 24 >> 2] | HEAP32[92138];
     break block1;
    }
    HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 20 >> 2];
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 59) {
    jslGetNextToken()
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 164) {
    jslGetNextToken();
    HEAP32[$0 + 16 >> 2] = HEAP32[92138];
    if (HEAP8[$0 + 43 | 0] & 1) {
     jspSetNoExecute()
    }
    HEAP32[$0 + 12 >> 2] = 0;
    if (HEAPU16[HEAP32[50123] + 2 >> 1] != 59) {
     HEAP32[$0 + 12 >> 2] = jspeBlockOrStatement()
    }
    HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] | HEAP32[92138] & 112;
    block2 : {
     if (HEAP8[$0 + 43 | 0] & 1) {
      jsvUnLock(HEAP32[$0 + 12 >> 2]);
      HEAP32[92138] = HEAP32[92138] & -1664 | HEAP32[$0 + 16 >> 2] & 1663;
      HEAP32[92138] = HEAP32[$0 + 24 >> 2] | HEAP32[92138];
      break block2;
     }
     HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 12 >> 2];
    }
   }
   HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 32 >> 2];
  }
  __stack_pointer = $0 + 48 | 0;
  return HEAP32[$0 + 44 >> 2];
 }
 
 function jspeStatementSwitch() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 48 | 0;
  __stack_pointer = $0;
  jslGetNextToken();
  block : {
   if (!(jslMatch(40) & 1)) {
    break block
   }
   HEAP32[$0 + 40 >> 2] = jspeExpression();
   HEAP32[$0 + 36 >> 2] = HEAP32[92138] & 512;
   HEAP32[$0 + 32 >> 2] = HEAP32[92138];
   HEAP8[$0 + 31 | 0] = (HEAP32[92138] & 63) == 1;
   if (!(jslMatch(41) & 1)) {
    jsvUnLock(HEAP32[$0 + 40 >> 2]);
    break block;
   }
   if (!(HEAP8[$0 + 31 | 0] & 1)) {
    jsvUnLock(HEAP32[$0 + 40 >> 2]);
    jspeBlock();
    break block;
   }
   if (!(jslMatch(123) & 1)) {
    jsvUnLock(HEAP32[$0 + 40 >> 2]);
    break block;
   }
   HEAP8[$0 + 30 | 0] = 1;
   if (HEAP8[$0 + 31 | 0] & 1) {
    HEAP32[92138] = HEAP32[$0 + 36 >> 2] | 1024
   }
   while (1) {
    if (HEAPU16[HEAP32[50123] + 2 >> 1] == 188) {
     HEAP32[$0 + 24 >> 2] = HEAP32[92138];
     if (HEAP8[$0 + 31 | 0] & 1) {
      HEAP32[92138] = HEAP32[$0 + 36 >> 2] | 1025
     }
     if (!(jslMatch(188) & 1)) {
      jsvUnLock(HEAP32[$0 + 40 >> 2]);
      break block;
     }
     HEAP32[$0 + 20 >> 2] = jspeAssignmentExpression();
     HEAP32[92138] = HEAP32[$0 + 24 >> 2] | 1024;
     if (!(jslMatch(58) & 1)) {
      jsvUnLock2(HEAP32[$0 + 40 >> 2], HEAP32[$0 + 20 >> 2]);
      break block;
     }
     HEAP8[$0 + 19 | 0] = 0;
     if (HEAP8[$0 + 31 | 0] & 1) {
      HEAP8[$0 + 19 | 0] = jsvGetBoolAndUnLock(jsvMathsOpSkipNames(HEAP32[$0 + 40 >> 2], HEAP32[$0 + 20 >> 2], 139)) & 1
     }
     if (HEAP8[$0 + 19 | 0] & 1) {
      HEAP8[$0 + 30 | 0] = 0
     }
     jsvUnLock(HEAP32[$0 + 20 >> 2]);
     if (!(!(HEAP8[$0 + 19 | 0] & 1) | HEAP32[92138] & 63)) {
      HEAP32[92138] = HEAP32[$0 + 36 >> 2] | 1025
     }
     while (1) {
      $1 = 0;
      block2 : {
       if (HEAP32[92138] & 80) {
        break block2
       }
       $1 = 0;
       if (!HEAPU16[HEAP32[50123] + 2 >> 1]) {
        break block2
       }
       $1 = 0;
       if (HEAPU16[HEAP32[50123] + 2 >> 1] == 188) {
        break block2
       }
       $1 = 0;
       if (HEAPU16[HEAP32[50123] + 2 >> 1] == 189) {
        break block2
       }
       $1 = HEAPU16[HEAP32[50123] + 2 >> 1] != 125;
      }
      if ($1) {
       jsvUnLock(jspeBlockOrStatement());
       continue;
      }
      break;
     };
     HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 32 >> 2] | HEAP32[92138] & 124;
     continue;
    }
    break;
   };
   jsvUnLock(HEAP32[$0 + 40 >> 2]);
   block4 : {
    if (!(!(HEAP8[$0 + 31 | 0] & 1) | (HEAP32[92138] & 63) != 2)) {
     HEAP32[92138] = HEAP32[$0 + 36 >> 2] | 1025;
     break block4;
    }
    HEAP8[$0 + 30 | 0] = 1;
   }
   HEAP32[92138] = HEAP32[92138] & -1664 | HEAP32[$0 + 32 >> 2] & 1663;
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 189) {
    jslGetNextToken();
    if (!(jslMatch(58) & 1)) {
     break block
    }
    HEAP32[$0 + 12 >> 2] = HEAP32[92138];
    block5 : {
     if (!(HEAP8[$0 + 30 | 0] & 1)) {
      jspSetNoExecute();
      break block5;
     }
     HEAP32[92138] = HEAP32[92138] | 1024;
    }
    while (1) {
     $1 = 0;
     block6 : {
      if (HEAP32[92138] & 80) {
       break block6
      }
      $1 = 0;
      if (!HEAPU16[HEAP32[50123] + 2 >> 1]) {
       break block6
      }
      $1 = 0;
      if (HEAPU16[HEAP32[50123] + 2 >> 1] == 125) {
       break block6
      }
      $1 = HEAPU16[HEAP32[50123] + 2 >> 1] != 188;
     }
     if ($1) {
      jsvUnLock(jspeBlockOrStatement());
      continue;
     }
     break;
    };
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] | HEAP32[92138] & 124;
    HEAP32[92138] = HEAP32[92138] & -3;
    HEAP32[92138] = HEAP32[92138] & -1664 | HEAP32[$0 + 12 >> 2] & 1663;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 188) {
    jsExceptionHere(2, 138559, 0);
    break block;
   }
   jslMatch(125);
  }
  HEAP32[$0 + 44 >> 2] = 0;
  __stack_pointer = $0 + 48 | 0;
  return HEAP32[$0 + 44 >> 2];
 }
 
 function jspeStatementDoOrWhile($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $1 = __stack_pointer - 160 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 155 | 0] = $0;
  HEAP8[$1 + 147 | 0] = 1;
  HEAP8[$1 + 146 | 0] = 0;
  HEAP8[$1 + 103 | 0] = (HEAP32[92138] & 512) != 0;
  block : {
   block1 : {
    if (HEAP8[$1 + 155 | 0] & 1) {
     jslGetNextToken();
     jslCharPosFromLex($1 + 104 | 0);
     if (!(jslMatch(40) & 1)) {
      jslCharPosFree($1 + 104 | 0);
      break block;
     }
     HEAP32[$1 + 148 >> 2] = jspeExpression();
     if ((HEAP32[92138] & 63) == 1) {
      $3 = jsvGetBoolAndUnLock(jsvSkipName(HEAP32[$1 + 148 >> 2]))
     }
     HEAP8[$1 + 147 | 0] = $3 & 1;
     jsvUnLock(HEAP32[$1 + 148 >> 2]);
     jslCharPosFromLex($1 + 60 | 0);
     if (!(jslMatch(41) & 1)) {
      jslCharPosFree($1 + 60 | 0);
      jslCharPosFree($1 + 104 | 0);
      break block;
     }
     break block1;
    }
    jslCharPosFromLex($1 + 60 | 0);
    if (!(jslMatch(165) & 1)) {
     jslCharPosFree($1 + 60 | 0);
     break block;
    }
    jslCharPosClear($1 + 104 | 0);
   }
   HEAP32[$1 + 56 >> 2] = HEAP32[92138];
   if (!(HEAP8[$1 + 147 | 0] & 1)) {
    jspSetNoExecute()
   }
   HEAP32[92138] = HEAP32[92138] | 512;
   $2 = HEAP8[$1 + 155 | 0] & 1 ? $2 : HEAPU16[HEAP32[50123] + 2 >> 1] != 123;
   HEAP8[$1 + 55 | 0] = $2;
   jsvUnLock(jspeBlockOrStatement());
   if (HEAP8[$1 + 55 | 0] & 1) {
    if (!(jslMatch(59) & 1)) {
     jslCharPosFree($1 + 60 | 0);
     jslCharPosFree($1 + 104 | 0);
     break block;
    }
   }
   if (!(HEAP8[$1 + 103 | 0] & 1)) {
    HEAP32[92138] = HEAP32[92138] & -513
   }
   HEAP8[$1 + 146 | 0] = jspeCheckBreakContinue() & 1 | HEAP8[$1 + 146 | 0] & 1;
   if (!(HEAP8[$1 + 147 | 0] & 1)) {
    HEAP32[92138] = HEAP32[92138] & -1664 | HEAP32[$1 + 56 >> 2] & 1663
   }
   if (!(HEAP8[$1 + 155 | 0] & 1)) {
    if (!(jslMatch(166) & 1)) {
     jslCharPosFree($1 + 60 | 0);
     break block;
    }
    jslCharPosFromLex($1 + 104 | 0);
    if (!(jslMatch(40) & 1)) {
     jslCharPosFree($1 + 60 | 0);
     jslCharPosFree($1 + 104 | 0);
     break block;
    }
    HEAP32[$1 + 148 >> 2] = jspeExpression();
    if ((HEAP32[92138] & 63) == 1) {
     $4 = jsvGetBoolAndUnLock(jsvSkipName(HEAP32[$1 + 148 >> 2]))
    }
    HEAP8[$1 + 147 | 0] = $4 & 1;
    jsvUnLock(HEAP32[$1 + 148 >> 2]);
    if (!(jslMatch(41) & 1)) {
     jslCharPosFree($1 + 60 | 0);
     jslCharPosFree($1 + 104 | 0);
     break block;
    }
   }
   jslCharPosNew($1 + 12 | 0, HEAP32[HEAP32[50123] + 84 >> 2], HEAP32[HEAP32[50123] + 4 >> 2]);
   HEAP32[$1 + 8 >> 2] = 0;
   while (1) {
    $0 = 0;
    $0 = HEAP8[$1 + 146 | 0] & 1 ? $0 : HEAPU8[$1 + 147 | 0];
    if ($0 & 1) {
     if (HEAP8[$1 + 155 | 0] & 1 | HEAP32[$1 + 8 >> 2]) {
      jslSeekToP($1 + 104 | 0);
      HEAP32[$1 + 148 >> 2] = jspeExpression();
      $0 = 0;
      if ((HEAP32[92138] & 63) == 1) {
       $0 = jsvGetBoolAndUnLock(jsvSkipName(HEAP32[$1 + 148 >> 2]))
      }
      HEAP8[$1 + 147 | 0] = $0 & 1;
      jsvUnLock(HEAP32[$1 + 148 >> 2]);
     }
     if (HEAP8[$1 + 147 | 0] & 1) {
      jslSeekToP($1 + 60 | 0);
      HEAP32[92138] = HEAP32[92138] | 512;
      jspDebuggerLoopIfCtrlC();
      jsvUnLock(jspeBlockOrStatement());
      if (!(HEAP8[$1 + 103 | 0] & 1)) {
       HEAP32[92138] = HEAP32[92138] & -513
      }
      HEAP8[$1 + 146 | 0] = jspeCheckBreakContinue() & 1 | HEAP8[$1 + 146 | 0] & 1;
     }
     HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
     continue;
    }
    break;
   };
   jslSeekToP($1 + 12 | 0);
   jslCharPosFree($1 + 104 | 0);
   jslCharPosFree($1 + 60 | 0);
   jslCharPosFree($1 + 12 | 0);
  }
  HEAP32[$1 + 156 >> 2] = 0;
  __stack_pointer = $1 + 160 | 0;
  return HEAP32[$1 + 156 >> 2];
 }
 
 function jspeCheckBreakContinue() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  block1 : {
   block : {
    if (HEAP32[92138] & 4) {
     HEAP32[92138] = HEAP32[92138] & -64 | 1;
     break block;
    }
    if (HEAP32[92138] & 2) {
     HEAP32[92138] = HEAP32[92138] & -64 | 1;
     HEAP8[$0 + 15 | 0] = 1;
     break block1;
    }
   }
   HEAP8[$0 + 15 | 0] = 0;
  }
  return HEAP8[$0 + 15 | 0] & 1;
 }
 
 function jspGetBuiltinPrototype($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 4 >> 2] = jspFindPrototypeFor(123888);
    if (HEAP32[$1 + 4 >> 2]) {
     HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
     break block;
    }
   }
   block1 : {
    if (!(jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1)) {
     if (!(jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1)) {
      break block1
     }
    }
    HEAP32[$1 >> 2] = jspFindPrototypeFor(125086);
    if (HEAP32[$1 >> 2] == HEAP32[$1 + 8 >> 2]) {
     jsvUnLock(HEAP32[$1 >> 2]);
     HEAP32[$1 >> 2] = 0;
    }
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
    break block;
   }
   HEAP32[$1 + 12 >> 2] = 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jspeStatementFor() {
  var $0 = 0, $1 = 0, $2 = 0;
  $0 = __stack_pointer - 400 | 0;
  __stack_pointer = $0;
  jslGetNextToken();
  block : {
   if (!(jslMatch(40) & 1)) {
    break block
   }
   HEAP8[$0 + 395 | 0] = (HEAP32[92138] & 512) != 0;
   HEAP32[92138] = HEAP32[92138] | 256;
   HEAP32[$0 + 388 >> 2] = jspeBlockStart();
   HEAP32[$0 + 384 >> 2] = 0;
   HEAP8[$0 + 383 | 0] = HEAPU16[HEAP32[50123] + 2 >> 1] == 174;
   if (HEAPU16[HEAP32[50123] + 2 >> 1] != 59) {
    HEAP32[$0 + 384 >> 2] = jspeStatement()
   }
   if (jspIsInterrupted() & 1) {
    jsvUnLock(HEAP32[$0 + 384 >> 2]);
    jspeBlockEnd(HEAP32[$0 + 388 >> 2]);
    break block;
   }
   HEAP32[92138] = HEAP32[92138] & -257;
   block10 : {
    if (!(HEAPU16[HEAP32[50123] + 2 >> 1] != 185 & HEAPU16[HEAP32[50123] + 2 >> 1] != 198)) {
     HEAP8[$0 + 382 | 0] = HEAPU16[HEAP32[50123] + 2 >> 1] == 198;
     block2 : {
      if ((HEAP32[92138] & 63) != 1) {
       break block2
      }
      if (jsvIsName(HEAP32[$0 + 384 >> 2]) & 1) {
       break block2
      }
      jsvUnLock(HEAP32[$0 + 384 >> 2]);
      $1 = HEAP8[$0 + 382 | 0] & 1;
      HEAP32[$0 + 20 >> 2] = HEAP32[$0 + 384 >> 2];
      HEAP32[$0 + 16 >> 2] = $1 ? 136874 : 135451;
      jsExceptionHere(1, 125296, $0 + 16 | 0);
      jspeBlockEnd(HEAP32[$0 + 388 >> 2]);
      break block;
     }
     jslGetNextToken();
     HEAP32[$0 + 376 >> 2] = jsvSkipNameAndUnLock(jspeExpression());
     jslCharPosFromLex($0 + 336 | 0);
     if (!(jslMatch(41) & 1)) {
      jsvUnLock2(HEAP32[$0 + 384 >> 2], HEAP32[$0 + 376 >> 2]);
      jslCharPosFree($0 + 336 | 0);
      jspeBlockEnd(HEAP32[$0 + 388 >> 2]);
      break block;
     }
     HEAP32[$0 + 332 >> 2] = HEAP32[92138];
     jspSetNoExecute();
     HEAP32[92138] = HEAP32[92138] | 512;
     jsvUnLock(jspeBlockOrStatement());
     jslCharPosNew($0 + 292 | 0, HEAP32[HEAP32[50123] + 84 >> 2], HEAP32[HEAP32[50123] + 4 >> 2]);
     if (!(HEAP8[$0 + 395 | 0] & 1)) {
      HEAP32[92138] = HEAP32[92138] & -513
     }
     HEAP32[92138] = HEAP32[92138] & -1664 | HEAP32[$0 + 332 >> 2] & 1663;
     if ((HEAP32[92138] & 63) == 1) {
      block9 : {
       if (jsvIsIterable(HEAP32[$0 + 376 >> 2]) & 1) {
        HEAP32[$0 + 288 >> 2] = jsvGetInternalFunctionCheckerFor(HEAP32[$0 + 376 >> 2]);
        HEAP32[$0 + 284 >> 2] = 0;
        if (!(HEAP8[$0 + 382 | 0] & 1)) {
         HEAP32[$0 + 284 >> 2] = jspGetBuiltinPrototype(HEAP32[$0 + 376 >> 2])
        }
        jsvIteratorNew($0 + 224 | 0, HEAP32[$0 + 376 >> 2], HEAP8[$0 + 382 | 0] & 1);
        HEAP8[$0 + 223 | 0] = 0;
        while (1) {
         $1 = 0;
         block3 : {
          if ((HEAP32[92138] & 63) != 1) {
           break block3
          }
          $1 = 0;
          if (!(jsvIteratorHasElement($0 + 224 | 0) & 1)) {
           break block3
          }
          $1 = HEAPU8[$0 + 223 | 0] ^ -1;
         }
         if ($1 & 1) {
          HEAP32[$0 + 216 >> 2] = jsvIteratorGetKey($0 + 224 | 0);
          HEAP8[$0 + 215 | 0] = 0;
          block4 : {
           if (!HEAP32[$0 + 288 >> 2]) {
            break block4
           }
           if (!(FUNCTION_TABLE[HEAP32[$0 + 288 >> 2]](HEAP32[$0 + 216 >> 2]) & 1)) {
            break block4
           }
           HEAP8[$0 + 215 | 0] = 1;
           block5 : {
            if (HEAP8[$0 + 382 | 0] & 1) {
             break block5
            }
            if (!(jsvIsString(HEAP32[$0 + 216 >> 2]) & 1)) {
             break block5
            }
            if (!(jsvIsStringEqual(HEAP32[$0 + 216 >> 2], 140424) & 1)) {
             break block5
            }
            HEAP32[$0 + 284 >> 2] = jsvSkipName(HEAP32[$0 + 216 >> 2]);
           }
          }
          if (!(HEAP8[$0 + 215 | 0] & 1)) {
           block6 : {
            if (HEAP8[$0 + 382 | 0] & 1) {
             HEAP32[$0 + 208 >> 2] = jsvIteratorGetValue($0 + 224 | 0);
             break block6;
            }
            HEAP32[$0 + 208 >> 2] = jsvAsString(HEAP32[$0 + 216 >> 2]);
           }
           if (HEAP8[$0 + 382 | 0] & 1 | HEAP32[$0 + 208 >> 2]) {
            if (HEAP8[$0 + 383 | 0] & 1) {
             $1 = HEAP32[$0 + 384 >> 2];
             $2 = (HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & -65;
             HEAP8[$1 + 12 | 0] = $2;
             HEAP8[$1 + 13 | 0] = $2 >>> 8;
            }
            jsvReplaceWithOrAddToRoot(HEAP32[$0 + 384 >> 2], HEAP32[$0 + 208 >> 2]);
            if (HEAP8[$0 + 383 | 0] & 1) {
             $1 = HEAP32[$0 + 384 >> 2];
             $2 = HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8 | 64;
             HEAP8[$1 + 12 | 0] = $2;
             HEAP8[$1 + 13 | 0] = $2 >>> 8;
            }
            jsvUnLock(HEAP32[$0 + 208 >> 2]);
            jslSeekToP($0 + 336 | 0);
            HEAP32[92138] = HEAP32[92138] | 512;
            jspDebuggerLoopIfCtrlC();
            jsvUnLock(jspeBlockOrStatement());
            if (!(HEAP8[$0 + 395 | 0] & 1)) {
             HEAP32[92138] = HEAP32[92138] & -513
            }
            HEAP8[$0 + 223 | 0] = jspeCheckBreakContinue() & 1 | HEAP8[$0 + 223 | 0] & 1;
           }
          }
          jsvIteratorNext($0 + 224 | 0);
          jsvUnLock(HEAP32[$0 + 216 >> 2]);
          if (!(jsvIteratorHasElement($0 + 224 | 0) & 1 | HEAP8[$0 + 382 | 0] & 1 | !HEAP32[$0 + 284 >> 2])) {
           jsvIteratorFree($0 + 224 | 0);
           HEAP32[$0 + 204 >> 2] = HEAP32[$0 + 284 >> 2];
           jsvIteratorNew($0 + 224 | 0, HEAP32[$0 + 204 >> 2], 0);
           HEAP32[$0 + 288 >> 2] = jsvGetInternalFunctionCheckerFor(HEAP32[$0 + 204 >> 2]);
           HEAP32[$0 + 284 >> 2] = jspGetBuiltinPrototype(HEAP32[$0 + 204 >> 2]);
           jsvUnLock(HEAP32[$0 + 204 >> 2]);
          }
          continue;
         }
         break;
        };
        jsvUnLock(HEAP32[$0 + 284 >> 2]);
        jsvIteratorFree($0 + 224 | 0);
        break block9;
       }
       if (!(jsvIsUndefined(HEAP32[$0 + 376 >> 2]) & 1)) {
        HEAP32[$0 >> 2] = HEAP32[$0 + 376 >> 2];
        jsExceptionHere(1, 125230, $0);
       }
      }
     }
     jslSeekToP($0 + 292 | 0);
     jslCharPosFree($0 + 336 | 0);
     jslCharPosFree($0 + 292 | 0);
     jsvUnLock2(HEAP32[$0 + 384 >> 2], HEAP32[$0 + 376 >> 2]);
     break block10;
    }
    HEAP8[$0 + 203 | 0] = 1;
    HEAP8[$0 + 202 | 0] = 0;
    jsvUnLock(HEAP32[$0 + 384 >> 2]);
    jslCharPosFromLex($0 + 160 | 0);
    if (!(jslMatch(59) & 1)) {
     jslCharPosFree($0 + 160 | 0);
     jspeBlockEnd(HEAP32[$0 + 388 >> 2]);
     jspeBlockEnd(HEAP32[$0 + 388 >> 2]);
     break block;
    }
    if (HEAPU16[HEAP32[50123] + 2 >> 1] != 59) {
     HEAP32[$0 + 156 >> 2] = jspeExpression();
     if ((HEAP32[92138] & 63) == 1) {
      $1 = jsvGetBoolAndUnLock(jsvSkipName(HEAP32[$0 + 156 >> 2]))
     }
     HEAP8[$0 + 203 | 0] = $1 & 1;
     jsvUnLock(HEAP32[$0 + 156 >> 2]);
    }
    jslCharPosFromLex($0 + 116 | 0);
    if (!(jslMatch(59) & 1)) {
     jslCharPosFree($0 + 160 | 0);
     jslCharPosFree($0 + 116 | 0);
     jspeBlockEnd(HEAP32[$0 + 388 >> 2]);
     break block;
    }
    if (HEAPU16[HEAP32[50123] + 2 >> 1] != 41) {
     HEAP32[$0 + 112 >> 2] = HEAP32[92138];
     jspSetNoExecute();
     jsvUnLock(jspeExpression());
     HEAP32[92138] = HEAP32[92138] & -1664 | HEAP32[$0 + 112 >> 2] & 1663;
    }
    jslSkipWhiteSpace();
    jslCharPosFromLex($0 + 72 | 0);
    if (!(jslMatch(41) & 1)) {
     jslCharPosFree($0 + 160 | 0);
     jslCharPosFree($0 + 116 | 0);
     jslCharPosFree($0 + 72 | 0);
     jspeBlockEnd(HEAP32[$0 + 388 >> 2]);
     break block;
    }
    HEAP32[$0 + 68 >> 2] = HEAP32[92138];
    if (!(HEAP8[$0 + 203 | 0] & 1)) {
     jspSetNoExecute()
    }
    HEAP32[92138] = HEAP32[92138] | 512;
    jsvUnLock(jspeBlockOrStatement());
    jslSkipWhiteSpace();
    jslCharPosNew($0 + 28 | 0, HEAP32[HEAP32[50123] + 84 >> 2], HEAP32[HEAP32[50123] + 4 >> 2]);
    if (!(HEAP8[$0 + 395 | 0] & 1)) {
     HEAP32[92138] = HEAP32[92138] & -513
    }
    if (!(!(HEAP8[$0 + 203 | 0] & 1) & (HEAP32[92138] & 63) == 1)) {
     HEAP8[$0 + 202 | 0] = jspeCheckBreakContinue() & 1 | HEAP8[$0 + 202 | 0] & 1;
     if (HEAP8[$0 + 202 | 0] & 1) {
      HEAP8[$0 + 203 | 0] = 0
     }
    }
    if (!(HEAP8[$0 + 203 | 0] & 1)) {
     HEAP32[92138] = HEAP32[92138] & -1664 | HEAP32[$0 + 68 >> 2] & 1663
    }
    if (HEAP8[$0 + 203 | 0] & 1) {
     jslSeekToP($0 + 116 | 0);
     if (HEAPU16[HEAP32[50123] + 2 >> 1] != 41) {
      jsvUnLock(jspeExpression())
     }
    }
    while (1) {
     $1 = 0;
     block12 : {
      if (HEAP8[$0 + 202 | 0] & 1) {
       break block12
      }
      $1 = 0;
      if ((HEAP32[92138] & 63) != 1) {
       break block12
      }
      $1 = HEAPU8[$0 + 203 | 0];
     }
     if ($1 & 1) {
      jslSeekToP($0 + 160 | 0);
      block13 : {
       if (HEAPU16[HEAP32[50123] + 2 >> 1] == 59) {
        HEAP8[$0 + 203 | 0] = 1;
        break block13;
       }
       HEAP32[$0 + 24 >> 2] = jspeExpression();
       HEAP8[$0 + 203 | 0] = jsvGetBoolAndUnLock(jsvSkipName(HEAP32[$0 + 24 >> 2])) & 1;
       jsvUnLock(HEAP32[$0 + 24 >> 2]);
      }
      if (!(!(HEAP8[$0 + 203 | 0] & 1) | (HEAP32[92138] & 63) != 1)) {
       jslSeekToP($0 + 72 | 0);
       HEAP32[92138] = HEAP32[92138] | 512;
       jspDebuggerLoopIfCtrlC();
       jsvUnLock(jspeBlockOrStatement());
       if (!(HEAP8[$0 + 395 | 0] & 1)) {
        HEAP32[92138] = HEAP32[92138] & -513
       }
       HEAP8[$0 + 202 | 0] = jspeCheckBreakContinue() & 1 | HEAP8[$0 + 202 | 0] & 1;
      }
      if (!(HEAP8[$0 + 202 | 0] & 1 | (!(HEAP8[$0 + 203 | 0] & 1) | (HEAP32[92138] & 63) != 1))) {
       jslSeekToP($0 + 116 | 0);
       if (HEAPU16[HEAP32[50123] + 2 >> 1] != 41) {
        jsvUnLock(jspeExpression())
       }
      }
      continue;
     }
     break;
    };
    jslSeekToP($0 + 28 | 0);
    jslCharPosFree($0 + 160 | 0);
    jslCharPosFree($0 + 116 | 0);
    jslCharPosFree($0 + 72 | 0);
    jslCharPosFree($0 + 28 | 0);
   }
   jspeBlockEnd(HEAP32[$0 + 388 >> 2]);
  }
  HEAP32[$0 + 396 >> 2] = 0;
  __stack_pointer = $0 + 400 | 0;
  return HEAP32[$0 + 396 >> 2];
 }
 
 function jspeStatementTry() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 32 | 0;
  __stack_pointer = $0;
  jslGetNextToken();
  HEAP8[$0 + 27 | 0] = (HEAP32[92138] & 63) == 1;
  jspeBlock();
  $1 = HEAP8[$0 + 27 | 0] & 1 ? (HEAP32[92138] & 32) != 0 : $1;
  HEAP8[$0 + 26 | 0] = $1;
  HEAP8[$0 + 25 | 0] = 0;
  block1 : {
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 178) {
    jslGetNextToken();
    HEAP8[$0 + 25 | 0] = 1;
    HEAP32[$0 + 20 >> 2] = 0;
    HEAP32[$0 + 16 >> 2] = 0;
    block : {
     if (HEAP8[$0 + 27 | 0] & 1) {
      $1 = jspGetException();
      break block;
     }
     $1 = 0;
    }
    HEAP32[$0 + 12 >> 2] = $1;
    if (HEAPU16[HEAP32[50123] + 2 >> 1] == 40) {
     if (!(jslMatch(40) & 1)) {
      break block1
     }
     if (HEAP8[$0 + 26 | 0] & 1) {
      HEAP32[$0 + 16 >> 2] = jsvNewObject();
      if (HEAP32[$0 + 16 >> 2]) {
       HEAP32[$0 + 20 >> 2] = jsvFindOrAddChildFromString(HEAP32[$0 + 16 >> 2], jslGetTokenValueAsString())
      }
     }
     if (!(jslMatch(128) & 1)) {
      jsvUnLock2(HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2]);
      break block1;
     }
     if (!(jslMatch(41) & 1)) {
      jsvUnLock2(HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2]);
      break block1;
     }
     if (HEAP32[$0 + 20 >> 2]) {
      if (HEAP32[$0 + 12 >> 2]) {
       jsvSetValueOfName(HEAP32[$0 + 20 >> 2], HEAP32[$0 + 12 >> 2])
      }
      jsvUnLock(HEAP32[$0 + 20 >> 2]);
     }
    }
    if (HEAP8[$0 + 27 | 0] & 1) {
     HEAP32[92138] = HEAP32[92138] & -33;
     jsvUnLock(HEAP32[$0 + 12 >> 2]);
    }
    block3 : {
     if (!(!(HEAP8[$0 + 27 | 0] & 1) | HEAP8[$0 + 26 | 0] & 1)) {
      HEAP32[$0 + 8 >> 2] = HEAP32[92138];
      jspSetNoExecute();
      jspeBlock();
      HEAP32[92138] = HEAP32[92138] & -1664 | HEAP32[$0 + 8 >> 2] & 1663;
      break block3;
     }
     block4 : {
      if (HEAP32[$0 + 16 >> 2]) {
       if (!(jspeiAddScope(HEAP32[$0 + 16 >> 2]) & 1)) {
        break block4
       }
      }
      jspeBlock();
      if (HEAP32[$0 + 16 >> 2]) {
       jspeiRemoveScope()
      }
     }
    }
    jsvUnLock(HEAP32[$0 + 16 >> 2]);
   }
   block5 : {
    if (HEAPU16[HEAP32[50123] + 2 >> 1] != 179) {
     if (HEAP8[$0 + 25 | 0] & 1 | HEAP32[92138] & 80) {
      break block5
     }
    }
    if (!(jslMatch(179) & 1)) {
     break block1
    }
    HEAP32[$0 + 4 >> 2] = HEAP32[92138];
    if (HEAP8[$0 + 27 | 0] & 1) {
     HEAP32[92138] = HEAP32[92138] & -47 | 1
    }
    jspeBlock();
    HEAP32[92138] = HEAP32[$0 + 4 >> 2];
    if (!(!(HEAP8[$0 + 26 | 0] & 1) | HEAP8[$0 + 25 | 0] & 1)) {
     HEAP32[92138] = HEAP32[92138] | 32
    }
   }
  }
  HEAP32[$0 + 28 >> 2] = 0;
  __stack_pointer = $0 + 32 | 0;
  return HEAP32[$0 + 28 >> 2];
 }
 
 function jspeStatementReturn() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = 0;
  jslGetNextToken();
  if (!(HEAPU16[HEAP32[50123] + 2 >> 1] == 59 | HEAPU16[HEAP32[50123] + 2 >> 1] == 125)) {
   HEAP32[$0 + 12 >> 2] = jsvSkipNameAndUnLock(jspeExpression())
  }
  if ((HEAP32[92138] & 63) == 1) {
   HEAP32[$0 + 8 >> 2] = jspeiFindInScopes(135061);
   block1 : {
    if (HEAP32[$0 + 8 >> 2]) {
     jsvReplaceWith(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2]);
     jsvUnLock(HEAP32[$0 + 8 >> 2]);
     HEAP32[92138] = HEAP32[92138] | 8;
     break block1;
    }
    jsExceptionHere(2, 142413, 0);
   }
  }
  jsvUnLock(HEAP32[$0 + 12 >> 2]);
  __stack_pointer = $0 + 16 | 0;
  return 0;
 }
 
 function jspeStatementThrow() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = 0;
  jslGetNextToken();
  HEAP32[$0 + 12 >> 2] = jsvSkipNameAndUnLock(jspeExpression());
  if ((HEAP32[92138] & 63) == 1) {
   jspSetException(HEAP32[$0 + 12 >> 2])
  }
  jsvUnLock(HEAP32[$0 + 12 >> 2]);
  __stack_pointer = $0 + 16 | 0;
  return 0;
 }
 
 function jspeStatementFunctionDecl($0) {
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 27 | 0] = $0;
  HEAP32[$1 + 20 >> 2] = 0;
  jslGetNextToken();
  HEAP8[$1 + 15 | 0] = (HEAP32[92138] & 63) == 1;
  block : {
   if (HEAP8[$1 + 15 | 0] & 1) {
    HEAP32[$1 + 20 >> 2] = jsvNewNameFromString(jslGetTokenValueAsString());
    if (!HEAP32[$1 + 20 >> 2]) {
     HEAP32[$1 + 28 >> 2] = 0;
     break block;
    }
   }
   if (!(jslMatch(128) & 1)) {
    jsvUnLock(HEAP32[$1 + 20 >> 2]);
    HEAP32[$1 + 28 >> 2] = 0;
    break block;
   }
   block1 : {
    if (HEAP8[$1 + 27 | 0] & 1) {
     $0 = jspeClassDefinition(0);
     break block1;
    }
    $0 = jspeFunctionDefinition(0);
   }
   HEAP32[$1 + 16 >> 2] = $0;
   if (HEAP8[$1 + 15 | 0] & 1) {
    HEAP32[$1 + 8 >> 2] = jsvFindChildFromVar(HEAP32[92133], HEAP32[$1 + 20 >> 2], 1);
    HEAP32[$1 + 4 >> 2] = jsvSkipName(HEAP32[$1 + 8 >> 2]);
    block2 : {
     if (jsvIsFunction(HEAP32[$1 + 4 >> 2]) & 1) {
      HEAP32[$1 + 16 >> 2] = jsvSkipNameAndUnLock(HEAP32[$1 + 16 >> 2]);
      jswrap_function_replaceWith(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 16 >> 2]);
      break block2;
     }
     jsvReplaceWith(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 16 >> 2]);
    }
    jsvUnLock(HEAP32[$1 + 20 >> 2]);
    HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 8 >> 2];
    jsvUnLock(HEAP32[$1 + 4 >> 2]);
   }
   jsvUnLock(HEAP32[$1 + 16 >> 2]);
   HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
  }
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 28 >> 2];
 }
 
 function jspNewObject($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  HEAP32[$2 + 16 >> 2] = jspNewPrototype(HEAP32[$2 + 20 >> 2], 0);
  HEAP32[$2 + 12 >> 2] = jsvNewObject();
  block : {
   if (!HEAP32[$2 + 12 >> 2]) {
    jsvUnLock(HEAP32[$2 + 16 >> 2]);
    HEAP32[$2 + 28 >> 2] = 0;
    break block;
   }
   if (HEAP32[$2 + 24 >> 2]) {
    HEAP8[$2 + 11 | 0] = jshFromDeviceString(HEAP32[$2 + 24 >> 2]);
    if (HEAPU8[$2 + 11 | 0]) {
     HEAP8[HEAP32[$2 + 12 >> 2]] = 68;
     HEAP8[HEAP32[$2 + 12 >> 2] + 1 | 0] = 69;
     HEAP8[HEAP32[$2 + 12 >> 2] + 2 | 0] = 86;
     HEAP8[HEAP32[$2 + 12 >> 2] + 3 | 0] = HEAPU8[$2 + 11 | 0];
    }
   }
   jsvAddNamedChildAndUnLock(HEAP32[$2 + 12 >> 2], jsvSkipNameAndUnLock(HEAP32[$2 + 16 >> 2]), 140424);
   if (HEAP32[$2 + 24 >> 2]) {
    HEAP32[$2 + 4 >> 2] = jsvFindOrAddChildFromString(HEAP32[92130], HEAP32[$2 + 24 >> 2]);
    if (HEAP32[$2 + 4 >> 2]) {
     jsvSetValueOfName(HEAP32[$2 + 4 >> 2], HEAP32[$2 + 12 >> 2])
    }
    jsvUnLock(HEAP32[$2 + 12 >> 2]);
    if (!HEAP32[$2 + 4 >> 2]) {
     HEAP32[$2 + 28 >> 2] = 0;
     break block;
    }
    HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 4 >> 2];
    break block;
   }
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jspGetPrototype($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!(jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1)) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 8 >> 2], 140424);
   if (jsvIsObject(HEAP32[$1 + 4 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
    break block;
   }
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
   HEAP32[$1 + 12 >> 2] = 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jspGetConstructor($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = jspGetPrototype(HEAP32[$1 + 8 >> 2]);
  block : {
   if (HEAP32[$1 + 4 >> 2]) {
    HEAP32[$1 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 4 >> 2], 127861);
    if (jsvIsFunction(HEAP32[$1 >> 2]) & 1) {
     jsvUnLock(HEAP32[$1 + 4 >> 2]);
     HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
     break block;
    }
    jsvUnLock2(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2]);
   }
   HEAP32[$1 + 12 >> 2] = 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jspSoftInit() {
  HEAP32[92130] = jsvFindOrCreateRoot();
  HEAP32[92131] = jsvObjectGetChild(HEAP32[92130], 121118, 5);
  HEAP32[92138] = 1;
  HEAP32[92132] = 0;
  HEAP32[92133] = HEAP32[92130];
  HEAP32[92134] = 0;
  HEAP8[368540] = 0;
 }
 
 function jspSoftKill() {
  jsvUnLock(HEAP32[92132]);
  HEAP32[92132] = 0;
  jsvUnLock(HEAP32[92131]);
  HEAP32[92131] = 0;
  jsvUnLock(HEAP32[92130]);
  HEAP32[92130] = 0;
 }
 
 function jspInit() {
  jspSoftInit();
 }
 
 function jspKill() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  jspSoftKill();
  HEAP32[$0 + 12 >> 2] = jsvFindOrCreateRoot();
  jsvUnRef(HEAP32[$0 + 12 >> 2]);
  jsvUnLock(HEAP32[$0 + 12 >> 2]);
  __stack_pointer = $0 + 16 | 0;
 }
 
 function jspEvaluateVar($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 208 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 204 >> 2] = $0;
  HEAP32[$4 + 200 >> 2] = $1;
  HEAP32[$4 + 196 >> 2] = $2;
  HEAP16[$4 + 194 >> 1] = $3;
  HEAP32[$4 + 56 >> 2] = jslSetLex($4 + 60 | 0);
  jslInit(HEAP32[$4 + 204 >> 2]);
  HEAP32[$4 + 188 >> 2] = HEAP32[$4 + 56 >> 2];
  block : {
   if (HEAP32[$4 + 196 >> 2]) {
    $0 = jsvNewFromString(HEAP32[$4 + 196 >> 2]);
    break block;
   }
   $0 = 0;
  }
  HEAP32[$4 + 184 >> 2] = $0;
  HEAP32[$4 + 48 >> 2] = HEAP32[92138];
  $0 = HEAP32[92137];
  $1 = HEAP32[92136];
  HEAP32[$4 + 40 >> 2] = $1;
  HEAP32[$4 + 44 >> 2] = $0;
  $1 = HEAP32[92135];
  $0 = HEAP32[92134];
  HEAP32[$4 + 32 >> 2] = $0;
  HEAP32[$4 + 36 >> 2] = $1;
  $0 = HEAP32[92133];
  $1 = HEAP32[92132];
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 28 >> 2] = $0;
  $1 = HEAP32[92131];
  $0 = HEAP32[92130];
  HEAP32[$4 + 16 >> 2] = $0;
  HEAP32[$4 + 20 >> 2] = $1;
  HEAP32[92138] = 1;
  if (HEAP32[$4 + 200 >> 2]) {
   HEAP32[92132] = 0;
   if (HEAP32[$4 + 200 >> 2] != HEAP32[92130]) {
    jspeiAddScope(HEAP32[$4 + 200 >> 2]);
    HEAP32[92133] = HEAP32[$4 + 200 >> 2];
   }
  }
  HEAP32[$4 + 12 >> 2] = jspParse();
  if (HEAP32[$4 + 200 >> 2]) {
   jspeiClearScopes()
  }
  jslKill();
  jsvUnLock(HEAP32[$4 + 184 >> 2]);
  jslSetLex(HEAP32[$4 + 56 >> 2]);
  HEAP32[$4 + 48 >> 2] = HEAP32[$4 + 48 >> 2] | HEAP32[92138] & 6256;
  $0 = HEAP32[$4 + 20 >> 2];
  $1 = HEAP32[$4 + 16 >> 2];
  HEAP32[92130] = $1;
  HEAP32[92131] = $0;
  HEAP32[92138] = HEAP32[$4 + 48 >> 2];
  $1 = HEAP32[$4 + 44 >> 2];
  $0 = HEAP32[$4 + 40 >> 2];
  HEAP32[92136] = $0;
  HEAP32[92137] = $1;
  $0 = HEAP32[$4 + 36 >> 2];
  $1 = HEAP32[$4 + 32 >> 2];
  HEAP32[92134] = $1;
  HEAP32[92135] = $0;
  $1 = HEAP32[$4 + 28 >> 2];
  $0 = HEAP32[$4 + 24 >> 2];
  HEAP32[92132] = $0;
  HEAP32[92133] = $1;
  $0 = jsvSkipNameAndUnLock(HEAP32[$4 + 12 >> 2]);
  __stack_pointer = $4 + 208 | 0;
  return $0;
 }
 
 function jspEvaluate($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP8[$2 + 23 | 0] = $1;
  block : {
   if (HEAP8[$2 + 23 | 0] & 1) {
    HEAP32[$2 + 16 >> 2] = jsvNewNativeString(HEAP32[$2 + 24 >> 2], strlen(HEAP32[$2 + 24 >> 2]));
    break block;
   }
   HEAP32[$2 + 16 >> 2] = jsvNewFromString(HEAP32[$2 + 24 >> 2]);
  }
  block1 : {
   if (!HEAP32[$2 + 16 >> 2]) {
    HEAP32[$2 + 28 >> 2] = 0;
    break block1;
   }
   HEAP32[$2 + 12 >> 2] = 0;
   if (!(jsvIsMemoryFull() & 1)) {
    HEAP32[$2 + 12 >> 2] = jspEvaluateVar(HEAP32[$2 + 16 >> 2], 0, 140443, 0)
   }
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jspExecuteJSFunctionCode($0, $1, $2, $3, $4, $5) {
  var $6 = 0;
  $6 = __stack_pointer + -64 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 56 >> 2] = $0;
  HEAP32[$6 + 52 >> 2] = $1;
  HEAP32[$6 + 48 >> 2] = $2;
  HEAP32[$6 + 44 >> 2] = $3;
  HEAP32[$6 + 40 >> 2] = $4;
  HEAP32[$6 + 36 >> 2] = $5;
  if (!HEAP32[$6 + 48 >> 2]) {
   HEAP32[$6 + 48 >> 2] = strlen(HEAP32[$6 + 52 >> 2])
  }
  HEAP32[$6 + 32 >> 2] = jsvNewWithFlags(7);
  block : {
   if (!HEAP32[$6 + 32 >> 2]) {
    HEAP32[$6 + 60 >> 2] = 0;
    break block;
   }
   if (!(!HEAP32[$6 + 56 >> 2] | !HEAPU8[HEAP32[$6 + 56 >> 2]])) {
    HEAP8[$6 + 22 | 0] = 255;
    while (1) {
     if (HEAPU8[HEAP32[$6 + 56 >> 2]]) {
      HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 56 >> 2];
      HEAP32[$6 + 16 >> 2] = 1;
      while (1) {
       $0 = 0;
       $0 = HEAP8[HEAP32[$6 + 12 >> 2]] << 24 >> 24 ? HEAPU8[HEAP32[$6 + 12 >> 2]] != 44 : $0;
       if ($0) {
        $1 = HEAPU8[HEAP32[$6 + 12 >> 2]];
        $0 = HEAP32[$6 + 16 >> 2];
        HEAP32[$6 + 16 >> 2] = $0 + 1;
        HEAP8[($6 + 22 | 0) + $0 | 0] = $1;
        HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 12 >> 2] + 1;
        continue;
       }
       break;
      };
      HEAP8[HEAP32[$6 + 16 >> 2] + ($6 + 22 | 0) | 0] = 0;
      HEAP32[$6 + 8 >> 2] = jsvNewNameFromString($6 + 22 | 0);
      jsvAddFunctionParameter(HEAP32[$6 + 32 >> 2], HEAP32[$6 + 8 >> 2], 0);
      if (HEAP8[HEAP32[$6 + 12 >> 2]] << 24 >> 24) {
       $0 = HEAP32[$6 + 12 >> 2] + 1 | 0
      } else {
       $0 = HEAP32[$6 + 12 >> 2]
      }
      HEAP32[$6 + 56 >> 2] = $0;
      continue;
     }
     break;
    };
   }
   jsvObjectSetChildAndUnLock(HEAP32[$6 + 32 >> 2], 138400, jsvNewNativeString(HEAP32[$6 + 52 >> 2], HEAP32[$6 + 48 >> 2]));
   HEAP32[$6 + 4 >> 2] = jspExecuteFunction(HEAP32[$6 + 32 >> 2], HEAP32[$6 + 44 >> 2], HEAP32[$6 + 40 >> 2], HEAP32[$6 + 36 >> 2]);
   jsvUnLock(HEAP32[$6 + 32 >> 2]);
   HEAP32[$6 + 60 >> 2] = HEAP32[$6 + 4 >> 2];
  }
  __stack_pointer = $6 - -64 | 0;
  return HEAP32[$6 + 60 >> 2];
 }
 
 function jspExecuteFunction($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer + -64 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 60 >> 2] = $0;
  HEAP32[$4 + 56 >> 2] = $1;
  HEAP32[$4 + 52 >> 2] = $2;
  HEAP32[$4 + 48 >> 2] = $3;
  HEAP32[$4 + 40 >> 2] = HEAP32[92138];
  $0 = HEAP32[92137];
  $1 = HEAP32[92136];
  HEAP32[$4 + 32 >> 2] = $1;
  HEAP32[$4 + 36 >> 2] = $0;
  $1 = HEAP32[92135];
  $0 = HEAP32[92134];
  HEAP32[$4 + 24 >> 2] = $0;
  HEAP32[$4 + 28 >> 2] = $1;
  $0 = HEAP32[92133];
  $1 = HEAP32[92132];
  HEAP32[$4 + 16 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $0;
  $1 = HEAP32[92131];
  $0 = HEAP32[92130];
  HEAP32[$4 + 8 >> 2] = $0;
  HEAP32[$4 + 12 >> 2] = $1;
  HEAP32[92132] = 0;
  HEAP32[92138] = 1;
  HEAP32[92136] = 0;
  HEAP32[$4 + 4 >> 2] = jspeFunctionCall(HEAP32[$4 + 60 >> 2], 0, HEAP32[$4 + 56 >> 2], 0, HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2]);
  jspeiClearScopes();
  HEAP32[$4 + 40 >> 2] = HEAP32[$4 + 40 >> 2] | HEAP32[92138] & 6256;
  jspeiClearScopes();
  $0 = HEAP32[$4 + 12 >> 2];
  $1 = HEAP32[$4 + 8 >> 2];
  HEAP32[92130] = $1;
  HEAP32[92131] = $0;
  HEAP32[92138] = HEAP32[$4 + 40 >> 2];
  $1 = HEAP32[$4 + 36 >> 2];
  $0 = HEAP32[$4 + 32 >> 2];
  HEAP32[92136] = $0;
  HEAP32[92137] = $1;
  $0 = HEAP32[$4 + 28 >> 2];
  $1 = HEAP32[$4 + 24 >> 2];
  HEAP32[92134] = $1;
  HEAP32[92135] = $0;
  $1 = HEAP32[$4 + 20 >> 2];
  $0 = HEAP32[$4 + 16 >> 2];
  HEAP32[92132] = $0;
  HEAP32[92133] = $1;
  __stack_pointer = $4 - -64 | 0;
  return HEAP32[$4 + 4 >> 2];
 }
 
 function jspEvaluateModule($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer + -64 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 56 >> 2] = $0;
  block : {
   block1 : {
    if (jsvIsFunction(HEAP32[$1 + 56 >> 2]) & 1) {
     HEAP32[$1 + 56 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 56 >> 2], 138400);
     if (!(jsvIsString(HEAP32[$1 + 56 >> 2]) & 1)) {
      jsvUnLock(HEAP32[$1 + 56 >> 2]);
      HEAP32[$1 + 60 >> 2] = 0;
      break block;
     }
     break block1;
    }
    jsvLockAgain(HEAP32[$1 + 56 >> 2]);
   }
   HEAP32[$1 + 52 >> 2] = jsvNewObject();
   HEAP32[$1 + 48 >> 2] = jsvNewObject();
   if (!(HEAP32[$1 + 48 >> 2] ? HEAP32[$1 + 52 >> 2] : 0)) {
    jsvUnLock3(HEAP32[$1 + 52 >> 2], HEAP32[$1 + 48 >> 2], HEAP32[$1 + 56 >> 2]);
    HEAP32[$1 + 60 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 44 >> 2] = jsvAddNamedChild(HEAP32[$1 + 52 >> 2], HEAP32[$1 + 48 >> 2], 126762);
   jsvUnLock2(HEAP32[$1 + 48 >> 2], jsvAddNamedChild(HEAP32[$1 + 52 >> 2], HEAP32[$1 + 52 >> 2], 137601));
   HEAP32[$1 + 40 >> 2] = HEAP32[92138];
   $0 = HEAP32[92137];
   $2 = HEAP32[92136];
   HEAP32[$1 + 32 >> 2] = $2;
   HEAP32[$1 + 36 >> 2] = $0;
   $2 = HEAP32[92135];
   $0 = HEAP32[92134];
   HEAP32[$1 + 24 >> 2] = $0;
   HEAP32[$1 + 28 >> 2] = $2;
   $0 = HEAP32[92133];
   $2 = HEAP32[92132];
   HEAP32[$1 + 16 >> 2] = $2;
   HEAP32[$1 + 20 >> 2] = $0;
   $2 = HEAP32[92131];
   $0 = HEAP32[92130];
   HEAP32[$1 + 8 >> 2] = $0;
   HEAP32[$1 + 12 >> 2] = $2;
   HEAP32[92133] = HEAP32[$1 + 48 >> 2];
   HEAP32[92134] = 0;
   HEAP8[368540] = 0;
   HEAP32[92136] = HEAP32[$1 + 48 >> 2];
   jsvUnLock(jspEvaluateVar(HEAP32[$1 + 56 >> 2], HEAP32[$1 + 52 >> 2], 137601, 0));
   HEAP32[$1 + 4 >> 2] = HEAP32[92138] & 112;
   $0 = HEAP32[$1 + 12 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   HEAP32[92130] = $2;
   HEAP32[92131] = $0;
   HEAP32[92138] = HEAP32[$1 + 40 >> 2];
   $2 = HEAP32[$1 + 36 >> 2];
   $0 = HEAP32[$1 + 32 >> 2];
   HEAP32[92136] = $0;
   HEAP32[92137] = $2;
   $0 = HEAP32[$1 + 28 >> 2];
   $2 = HEAP32[$1 + 24 >> 2];
   HEAP32[92134] = $2;
   HEAP32[92135] = $0;
   $2 = HEAP32[$1 + 20 >> 2];
   $0 = HEAP32[$1 + 16 >> 2];
   HEAP32[92132] = $0;
   HEAP32[92133] = $2;
   HEAP32[92138] = HEAP32[$1 + 4 >> 2] | HEAP32[92138];
   jsvUnLock2(HEAP32[$1 + 56 >> 2], HEAP32[$1 + 52 >> 2]);
   HEAP32[$1 + 60 >> 2] = jsvSkipNameAndUnLock(HEAP32[$1 + 44 >> 2]);
  }
  __stack_pointer = $1 - -64 | 0;
  return HEAP32[$1 + 60 >> 2];
 }
 
 function jspGetPrototypeOwner($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block1 : {
   block : {
    if (!(jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1)) {
     if (!(jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1)) {
      break block
     }
    }
    HEAP32[$1 + 12 >> 2] = jsvSkipNameAndUnLock(jsvObjectGetChildIfExists(HEAP32[$1 + 8 >> 2], 127861));
    break block1;
   }
   HEAP32[$1 + 12 >> 2] = 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jswBinarySearch($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 40 >> 2] = $0;
  HEAP32[$3 + 36 >> 2] = $1;
  HEAP32[$3 + 32 >> 2] = $2;
  HEAP8[$3 + 31 | 0] = HEAPU8[HEAP32[$3 + 40 >> 2] + 8 | 0];
  HEAP32[$3 + 24 >> 2] = 0;
  HEAP32[$3 + 20 >> 2] = HEAPU8[$3 + 31 | 0] - 1;
  block : {
   while (1) {
    if (HEAP32[$3 + 24 >> 2] <= HEAP32[$3 + 20 >> 2]) {
     HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 24 >> 2] + HEAP32[$3 + 20 >> 2] >> 1;
     $0 = HEAP32[$3 + 40 >> 2];
     HEAP32[$3 + 12 >> 2] = (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) + (HEAP32[$3 + 16 >> 2] << 3);
     $0 = HEAP32[$3 + 40 >> 2];
     $1 = HEAP32[$3 + 12 >> 2];
     HEAP32[$3 + 8 >> 2] = strcmp(HEAP32[$3 + 32 >> 2], (HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24)) + (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8) | 0);
     if (HEAP32[$3 + 8 >> 2]) {
      if (HEAP32[$3 + 8 >> 2] < 0) {
       HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 16 >> 2] - 1;
       continue;
      }
      HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 16 >> 2] + 1;
      continue;
     } else {
      $0 = HEAP32[$3 + 12 >> 2];
      HEAP16[$3 + 6 >> 1] = HEAPU8[$0 + 2 | 0] | HEAPU8[$0 + 3 | 0] << 8;
      if ((HEAPU16[$3 + 6 >> 1] & 32256) == 28672) {
       $0 = HEAP32[$3 + 12 >> 2];
       HEAP32[$3 + 44 >> 2] = jsnCallFunction(HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24), HEAPU16[$3 + 6 >> 1], HEAP32[$3 + 36 >> 2], 0, 0);
       break block;
      }
      $0 = HEAP32[$3 + 12 >> 2];
      HEAP32[$3 + 44 >> 2] = jsvNewNativeFunction(HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24), HEAPU16[$3 + 6 >> 1]);
      break block;
     }
    }
    break;
   };
   HEAP32[$3 + 44 >> 2] = 0;
  }
  __stack_pointer = $3 + 48 | 0;
  return HEAP32[$3 + 44 >> 2];
 }
 
 function jswGetSymbolListForConstructorProto($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP32[$1 + 4 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
  block : {
   if (HEAP32[$1 + 4 >> 2] == 10) {
    HEAP32[$1 + 12 >> 2] = 159037;
    break block;
   }
   if (HEAP32[$1 + 4 >> 2] == 11) {
    HEAP32[$1 + 12 >> 2] = 159100;
    break block;
   }
   if (HEAP32[$1 + 4 >> 2] == 12) {
    HEAP32[$1 + 12 >> 2] = 159118;
    break block;
   }
   if (HEAP32[$1 + 4 >> 2] == 13) {
    HEAP32[$1 + 12 >> 2] = 159127;
    break block;
   }
   if (HEAP32[$1 + 4 >> 2] == 14) {
    HEAP32[$1 + 12 >> 2] = 159136;
    break block;
   }
   if (HEAP32[$1 + 4 >> 2] == 15) {
    HEAP32[$1 + 12 >> 2] = 159145;
    break block;
   }
   if (HEAP32[$1 + 4 >> 2] == 16) {
    HEAP32[$1 + 12 >> 2] = 159154;
    break block;
   }
   if (HEAP32[$1 + 4 >> 2] == 17) {
    HEAP32[$1 + 12 >> 2] = 159163;
    break block;
   }
   if (HEAP32[$1 + 4 >> 2] == 18) {
    HEAP32[$1 + 12 >> 2] = 159235;
    break block;
   }
   if (HEAP32[$1 + 4 >> 2] == 19) {
    HEAP32[$1 + 12 >> 2] = 159307;
    break block;
   }
   if (HEAP32[$1 + 4 >> 2] == 20) {
    HEAP32[$1 + 12 >> 2] = 159325;
    break block;
   }
   if (HEAP32[$1 + 4 >> 2] == 21) {
    HEAP32[$1 + 12 >> 2] = 159343;
    break block;
   }
   if (HEAP32[$1 + 4 >> 2] == 22) {
    HEAP32[$1 + 12 >> 2] = 159361;
    break block;
   }
   if (HEAP32[$1 + 4 >> 2] == 23) {
    HEAP32[$1 + 12 >> 2] = 159379;
    break block;
   }
   if (HEAP32[$1 + 4 >> 2] == 24) {
    HEAP32[$1 + 12 >> 2] = 159397;
    break block;
   }
   if (HEAP32[$1 + 4 >> 2] == 25) {
    HEAP32[$1 + 12 >> 2] = 159415;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = 0;
  }
  return HEAP32[$1 + 12 >> 2];
 }
 
 function gen_jswrap_Graphics_Graphics() {
  return 0;
 }
 
 function gen_jswrap_StorageFile_StorageFile() {
  return 0;
 }
 
 function jswFindBuiltInFunction($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 40 >> 2] = $0;
  HEAP32[$2 + 36 >> 2] = $1;
  block1 : {
   block8 : {
    block : {
     if (!HEAP32[$2 + 40 >> 2]) {
      break block
     }
     if (jsvIsRoot(HEAP32[$2 + 40 >> 2]) & 1) {
      break block
     }
     if (jsvIsNativeFunction(HEAP32[$2 + 40 >> 2]) & 1) {
      HEAP32[$2 + 28 >> 2] = jswGetSymbolListForObject(HEAP32[$2 + 40 >> 2]);
      if (HEAP32[$2 + 28 >> 2]) {
       HEAP32[$2 + 32 >> 2] = jswBinarySearch(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
       if (HEAP32[$2 + 32 >> 2]) {
        HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
        break block1;
       }
      }
     }
     if (jsvIsPin(HEAP32[$2 + 40 >> 2]) & 1) {
      HEAP32[$2 + 32 >> 2] = jswBinarySearch(159001, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
      if (HEAP32[$2 + 32 >> 2]) {
       HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
       break block1;
      }
     }
     if (jsvIsArray(HEAP32[$2 + 40 >> 2]) & 1) {
      HEAP32[$2 + 32 >> 2] = jswBinarySearch(159064, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
      if (HEAP32[$2 + 32 >> 2]) {
       HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
       break block1;
      }
     }
     if (!(!(jsvIsArrayBuffer(HEAP32[$2 + 40 >> 2]) & 1) | HEAPU8[HEAP32[$2 + 40 >> 2] + 5 | 0] != 129)) {
      HEAP32[$2 + 32 >> 2] = jswBinarySearch(159082, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
      if (HEAP32[$2 + 32 >> 2]) {
       HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
       break block1;
      }
     }
     if (!(!(jsvIsArrayBuffer(HEAP32[$2 + 40 >> 2]) & 1) | HEAPU8[HEAP32[$2 + 40 >> 2] + 5 | 0] == 129)) {
      HEAP32[$2 + 32 >> 2] = jswBinarySearch(159091, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
      if (HEAP32[$2 + 32 >> 2]) {
       HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
       break block1;
      }
     }
     if (jsvIsNumeric(HEAP32[$2 + 40 >> 2]) & 1) {
      HEAP32[$2 + 32 >> 2] = jswBinarySearch(159199, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
      if (HEAP32[$2 + 32 >> 2]) {
       HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
       break block1;
      }
     }
     if (jsvIsFunction(HEAP32[$2 + 40 >> 2]) & 1) {
      HEAP32[$2 + 32 >> 2] = jswBinarySearch(159226, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
      if (HEAP32[$2 + 32 >> 2]) {
       HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
       break block1;
      }
     }
     if (jsvIsString(HEAP32[$2 + 40 >> 2]) & 1) {
      HEAP32[$2 + 32 >> 2] = jswBinarySearch(159244, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
      if (HEAP32[$2 + 32 >> 2]) {
       HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
       break block1;
      }
     }
     block4 : {
      if (jsvIsObject(HEAP32[$2 + 40 >> 2]) & 1) {
       $0 = jsvSkipNameAndUnLock(jsvFindChildFromString(HEAP32[$2 + 40 >> 2], 140424));
       break block4;
      }
      $0 = 0;
     }
     HEAP32[$2 + 24 >> 2] = $0;
     block5 : {
      if (jsvIsObject(HEAP32[$2 + 24 >> 2]) & 1) {
       $0 = jsvSkipNameAndUnLock(jsvFindChildFromString(HEAP32[$2 + 24 >> 2], 127861));
       break block5;
      }
      $0 = 0;
     }
     HEAP32[$2 + 20 >> 2] = $0;
     jsvUnLock(HEAP32[$2 + 24 >> 2]);
     block7 : {
      block6 : {
       if (!HEAP32[$2 + 20 >> 2]) {
        break block6
       }
       if (!(jsvIsNativeFunction(HEAP32[$2 + 20 >> 2]) & 1)) {
        break block6
       }
       HEAP32[$2 + 16 >> 2] = jswGetSymbolListForConstructorProto(HEAP32[$2 + 20 >> 2]);
       jsvUnLock(HEAP32[$2 + 20 >> 2]);
       if (HEAP32[$2 + 16 >> 2]) {
        HEAP32[$2 + 32 >> 2] = jswBinarySearch(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
        if (HEAP32[$2 + 32 >> 2]) {
         HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
         break block1;
        }
       }
       break block7;
      }
      jsvUnLock(HEAP32[$2 + 20 >> 2]);
     }
     HEAP32[$2 + 32 >> 2] = jswBinarySearch(159208, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
     if (HEAP32[$2 + 32 >> 2]) {
      HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
      break block1;
     }
     break block8;
    }
    HEAP8[$2 + 15 | 0] = jshGetPinFromString(HEAP32[$2 + 36 >> 2]);
    if (HEAPU8[$2 + 15 | 0] != 255) {
     HEAP32[$2 + 44 >> 2] = jsvNewFromPin(HEAPU8[$2 + 15 | 0]);
     break block1;
    }
    HEAP32[$2 + 44 >> 2] = jswBinarySearch(159010, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
    break block1;
   }
   HEAP32[$2 + 44 >> 2] = 0;
  }
  __stack_pointer = $2 + 48 | 0;
  return HEAP32[$2 + 44 >> 2];
 }
 
 function jswGetSymbolListForObject($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (jsvIsNativeFunction(HEAP32[$1 + 8 >> 2]) & 1) {
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 26) {
     HEAP32[$1 + 12 >> 2] = 158992;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 27) {
     HEAP32[$1 + 12 >> 2] = 159019;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 28) {
     HEAP32[$1 + 12 >> 2] = 159028;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 29) {
     HEAP32[$1 + 12 >> 2] = 159046;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 30) {
     HEAP32[$1 + 12 >> 2] = 159055;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 31) {
     HEAP32[$1 + 12 >> 2] = 159073;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 12) {
     HEAP32[$1 + 12 >> 2] = 159109;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 32) {
     HEAP32[$1 + 12 >> 2] = 159172;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 33) {
     HEAP32[$1 + 12 >> 2] = 159181;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 34) {
     HEAP32[$1 + 12 >> 2] = 159190;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 35) {
     HEAP32[$1 + 12 >> 2] = 159217;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 36) {
     HEAP32[$1 + 12 >> 2] = 159253;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 37) {
     HEAP32[$1 + 12 >> 2] = 159262;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 38) {
     HEAP32[$1 + 12 >> 2] = 159271;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 39) {
     HEAP32[$1 + 12 >> 2] = 159280;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 40) {
     HEAP32[$1 + 12 >> 2] = 159289;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 41) {
     HEAP32[$1 + 12 >> 2] = 159298;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 20) {
     HEAP32[$1 + 12 >> 2] = 159316;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 21) {
     HEAP32[$1 + 12 >> 2] = 159334;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 42) {
     HEAP32[$1 + 12 >> 2] = 159352;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 23) {
     HEAP32[$1 + 12 >> 2] = 159370;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 24) {
     HEAP32[$1 + 12 >> 2] = 159388;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 25) {
     HEAP32[$1 + 12 >> 2] = 159406;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 43) {
     HEAP32[$1 + 12 >> 2] = 159424;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 10) {
     HEAP32[$1 + 12 >> 2] = 159433;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 44) {
     HEAP32[$1 + 12 >> 2] = 159442;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 45) {
     HEAP32[$1 + 12 >> 2] = 159451;
     break block;
    }
   }
   if (HEAP32[$1 + 8 >> 2] == HEAP32[92130]) {
    HEAP32[$1 + 12 >> 2] = 159010;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function gen_jswrap_Bangle_Bangle() {
  return 0;
 }
 
 function gen_jswrap_E_E() {
  return 0;
 }
 
 function gen_jswrap_NRF_NRF() {
  return 0;
 }
 
 function gen_jswrap_Bluetooth_Bluetooth() {
  return 0;
 }
 
 function gen_jswrap_console_console() {
  return 0;
 }
 
 function gen_jswrap_JSON_JSON() {
  return 0;
 }
 
 function gen_jswrap_Modules_Modules() {
  return 0;
 }
 
 function gen_jswrap_Math_Math() {
  return 0;
 }
 
 function gen_jswrap_Flash_Flash() {
  return 0;
 }
 
 function gen_jswrap_fs_fs() {
  return 0;
 }
 
 function gen_jswrap_process_process() {
  return 0;
 }
 
 function gen_jswrap_Storage_Storage() {
  return 0;
 }
 
 function gen_jswrap_heatshrink_heatshrink() {
  return 0;
 }
 
 function gen_jswrap_crypto_crypto() {
  return 0;
 }
 
 function gen_jswrap_AES_AES() {
  return 0;
 }
 
 function jswGetSymbolListForObjectProto($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (jsvIsNativeFunction(HEAP32[$1 + 8 >> 2]) & 1) {
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 26) {
     HEAP32[$1 + 12 >> 2] = 159001;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 31) {
     HEAP32[$1 + 12 >> 2] = 159064;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 46) {
     HEAP32[$1 + 12 >> 2] = 159082;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 47) {
     HEAP32[$1 + 12 >> 2] = 159091;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 34) {
     HEAP32[$1 + 12 >> 2] = 159199;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 48) {
     HEAP32[$1 + 12 >> 2] = 159226;
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 36) {
     HEAP32[$1 + 12 >> 2] = 159244;
     break block;
    }
   }
   block1 : {
    if (jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1) {
     $0 = jsvSkipNameAndUnLock(jsvFindChildFromString(HEAP32[$1 + 8 >> 2], 127861));
     break block1;
    }
    $0 = 0;
   }
   HEAP32[$1 + 4 >> 2] = $0;
   block2 : {
    if (!HEAP32[$1 + 4 >> 2]) {
     break block2
    }
    if (!(jsvIsNativeFunction(HEAP32[$1 + 4 >> 2]) & 1)) {
     break block2
    }
    HEAP32[$1 >> 2] = jswGetSymbolListForConstructorProto(HEAP32[$1 + 4 >> 2]);
    jsvUnLock(HEAP32[$1 + 4 >> 2]);
    if (HEAP32[$1 >> 2]) {
     HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
     break block;
    }
   }
   if (jsvIsPin(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = 159001;
    break block;
   }
   if (jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = 159064;
    break block;
   }
   if (!(!(jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) | HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] != 129)) {
    HEAP32[$1 + 12 >> 2] = 159082;
    break block;
   }
   if (!(!(jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) | HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 129)) {
    HEAP32[$1 + 12 >> 2] = 159091;
    break block;
   }
   if (jsvIsNumeric(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = 159199;
    break block;
   }
   if (jsvIsFunction(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = 159226;
    break block;
   }
   if (jsvIsString(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = 159244;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = 159208;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function gen_jswrap_ArrayBufferView_ArrayBufferView() {
  return 0;
 }
 
 function jswIsBuiltInObject($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = 159460;
  HEAP32[$1 >> 2] = HEAP32[$1 + 4 >> 2];
  block : {
   while (1) {
    if (HEAPU8[HEAP32[$1 >> 2]]) {
     if (strcmp(HEAP32[$1 >> 2], HEAP32[$1 + 8 >> 2])) {
      HEAP32[$1 >> 2] = (strlen(HEAP32[$1 >> 2]) + 1 | 0) + HEAP32[$1 >> 2];
      continue;
     } else {
      HEAP8[$1 + 15 | 0] = 1;
      break block;
     }
    }
    break;
   };
   HEAP8[$1 + 15 | 0] = 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jswGetBuiltInLibrary($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!strcmp(HEAP32[$1 + 8 >> 2], 136242)) {
    HEAP32[$1 + 12 >> 2] = 39;
    break block;
   }
   if (!strcmp(HEAP32[$1 + 8 >> 2], 137857)) {
    HEAP32[$1 + 12 >> 2] = 42;
    break block;
   }
   if (!strcmp(HEAP32[$1 + 8 >> 2], 135874)) {
    HEAP32[$1 + 12 >> 2] = 43;
    break block;
   }
   if (!strcmp(HEAP32[$1 + 8 >> 2], 135015)) {
    HEAP32[$1 + 12 >> 2] = 44;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jswGetBasicObjectName($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) {
    if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 129) {
     HEAP32[$1 + 12 >> 2] = 128244;
     break block;
    }
    if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 1) {
     HEAP32[$1 + 12 >> 2] = 123789;
     break block;
    }
    if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 65) {
     HEAP32[$1 + 12 >> 2] = 123771;
     break block;
    }
    if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 17) {
     HEAP32[$1 + 12 >> 2] = 123800;
     break block;
    }
    if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 2) {
     HEAP32[$1 + 12 >> 2] = 123810;
     break block;
    }
    if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 18) {
     HEAP32[$1 + 12 >> 2] = 123822;
     break block;
    }
    if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 3) {
     HEAP32[$1 + 12 >> 2] = 123846;
     break block;
    }
    if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 4) {
     HEAP32[$1 + 12 >> 2] = 123858;
     break block;
    }
    if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 20) {
     HEAP32[$1 + 12 >> 2] = 123870;
     break block;
    }
    if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 36) {
     HEAP32[$1 + 12 >> 2] = 123881;
     break block;
    }
    if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 40) {
     HEAP32[$1 + 12 >> 2] = 123833;
     break block;
    }
   }
   if (jsvIsPin(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = 135450;
    break block;
   }
   if (jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = 123888;
    break block;
   }
   if (jsvIsNumeric(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = 128373;
    break block;
   }
   if (jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = 125086;
    break block;
   }
   if (jsvIsFunction(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = 135339;
    break block;
   }
   if (jsvIsString(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = 136708;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jswGetBasicObjectPrototypeName($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!strcmp(HEAP32[$1 + 8 >> 2], 123789)) {
    HEAP32[$1 + 12 >> 2] = 124199;
    break block;
   }
   if (!strcmp(HEAP32[$1 + 8 >> 2], 123771)) {
    HEAP32[$1 + 12 >> 2] = 124199;
    break block;
   }
   if (!strcmp(HEAP32[$1 + 8 >> 2], 123800)) {
    HEAP32[$1 + 12 >> 2] = 124199;
    break block;
   }
   if (!strcmp(HEAP32[$1 + 8 >> 2], 123810)) {
    HEAP32[$1 + 12 >> 2] = 124199;
    break block;
   }
   if (!strcmp(HEAP32[$1 + 8 >> 2], 123822)) {
    HEAP32[$1 + 12 >> 2] = 124199;
    break block;
   }
   if (!strcmp(HEAP32[$1 + 8 >> 2], 123846)) {
    HEAP32[$1 + 12 >> 2] = 124199;
    break block;
   }
   if (!strcmp(HEAP32[$1 + 8 >> 2], 123858)) {
    HEAP32[$1 + 12 >> 2] = 124199;
    break block;
   }
   if (!strcmp(HEAP32[$1 + 8 >> 2], 123870)) {
    HEAP32[$1 + 12 >> 2] = 124199;
    break block;
   }
   if (!strcmp(HEAP32[$1 + 8 >> 2], 123881)) {
    HEAP32[$1 + 12 >> 2] = 124199;
    break block;
   }
   if (!strcmp(HEAP32[$1 + 8 >> 2], 123833)) {
    HEAP32[$1 + 12 >> 2] = 124199;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = strcmp(HEAP32[$1 + 8 >> 2], 125086) ? 125086 : 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jswIdle() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP8[$0 + 15 | 0] = 0;
  if (jswrap_banglejs_idle() & 1) {
   HEAP8[$0 + 15 | 0] = 1
  }
  if (jswrap_pipe_idle() & 1) {
   HEAP8[$0 + 15 | 0] = 1
  }
  if (jswrap_serial_idle() & 1) {
   HEAP8[$0 + 15 | 0] = 1
  }
  if (jswrap_waveform_idle() & 1) {
   HEAP8[$0 + 15 | 0] = 1
  }
  if (jswrap_graphics_idle() & 1) {
   HEAP8[$0 + 15 | 0] = 1
  }
  if (jswrap_terminal_idle() & 1) {
   HEAP8[$0 + 15 | 0] = 1
  }
  __stack_pointer = $0 + 16 | 0;
  return HEAP8[$0 + 15 | 0] & 1;
 }
 
 function jswHWInit() {
  jswrap_banglejs_hwinit();
 }
 
 function jswInit() {
  jswrap_graphics_init();
  jswrap_banglejs_init();
  jswrap_terminal_init();
 }
 
 function jswKill() {
  jswrap_banglejs_kill();
  jswrap_pipe_kill();
  jswrap_waveform_kill();
 }
 
 function jswGetPowerUsage($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jswrap_banglejs_powerusage(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswOnCharEvent($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP8[$2 + 14 | 0] = $0;
  HEAP8[$2 + 13 | 0] = $1;
  block : {
   if (HEAPU8[$2 + 14 | 0] == 22) {
    HEAP8[$2 + 15 | 0] = jswrap_banglejs_gps_character(HEAP8[$2 + 13 | 0] << 24 >> 24) & 1;
    break block;
   }
   HEAP8[$2 + 15 | 0] = 0;
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP8[$2 + 15 | 0] & 1;
 }
 
 function jswOnCustomEvent($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP8[$3 + 15 | 0] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
 }
 
 function jswGetBuiltInJSLibrary($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!strcmp(HEAP32[$1 + 8 >> 2], 137802)) {
    HEAP32[$1 + 12 >> 2] = 122061;
    break block;
   }
   if (!strcmp(HEAP32[$1 + 8 >> 2], 124442)) {
    HEAP32[$1 + 12 >> 2] = 128834;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jswGetBuiltInLibraryNames() {
  return 124403;
 }
 
 function jswCallFunctionHack($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
  $5 = __stack_pointer - 576 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 568 >> 2] = $0;
  HEAP16[$5 + 566 >> 1] = $1;
  HEAP32[$5 + 560 >> 2] = $2;
  HEAP32[$5 + 556 >> 2] = $3;
  HEAP32[$5 + 552 >> 2] = $4;
  block123 : {
   block122 : {
    block55 : {
     block113 : {
      block93 : {
       block98 : {
        block121 : {
         block114 : {
          block73 : {
           block115 : {
            block103 : {
             block104 : {
              block107 : {
               block99 : {
                block117 : {
                 block116 : {
                  block78 : {
                   block57 : {
                    block108 : {
                     block111 : {
                      block118 : {
                       block100 : {
                        block13 : {
                         block25 : {
                          block59 : {
                           block31 : {
                            block74 : {
                             block92 : {
                              block89 : {
                               block86 : {
                                block101 : {
                                 block46 : {
                                  block17 : {
                                   block51 : {
                                    block45 : {
                                     block47 : {
                                      block18 : {
                                       block38 : {
                                        block48 : {
                                         block33 : {
                                          block29 : {
                                           block60 : {
                                            block50 : {
                                             block58 : {
                                              block32 : {
                                               block34 : {
                                                block7 : {
                                                 block30 : {
                                                  block42 : {
                                                   block28 : {
                                                    block49 : {
                                                     block52 : {
                                                      block39 : {
                                                       block44 : {
                                                        block21 : {
                                                         block11 : {
                                                          block54 : {
                                                           block20 : {
                                                            block16 : {
                                                             block22 : {
                                                              block84 : {
                                                               block85 : {
                                                                block91 : {
                                                                 block90 : {
                                                                  block72 : {
                                                                   block62 : {
                                                                    block64 : {
                                                                     block43 : {
                                                                      block9 : {
                                                                       block8 : {
                                                                        block80 : {
                                                                         block88 : {
                                                                          block105 : {
                                                                           block112 : {
                                                                            block81 : {
                                                                             block69 : {
                                                                              block68 : {
                                                                               block3 : {
                                                                                block110 : {
                                                                                 block94 : {
                                                                                  block95 : {
                                                                                   block53 : {
                                                                                    block120 : {
                                                                                     block15 : {
                                                                                      block106 : {
                                                                                       block75 : {
                                                                                        block6 : {
                                                                                         block87 : {
                                                                                          block109 : {
                                                                                           block83 : {
                                                                                            block66 : {
                                                                                             block76 : {
                                                                                              block97 : {
                                                                                               block96 : {
                                                                                                block119 : {
                                                                                                 block71 : {
                                                                                                  block10 : {
                                                                                                   block79 : {
                                                                                                    block61 : {
                                                                                                     block24 : {
                                                                                                      block23 : {
                                                                                                       block40 : {
                                                                                                        block35 : {
                                                                                                         block5 : {
                                                                                                          block2 : {
                                                                                                           block26 : {
                                                                                                            block27 : {
                                                                                                             block1 : {
                                                                                                              block56 : {
                                                                                                               block14 : {
                                                                                                                block : {
                                                                                                                 block4 : {
                                                                                                                  block19 : {
                                                                                                                   block12 : {
                                                                                                                    block63 : {
                                                                                                                     block65 : {
                                                                                                                      block67 : {
                                                                                                                       block37 : {
                                                                                                                        block41 : {
                                                                                                                         block36 : {
                                                                                                                          block77 : {
                                                                                                                           block102 : {
                                                                                                                            block82 : {
                                                                                                                             block70 : {
                                                                                                                              $0 = HEAPU16[$5 + 566 >> 1];
                                                                                                                              if ($0) {
                                                                                                                               if (($0 | 0) == 1) {
                                                                                                                                break block
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 3) {
                                                                                                                                break block1
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 4) {
                                                                                                                                break block2
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 7) {
                                                                                                                                break block3
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 8) {
                                                                                                                                break block4
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 9) {
                                                                                                                                break block5
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 11) {
                                                                                                                                break block6
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 12) {
                                                                                                                                break block7
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 15) {
                                                                                                                                break block8
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 16) {
                                                                                                                                break block9
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 17) {
                                                                                                                                break block10
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 23) {
                                                                                                                                break block11
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 24) {
                                                                                                                                break block12
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 28) {
                                                                                                                                break block13
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32) {
                                                                                                                                break block14
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 33) {
                                                                                                                                break block15
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 36) {
                                                                                                                                break block16
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 41) {
                                                                                                                                break block17
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 47) {
                                                                                                                                break block18
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 56) {
                                                                                                                                break block19
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 57) {
                                                                                                                                break block20
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 60) {
                                                                                                                                break block21
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 63) {
                                                                                                                                break block22
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 72) {
                                                                                                                                break block23
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 73) {
                                                                                                                                break block24
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 75) {
                                                                                                                                break block25
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 91) {
                                                                                                                                break block26
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 96) {
                                                                                                                                break block27
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 120) {
                                                                                                                                break block28
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 136) {
                                                                                                                                break block29
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 200) {
                                                                                                                                break block30
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 201) {
                                                                                                                                break block31
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 204) {
                                                                                                                                break block32
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 264) {
                                                                                                                                break block33
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 265) {
                                                                                                                                break block34
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 288) {
                                                                                                                                break block35
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 289) {
                                                                                                                                break block36
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 292) {
                                                                                                                                break block37
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 456) {
                                                                                                                                break block38
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 463) {
                                                                                                                                break block39
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 481) {
                                                                                                                                break block40
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 511) {
                                                                                                                                break block41
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 584) {
                                                                                                                                break block42
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 585) {
                                                                                                                                break block43
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 609) {
                                                                                                                                break block44
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 744) {
                                                                                                                                break block45
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 841) {
                                                                                                                                break block46
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 1e3) {
                                                                                                                                break block47
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 1481) {
                                                                                                                                break block48
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 1608) {
                                                                                                                                break block49
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 1609) {
                                                                                                                                break block50
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 1640) {
                                                                                                                                break block51
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 2127) {
                                                                                                                                break block52
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 2313) {
                                                                                                                                break block53
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 4095) {
                                                                                                                                break block54
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 4681) {
                                                                                                                                break block55
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 6216) {
                                                                                                                                break block56
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 6433) {
                                                                                                                                break block57
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 16968) {
                                                                                                                                break block58
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 18507) {
                                                                                                                                break block59
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 20473) {
                                                                                                                                break block60
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 28673) {
                                                                                                                                break block61
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 28676) {
                                                                                                                                break block62
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 28677) {
                                                                                                                                break block63
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 28679) {
                                                                                                                                break block64
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32768) {
                                                                                                                                break block65
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32769) {
                                                                                                                                break block66
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32771) {
                                                                                                                                break block67
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32772) {
                                                                                                                                break block68
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32775) {
                                                                                                                                break block69
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32776) {
                                                                                                                                break block70
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32777) {
                                                                                                                                break block71
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32779) {
                                                                                                                                break block72
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32780) {
                                                                                                                                break block73
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32784) {
                                                                                                                                break block74
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32785) {
                                                                                                                                break block75
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32788) {
                                                                                                                                break block76
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32792) {
                                                                                                                                break block77
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32793) {
                                                                                                                                break block78
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32801) {
                                                                                                                                break block79
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32807) {
                                                                                                                                break block80
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32831) {
                                                                                                                                break block81
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32840) {
                                                                                                                                break block82
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32841) {
                                                                                                                                break block83
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32843) {
                                                                                                                                break block84
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32844) {
                                                                                                                                break block85
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32856) {
                                                                                                                                break block86
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32865) {
                                                                                                                                break block87
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32871) {
                                                                                                                                break block88
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32888) {
                                                                                                                                break block89
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32904) {
                                                                                                                                break block90
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32905) {
                                                                                                                                break block91
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32968) {
                                                                                                                                break block92
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32969) {
                                                                                                                                break block93
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 32993) {
                                                                                                                                break block94
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 33032) {
                                                                                                                                break block95
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 33033) {
                                                                                                                                break block96
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 33035) {
                                                                                                                                break block97
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 33057) {
                                                                                                                                break block98
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 33060) {
                                                                                                                                break block99
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 33097) {
                                                                                                                                break block100
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 33240) {
                                                                                                                                break block101
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 33352) {
                                                                                                                                break block102
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 33353) {
                                                                                                                                break block103
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 33356) {
                                                                                                                                break block104
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 33383) {
                                                                                                                                break block105
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 33545) {
                                                                                                                                break block106
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 33569) {
                                                                                                                                break block107
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 33768) {
                                                                                                                                break block108
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 33889) {
                                                                                                                                break block109
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 34400) {
                                                                                                                                break block110
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 35105) {
                                                                                                                                break block111
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 37479) {
                                                                                                                                break block112
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 39177) {
                                                                                                                                break block113
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 47369) {
                                                                                                                                break block114
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 49929) {
                                                                                                                                break block115
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 51465) {
                                                                                                                                break block116
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 51489) {
                                                                                                                                break block117
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 55560) {
                                                                                                                                break block118
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 61441) {
                                                                                                                                break block119
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 61444) {
                                                                                                                                break block120
                                                                                                                               }
                                                                                                                               if (($0 | 0) == 65529) {
                                                                                                                                break block121
                                                                                                                               }
                                                                                                                               break block122;
                                                                                                                              }
                                                                                                                              HEAP32[$5 + 548 >> 2] = 0;
                                                                                                                              FUNCTION_TABLE[HEAP32[$5 + 568 >> 2]]();
                                                                                                                              HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 548 >> 2];
                                                                                                                              break block123;
                                                                                                                             }
                                                                                                                             HEAP32[$5 + 544 >> 2] = 0;
                                                                                                                             $1 = HEAP32[$5 + 568 >> 2];
                                                                                                                             $0 = HEAP32[$5 + 560 >> 2];
                                                                                                                             if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                                                              $2 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                                                             } else {
                                                                                                                              $2 = 0
                                                                                                                             }
                                                                                                                             FUNCTION_TABLE[$1 | 0]($0, $2);
                                                                                                                             HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 544 >> 2];
                                                                                                                             break block123;
                                                                                                                            }
                                                                                                                            HEAP32[$5 + 540 >> 2] = 0;
                                                                                                                            $2 = HEAP32[$5 + 568 >> 2];
                                                                                                                            $1 = HEAP32[$5 + 560 >> 2];
                                                                                                                            if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                                                             $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                                                            } else {
                                                                                                                             $0 = 0
                                                                                                                            }
                                                                                                                            if (HEAP32[$5 + 552 >> 2] > 1) {
                                                                                                                             $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                                                                                            } else {
                                                                                                                             $3 = 0
                                                                                                                            }
                                                                                                                            FUNCTION_TABLE[$2 | 0]($1, $0, $3);
                                                                                                                            HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 540 >> 2];
                                                                                                                            break block123;
                                                                                                                           }
                                                                                                                           HEAP32[$5 + 536 >> 2] = 0;
                                                                                                                           $3 = HEAP32[$5 + 568 >> 2];
                                                                                                                           $2 = HEAP32[$5 + 560 >> 2];
                                                                                                                           if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                                                            $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                                                           } else {
                                                                                                                            $1 = 0
                                                                                                                           }
                                                                                                                           if (HEAP32[$5 + 552 >> 2] > 1) {
                                                                                                                            $0 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                                                                                           } else {
                                                                                                                            $0 = 0
                                                                                                                           }
                                                                                                                           if (HEAP32[$5 + 552 >> 2] > 2) {
                                                                                                                            $4 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
                                                                                                                           } else {
                                                                                                                            $4 = 0
                                                                                                                           }
                                                                                                                           FUNCTION_TABLE[$3 | 0]($2, $1, $0, $4);
                                                                                                                           HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 536 >> 2];
                                                                                                                           break block123;
                                                                                                                          }
                                                                                                                          HEAP32[$5 + 532 >> 2] = 0;
                                                                                                                          $1 = HEAP32[$5 + 568 >> 2];
                                                                                                                          $0 = HEAP32[$5 + 560 >> 2];
                                                                                                                          if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                                                           $2 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                                                          } else {
                                                                                                                           $2 = 0
                                                                                                                          }
                                                                                                                          FUNCTION_TABLE[$1 | 0]($0, jsvGetBool($2) & 1);
                                                                                                                          HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 532 >> 2];
                                                                                                                          break block123;
                                                                                                                         }
                                                                                                                         HEAP32[$5 + 528 >> 2] = 0;
                                                                                                                         $1 = HEAP32[$5 + 568 >> 2];
                                                                                                                         if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                                                          $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                                                         } else {
                                                                                                                          $0 = 0
                                                                                                                         }
                                                                                                                         $0 = jsvGetInteger($0);
                                                                                                                         if (HEAP32[$5 + 552 >> 2] > 1) {
                                                                                                                          $2 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                                                                                         } else {
                                                                                                                          $2 = 0
                                                                                                                         }
                                                                                                                         HEAP32[$5 + 528 >> 2] = FUNCTION_TABLE[$1 | 0]($0, jsvGetInteger($2));
                                                                                                                         HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 528 >> 2];
                                                                                                                         break block123;
                                                                                                                        }
                                                                                                                        HEAP32[$5 + 524 >> 2] = 0;
                                                                                                                        $0 = HEAP32[$5 + 568 >> 2];
                                                                                                                        if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                                                         $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                                                        } else {
                                                                                                                         $1 = 0
                                                                                                                        }
                                                                                                                        $7 = jsvGetFloat($1);
                                                                                                                        if (HEAP32[$5 + 552 >> 2] > 1) {
                                                                                                                         $1 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                                                                                        } else {
                                                                                                                         $1 = 0
                                                                                                                        }
                                                                                                                        HEAP32[$5 + 524 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$0 | 0]($7, jsvGetFloat($1)));
                                                                                                                        HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 524 >> 2];
                                                                                                                        break block123;
                                                                                                                       }
                                                                                                                       HEAP32[$5 + 520 >> 2] = 0;
                                                                                                                       $1 = HEAP32[$5 + 568 >> 2];
                                                                                                                       if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                                                        $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                                                       } else {
                                                                                                                        $0 = 0
                                                                                                                       }
                                                                                                                       $0 = jsvGetInteger($0);
                                                                                                                       if (HEAP32[$5 + 552 >> 2] > 1) {
                                                                                                                        $2 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                                                                                       } else {
                                                                                                                        $2 = 0
                                                                                                                       }
                                                                                                                       HEAP32[$5 + 520 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$1 | 0]($0, jsvGetInteger($2)) | 0);
                                                                                                                       HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 520 >> 2];
                                                                                                                       break block123;
                                                                                                                      }
                                                                                                                      HEAP32[$5 + 516 >> 2] = 0;
                                                                                                                      HEAP32[$5 + 516 >> 2] = jsvNewFromBool(FUNCTION_TABLE[HEAP32[$5 + 568 >> 2]](HEAP32[$5 + 560 >> 2]) & 1);
                                                                                                                      HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 516 >> 2];
                                                                                                                      break block123;
                                                                                                                     }
                                                                                                                     HEAP32[$5 + 512 >> 2] = 0;
                                                                                                                     FUNCTION_TABLE[HEAP32[$5 + 568 >> 2]](HEAP32[$5 + 560 >> 2]);
                                                                                                                     HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 512 >> 2];
                                                                                                                     break block123;
                                                                                                                    }
                                                                                                                    HEAP32[$5 + 508 >> 2] = 0;
                                                                                                                    HEAP32[$5 + 508 >> 2] = jsvNewFromPin(FUNCTION_TABLE[HEAP32[$5 + 568 >> 2]]() & 255);
                                                                                                                    HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 508 >> 2];
                                                                                                                    break block123;
                                                                                                                   }
                                                                                                                   HEAP32[$5 + 504 >> 2] = 0;
                                                                                                                   $0 = HEAP32[$5 + 568 >> 2];
                                                                                                                   if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                                                    $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                                                   } else {
                                                                                                                    $1 = 0
                                                                                                                   }
                                                                                                                   FUNCTION_TABLE[$0 | 0](jsvGetBool($1) & 1);
                                                                                                                   HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 504 >> 2];
                                                                                                                   break block123;
                                                                                                                  }
                                                                                                                  HEAP32[$5 + 500 >> 2] = 0;
                                                                                                                  $0 = HEAP32[$5 + 568 >> 2];
                                                                                                                  if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                                                   $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                                                  } else {
                                                                                                                   $1 = 0
                                                                                                                  }
                                                                                                                  FUNCTION_TABLE[$0 | 0](jsvGetFloat($1));
                                                                                                                  HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 500 >> 2];
                                                                                                                  break block123;
                                                                                                                 }
                                                                                                                 HEAP32[$5 + 496 >> 2] = 0;
                                                                                                                 $0 = HEAP32[$5 + 568 >> 2];
                                                                                                                 if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                                                  $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                                                 } else {
                                                                                                                  $1 = 0
                                                                                                                 }
                                                                                                                 FUNCTION_TABLE[$0 | 0]($1);
                                                                                                                 HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 496 >> 2];
                                                                                                                 break block123;
                                                                                                                }
                                                                                                                HEAP32[$5 + 492 >> 2] = 0;
                                                                                                                HEAP32[$5 + 492 >> 2] = FUNCTION_TABLE[HEAP32[$5 + 568 >> 2]]();
                                                                                                                HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 492 >> 2];
                                                                                                                break block123;
                                                                                                               }
                                                                                                               HEAP32[$5 + 488 >> 2] = 0;
                                                                                                               $0 = HEAP32[$5 + 568 >> 2];
                                                                                                               if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                                                $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                                               } else {
                                                                                                                $1 = 0
                                                                                                               }
                                                                                                               FUNCTION_TABLE[$0 | 0](jsvGetInteger($1));
                                                                                                               HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 488 >> 2];
                                                                                                               break block123;
                                                                                                              }
                                                                                                              HEAP32[$5 + 484 >> 2] = 0;
                                                                                                              $3 = HEAP32[$5 + 568 >> 2];
                                                                                                              if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                                               $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                                              } else {
                                                                                                               $1 = 0
                                                                                                              }
                                                                                                              if (HEAP32[$5 + 552 >> 2] > 1) {
                                                                                                               $0 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                                                                              } else {
                                                                                                               $0 = 0
                                                                                                              }
                                                                                                              if (HEAP32[$5 + 552 >> 2] > 2) {
                                                                                                               $2 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
                                                                                                              } else {
                                                                                                               $2 = 0
                                                                                                              }
                                                                                                              $2 = jsvGetInteger($2);
                                                                                                              if (HEAP32[$5 + 552 >> 2] > 3) {
                                                                                                               $4 = HEAP32[HEAP32[$5 + 556 >> 2] + 12 >> 2]
                                                                                                              } else {
                                                                                                               $4 = 0
                                                                                                              }
                                                                                                              FUNCTION_TABLE[$3 | 0]($1, $0, $2, $4);
                                                                                                              HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 484 >> 2];
                                                                                                              break block123;
                                                                                                             }
                                                                                                             HEAP32[$5 + 480 >> 2] = 0;
                                                                                                             HEAP32[$5 + 480 >> 2] = jsvNewFromBool(FUNCTION_TABLE[HEAP32[$5 + 568 >> 2]]() & 1);
                                                                                                             HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 480 >> 2];
                                                                                                             break block123;
                                                                                                            }
                                                                                                            HEAP32[$5 + 476 >> 2] = 0;
                                                                                                            $1 = HEAP32[$5 + 568 >> 2];
                                                                                                            if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                                             $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                                            } else {
                                                                                                             $0 = 0
                                                                                                            }
                                                                                                            $0 = jsvGetInteger($0);
                                                                                                            if (HEAP32[$5 + 552 >> 2] > 1) {
                                                                                                             $2 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                                                                            } else {
                                                                                                             $2 = 0
                                                                                                            }
                                                                                                            FUNCTION_TABLE[$1 | 0]($0, $2);
                                                                                                            HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 476 >> 2];
                                                                                                            break block123;
                                                                                                           }
                                                                                                           HEAP32[$5 + 472 >> 2] = 0;
                                                                                                           $1 = HEAP32[$5 + 568 >> 2];
                                                                                                           if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                                            $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                                           } else {
                                                                                                            $0 = 0
                                                                                                           }
                                                                                                           $0 = jsvGetBool($0) & 1;
                                                                                                           if (HEAP32[$5 + 552 >> 2] > 1) {
                                                                                                            $2 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                                                                           } else {
                                                                                                            $2 = 0
                                                                                                           }
                                                                                                           HEAP32[$5 + 472 >> 2] = jsvNewFromBool(FUNCTION_TABLE[$1 | 0]($0, $2) & 1);
                                                                                                           HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 472 >> 2];
                                                                                                           break block123;
                                                                                                          }
                                                                                                          HEAP32[$5 + 468 >> 2] = 0;
                                                                                                          HEAP32[$5 + 468 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[HEAP32[$5 + 568 >> 2]]() | 0);
                                                                                                          HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 468 >> 2];
                                                                                                          break block123;
                                                                                                         }
                                                                                                         HEAP32[$5 + 464 >> 2] = 0;
                                                                                                         $0 = HEAP32[$5 + 568 >> 2];
                                                                                                         if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                                          $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                                         } else {
                                                                                                          $1 = 0
                                                                                                         }
                                                                                                         HEAP32[$5 + 464 >> 2] = FUNCTION_TABLE[$0 | 0]($1);
                                                                                                         HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 464 >> 2];
                                                                                                         break block123;
                                                                                                        }
                                                                                                        HEAP32[$5 + 460 >> 2] = 0;
                                                                                                        $1 = HEAP32[$5 + 568 >> 2];
                                                                                                        if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                                         $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                                        } else {
                                                                                                         $0 = 0
                                                                                                        }
                                                                                                        $0 = jsvGetInteger($0);
                                                                                                        if (HEAP32[$5 + 552 >> 2] > 1) {
                                                                                                         $2 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                                                                        } else {
                                                                                                         $2 = 0
                                                                                                        }
                                                                                                        FUNCTION_TABLE[$1 | 0]($0, jsvGetInteger($2));
                                                                                                        HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 460 >> 2];
                                                                                                        break block123;
                                                                                                       }
                                                                                                       HEAP32[$5 + 456 >> 2] = 0;
                                                                                                       $1 = HEAP32[$5 + 568 >> 2];
                                                                                                       if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                                        $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                                       } else {
                                                                                                        $0 = 0
                                                                                                       }
                                                                                                       $0 = jsvGetInteger($0);
                                                                                                       if (HEAP32[$5 + 552 >> 2] > 1) {
                                                                                                        $2 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                                                                       } else {
                                                                                                        $2 = 0
                                                                                                       }
                                                                                                       HEAP32[$5 + 456 >> 2] = FUNCTION_TABLE[$1 | 0]($0, jsvGetFloat($2));
                                                                                                       HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 456 >> 2];
                                                                                                       break block123;
                                                                                                      }
                                                                                                      HEAP32[$5 + 452 >> 2] = 0;
                                                                                                      $1 = HEAP32[$5 + 568 >> 2];
                                                                                                      if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                                       $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                                      } else {
                                                                                                       $0 = 0
                                                                                                      }
                                                                                                      if (HEAP32[$5 + 552 >> 2] > 1) {
                                                                                                       $2 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                                                                      } else {
                                                                                                       $2 = 0
                                                                                                      }
                                                                                                      FUNCTION_TABLE[$1 | 0]($0, $2);
                                                                                                      HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 452 >> 2];
                                                                                                      break block123;
                                                                                                     }
                                                                                                     HEAP32[$5 + 448 >> 2] = 0;
                                                                                                     $1 = HEAP32[$5 + 568 >> 2];
                                                                                                     if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                                      $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                                     } else {
                                                                                                      $0 = 0
                                                                                                     }
                                                                                                     if (HEAP32[$5 + 552 >> 2] > 1) {
                                                                                                      $2 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                                                                     } else {
                                                                                                      $2 = 0
                                                                                                     }
                                                                                                     HEAP32[$5 + 448 >> 2] = FUNCTION_TABLE[$1 | 0]($0, $2);
                                                                                                     HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 448 >> 2];
                                                                                                     break block123;
                                                                                                    }
                                                                                                    HEAP32[$5 + 444 >> 2] = 0;
                                                                                                    HEAP32[$5 + 444 >> 2] = FUNCTION_TABLE[HEAP32[$5 + 568 >> 2]]();
                                                                                                    HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 444 >> 2];
                                                                                                    break block123;
                                                                                                   }
                                                                                                   HEAP32[$5 + 440 >> 2] = 0;
                                                                                                   $1 = HEAP32[$5 + 568 >> 2];
                                                                                                   $0 = HEAP32[$5 + 560 >> 2];
                                                                                                   if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                                    $2 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                                   } else {
                                                                                                    $2 = 0
                                                                                                   }
                                                                                                   HEAP32[$5 + 440 >> 2] = FUNCTION_TABLE[$1 | 0]($0, jsvGetInteger($2));
                                                                                                   HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 440 >> 2];
                                                                                                   break block123;
                                                                                                  }
                                                                                                  HEAP32[$5 + 436 >> 2] = 0;
                                                                                                  block159 : {
                                                                                                   if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                                    $0 = jsvNewArray(HEAP32[$5 + 556 >> 2], HEAP32[$5 + 552 >> 2]);
                                                                                                    break block159;
                                                                                                   }
                                                                                                   $0 = jsvNewEmptyArray();
                                                                                                  }
                                                                                                  HEAP32[$5 + 432 >> 2] = $0;
                                                                                                  HEAP32[$5 + 436 >> 2] = FUNCTION_TABLE[HEAP32[$5 + 568 >> 2]](HEAP32[$5 + 432 >> 2]);
                                                                                                  jsvUnLock(HEAP32[$5 + 432 >> 2]);
                                                                                                  HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 436 >> 2];
                                                                                                  break block123;
                                                                                                 }
                                                                                                 HEAP32[$5 + 428 >> 2] = 0;
                                                                                                 $1 = HEAP32[$5 + 568 >> 2];
                                                                                                 $0 = HEAP32[$5 + 560 >> 2];
                                                                                                 if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                                  $2 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                                 } else {
                                                                                                  $2 = 0
                                                                                                 }
                                                                                                 HEAP32[$5 + 428 >> 2] = FUNCTION_TABLE[$1 | 0]($0, $2);
                                                                                                 HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 428 >> 2];
                                                                                                 break block123;
                                                                                                }
                                                                                                HEAP32[$5 + 424 >> 2] = 0;
                                                                                                HEAP32[$5 + 424 >> 2] = FUNCTION_TABLE[HEAP32[$5 + 568 >> 2]](HEAP32[$5 + 560 >> 2]);
                                                                                                HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 424 >> 2];
                                                                                                break block123;
                                                                                               }
                                                                                               HEAP32[$5 + 420 >> 2] = 0;
                                                                                               $2 = HEAP32[$5 + 568 >> 2];
                                                                                               $1 = HEAP32[$5 + 560 >> 2];
                                                                                               if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                                $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                               } else {
                                                                                                $0 = 0
                                                                                               }
                                                                                               if (HEAP32[$5 + 552 >> 2] > 1) {
                                                                                                $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                                                               } else {
                                                                                                $3 = 0
                                                                                               }
                                                                                               HEAP32[$5 + 420 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetInteger($3));
                                                                                               HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 420 >> 2];
                                                                                               break block123;
                                                                                              }
                                                                                              HEAP32[$5 + 416 >> 2] = 0;
                                                                                              $2 = HEAP32[$5 + 568 >> 2];
                                                                                              $1 = HEAP32[$5 + 560 >> 2];
                                                                                              if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                               $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                              } else {
                                                                                               $0 = 0
                                                                                              }
                                                                                              if (HEAP32[$5 + 552 >> 2] > 1) {
                                                                                               $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                                                              } else {
                                                                                               $3 = 0
                                                                                              }
                                                                                              HEAP32[$5 + 416 >> 2] = jsvNewFromBool(FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetInteger($3)) & 1);
                                                                                              HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 416 >> 2];
                                                                                              break block123;
                                                                                             }
                                                                                             HEAP32[$5 + 412 >> 2] = 0;
                                                                                             block165 : {
                                                                                              if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                               $0 = jsvNewArray(HEAP32[$5 + 556 >> 2], HEAP32[$5 + 552 >> 2]);
                                                                                               break block165;
                                                                                              }
                                                                                              $0 = jsvNewEmptyArray();
                                                                                             }
                                                                                             HEAP32[$5 + 408 >> 2] = $0;
                                                                                             HEAP32[$5 + 412 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[HEAP32[$5 + 568 >> 2]](HEAP32[$5 + 560 >> 2], HEAP32[$5 + 408 >> 2]) | 0);
                                                                                             jsvUnLock(HEAP32[$5 + 408 >> 2]);
                                                                                             HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 412 >> 2];
                                                                                             break block123;
                                                                                            }
                                                                                            HEAP32[$5 + 404 >> 2] = 0;
                                                                                            HEAP32[$5 + 404 >> 2] = FUNCTION_TABLE[HEAP32[$5 + 568 >> 2]](HEAP32[$5 + 560 >> 2]);
                                                                                            HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 404 >> 2];
                                                                                            break block123;
                                                                                           }
                                                                                           HEAP32[$5 + 400 >> 2] = 0;
                                                                                           $2 = HEAP32[$5 + 568 >> 2];
                                                                                           $1 = HEAP32[$5 + 560 >> 2];
                                                                                           if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                            $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                           } else {
                                                                                            $0 = 0
                                                                                           }
                                                                                           if (HEAP32[$5 + 552 >> 2] > 1) {
                                                                                            $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                                                           } else {
                                                                                            $3 = 0
                                                                                           }
                                                                                           HEAP32[$5 + 400 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, $3);
                                                                                           HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 400 >> 2];
                                                                                           break block123;
                                                                                          }
                                                                                          HEAP32[$5 + 396 >> 2] = 0;
                                                                                          block168 : {
                                                                                           if (HEAP32[$5 + 552 >> 2] > 2) {
                                                                                            $0 = jsvNewArray(HEAP32[$5 + 556 >> 2] + 8 | 0, HEAP32[$5 + 552 >> 2] - 2 | 0);
                                                                                            break block168;
                                                                                           }
                                                                                           $0 = jsvNewEmptyArray();
                                                                                          }
                                                                                          HEAP32[$5 + 392 >> 2] = $0;
                                                                                          $2 = HEAP32[$5 + 568 >> 2];
                                                                                          $1 = HEAP32[$5 + 560 >> 2];
                                                                                          if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                           $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                          } else {
                                                                                           $0 = 0
                                                                                          }
                                                                                          $0 = jsvGetInteger($0);
                                                                                          if (HEAP32[$5 + 552 >> 2] > 1) {
                                                                                           $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                                                          } else {
                                                                                           $3 = 0
                                                                                          }
                                                                                          HEAP32[$5 + 396 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, $3, HEAP32[$5 + 392 >> 2]);
                                                                                          jsvUnLock(HEAP32[$5 + 392 >> 2]);
                                                                                          HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 396 >> 2];
                                                                                          break block123;
                                                                                         }
                                                                                         HEAP32[$5 + 388 >> 2] = 0;
                                                                                         $2 = HEAP32[$5 + 568 >> 2];
                                                                                         $1 = HEAP32[$5 + 560 >> 2];
                                                                                         if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                          $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                         } else {
                                                                                          $0 = 0
                                                                                         }
                                                                                         $0 = jsvGetInteger($0);
                                                                                         if (HEAP32[$5 + 552 >> 2] > 1) {
                                                                                          $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                                                         } else {
                                                                                          $3 = 0
                                                                                         }
                                                                                         HEAP32[$5 + 388 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, $3);
                                                                                         HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 388 >> 2];
                                                                                         break block123;
                                                                                        }
                                                                                        HEAP32[$5 + 384 >> 2] = 0;
                                                                                        $0 = HEAP32[$5 + 568 >> 2];
                                                                                        if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                         $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                        } else {
                                                                                         $1 = 0
                                                                                        }
                                                                                        HEAP32[$5 + 384 >> 2] = jsvNewFromBool(FUNCTION_TABLE[$0 | 0]($1) & 1);
                                                                                        HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 384 >> 2];
                                                                                        break block123;
                                                                                       }
                                                                                       HEAP32[$5 + 380 >> 2] = 0;
                                                                                       block174 : {
                                                                                        if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                         $0 = jsvNewArray(HEAP32[$5 + 556 >> 2], HEAP32[$5 + 552 >> 2]);
                                                                                         break block174;
                                                                                        }
                                                                                        $0 = jsvNewEmptyArray();
                                                                                       }
                                                                                       HEAP32[$5 + 376 >> 2] = $0;
                                                                                       HEAP32[$5 + 380 >> 2] = FUNCTION_TABLE[HEAP32[$5 + 568 >> 2]](HEAP32[$5 + 560 >> 2], HEAP32[$5 + 376 >> 2]);
                                                                                       jsvUnLock(HEAP32[$5 + 376 >> 2]);
                                                                                       HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 380 >> 2];
                                                                                       break block123;
                                                                                      }
                                                                                      HEAP32[$5 + 372 >> 2] = 0;
                                                                                      $3 = HEAP32[$5 + 568 >> 2];
                                                                                      $2 = HEAP32[$5 + 560 >> 2];
                                                                                      if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                       $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                      } else {
                                                                                       $0 = 0
                                                                                      }
                                                                                      if (HEAP32[$5 + 552 >> 2] > 1) {
                                                                                       $1 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                                                      } else {
                                                                                       $1 = 0
                                                                                      }
                                                                                      $1 = jsvGetInteger($1);
                                                                                      if (HEAP32[$5 + 552 >> 2] > 2) {
                                                                                       $4 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
                                                                                      } else {
                                                                                       $4 = 0
                                                                                      }
                                                                                      HEAP32[$5 + 372 >> 2] = FUNCTION_TABLE[$3 | 0]($2, $0, $1, $4);
                                                                                      HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 372 >> 2];
                                                                                      break block123;
                                                                                     }
                                                                                     HEAP32[$5 + 368 >> 2] = 0;
                                                                                     $0 = HEAP32[$5 + 568 >> 2];
                                                                                     if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                      $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                     } else {
                                                                                      $1 = 0
                                                                                     }
                                                                                     HEAP32[$5 + 368 >> 2] = FUNCTION_TABLE[$0 | 0](jsvGetInteger($1));
                                                                                     HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 368 >> 2];
                                                                                     break block123;
                                                                                    }
                                                                                    HEAP32[$5 + 364 >> 2] = 0;
                                                                                    HEAP32[$5 + 364 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[HEAP32[$5 + 568 >> 2]](HEAP32[$5 + 560 >> 2]) | 0);
                                                                                    HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 364 >> 2];
                                                                                    break block123;
                                                                                   }
                                                                                   HEAP32[$5 + 360 >> 2] = 0;
                                                                                   $2 = HEAP32[$5 + 568 >> 2];
                                                                                   if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                    $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                   } else {
                                                                                    $0 = 0
                                                                                   }
                                                                                   if (HEAP32[$5 + 552 >> 2] > 1) {
                                                                                    $1 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                                                   } else {
                                                                                    $1 = 0
                                                                                   }
                                                                                   $1 = jsvGetInteger($1);
                                                                                   if (HEAP32[$5 + 552 >> 2] > 2) {
                                                                                    $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
                                                                                   } else {
                                                                                    $3 = 0
                                                                                   }
                                                                                   HEAP32[$5 + 360 >> 2] = FUNCTION_TABLE[$2 | 0]($0, $1, jsvGetInteger($3));
                                                                                   HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 360 >> 2];
                                                                                   break block123;
                                                                                  }
                                                                                  HEAP32[$5 + 356 >> 2] = 0;
                                                                                  $2 = HEAP32[$5 + 568 >> 2];
                                                                                  $1 = HEAP32[$5 + 560 >> 2];
                                                                                  if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                   $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                  } else {
                                                                                   $0 = 0
                                                                                  }
                                                                                  if (HEAP32[$5 + 552 >> 2] > 1) {
                                                                                   $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                                                  } else {
                                                                                   $3 = 0
                                                                                  }
                                                                                  FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetInteger($3));
                                                                                  HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 356 >> 2];
                                                                                  break block123;
                                                                                 }
                                                                                 HEAP32[$5 + 352 >> 2] = 0;
                                                                                 $2 = HEAP32[$5 + 568 >> 2];
                                                                                 $1 = HEAP32[$5 + 560 >> 2];
                                                                                 if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                  $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                 } else {
                                                                                  $0 = 0
                                                                                 }
                                                                                 $0 = jsvGetInteger($0);
                                                                                 if (HEAP32[$5 + 552 >> 2] > 1) {
                                                                                  $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                                                 } else {
                                                                                  $3 = 0
                                                                                 }
                                                                                 HEAP32[$5 + 352 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetBool($3) & 1);
                                                                                 HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 352 >> 2];
                                                                                 break block123;
                                                                                }
                                                                                HEAP32[$5 + 348 >> 2] = 0;
                                                                                $3 = HEAP32[$5 + 568 >> 2];
                                                                                $2 = HEAP32[$5 + 560 >> 2];
                                                                                if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                                 $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                                } else {
                                                                                 $0 = 0
                                                                                }
                                                                                $1 = jsvGetInteger($0);
                                                                                if (HEAP32[$5 + 552 >> 2] > 1) {
                                                                                 $0 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                                                } else {
                                                                                 $0 = 0
                                                                                }
                                                                                if (HEAP32[$5 + 552 >> 2] > 2) {
                                                                                 $4 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
                                                                                } else {
                                                                                 $4 = 0
                                                                                }
                                                                                FUNCTION_TABLE[$3 | 0]($2, $1, $0, jsvGetBool($4) & 1);
                                                                                HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 348 >> 2];
                                                                                break block123;
                                                                               }
                                                                               HEAP32[$5 + 344 >> 2] = 0;
                                                                               HEAP32[$5 + 344 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[HEAP32[$5 + 568 >> 2]]());
                                                                               HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 344 >> 2];
                                                                               break block123;
                                                                              }
                                                                              HEAP32[$5 + 340 >> 2] = 0;
                                                                              HEAP32[$5 + 340 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[HEAP32[$5 + 568 >> 2]](HEAP32[$5 + 560 >> 2]) | 0);
                                                                              HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 340 >> 2];
                                                                              break block123;
                                                                             }
                                                                             HEAP32[$5 + 336 >> 2] = 0;
                                                                             HEAP32[$5 + 336 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[HEAP32[$5 + 568 >> 2]](HEAP32[$5 + 560 >> 2]));
                                                                             HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 336 >> 2];
                                                                             break block123;
                                                                            }
                                                                            HEAP32[$5 + 332 >> 2] = 0;
                                                                            $1 = HEAP32[$5 + 568 >> 2];
                                                                            $0 = HEAP32[$5 + 560 >> 2];
                                                                            if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                             $2 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                            } else {
                                                                             $2 = 0
                                                                            }
                                                                            HEAP32[$5 + 332 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$1 | 0]($0, jsvGetFloat($2)));
                                                                            HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 332 >> 2];
                                                                            break block123;
                                                                           }
                                                                           HEAP32[$5 + 328 >> 2] = 0;
                                                                           $4 = HEAP32[$5 + 568 >> 2];
                                                                           $3 = HEAP32[$5 + 560 >> 2];
                                                                           if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                            $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                           } else {
                                                                            $0 = 0
                                                                           }
                                                                           $2 = jsvGetInteger($0);
                                                                           if (HEAP32[$5 + 552 >> 2] > 1) {
                                                                            $1 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                                           } else {
                                                                            $1 = 0
                                                                           }
                                                                           if (HEAP32[$5 + 552 >> 2] > 2) {
                                                                            $0 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
                                                                           } else {
                                                                            $0 = 0
                                                                           }
                                                                           if (HEAP32[$5 + 552 >> 2] > 3) {
                                                                            $6 = HEAP32[HEAP32[$5 + 556 >> 2] + 12 >> 2]
                                                                           } else {
                                                                            $6 = 0
                                                                           }
                                                                           HEAP32[$5 + 328 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$4 | 0]($3, $2, $1, $0, $6));
                                                                           HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 328 >> 2];
                                                                           break block123;
                                                                          }
                                                                          HEAP32[$5 + 324 >> 2] = 0;
                                                                          $3 = HEAP32[$5 + 568 >> 2];
                                                                          $2 = HEAP32[$5 + 560 >> 2];
                                                                          if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                           $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                          } else {
                                                                           $0 = 0
                                                                          }
                                                                          $1 = jsvGetInteger($0);
                                                                          if (HEAP32[$5 + 552 >> 2] > 1) {
                                                                           $0 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                                          } else {
                                                                           $0 = 0
                                                                          }
                                                                          if (HEAP32[$5 + 552 >> 2] > 2) {
                                                                           $4 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
                                                                          } else {
                                                                           $4 = 0
                                                                          }
                                                                          HEAP32[$5 + 324 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$3 | 0]($2, $1, $0, $4));
                                                                          HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 324 >> 2];
                                                                          break block123;
                                                                         }
                                                                         HEAP32[$5 + 320 >> 2] = 0;
                                                                         $2 = HEAP32[$5 + 568 >> 2];
                                                                         $1 = HEAP32[$5 + 560 >> 2];
                                                                         if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                          $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                         } else {
                                                                          $0 = 0
                                                                         }
                                                                         $0 = jsvGetInteger($0);
                                                                         if (HEAP32[$5 + 552 >> 2] > 1) {
                                                                          $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                                         } else {
                                                                          $3 = 0
                                                                         }
                                                                         HEAP32[$5 + 320 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$2 | 0]($1, $0, $3));
                                                                         HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 320 >> 2];
                                                                         break block123;
                                                                        }
                                                                        HEAP32[$5 + 316 >> 2] = 0;
                                                                        $1 = HEAP32[$5 + 568 >> 2];
                                                                        $0 = HEAP32[$5 + 560 >> 2];
                                                                        if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                         $2 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                        } else {
                                                                         $2 = 0
                                                                        }
                                                                        HEAP32[$5 + 316 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$1 | 0]($0, jsvGetInteger($2)));
                                                                        HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 316 >> 2];
                                                                        break block123;
                                                                       }
                                                                       HEAP32[$5 + 312 >> 2] = 0;
                                                                       $0 = HEAP32[$5 + 568 >> 2];
                                                                       if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                        $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                       } else {
                                                                        $1 = 0
                                                                       }
                                                                       HEAP32[$5 + 312 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$0 | 0]($1));
                                                                       HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 312 >> 2];
                                                                       break block123;
                                                                      }
                                                                      HEAP32[$5 + 308 >> 2] = 0;
                                                                      block201 : {
                                                                       if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                        $0 = jsvNewArray(HEAP32[$5 + 556 >> 2], HEAP32[$5 + 552 >> 2]);
                                                                        break block201;
                                                                       }
                                                                       $0 = jsvNewEmptyArray();
                                                                      }
                                                                      HEAP32[$5 + 304 >> 2] = $0;
                                                                      FUNCTION_TABLE[HEAP32[$5 + 568 >> 2]](HEAP32[$5 + 304 >> 2]);
                                                                      jsvUnLock(HEAP32[$5 + 304 >> 2]);
                                                                      HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 308 >> 2];
                                                                      break block123;
                                                                     }
                                                                     HEAP32[$5 + 300 >> 2] = 0;
                                                                     $2 = HEAP32[$5 + 568 >> 2];
                                                                     if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                      $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                     } else {
                                                                      $1 = 0
                                                                     }
                                                                     if (HEAP32[$5 + 552 >> 2] > 1) {
                                                                      $0 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                                     } else {
                                                                      $0 = 0
                                                                     }
                                                                     if (HEAP32[$5 + 552 >> 2] > 2) {
                                                                      $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
                                                                     } else {
                                                                      $3 = 0
                                                                     }
                                                                     HEAP32[$5 + 300 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, $3);
                                                                     HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 300 >> 2];
                                                                     break block123;
                                                                    }
                                                                    HEAP32[$5 + 296 >> 2] = 0;
                                                                    HEAP32[$5 + 296 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[HEAP32[$5 + 568 >> 2]]());
                                                                    HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 296 >> 2];
                                                                    break block123;
                                                                   }
                                                                   HEAP32[$5 + 292 >> 2] = 0;
                                                                   HEAP32[$5 + 292 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[HEAP32[$5 + 568 >> 2]]() | 0);
                                                                   HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 292 >> 2];
                                                                   break block123;
                                                                  }
                                                                  HEAP32[$5 + 288 >> 2] = 0;
                                                                  $1 = HEAP32[$5 + 568 >> 2];
                                                                  $0 = HEAP32[$5 + 560 >> 2];
                                                                  if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                   $2 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                  } else {
                                                                   $2 = 0
                                                                  }
                                                                  HEAP32[$5 + 288 >> 2] = jsvNewFromBool(FUNCTION_TABLE[$1 | 0]($0, $2) & 1);
                                                                  HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 288 >> 2];
                                                                  break block123;
                                                                 }
                                                                 HEAP32[$5 + 284 >> 2] = 0;
                                                                 block206 : {
                                                                  if (HEAP32[$5 + 552 >> 2] > 1) {
                                                                   $0 = jsvNewArray(HEAP32[$5 + 556 >> 2] + 4 | 0, HEAP32[$5 + 552 >> 2] - 1 | 0);
                                                                   break block206;
                                                                  }
                                                                  $0 = jsvNewEmptyArray();
                                                                 }
                                                                 HEAP32[$5 + 280 >> 2] = $0;
                                                                 $1 = HEAP32[$5 + 568 >> 2];
                                                                 $0 = HEAP32[$5 + 560 >> 2];
                                                                 if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                  $2 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                 } else {
                                                                  $2 = 0
                                                                 }
                                                                 FUNCTION_TABLE[$1 | 0]($0, $2, HEAP32[$5 + 280 >> 2]);
                                                                 jsvUnLock(HEAP32[$5 + 280 >> 2]);
                                                                 HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 284 >> 2];
                                                                 break block123;
                                                                }
                                                                HEAP32[$5 + 276 >> 2] = 0;
                                                                block208 : {
                                                                 if (HEAP32[$5 + 552 >> 2] > 1) {
                                                                  $0 = jsvNewArray(HEAP32[$5 + 556 >> 2] + 4 | 0, HEAP32[$5 + 552 >> 2] - 1 | 0);
                                                                  break block208;
                                                                 }
                                                                 $0 = jsvNewEmptyArray();
                                                                }
                                                                HEAP32[$5 + 272 >> 2] = $0;
                                                                $1 = HEAP32[$5 + 568 >> 2];
                                                                $0 = HEAP32[$5 + 560 >> 2];
                                                                if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                 $2 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                                } else {
                                                                 $2 = 0
                                                                }
                                                                HEAP32[$5 + 276 >> 2] = FUNCTION_TABLE[$1 | 0]($0, $2, HEAP32[$5 + 272 >> 2]);
                                                                jsvUnLock(HEAP32[$5 + 272 >> 2]);
                                                                HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 276 >> 2];
                                                                break block123;
                                                               }
                                                               HEAP32[$5 + 268 >> 2] = 0;
                                                               $2 = HEAP32[$5 + 568 >> 2];
                                                               $1 = HEAP32[$5 + 560 >> 2];
                                                               if (HEAP32[$5 + 552 >> 2] > 0) {
                                                                $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                               } else {
                                                                $0 = 0
                                                               }
                                                               if (HEAP32[$5 + 552 >> 2] > 1) {
                                                                $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                               } else {
                                                                $3 = 0
                                                               }
                                                               HEAP32[$5 + 268 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$2 | 0]($1, $0, $3) | 0);
                                                               HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 268 >> 2];
                                                               break block123;
                                                              }
                                                              HEAP32[$5 + 264 >> 2] = 0;
                                                              $2 = HEAP32[$5 + 568 >> 2];
                                                              $1 = HEAP32[$5 + 560 >> 2];
                                                              if (HEAP32[$5 + 552 >> 2] > 0) {
                                                               $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                              } else {
                                                               $0 = 0
                                                              }
                                                              if (HEAP32[$5 + 552 >> 2] > 1) {
                                                               $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                              } else {
                                                               $3 = 0
                                                              }
                                                              HEAP32[$5 + 264 >> 2] = jsvNewFromBool(FUNCTION_TABLE[$2 | 0]($1, $0, $3) & 1);
                                                              HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 264 >> 2];
                                                              break block123;
                                                             }
                                                             HEAP32[$5 + 260 >> 2] = 0;
                                                             $0 = HEAP32[$5 + 568 >> 2];
                                                             if (HEAP32[$5 + 552 >> 2] > 0) {
                                                              $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                             } else {
                                                              $1 = 0
                                                             }
                                                             HEAP32[$5 + 260 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$0 | 0](jsvGetFloat($1)));
                                                             HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 260 >> 2];
                                                             break block123;
                                                            }
                                                            HEAP32[$5 + 256 >> 2] = 0;
                                                            $0 = HEAP32[$5 + 568 >> 2];
                                                            if (HEAP32[$5 + 552 >> 2] > 0) {
                                                             $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                            } else {
                                                             $1 = 0
                                                            }
                                                            HEAP32[$5 + 256 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$0 | 0](jsvGetInteger($1)) | 0);
                                                            HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 256 >> 2];
                                                            break block123;
                                                           }
                                                           HEAP32[$5 + 252 >> 2] = 0;
                                                           $0 = HEAP32[$5 + 568 >> 2];
                                                           if (HEAP32[$5 + 552 >> 2] > 0) {
                                                            $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                           } else {
                                                            $1 = 0
                                                           }
                                                           HEAP32[$5 + 252 >> 2] = FUNCTION_TABLE[$0 | 0](jsvGetFloat($1));
                                                           HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 252 >> 2];
                                                           break block123;
                                                          }
                                                          HEAP32[$5 + 248 >> 2] = 0;
                                                          $0 = HEAP32[$5 + 568 >> 2];
                                                          if (HEAP32[$5 + 552 >> 2] > 0) {
                                                           $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                          } else {
                                                           $1 = 0
                                                          }
                                                          $8 = jsvGetFloat($1);
                                                          if (HEAP32[$5 + 552 >> 2] > 1) {
                                                           $1 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                          } else {
                                                           $1 = 0
                                                          }
                                                          $7 = jsvGetFloat($1);
                                                          if (HEAP32[$5 + 552 >> 2] > 2) {
                                                           $1 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
                                                          } else {
                                                           $1 = 0
                                                          }
                                                          HEAP32[$5 + 248 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$0 | 0]($8, $7, jsvGetFloat($1)));
                                                          HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 248 >> 2];
                                                          break block123;
                                                         }
                                                         HEAP32[$5 + 244 >> 2] = 0;
                                                         block220 : {
                                                          if (HEAP32[$5 + 552 >> 2] > 0) {
                                                           $0 = jsvNewArray(HEAP32[$5 + 556 >> 2], HEAP32[$5 + 552 >> 2]);
                                                           break block220;
                                                          }
                                                          $0 = jsvNewEmptyArray();
                                                         }
                                                         HEAP32[$5 + 240 >> 2] = $0;
                                                         HEAP32[$5 + 244 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[HEAP32[$5 + 568 >> 2]](HEAP32[$5 + 240 >> 2]));
                                                         jsvUnLock(HEAP32[$5 + 240 >> 2]);
                                                         HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 244 >> 2];
                                                         break block123;
                                                        }
                                                        HEAP32[$5 + 236 >> 2] = 0;
                                                        $0 = HEAP32[$5 + 568 >> 2];
                                                        if (HEAP32[$5 + 552 >> 2] > 0) {
                                                         $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                        } else {
                                                         $1 = 0
                                                        }
                                                        HEAP32[$5 + 236 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$0 | 0](jsvGetFloat($1)) | 0);
                                                        HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 236 >> 2];
                                                        break block123;
                                                       }
                                                       HEAP32[$5 + 232 >> 2] = 0;
                                                       $2 = HEAP32[$5 + 568 >> 2];
                                                       if (HEAP32[$5 + 552 >> 2] > 0) {
                                                        $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                       } else {
                                                        $0 = 0
                                                       }
                                                       $1 = jsvGetInteger($0);
                                                       if (HEAP32[$5 + 552 >> 2] > 1) {
                                                        $0 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                       } else {
                                                        $0 = 0
                                                       }
                                                       if (HEAP32[$5 + 552 >> 2] > 2) {
                                                        $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
                                                       } else {
                                                        $3 = 0
                                                       }
                                                       HEAP32[$5 + 232 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, $3);
                                                       HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 232 >> 2];
                                                       break block123;
                                                      }
                                                      HEAP32[$5 + 228 >> 2] = 0;
                                                      $1 = HEAP32[$5 + 568 >> 2];
                                                      if (HEAP32[$5 + 552 >> 2] > 0) {
                                                       $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                      } else {
                                                       $0 = 0
                                                      }
                                                      if (HEAP32[$5 + 552 >> 2] > 1) {
                                                       $2 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                      } else {
                                                       $2 = 0
                                                      }
                                                      HEAP32[$5 + 228 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$1 | 0]($0, jsvGetFloat($2)));
                                                      HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 228 >> 2];
                                                      break block123;
                                                     }
                                                     HEAP32[$5 + 224 >> 2] = 0;
                                                     $2 = HEAP32[$5 + 568 >> 2];
                                                     if (HEAP32[$5 + 552 >> 2] > 0) {
                                                      $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                     } else {
                                                      $1 = 0
                                                     }
                                                     if (HEAP32[$5 + 552 >> 2] > 1) {
                                                      $0 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                     } else {
                                                      $0 = 0
                                                     }
                                                     if (HEAP32[$5 + 552 >> 2] > 2) {
                                                      $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
                                                     } else {
                                                      $3 = 0
                                                     }
                                                     HEAP32[$5 + 224 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetInteger($3)));
                                                     HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 224 >> 2];
                                                     break block123;
                                                    }
                                                    HEAP32[$5 + 220 >> 2] = 0;
                                                    $2 = HEAP32[$5 + 568 >> 2];
                                                    if (HEAP32[$5 + 552 >> 2] > 0) {
                                                     $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                    } else {
                                                     $1 = 0
                                                    }
                                                    if (HEAP32[$5 + 552 >> 2] > 1) {
                                                     $0 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                    } else {
                                                     $0 = 0
                                                    }
                                                    if (HEAP32[$5 + 552 >> 2] > 2) {
                                                     $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
                                                    } else {
                                                     $3 = 0
                                                    }
                                                    FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetBool($3) & 1);
                                                    HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 220 >> 2];
                                                    break block123;
                                                   }
                                                   HEAP32[$5 + 216 >> 2] = 0;
                                                   $0 = HEAP32[$5 + 568 >> 2];
                                                   if (HEAP32[$5 + 552 >> 2] > 0) {
                                                    $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                   } else {
                                                    $1 = 0
                                                   }
                                                   $7 = jsvGetFloat($1);
                                                   if (HEAP32[$5 + 552 >> 2] > 1) {
                                                    $1 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                   } else {
                                                    $1 = 0
                                                   }
                                                   FUNCTION_TABLE[$0 | 0]($7, $1);
                                                   HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 216 >> 2];
                                                   break block123;
                                                  }
                                                  HEAP32[$5 + 212 >> 2] = 0;
                                                  $2 = HEAP32[$5 + 568 >> 2];
                                                  if (HEAP32[$5 + 552 >> 2] > 0) {
                                                   $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                  } else {
                                                   $1 = 0
                                                  }
                                                  if (HEAP32[$5 + 552 >> 2] > 1) {
                                                   $0 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                  } else {
                                                   $0 = 0
                                                  }
                                                  if (HEAP32[$5 + 552 >> 2] > 2) {
                                                   $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
                                                  } else {
                                                   $3 = 0
                                                  }
                                                  FUNCTION_TABLE[$2 | 0]($1, $0, $3);
                                                  HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 212 >> 2];
                                                  break block123;
                                                 }
                                                 HEAP32[$5 + 208 >> 2] = 0;
                                                 $1 = HEAP32[$5 + 568 >> 2];
                                                 if (HEAP32[$5 + 552 >> 2] > 0) {
                                                  $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                 } else {
                                                  $0 = 0
                                                 }
                                                 if (HEAP32[$5 + 552 >> 2] > 1) {
                                                  $2 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                                 } else {
                                                  $2 = 0
                                                 }
                                                 FUNCTION_TABLE[$1 | 0]($0, jsvGetBool($2) & 1);
                                                 HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 208 >> 2];
                                                 break block123;
                                                }
                                                HEAP32[$5 + 204 >> 2] = 0;
                                                $0 = HEAP32[$5 + 568 >> 2];
                                                if (HEAP32[$5 + 552 >> 2] > 0) {
                                                 $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                                } else {
                                                 $1 = 0
                                                }
                                                HEAP32[$5 + 204 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$0 | 0]($1) | 0);
                                                HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 204 >> 2];
                                                break block123;
                                               }
                                               HEAP32[$5 + 200 >> 2] = 0;
                                               $1 = HEAP32[$5 + 568 >> 2];
                                               if (HEAP32[$5 + 552 >> 2] > 0) {
                                                $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                               } else {
                                                $0 = 0
                                               }
                                               if (HEAP32[$5 + 552 >> 2] > 1) {
                                                $2 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                               } else {
                                                $2 = 0
                                               }
                                               HEAP32[$5 + 200 >> 2] = FUNCTION_TABLE[$1 | 0]($0, jsvGetInteger($2));
                                               HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 200 >> 2];
                                               break block123;
                                              }
                                              HEAP32[$5 + 196 >> 2] = 0;
                                              $1 = HEAP32[$5 + 568 >> 2];
                                              if (HEAP32[$5 + 552 >> 2] > 0) {
                                               $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                              } else {
                                               $0 = 0
                                              }
                                              if (HEAP32[$5 + 552 >> 2] > 1) {
                                               $2 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                              } else {
                                               $2 = 0
                                              }
                                              HEAP32[$5 + 196 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$1 | 0]($0, jsvGetBool($2) & 1) | 0);
                                              HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 196 >> 2];
                                              break block123;
                                             }
                                             HEAP32[$5 + 192 >> 2] = 0;
                                             $3 = HEAP32[$5 + 568 >> 2];
                                             if (HEAP32[$5 + 552 >> 2] > 0) {
                                              $2 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                             } else {
                                              $2 = 0
                                             }
                                             if (HEAP32[$5 + 552 >> 2] > 1) {
                                              $1 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                             } else {
                                              $1 = 0
                                             }
                                             if (HEAP32[$5 + 552 >> 2] > 2) {
                                              $0 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
                                             } else {
                                              $0 = 0
                                             }
                                             if (HEAP32[$5 + 552 >> 2] > 3) {
                                              $4 = HEAP32[HEAP32[$5 + 556 >> 2] + 12 >> 2]
                                             } else {
                                              $4 = 0
                                             }
                                             FUNCTION_TABLE[$3 | 0]($2, $1, $0, jsvGetInteger($4));
                                             HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 192 >> 2];
                                             break block123;
                                            }
                                            HEAP32[$5 + 188 >> 2] = 0;
                                            $2 = HEAP32[$5 + 568 >> 2];
                                            if (HEAP32[$5 + 552 >> 2] > 0) {
                                             $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                            } else {
                                             $1 = 0
                                            }
                                            if (HEAP32[$5 + 552 >> 2] > 1) {
                                             $0 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                            } else {
                                             $0 = 0
                                            }
                                            if (HEAP32[$5 + 552 >> 2] > 2) {
                                             $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
                                            } else {
                                             $3 = 0
                                            }
                                            HEAP32[$5 + 188 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetBool($3) & 1);
                                            HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 188 >> 2];
                                            break block123;
                                           }
                                           HEAP32[$5 + 184 >> 2] = 0;
                                           $0 = HEAP32[$5 + 568 >> 2];
                                           if (HEAP32[$5 + 552 >> 2] > 0) {
                                            $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                           } else {
                                            $1 = 0
                                           }
                                           $9 = jsvGetFloat($1);
                                           if (HEAP32[$5 + 552 >> 2] > 1) {
                                            $1 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                           } else {
                                            $1 = 0
                                           }
                                           $8 = jsvGetFloat($1);
                                           if (HEAP32[$5 + 552 >> 2] > 2) {
                                            $1 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
                                           } else {
                                            $1 = 0
                                           }
                                           $7 = jsvGetFloat($1);
                                           if (HEAP32[$5 + 552 >> 2] > 3) {
                                            $1 = HEAP32[HEAP32[$5 + 556 >> 2] + 12 >> 2]
                                           } else {
                                            $1 = 0
                                           }
                                           HEAP32[$5 + 184 >> 2] = FUNCTION_TABLE[$0 | 0]($9, $8, $7, jsvGetInteger($1));
                                           HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 184 >> 2];
                                           break block123;
                                          }
                                          HEAP32[$5 + 180 >> 2] = 0;
                                          block256 : {
                                           if (HEAP32[$5 + 552 >> 2] > 1) {
                                            $0 = jsvNewArray(HEAP32[$5 + 556 >> 2] + 4 | 0, HEAP32[$5 + 552 >> 2] - 1 | 0);
                                            break block256;
                                           }
                                           $0 = jsvNewEmptyArray();
                                          }
                                          HEAP32[$5 + 176 >> 2] = $0;
                                          $0 = HEAP32[$5 + 568 >> 2];
                                          if (HEAP32[$5 + 552 >> 2] > 0) {
                                           $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                          } else {
                                           $1 = 0
                                          }
                                          FUNCTION_TABLE[$0 | 0]($1, HEAP32[$5 + 176 >> 2]);
                                          jsvUnLock(HEAP32[$5 + 176 >> 2]);
                                          HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 180 >> 2];
                                          break block123;
                                         }
                                         HEAP32[$5 + 172 >> 2] = 0;
                                         $1 = HEAP32[$5 + 568 >> 2];
                                         if (HEAP32[$5 + 552 >> 2] > 0) {
                                          $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                         } else {
                                          $0 = 0
                                         }
                                         if (HEAP32[$5 + 552 >> 2] > 1) {
                                          $2 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                         } else {
                                          $2 = 0
                                         }
                                         FUNCTION_TABLE[$1 | 0]($0, jsvGetInteger($2));
                                         HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 172 >> 2];
                                         break block123;
                                        }
                                        HEAP32[$5 + 168 >> 2] = 0;
                                        block260 : {
                                         if (HEAP32[$5 + 552 >> 2] > 2) {
                                          $0 = jsvNewArray(HEAP32[$5 + 556 >> 2] + 8 | 0, HEAP32[$5 + 552 >> 2] - 2 | 0);
                                          break block260;
                                         }
                                         $0 = jsvNewEmptyArray();
                                        }
                                        HEAP32[$5 + 164 >> 2] = $0;
                                        $1 = HEAP32[$5 + 568 >> 2];
                                        if (HEAP32[$5 + 552 >> 2] > 0) {
                                         $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                        } else {
                                         $0 = 0
                                        }
                                        if (HEAP32[$5 + 552 >> 2] > 1) {
                                         $2 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                        } else {
                                         $2 = 0
                                        }
                                        HEAP32[$5 + 168 >> 2] = FUNCTION_TABLE[$1 | 0]($0, jsvGetFloat($2), HEAP32[$5 + 164 >> 2]);
                                        jsvUnLock(HEAP32[$5 + 164 >> 2]);
                                        HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 168 >> 2];
                                        break block123;
                                       }
                                       HEAP32[$5 + 160 >> 2] = 0;
                                       $1 = HEAP32[$5 + 568 >> 2];
                                       if (HEAP32[$5 + 552 >> 2] > 0) {
                                        $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                       } else {
                                        $0 = 0
                                       }
                                       if (HEAP32[$5 + 552 >> 2] > 1) {
                                        $2 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                       } else {
                                        $2 = 0
                                       }
                                       FUNCTION_TABLE[$1 | 0]($0, jsvGetFloat($2));
                                       HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 160 >> 2];
                                       break block123;
                                      }
                                      HEAP32[$5 + 156 >> 2] = 0;
                                      $0 = HEAP32[$5 + 568 >> 2];
                                      if (HEAP32[$5 + 552 >> 2] > 0) {
                                       $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                      } else {
                                       $1 = 0
                                      }
                                      HEAP32[$5 + 156 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$0 | 0](jshGetPinFromVar($1) & 255));
                                      HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 156 >> 2];
                                      break block123;
                                     }
                                     HEAP32[$5 + 152 >> 2] = 0;
                                     $1 = HEAP32[$5 + 568 >> 2];
                                     if (HEAP32[$5 + 552 >> 2] > 0) {
                                      $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                     } else {
                                      $0 = 0
                                     }
                                     $0 = jshGetPinFromVar($0) & 255;
                                     if (HEAP32[$5 + 552 >> 2] > 1) {
                                      $2 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                     } else {
                                      $2 = 0
                                     }
                                     $7 = jsvGetFloat($2);
                                     if (HEAP32[$5 + 552 >> 2] > 2) {
                                      $2 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
                                     } else {
                                      $2 = 0
                                     }
                                     FUNCTION_TABLE[$1 | 0]($0, $7, $2);
                                     HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 152 >> 2];
                                     break block123;
                                    }
                                    HEAP32[$5 + 148 >> 2] = 0;
                                    $2 = HEAP32[$5 + 568 >> 2];
                                    if (HEAP32[$5 + 552 >> 2] > 0) {
                                     $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                    } else {
                                     $0 = 0
                                    }
                                    $1 = jshGetPinFromVar($0) & 255;
                                    if (HEAP32[$5 + 552 >> 2] > 1) {
                                     $0 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                    } else {
                                     $0 = 0
                                    }
                                    $0 = jsvGetBool($0) & 1;
                                    if (HEAP32[$5 + 552 >> 2] > 2) {
                                     $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
                                    } else {
                                     $3 = 0
                                    }
                                    FUNCTION_TABLE[$2 | 0]($1, $0, $3);
                                    HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 148 >> 2];
                                    break block123;
                                   }
                                   HEAP32[$5 + 144 >> 2] = 0;
                                   $2 = HEAP32[$5 + 568 >> 2];
                                   if (HEAP32[$5 + 552 >> 2] > 0) {
                                    $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                   } else {
                                    $0 = 0
                                   }
                                   $1 = jshGetPinFromVar($0) & 255;
                                   if (HEAP32[$5 + 552 >> 2] > 1) {
                                    $0 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                   } else {
                                    $0 = 0
                                   }
                                   if (HEAP32[$5 + 552 >> 2] > 2) {
                                    $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
                                   } else {
                                    $3 = 0
                                   }
                                   FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetBool($3) & 1);
                                   HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 144 >> 2];
                                   break block123;
                                  }
                                  HEAP32[$5 + 140 >> 2] = 0;
                                  $0 = HEAP32[$5 + 568 >> 2];
                                  if (HEAP32[$5 + 552 >> 2] > 0) {
                                   $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                  } else {
                                   $1 = 0
                                  }
                                  HEAP32[$5 + 140 >> 2] = FUNCTION_TABLE[$0 | 0](jshGetPinFromVar($1) & 255);
                                  HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 140 >> 2];
                                  break block123;
                                 }
                                 HEAP32[$5 + 136 >> 2] = 0;
                                 $2 = HEAP32[$5 + 568 >> 2];
                                 if (HEAP32[$5 + 552 >> 2] > 0) {
                                  $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                 } else {
                                  $0 = 0
                                 }
                                 if (HEAP32[$5 + 552 >> 2] > 1) {
                                  $1 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                 } else {
                                  $1 = 0
                                 }
                                 $1 = jshGetPinFromVar($1) & 255;
                                 if (HEAP32[$5 + 552 >> 2] > 2) {
                                  $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
                                 } else {
                                  $3 = 0
                                 }
                                 HEAP32[$5 + 136 >> 2] = FUNCTION_TABLE[$2 | 0]($0, $1, $3);
                                 HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 136 >> 2];
                                 break block123;
                                }
                                HEAP32[$5 + 132 >> 2] = 0;
                                $2 = HEAP32[$5 + 568 >> 2];
                                $1 = HEAP32[$5 + 560 >> 2];
                                if (HEAP32[$5 + 552 >> 2] > 0) {
                                 $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                                } else {
                                 $0 = 0
                                }
                                $0 = jsvGetBool($0) & 1;
                                if (HEAP32[$5 + 552 >> 2] > 1) {
                                 $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                                } else {
                                 $3 = 0
                                }
                                FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetFloat($3));
                                HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 132 >> 2];
                                break block123;
                               }
                               HEAP32[$5 + 128 >> 2] = 0;
                               $2 = HEAP32[$5 + 568 >> 2];
                               $1 = HEAP32[$5 + 560 >> 2];
                               if (HEAP32[$5 + 552 >> 2] > 0) {
                                $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                               } else {
                                $0 = 0
                               }
                               $0 = jsvGetBool($0) & 1;
                               if (HEAP32[$5 + 552 >> 2] > 1) {
                                $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                               } else {
                                $3 = 0
                               }
                               FUNCTION_TABLE[$2 | 0]($1, $0, $3);
                               HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 128 >> 2];
                               break block123;
                              }
                              HEAP32[$5 + 124 >> 2] = 0;
                              $1 = HEAP32[$5 + 568 >> 2];
                              $0 = HEAP32[$5 + 560 >> 2];
                              if (HEAP32[$5 + 552 >> 2] > 0) {
                               $2 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                              } else {
                               $2 = 0
                              }
                              $7 = jsvGetFloat($2);
                              if (HEAP32[$5 + 552 >> 2] > 1) {
                               $2 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                              } else {
                               $2 = 0
                              }
                              FUNCTION_TABLE[$1 | 0]($0, $7, $2);
                              HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 124 >> 2];
                              break block123;
                             }
                             HEAP32[$5 + 120 >> 2] = 0;
                             $2 = HEAP32[$5 + 568 >> 2];
                             $1 = HEAP32[$5 + 560 >> 2];
                             if (HEAP32[$5 + 552 >> 2] > 0) {
                              $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                             } else {
                              $0 = 0
                             }
                             if (HEAP32[$5 + 552 >> 2] > 1) {
                              $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                             } else {
                              $3 = 0
                             }
                             FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetBool($3) & 1);
                             HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 120 >> 2];
                             break block123;
                            }
                            HEAP32[$5 + 116 >> 2] = 0;
                            block287 : {
                             if (HEAP32[$5 + 552 >> 2] > 0) {
                              $0 = jsvNewArray(HEAP32[$5 + 556 >> 2], HEAP32[$5 + 552 >> 2]);
                              break block287;
                             }
                             $0 = jsvNewEmptyArray();
                            }
                            HEAP32[$5 + 112 >> 2] = $0;
                            FUNCTION_TABLE[HEAP32[$5 + 568 >> 2]](HEAP32[$5 + 560 >> 2], HEAP32[$5 + 112 >> 2]);
                            jsvUnLock(HEAP32[$5 + 112 >> 2]);
                            HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 116 >> 2];
                            break block123;
                           }
                           HEAP32[$5 + 108 >> 2] = 0;
                           $1 = HEAP32[$5 + 568 >> 2];
                           if (HEAP32[$5 + 552 >> 2] > 0) {
                            $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                           } else {
                            $0 = 0
                           }
                           if (HEAP32[$5 + 552 >> 2] > 1) {
                            $2 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                           } else {
                            $2 = 0
                           }
                           HEAP32[$5 + 108 >> 2] = FUNCTION_TABLE[$1 | 0]($0, jsvGetBool($2) & 1);
                           HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 108 >> 2];
                           break block123;
                          }
                          HEAP32[$5 + 104 >> 2] = 0;
                          $3 = HEAP32[$5 + 568 >> 2];
                          if (HEAP32[$5 + 552 >> 2] > 0) {
                           $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                          } else {
                           $1 = 0
                          }
                          if (HEAP32[$5 + 552 >> 2] > 1) {
                           $0 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                          } else {
                           $0 = 0
                          }
                          if (HEAP32[$5 + 552 >> 2] > 2) {
                           $2 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
                          } else {
                           $2 = 0
                          }
                          $2 = jsvGetInteger($2);
                          if (HEAP32[$5 + 552 >> 2] > 3) {
                           $4 = HEAP32[HEAP32[$5 + 556 >> 2] + 12 >> 2]
                          } else {
                           $4 = 0
                          }
                          HEAP32[$5 + 104 >> 2] = jsvNewFromBool(FUNCTION_TABLE[$3 | 0]($1, $0, $2, jsvGetInteger($4)) & 1);
                          HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 104 >> 2];
                          break block123;
                         }
                         HEAP32[$5 + 100 >> 2] = 0;
                         $1 = HEAP32[$5 + 568 >> 2];
                         if (HEAP32[$5 + 552 >> 2] > 0) {
                          $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                         } else {
                          $0 = 0
                         }
                         if (HEAP32[$5 + 552 >> 2] > 1) {
                          $2 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                         } else {
                          $2 = 0
                         }
                         HEAP32[$5 + 100 >> 2] = jsvNewFromBool(FUNCTION_TABLE[$1 | 0]($0, $2) & 1);
                         HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 100 >> 2];
                         break block123;
                        }
                        HEAP32[$5 + 96 >> 2] = 0;
                        $0 = HEAP32[$5 + 568 >> 2];
                        if (HEAP32[$5 + 552 >> 2] > 0) {
                         $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                        } else {
                         $1 = 0
                        }
                        HEAP32[$5 + 96 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$0 | 0](jsvGetBool($1) & 1) | 0);
                        HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 96 >> 2];
                        break block123;
                       }
                       HEAP32[$5 + 92 >> 2] = 0;
                       $2 = HEAP32[$5 + 568 >> 2];
                       $1 = HEAP32[$5 + 560 >> 2];
                       if (HEAP32[$5 + 552 >> 2] > 0) {
                        $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                       } else {
                        $0 = 0
                       }
                       if (HEAP32[$5 + 552 >> 2] > 1) {
                        $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                       } else {
                        $3 = 0
                       }
                       HEAP32[$5 + 92 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, jshGetPinFromVar($3) & 255);
                       HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 92 >> 2];
                       break block123;
                      }
                      HEAP32[$5 + 88 >> 2] = 0;
                      $4 = HEAP32[$5 + 568 >> 2];
                      $3 = HEAP32[$5 + 560 >> 2];
                      if (HEAP32[$5 + 552 >> 2] > 0) {
                       $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                      } else {
                       $0 = 0
                      }
                      if (HEAP32[$5 + 552 >> 2] > 1) {
                       $1 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                      } else {
                       $1 = 0
                      }
                      $2 = jsvGetInteger($1);
                      if (HEAP32[$5 + 552 >> 2] > 2) {
                       $1 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
                      } else {
                       $1 = 0
                      }
                      $1 = jsvGetInteger($1);
                      if (HEAP32[$5 + 552 >> 2] > 3) {
                       $6 = HEAP32[HEAP32[$5 + 556 >> 2] + 12 >> 2]
                      } else {
                       $6 = 0
                      }
                      FUNCTION_TABLE[$4 | 0]($3, $0, $2, $1, jshGetPinFromVar($6) & 255);
                      HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 88 >> 2];
                      break block123;
                     }
                     HEAP32[$5 + 84 >> 2] = 0;
                     $3 = HEAP32[$5 + 568 >> 2];
                     $2 = HEAP32[$5 + 560 >> 2];
                     if (HEAP32[$5 + 552 >> 2] > 0) {
                      $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                     } else {
                      $0 = 0
                     }
                     $1 = jsvGetInteger($0);
                     if (HEAP32[$5 + 552 >> 2] > 1) {
                      $0 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                     } else {
                      $0 = 0
                     }
                     $0 = jsvGetInteger($0);
                     if (HEAP32[$5 + 552 >> 2] > 2) {
                      $4 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
                     } else {
                      $4 = 0
                     }
                     HEAP32[$5 + 84 >> 2] = FUNCTION_TABLE[$3 | 0]($2, $1, $0, jsvGetInteger($4));
                     HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 84 >> 2];
                     break block123;
                    }
                    HEAP32[$5 + 80 >> 2] = 0;
                    $2 = HEAP32[$5 + 568 >> 2];
                    $1 = HEAP32[$5 + 560 >> 2];
                    if (HEAP32[$5 + 552 >> 2] > 0) {
                     $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                    } else {
                     $0 = 0
                    }
                    $0 = jshGetPinFromVar($0) & 255;
                    if (HEAP32[$5 + 552 >> 2] > 1) {
                     $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                    } else {
                     $3 = 0
                    }
                    $7 = jsvGetFloat($3);
                    if (HEAP32[$5 + 552 >> 2] > 2) {
                     $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
                    } else {
                     $3 = 0
                    }
                    FUNCTION_TABLE[$2 | 0]($1, $0, $7, $3);
                    HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 80 >> 2];
                    break block123;
                   }
                   HEAP32[$5 + 76 >> 2] = 0;
                   $3 = HEAP32[$5 + 568 >> 2];
                   if (HEAP32[$5 + 552 >> 2] > 0) {
                    $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                   } else {
                    $0 = 0
                   }
                   $2 = jsvGetInteger($0);
                   if (HEAP32[$5 + 552 >> 2] > 1) {
                    $0 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                   } else {
                    $0 = 0
                   }
                   $1 = jsvGetInteger($0);
                   if (HEAP32[$5 + 552 >> 2] > 2) {
                    $0 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
                   } else {
                    $0 = 0
                   }
                   $0 = jsvGetInteger($0);
                   if (HEAP32[$5 + 552 >> 2] > 3) {
                    $4 = HEAP32[HEAP32[$5 + 556 >> 2] + 12 >> 2]
                   } else {
                    $4 = 0
                   }
                   HEAP32[$5 + 76 >> 2] = FUNCTION_TABLE[$3 | 0]($2, $1, $0, $4);
                   HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 76 >> 2];
                   break block123;
                  }
                  HEAP32[$5 + 72 >> 2] = 0;
                  $1 = HEAP32[$5 + 568 >> 2];
                  $0 = HEAP32[$5 + 560 >> 2];
                  if (HEAP32[$5 + 552 >> 2] > 0) {
                   $2 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                  } else {
                   $2 = 0
                  }
                  HEAP32[$5 + 72 >> 2] = FUNCTION_TABLE[$1 | 0]($0, jsvGetBool($2) & 1);
                  HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 72 >> 2];
                  break block123;
                 }
                 HEAP32[$5 + 68 >> 2] = 0;
                 $4 = HEAP32[$5 + 568 >> 2];
                 $3 = HEAP32[$5 + 560 >> 2];
                 if (HEAP32[$5 + 552 >> 2] > 0) {
                  $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                 } else {
                  $0 = 0
                 }
                 if (HEAP32[$5 + 552 >> 2] > 1) {
                  $1 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                 } else {
                  $1 = 0
                 }
                 $2 = jsvGetInteger($1);
                 if (HEAP32[$5 + 552 >> 2] > 2) {
                  $1 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
                 } else {
                  $1 = 0
                 }
                 $1 = jsvGetInteger($1);
                 if (HEAP32[$5 + 552 >> 2] > 3) {
                  $6 = HEAP32[HEAP32[$5 + 556 >> 2] + 12 >> 2]
                 } else {
                  $6 = 0
                 }
                 HEAP32[$5 + 68 >> 2] = FUNCTION_TABLE[$4 | 0]($3, $0, $2, $1, jsvGetInteger($6));
                 HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 68 >> 2];
                 break block123;
                }
                HEAP32[$5 + 64 >> 2] = 0;
                $4 = HEAP32[$5 + 568 >> 2];
                $3 = HEAP32[$5 + 560 >> 2];
                if (HEAP32[$5 + 552 >> 2] > 0) {
                 $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
                } else {
                 $0 = 0
                }
                $2 = jsvGetInteger($0);
                if (HEAP32[$5 + 552 >> 2] > 1) {
                 $0 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
                } else {
                 $0 = 0
                }
                $1 = jsvGetInteger($0);
                if (HEAP32[$5 + 552 >> 2] > 2) {
                 $0 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
                } else {
                 $0 = 0
                }
                $0 = jsvGetInteger($0);
                if (HEAP32[$5 + 552 >> 2] > 3) {
                 $6 = HEAP32[HEAP32[$5 + 556 >> 2] + 12 >> 2]
                } else {
                 $6 = 0
                }
                HEAP32[$5 + 64 >> 2] = FUNCTION_TABLE[$4 | 0]($3, $2, $1, $0, jsvGetInteger($6));
                HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 64 >> 2];
                break block123;
               }
               HEAP32[$5 + 60 >> 2] = 0;
               $2 = HEAP32[$5 + 568 >> 2];
               $1 = HEAP32[$5 + 560 >> 2];
               if (HEAP32[$5 + 552 >> 2] > 0) {
                $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
               } else {
                $0 = 0
               }
               $0 = jsvGetInteger($0);
               if (HEAP32[$5 + 552 >> 2] > 1) {
                $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
               } else {
                $3 = 0
               }
               HEAP32[$5 + 60 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetInteger($3)) | 0);
               HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 60 >> 2];
               break block123;
              }
              HEAP32[$5 + 56 >> 2] = 0;
              $3 = HEAP32[$5 + 568 >> 2];
              $2 = HEAP32[$5 + 560 >> 2];
              if (HEAP32[$5 + 552 >> 2] > 0) {
               $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
              } else {
               $0 = 0
              }
              $1 = jsvGetInteger($0);
              if (HEAP32[$5 + 552 >> 2] > 1) {
               $0 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
              } else {
               $0 = 0
              }
              $0 = jsvGetInteger($0);
              if (HEAP32[$5 + 552 >> 2] > 2) {
               $4 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
              } else {
               $4 = 0
              }
              HEAP32[$5 + 56 >> 2] = FUNCTION_TABLE[$3 | 0]($2, $1, $0, $4);
              HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 56 >> 2];
              break block123;
             }
             HEAP32[$5 + 52 >> 2] = 0;
             $3 = HEAP32[$5 + 568 >> 2];
             $2 = HEAP32[$5 + 560 >> 2];
             if (HEAP32[$5 + 552 >> 2] > 0) {
              $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
             } else {
              $1 = 0
             }
             if (HEAP32[$5 + 552 >> 2] > 1) {
              $0 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
             } else {
              $0 = 0
             }
             if (HEAP32[$5 + 552 >> 2] > 2) {
              $4 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
             } else {
              $4 = 0
             }
             HEAP32[$5 + 52 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$3 | 0]($2, $1, $0, $4) | 0);
             HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 52 >> 2];
             break block123;
            }
            HEAP32[$5 + 48 >> 2] = 0;
            $3 = HEAP32[$5 + 568 >> 2];
            $2 = HEAP32[$5 + 560 >> 2];
            if (HEAP32[$5 + 552 >> 2] > 0) {
             $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
            } else {
             $1 = 0
            }
            if (HEAP32[$5 + 552 >> 2] > 1) {
             $0 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
            } else {
             $0 = 0
            }
            if (HEAP32[$5 + 552 >> 2] > 2) {
             $4 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
            } else {
             $4 = 0
            }
            HEAP32[$5 + 48 >> 2] = FUNCTION_TABLE[$3 | 0]($2, $1, $0, $4);
            HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 48 >> 2];
            break block123;
           }
           HEAP32[$5 + 44 >> 2] = 0;
           $4 = HEAP32[$5 + 568 >> 2];
           $3 = HEAP32[$5 + 560 >> 2];
           if (HEAP32[$5 + 552 >> 2] > 0) {
            $1 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
           } else {
            $1 = 0
           }
           if (HEAP32[$5 + 552 >> 2] > 1) {
            $0 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
           } else {
            $0 = 0
           }
           $2 = jsvGetInteger($0);
           if (HEAP32[$5 + 552 >> 2] > 2) {
            $0 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
           } else {
            $0 = 0
           }
           if (HEAP32[$5 + 552 >> 2] > 3) {
            $6 = HEAP32[HEAP32[$5 + 556 >> 2] + 12 >> 2]
           } else {
            $6 = 0
           }
           HEAP32[$5 + 44 >> 2] = FUNCTION_TABLE[$4 | 0]($3, $1, $2, $0, jsvGetInteger($6));
           HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 44 >> 2];
           break block123;
          }
          HEAP32[$5 + 40 >> 2] = 0;
          $1 = HEAP32[$5 + 568 >> 2];
          $0 = HEAP32[$5 + 560 >> 2];
          if (HEAP32[$5 + 552 >> 2] > 0) {
           $2 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
          } else {
           $2 = 0
          }
          HEAP32[$5 + 40 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$1 | 0]($0, $2) | 0);
          HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 40 >> 2];
          break block123;
         }
         HEAP32[$5 + 36 >> 2] = 0;
         $4 = HEAP32[$5 + 568 >> 2];
         $3 = HEAP32[$5 + 560 >> 2];
         if (HEAP32[$5 + 552 >> 2] > 0) {
          $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
         } else {
          $0 = 0
         }
         if (HEAP32[$5 + 552 >> 2] > 1) {
          $1 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
         } else {
          $1 = 0
         }
         $2 = jsvGetInteger($1);
         if (HEAP32[$5 + 552 >> 2] > 2) {
          $1 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
         } else {
          $1 = 0
         }
         $1 = jsvGetInteger($1);
         if (HEAP32[$5 + 552 >> 2] > 3) {
          $6 = HEAP32[HEAP32[$5 + 556 >> 2] + 12 >> 2]
         } else {
          $6 = 0
         }
         HEAP32[$5 + 36 >> 2] = FUNCTION_TABLE[$4 | 0]($3, $0, $2, $1, jsvGetBool($6) & 1);
         HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 36 >> 2];
         break block123;
        }
        HEAP32[$5 + 32 >> 2] = 0;
        $1 = HEAP32[$5 + 568 >> 2];
        $0 = HEAP32[$5 + 560 >> 2];
        if (HEAP32[$5 + 552 >> 2] > 0) {
         $2 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
        } else {
         $2 = 0
        }
        $9 = jsvGetFloat($2);
        if (HEAP32[$5 + 552 >> 2] > 1) {
         $2 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
        } else {
         $2 = 0
        }
        $8 = jsvGetFloat($2);
        if (HEAP32[$5 + 552 >> 2] > 2) {
         $2 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
        } else {
         $2 = 0
        }
        $7 = jsvGetFloat($2);
        if (HEAP32[$5 + 552 >> 2] > 3) {
         $2 = HEAP32[HEAP32[$5 + 556 >> 2] + 12 >> 2]
        } else {
         $2 = 0
        }
        HEAP32[$5 + 32 >> 2] = FUNCTION_TABLE[$1 | 0]($0, $9, $8, $7, jsvGetFloat($2));
        HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 32 >> 2];
        break block123;
       }
       HEAP32[$5 + 28 >> 2] = 0;
       $2 = HEAP32[$5 + 568 >> 2];
       $1 = HEAP32[$5 + 560 >> 2];
       if (HEAP32[$5 + 552 >> 2] > 0) {
        $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
       } else {
        $0 = 0
       }
       $0 = jsvGetInteger($0);
       if (HEAP32[$5 + 552 >> 2] > 1) {
        $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
       } else {
        $3 = 0
       }
       HEAP32[$5 + 28 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetInteger($3));
       HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 28 >> 2];
       break block123;
      }
      HEAP32[$5 + 24 >> 2] = 0;
      $2 = HEAP32[$5 + 568 >> 2];
      $1 = HEAP32[$5 + 560 >> 2];
      if (HEAP32[$5 + 552 >> 2] > 0) {
       $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
      } else {
       $0 = 0
      }
      if (HEAP32[$5 + 552 >> 2] > 1) {
       $3 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
      } else {
       $3 = 0
      }
      HEAP32[$5 + 24 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetBool($3) & 1);
      HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 24 >> 2];
      break block123;
     }
     HEAP32[$5 + 20 >> 2] = 0;
     $4 = HEAP32[$5 + 568 >> 2];
     $3 = HEAP32[$5 + 560 >> 2];
     if (HEAP32[$5 + 552 >> 2] > 0) {
      $0 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
     } else {
      $0 = 0
     }
     if (HEAP32[$5 + 552 >> 2] > 1) {
      $1 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
     } else {
      $1 = 0
     }
     $2 = jsvGetInteger($1);
     if (HEAP32[$5 + 552 >> 2] > 2) {
      $1 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
     } else {
      $1 = 0
     }
     $1 = jsvGetInteger($1);
     if (HEAP32[$5 + 552 >> 2] > 3) {
      $6 = HEAP32[HEAP32[$5 + 556 >> 2] + 12 >> 2]
     } else {
      $6 = 0
     }
     HEAP32[$5 + 20 >> 2] = FUNCTION_TABLE[$4 | 0]($3, $0, $2, $1, $6);
     HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 20 >> 2];
     break block123;
    }
    HEAP32[$5 + 16 >> 2] = 0;
    $3 = HEAP32[$5 + 568 >> 2];
    if (HEAP32[$5 + 552 >> 2] > 0) {
     $2 = HEAP32[HEAP32[$5 + 556 >> 2] >> 2]
    } else {
     $2 = 0
    }
    if (HEAP32[$5 + 552 >> 2] > 1) {
     $1 = HEAP32[HEAP32[$5 + 556 >> 2] + 4 >> 2]
    } else {
     $1 = 0
    }
    if (HEAP32[$5 + 552 >> 2] > 2) {
     $0 = HEAP32[HEAP32[$5 + 556 >> 2] + 8 >> 2]
    } else {
     $0 = 0
    }
    if (HEAP32[$5 + 552 >> 2] > 3) {
     $4 = HEAP32[HEAP32[$5 + 556 >> 2] + 12 >> 2]
    } else {
     $4 = 0
    }
    HEAP32[$5 + 16 >> 2] = FUNCTION_TABLE[$3 | 0]($2, $1, $0, $4);
    HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 16 >> 2];
    break block123;
   }
   HEAP32[$5 >> 2] = HEAPU16[$5 + 566 >> 1];
   jsExceptionHere(1, 139634, $5);
   HEAP32[$5 + 572 >> 2] = 0;
  }
  __stack_pointer = $5 + 576 | 0;
  return HEAP32[$5 + 572 >> 2];
 }
 
 function gen_jswrap_Float32Array_Float32Array($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = jswrap_typedarray_constructor(36, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_Float64Array_Float64Array($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = jswrap_typedarray_constructor(40, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_Int16Array_Int16Array($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = jswrap_typedarray_constructor(18, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_Int32Array_Int32Array($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = jswrap_typedarray_constructor(20, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_Int8Array_Int8Array($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = jswrap_typedarray_constructor(17, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_Uint16Array_Uint16Array($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = jswrap_typedarray_constructor(2, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_Uint24Array_Uint24Array($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = jswrap_typedarray_constructor(3, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_Uint32Array_Uint32Array($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = jswrap_typedarray_constructor(4, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_Uint8Array_Uint8Array($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = jswrap_typedarray_constructor(1, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_Uint8ClampedArray_Uint8ClampedArray($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = jswrap_typedarray_constructor(65, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_peek16($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $0 = jswrap_io_peek(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 2);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_peek32($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $0 = jswrap_io_peek(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 4);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_peek8($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $0 = jswrap_io_peek(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_poke16($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  jswrap_io_poke(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 2);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function gen_jswrap_poke32($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  jswrap_io_poke(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 4);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function gen_jswrap_poke8($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  jswrap_io_poke(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function gen_jswrap_BTN() {
  return 17;
 }
 
 function gen_jswrap_BTN1() {
  return 17;
 }
 
 function gen_jswrap_HIGH() {
  return 1;
 }
 
 function gen_jswrap_I2C1() {
  return jspNewObject(142199, 141317) | 0;
 }
 
 function gen_jswrap_Infinity() {
  return Infinity;
 }
 
 function gen_jswrap_LED1() {
  return jspExecuteJSFunctionCode(148266, 121585, 233, 0, 0, 0) | 0;
 }
 
 function gen_jswrap_LED2() {
  return jspExecuteJSFunctionCode(148266, 121819, 233, 0, 0, 0) | 0;
 }
 
 function gen_jswrap_LOW() {
  return 0;
 }
 
 function gen_jswrap_LoopbackA() {
  return jspNewObject(141380, 135856) | 0;
 }
 
 function gen_jswrap_LoopbackB() {
  return jspNewObject(141326, 135856) | 0;
 }
 
 function gen_jswrap_NaN() {
  return NaN;
 }
 
 function gen_jswrap_SPI1() {
  return jspNewObject(142185, 141196) | 0;
 }
 
 function gen_jswrap_Serial1() {
  return jspNewObject(142150, 135856) | 0;
 }
 
 function gen_jswrap_Terminal() {
  return jspNewObject(135838, 135856) | 0;
 }
 
 function gen_jswrap_USB() {
  return jspNewObject(141340, 135856) | 0;
 }
 
 function gen_jswrap_VIBRATE() {
  return 19;
 }
 
 function gen_jswrap_dump() {
  jsiDumpState(7, 0);
 }
 
 function gen_jswrap_getTime() {
  return +((+(jshGetSystemTime() >>> 0) + +(i64toi32_i32$HIGH_BITS | 0) * 4294967296.0) / (+(jshGetTimeFromMilliseconds(1.0e3) >>> 0) + +(i64toi32_i32$HIGH_BITS | 0) * 4294967296.0));
 }
 
 function gen_jswrap_Bangle_load($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 12 >> 2];
  jsvUnLock(jspExecuteJSFunctionCode(140422, 142568, 130, 0, 1, $1 + 8 | 0));
  __stack_pointer = $1 + 16 | 0;
 }
 
 function gen_jswrap_Bangle_setUI($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 >> 2] = HEAP32[$2 + 12 >> 2];
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
  jsvUnLock(jspExecuteJSFunctionCode(138086, 159863, 3067, 0, 2, $2));
  __stack_pointer = $2 + 16 | 0;
 }
 
 function gen_jswrap_Bangle_drawWidgets() {
  jsvUnLock(jspExecuteJSFunctionCode(148266, 121193, 391, 0, 0, 0));
 }
 
 function gen_jswrap_Bangle_loadWidgets() {
  jsvUnLock(jspExecuteJSFunctionCode(148266, 123276, 258, 0, 0, 0));
 }
 
 function gen_jswrap_Bangle_showClock() {
  jsvUnLock(jspExecuteJSFunctionCode(148266, 144474, 23, 0, 0, 0));
 }
 
 function gen_jswrap_Bangle_showLauncher() {
  jsvUnLock(jspExecuteJSFunctionCode(148266, 139653, 508, 0, 0, 0));
 }
 
 function gen_jswrap_Bangle_showRecoveryMenu() {
  jsvUnLock(jspExecuteJSFunctionCode(148266, 144568, 1058, 0, 0, 0));
 }
 
 function gen_jswrap_E_showAlert($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 >> 2] = HEAP32[$2 + 12 >> 2];
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
  $0 = jspExecuteJSFunctionCode(140420, 162931, 240, 0, 2, $2);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_E_showMenu($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 12 >> 2];
  $0 = jspExecuteJSFunctionCode(135507, 163172, 3269, 0, 1, $1 + 8 | 0);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_E_showMessage($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 >> 2] = HEAP32[$2 + 12 >> 2];
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
  jsvUnLock(jspExecuteJSFunctionCode(140416, 145732, 552, 0, 2, $2));
  __stack_pointer = $2 + 16 | 0;
 }
 
 function gen_jswrap_E_showPrompt($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 >> 2] = HEAP32[$2 + 12 >> 2];
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
  $0 = jspExecuteJSFunctionCode(140412, 142699, 1473, 0, 2, $2);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_E_showScroller($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 12 >> 2];
  $0 = jspExecuteJSFunctionCode(139651, 166442, 1300, 0, 1, $1 + 8 | 0);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_E_getAnalogVRef() {
  return +jshReadVRef();
 }
 
 function gen_jswrap_Graphics_drawPoly($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP8[$3 + 7 | 0] = $2;
  $0 = jswrap_graphics_drawPoly_X(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1, 0);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_Graphics_drawPolyAA($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP8[$3 + 7 | 0] = $2;
  $0 = jswrap_graphics_drawPoly_X(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1, 1);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_Graphics_fillPoly($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $0 = jswrap_graphics_fillPoly_X(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_Graphics_fillPolyAA($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $0 = jswrap_graphics_fillPoly_X(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_Graphics_getBgColor($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jswrap_graphics_getColorX(HEAP32[$1 + 12 >> 2], 0);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_Graphics_getColor($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jswrap_graphics_getColorX(HEAP32[$1 + 12 >> 2], 1);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_Graphics_getHeight($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jswrap_graphics_getWidthOrHeight(HEAP32[$1 + 12 >> 2], 1);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_Graphics_getWidth($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jswrap_graphics_getWidthOrHeight(HEAP32[$1 + 12 >> 2], 0);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_Graphics_setBgColor($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
  $0 = jswrap_graphics_setColorX(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2], 0);
  __stack_pointer = $4 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_Graphics_setColor($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
  $0 = jswrap_graphics_setColorX(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2], 1);
  __stack_pointer = $4 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_Graphics_setFontBitmap($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jswrap_graphics_setFontSizeX(HEAP32[$1 + 12 >> 2], 8193, 0);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_Graphics_setFontVector($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $0 = jswrap_graphics_setFontSizeX(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_NRF_setAdvertising($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
 }
 
 function gen_jswrap_NRF_setServices($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
 }
 
 function gen_jswrap_NRF_getAddress() {
  return jsvNewFromString(140268) | 0;
 }
 
 function gen_jswrap_NRF_getSecurityStatus() {
  return jsvNewObject() | 0;
 }
 
 function gen_jswrap_Bluetooth_setConsole() {
  
 }
 
 function gen_jswrap_Array_pop($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jsvSkipNameAndUnLock(jsvArrayPop(HEAP32[$1 + 12 >> 2]));
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_Array_isArray($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jsvIsArray(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return $0 & 1;
 }
 
 function gen_jswrap_ArrayBuffer_byteLength($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  return HEAPU8[$0 + 4 | 0] << 16 | (HEAPU8[$0 + 2 | 0] | HEAPU8[$0 + 3 | 0] << 8);
 }
 
 function gen_jswrap_ArrayBufferView_buffer($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jsvLock(jsvGetFirstChild(HEAP32[$1 + 12 >> 2]) & 65535);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_ArrayBufferView_byteLength($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  return Math_imul(HEAPU8[HEAP32[$1 + 12 >> 2] + 5 | 0] & 15, HEAPU8[$0 + 4 | 0] << 16 | (HEAPU8[$0 + 2 | 0] | HEAPU8[$0 + 3 | 0] << 8)) | 0;
 }
 
 function gen_jswrap_ArrayBufferView_byteOffset($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  return HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
 }
 
 function gen_jswrap_DataView_getFloat32($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP8[$3 + 7 | 0] = $2;
  $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 36, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_DataView_getFloat64($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP8[$3 + 7 | 0] = $2;
  $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 40, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_DataView_getInt16($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP8[$3 + 7 | 0] = $2;
  $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 18, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_DataView_getInt32($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP8[$3 + 7 | 0] = $2;
  $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 20, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_DataView_getInt8($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP8[$3 + 7 | 0] = $2;
  $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 17, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_DataView_getUint16($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP8[$3 + 7 | 0] = $2;
  $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 2, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_DataView_getUint32($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP8[$3 + 7 | 0] = $2;
  $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 4, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_DataView_getUint8($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP8[$3 + 7 | 0] = $2;
  $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 1, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_DataView_setFloat32($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP8[$4 + 3 | 0] = $3;
  jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 36, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function gen_jswrap_DataView_setFloat64($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP8[$4 + 3 | 0] = $3;
  jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 40, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function gen_jswrap_DataView_setInt16($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP8[$4 + 3 | 0] = $3;
  jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 18, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function gen_jswrap_DataView_setInt32($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP8[$4 + 3 | 0] = $3;
  jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 20, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function gen_jswrap_DataView_setInt8($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP8[$4 + 3 | 0] = $3;
  jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 17, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function gen_jswrap_DataView_setUint16($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP8[$4 + 3 | 0] = $3;
  jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 2, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function gen_jswrap_DataView_setUint32($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP8[$4 + 3 | 0] = $3;
  jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 4, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function gen_jswrap_DataView_setUint8($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP8[$4 + 3 | 0] = $3;
  jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 1, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function gen_jswrap_Number_MAX_VALUE() {
  return 1797693134862315708145274.0e284;
 }
 
 function gen_jswrap_Number_MIN_VALUE() {
  return 2.2250738585072014e-308;
 }
 
 function gen_jswrap_Number_NEGATIVE_INFINITY() {
  return -Infinity;
 }
 
 function gen_jswrap_Number_NaN() {
  return NaN;
 }
 
 function gen_jswrap_Number_POSITIVE_INFINITY() {
  return Infinity;
 }
 
 function gen_jswrap_Object_entries($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jswrap_object_values_or_entries(HEAP32[$1 + 12 >> 2], 1);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_Object_getOwnPropertyNames($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jswrap_object_keys_or_property_names(HEAP32[$1 + 12 >> 2], 1);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_Object_keys($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jswrap_object_keys_or_property_names(HEAP32[$1 + 12 >> 2], 0);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_Object_values($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jswrap_object_values_or_entries(HEAP32[$1 + 12 >> 2], 0);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_String_includes($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = jswrap_string_indexOf(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0);
  __stack_pointer = $3 + 16 | 0;
  return ($0 | 0) >= 0 | 0;
 }
 
 function gen_jswrap_String_indexOf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = jswrap_string_indexOf(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_String_lastIndexOf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = jswrap_string_indexOf(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 1);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_String_padEnd($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = jswrap_string_padX(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_String_padStart($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = jswrap_string_padX(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 1);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_String_removeAccents($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jswrap_string_removeAccents(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_String_toLowerCase($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jswrap_string_toUpperLowerCase(HEAP32[$1 + 12 >> 2], 0);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_String_toUpperCase($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jswrap_string_toUpperLowerCase(HEAP32[$1 + 12 >> 2], 1);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_Math_acos($0) {
  $0 = +$0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAPF64[$1 + 8 >> 3] = $0;
  $0 = jswrap_math_asin(HEAPF64[$1 + 8 >> 3]);
  __stack_pointer = $1 + 16 | 0;
  return +(1.5707963267948966 - $0);
 }
 
 function gen_jswrap_Math_max($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0.0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $2 = jswrap_math_minmax(HEAP32[$1 + 12 >> 2], 1);
  __stack_pointer = $1 + 16 | 0;
  return +$2;
 }
 
 function gen_jswrap_Math_min($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0.0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $2 = jswrap_math_minmax(HEAP32[$1 + 12 >> 2], 0);
  __stack_pointer = $1 + 16 | 0;
  return +$2;
 }
 
 function gen_jswrap_Math_randInt($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  block : {
   if (HEAP32[$1 + 12 >> 2] > 0) {
    $0 = (rand() | 0) % HEAP32[$1 + 12 >> 2] | 0;
    break block;
   }
   $0 = rand() ^ rand() << 1;
  }
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_Math_tan($0) {
  $0 = +$0;
  var $1 = 0, $2 = 0.0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAPF64[$1 + 8 >> 3] = $0;
  $0 = jswrap_math_sin(HEAPF64[$1 + 8 >> 3]);
  $2 = jswrap_math_sin(HEAPF64[$1 + 8 >> 3] + 1.5707963267948966);
  __stack_pointer = $1 + 16 | 0;
  return +($0 / $2);
 }
 
 function gen_jswrap_Math_E() {
  return 2.718281828459045;
 }
 
 function gen_jswrap_Math_LN10() {
  return 2.302585092994046;
 }
 
 function gen_jswrap_Math_LN2() {
  return .6931471805599453;
 }
 
 function gen_jswrap_Math_LOG10E() {
  return .4342944819032518;
 }
 
 function gen_jswrap_Math_LOG2E() {
  return 1.4426950408889634;
 }
 
 function gen_jswrap_Math_PI() {
  return 3.141592653589793;
 }
 
 function gen_jswrap_Math_SQRT1_2() {
  return .7071067811865476;
 }
 
 function gen_jswrap_Math_SQRT2() {
  return 1.4142135623730951;
 }
 
 function gen_jswrap_Math_random() {
  return +(+(rand() | 0) * 4.656612873077393e-10);
 }
 
 function gen_jswrap_process_version() {
  return jsvNewFromString(141988) | 0;
 }
 
 function gen_jswrap_Serial_find($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  $0 = jshGetDeviceObjectFor(768, 848, HEAPU8[$1 + 15 | 0]);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_SPI_find($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  $0 = jshGetDeviceObjectFor(512, 544, HEAPU8[$1 + 15 | 0]);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_I2C_find($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  $0 = jshGetDeviceObjectFor(640, 688, HEAPU8[$1 + 15 | 0]);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_crypto_SHA1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jswrap_crypto_SHAx(HEAP32[$1 + 12 >> 2], 1);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_crypto_SHA224($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jswrap_crypto_SHAx(HEAP32[$1 + 12 >> 2], 224);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_crypto_SHA256($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jswrap_crypto_SHAx(HEAP32[$1 + 12 >> 2], 256);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_crypto_SHA384($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jswrap_crypto_SHAx(HEAP32[$1 + 12 >> 2], 384);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function gen_jswrap_crypto_SHA512($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jswrap_crypto_SHAx(HEAP32[$1 + 12 >> 2], 512);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function jsfNameFromString($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 44 >> 2] = $1;
  $2 = $3;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP8[$2 + 21 | 0] = 0;
  HEAP8[$2 + 22 | 0] = 0;
  HEAP8[$2 + 23 | 0] = 0;
  HEAP8[$2 + 24 | 0] = 0;
  HEAP8[$2 + 25 | 0] = 0;
  HEAP8[$2 + 26 | 0] = 0;
  HEAP8[$2 + 27 | 0] = 0;
  HEAP8[$2 + 28 | 0] = 0;
  HEAP32[$2 + 16 >> 2] = 0;
  HEAP32[$2 + 20 >> 2] = 0;
  HEAP32[$2 + 8 >> 2] = 0;
  HEAP32[$2 + 12 >> 2] = 0;
  strcpy($2, HEAP32[$2 + 44 >> 2]);
  $1 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $4 = $1;
  $1 = $0;
  HEAP32[$1 >> 2] = $4;
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP32[$1 + 24 >> 2] = HEAP32[$3 + 24 >> 2];
  $1 = HEAP32[$3 + 20 >> 2];
  $2 = HEAP32[$3 + 16 >> 2];
  $4 = $2;
  $2 = $0;
  HEAP32[$2 + 16 >> 2] = $4;
  HEAP32[$2 + 20 >> 2] = $1;
  $2 = HEAP32[$3 + 12 >> 2];
  $1 = HEAP32[$3 + 8 >> 2];
  $4 = $1;
  $1 = $0;
  HEAP32[$1 + 8 >> 2] = $4;
  HEAP32[$1 + 12 >> 2] = $2;
  __stack_pointer = $3 + 48 | 0;
 }
 
 function jsfNameFromVar($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 44 >> 2] = $1;
  $2 = $3;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP8[$2 + 21 | 0] = 0;
  HEAP8[$2 + 22 | 0] = 0;
  HEAP8[$2 + 23 | 0] = 0;
  HEAP8[$2 + 24 | 0] = 0;
  HEAP8[$2 + 25 | 0] = 0;
  HEAP8[$2 + 26 | 0] = 0;
  HEAP8[$2 + 27 | 0] = 0;
  HEAP8[$2 + 28 | 0] = 0;
  HEAP32[$2 + 16 >> 2] = 0;
  HEAP32[$2 + 20 >> 2] = 0;
  HEAP32[$2 + 8 >> 2] = 0;
  HEAP32[$2 + 12 >> 2] = 0;
  jsvGetString(HEAP32[$2 + 44 >> 2], $2, 29);
  $1 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $4 = $1;
  $1 = $0;
  HEAP32[$1 >> 2] = $4;
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP32[$1 + 24 >> 2] = HEAP32[$3 + 24 >> 2];
  $1 = HEAP32[$3 + 20 >> 2];
  $2 = HEAP32[$3 + 16 >> 2];
  $4 = $2;
  $2 = $0;
  HEAP32[$2 + 16 >> 2] = $4;
  HEAP32[$2 + 20 >> 2] = $1;
  $2 = HEAP32[$3 + 12 >> 2];
  $1 = HEAP32[$3 + 8 >> 2];
  $4 = $1;
  $1 = $0;
  HEAP32[$1 + 8 >> 2] = $4;
  HEAP32[$1 + 12 >> 2] = $2;
  __stack_pointer = $3 + 48 | 0;
 }
 
 function jsfNameFromVarAndUnLock($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $1;
  jsfNameFromVar($0, HEAP32[$2 + 12 >> 2]);
  jsvUnLock(HEAP32[$2 + 12 >> 2]);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsfVarFromName($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 28 | 0] = 0;
  $2 = $0;
  $0 = HEAP32[$2 >> 2];
  $3 = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = $3;
  HEAP32[$1 + 24 >> 2] = HEAP32[$2 + 24 >> 2];
  $0 = HEAP32[$2 + 20 >> 2];
  $3 = HEAP32[$2 + 16 >> 2];
  HEAP32[$1 + 16 >> 2] = $3;
  HEAP32[$1 + 20 >> 2] = $0;
  $3 = HEAP32[$2 + 12 >> 2];
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP32[$1 + 12 >> 2] = $3;
  $0 = jsvNewFromString($1);
  __stack_pointer = $1 + 32 | 0;
  return $0;
 }
 
 function jsfIsNameEqual($0, $1) {
  return !memcmp($0, $1, 28);
 }
 
 function jsfGetFileSize($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] & 16777215;
 }
 
 function jsfGetFileFlags($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] >>> 24 | 0;
 }
 
 function jsfEraseAll() {
  jsfCacheClear();
  HEAP32[92139] = 0;
  HEAP32[92140] = 0;
  return jshFlashErasePages(134217728, 8388608) & 1;
 }
 
 function jsfCacheClear() {
  
 }
 
 function jsfEraseFile($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = __stack_pointer - 112 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 64 >> 2] = HEAP32[$0 + 24 >> 2];
  $2 = HEAP32[$0 + 16 >> 2];
  $3 = HEAP32[$0 + 20 >> 2];
  HEAP32[$1 + 56 >> 2] = $2;
  HEAP32[$1 + 60 >> 2] = $3;
  $2 = HEAP32[$0 + 12 >> 2];
  $3 = HEAP32[$0 + 8 >> 2];
  HEAP32[$1 + 48 >> 2] = $3;
  HEAP32[$1 + 52 >> 2] = $2;
  $3 = HEAP32[$0 + 4 >> 2];
  $2 = HEAP32[$0 >> 2];
  HEAP32[$1 + 40 >> 2] = $2;
  HEAP32[$1 + 44 >> 2] = $3;
  HEAP32[$1 + 72 >> 2] = jsfFindFile($1 + 40 | 0, $1 + 76 | 0);
  block : {
   if (!HEAP32[$1 + 72 >> 2]) {
    HEAP8[$1 + 111 | 0] = 0;
    break block;
   }
   HEAP32[$1 + 32 >> 2] = HEAP32[$0 + 24 >> 2];
   $3 = HEAP32[$0 + 16 >> 2];
   $2 = HEAP32[$0 + 20 >> 2];
   HEAP32[$1 + 24 >> 2] = $3;
   HEAP32[$1 + 28 >> 2] = $2;
   $3 = HEAP32[$0 + 12 >> 2];
   $2 = HEAP32[$0 + 8 >> 2];
   HEAP32[$1 + 16 >> 2] = $2;
   HEAP32[$1 + 20 >> 2] = $3;
   $2 = HEAP32[$0 + 4 >> 2];
   $3 = HEAP32[$0 >> 2];
   HEAP32[$1 + 8 >> 2] = $3;
   HEAP32[$1 + 12 >> 2] = $2;
   jsfCacheClearFile($1 + 8 | 0);
   jsfEraseFileInternal(HEAP32[$1 + 72 >> 2], $1 + 76 | 0, 1);
   HEAP8[$1 + 111 | 0] = 1;
  }
  __stack_pointer = $1 + 112 | 0;
  return HEAP8[$1 + 111 | 0] & 1;
 }
 
 function jsfFindFile($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer - 112 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 104 >> 2] = $1;
  jsfStripDriveFromName($0, 1);
  $4 = HEAP32[$2 + 104 >> 2];
  HEAP32[$2 + 64 >> 2] = HEAP32[$0 + 24 >> 2];
  $3 = $0;
  $0 = HEAP32[$3 + 16 >> 2];
  $1 = HEAP32[$3 + 20 >> 2];
  HEAP32[$2 + 56 >> 2] = $0;
  HEAP32[$2 + 60 >> 2] = $1;
  $0 = HEAP32[$3 + 12 >> 2];
  $1 = HEAP32[$3 + 8 >> 2];
  HEAP32[$2 + 48 >> 2] = $1;
  HEAP32[$2 + 52 >> 2] = $0;
  $1 = HEAP32[$3 + 4 >> 2];
  $0 = HEAP32[$3 >> 2];
  HEAP32[$2 + 40 >> 2] = $0;
  HEAP32[$2 + 44 >> 2] = $1;
  HEAP32[$2 + 100 >> 2] = jsfCacheFind($2 + 40 | 0, $4);
  if (HEAP32[$2 + 100 >> 2] == -1) {
   HEAP32[$2 + 32 >> 2] = HEAP32[$3 + 24 >> 2];
   $0 = HEAP32[$3 + 20 >> 2];
   $1 = HEAP32[$3 + 16 >> 2];
   HEAP32[$2 + 24 >> 2] = $1;
   HEAP32[$2 + 28 >> 2] = $0;
   $1 = HEAP32[$3 + 12 >> 2];
   $0 = HEAP32[$3 + 8 >> 2];
   HEAP32[$2 + 16 >> 2] = $0;
   HEAP32[$2 + 20 >> 2] = $1;
   $0 = HEAP32[$3 + 4 >> 2];
   $1 = HEAP32[$3 >> 2];
   HEAP32[$2 + 8 >> 2] = $1;
   HEAP32[$2 + 12 >> 2] = $0;
   HEAP32[$2 + 100 >> 2] = jsfBankFindFile(134217728, 142606336, $2 + 8 | 0, $2 + 68 | 0);
   if (!HEAP32[$2 + 100 >> 2]) {
    $1 = HEAP32[$3 + 4 >> 2];
    $0 = HEAP32[$3 >> 2];
    $5 = $0;
    $4 = $2 + 68 | 0;
    $0 = $4;
    HEAP32[$0 + 4 >> 2] = $5;
    HEAP32[$0 + 8 >> 2] = $1;
    HEAP32[$0 + 28 >> 2] = HEAP32[$3 + 24 >> 2];
    $0 = HEAP32[$3 + 20 >> 2];
    $1 = HEAP32[$3 + 16 >> 2];
    $5 = $1;
    $1 = $4;
    HEAP32[$1 + 20 >> 2] = $5;
    HEAP32[$1 + 24 >> 2] = $0;
    $1 = HEAP32[$3 + 12 >> 2];
    $0 = HEAP32[$3 + 8 >> 2];
    $3 = $0;
    $0 = $4;
    HEAP32[$0 + 12 >> 2] = $3;
    HEAP32[$0 + 16 >> 2] = $1;
   }
   jsfCachePut($2 + 68 | 0, HEAP32[$2 + 100 >> 2]);
   if (HEAP32[$2 + 104 >> 2]) {
    $0 = HEAP32[$2 + 72 >> 2];
    $1 = HEAP32[$2 + 68 >> 2];
    $3 = $1;
    $4 = HEAP32[$2 + 104 >> 2];
    $1 = $4;
    HEAP32[$1 >> 2] = $3;
    HEAP32[$1 + 4 >> 2] = $0;
    $1 = HEAP32[$2 + 96 >> 2];
    $0 = HEAP32[$2 + 92 >> 2];
    $3 = $0;
    $0 = $4;
    HEAP32[$0 + 24 >> 2] = $3;
    HEAP32[$0 + 28 >> 2] = $1;
    $0 = HEAP32[$2 + 88 >> 2];
    $1 = HEAP32[$2 + 84 >> 2];
    $3 = $1;
    $1 = $4;
    HEAP32[$1 + 16 >> 2] = $3;
    HEAP32[$1 + 20 >> 2] = $0;
    $1 = HEAP32[$2 + 80 >> 2];
    $0 = HEAP32[$2 + 76 >> 2];
    $3 = $0;
    $0 = $4;
    HEAP32[$0 + 8 >> 2] = $3;
    HEAP32[$0 + 12 >> 2] = $1;
   }
  }
  HEAP32[$2 + 108 >> 2] = HEAP32[$2 + 100 >> 2];
  __stack_pointer = $2 + 112 | 0;
  return HEAP32[$2 + 108 >> 2];
 }
 
 function jsfCacheClearFile($0) {
  
 }
 
 function jsfEraseFileInternal($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 44 >> 2] = $0;
  HEAP32[$3 + 40 >> 2] = $1;
  HEAP8[$3 + 39 | 0] = $2;
  HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 44 >> 2] - 32;
  HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 44 >> 2] + ((HEAP32[$3 + 40 >> 2] + 4 | 0) - HEAP32[$3 + 40 >> 2] | 0);
  HEAP32[HEAP32[$3 + 40 >> 2] + 4 >> 2] = 0;
  jshFlashWrite(HEAP32[$3 + 40 >> 2] + 4 | 0, HEAP32[$3 + 44 >> 2], 4);
  if (!(!(HEAP8[$3 + 39 | 0] & 1) | HEAPU32[$3 + 44 >> 2] < 134217728 | HEAPU32[$3 + 44 >> 2] >= 142606336)) {
   HEAP32[$3 + 32 >> 2] = 0;
   if (HEAP32[92139]) {
    HEAP32[$3 + 32 >> 2] = HEAP32[92139] + HEAP32[92140]
   }
   jsfGetStorageStats($3 + 4 | 0, HEAP32[$3 + 32 >> 2], 1);
   if (HEAP32[$3 + 16 >> 2] + HEAP32[$3 + 8 >> 2] >>> 0 > 200) {
    jsfBankCreateFileTable(134217728)
   }
  }
  __stack_pointer = $3 + 48 | 0;
 }
 
 function jsfStripDriveFromName($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 8 >> 2] = $0;
  HEAP8[$3 + 7 | 0] = $1;
  block : {
   if (jsvIsDriveNameExplicit(HEAP32[$3 + 8 >> 2]) & 1) {
    HEAP8[$3 + 6 | 0] = HEAPU8[HEAP32[$3 + 8 >> 2]];
    $2 = HEAP32[$3 + 8 >> 2];
    $1 = HEAPU8[$2 + 10 | 0] | HEAPU8[$2 + 11 | 0] << 8 | (HEAPU8[$2 + 12 | 0] << 16 | HEAPU8[$2 + 13 | 0] << 24);
    $4 = $1;
    $0 = HEAPU8[$2 + 14 | 0] | HEAPU8[$2 + 15 | 0] << 8 | (HEAPU8[$2 + 16 | 0] << 16 | HEAPU8[$2 + 17 | 0] << 24);
    $7 = $0;
    $0 = HEAPU8[$2 + 18 | 0] | HEAPU8[$2 + 19 | 0] << 8 | (HEAPU8[$2 + 20 | 0] << 16 | HEAPU8[$2 + 21 | 0] << 24);
    $5 = $0;
    $1 = HEAPU8[$2 + 22 | 0] | HEAPU8[$2 + 23 | 0] << 8 | (HEAPU8[$2 + 24 | 0] << 16 | HEAPU8[$2 + 25 | 0] << 24);
    $8 = $1;
    $1 = HEAPU8[$2 + 2 | 0] | HEAPU8[$2 + 3 | 0] << 8 | (HEAPU8[$2 + 4 | 0] << 16 | HEAPU8[$2 + 5 | 0] << 24);
    $6 = $1;
    $0 = HEAPU8[$2 + 6 | 0] | HEAPU8[$2 + 7 | 0] << 8 | (HEAPU8[$2 + 8 | 0] << 16 | HEAPU8[$2 + 9 | 0] << 24);
    $9 = $0;
    $1 = HEAP32[$3 + 8 >> 2];
    $0 = HEAPU8[$2 + 26 | 0] | HEAPU8[$2 + 27 | 0] << 8;
    HEAP8[$1 + 24 | 0] = $0;
    HEAP8[$1 + 25 | 0] = $0 >>> 8;
    HEAP8[$1 + 16 | 0] = $5;
    HEAP8[$1 + 17 | 0] = $5 >>> 8;
    HEAP8[$1 + 18 | 0] = $5 >>> 16;
    HEAP8[$1 + 19 | 0] = $5 >>> 24;
    $0 = $8;
    HEAP8[$1 + 20 | 0] = $0;
    HEAP8[$1 + 21 | 0] = $0 >>> 8;
    HEAP8[$1 + 22 | 0] = $0 >>> 16;
    HEAP8[$1 + 23 | 0] = $0 >>> 24;
    HEAP8[$1 + 8 | 0] = $4;
    HEAP8[$1 + 9 | 0] = $4 >>> 8;
    HEAP8[$1 + 10 | 0] = $4 >>> 16;
    HEAP8[$1 + 11 | 0] = $4 >>> 24;
    $0 = $7;
    HEAP8[$1 + 12 | 0] = $0;
    HEAP8[$1 + 13 | 0] = $0 >>> 8;
    HEAP8[$1 + 14 | 0] = $0 >>> 16;
    HEAP8[$1 + 15 | 0] = $0 >>> 24;
    HEAP8[$1 | 0] = $6;
    HEAP8[$1 + 1 | 0] = $6 >>> 8;
    HEAP8[$1 + 2 | 0] = $6 >>> 16;
    HEAP8[$1 + 3 | 0] = $6 >>> 24;
    $0 = $9;
    HEAP8[$1 + 4 | 0] = $0;
    HEAP8[$1 + 5 | 0] = $0 >>> 8;
    HEAP8[$1 + 6 | 0] = $0 >>> 16;
    HEAP8[$1 + 7 | 0] = $0 >>> 24;
    HEAP8[HEAP32[$3 + 8 >> 2] + 26 | 0] = 0;
    HEAP8[HEAP32[$3 + 8 >> 2] + 27 | 0] = 0;
    HEAP8[$3 + 15 | 0] = HEAPU8[$3 + 6 | 0];
    break block;
   }
   HEAP8[$3 + 15 | 0] = 0;
  }
  __stack_pointer = $3 + 16 | 0;
  return HEAP8[$3 + 15 | 0] << 24 >> 24;
 }
 
 function jsfCacheFind($0, $1) {
  HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $1;
  return -1;
 }
 
 function jsfBankFindFile($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 480 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 472 >> 2] = $0;
  HEAP32[$4 + 468 >> 2] = $1;
  HEAP32[$4 + 464 >> 2] = $3;
  HEAP32[$4 + 460 >> 2] = HEAP32[$4 + 472 >> 2];
  block2 : {
   block3 : {
    if (!(!HEAP32[92139] | HEAP32[$4 + 460 >> 2] != 134217728)) {
     HEAP32[$4 + 156 >> 2] = HEAP32[$4 + 460 >> 2];
     HEAP32[$4 + 152 >> 2] = HEAP32[92139];
     HEAP32[$4 + 148 >> 2] = HEAP32[$4 + 152 >> 2] + HEAP32[92140];
     HEAP32[$4 + 144 >> 2] = HEAP32[$4 + 148 >> 2] - HEAP32[$4 + 152 >> 2] >>> 5;
     while (1) {
      if (HEAP32[$4 + 144 >> 2]) {
       HEAP32[$4 + 140 >> 2] = HEAP32[$4 + 144 >> 2];
       if (HEAP32[$4 + 140 >> 2] > 8) {
        HEAP32[$4 + 140 >> 2] = 8
       }
       jshFlashRead($4 + 160 | 0, HEAP32[$4 + 152 >> 2], HEAP32[$4 + 140 >> 2] << 5);
       HEAP32[$4 + 152 >> 2] = HEAP32[$4 + 152 >> 2] + (HEAP32[$4 + 140 >> 2] << 5);
       HEAP32[$4 + 144 >> 2] = HEAP32[$4 + 144 >> 2] - HEAP32[$4 + 140 >> 2];
       HEAP32[$4 + 136 >> 2] = 0;
       while (1) {
        if (HEAP32[$4 + 136 >> 2] < HEAP32[$4 + 140 >> 2]) {
         $3 = ($4 + 160 | 0) + (HEAP32[$4 + 136 >> 2] << 5) | 0;
         HEAP32[$4 + 64 >> 2] = HEAP32[$3 + 28 >> 2];
         $1 = HEAP32[$3 + 20 >> 2];
         $0 = HEAP32[$3 + 24 >> 2];
         HEAP32[$4 + 56 >> 2] = $1;
         HEAP32[$4 + 60 >> 2] = $0;
         $1 = HEAP32[$3 + 16 >> 2];
         $0 = HEAP32[$3 + 12 >> 2];
         HEAP32[$4 + 48 >> 2] = $0;
         HEAP32[$4 + 52 >> 2] = $1;
         $0 = HEAP32[$3 + 8 >> 2];
         $1 = HEAP32[$3 + 4 >> 2];
         HEAP32[$4 + 40 >> 2] = $1;
         HEAP32[$4 + 44 >> 2] = $0;
         HEAP32[$4 + 32 >> 2] = HEAP32[$2 + 24 >> 2];
         $3 = $2;
         $0 = HEAP32[$3 + 16 >> 2];
         $1 = HEAP32[$3 + 20 >> 2];
         HEAP32[$4 + 24 >> 2] = $0;
         HEAP32[$4 + 28 >> 2] = $1;
         $0 = HEAP32[$3 + 12 >> 2];
         $1 = HEAP32[$3 + 8 >> 2];
         HEAP32[$4 + 16 >> 2] = $1;
         HEAP32[$4 + 20 >> 2] = $0;
         $1 = HEAP32[$3 + 4 >> 2];
         $0 = HEAP32[$3 >> 2];
         HEAP32[$4 + 8 >> 2] = $0;
         HEAP32[$4 + 12 >> 2] = $1;
         if (jsfIsNameEqual($4 + 40 | 0, $4 + 8 | 0) & 1) {
          HEAP32[$4 + 132 >> 2] = HEAP32[$4 + 156 >> 2] + HEAP32[($4 + 160 | 0) + (HEAP32[$4 + 136 >> 2] << 5) >> 2];
          if (!(!(jsfGetFileHeader(HEAP32[$4 + 132 >> 2], ($4 + 160 | 0) + (HEAP32[$4 + 136 >> 2] << 5) | 0, 1) & 1) | !HEAP32[(($4 + 160 | 0) + (HEAP32[$4 + 136 >> 2] << 5) | 0) + 4 >> 2])) {
           if (HEAP32[$4 + 464 >> 2]) {
            $3 = ($4 + 160 | 0) + (HEAP32[$4 + 136 >> 2] << 5) | 0;
            $1 = HEAP32[$3 >> 2];
            $0 = HEAP32[$3 + 4 >> 2];
            $5 = $1;
            $2 = HEAP32[$4 + 464 >> 2];
            $1 = $2;
            HEAP32[$1 >> 2] = $5;
            HEAP32[$1 + 4 >> 2] = $0;
            $1 = HEAP32[$3 + 28 >> 2];
            $0 = HEAP32[$3 + 24 >> 2];
            $5 = $0;
            $0 = $2;
            HEAP32[$0 + 24 >> 2] = $5;
            HEAP32[$0 + 28 >> 2] = $1;
            $0 = HEAP32[$3 + 20 >> 2];
            $1 = HEAP32[$3 + 16 >> 2];
            $5 = $1;
            $1 = $2;
            HEAP32[$1 + 16 >> 2] = $5;
            HEAP32[$1 + 20 >> 2] = $0;
            $1 = HEAP32[$3 + 12 >> 2];
            $0 = HEAP32[$3 + 8 >> 2];
            $3 = $0;
            $0 = $2;
            HEAP32[$0 + 8 >> 2] = $3;
            HEAP32[$0 + 12 >> 2] = $1;
           }
           HEAP32[$4 + 476 >> 2] = HEAP32[$4 + 132 >> 2] + 32;
           break block2;
          }
         }
         HEAP32[$4 + 136 >> 2] = HEAP32[$4 + 136 >> 2] + 1;
         continue;
        }
        break;
       };
       continue;
      }
      break;
     };
     HEAP32[$4 + 460 >> 2] = HEAP32[92139] - 32;
     HEAP32[$4 + 432 >> 2] = 0;
     HEAP32[$4 + 428 >> 2] = HEAP32[92140];
     break block3;
    }
    if (!(jsfGetFileHeader(HEAP32[$4 + 460 >> 2], $4 + 428 | 0, 0) & 1)) {
     HEAP32[$4 + 476 >> 2] = 0;
     break block2;
    }
   }
   while (1) {
    if (HEAP32[$4 + 432 >> 2] == HEAP32[$2 >> 2]) {
     block4 : {
      if (!(jsfGetFileHeader(HEAP32[$4 + 460 >> 2], $4 + 428 | 0, 1) & 1)) {
       break block4
      }
      $3 = $4 + 428 | 0;
      HEAP32[$4 + 128 >> 2] = HEAP32[$3 + 28 >> 2];
      $1 = HEAP32[$3 + 20 >> 2];
      $0 = HEAP32[$3 + 24 >> 2];
      HEAP32[$4 + 120 >> 2] = $1;
      HEAP32[$4 + 124 >> 2] = $0;
      $1 = HEAP32[$3 + 16 >> 2];
      $0 = HEAP32[$3 + 12 >> 2];
      HEAP32[$4 + 112 >> 2] = $0;
      HEAP32[$4 + 116 >> 2] = $1;
      $0 = HEAP32[$3 + 8 >> 2];
      $1 = HEAP32[$3 + 4 >> 2];
      HEAP32[$4 + 104 >> 2] = $1;
      HEAP32[$4 + 108 >> 2] = $0;
      HEAP32[$4 + 96 >> 2] = HEAP32[$2 + 24 >> 2];
      $3 = $2;
      $0 = HEAP32[$3 + 16 >> 2];
      $1 = HEAP32[$3 + 20 >> 2];
      HEAP32[$4 + 88 >> 2] = $0;
      HEAP32[$4 + 92 >> 2] = $1;
      $0 = HEAP32[$3 + 12 >> 2];
      $1 = HEAP32[$3 + 8 >> 2];
      HEAP32[$4 + 80 >> 2] = $1;
      HEAP32[$4 + 84 >> 2] = $0;
      $1 = HEAP32[$3 + 4 >> 2];
      $0 = HEAP32[$3 >> 2];
      HEAP32[$4 + 72 >> 2] = $0;
      HEAP32[$4 + 76 >> 2] = $1;
      if (!(jsfIsNameEqual($4 + 104 | 0, $4 + 72 | 0) & 1)) {
       break block4
      }
      if (HEAP32[$4 + 464 >> 2]) {
       $0 = HEAP32[$4 + 432 >> 2];
       $1 = HEAP32[$4 + 428 >> 2];
       $3 = $1;
       $2 = HEAP32[$4 + 464 >> 2];
       $1 = $2;
       HEAP32[$1 >> 2] = $3;
       HEAP32[$1 + 4 >> 2] = $0;
       $1 = HEAP32[$4 + 456 >> 2];
       $0 = HEAP32[$4 + 452 >> 2];
       $3 = $0;
       $0 = $2;
       HEAP32[$0 + 24 >> 2] = $3;
       HEAP32[$0 + 28 >> 2] = $1;
       $0 = HEAP32[$4 + 448 >> 2];
       $1 = HEAP32[$4 + 444 >> 2];
       $3 = $1;
       $1 = $2;
       HEAP32[$1 + 16 >> 2] = $3;
       HEAP32[$1 + 20 >> 2] = $0;
       $1 = HEAP32[$4 + 440 >> 2];
       $0 = HEAP32[$4 + 436 >> 2];
       $3 = $0;
       $0 = $2;
       HEAP32[$0 + 8 >> 2] = $3;
       HEAP32[$0 + 12 >> 2] = $1;
      }
      HEAP32[$4 + 476 >> 2] = HEAP32[$4 + 460 >> 2] + 32;
      break block2;
     }
    }
    if (jsfGetNextFileHeader($4 + 460 | 0, $4 + 428 | 0, 3) & 1) {
     continue
    }
    break;
   };
   HEAP32[$4 + 476 >> 2] = 0;
  }
  __stack_pointer = $4 + 480 | 0;
  return HEAP32[$4 + 476 >> 2];
 }
 
 function jsfCachePut($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
 }
 
 function jsfGetStorageStats($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 80 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 76 >> 2] = $1;
  HEAP8[$3 + 75 | 0] = $2;
  if (!HEAP32[$3 + 76 >> 2]) {
   HEAP32[$3 + 76 >> 2] = 134217728
  }
  HEAP32[$3 + 68 >> 2] = HEAP32[$3 + 76 >> 2];
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$3 + 56 >> 2] = 0;
  HEAP32[$3 + 60 >> 2] = 0;
  HEAP32[$3 + 48 >> 2] = 0;
  HEAP32[$3 + 52 >> 2] = 0;
  HEAP32[$3 + 40 >> 2] = 0;
  HEAP32[$3 + 44 >> 2] = 0;
  HEAP32[$3 + 32 >> 2] = 0;
  HEAP32[$3 + 36 >> 2] = 0;
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 76 >> 2];
  HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 76 >> 2];
  if (jsfGetFileHeader(HEAP32[$3 + 76 >> 2], $3 + 32 | 0, 0) & 1) {
   while (1) {
    if (!(!(jshFlashGetPage(HEAP32[$3 + 76 >> 2], $3 + 20 | 0, $3 + 16 | 0) & 1) | HEAP32[$3 + 20 >> 2] != HEAP32[$3 + 76 >> 2])) {
     HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 20 >> 2]
    }
    HEAP32[$3 + 12 >> 2] = jsfAlignAddress(jsfGetFileSize($3 + 32 | 0)) + 32;
    HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 76 >> 2] + HEAP32[$3 + 12 >> 2];
    block1 : {
     if (HEAP32[$3 + 36 >> 2]) {
      HEAP32[$0 >> 2] = HEAP32[$3 + 12 >> 2] + HEAP32[$0 >> 2];
      HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
      break block1;
     }
     HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 12 >> 2] + HEAP32[$0 + 8 >> 2];
     HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
     if (!HEAP32[$0 + 24 >> 2]) {
      HEAP32[$0 + 24 >> 2] = HEAP32[$3 + 24 >> 2]
     }
    }
    if (jsfGetNextFileHeader($3 + 76 | 0, $3 + 32 | 0, HEAP8[$3 + 75 | 0] & 1 ? 3 : 2) & 1) {
     continue
    }
    break;
   }
  }
  block2 : {
   if (HEAP8[$3 + 75 | 0] & 1) {
    $1 = jsfGetBankEndAddress(HEAP32[$3 + 68 >> 2]);
    break block2;
   }
   $1 = jsfGetAddressOfNextPage(HEAP32[$3 + 68 >> 2]);
  }
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$0 + 16 >> 2] = HEAP32[$3 + 8 >> 2] - HEAP32[$3 + 68 >> 2];
  HEAP32[$0 + 20 >> 2] = HEAP32[$3 + 8 >> 2] - HEAP32[$3 + 28 >> 2];
  __stack_pointer = $3 + 80 | 0;
 }
 
 function jsfBankCreateFileTable($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = __stack_pointer - 192 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 184 >> 2] = $0;
  HEAP32[$1 + 176 >> 2] = 0;
  HEAP32[$1 + 180 >> 2] = 0;
  HEAP32[$1 + 168 >> 2] = 0;
  HEAP32[$1 + 172 >> 2] = 0;
  HEAP32[$1 + 160 >> 2] = 0;
  HEAP32[$1 + 164 >> 2] = 0;
  HEAP32[$1 + 152 >> 2] = 0;
  HEAP32[$1 + 156 >> 2] = 0;
  HEAP32[$1 + 148 >> 2] = 0;
  HEAP32[$1 + 144 >> 2] = HEAP32[$1 + 184 >> 2];
  if (jsfGetFileHeader(HEAP32[$1 + 144 >> 2], $1 + 152 | 0, 0) & 1) {
   while (1) {
    if (jsfIsRealFile($1 + 152 | 0) & 1) {
     HEAP32[$1 + 148 >> 2] = HEAP32[$1 + 148 >> 2] + 1
    }
    if (jsfGetNextFileHeader($1 + 144 | 0, $1 + 152 | 0, 1) & 1) {
     continue
    }
    break;
   }
  }
  jsfNameFromString($1 + 116 | 0, 140478);
  HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 140 >> 2];
  $0 = HEAP32[$1 + 136 >> 2];
  $2 = HEAP32[$1 + 132 >> 2];
  HEAP32[$1 + 56 >> 2] = $2;
  HEAP32[$1 + 60 >> 2] = $0;
  $2 = HEAP32[$1 + 128 >> 2];
  $0 = HEAP32[$1 + 124 >> 2];
  HEAP32[$1 + 48 >> 2] = $0;
  HEAP32[$1 + 52 >> 2] = $2;
  $0 = HEAP32[$1 + 120 >> 2];
  $2 = HEAP32[$1 + 116 >> 2];
  HEAP32[$1 + 40 >> 2] = $2;
  HEAP32[$1 + 44 >> 2] = $0;
  HEAP32[$1 + 112 >> 2] = jsfFindFile($1 + 40 | 0, $1 + 152 | 0);
  if (HEAP32[$1 + 112 >> 2]) {
   jsfEraseFileInternal(HEAP32[$1 + 112 >> 2], $1 + 152 | 0, 0)
  }
  HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 148 >> 2] << 5;
  block : {
   if (!HEAP32[$1 + 108 >> 2]) {
    HEAP32[$1 + 188 >> 2] = 0;
    break block;
   }
   $3 = HEAP32[$1 + 108 >> 2];
   HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 140 >> 2];
   $2 = HEAP32[$1 + 136 >> 2];
   $0 = HEAP32[$1 + 132 >> 2];
   HEAP32[$1 + 24 >> 2] = $0;
   HEAP32[$1 + 28 >> 2] = $2;
   $0 = HEAP32[$1 + 128 >> 2];
   $2 = HEAP32[$1 + 124 >> 2];
   HEAP32[$1 + 16 >> 2] = $2;
   HEAP32[$1 + 20 >> 2] = $0;
   $2 = HEAP32[$1 + 120 >> 2];
   $0 = HEAP32[$1 + 116 >> 2];
   HEAP32[$1 + 8 >> 2] = $0;
   HEAP32[$1 + 12 >> 2] = $2;
   HEAP32[$1 + 112 >> 2] = jsfCreateFile($1 + 8 | 0, $3, 32, $1 + 152 | 0);
   if (!HEAP32[$1 + 112 >> 2]) {
    HEAP32[$1 + 188 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 144 >> 2] = HEAP32[$1 + 184 >> 2];
   HEAP32[$1 + 104 >> 2] = HEAP32[$1 + 112 >> 2];
   if (jsfGetFileHeader(HEAP32[$1 + 144 >> 2], $1 + 152 | 0, 1) & 1) {
    while (1) {
     if (jsfIsRealFile($1 + 152 | 0) & 1) {
      $0 = HEAP32[$1 + 180 >> 2];
      $2 = HEAP32[$1 + 176 >> 2];
      HEAP32[$1 + 96 >> 2] = $2;
      HEAP32[$1 + 100 >> 2] = $0;
      $2 = HEAP32[$1 + 172 >> 2];
      $0 = HEAP32[$1 + 168 >> 2];
      HEAP32[$1 + 88 >> 2] = $0;
      HEAP32[$1 + 92 >> 2] = $2;
      $0 = HEAP32[$1 + 164 >> 2];
      $2 = HEAP32[$1 + 160 >> 2];
      HEAP32[$1 + 80 >> 2] = $2;
      HEAP32[$1 + 84 >> 2] = $0;
      $2 = HEAP32[$1 + 156 >> 2];
      $0 = HEAP32[$1 + 152 >> 2];
      HEAP32[$1 + 72 >> 2] = $0;
      HEAP32[$1 + 76 >> 2] = $2;
      HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 144 >> 2] - HEAP32[$1 + 184 >> 2];
      jshFlashWriteAligned($1 + 72 | 0, HEAP32[$1 + 104 >> 2], 32);
      HEAP32[$1 + 104 >> 2] = HEAP32[$1 + 104 >> 2] + 32;
     }
     if (jsfGetNextFileHeader($1 + 144 | 0, $1 + 152 | 0, 1) & 1) {
      continue
     }
     break;
    }
   }
   if (HEAP32[$1 + 184 >> 2] == 134217728) {
    HEAP32[92139] = HEAP32[$1 + 112 >> 2];
    HEAP32[92140] = HEAP32[$1 + 108 >> 2];
   }
   HEAP32[$1 + 188 >> 2] = HEAP32[$1 + 112 >> 2];
  }
  __stack_pointer = $1 + 192 | 0;
  return HEAP32[$1 + 188 >> 2];
 }
 
 function jsfGetFileHeader($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP8[$3 + 19 | 0] = $2;
  block : {
   if (!HEAP32[$3 + 24 >> 2]) {
    HEAP8[$3 + 31 | 0] = 0;
    break block;
   }
   jshFlashRead(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 24 >> 2], HEAP8[$3 + 19 | 0] & 1 ? 32 : 8);
   HEAP32[$3 + 12 >> 2] = (HEAP32[$3 + 24 >> 2] + 32 | 0) + jsfGetFileSize(HEAP32[$3 + 20 >> 2]);
   $0 = 0;
   block1 : {
    if (HEAP32[HEAP32[$3 + 20 >> 2] >> 2] == -1) {
     break block1
    }
    $0 = 0;
    if (!HEAP32[HEAP32[$3 + 20 >> 2] >> 2]) {
     break block1
    }
    $0 = HEAPU32[$3 + 12 >> 2] <= jsfGetBankEndAddress(HEAP32[$3 + 24 >> 2]) >>> 0;
   }
   HEAP8[$3 + 31 | 0] = $0;
  }
  __stack_pointer = $3 + 32 | 0;
  return HEAP8[$3 + 31 | 0] & 1;
 }
 
 function jsfAlignAddress($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP32[$1 + 12 >> 2] + 3 & -4;
 }
 
 function jsfGetNextFileHeader($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP32[$3 + 16 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = HEAP32[HEAP32[$3 + 24 >> 2] >> 2];
  HEAP32[HEAP32[$3 + 24 >> 2] >> 2] = 0;
  HEAP32[$3 + 8 >> 2] = (HEAP32[$3 + 12 >> 2] + jsfGetFileSize(HEAP32[$3 + 20 >> 2]) | 0) + 32;
  HEAP32[$3 + 8 >> 2] = jsfAlignAddress(HEAP32[$3 + 8 >> 2]);
  block : {
   if (HEAPU32[$3 + 8 >> 2] < HEAPU32[$3 + 12 >> 2]) {
    HEAP8[$3 + 31 | 0] = 0;
    break block;
   }
   if (HEAP32[$3 + 8 >> 2] + 32 >>> 0 > jsfGetBankEndAddress(HEAP32[$3 + 12 >> 2]) >>> 0) {
    HEAP8[$3 + 31 | 0] = 0;
    break block;
   }
   HEAP32[HEAP32[$3 + 24 >> 2] >> 2] = HEAP32[$3 + 8 >> 2];
   HEAP8[$3 + 7 | 0] = jsfGetFileHeader(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 20 >> 2], ((HEAP32[$3 + 16 >> 2] & 2) != 0 ^ -1) & 1) & 1;
   if (!(!(HEAP32[$3 + 16 >> 2] & 1) | HEAP8[$3 + 7 | 0] & 1)) {
    HEAP32[$3 + 8 >> 2] = jsfGetAddressOfNextPage(HEAP32[$3 + 8 >> 2]);
    HEAP32[HEAP32[$3 + 24 >> 2] >> 2] = HEAP32[$3 + 8 >> 2];
    if (!HEAP32[$3 + 8 >> 2]) {
     HEAP8[$3 + 31 | 0] = 0;
     break block;
    }
    HEAP8[$3 + 7 | 0] = jsfGetFileHeader(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 20 >> 2], ((HEAP32[$3 + 16 >> 2] & 2) != 0 ^ -1) & 1) & 1;
   }
   HEAP8[$3 + 31 | 0] = HEAP8[$3 + 7 | 0] & 1;
  }
  __stack_pointer = $3 + 32 | 0;
  return HEAP8[$3 + 31 | 0] & 1;
 }
 
 function jsfGetBankEndAddress($0) {
  HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
  return 142606336;
 }
 
 function jsfGetAddressOfNextPage($0) {
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 24 >> 2] = $0;
  block : {
   if (!(jshFlashGetPage(HEAP32[$1 + 24 >> 2], $1 + 20 | 0, $1 + 16 | 0) & 1)) {
    HEAP32[$1 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsfGetBankEndAddress(HEAP32[$1 + 24 >> 2]);
   HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 20 >> 2] + HEAP32[$1 + 16 >> 2];
   if (HEAPU32[$1 + 24 >> 2] >= HEAPU32[$1 + 12 >> 2]) {
    HEAP32[$1 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 24 >> 2];
  }
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 28 >> 2];
 }
 
 function jsfBankCompact($0, $1) {
  var $2 = 0, $3 = 0;
  $3 = __stack_pointer - 80 | 0;
  $2 = $3;
  __stack_pointer = $2;
  HEAP32[$2 + 72 >> 2] = $0;
  HEAP8[$2 + 71 | 0] = $1;
  block : {
   if (!(jshFlashGetPage(HEAP32[$2 + 72 >> 2], $2 - -64 | 0, $2 + 60 | 0) & 1)) {
    HEAP8[$2 + 79 | 0] = 0;
    break block;
   }
   HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 60 >> 2] + 32;
   jsfGetStorageStats($2 + 28 | 0, HEAP32[$2 + 72 >> 2], 1);
   if (!HEAP32[$2 + 36 >> 2]) {
    HEAP8[$2 + 79 | 0] = 0;
    break block;
   }
   if (HEAP8[$2 + 71 | 0] & 1) {
    jsvUnLock(jspEvaluate(141646, 1))
   }
   HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 28 >> 2];
   if (HEAPU32[$2 + 24 >> 2] > HEAPU32[$2 + 56 >> 2]) {
    HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 56 >> 2]
   }
   HEAP8[$2 + 23 | 0] = 0;
   block1 : {
    if (HEAP32[$2 + 24 >> 2] + 256 >>> 0 < jsuGetFreeStack() >>> 0) {
     $3 = $3 - (HEAP32[$2 + 24 >> 2] + 15 & -16) | 0;
     __stack_pointer = $3;
     HEAP32[$2 + 16 >> 2] = $3;
     HEAP8[$2 + 23 | 0] = jsfCompactInternal(HEAP32[$2 + 52 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 24 >> 2]) & 1;
     break block1;
    }
    HEAP32[$2 + 12 >> 2] = jsvNewFlatStringOfLength(HEAP32[$2 + 24 >> 2]);
    if (HEAP32[$2 + 12 >> 2]) {
     HEAP32[$2 + 8 >> 2] = jsvGetFlatStringPointer(HEAP32[$2 + 12 >> 2]);
     HEAP8[$2 + 23 | 0] = jsfCompactInternal(HEAP32[$2 + 52 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 24 >> 2]) & 1;
     jsvUnLock(HEAP32[$2 + 12 >> 2]);
    }
   }
   jsvUnLock(jspEvaluate(141927, 1));
   HEAP8[$2 + 79 | 0] = HEAP8[$2 + 23 | 0] & 1;
  }
  __stack_pointer = $2 + 80 | 0;
  return HEAP8[$2 + 79 | 0] & 1;
 }
 
 function jsfCompactInternal($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 96 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 88 >> 2] = $0;
  HEAP32[$3 + 84 >> 2] = $1;
  HEAP32[$3 + 80 >> 2] = $2;
  HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 88 >> 2];
  jsiConsolePrintf(146988, 0);
  HEAP32[$3 + 72 >> 2] = 0;
  HEAP32[$3 + 68 >> 2] = 0;
  HEAP32[$3 + 64 >> 2] = 0;
  HEAP32[$3 + 56 >> 2] = 0;
  HEAP32[$3 + 60 >> 2] = 0;
  HEAP32[$3 + 48 >> 2] = 0;
  HEAP32[$3 + 52 >> 2] = 0;
  HEAP32[$3 + 40 >> 2] = 0;
  HEAP32[$3 + 44 >> 2] = 0;
  HEAP32[$3 + 32 >> 2] = 0;
  HEAP32[$3 + 36 >> 2] = 0;
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 88 >> 2];
  HEAP32[$3 + 24 >> 2] = 0;
  block1 : {
   if (jsfGetFileHeader(HEAP32[$3 + 28 >> 2], $3 + 32 | 0, 1) & 1) {
    while (1) {
     if (jsfIsRealFile($3 + 32 | 0) & 1) {
      HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 76 >> 2] + HEAP32[$3 + 64 >> 2];
      if (HEAP32[$3 + 28 >> 2] != HEAP32[$3 + 20 >> 2]) {
       jsvUpdateMemoryAddress(HEAP32[$3 + 28 >> 2], jsfGetFileSize($3 + 32 | 0) + 32 | 0, HEAP32[$3 + 20 >> 2])
      }
      memcpy_circular(HEAP32[$3 + 84 >> 2], $3 + 72 | 0, HEAP32[$3 + 80 >> 2], $3 + 32 | 0, 32);
      HEAP32[$3 + 64 >> 2] = HEAP32[$3 + 64 >> 2] + 32;
      HEAP32[$3 + 16 >> 2] = jsfAlignAddress(jsfGetFileSize($3 + 32 | 0));
      HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 28 >> 2] + 32;
      jsfCompactWriteBuffer($3 + 76 | 0, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 84 >> 2], HEAP32[$3 + 80 >> 2], $3 - -64 | 0, $3 + 68 | 0);
      while (1) {
       if (HEAP32[$3 + 16 >> 2]) {
        HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 80 >> 2] - HEAP32[$3 + 64 >> 2];
        if (HEAPU32[$3 + 8 >> 2] > HEAP32[$3 + 80 >> 2] - HEAP32[$3 + 72 >> 2] >>> 0) {
         HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 80 >> 2] - HEAP32[$3 + 72 >> 2]
        }
        if (!(HEAPU32[$3 + 68 >> 2] <= HEAPU32[$3 + 72 >> 2] | HEAPU32[$3 + 8 >> 2] <= HEAP32[$3 + 68 >> 2] - HEAP32[$3 + 72 >> 2] >>> 0)) {
         HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 68 >> 2] - HEAP32[$3 + 72 >> 2]
        }
        if (!HEAP32[$3 + 8 >> 2]) {
         HEAP8[$3 + 95 | 0] = 0;
         break block1;
        }
        if (HEAPU32[$3 + 8 >> 2] > HEAPU32[$3 + 16 >> 2]) {
         HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 16 >> 2]
        }
        jshFlashRead(HEAP32[$3 + 84 >> 2] + HEAP32[$3 + 72 >> 2] | 0, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
        HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] - HEAP32[$3 + 8 >> 2];
        HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 8 >> 2] + HEAP32[$3 + 12 >> 2];
        HEAP32[$3 + 64 >> 2] = HEAP32[$3 + 8 >> 2] + HEAP32[$3 + 64 >> 2];
        HEAP32[$3 + 72 >> 2] = (HEAP32[$3 + 72 >> 2] + HEAP32[$3 + 8 >> 2] >>> 0) % HEAPU32[$3 + 80 >> 2];
        jsfCompactWriteBuffer($3 + 76 | 0, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 84 >> 2], HEAP32[$3 + 80 >> 2], $3 - -64 | 0, $3 + 68 | 0);
        continue;
       }
       break;
      };
      HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 28 >> 2] - HEAP32[$3 + 88 >> 2] >>> 14;
      if (HEAP32[$3 + 4 >> 2] != HEAP32[$3 + 24 >> 2]) {
       HEAP32[$3 >> 2] = HEAP8[(HEAP32[$3 + 4 >> 2] & 3) + 123556 | 0] << 24 >> 24;
       jsiConsolePrintf(140230, $3);
       HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 4 >> 2];
      }
     }
     jshKickWatchDog();
     jshKickSoftWatchDog();
     if (jsfGetNextFileHeader($3 + 28 | 0, $3 + 32 | 0, 1) & 1) {
      continue
     }
     break;
    }
   }
   jsfCompactWriteBuffer($3 + 76 | 0, jsfGetBankEndAddress(HEAP32[$3 + 76 >> 2]), HEAP32[$3 + 84 >> 2], HEAP32[$3 + 80 >> 2], $3 - -64 | 0, $3 + 68 | 0);
   if (HEAP32[$3 + 76 >> 2] != HEAP32[$3 + 88 >> 2]) {
    HEAP32[$3 + 76 >> 2] = jsfGetAddressOfNextPage(HEAP32[$3 + 76 >> 2] - 1 | 0)
   }
   if (HEAP32[$3 + 76 >> 2]) {
    if (!HEAP32[$3 + 28 >> 2]) {
     HEAP32[$3 + 28 >> 2] = jsfGetBankEndAddress(HEAP32[$3 + 76 >> 2])
    }
    jshFlashErasePages(HEAP32[$3 + 76 >> 2], HEAP32[$3 + 28 >> 2] - HEAP32[$3 + 76 >> 2] | 0);
   }
   jsiConsolePrintf(148265, 0);
   HEAP8[$3 + 95 | 0] = 1;
  }
  __stack_pointer = $3 + 96 | 0;
  return HEAP8[$3 + 95 | 0] & 1;
 }
 
 function jsfIsRealFile($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = jsfGetFileFlags(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]) {
   $2 = 1;
   block : {
    if (!HEAP32[$1 + 8 >> 2]) {
     break block
    }
    $2 = 1;
    if (HEAP32[$1 + 8 >> 2] == 64) {
     break block
    }
    $2 = HEAP32[$1 + 8 >> 2] == 128;
   }
  }
  return $2 & 1;
 }
 
 function memcpy_circular($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  HEAP32[$5 + 28 >> 2] = $0;
  HEAP32[$5 + 24 >> 2] = $1;
  HEAP32[$5 + 20 >> 2] = $2;
  HEAP32[$5 + 16 >> 2] = $3;
  HEAP32[$5 + 12 >> 2] = $4;
  while (1) {
   $0 = HEAP32[$5 + 12 >> 2];
   HEAP32[$5 + 12 >> 2] = $0 - 1;
   if ($0) {
    $0 = HEAP32[$5 + 16 >> 2];
    HEAP32[$5 + 16 >> 2] = $0 + 1;
    HEAP8[HEAP32[$5 + 28 >> 2] + HEAP32[HEAP32[$5 + 24 >> 2] >> 2] | 0] = HEAPU8[$0 | 0];
    HEAP32[HEAP32[$5 + 24 >> 2] >> 2] = (HEAP32[HEAP32[$5 + 24 >> 2] >> 2] + 1 >>> 0) % HEAPU32[$5 + 20 >> 2];
    continue;
   }
   break;
  };
 }
 
 function jsfCompactWriteBuffer($0, $1, $2, $3, $4, $5) {
  var $6 = 0;
  $6 = __stack_pointer - 48 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 44 >> 2] = $0;
  HEAP32[$6 + 40 >> 2] = $1;
  HEAP32[$6 + 36 >> 2] = $2;
  HEAP32[$6 + 32 >> 2] = $3;
  HEAP32[$6 + 28 >> 2] = $4;
  HEAP32[$6 + 24 >> 2] = $5;
  HEAP32[$6 + 20 >> 2] = jsfGetBankEndAddress(HEAP32[HEAP32[$6 + 44 >> 2] >> 2]);
  HEAP32[$6 + 16 >> 2] = jsfGetAddressOfNextPage(HEAP32[HEAP32[$6 + 44 >> 2] >> 2]);
  if (!HEAP32[$6 + 16 >> 2]) {
   HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 20 >> 2]
  }
  while (1) {
   block : {
    if (!HEAP32[HEAP32[$6 + 28 >> 2] >> 2]) {
     break block
    }
    HEAP32[$6 + 12 >> 2] = HEAP32[HEAP32[$6 + 28 >> 2] >> 2];
    if (HEAPU32[$6 + 32 >> 2] < HEAP32[$6 + 12 >> 2] + HEAP32[HEAP32[$6 + 24 >> 2] >> 2] >>> 0) {
     HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 32 >> 2] - HEAP32[HEAP32[$6 + 24 >> 2] >> 2]
    }
    if (HEAPU32[$6 + 16 >> 2] < HEAP32[$6 + 12 >> 2] + HEAP32[HEAP32[$6 + 44 >> 2] >> 2] >>> 0) {
     HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 16 >> 2] - HEAP32[HEAP32[$6 + 44 >> 2] >> 2]
    }
    if (HEAPU32[$6 + 40 >> 2] < HEAPU32[$6 + 16 >> 2]) {
     break block
    }
    if (!(!(jshFlashGetPage(HEAP32[HEAP32[$6 + 44 >> 2] >> 2], $6 + 8 | 0, $6 + 4 | 0) & 1) | HEAP32[$6 + 8 >> 2] != HEAP32[HEAP32[$6 + 44 >> 2] >> 2])) {
     jshFlashErasePage(HEAP32[HEAP32[$6 + 44 >> 2] >> 2])
    }
    jshFlashWrite(HEAP32[$6 + 36 >> 2] + HEAP32[HEAP32[$6 + 24 >> 2] >> 2] | 0, HEAP32[HEAP32[$6 + 44 >> 2] >> 2], HEAP32[$6 + 12 >> 2]);
    $0 = HEAP32[$6 + 44 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$6 + 12 >> 2] + HEAP32[$0 >> 2];
    HEAP32[$6 + 16 >> 2] = jsfGetAddressOfNextPage(HEAP32[HEAP32[$6 + 44 >> 2] >> 2]);
    if (!HEAP32[$6 + 16 >> 2]) {
     HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 20 >> 2]
    }
    HEAP32[HEAP32[$6 + 24 >> 2] >> 2] = (HEAP32[HEAP32[$6 + 24 >> 2] >> 2] + HEAP32[$6 + 12 >> 2] >>> 0) % HEAPU32[$6 + 32 >> 2];
    $0 = HEAP32[$6 + 28 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] - HEAP32[$6 + 12 >> 2];
    jshKickWatchDog();
    jshKickSoftWatchDog();
    continue;
   }
   break;
  };
  __stack_pointer = $6 + 48 | 0;
 }
 
 function jsfCompact($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 14 | 0] = $0;
  block : {
   if ((jswrap_banglejs_getBattery() | 0) < 10) {
    jsiConsolePrintf(147264, 0);
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   jsfCacheClear();
   HEAP32[92139] = 0;
   HEAP32[92140] = 0;
   HEAP8[$1 + 13 | 0] = jsfBankCompact(134217728, HEAP8[$1 + 14 | 0] & 1) & 1;
   HEAP8[$1 + 15 | 0] = HEAP8[$1 + 13 | 0] & 1;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jsfGetDriveBankAddress($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP8[$3 + 15 | 0] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = 134217728;
  HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = 142606336;
 }
 
 function jsvIsDriveNameExplicit($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0] == 58;
 }
 
 function jsfFindFileFromAddr($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  block1 : {
   if (!(HEAPU32[$2 + 8 >> 2] < 134217728 | HEAPU32[$2 + 8 >> 2] > 142606336)) {
    HEAP32[$2 >> 2] = jsfBankFindFileFromAddr(134217728, 142606336, HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
    if (HEAP32[$2 >> 2]) {
     HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
     break block1;
    }
   }
   HEAP32[$2 + 12 >> 2] = 0;
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function jsfBankFindFileFromAddr($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer + -64 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 56 >> 2] = $0;
  HEAP32[$4 + 52 >> 2] = $1;
  HEAP32[$4 + 48 >> 2] = $2;
  HEAP32[$4 + 44 >> 2] = $3;
  HEAP32[$4 + 40 >> 2] = HEAP32[$4 + 56 >> 2];
  HEAP32[$4 + 32 >> 2] = 0;
  HEAP32[$4 + 36 >> 2] = 0;
  HEAP32[$4 + 24 >> 2] = 0;
  HEAP32[$4 + 28 >> 2] = 0;
  HEAP32[$4 + 16 >> 2] = 0;
  HEAP32[$4 + 20 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  HEAP32[$4 + 12 >> 2] = 0;
  block1 : {
   if (jsfGetFileHeader(HEAP32[$4 + 40 >> 2], $4 + 8 | 0, 0) & 1) {
    while (1) {
     HEAP32[$4 + 4 >> 2] = (HEAP32[$4 + 40 >> 2] + 32 | 0) + jsfGetFileSize($4 + 8 | 0);
     if (!(!HEAP32[$4 + 12 >> 2] | HEAPU32[$4 + 40 >> 2] > HEAPU32[$4 + 48 >> 2] | HEAPU32[$4 + 48 >> 2] > HEAPU32[$4 + 4 >> 2])) {
      jsfGetFileHeader(HEAP32[$4 + 40 >> 2], $4 + 8 | 0, 1);
      if (HEAP32[$4 + 44 >> 2]) {
       $0 = HEAP32[$4 + 12 >> 2];
       $1 = HEAP32[$4 + 8 >> 2];
       $3 = $1;
       $2 = HEAP32[$4 + 44 >> 2];
       $1 = $2;
       HEAP32[$1 >> 2] = $3;
       HEAP32[$1 + 4 >> 2] = $0;
       $1 = HEAP32[$4 + 36 >> 2];
       $0 = HEAP32[$4 + 32 >> 2];
       $3 = $0;
       $0 = $2;
       HEAP32[$0 + 24 >> 2] = $3;
       HEAP32[$0 + 28 >> 2] = $1;
       $0 = HEAP32[$4 + 28 >> 2];
       $1 = HEAP32[$4 + 24 >> 2];
       $3 = $1;
       $1 = $2;
       HEAP32[$1 + 16 >> 2] = $3;
       HEAP32[$1 + 20 >> 2] = $0;
       $1 = HEAP32[$4 + 20 >> 2];
       $0 = HEAP32[$4 + 16 >> 2];
       $3 = $0;
       $0 = $2;
       HEAP32[$0 + 8 >> 2] = $3;
       HEAP32[$0 + 12 >> 2] = $1;
      }
      HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 40 >> 2] + 32;
      break block1;
     }
     if (jsfGetNextFileHeader($4 + 40 | 0, $4 + 8 | 0, 3) & 1) {
      continue
     }
     break;
    }
   }
   HEAP32[$4 + 60 >> 2] = 0;
  }
  __stack_pointer = $4 - -64 | 0;
  return HEAP32[$4 + 60 >> 2];
 }
 
 function jsfIsErased($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 160 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 152 >> 2] = $0;
  HEAP32[$2 + 148 >> 2] = $1;
  HEAP32[$2 + 12 >> 2] = 0;
  block : {
   while (1) {
    if (HEAP32[$2 + 148 >> 2]) {
     HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 148 >> 2];
     if (HEAPU32[$2 + 8 >> 2] > 128) {
      HEAP32[$2 + 8 >> 2] = 128
     }
     jshFlashRead($2 + 16 | 0, HEAP32[$2 + 152 >> 2], HEAP32[$2 + 8 >> 2]);
     HEAP32[$2 + 4 >> 2] = 0;
     while (1) {
      if (HEAPU32[$2 + 4 >> 2] < HEAPU32[$2 + 8 >> 2]) {
       if (HEAPU8[HEAP32[$2 + 4 >> 2] + ($2 + 16 | 0) | 0] != 255) {
        HEAP8[$2 + 159 | 0] = 0;
        break block;
       } else {
        HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
        continue;
       }
      }
      break;
     };
     HEAP32[$2 + 152 >> 2] = HEAP32[$2 + 8 >> 2] + HEAP32[$2 + 152 >> 2];
     HEAP32[$2 + 148 >> 2] = HEAP32[$2 + 148 >> 2] - HEAP32[$2 + 8 >> 2];
     $0 = HEAP32[$2 + 12 >> 2];
     HEAP32[$2 + 12 >> 2] = $0 + 1;
     if (($0 | 0) > 500) {
      jshKickWatchDog();
      jshKickSoftWatchDog();
      HEAP32[$2 + 12 >> 2] = 0;
     }
     continue;
    }
    break;
   };
   HEAP8[$2 + 159 | 0] = 1;
  }
  __stack_pointer = $2 + 160 | 0;
  return HEAP8[$2 + 159 | 0] & 1;
 }
 
 function jsfReadFile($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 80 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 72 >> 2] = $1;
  HEAP32[$3 + 68 >> 2] = $2;
  HEAP32[$3 + 24 >> 2] = HEAP32[$0 + 24 >> 2];
  $1 = $0;
  $0 = HEAP32[$1 + 16 >> 2];
  $2 = HEAP32[$1 + 20 >> 2];
  HEAP32[$3 + 16 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $2;
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = HEAP32[$1 + 8 >> 2];
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $0;
  $2 = HEAP32[$1 + 4 >> 2];
  $0 = HEAP32[$1 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $2;
  HEAP32[$3 + 32 >> 2] = jsfFindFile($3, $3 + 36 | 0);
  block : {
   if (!HEAP32[$3 + 32 >> 2]) {
    HEAP32[$3 + 76 >> 2] = 0;
    break block;
   }
   if (HEAP32[$3 + 72 >> 2] < 0) {
    HEAP32[$3 + 72 >> 2] = 0
   }
   HEAP32[$3 + 28 >> 2] = jsfGetFileSize($3 + 36 | 0);
   if (HEAP32[$3 + 68 >> 2] <= 0) {
    HEAP32[$3 + 68 >> 2] = HEAP32[$3 + 28 >> 2]
   }
   if (HEAP32[$3 + 72 >> 2] > HEAP32[$3 + 28 >> 2]) {
    HEAP32[$3 + 72 >> 2] = HEAP32[$3 + 28 >> 2]
   }
   if (HEAP32[$3 + 28 >> 2] < (HEAP32[$3 + 72 >> 2] + HEAP32[$3 + 68 >> 2] | 0)) {
    HEAP32[$3 + 68 >> 2] = HEAP32[$3 + 28 >> 2] - HEAP32[$3 + 72 >> 2]
   }
   if (HEAP32[$3 + 68 >> 2] <= 0) {
    HEAP32[$3 + 76 >> 2] = jsvNewFromEmptyString_754();
    break block;
   }
   HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 72 >> 2] + HEAP32[$3 + 32 >> 2];
   HEAP32[$3 + 76 >> 2] = jsvAddressToVar(HEAP32[$3 + 32 >> 2], HEAP32[$3 + 68 >> 2]);
  }
  __stack_pointer = $3 + 80 | 0;
  return HEAP32[$3 + 76 >> 2];
 }
 
 function jsvNewFromEmptyString_754() {
  return jsvNewWithFlags(28);
 }
 
 function jsvAddressToVar($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  block : {
   if (!HEAP32[$2 + 4 >> 2]) {
    HEAP32[$2 + 12 >> 2] = jsvNewFromEmptyString_754();
    break block;
   }
   HEAP32[$2 >> 2] = jshFlashGetMemMapAddress(HEAP32[$2 + 8 >> 2]);
   if (!HEAP32[$2 >> 2]) {
    HEAP32[$2 + 12 >> 2] = jsvNewFlashString(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
    break block;
   }
   HEAP32[$2 + 12 >> 2] = jsvNewNativeString(HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]);
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function jsfWriteFile($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0;
  $6 = __stack_pointer - 128 | 0;
  $5 = $6;
  __stack_pointer = $5;
  HEAP32[$5 + 120 >> 2] = $1;
  HEAP32[$5 + 116 >> 2] = $2;
  HEAP32[$5 + 112 >> 2] = $3;
  HEAP32[$5 + 108 >> 2] = $4;
  block1 : {
   if ((HEAP32[$5 + 112 >> 2] | HEAP32[$5 + 108 >> 2]) < 0) {
    HEAP8[$5 + 127 | 0] = 0;
    break block1;
   }
   HEAP32[$5 + 104 >> 2] = HEAP32[$5 + 108 >> 2];
   HEAP32[$5 + 100 >> 2] = 0;
   HEAP32[$5 + 96 >> 2] = jsvGetDataPointer(HEAP32[$5 + 120 >> 2], $5 + 100 | 0);
   if (!(HEAP32[$5 + 96 >> 2] | !HEAP32[$5 + 120 >> 2])) {
    HEAP32[$5 + 100 >> 2] = jsvIterateCallbackCount(HEAP32[$5 + 120 >> 2]);
    block3 : {
     if (HEAP32[$5 + 100 >> 2] + 256 >>> 0 > jsuGetFreeStack() >>> 0) {
      jsExceptionHere(1, 140362, 0);
      break block3;
     }
     $6 = $6 - (HEAP32[$5 + 100 >> 2] + 15 & -16) | 0;
     __stack_pointer = $6;
     HEAP32[$5 + 96 >> 2] = $6;
     jsvIterateCallbackToBytes(HEAP32[$5 + 120 >> 2], HEAP32[$5 + 96 >> 2], HEAP32[$5 + 100 >> 2]);
    }
   }
   if (!HEAP32[$5 + 96 >> 2]) {
    jsExceptionHere(1, 137287, 0);
    HEAP8[$5 + 127 | 0] = 0;
    break block1;
   }
   if (!HEAP32[$5 + 104 >> 2]) {
    HEAP32[$5 + 104 >> 2] = HEAP32[$5 + 100 >> 2]
   }
   if (!HEAP32[$5 + 104 >> 2]) {
    jsExceptionHere(1, 137613, 0);
    HEAP8[$5 + 127 | 0] = 0;
    break block1;
   }
   HEAP32[$5 + 56 >> 2] = HEAP32[$0 + 24 >> 2];
   $1 = HEAP32[$0 + 16 >> 2];
   $2 = HEAP32[$0 + 20 >> 2];
   HEAP32[$5 + 48 >> 2] = $1;
   HEAP32[$5 + 52 >> 2] = $2;
   $1 = HEAP32[$0 + 12 >> 2];
   $2 = HEAP32[$0 + 8 >> 2];
   HEAP32[$5 + 40 >> 2] = $2;
   HEAP32[$5 + 44 >> 2] = $1;
   $2 = HEAP32[$0 + 4 >> 2];
   $1 = HEAP32[$0 >> 2];
   HEAP32[$5 + 32 >> 2] = $1;
   HEAP32[$5 + 36 >> 2] = $2;
   HEAP32[$5 + 60 >> 2] = jsfFindFile($5 + 32 | 0, $5 - -64 | 0);
   block5 : {
    block4 : {
     if (!(HEAP32[$5 + 60 >> 2] | HEAP32[$5 + 112 >> 2])) {
      break block4
     }
     if (HEAP32[$5 + 112 >> 2] | !HEAP32[$5 + 60 >> 2]) {
      break block5
     }
     if (HEAP32[$5 + 116 >> 2] != (jsfGetFileFlags($5 - -64 | 0) | 0)) {
      break block4
     }
     if (HEAP32[$5 + 104 >> 2] != (jsfGetFileSize($5 - -64 | 0) | 0)) {
      break block4
     }
     if (jsfIsErased(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 104 >> 2]) & 1) {
      break block5
     }
    }
    block6 : {
     if (HEAP32[$5 + 112 >> 2] | !HEAP32[$5 + 60 >> 2]) {
      break block6
     }
     if (HEAP32[$5 + 104 >> 2] != (jsfGetFileSize($5 - -64 | 0) | 0)) {
      break block6
     }
     if (HEAP32[$5 + 116 >> 2] != (jsfGetFileFlags($5 - -64 | 0) | 0) | HEAP32[$5 + 100 >> 2] != HEAP32[$5 + 104 >> 2]) {
      break block6
     }
     if (!(jsfIsEqual(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 96 >> 2], HEAP32[$5 + 100 >> 2]) & 1)) {
      break block6
     }
     HEAP8[$5 + 127 | 0] = 1;
     break block1;
    }
    if (HEAP32[$5 + 60 >> 2]) {
     jsfEraseFileInternal(HEAP32[$5 + 60 >> 2], $5 - -64 | 0, 1)
    }
    $3 = HEAP32[$5 + 104 >> 2];
    $4 = HEAP32[$5 + 116 >> 2];
    HEAP32[$5 + 24 >> 2] = HEAP32[$0 + 24 >> 2];
    $2 = HEAP32[$0 + 16 >> 2];
    $1 = HEAP32[$0 + 20 >> 2];
    HEAP32[$5 + 16 >> 2] = $2;
    HEAP32[$5 + 20 >> 2] = $1;
    $2 = HEAP32[$0 + 12 >> 2];
    $1 = HEAP32[$0 + 8 >> 2];
    HEAP32[$5 + 8 >> 2] = $1;
    HEAP32[$5 + 12 >> 2] = $2;
    $1 = HEAP32[$0 + 4 >> 2];
    $2 = HEAP32[$0 >> 2];
    HEAP32[$5 >> 2] = $2;
    HEAP32[$5 + 4 >> 2] = $1;
    HEAP32[$5 + 60 >> 2] = jsfCreateFile($5, $3, $4, $5 - -64 | 0);
   }
   if (!HEAP32[$5 + 60 >> 2]) {
    jsExceptionHere(1, 137643, 0);
    HEAP8[$5 + 127 | 0] = 0;
    break block1;
   }
   if (HEAP32[$5 + 112 >> 2] + HEAP32[$5 + 100 >> 2] >>> 0 > jsfGetFileSize($5 - -64 | 0) >>> 0) {
    jsExceptionHere(1, 136991, 0);
    HEAP8[$5 + 127 | 0] = 0;
    break block1;
   }
   HEAP32[$5 + 60 >> 2] = HEAP32[$5 + 112 >> 2] + HEAP32[$5 + 60 >> 2];
   if (!(jsfIsErased(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 100 >> 2]) & 1)) {
    jsExceptionHere(1, 140321, 0);
    HEAP8[$5 + 127 | 0] = 0;
    break block1;
   }
   jshFlashWriteAligned(HEAP32[$5 + 96 >> 2], HEAP32[$5 + 60 >> 2], HEAP32[$5 + 100 >> 2]);
   HEAP8[$5 + 127 | 0] = 1;
  }
  __stack_pointer = $5 + 128 | 0;
  return HEAP8[$5 + 127 | 0] & 1;
 }
 
 function jsfIsEqual($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 160 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 152 >> 2] = $0;
  HEAP32[$3 + 148 >> 2] = $1;
  HEAP32[$3 + 144 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = 0;
  block : {
   while (1) {
    if (HEAP32[$3 + 144 >> 2]) {
     HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 144 >> 2];
     if (HEAPU32[$3 + 8 >> 2] > 128) {
      HEAP32[$3 + 8 >> 2] = 128
     }
     jshFlashRead($3 + 16 | 0, HEAP32[$3 + 152 >> 2] + HEAP32[$3 + 12 >> 2] | 0, HEAP32[$3 + 8 >> 2]);
     if (memcmp($3 + 16 | 0, HEAP32[$3 + 148 >> 2] + HEAP32[$3 + 12 >> 2] | 0, HEAP32[$3 + 8 >> 2])) {
      HEAP8[$3 + 159 | 0] = 0;
      break block;
     } else {
      HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 8 >> 2] + HEAP32[$3 + 12 >> 2];
      HEAP32[$3 + 144 >> 2] = HEAP32[$3 + 144 >> 2] - HEAP32[$3 + 8 >> 2];
      continue;
     }
    }
    break;
   };
   HEAP8[$3 + 159 | 0] = 1;
  }
  __stack_pointer = $3 + 160 | 0;
  return HEAP8[$3 + 159 | 0] & 1;
 }
 
 function jsfCreateFile($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 44 >> 2] = $1;
  HEAP32[$4 + 40 >> 2] = $2;
  HEAP32[$4 + 36 >> 2] = $3;
  $3 = HEAP32[$4 + 44 >> 2];
  $5 = HEAP32[$4 + 40 >> 2];
  $6 = HEAP32[$4 + 36 >> 2];
  HEAP32[$4 + 32 >> 2] = HEAP32[$0 + 24 >> 2];
  $1 = $0;
  $0 = HEAP32[$1 + 16 >> 2];
  $2 = HEAP32[$1 + 20 >> 2];
  HEAP32[$4 + 24 >> 2] = $0;
  HEAP32[$4 + 28 >> 2] = $2;
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = HEAP32[$1 + 8 >> 2];
  HEAP32[$4 + 16 >> 2] = $2;
  HEAP32[$4 + 20 >> 2] = $0;
  $2 = HEAP32[$1 + 4 >> 2];
  $0 = HEAP32[$1 >> 2];
  HEAP32[$4 + 8 >> 2] = $0;
  HEAP32[$4 + 12 >> 2] = $2;
  $0 = _jsfCreateFile($4 + 8 | 0, $3, $5, $6, 0);
  __stack_pointer = $4 + 48 | 0;
  return $0;
 }
 
 function _jsfCreateFile($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 128 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 120 >> 2] = $1;
  HEAP32[$5 + 116 >> 2] = $2;
  HEAP32[$5 + 112 >> 2] = $3;
  HEAP8[$5 + 111 | 0] = $4;
  HEAP8[$5 + 110 | 0] = jsvIsDriveNameExplicit($0) & 1;
  HEAP8[$5 + 109 | 0] = jsfStripDriveFromName($0, HEAP8[$5 + 111 | 0] & 1);
  HEAP32[$5 + 32 >> 2] = HEAP32[$0 + 24 >> 2];
  $3 = $0;
  $2 = HEAP32[$3 + 16 >> 2];
  $1 = HEAP32[$3 + 20 >> 2];
  HEAP32[$5 + 24 >> 2] = $2;
  HEAP32[$5 + 28 >> 2] = $1;
  $2 = HEAP32[$3 + 12 >> 2];
  $1 = HEAP32[$3 + 8 >> 2];
  HEAP32[$5 + 16 >> 2] = $1;
  HEAP32[$5 + 20 >> 2] = $2;
  $1 = HEAP32[$3 + 4 >> 2];
  $2 = HEAP32[$3 >> 2];
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $1;
  jsfCacheClearFile($5 + 8 | 0);
  jsfGetDriveBankAddress(HEAP8[$5 + 109 | 0] << 24 >> 24, $5 + 104 | 0, $5 + 100 | 0);
  HEAP32[$5 + 96 >> 2] = jsfAlignAddress(HEAP32[$5 + 120 >> 2]) + 32;
  HEAP8[$5 + 95 | 0] = 0;
  HEAP32[$5 + 88 >> 2] = 0;
  HEAP32[$5 + 52 >> 2] = 0;
  block2 : {
   while (1) {
    if ((HEAP32[$5 + 52 >> 2] != 0 ^ -1) & 1) {
     HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 104 >> 2];
     HEAP32[$5 + 48 >> 2] = 0;
     HEAP32[$5 + 44 >> 2] = 0;
     HEAP32[$5 + 52 >> 2] = 0;
     while (1) {
      if (jsfGetFileHeader(HEAP32[$5 + 88 >> 2], $5 + 56 | 0, 0) & 1) {
       while (1) {
        if (!HEAP32[$5 + 60 >> 2]) {
         HEAP32[$5 + 44 >> 2] = jsfGetFileSize($5 + 56 | 0) + HEAP32[$5 + 44 >> 2]
        }
        if (jsfGetNextFileHeader($5 + 88 | 0, $5 + 56 | 0, 0) & 1) {
         continue
        }
        break;
       }
      }
      HEAP32[$5 + 40 >> 2] = jsfGetSpaceLeftInPage(HEAP32[$5 + 88 >> 2]);
      HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 40 >> 2] + HEAP32[$5 + 48 >> 2];
      block : {
       if (HEAPU32[$5 + 40 >> 2] < HEAPU32[$5 + 96 >> 2]) {
        HEAP32[$5 + 88 >> 2] = jsfGetAddressOfNextPage(HEAP32[$5 + 88 >> 2]);
        break block;
       }
       HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 88 >> 2];
      }
      $1 = 0;
      $1 = HEAP32[$5 + 88 >> 2] ? HEAP32[$5 + 52 >> 2] != 0 ^ -1 : $1;
      if ($1 & 1) {
       continue
      }
      break;
     };
     if (!HEAP32[$5 + 52 >> 2]) {
      block3 : {
       if (!(HEAP8[$5 + 95 | 0] & 1 | HEAPU32[$5 + 96 >> 2] >= HEAP32[$5 + 48 >> 2] + HEAP32[$5 + 44 >> 2] >>> 0)) {
        HEAP8[$5 + 95 | 0] = 1;
        if (!(jsfCompact(1) & 1)) {
         HEAP32[$5 + 124 >> 2] = 0;
         break block2;
        }
        HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 104 >> 2];
        break block3;
       }
       HEAP32[$5 + 124 >> 2] = 0;
       break block2;
      }
     }
     continue;
    }
    break;
   };
   HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 52 >> 2];
   HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 120 >> 2] | HEAP32[$5 + 116 >> 2] << 24;
   $1 = HEAP32[$0 >> 2];
   $2 = HEAP32[$3 + 4 >> 2];
   $4 = $1;
   $0 = $5 + 56 | 0;
   $1 = $0;
   HEAP32[$1 + 4 >> 2] = $4;
   HEAP32[$1 + 8 >> 2] = $2;
   HEAP32[$1 + 28 >> 2] = HEAP32[$3 + 24 >> 2];
   $1 = HEAP32[$3 + 20 >> 2];
   $2 = HEAP32[$3 + 16 >> 2];
   $4 = $2;
   $2 = $0;
   HEAP32[$2 + 20 >> 2] = $4;
   HEAP32[$2 + 24 >> 2] = $1;
   $2 = HEAP32[$3 + 12 >> 2];
   $1 = HEAP32[$3 + 8 >> 2];
   $3 = $1;
   $1 = $0;
   HEAP32[$1 + 12 >> 2] = $3;
   HEAP32[$1 + 16 >> 2] = $2;
   jshFlashWrite($5 + 56 | 0, HEAP32[$5 + 88 >> 2], 32);
   if (HEAP32[$5 + 112 >> 2]) {
    $1 = HEAP32[$5 + 60 >> 2];
    $2 = HEAP32[$5 + 56 >> 2];
    $3 = $2;
    $0 = HEAP32[$5 + 112 >> 2];
    $2 = $0;
    HEAP32[$2 >> 2] = $3;
    HEAP32[$2 + 4 >> 2] = $1;
    $2 = HEAP32[$5 + 84 >> 2];
    $1 = HEAP32[$5 + 80 >> 2];
    $3 = $1;
    $1 = $0;
    HEAP32[$1 + 24 >> 2] = $3;
    HEAP32[$1 + 28 >> 2] = $2;
    $1 = HEAP32[$5 + 76 >> 2];
    $2 = HEAP32[$5 + 72 >> 2];
    $3 = $2;
    $2 = $0;
    HEAP32[$2 + 16 >> 2] = $3;
    HEAP32[$2 + 20 >> 2] = $1;
    $2 = HEAP32[$5 + 68 >> 2];
    $1 = HEAP32[$5 + 64 >> 2];
    $3 = $1;
    $1 = $0;
    HEAP32[$1 + 8 >> 2] = $3;
    HEAP32[$1 + 12 >> 2] = $2;
   }
   HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 88 >> 2] + 32;
   jsfCachePut($5 + 56 | 0, HEAP32[$5 + 88 >> 2]);
   HEAP32[$5 + 124 >> 2] = HEAP32[$5 + 88 >> 2];
  }
  __stack_pointer = $5 + 128 | 0;
  return HEAP32[$5 + 124 >> 2];
 }
 
 function jsfListFiles($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP32[$3 + 16 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = jsvNewEmptyArray();
  block : {
   if (!HEAP32[$3 + 12 >> 2]) {
    HEAP32[$3 + 28 >> 2] = 0;
    break block;
   }
   jsfBankListFiles(HEAP32[$3 + 12 >> 2], 134217728, HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2], 0);
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
  }
  __stack_pointer = $3 + 32 | 0;
  return HEAP32[$3 + 28 >> 2];
 }
 
 function jsfBankListFiles($0, $1, $2, $3, $4, $5) {
  var $6 = 0;
  $6 = __stack_pointer - 80 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 76 >> 2] = $0;
  HEAP32[$6 + 72 >> 2] = $1;
  HEAP32[$6 + 68 >> 2] = $2;
  HEAP32[$6 + 64 >> 2] = $3;
  HEAP32[$6 + 60 >> 2] = $4;
  HEAP32[$6 + 56 >> 2] = $5;
  HEAP32[$6 + 48 >> 2] = 0;
  HEAP32[$6 + 52 >> 2] = 0;
  HEAP32[$6 + 40 >> 2] = 0;
  HEAP32[$6 + 44 >> 2] = 0;
  HEAP32[$6 + 32 >> 2] = 0;
  HEAP32[$6 + 36 >> 2] = 0;
  HEAP32[$6 + 24 >> 2] = 0;
  HEAP32[$6 + 28 >> 2] = 0;
  block3 : {
   block2 : {
    if (!(!HEAP32[92139] | HEAP32[$6 + 72 >> 2] != 134217728)) {
     HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 72 >> 2];
     HEAP32[$6 + 16 >> 2] = HEAP32[92139];
     HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 16 >> 2] + HEAP32[92140];
     while (1) {
      if (HEAPU32[$6 + 16 >> 2] < HEAPU32[$6 + 12 >> 2]) {
       jshFlashRead($6 + 24 | 0, HEAP32[$6 + 16 >> 2], 4);
       HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 16 >> 2] + 32;
       HEAP32[$6 + 8 >> 2] = HEAP32[$6 + 20 >> 2] + HEAP32[$6 + 24 >> 2];
       block1 : {
        if (!(jsfGetFileHeader(HEAP32[$6 + 8 >> 2], $6 + 24 | 0, 1) & 1)) {
         break block1
        }
        if (!(jsfIsRealFile($6 + 24 | 0) & 1)) {
         break block1
        }
        jsfBankListFilesHandleFile(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 8 >> 2], $6 + 24 | 0, HEAP32[$6 + 68 >> 2], HEAP32[$6 + 64 >> 2], HEAP32[$6 + 60 >> 2], HEAP32[$6 + 56 >> 2]);
       }
       continue;
      }
      break;
     };
     HEAP32[$6 + 72 >> 2] = HEAP32[92139] - 32;
     HEAP32[$6 + 28 >> 2] = 0;
     HEAP32[$6 + 24 >> 2] = HEAP32[92140];
     break block2;
    }
    if (!(jsfGetFileHeader(HEAP32[$6 + 72 >> 2], $6 + 24 | 0, 1) & 1)) {
     break block3
    }
   }
   while (1) {
    if (jsfIsRealFile($6 + 24 | 0) & 1) {
     jsfBankListFilesHandleFile(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 72 >> 2], $6 + 24 | 0, HEAP32[$6 + 68 >> 2], HEAP32[$6 + 64 >> 2], HEAP32[$6 + 60 >> 2], HEAP32[$6 + 56 >> 2])
    }
    if (jsfGetNextFileHeader($6 + 72 | 0, $6 + 24 | 0, 1) & 1) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $6 + 80 | 0;
 }
 
 function jsfBankListFilesHandleFile($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0;
  $7 = __stack_pointer - 80 | 0;
  __stack_pointer = $7;
  HEAP32[$7 + 76 >> 2] = $0;
  HEAP32[$7 + 72 >> 2] = $1;
  HEAP32[$7 + 68 >> 2] = $2;
  HEAP32[$7 + 64 >> 2] = $3;
  HEAP32[$7 + 60 >> 2] = $4;
  HEAP32[$7 + 56 >> 2] = $5;
  HEAP32[$7 + 52 >> 2] = $6;
  HEAP32[$7 + 48 >> 2] = jsfGetFileFlags(HEAP32[$7 + 68 >> 2]);
  block : {
   if (!(!HEAP32[$7 + 60 >> 2] | HEAP32[$7 + 60 >> 2] & HEAP32[$7 + 48 >> 2]) | HEAP32[$7 + 56 >> 2] & HEAP32[$7 + 48 >> 2]) {
    break block
   }
   if (HEAP32[$7 + 48 >> 2] & 64) {
    HEAP32[$7 + 44 >> 2] = 0;
    while (1) {
     $0 = 0;
     if ((HEAP32[$7 + 44 >> 2] + 1 | 0) < 28) {
      $0 = HEAPU8[(HEAP32[$7 + 68 >> 2] + HEAP32[$7 + 44 >> 2] | 0) + 5 | 0] != 0
     }
     if ($0) {
      HEAP32[$7 + 44 >> 2] = HEAP32[$7 + 44 >> 2] + 1;
      continue;
     }
     break;
    };
    if (HEAPU8[HEAP32[$7 + 44 >> 2] + (HEAP32[$7 + 68 >> 2] + 4 | 0) | 0] != 1) {
     break block
    }
    if (HEAP32[$7 + 60 >> 2] & 64) {
     HEAP8[HEAP32[$7 + 44 >> 2] + (HEAP32[$7 + 68 >> 2] + 4 | 0) | 0] = 0
    }
   }
   $1 = HEAP32[$7 + 68 >> 2];
   HEAP32[$7 + 24 >> 2] = HEAP32[$1 + 28 >> 2];
   $0 = HEAP32[$1 + 20 >> 2];
   $2 = HEAP32[$1 + 24 >> 2];
   HEAP32[$7 + 16 >> 2] = $0;
   HEAP32[$7 + 20 >> 2] = $2;
   $0 = HEAP32[$1 + 16 >> 2];
   $2 = HEAP32[$1 + 12 >> 2];
   HEAP32[$7 + 8 >> 2] = $2;
   HEAP32[$7 + 12 >> 2] = $0;
   $2 = HEAP32[$1 + 8 >> 2];
   $0 = HEAP32[$1 + 4 >> 2];
   HEAP32[$7 >> 2] = $0;
   HEAP32[$7 + 4 >> 2] = $2;
   HEAP32[$7 + 40 >> 2] = jsfVarFromName($7);
   HEAP8[$7 + 39 | 0] = 1;
   if (HEAP32[$7 + 64 >> 2]) {
    HEAP32[$7 + 32 >> 2] = jswrap_string_match(HEAP32[$7 + 40 >> 2], HEAP32[$7 + 64 >> 2]);
    $0 = 1;
    if (!(jsvIsUndefined(HEAP32[$7 + 32 >> 2]) & 1)) {
     $0 = jsvIsNull(HEAP32[$7 + 32 >> 2])
    }
    HEAP8[$7 + 39 | 0] = ($0 ^ -1) & 1;
    jsvUnLock(HEAP32[$7 + 32 >> 2]);
   }
   if (!(!HEAP32[$7 + 52 >> 2] | !(HEAP8[$7 + 39 | 0] & 1))) {
    HEAP32[HEAP32[$7 + 52 >> 2] >> 2] = HEAP32[HEAP32[$7 + 52 >> 2] >> 2] << 1 | HEAP32[HEAP32[$7 + 52 >> 2] >> 2] >>> 31;
    $0 = HEAP32[HEAP32[$7 + 52 >> 2] >> 2] ^ HEAP32[$7 + 72 >> 2];
    $1 = jsvGetIntegerAndUnLock(jswrap_espruino_CRC32(HEAP32[$7 + 40 >> 2]));
    HEAP32[HEAP32[$7 + 52 >> 2] >> 2] = $0 ^ $1;
   }
   if (!(!(HEAP8[$7 + 39 | 0] & 1) | !HEAP32[$7 + 76 >> 2])) {
    jsvArrayPushAndUnLock(HEAP32[$7 + 76 >> 2], HEAP32[$7 + 40 >> 2]);
    break block;
   }
   jsvUnLock(HEAP32[$7 + 40 >> 2]);
  }
  __stack_pointer = $7 + 80 | 0;
 }
 
 function jsfHashFiles($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  HEAP32[$3 >> 2] = -1412571974;
  jsfBankListFiles(0, 134217728, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], $3);
  __stack_pointer = $3 + 16 | 0;
  return HEAP32[$3 >> 2];
 }
 
 function jsfSaveToFlash() {
  jsiConsolePrintString(147721);
 }
 
 function jsfLoadStateFromFlash() {
  
 }
 
 function jsfSaveBootCodeToFlash($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 192 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 188 >> 2] = $0;
  HEAP8[$2 + 187 | 0] = $1;
  jsfNameFromString($2 + 156 | 0, 137983);
  HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 180 >> 2];
  $0 = HEAP32[$2 + 176 >> 2];
  $1 = HEAP32[$2 + 172 >> 2];
  HEAP32[$2 + 56 >> 2] = $1;
  HEAP32[$2 + 60 >> 2] = $0;
  $1 = HEAP32[$2 + 168 >> 2];
  $0 = HEAP32[$2 + 164 >> 2];
  HEAP32[$2 + 48 >> 2] = $0;
  HEAP32[$2 + 52 >> 2] = $1;
  $0 = HEAP32[$2 + 160 >> 2];
  $1 = HEAP32[$2 + 156 >> 2];
  HEAP32[$2 + 40 >> 2] = $1;
  HEAP32[$2 + 44 >> 2] = $0;
  jsfEraseFile($2 + 40 | 0);
  jsfNameFromString($2 + 128 | 0, 124530);
  HEAP32[$2 + 96 >> 2] = HEAP32[$2 + 152 >> 2];
  $1 = HEAP32[$2 + 148 >> 2];
  $0 = HEAP32[$2 + 144 >> 2];
  HEAP32[$2 + 88 >> 2] = $0;
  HEAP32[$2 + 92 >> 2] = $1;
  $0 = HEAP32[$2 + 140 >> 2];
  $1 = HEAP32[$2 + 136 >> 2];
  HEAP32[$2 + 80 >> 2] = $1;
  HEAP32[$2 + 84 >> 2] = $0;
  $1 = HEAP32[$2 + 132 >> 2];
  $0 = HEAP32[$2 + 128 >> 2];
  HEAP32[$2 + 72 >> 2] = $0;
  HEAP32[$2 + 76 >> 2] = $1;
  jsfEraseFile($2 + 72 | 0);
  block : {
   if (jsvIsUndefined(HEAP32[$2 + 188 >> 2]) & 1) {
    break block
   }
   if (!jsvGetLength(HEAP32[$2 + 188 >> 2])) {
    break block
   }
   jsfNameFromString($2 + 100 | 0, HEAP8[$2 + 187 | 0] & 1 ? 124530 : 137983);
   $3 = HEAP32[$2 + 188 >> 2];
   HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 124 >> 2];
   $0 = HEAP32[$2 + 120 >> 2];
   $1 = HEAP32[$2 + 116 >> 2];
   HEAP32[$2 + 24 >> 2] = $1;
   HEAP32[$2 + 28 >> 2] = $0;
   $1 = HEAP32[$2 + 112 >> 2];
   $0 = HEAP32[$2 + 108 >> 2];
   HEAP32[$2 + 16 >> 2] = $0;
   HEAP32[$2 + 20 >> 2] = $1;
   $0 = HEAP32[$2 + 104 >> 2];
   $1 = HEAP32[$2 + 100 >> 2];
   HEAP32[$2 + 8 >> 2] = $1;
   HEAP32[$2 + 12 >> 2] = $0;
   jsfWriteFile($2 + 8 | 0, $3, 0, 0, 0);
  }
  __stack_pointer = $2 + 192 | 0;
 }
 
 function jsfGetBootCodeFromFlash($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 128 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 123 | 0] = $0;
  jsfNameFromString($1 + 88 | 0, 124530);
  HEAP32[$1 + 56 >> 2] = HEAP32[$1 + 112 >> 2];
  $2 = HEAP32[$1 + 108 >> 2];
  $0 = HEAP32[$1 + 104 >> 2];
  HEAP32[$1 + 48 >> 2] = $0;
  HEAP32[$1 + 52 >> 2] = $2;
  $0 = HEAP32[$1 + 100 >> 2];
  $2 = HEAP32[$1 + 96 >> 2];
  HEAP32[$1 + 40 >> 2] = $2;
  HEAP32[$1 + 44 >> 2] = $0;
  $2 = HEAP32[$1 + 92 >> 2];
  $0 = HEAP32[$1 + 88 >> 2];
  HEAP32[$1 + 32 >> 2] = $0;
  HEAP32[$1 + 36 >> 2] = $2;
  HEAP32[$1 + 116 >> 2] = jsfReadFile($1 + 32 | 0, 0, 0);
  block1 : {
   if (HEAP8[$1 + 123 | 0] & 1 | HEAP32[$1 + 116 >> 2]) {
    HEAP32[$1 + 124 >> 2] = HEAP32[$1 + 116 >> 2];
    break block1;
   }
   jsfNameFromString($1 + 60 | 0, 137983);
   HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 84 >> 2];
   $0 = HEAP32[$1 + 80 >> 2];
   $2 = HEAP32[$1 + 76 >> 2];
   HEAP32[$1 + 16 >> 2] = $2;
   HEAP32[$1 + 20 >> 2] = $0;
   $2 = HEAP32[$1 + 72 >> 2];
   $0 = HEAP32[$1 + 68 >> 2];
   HEAP32[$1 + 8 >> 2] = $0;
   HEAP32[$1 + 12 >> 2] = $2;
   $0 = HEAP32[$1 + 64 >> 2];
   $2 = HEAP32[$1 + 60 >> 2];
   HEAP32[$1 >> 2] = $2;
   HEAP32[$1 + 4 >> 2] = $0;
   HEAP32[$1 + 124 >> 2] = jsfReadFile($1, 0, 0);
  }
  __stack_pointer = $1 + 128 | 0;
  return HEAP32[$1 + 124 >> 2];
 }
 
 function jsfLoadBootCodeFromFlash($0) {
  var $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1 = __stack_pointer - 144 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 142 | 0] = $0;
  if (!(wasm2js_i32$0 = jshPinGetValue(17) & 1, wasm2js_i32$1 = 1, wasm2js_i32$2 = HEAPU16[184294] & 4096, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1)) {
   jsfNameFromString($1 + 108 | 0, 135496);
   HEAP32[$1 + 56 >> 2] = HEAP32[$1 + 132 >> 2];
   $2 = HEAP32[$1 + 128 >> 2];
   $0 = HEAP32[$1 + 124 >> 2];
   HEAP32[$1 + 48 >> 2] = $0;
   HEAP32[$1 + 52 >> 2] = $2;
   $0 = HEAP32[$1 + 120 >> 2];
   $2 = HEAP32[$1 + 116 >> 2];
   HEAP32[$1 + 40 >> 2] = $2;
   HEAP32[$1 + 44 >> 2] = $0;
   $2 = HEAP32[$1 + 112 >> 2];
   $0 = HEAP32[$1 + 108 >> 2];
   HEAP32[$1 + 32 >> 2] = $0;
   HEAP32[$1 + 36 >> 2] = $2;
   HEAP32[$1 + 136 >> 2] = jsfReadFile($1 + 32 | 0, 0, 0);
   if (HEAP32[$1 + 136 >> 2]) {
    jsvUnLock2(jspEvaluateVar(HEAP32[$1 + 136 >> 2], 0, 135496, 0), HEAP32[$1 + 136 >> 2]);
    jsiCheckErrors(0);
   }
  }
  if (!(wasm2js_i32$0 = jshPinGetValue(17) & 1, wasm2js_i32$1 = 0, wasm2js_i32$2 = HEAPU16[184294] & 4096, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1)) {
   $0 = HEAPU8[140606] | HEAPU8[140607] << 8 | (HEAPU8[140608] << 16 | HEAPU8[140609] << 24);
   HEAP8[$1 + 103 | 0] = $0;
   HEAP8[$1 + 104 | 0] = $0 >>> 8;
   HEAP8[$1 + 105 | 0] = $0 >>> 16;
   HEAP8[$1 + 106 | 0] = $0 >>> 24;
   HEAP32[$1 + 100 >> 2] = HEAPU8[140603] | HEAPU8[140604] << 8 | (HEAPU8[140605] << 16 | HEAPU8[140606] << 24);
   HEAP32[$1 + 96 >> 2] = 0;
   while (1) {
    if (HEAP32[$1 + 96 >> 2] < 4) {
     HEAP8[$1 + 105 | 0] = HEAP32[$1 + 96 >> 2] + 48;
     jsfNameFromString($1 - -64 | 0, $1 + 100 | 0);
     HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 88 >> 2];
     $0 = HEAP32[$1 + 84 >> 2];
     $2 = HEAP32[$1 + 80 >> 2];
     HEAP32[$1 + 16 >> 2] = $2;
     HEAP32[$1 + 20 >> 2] = $0;
     $2 = HEAP32[$1 + 76 >> 2];
     $0 = HEAP32[$1 + 72 >> 2];
     HEAP32[$1 + 8 >> 2] = $0;
     HEAP32[$1 + 12 >> 2] = $2;
     $0 = HEAP32[$1 + 68 >> 2];
     $2 = HEAP32[$1 + 64 >> 2];
     HEAP32[$1 >> 2] = $2;
     HEAP32[$1 + 4 >> 2] = $0;
     HEAP32[$1 + 92 >> 2] = jsfReadFile($1, 0, 0);
     if (HEAP32[$1 + 92 >> 2]) {
      jsvUnLock2(jspEvaluateVar(HEAP32[$1 + 92 >> 2], 0, $1 + 100 | 0, 0), HEAP32[$1 + 92 >> 2]);
      jsiCheckErrors(0);
     }
     HEAP32[$1 + 96 >> 2] = HEAP32[$1 + 96 >> 2] + 1;
     continue;
    }
    break;
   };
  }
  HEAP32[$1 + 60 >> 2] = jsfGetBootCodeFromFlash(HEAP8[$1 + 142 | 0] & 1);
  block1 : {
   if (!HEAP32[$1 + 60 >> 2]) {
    HEAP8[$1 + 143 | 0] = 0;
    break block1;
   }
   jsvUnLock2(jspEvaluateVar(HEAP32[$1 + 60 >> 2], 0, 137973, 0), HEAP32[$1 + 60 >> 2]);
   jsiCheckErrors(0);
   HEAP8[$1 + 143 | 0] = 1;
  }
  __stack_pointer = $1 + 144 | 0;
  return HEAP8[$1 + 143 | 0] & 1;
 }
 
 function jsfFlashContainsCode() {
  var $0 = 0, $1 = 0, $2 = 0;
  $0 = __stack_pointer - 128 | 0;
  __stack_pointer = $0;
  jsfNameFromString($0 + 100 | 0, 137983);
  HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 124 >> 2];
  $2 = HEAP32[$0 + 120 >> 2];
  $1 = HEAP32[$0 + 116 >> 2];
  HEAP32[$0 + 56 >> 2] = $1;
  HEAP32[$0 + 60 >> 2] = $2;
  $1 = HEAP32[$0 + 112 >> 2];
  $2 = HEAP32[$0 + 108 >> 2];
  HEAP32[$0 + 48 >> 2] = $2;
  HEAP32[$0 + 52 >> 2] = $1;
  $2 = HEAP32[$0 + 104 >> 2];
  $1 = HEAP32[$0 + 100 >> 2];
  HEAP32[$0 + 40 >> 2] = $1;
  HEAP32[$0 + 44 >> 2] = $2;
  $1 = 1;
  if (!jsfFindFile($0 + 40 | 0, 0)) {
   jsfNameFromString($0 + 72 | 0, 124530);
   HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 96 >> 2];
   $1 = HEAP32[$0 + 92 >> 2];
   $2 = HEAP32[$0 + 88 >> 2];
   HEAP32[$0 + 24 >> 2] = $2;
   HEAP32[$0 + 28 >> 2] = $1;
   $2 = HEAP32[$0 + 84 >> 2];
   $1 = HEAP32[$0 + 80 >> 2];
   HEAP32[$0 + 16 >> 2] = $1;
   HEAP32[$0 + 20 >> 2] = $2;
   $1 = HEAP32[$0 + 76 >> 2];
   $2 = HEAP32[$0 + 72 >> 2];
   HEAP32[$0 + 8 >> 2] = $2;
   HEAP32[$0 + 12 >> 2] = $1;
   $1 = (jsfFindFile($0 + 8 | 0, 0) | 0) != 0;
  }
  __stack_pointer = $0 + 128 | 0;
  return $1;
 }
 
 function jsfRemoveCodeFromFlash() {
  var $0 = 0, $1 = 0, $2 = 0;
  $0 = __stack_pointer - 128 | 0;
  __stack_pointer = $0;
  jsiConsolePrintString(142454);
  jsfNameFromString($0 + 100 | 0, 137983);
  HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 124 >> 2];
  $1 = HEAP32[$0 + 120 >> 2];
  $2 = HEAP32[$0 + 116 >> 2];
  HEAP32[$0 + 24 >> 2] = $2;
  HEAP32[$0 + 28 >> 2] = $1;
  $2 = HEAP32[$0 + 112 >> 2];
  $1 = HEAP32[$0 + 108 >> 2];
  HEAP32[$0 + 16 >> 2] = $1;
  HEAP32[$0 + 20 >> 2] = $2;
  $1 = HEAP32[$0 + 104 >> 2];
  $2 = HEAP32[$0 + 100 >> 2];
  HEAP32[$0 + 8 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = $1;
  jsfEraseFile($0 + 8 | 0);
  jsfNameFromString($0 + 72 | 0, 124530);
  HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 96 >> 2];
  $2 = HEAP32[$0 + 92 >> 2];
  $1 = HEAP32[$0 + 88 >> 2];
  HEAP32[$0 + 56 >> 2] = $1;
  HEAP32[$0 + 60 >> 2] = $2;
  $1 = HEAP32[$0 + 84 >> 2];
  $2 = HEAP32[$0 + 80 >> 2];
  HEAP32[$0 + 48 >> 2] = $2;
  HEAP32[$0 + 52 >> 2] = $1;
  $2 = HEAP32[$0 + 76 >> 2];
  $1 = HEAP32[$0 + 72 >> 2];
  HEAP32[$0 + 40 >> 2] = $1;
  HEAP32[$0 + 44 >> 2] = $2;
  jsfEraseFile($0 + 40 | 0);
  jsiConsolePrintString(148256);
  __stack_pointer = $0 + 128 | 0;
 }
 
 function jsfResetStorage() {
  jsiConsolePrintf(148137, 0);
  jsfEraseAll();
  jsiConsolePrintf(148072, 0);
  block : {
   if (HEAP32[256] < 8388608) {
    jsiConsolePrintf(146951, 0);
    jsfResetStorage_progress(1040, 134217728, HEAP32[256]);
    jsiConsolePrintf(148054, 0);
    break block;
   }
   jsWarn(148196, 0);
  }
 }
 
 function jsfResetStorage_progress($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$3 + 20 >> 2]) {
    HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 20 >> 2];
    if (HEAPU32[$3 + 16 >> 2] > 8192) {
     HEAP32[$3 + 16 >> 2] = 8192
    }
    jshFlashWrite(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 16 >> 2]);
    HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 16 >> 2] + HEAP32[$3 + 28 >> 2];
    HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 16 >> 2] + HEAP32[$3 + 24 >> 2];
    HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] - HEAP32[$3 + 16 >> 2];
    HEAP32[$3 >> 2] = HEAP8[(HEAP32[$3 + 12 >> 2] & 3) + 123556 | 0] << 24 >> 24;
    jsiConsolePrintf(140230, $3);
    HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
    continue;
   }
   break;
  };
  __stack_pointer = $3 + 32 | 0;
 }
 
 function jsfCreateFileTable() {
  jsfBankCreateFileTable(134217728);
 }
 
 function jsfGetSpaceLeftInPage($0) {
  var $1 = 0;
  $1 = __stack_pointer + -64 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 56 >> 2] = $0;
  block : {
   if (!(jshFlashGetPage(HEAP32[$1 + 56 >> 2], $1 + 52 | 0, $1 + 48 | 0) & 1)) {
    HEAP32[$1 + 60 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 44 >> 2] = jsfGetBankEndAddress(HEAP32[$1 + 56 >> 2]);
   HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 52 >> 2] + HEAP32[$1 + 48 >> 2];
   block1 : {
    if (HEAPU32[$1 + 40 >> 2] >= HEAPU32[$1 + 44 >> 2]) {
     break block1
    }
    if (jsfGetFileHeader(HEAP32[$1 + 40 >> 2], $1 + 8 | 0, 0) & 1) {
     break block1
    }
    HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 44 >> 2];
   }
   HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 40 >> 2] - HEAP32[$1 + 56 >> 2];
  }
  __stack_pointer = $1 - -64 | 0;
  return HEAP32[$1 + 60 >> 2];
 }
 
 function jshIsPinValid($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP8[$1 + 15 | 0] = $0;
  if (HEAPU8[$1 + 15 | 0] < 48) {
   $2 = (HEAPU8[Math_imul(HEAPU8[$1 + 15 | 0], 3) + 182064 | 0] & 15) != 0
  }
  return $2;
 }
 
 function jshGetPinFromString($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block5 : {
   if (!(!HEAPU8[HEAP32[$1 + 8 >> 2] + 1 | 0] | !(HEAP8[HEAP32[$1 + 8 >> 2]] << 24 >> 24 <= 73 & HEAP8[HEAP32[$1 + 8 >> 2]] << 24 >> 24 >= 65) & HEAPU8[HEAP32[$1 + 8 >> 2]] != 86)) {
    HEAP32[$1 + 4 >> 2] = HEAPU8[HEAP32[$1 + 8 >> 2]] == 86 ? 10 : (HEAP8[HEAP32[$1 + 8 >> 2]] << 24 >> 24) + -64 | 0;
    HEAP32[$1 >> 2] = -1;
    if (!(HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] << 24 >> 24 < 48 | HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] << 24 >> 24 > 57)) {
     block3 : {
      if (!HEAPU8[HEAP32[$1 + 8 >> 2] + 2 | 0]) {
       HEAP32[$1 >> 2] = (HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] << 24 >> 24) - 48;
       break block3;
      }
      if (!(HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] << 24 >> 24 < 48 | HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] << 24 >> 24 > 57 | HEAPU8[HEAP32[$1 + 8 >> 2] + 3 | 0])) {
       HEAP32[$1 >> 2] = ((HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] << 24 >> 24) + Math_imul(HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] << 24 >> 24, 10) | 0) - 528
      }
     }
    }
    if (HEAP32[$1 >> 2] >= 0) {
     if (HEAP32[$1 + 4 >> 2] == 4 & HEAP32[$1 >> 2] < 48) {
      HEAP8[$1 + 15 | 0] = HEAP32[$1 >> 2];
      break block5;
     }
    }
   }
   HEAP8[$1 + 15 | 0] = 255;
  }
  return HEAPU8[$1 + 15 | 0];
 }
 
 function jshGetPinString($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP8[$2 + 11 | 0] = $1;
  HEAP8[HEAP32[$2 + 12 >> 2]] = 0;
  block : {
   if (HEAPU8[$2 + 11 | 0] < 48) {
    HEAP8[HEAP32[$2 + 12 >> 2]] = 68;
    itostr_778(HEAPU8[$2 + 11 | 0], HEAP32[$2 + 12 >> 2] + 1 | 0, 10);
    break block;
   }
   strcpy(HEAP32[$2 + 12 >> 2], 138928);
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function itostr_778($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  itostr_extra(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], 1, HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jshGetPinFromVar($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block1 : {
   if (!(!(jsvIsString(HEAP32[$1 + 8 >> 2]) & 1) | HEAP8[HEAP32[$1 + 8 >> 2] + 5 | 0] << 24 >> 24)) {
    HEAP8[$1 + 15 | 0] = jshGetPinFromString(HEAP32[$1 + 8 >> 2]);
    break block1;
   }
   if (jsvIsInt(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP8[$1 + 15 | 0] = jsvGetInteger(HEAP32[$1 + 8 >> 2]);
    break block1;
   }
   HEAP8[$1 + 15 | 0] = 255;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAPU8[$1 + 15 | 0];
 }
 
 function jshGetPinFromVarAndUnLock($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP8[$1 + 11 | 0] = jshGetPinFromVar(HEAP32[$1 + 12 >> 2]);
  jsvUnLock(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return HEAPU8[$1 + 11 | 0];
 }
 
 function jshGetPinStateIsManual($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP8[$1 + 15 | 0] = $0;
  return HEAP32[(HEAPU8[$1 + 15 | 0] >>> 5 << 2) + 368564 >> 2] >>> HEAPU8[$1 + 15 | 0] & 1;
 }
 
 function jshSetPinStateIsManual($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP8[$2 + 14 | 0] = $1;
  $1 = (HEAPU8[$2 + 15 | 0] >>> 5 << 2) + 368564 | 0;
  if (HEAP8[$2 + 14 | 0] & 1) {
   $0 = 1 << HEAPU8[$2 + 15 | 0]
  } else {
   $0 = 0
  }
  HEAP32[$1 >> 2] = $0 | HEAP32[(HEAPU8[$2 + 15 | 0] >>> 5 << 2) + 368564 >> 2] & __wasm_rotl_i32(-2, HEAPU8[$2 + 15 | 0]);
 }
 
 function jshGetPinShouldStayWatched($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP8[$1 + 15 | 0] = $0;
  return HEAP32[(HEAPU8[$1 + 15 | 0] >>> 5 << 2) + 368572 >> 2] >>> HEAPU8[$1 + 15 | 0] & 1;
 }
 
 function jshSetPinShouldStayWatched($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP8[$2 + 14 | 0] = $1;
  $1 = (HEAPU8[$2 + 15 | 0] >>> 5 << 2) + 368572 | 0;
  if (HEAP8[$2 + 14 | 0] & 1) {
   $0 = 1 << HEAPU8[$2 + 15 | 0]
  } else {
   $0 = 0
  }
  HEAP32[$1 >> 2] = $0 | HEAP32[(HEAPU8[$2 + 15 | 0] >>> 5 << 2) + 368572 >> 2] & __wasm_rotl_i32(-2, HEAPU8[$2 + 15 | 0]);
 }
 
 function jshResetPinStateIsManual() {
  HEAP32[92141] = 0;
  HEAP32[92142] = 0;
  HEAP32[92143] = 0;
  HEAP32[92144] = 0;
 }
 
 function jshPinInput($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  HEAP8[$1 + 14 | 0] = 0;
  block : {
   if (jshIsPinValid(HEAPU8[$1 + 15 | 0]) & 1) {
    if (!(jshGetPinStateIsManual(HEAPU8[$1 + 15 | 0]) & 1)) {
     jshPinSetState(HEAPU8[$1 + 15 | 0], 4)
    }
    HEAP8[$1 + 14 | 0] = jshPinGetValue(HEAPU8[$1 + 15 | 0]) & 1;
    break block;
   }
   jsExceptionHere(1, 135419, 0);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP8[$1 + 14 | 0] & 1;
 }
 
 function jshPinOutput($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP8[$2 + 14 | 0] = $1;
  block : {
   if (jshIsPinValid(HEAPU8[$2 + 15 | 0]) & 1) {
    jshPinSetValue(HEAPU8[$2 + 15 | 0], HEAP8[$2 + 14 | 0] & 1);
    if (!(jshGetPinStateIsManual(HEAPU8[$2 + 15 | 0]) & 1)) {
     jshPinSetState(HEAPU8[$2 + 15 | 0], 1)
    }
    break block;
   }
   jsExceptionHere(1, 135419, 0);
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jshPinFunctionToString($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  HEAP16[$4 + 46 >> 1] = $0;
  HEAP32[$4 + 40 >> 2] = $1;
  HEAP32[$4 + 36 >> 2] = $2;
  HEAP32[$4 + 32 >> 2] = $3;
  HEAP32[$4 + 28 >> 2] = 148266;
  HEAP16[$4 + 26 >> 1] = HEAPU16[$4 + 46 >> 1] & 61440;
  HEAP16[$4 + 24 >> 1] = 0;
  HEAP32[$4 + 20 >> 2] = 0;
  HEAP8[HEAP32[$4 + 36 >> 2]] = 0;
  block3 : {
   if (!((HEAPU16[$4 + 46 >> 1] & 4080) >>> 0 < 768 | (HEAPU16[$4 + 46 >> 1] & 4080) >>> 0 > 848)) {
    HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 40 >> 2] & 16 ? 135856 : 140756;
    HEAP16[$4 + 24 >> 1] = 768;
    block1 : {
     if (!HEAPU16[$4 + 26 >> 1]) {
      HEAP32[$4 + 20 >> 2] = 140694;
      break block1;
     }
     block2 : {
      if (HEAPU16[$4 + 26 >> 1] == 4096) {
       HEAP32[$4 + 20 >> 2] = 140610;
       break block2;
      }
      if (HEAPU16[$4 + 26 >> 1] == 8192) {
       HEAP32[$4 + 20 >> 2] = 141096
      }
     }
    }
    break block3;
   }
   block7 : {
    if (!((HEAPU16[$4 + 46 >> 1] & 4080) >>> 0 < 512 | (HEAPU16[$4 + 46 >> 1] & 4080) >>> 0 > 544)) {
     HEAP32[$4 + 28 >> 2] = 141196;
     HEAP16[$4 + 24 >> 1] = 512;
     block5 : {
      if (!HEAPU16[$4 + 26 >> 1]) {
       HEAP32[$4 + 20 >> 2] = 140923;
       break block5;
      }
      block6 : {
       if (HEAPU16[$4 + 26 >> 1] == 4096) {
        HEAP32[$4 + 20 >> 2] = 141103;
        break block6;
       }
       if (HEAPU16[$4 + 26 >> 1] == 8192) {
        HEAP32[$4 + 20 >> 2] = 141086
       }
      }
     }
     break block7;
    }
    block10 : {
     if (!((HEAPU16[$4 + 46 >> 1] & 4080) >>> 0 < 640 | (HEAPU16[$4 + 46 >> 1] & 4080) >>> 0 > 688)) {
      HEAP32[$4 + 28 >> 2] = 141317;
      HEAP16[$4 + 24 >> 1] = 640;
      block9 : {
       if (!HEAPU16[$4 + 26 >> 1]) {
        HEAP32[$4 + 20 >> 2] = 141047;
        break block9;
       }
       if (HEAPU16[$4 + 26 >> 1] == 4096) {
        HEAP32[$4 + 20 >> 2] = 141394
       }
      }
      break block10;
     }
     block12 : {
      if ((HEAPU16[$4 + 46 >> 1] & 4080) == 384) {
       HEAP32[$4 + 28 >> 2] = 141313;
       HEAP16[$4 + 24 >> 1] = 384;
       block11 : {
        if (!HEAPU16[$4 + 26 >> 1]) {
         HEAP32[$4 + 20 >> 2] = 142190;
         break block11;
        }
        if (HEAPU16[$4 + 26 >> 1] == 4096) {
         HEAP32[$4 + 20 >> 2] = 142122
        }
       }
       break block12;
      }
      if (!((HEAPU16[$4 + 46 >> 1] & 4080) >>> 0 < 16 | (HEAPU16[$4 + 46 >> 1] & 4080) >>> 0 > 288)) {
       HEAP32[$4 + 28 >> 2] = 140970;
       HEAP16[$4 + 24 >> 1] = 16;
       HEAP32[$4 + 20 >> 2] = $4 + 15;
       HEAP8[$4 + 15 | 0] = 67;
       HEAP8[$4 + 16 | 0] = 72;
       HEAP8[$4 + 17 | 0] = ((HEAPU16[$4 + 26 >> 1] & 28672) >>> 12 | 0) + 49;
       block14 : {
        if (HEAPU16[$4 + 26 >> 1] & 32768) {
         HEAP8[$4 + 18 | 0] = 78;
         HEAP8[$4 + 19 | 0] = 0;
         break block14;
        }
        HEAP8[$4 + 18 | 0] = 0;
       }
      }
     }
    }
   }
  }
  HEAP32[$4 + 8 >> 2] = ((HEAPU16[$4 + 46 >> 1] & 4080) - HEAPU16[$4 + 24 >> 1] >> 4) + 1;
  block15 : {
   if (!HEAP32[$4 + 28 >> 2]) {
    HEAP32[$4 >> 2] = HEAPU16[$4 + 46 >> 1];
    jsiConsolePrintf(147786, $4);
    break block15;
   }
   if (HEAP32[$4 + 40 >> 2] & 1) {
    strncat(HEAP32[$4 + 36 >> 2], HEAP32[$4 + 28 >> 2], HEAP32[$4 + 32 >> 2] - 1 | 0)
   }
   if (HEAP32[$4 + 40 >> 2] & 2) {
    itostr_778(HEAP32[$4 + 8 >> 2], HEAP32[$4 + 36 >> 2] + strlen(HEAP32[$4 + 36 >> 2]) | 0, 10)
   }
   if (HEAP32[$4 + 40 >> 2] & 4) {
    strncat(HEAP32[$4 + 36 >> 2], 147034, HEAP32[$4 + 32 >> 2] - (strlen(HEAP32[$4 + 36 >> 2]) + 1 | 0) | 0)
   }
   if (!HEAP32[$4 + 20 >> 2] | !(HEAP32[$4 + 40 >> 2] & 8)) {
    break block15
   }
   strncat(HEAP32[$4 + 36 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 32 >> 2] - (strlen(HEAP32[$4 + 36 >> 2]) + 1 | 0) | 0);
  }
  __stack_pointer = $4 + 48 | 0;
 }
 
 function jshGetDeviceFor($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP16[$3 + 12 >> 1] = $0;
  HEAP16[$3 + 10 >> 1] = $1;
  HEAP8[$3 + 9 | 0] = $2;
  block : {
   if (!(jshIsPinValid(HEAPU8[$3 + 9 | 0]) & 1)) {
    HEAP16[$3 + 14 >> 1] = 0;
    break block;
   }
   HEAP32[$3 + 4 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 4 >> 2] < 0) {
     $0 = (Math_imul(HEAPU8[$3 + 9 | 0], 3) + 182067 | 0) + (HEAP32[$3 + 4 >> 2] << 1) | 0;
     HEAP16[$3 + 2 >> 1] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
     if (!(HEAPU16[$3 + 10 >> 1] < (HEAPU16[$3 + 2 >> 1] & 4080) | HEAPU16[$3 + 12 >> 1] > (HEAPU16[$3 + 2 >> 1] & 4080))) {
      HEAP16[$3 + 14 >> 1] = HEAPU16[$3 + 2 >> 1];
      break block;
     }
     HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
     continue;
    }
    break;
   };
   HEAP16[$3 + 14 >> 1] = 0;
  }
  __stack_pointer = $3 + 16 | 0;
  return HEAPU16[$3 + 14 >> 1];
 }
 
 function jshGetDeviceObjectFor($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP16[$3 + 42 >> 1] = $0;
  HEAP16[$3 + 40 >> 1] = $1;
  HEAP8[$3 + 39 | 0] = $2;
  HEAP16[$3 + 36 >> 1] = jshGetDeviceFor(HEAPU16[$3 + 42 >> 1], HEAPU16[$3 + 40 >> 1], HEAPU8[$3 + 39 | 0]);
  block : {
   if (!HEAPU16[$3 + 36 >> 1]) {
    HEAP32[$3 + 44 >> 2] = 0;
    break block;
   }
   jshPinFunctionToString(HEAPU16[$3 + 36 >> 1], 19, $3 + 16 | 0, 16);
   HEAP32[$3 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[92130], $3 + 16 | 0);
   if (HEAP32[$3 + 12 >> 2]) {
    HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 12 >> 2];
    break block;
   }
   HEAP32[$3 + 44 >> 2] = jswFindBuiltInFunction(0, $3 + 16 | 0);
  }
  __stack_pointer = $3 + 48 | 0;
  return HEAP32[$3 + 44 >> 2];
 }
 
 function jshGetPinStateString($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 11 | 0] = $0;
  HEAP8[$1 + 10 | 0] = HEAPU8[$1 + 11 | 0] & 15;
  HEAP32[$1 + 4 >> 2] = 0;
  block9 : {
   block8 : {
    switch (HEAPU8[$1 + 10 | 0] - 1 | 0) {
    case 6:
     HEAP32[$1 + 4 >> 2] = 136449;
     break block9;
    case 3:
     HEAP32[$1 + 4 >> 2] = 124373;
     break block9;
    case 4:
     HEAP32[$1 + 4 >> 2] = 128611;
     break block9;
    case 5:
     HEAP32[$1 + 4 >> 2] = 135046;
     break block9;
    case 0:
     HEAP32[$1 + 4 >> 2] = 124366;
     break block9;
    case 1:
     HEAP32[$1 + 4 >> 2] = 135440;
     break block9;
    case 2:
     HEAP32[$1 + 4 >> 2] = 128624;
     break block9;
    case 7:
     HEAP32[$1 + 4 >> 2] = 124363;
     break block9;
    case 8:
     break block8;
    default:
     break block9;
    };
   }
   HEAP32[$1 + 4 >> 2] = 135437;
  }
  block10 : {
   if (HEAP32[$1 + 4 >> 2]) {
    HEAP32[$1 + 12 >> 2] = jsvNewFromString(HEAP32[$1 + 4 >> 2]);
    break block10;
   }
   HEAP32[$1 + 12 >> 2] = 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsiGetDeviceFromClass($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block1 : {
   if (!(!HEAP32[$1 + 8 >> 2] | HEAPU8[HEAP32[$1 + 8 >> 2]] != 68 | (HEAPU8[HEAP32[$1 + 8 >> 2] + 1 | 0] != 69 | HEAPU8[HEAP32[$1 + 8 >> 2] + 2 | 0] != 86))) {
    HEAP8[$1 + 15 | 0] = HEAPU8[HEAP32[$1 + 8 >> 2] + 3 | 0];
    break block1;
   }
   HEAP8[$1 + 15 | 0] = 0;
  }
  return HEAPU8[$1 + 15 | 0];
 }
 
 function jsiGetClassNameFromDevice($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 11 | 0] = $0;
  HEAP32[$1 + 4 >> 2] = jshGetDeviceString(HEAPU8[$1 + 11 | 0]);
  block : {
   if (!HEAPU8[HEAP32[$1 + 4 >> 2]]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvFindChildFromString(HEAP32[92130], HEAP32[$1 + 4 >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsiEcho() {
  return !(HEAPU16[184294] & 3);
 }
 
 function jsiPasswordProtected() {
  return (HEAPU16[184294] & 1024) != 0;
 }
 
 function jsiGetPreferredConsoleDevice() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP8[$0 + 15 | 0] = 21;
  if (!(jshIsDeviceInitialised(HEAPU8[$0 + 15 | 0]) & 1)) {
   HEAP8[$0 + 15 | 0] = 20
  }
  if (jshIsUSBSERIALConnected() & 1) {
   HEAP8[$0 + 15 | 0] = 21
  }
  __stack_pointer = $0 + 16 | 0;
  return HEAPU8[$0 + 15 | 0];
 }
 
 function jsiSetConsoleDevice($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP8[$2 + 47 | 0] = $0;
  HEAP8[$2 + 46 | 0] = $1;
  block : {
   if (HEAP8[$2 + 46 | 0] & 1) {
    HEAP16[184294] = HEAPU16[184294] | 256;
    break block;
   }
   HEAP16[184294] = HEAPU16[184294] & -257;
  }
  block1 : {
   if (HEAPU8[$2 + 47 | 0] == HEAPU8[2e5]) {
    break block1
   }
   block2 : {
    if (HEAPU8[$2 + 47 | 0] < 22 | HEAPU8[$2 + 47 | 0] > 22) {
     break block2
    }
    if (jshIsDeviceInitialised(HEAPU8[$2 + 47 | 0]) & 1) {
     break block2
    }
    jshUSARTInitInfo($2 + 33 | 0);
    jshUSARTSetup(HEAPU8[$2 + 47 | 0], $2 + 33 | 0);
   }
   HEAP8[$2 + 32 | 0] = jsiEcho() & 1;
   if (HEAPU8[2e5] == 19) {
    HEAP8[$2 + 32 | 0] = 0;
    jshTransmitMove(19, HEAPU8[$2 + 47 | 0]);
    jshUSARTKick(HEAPU8[$2 + 47 | 0]);
   }
   if (HEAP8[$2 + 32 | 0] & 1) {
    jsiConsoleRemoveInputLine();
    HEAP32[$2 + 16 >> 2] = jshGetDeviceString(HEAPU8[$2 + 47 | 0]);
    jsiConsolePrintf(147364, $2 + 16 | 0);
   }
   HEAP8[$2 + 31 | 0] = HEAPU8[2e5];
   HEAP8[2e5] = HEAPU8[$2 + 47 | 0];
   if (!(HEAP8[$2 + 32 | 0] & 1)) {
    break block1
   }
   HEAP32[$2 >> 2] = jshGetDeviceString(HEAPU8[$2 + 31 | 0]);
   jsiConsolePrintf(147371, $2);
  }
  __stack_pointer = $2 + 48 | 0;
 }
 
 function jsiConsoleRemoveInputLine() {
  if (!(HEAP8[368596] & 1)) {
   HEAP8[368596] = 1;
   if (!(!(jsiEcho() & 1) | !HEAP32[92148])) {
    jsiMoveCursorChar(HEAP32[92148], HEAP32[92150], 0);
    jsiConsolePrintChar(13);
    jsiConsoleEraseAfterCursor();
   }
  }
 }
 
 function jsiConsolePrintf($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  vcbprintf(558, 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsiConsolePrintString($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  while (1) {
   if (HEAPU8[HEAP32[$1 + 12 >> 2]]) {
    if (HEAPU8[HEAP32[$1 + 12 >> 2]] == 10) {
     jsiConsolePrintChar(13)
    }
    $0 = HEAP32[$1 + 12 >> 2];
    HEAP32[$1 + 12 >> 2] = $0 + 1;
    jsiConsolePrintChar(HEAP8[$0 | 0] << 24 >> 24);
    continue;
   }
   break;
  };
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsiGetConsoleDevice() {
  return HEAPU8[2e5];
 }
 
 function jsiConsolePrintChar($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  jshTransmit(HEAPU8[2e5], HEAPU8[$1 + 15 | 0]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function vcbprintf_callback_jsiConsolePrintString($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  jsiConsolePrintString(HEAP32[$2 + 12 >> 2]);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsiConsolePrintStringVarUntilEOL($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer + -64 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 60 >> 2] = $0;
  HEAP32[$4 + 56 >> 2] = $1;
  HEAP32[$4 + 52 >> 2] = $2;
  HEAP8[$4 + 51 | 0] = $3;
  HEAP32[$4 + 44 >> 2] = 0;
  jsvStringIteratorNew($4 + 8 | 0, HEAP32[$4 + 60 >> 2], HEAP32[$4 + 56 >> 2]);
  while (1) {
   $0 = 0;
   if (jsvStringIteratorHasChar_805($4 + 8 | 0) & 1) {
    $0 = HEAPU32[$4 + 44 >> 2] < HEAPU32[$4 + 52 >> 2]
   }
   block : {
    if (!$0) {
     break block
    }
    HEAP8[$4 + 7 | 0] = jsvStringIteratorGetCharAndNext($4 + 8 | 0);
    if (HEAPU8[$4 + 7 | 0] == 10) {
     break block
    }
    jsiConsolePrintChar(HEAP8[$4 + 7 | 0] << 24 >> 24);
    HEAP32[$4 + 44 >> 2] = HEAP32[$4 + 44 >> 2] + 1;
    continue;
   }
   break;
  };
  jsvStringIteratorFree_806($4 + 8 | 0);
  if (HEAP8[$4 + 51 | 0] & 1) {
   jsiConsolePrintChar(32);
   HEAP32[$4 + 44 >> 2] = HEAP32[$4 + 44 >> 2] + 1;
   while (1) {
    $0 = HEAP32[$4 + 44 >> 2];
    HEAP32[$4 + 44 >> 2] = $0 - 1;
    if ($0) {
     jsiConsolePrintChar(8);
     continue;
    }
    break;
   };
  }
  __stack_pointer = $4 - -64 | 0;
 }
 
 function jsvStringIteratorHasChar_805($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
 }
 
 function jsvStringIteratorFree_806($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsiConsolePrintStringVarWithNewLineChar($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer + -64 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 60 >> 2] = $0;
  HEAP32[$3 + 56 >> 2] = $1;
  HEAP8[$3 + 55 | 0] = $2;
  jsvStringIteratorNew($3 + 16 | 0, HEAP32[$3 + 60 >> 2], HEAP32[$3 + 56 >> 2]);
  while (1) {
   if (jsvStringIteratorHasChar_805($3 + 16 | 0) & 1) {
    HEAP8[$3 + 15 | 0] = jsvStringIteratorGetCharAndNext($3 + 16 | 0);
    if (HEAPU8[$3 + 15 | 0] == 10) {
     jsiConsolePrintChar(13)
    }
    jsiConsolePrintChar(HEAP8[$3 + 15 | 0] << 24 >> 24);
    if (!(!HEAPU8[$3 + 55 | 0] | HEAPU8[$3 + 15 | 0] != 10)) {
     jsiConsolePrintChar(HEAP8[$3 + 55 | 0] << 24 >> 24)
    }
    continue;
   }
   break;
  };
  jsvStringIteratorFree_806($3 + 16 | 0);
  __stack_pointer = $3 - -64 | 0;
 }
 
 function jsiConsolePrintStringVar($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsiConsolePrintStringVarWithNewLineChar(HEAP32[$1 + 12 >> 2], 0, 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsiConsoleEraseAfterCursor() {
  jsiConsolePrintString(141099);
 }
 
 function jsiMoveCursor($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
  while (1) {
   if (HEAPU32[$4 + 12 >> 2] < HEAPU32[$4 + 4 >> 2]) {
    jsiConsolePrintString(141309);
    HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] + 1;
    continue;
   }
   break;
  };
  while (1) {
   if (HEAPU32[$4 + 12 >> 2] > HEAPU32[$4 + 4 >> 2]) {
    jsiConsolePrintString(141296);
    HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] - 1;
    continue;
   }
   break;
  };
  while (1) {
   if (HEAPU32[$4 + 8 >> 2] < HEAPU32[$4 >> 2]) {
    jsiConsolePrintString(141336);
    HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] + 1;
    continue;
   }
   break;
  };
  while (1) {
   if (HEAPU32[$4 + 8 >> 2] > HEAPU32[$4 >> 2]) {
    jsiConsolePrintString(141390);
    HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] - 1;
    continue;
   }
   break;
  };
  __stack_pointer = $4 + 16 | 0;
 }
 
 function jsiMoveCursorChar($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  if (HEAP32[$3 + 24 >> 2] != HEAP32[$3 + 20 >> 2]) {
   jsvGetLineAndCol(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], $3 + 12 | 0, $3 + 16 | 0);
   jsvGetLineAndCol(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 20 >> 2], $3 + 4 | 0, $3 + 8 | 0);
   jsiMoveCursor(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
  }
  __stack_pointer = $3 + 32 | 0;
 }
 
 function jsiConsoleReturnInputLine() {
  if (HEAP8[368596] & 1) {
   HEAP8[368596] = 0;
   if (jsiEcho() & 1) {
    if (jsiPasswordProtected() & 1) {
     jsiConsolePrintString(138099)
    }
    jsiConsolePrintChar(62);
    jsiConsolePrintStringVarWithNewLineChar(HEAP32[92148], 0, 58);
    jsiMoveCursorChar(HEAP32[92148], jsvGetStringLength(HEAP32[92148]), HEAP32[92150]);
   }
  }
 }
 
 function jsiClearInputLine($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  if (!(jsvIsEmptyString(HEAP32[92148]) & 1)) {
   if (HEAP8[$1 + 15 | 0] & 1) {
    jsiConsoleRemoveInputLine()
   }
   jsiInputLineCursorMoved();
   jsvUnLock(HEAP32[92148]);
   HEAP32[92148] = jsvNewFromEmptyString_815();
   HEAP32[92150] = 0;
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsiInputLineCursorMoved() {
  if (HEAP32[92156]) {
   jsvStringIteratorFree_806(368612);
   HEAP32[92156] = 0;
  }
  HEAP32[50001] = -1;
 }
 
 function jsvNewFromEmptyString_815() {
  return jsvNewWithFlags(28);
 }
 
 function jsiSetBusy($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP8[$2 + 14 | 0] = $1;
  block : {
   if (HEAP8[$2 + 14 | 0] & 1) {
    HEAP8[368608] = HEAPU8[$2 + 15 | 0] | HEAPU8[368608];
    break block;
   }
   HEAP8[368608] = HEAPU8[368608] & ((HEAPU8[$2 + 15 | 0] ^ -1) & 255);
  }
  if (HEAPU8[200001] != 255) {
   jshPinOutput(HEAPU8[200001], HEAPU8[368608] != 0)
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsiSoftInit($0) {
  var $1 = 0;
  $1 = __stack_pointer - 48 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 47 | 0] = $0;
  HEAP8[368518] = 0;
  HEAP8[368607] = 0;
  HEAP32[92145] = jsvNewEmptyArray();
  HEAP32[92148] = jsvNewFromEmptyString_815();
  HEAP32[92150] = 0;
  HEAP16[184305] = 0;
  jsiInputLineCursorMoved();
  HEAP32[92156] = 0;
  jsfSetFlag(1, 0);
  HEAP8[200001] = 255;
  HEAP8[200002] = 255;
  HEAP16[184292] = _jsiInitNamedArray(127099);
  HEAP16[184293] = _jsiInitNamedArray(127429);
  HEAP32[92162] = jshGetSystemTime();
  HEAP32[92163] = i64toi32_i32$HIGH_BITS;
  HEAP32[$1 + 40 >> 2] = jsvObjectGetChildIfExists(HEAP32[92131], 127298);
  if (HEAP32[$1 + 40 >> 2]) {
   HEAP8[200496] = jsvGetIntegerAndUnLock(HEAP32[$1 + 40 >> 2]);
   jsvObjectRemoveChild(HEAP32[92131], 127298);
  }
  jswInit();
  jsfLoadBootCodeFromFlash(HEAP8[$1 + 47 | 0] & 1);
  HEAP32[$1 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[92131], 124861);
  if (HEAP32[$1 + 36 >> 2]) {
   jsvUnLock2(jspEvaluateVar(HEAP32[$1 + 36 >> 2], 0, 137964, 0), HEAP32[$1 + 36 >> 2]);
   jsiCheckErrors(0);
   jsvObjectRemoveChild(HEAP32[92131], 124861);
  }
  if (HEAPU16[184293]) {
   HEAP32[$1 + 32 >> 2] = jsvLock(HEAPU16[184293]);
   jsvObjectIteratorNew($1 + 28 | 0, HEAP32[$1 + 32 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_820($1 + 28 | 0) & 1) {
     HEAP32[$1 + 24 >> 2] = jsvObjectIteratorGetValue_821($1 + 28 | 0);
     HEAP32[$1 + 20 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 24 >> 2], 135427);
     HEAP8[$1 + 19 | 0] = jsvObjectGetBoolChild(HEAP32[$1 + 24 >> 2], 139029) & 1;
     jshPinWatch(jshGetPinFromVar(HEAP32[$1 + 20 >> 2]) & 255, 1, HEAP8[$1 + 19 | 0] & 1);
     jsvUnLock2(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 24 >> 2]);
     jsvObjectIteratorNext($1 + 28 | 0);
     continue;
    }
    break;
   };
   jsvObjectIteratorFree_822($1 + 28 | 0);
   jsvUnLock(HEAP32[$1 + 32 >> 2]);
  }
  jsiExecuteEventCallbackOn(141294, 124858, 0, 0);
  jsiCheckErrors(0);
  HEAP32[$1 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[92130], 124866);
  if (HEAP32[$1 + 12 >> 2]) {
   if (jsiEcho() & 1) {
    jsiConsolePrintString(148162)
   }
   jsiExecuteEventCallback(0, HEAP32[$1 + 12 >> 2], 0, 0);
   jsiCheckErrors(0);
   jsvUnLock(HEAP32[$1 + 12 >> 2]);
  }
  __stack_pointer = $1 + 48 | 0;
 }
 
 function _jsiInitNamedArray($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = jsvObjectGetChild(HEAP32[92131], HEAP32[$1 + 12 >> 2], 3);
  HEAP16[$1 + 6 >> 1] = 0;
  if (HEAP32[$1 + 8 >> 2]) {
   HEAP16[$1 + 6 >> 1] = jsvGetRef(jsvRef(HEAP32[$1 + 8 >> 2]))
  }
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return HEAPU16[$1 + 6 >> 1];
 }
 
 function jsiCheckErrors($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = __stack_pointer - 176 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 175 | 0] = $0;
  if (HEAPU16[184294] & 32768) {
   jspSetInterrupted(0);
   HEAP16[184294] = HEAPU16[184294] & -32769;
   jsiConsoleRemoveInputLine();
   jsiConsolePrintString(148006);
  }
  HEAP8[$1 + 174 | 0] = 0;
  HEAP8[$1 + 173 | 0] = (HEAP32[92138] & 32) != 0;
  HEAP32[$1 + 168 >> 2] = jspGetException();
  if (HEAP8[$1 + 173 | 0] & 1) {
   if (jsiExecuteEventCallbackOn(127010, 135100, 1, $1 + 168 | 0) & 1) {
    jsvUnLock(HEAP32[$1 + 168 >> 2]);
    HEAP32[$1 + 168 >> 2] = jspGetException();
    if (!HEAP32[$1 + 168 >> 2]) {
     HEAP8[$1 + 173 | 0] = 0
    }
   }
  }
  if (HEAP8[$1 + 173 | 0] & 1) {
   jsiConsoleRemoveInputLine();
   HEAP32[$1 + 80 >> 2] = HEAP32[$1 + 168 >> 2];
   jsiConsolePrintf(147056, $1 + 80 | 0);
   HEAP8[$1 + 174 | 0] = 1;
   HEAP32[$1 + 164 >> 2] = 0;
   block : {
    if (jsfGetFlag(32) & 1) {
     break block
    }
    jsfNameFromString($1 + 136 | 0, 140902);
    HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 160 >> 2];
    $2 = HEAP32[$1 + 156 >> 2];
    $0 = HEAP32[$1 + 152 >> 2];
    HEAP32[$1 + 64 >> 2] = $0;
    HEAP32[$1 + 68 >> 2] = $2;
    $0 = HEAP32[$1 + 148 >> 2];
    $2 = HEAP32[$1 + 144 >> 2];
    HEAP32[$1 + 56 >> 2] = $2;
    HEAP32[$1 + 60 >> 2] = $0;
    $2 = HEAP32[$1 + 140 >> 2];
    $0 = HEAP32[$1 + 136 >> 2];
    HEAP32[$1 + 48 >> 2] = $0;
    HEAP32[$1 + 52 >> 2] = $2;
    if (jsfFindFile($1 + 48 | 0, 0)) {
     break block
    }
    HEAP32[$1 + 164 >> 2] = jsvAsString(HEAP32[$1 + 168 >> 2]);
   }
   if (jsvIsObject(HEAP32[$1 + 168 >> 2]) & 1) {
    HEAP32[$1 + 132 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 168 >> 2], 135901);
    if (HEAP32[$1 + 132 >> 2]) {
     jsiConsolePrintStringVar(HEAP32[$1 + 132 >> 2]);
     if (HEAP32[$1 + 164 >> 2]) {
      jsvAppendCharacter_825(HEAP32[$1 + 164 >> 2], 10);
      jsvAppendStringVarComplete(HEAP32[$1 + 164 >> 2], HEAP32[$1 + 132 >> 2]);
     }
     jsvUnLock(HEAP32[$1 + 132 >> 2]);
    }
   }
   if (HEAP32[$1 + 164 >> 2]) {
    jsfNameFromString($1 + 104 | 0, 140902);
    $3 = HEAP32[$1 + 164 >> 2];
    HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 128 >> 2];
    $0 = HEAP32[$1 + 124 >> 2];
    $2 = HEAP32[$1 + 120 >> 2];
    HEAP32[$1 + 32 >> 2] = $2;
    HEAP32[$1 + 36 >> 2] = $0;
    $2 = HEAP32[$1 + 116 >> 2];
    $0 = HEAP32[$1 + 112 >> 2];
    HEAP32[$1 + 24 >> 2] = $0;
    HEAP32[$1 + 28 >> 2] = $2;
    $0 = HEAP32[$1 + 108 >> 2];
    $2 = HEAP32[$1 + 104 >> 2];
    HEAP32[$1 + 16 >> 2] = $2;
    HEAP32[$1 + 20 >> 2] = $0;
    jsfWriteFile($1 + 16 | 0, $3, 0, 0, 0);
    jsvUnLock(HEAP32[$1 + 164 >> 2]);
    $0 = $1;
   } else {
    $0 = $2
   }
  }
  jsvUnLock(HEAP32[$1 + 168 >> 2]);
  if (jspIsInterrupted() & 1) {
   jsiConsoleRemoveInputLine();
   jsiConsolePrintString(147752);
   jspSetInterrupted(0);
   HEAP8[$1 + 174 | 0] = 1;
  }
  HEAP32[$1 + 100 >> 2] = jspGetStackTrace();
  if (HEAP32[$1 + 100 >> 2]) {
   if (HEAP8[$1 + 174 | 0] & 1) {
    jsiConsolePrintStringVar(HEAP32[$1 + 100 >> 2])
   }
   jsvUnLock(HEAP32[$1 + 100 >> 2]);
  }
  if (jspHasError() & 1) {
   HEAP32[92138] = HEAP32[92138] & -113
  }
  if (HEAPU8[368607] != HEAPU8[368518]) {
   HEAP8[$1 + 99 | 0] = HEAPU8[368518] & (HEAPU8[368607] ^ -1);
   if (HEAPU8[$1 + 99 | 0] & -9) {
    HEAP32[$1 + 92 >> 2] = jswrap_espruino_getErrorFlagArray(HEAPU8[$1 + 99 | 0]);
    jsiExecuteEventCallbackOn(141294, 136840, 1, $1 + 92 | 0);
    if (HEAP32[$1 + 92 >> 2]) {
     jsiConsoleRemoveInputLine();
     HEAP32[$1 >> 2] = HEAP32[$1 + 92 >> 2];
     jsiConsolePrintf(147069, $1);
     jsvUnLock(HEAP32[$1 + 92 >> 2]);
    }
   }
   HEAP8[368607] = HEAPU8[368518];
  }
  __stack_pointer = $1 + 176 | 0;
 }
 
 function jsvObjectIteratorHasValue_820($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
 }
 
 function jsvObjectIteratorGetValue_821($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvObjectIteratorFree_822($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsiExecuteEventCallbackOn($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  HEAP32[$4 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[92130], HEAP32[$4 + 28 >> 2]);
  HEAP8[$4 + 11 | 0] = jsiExecuteEventCallbackName(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]) & 1;
  jsvUnLock(HEAP32[$4 + 12 >> 2]);
  __stack_pointer = $4 + 32 | 0;
  return HEAP8[$4 + 11 | 0] & 1;
 }
 
 function jsiExecuteEventCallback($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 24 >> 2] = $0;
  HEAP32[$4 + 20 >> 2] = $1;
  HEAP32[$4 + 16 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[$4 + 8 >> 2] = jsvSkipName(HEAP32[$4 + 20 >> 2]);
  block : {
   if (!HEAP32[$4 + 8 >> 2]) {
    HEAP8[$4 + 31 | 0] = 0;
    break block;
   }
   HEAP16[184294] = HEAPU16[184294] | 8192;
   HEAP8[$4 + 7 | 0] = jsiExecuteEventCallbackInner(HEAP32[$4 + 24 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 16 >> 2], HEAP32[$4 + 12 >> 2]) & 1;
   jsvUnLock(HEAP32[$4 + 8 >> 2]);
   HEAP16[184294] = HEAPU16[184294] & -24577;
   block1 : {
    if (HEAP8[$4 + 7 | 0] & 1) {
     if (!(jspIsInterrupted() & 1)) {
      break block1
     }
    }
    HEAP16[184294] = HEAPU16[184294] | 32768;
    HEAP8[$4 + 31 | 0] = 0;
    break block;
   }
   HEAP8[$4 + 31 | 0] = 1;
  }
  __stack_pointer = $4 + 32 | 0;
  return HEAP8[$4 + 31 | 0] & 1;
 }
 
 function jsvAppendCharacter_825($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP8[$2 + 11 | 0] = $1;
  jsvAppendStringBuf(HEAP32[$2 + 12 >> 2], $2 + 11 | 0, 1);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsiExecuteEventCallbackName($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  HEAP8[$4 + 15 | 0] = 0;
  if (jsvHasChildren(HEAP32[$4 + 28 >> 2]) & 1) {
   HEAP32[$4 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2]);
   if (HEAP32[$4 + 8 >> 2]) {
    jsiExecuteEventCallback(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
    HEAP8[$4 + 15 | 0] = 1;
   }
   jsvUnLock(HEAP32[$4 + 8 >> 2]);
  }
  __stack_pointer = $4 + 32 | 0;
  return HEAP8[$4 + 15 | 0] & 1;
 }
 
 function jsiExecuteEventCallbackInner($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 24 >> 2] = $0;
  HEAP32[$4 + 20 >> 2] = $1;
  HEAP32[$4 + 16 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  block : {
   if (!HEAP32[$4 + 20 >> 2]) {
    HEAP8[$4 + 31 | 0] = 0;
    break block;
   }
   HEAP8[$4 + 11 | 0] = 1;
   block2 : {
    if (jsvIsArray(HEAP32[$4 + 20 >> 2]) & 1) {
     jsvObjectIteratorNew($4 + 4 | 0, HEAP32[$4 + 20 >> 2]);
     while (1) {
      $0 = 0;
      block1 : {
       if (!(HEAP8[$4 + 11 | 0] & 1)) {
        break block1
       }
       $0 = 0;
       if (!(jsvObjectIteratorHasValue_820($4 + 4 | 0) & 1)) {
        break block1
       }
       $0 = (HEAPU16[184294] & 16384) != 0 ^ -1;
      }
      if ($0 & 1) {
       HEAP32[$4 >> 2] = jsvObjectIteratorGetValue_821($4 + 4 | 0);
       jsvObjectIteratorNext($4 + 4 | 0);
       HEAP8[$4 + 11 | 0] = jsiExecuteEventCallbackInner(HEAP32[$4 + 24 >> 2], HEAP32[$4 >> 2], HEAP32[$4 + 16 >> 2], HEAP32[$4 + 12 >> 2]) & 1 & (HEAP8[$4 + 11 | 0] & 1);
       jsvUnLock(HEAP32[$4 >> 2]);
       continue;
      }
      break;
     };
     jsvObjectIteratorFree_822($4 + 4 | 0);
     break block2;
    }
    block3 : {
     if (jsvIsFunction(HEAP32[$4 + 20 >> 2]) & 1) {
      jsvUnLock(jspExecuteFunction(HEAP32[$4 + 20 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 16 >> 2], HEAP32[$4 + 12 >> 2]));
      break block3;
     }
     block4 : {
      if (jsvIsString(HEAP32[$4 + 20 >> 2]) & 1) {
       jsvUnLock(jspEvaluateVar(HEAP32[$4 + 20 >> 2], 0, 124697, 0));
       break block4;
      }
      jsError(137183, 0);
     }
    }
   }
   HEAP8[$4 + 31 | 0] = HEAP8[$4 + 11 | 0] & 1;
  }
  __stack_pointer = $4 + 32 | 0;
  return HEAP8[$4 + 31 | 0] & 1;
 }
 
 function jsiDumpJSON($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  HEAP32[$4 + 12 >> 2] = jsvGetIndexOf(HEAP32[92130], HEAP32[$4 + 20 >> 2], 1);
  block1 : {
   block : {
    if (!HEAP32[$4 + 12 >> 2]) {
     break block
    }
    if (!(jsvIsString(HEAP32[$4 + 12 >> 2]) & 1) | HEAP32[$4 + 12 >> 2] == HEAP32[$4 + 16 >> 2]) {
     break block
    }
    $0 = HEAP32[$4 + 28 >> 2];
    $1 = HEAP32[$4 + 24 >> 2];
    HEAP32[$4 >> 2] = HEAP32[$4 + 12 >> 2];
    cbprintf($0, $1, 124350, $4);
    break block1;
   }
   jsfGetJSONWithCallback(HEAP32[$4 + 20 >> 2], 0, 37, 0, HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2]);
  }
  __stack_pointer = $4 + 32 | 0;
 }
 
 function jsiDumpObjectState($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer + -64 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 60 >> 2] = $0;
  HEAP32[$4 + 56 >> 2] = $1;
  HEAP32[$4 + 52 >> 2] = $2;
  HEAP32[$4 + 48 >> 2] = $3;
  HEAP32[$4 + 44 >> 2] = jsvGetInternalFunctionCheckerFor(HEAP32[$4 + 48 >> 2]);
  jsvObjectIteratorNew($4 + 40 | 0, HEAP32[$4 + 48 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_820($4 + 40 | 0) & 1) {
    HEAP32[$4 + 36 >> 2] = jsvObjectIteratorGetKey_830($4 + 40 | 0);
    HEAP32[$4 + 32 >> 2] = jsvObjectIteratorGetValue_821($4 + 40 | 0);
    block : {
     if (HEAP32[$4 + 44 >> 2]) {
      if (FUNCTION_TABLE[HEAP32[$4 + 44 >> 2]](HEAP32[$4 + 36 >> 2]) & 1) {
       break block
      }
     }
     block1 : {
      if (jsvIsStringEqual(HEAP32[$4 + 36 >> 2], 137493) & 1) {
       HEAP32[$4 + 28 >> 2] = jsvNewFromStringVarComplete(HEAP32[$4 + 52 >> 2]);
       if (HEAP32[$4 + 28 >> 2]) {
        jsvAppendString(HEAP32[$4 + 28 >> 2], 137492);
        jsiDumpObjectState(HEAP32[$4 + 60 >> 2], HEAP32[$4 + 56 >> 2], HEAP32[$4 + 28 >> 2], HEAP32[$4 + 32 >> 2]);
        jsvUnLock(HEAP32[$4 + 28 >> 2]);
       }
       break block1;
      }
      block2 : {
       if (jsvIsStringEqualOrStartsWith(HEAP32[$4 + 36 >> 2], 135410, 1) & 1) {
        if (jsvIsArray(HEAP32[$4 + 32 >> 2]) & 1) {
         jsvObjectIteratorNew($4 + 24 | 0, HEAP32[$4 + 32 >> 2]);
         while (1) {
          if (jsvObjectIteratorHasValue_820($4 + 24 | 0) & 1) {
           HEAP32[$4 + 20 >> 2] = jsvObjectIteratorGetValue_821($4 + 24 | 0);
           jsiDumpEvent(HEAP32[$4 + 60 >> 2], HEAP32[$4 + 56 >> 2], HEAP32[$4 + 52 >> 2], HEAP32[$4 + 36 >> 2], HEAP32[$4 + 20 >> 2]);
           jsvUnLock(HEAP32[$4 + 20 >> 2]);
           jsvObjectIteratorNext($4 + 24 | 0);
           continue;
          }
          break;
         };
         jsvObjectIteratorFree_822($4 + 24 | 0);
         break block2;
        }
        jsiDumpEvent(HEAP32[$4 + 60 >> 2], HEAP32[$4 + 56 >> 2], HEAP32[$4 + 52 >> 2], HEAP32[$4 + 36 >> 2], HEAP32[$4 + 32 >> 2]);
        break block2;
       }
       if (!(jsvIsNativeFunction(HEAP32[$4 + 32 >> 2]) & 1)) {
        $0 = HEAP32[$4 + 60 >> 2];
        $1 = HEAP32[$4 + 56 >> 2];
        $2 = HEAP32[$4 + 52 >> 2];
        HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 36 >> 2];
        HEAP32[$4 >> 2] = $2;
        cbprintf($0, $1, 146874, $4);
        jsiDumpJSON(HEAP32[$4 + 60 >> 2], HEAP32[$4 + 56 >> 2], HEAP32[$4 + 32 >> 2], 0);
        FUNCTION_TABLE[HEAP32[$4 + 60 >> 2]](147966, HEAP32[$4 + 56 >> 2]);
       }
      }
     }
    }
    jsvUnLock2(HEAP32[$4 + 32 >> 2], HEAP32[$4 + 36 >> 2]);
    jsvObjectIteratorNext($4 + 40 | 0);
    continue;
   }
   break;
  };
  jsvObjectIteratorFree_822($4 + 40 | 0);
  __stack_pointer = $4 - -64 | 0;
 }
 
 function jsvObjectIteratorGetKey_830($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsiDumpEvent($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 28 >> 2] = $0;
  HEAP32[$5 + 24 >> 2] = $1;
  HEAP32[$5 + 20 >> 2] = $2;
  HEAP32[$5 + 16 >> 2] = $3;
  HEAP32[$5 + 12 >> 2] = $4;
  HEAP32[$5 + 8 >> 2] = jsvNewFromStringVar(HEAP32[$5 + 16 >> 2], 3, 2147483647);
  $0 = HEAP32[$5 + 28 >> 2];
  $1 = HEAP32[$5 + 24 >> 2];
  $2 = HEAP32[$5 + 20 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 8 >> 2];
  HEAP32[$5 >> 2] = $2;
  cbprintf($0, $1, 147009, $5);
  jsvUnLock(HEAP32[$5 + 8 >> 2]);
  jsiDumpJSON(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 12 >> 2], 0);
  FUNCTION_TABLE[HEAP32[$5 + 28 >> 2]](147965, HEAP32[$5 + 24 >> 2]);
  __stack_pointer = $5 + 32 | 0;
 }
 
 function jsiDumpSerialInitialisation($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 44 >> 2] = $0;
  HEAP32[$4 + 40 >> 2] = $1;
  HEAP32[$4 + 36 >> 2] = $2;
  HEAP8[$4 + 35 | 0] = $3;
  HEAP32[$4 + 28 >> 2] = jsvFindChildFromString(HEAP32[92130], HEAP32[$4 + 36 >> 2]);
  HEAP32[$4 + 24 >> 2] = jsvSkipName(HEAP32[$4 + 28 >> 2]);
  if (HEAP32[$4 + 24 >> 2]) {
   if (HEAP8[$4 + 35 | 0] & 1) {
    jsiDumpObjectState(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2], HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2])
   }
   HEAP32[$4 + 20 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 24 >> 2], 137373);
   HEAP32[$4 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 24 >> 2], 127219);
   if (HEAP32[$4 + 20 >> 2] | HEAP32[$4 + 16 >> 2]) {
    HEAP32[$4 + 12 >> 2] = jsvGetInteger(HEAP32[$4 + 20 >> 2]);
    if (HEAP32[$4 + 12 >> 2] <= 0) {
     HEAP32[$4 + 12 >> 2] = 9600
    }
    $0 = HEAP32[$4 + 44 >> 2];
    $1 = HEAP32[$4 + 40 >> 2];
    $2 = HEAP32[$4 + 36 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 12 >> 2];
    HEAP32[$4 >> 2] = $2;
    cbprintf($0, $1, 139435, $4);
    if (jsvIsObject(HEAP32[$4 + 16 >> 2]) & 1) {
     FUNCTION_TABLE[HEAP32[$4 + 44 >> 2]](147017, HEAP32[$4 + 40 >> 2]);
     jsfGetJSONWithCallback(HEAP32[$4 + 16 >> 2], 0, 32, 0, HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2]);
    }
    FUNCTION_TABLE[HEAP32[$4 + 44 >> 2]](147965, HEAP32[$4 + 40 >> 2]);
   }
   jsvUnLock3(HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2], HEAP32[$4 + 24 >> 2]);
  }
  jsvUnLock(HEAP32[$4 + 28 >> 2]);
  __stack_pointer = $4 + 48 | 0;
 }
 
 function jsiDumpDeviceInitialisation($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  HEAP32[$3 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[92130], HEAP32[$3 + 20 >> 2]);
  if (HEAP32[$3 + 16 >> 2]) {
   HEAP32[$3 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 16 >> 2], 127219);
   if (HEAP32[$3 + 12 >> 2]) {
    $0 = HEAP32[$3 + 28 >> 2];
    $1 = HEAP32[$3 + 24 >> 2];
    HEAP32[$3 >> 2] = HEAP32[$3 + 20 >> 2];
    cbprintf($0, $1, 146297, $3);
    if (jsvIsObject(HEAP32[$3 + 12 >> 2]) & 1) {
     jsfGetJSONWithCallback(HEAP32[$3 + 12 >> 2], 0, 32, 0, HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2])
    }
    FUNCTION_TABLE[HEAP32[$3 + 28 >> 2]](147965, HEAP32[$3 + 24 >> 2]);
   }
   jsvUnLock2(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 16 >> 2]);
  }
  __stack_pointer = $3 + 32 | 0;
 }
 
 function jsiDumpHardwareInitialisation($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 96 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 92 >> 2] = $0;
  HEAP32[$3 + 88 >> 2] = $1;
  HEAP8[$3 + 87 | 0] = $2;
  if (HEAP16[184294] & 1) {
   FUNCTION_TABLE[HEAP32[$3 + 92 >> 2]](141637, HEAP32[$3 + 88 >> 2])
  }
  if (HEAPU8[200001] != 255) {
   $0 = HEAP32[$3 + 92 >> 2];
   $1 = HEAP32[$3 + 88 >> 2];
   HEAP32[$3 + 64 >> 2] = HEAPU8[200001];
   cbprintf($0, $1, 147882, $3 - -64 | 0);
  }
  if (HEAPU8[200002] != 255) {
   $0 = HEAP32[$3 + 92 >> 2];
   $1 = HEAP32[$3 + 88 >> 2];
   HEAP32[$3 + 48 >> 2] = HEAPU8[200002];
   cbprintf($0, $1, 147905, $3 + 48 | 0);
  }
  if (!(!(HEAP8[$3 + 87 | 0] & 1) | !HEAPU8[200496])) {
   HEAP32[$3 + 80 >> 2] = jsfGetFlags();
   $0 = HEAP32[$3 + 92 >> 2];
   $1 = HEAP32[$3 + 88 >> 2];
   HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 80 >> 2];
   cbprintf($0, $1, 147929, $3 + 32 | 0);
   jsvUnLock(HEAP32[$3 + 80 >> 2]);
  }
  jsiDumpSerialInitialisation(HEAP32[$3 + 92 >> 2], HEAP32[$3 + 88 >> 2], 141340, HEAP8[$3 + 87 | 0] & 1);
  HEAP32[$3 + 76 >> 2] = 0;
  while (1) {
   if (HEAP32[$3 + 76 >> 2] <= 0) {
    jsiDumpSerialInitialisation(HEAP32[$3 + 92 >> 2], HEAP32[$3 + 88 >> 2], jshGetDeviceString(HEAP32[$3 + 76 >> 2] + 22 & 255), HEAP8[$3 + 87 | 0] & 1);
    HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
    continue;
   }
   break;
  };
  HEAP32[$3 + 76 >> 2] = 0;
  while (1) {
   if (HEAP32[$3 + 76 >> 2] <= 0) {
    jsiDumpDeviceInitialisation(HEAP32[$3 + 92 >> 2], HEAP32[$3 + 88 >> 2], jshGetDeviceString(HEAP32[$3 + 76 >> 2] + 26 & 255));
    HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
    continue;
   }
   break;
  };
  HEAP32[$3 + 76 >> 2] = 0;
  while (1) {
   if (HEAP32[$3 + 76 >> 2] <= 0) {
    jsiDumpDeviceInitialisation(HEAP32[$3 + 92 >> 2], HEAP32[$3 + 88 >> 2], jshGetDeviceString(HEAP32[$3 + 76 >> 2] + 27 & 255));
    HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
    continue;
   }
   break;
  };
  HEAP8[$3 + 75 | 0] = 0;
  while (1) {
   $0 = 0;
   if (jshIsPinValid(HEAPU8[$3 + 75 | 0]) & 1) {
    $0 = HEAPU8[$3 + 75 | 0] < 48
   }
   if ($0) {
    block1 : {
     if (HEAPU8[$3 + 75 | 0] == 5 | HEAPU8[$3 + 75 | 0] == 6 | (HEAPU8[$3 + 75 | 0] == 7 | HEAPU8[$3 + 75 | 0] == 26)) {
      break block1
     }
     if (HEAPU8[$3 + 75 | 0] == 27 | HEAPU8[$3 + 75 | 0] == 8 | (HEAPU8[$3 + 75 | 0] == 23 | HEAPU8[$3 + 75 | 0] == 3)) {
      break block1
     }
     if (HEAPU8[$3 + 75 | 0] == 33 | HEAPU8[$3 + 75 | 0] == 34 | (HEAPU8[$3 + 75 | 0] == 35 | HEAPU8[$3 + 75 | 0] == 36)) {
      break block1
     }
     if (HEAPU8[$3 + 75 | 0] == 19) {
      break block1
     }
     HEAP8[$3 + 74 | 0] = jshPinGetState(HEAPU8[$3 + 75 | 0]);
     HEAP8[$3 + 73 | 0] = HEAPU8[$3 + 74 | 0] & 15;
     block4 : {
      block2 : {
       if (HEAPU8[$3 + 73 | 0] != 1) {
        break block2
       }
       if (jshGetPinStateIsManual(HEAPU8[$3 + 75 | 0]) & 1) {
        break block2
       }
       HEAP8[$3 + 72 | 0] = (HEAPU8[$3 + 74 | 0] & 16) != 0;
       if (!(HEAP8[$3 + 72 | 0] & 1 | HEAPU8[$3 + 75 | 0] != 8)) {
        break block1
       }
       $0 = HEAP32[$3 + 92 >> 2];
       $1 = HEAP32[$3 + 88 >> 2];
       $2 = HEAPU8[$3 + 75 | 0];
       HEAP32[$3 + 20 >> 2] = HEAP8[$3 + 72 | 0] & 1;
       HEAP32[$3 + 16 >> 2] = $2;
       cbprintf($0, $1, 147946, $3 + 16 | 0);
       break block4;
      }
      if (!(HEAPU8[$3 + 75 | 0] != 17 | HEAPU8[$3 + 73 | 0] != 6)) {
       break block1
      }
      if (!(jshIsPinStateDefault(HEAPU8[$3 + 75 | 0], HEAPU8[$3 + 73 | 0]) & 1)) {
       HEAP32[$3 + 68 >> 2] = jswrap_io_getPinMode(HEAPU8[$3 + 75 | 0]);
       if (HEAP32[$3 + 68 >> 2]) {
        $0 = HEAP32[$3 + 92 >> 2];
        $1 = HEAP32[$3 + 88 >> 2];
        $2 = HEAPU8[$3 + 75 | 0];
        $4 = HEAP32[$3 + 68 >> 2];
        HEAP32[$3 + 8 >> 2] = jshGetPinStateIsManual(HEAPU8[$3 + 75 | 0]) & 1 ? 148266 : 137106;
        HEAP32[$3 + 4 >> 2] = $4;
        HEAP32[$3 >> 2] = $2;
        cbprintf($0, $1, 147862, $3);
       }
       jsvUnLock(HEAP32[$3 + 68 >> 2]);
      }
     }
    }
    HEAP8[$3 + 75 | 0] = HEAPU8[$3 + 75 | 0] + 1;
    continue;
   }
   break;
  };
  __stack_pointer = $3 + 96 | 0;
 }
 
 function jsiSoftKill() {
  var $0 = 0;
  $0 = __stack_pointer + -64 | 0;
  __stack_pointer = $0;
  jsiPacketFileEnd();
  jsiPacketExit();
  jsiExecuteEventCallbackOn(141294, 135678, 0, 0);
  jsiCheckErrors(0);
  HEAP32[92150] = 0;
  jsiInputLineCursorMoved();
  jsvUnLock(HEAP32[92148]);
  HEAP32[92148] = 0;
  jswKill();
  jstReset();
  if (HEAP32[92145]) {
   jsvUnLock(HEAP32[92145]);
   HEAP32[92145] = 0;
  }
  if (HEAPU16[184292]) {
   jsvUnRefRef(HEAPU16[184292]);
   HEAP16[184292] = 0;
  }
  if (HEAPU16[184293]) {
   HEAP32[$0 + 60 >> 2] = jsvLock(HEAPU16[184293]);
   jsvObjectIteratorNew($0 + 56 | 0, HEAP32[$0 + 60 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_820($0 + 56 | 0) & 1) {
     HEAP32[$0 + 52 >> 2] = jsvObjectIteratorGetValue_821($0 + 56 | 0);
     HEAP32[$0 + 48 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 52 >> 2], 135427);
     jshPinWatch(jshGetPinFromVar(HEAP32[$0 + 48 >> 2]) & 255, 0, 0);
     jsvUnLock2(HEAP32[$0 + 48 >> 2], HEAP32[$0 + 52 >> 2]);
     jsvObjectIteratorNext($0 + 56 | 0);
     continue;
    }
    break;
   };
   jsvObjectIteratorFree_822($0 + 56 | 0);
   jsvUnRef(HEAP32[$0 + 60 >> 2]);
   jsvUnLock(HEAP32[$0 + 60 >> 2]);
   HEAP16[184293] = 0;
  }
  if (HEAPU8[200496]) {
   jsvObjectSetChildAndUnLock(HEAP32[92131], 127298, jsvNewFromInteger(HEAPU8[200496]))
  }
  HEAP32[$0 + 44 >> 2] = jsvNewFromEmptyString_815();
  if (HEAP32[$0 + 44 >> 2]) {
   jsvStringIteratorNew($0 + 8 | 0, HEAP32[$0 + 44 >> 2], 0);
   jsiDumpHardwareInitialisation(2, $0 + 8 | 0, 0);
   jsvStringIteratorFree_806($0 + 8 | 0);
   jsvObjectSetChild(HEAP32[92131], 124861, HEAP32[$0 + 44 >> 2]);
   jsvUnLock(HEAP32[$0 + 44 >> 2]);
  }
  HEAP16[184294] = HEAPU16[184294] & -2049;
  HEAP16[184294] = HEAPU16[184294] & -4097;
  __stack_pointer = $0 - -64 | 0;
 }
 
 function jsiPacketFileEnd() {
  jsvObjectRemoveChild(HEAP32[92131], 141280);
  jsiPacketFileSetTimeout(0);
 }
 
 function jsiPacketExit() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP8[368604] = 0;
  HEAP16[184328] = 0;
  HEAP32[$0 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[92131], 140733);
  if (HEAP32[$0 + 12 >> 2]) {
   jsiClearTimeout(HEAP32[$0 + 12 >> 2]);
   jsvUnLock(HEAP32[$0 + 12 >> 2]);
  }
  jsvObjectRemoveChild(HEAP32[92131], 140733);
  jsiInputLineCursorMoved();
  jsvUnLock(HEAP32[92148]);
  HEAP32[92148] = jsvObjectGetChildIfExists(HEAP32[92131], 141041);
  jsvObjectRemoveChild(HEAP32[92131], 141041);
  __stack_pointer = $0 + 16 | 0;
 }
 
 function jsiSemiInit($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer - 112 | 0;
  __stack_pointer = $2;
  HEAP8[$2 + 111 | 0] = $0;
  HEAP32[$2 + 104 >> 2] = $1;
  jspInit();
  HEAP16[184294] = HEAPU16[184294] & 7904;
  HEAP8[200001] = 255;
  HEAP8[$2 + 103 | 0] = 0;
  if (HEAP32[$2 + 104 >> 2]) {
   $4 = HEAP32[92130];
   $1 = HEAP32[$2 + 104 >> 2];
   HEAP32[$2 + 64 >> 2] = HEAP32[$1 + 24 >> 2];
   $3 = HEAP32[$1 + 16 >> 2];
   $0 = HEAP32[$1 + 20 >> 2];
   HEAP32[$2 + 56 >> 2] = $3;
   HEAP32[$2 + 60 >> 2] = $0;
   $3 = HEAP32[$1 + 12 >> 2];
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP32[$2 + 48 >> 2] = $0;
   HEAP32[$2 + 52 >> 2] = $3;
   $0 = HEAP32[$1 + 4 >> 2];
   $3 = HEAP32[$1 >> 2];
   HEAP32[$2 + 40 >> 2] = $3;
   HEAP32[$2 + 44 >> 2] = $0;
   jsvObjectSetChildAndUnLock($4, 140434, jsfVarFromName($2 + 40 | 0));
  }
  if (HEAP8[$2 + 111 | 0] & 1) {
   $5 = jsfFlashContainsCode()
  }
  HEAP8[$2 + 102 | 0] = $5 & 1;
  if (HEAP8[$2 + 102 | 0] & 1) {
   HEAP16[184294] = HEAPU16[184294] & -2049;
   jspSoftKill();
   jsvSoftKill();
   jsfLoadStateFromFlash();
   jsvSoftInit();
   jspSoftInit();
  }
  HEAP32[$2 + 96 >> 2] = jsvObjectGetChildIfExists(HEAP32[92131], 138090);
  if (HEAP32[$2 + 96 >> 2]) {
   HEAP16[184294] = HEAPU16[184294] | 1024
  }
  jsvUnLock(HEAP32[$2 + 96 >> 2]);
  jsiSoftInit((HEAPU8[$2 + 111 | 0] ^ -1) & 1);
  if (jsiEcho() & 1) {
   if (!(HEAP8[$2 + 102 | 0] & 1)) {
    if (HEAPU8[2e5] != 20) {
     jsiConsolePrintString(147378)
    }
    jsfNameFromString($2 + 68 | 0, 140902);
    HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 92 >> 2];
    $3 = HEAP32[$2 + 88 >> 2];
    $0 = HEAP32[$2 + 84 >> 2];
    HEAP32[$2 + 24 >> 2] = $0;
    HEAP32[$2 + 28 >> 2] = $3;
    $0 = HEAP32[$2 + 80 >> 2];
    $3 = HEAP32[$2 + 76 >> 2];
    HEAP32[$2 + 16 >> 2] = $3;
    HEAP32[$2 + 20 >> 2] = $0;
    $3 = HEAP32[$2 + 72 >> 2];
    $0 = HEAP32[$2 + 68 >> 2];
    HEAP32[$2 + 8 >> 2] = $0;
    HEAP32[$2 + 12 >> 2] = $3;
    if (jsfFindFile($2 + 8 | 0, 0)) {
     jsiConsolePrintString(147110)
    }
   }
   if (HEAPU8[2e5] != 20) {
    jsiConsolePrintString(148265)
   }
   HEAP8[368596] = 1;
  }
  if (HEAP8[$2 + 103 | 0] & 1) {
   jsvUnLock(jspEvaluate(145630, 1))
  }
  __stack_pointer = $2 + 112 | 0;
 }
 
 function jsiInit($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  HEAP16[184294] = 6144;
  HEAP8[2e5] = 19;
  jsiSemiInit(HEAP8[$1 + 15 | 0] & 1, 0);
  jsiSetBusy(1, 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsiOneSecondAfterStartup() {
  block : {
   if (HEAPU8[2e5] == 19) {
    HEAP8[2e5] = jsiGetPreferredConsoleDevice();
    jshTransmitMove(19, HEAPU8[2e5]);
    jshUSARTKick(HEAPU8[2e5]);
    break block;
   }
   jshTransmitClearDevice(19);
  }
 }
 
 function jsiKill() {
  jsiSoftKill();
  jspKill();
 }
 
 function jsiCountBracketsInInput() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 144 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 140 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = jslSetLex($0 + 8 | 0);
  jslInit(HEAP32[92148]);
  while (1) {
   block1 : {
    $1 = 0;
    block : {
     if (!HEAPU16[$0 + 10 >> 1]) {
      break block
     }
     $1 = 0;
     if (HEAPU16[$0 + 10 >> 1] == 137) {
      break block
     }
     $1 = 0;
     if (HEAPU16[$0 + 10 >> 1] == 132) {
      break block
     }
     $1 = HEAPU16[$0 + 10 >> 1] != 134;
    }
    if (!$1) {
     break block1
    }
    if (!(!(HEAPU16[$0 + 10 >> 1] == 123 | HEAPU16[$0 + 10 >> 1] == 91) & HEAPU16[$0 + 10 >> 1] != 40)) {
     HEAP32[$0 + 140 >> 2] = HEAP32[$0 + 140 >> 2] + 1
    }
    if (!(!(HEAPU16[$0 + 10 >> 1] == 125 | HEAPU16[$0 + 10 >> 1] == 93) & HEAPU16[$0 + 10 >> 1] != 41)) {
     HEAP32[$0 + 140 >> 2] = HEAP32[$0 + 140 >> 2] - 1
    }
    if (HEAP32[$0 + 140 >> 2] < 0) {
     break block1
    }
    jslGetNextToken();
    continue;
   }
   break;
  };
  if (HEAPU16[$0 + 10 >> 1] == 132) {
   HEAP32[$0 + 140 >> 2] = 0
  }
  if (!(HEAPU16[$0 + 10 >> 1] != 137 & HEAPU16[$0 + 10 >> 1] != 134)) {
   HEAP32[$0 + 140 >> 2] = 1e3
  }
  jslKill();
  jslSetLex(HEAP32[$0 + 4 >> 2]);
  __stack_pointer = $0 + 144 | 0;
  return HEAP32[$0 + 140 >> 2];
 }
 
 function jsiFreeMoreMemory() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[92131], 123627);
  block : {
   if (!HEAP32[$0 + 8 >> 2]) {
    HEAP8[$0 + 15 | 0] = 0;
    break block;
   }
   HEAP32[$0 + 4 >> 2] = jsvArrayPopFirst(HEAP32[$0 + 8 >> 2]);
   HEAP8[$0 + 3 | 0] = HEAP32[$0 + 4 >> 2] != 0;
   jsvUnLock2(HEAP32[$0 + 4 >> 2], HEAP32[$0 + 8 >> 2]);
   HEAP8[$0 + 15 | 0] = HEAP8[$0 + 3 | 0] & 1;
  }
  __stack_pointer = $0 + 16 | 0;
  return HEAP8[$0 + 15 | 0] & 1;
 }
 
 function jsiHistoryAddLine($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 12 >> 2]) {
    break block
   }
   HEAP32[$1 + 8 >> 2] = jsvGetStringLength(HEAP32[$1 + 12 >> 2]);
   if (!HEAP32[$1 + 8 >> 2] | HEAPU32[$1 + 8 >> 2] > 500) {
    break block
   }
   HEAP32[$1 + 4 >> 2] = jsiGetHistory();
   if (!HEAP32[$1 + 4 >> 2]) {
    break block
   }
   HEAP32[$1 >> 2] = jsvGetIndexOf(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 12 >> 2], 0);
   if (HEAP32[$1 >> 2]) {
    jsvRemoveChildAndUnLock(HEAP32[$1 + 4 >> 2], HEAP32[$1 >> 2])
   }
   jsvArrayPush(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 12 >> 2]);
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsiGetHistory() {
  return jsvObjectGetChild(HEAP32[92131], 123627, 3);
 }
 
 function jsiGetHistoryLine($0) {
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 27 | 0] = $0;
  HEAP32[$1 + 20 >> 2] = jsiGetHistory();
  block : {
   if (!HEAP32[$1 + 20 >> 2]) {
    HEAP32[$1 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 16 >> 2] = 0;
   HEAP32[$1 + 12 >> 2] = jsvGetIndexOf(HEAP32[$1 + 20 >> 2], HEAP32[92148], 1);
   block4 : {
    if (HEAP32[$1 + 12 >> 2]) {
     block2 : {
      block1 : {
       if (!(HEAP8[$1 + 27 | 0] & 1)) {
        break block1
       }
       if (!(jsvGetPrevSibling(HEAP32[$1 + 12 >> 2]) & 65535)) {
        break block1
       }
       HEAP32[$1 + 16 >> 2] = jsvSkipNameAndUnLock(jsvLock(jsvGetPrevSibling(HEAP32[$1 + 12 >> 2]) & 65535));
       break block2;
      }
      block3 : {
       if (HEAP8[$1 + 27 | 0] & 1) {
        break block3
       }
       if (!(jsvGetNextSibling(HEAP32[$1 + 12 >> 2]) & 65535)) {
        break block3
       }
       HEAP32[$1 + 16 >> 2] = jsvSkipNameAndUnLock(jsvLock(jsvGetNextSibling(HEAP32[$1 + 12 >> 2]) & 65535));
      }
     }
     jsvUnLock(HEAP32[$1 + 12 >> 2]);
     break block4;
    }
    if (HEAP8[$1 + 27 | 0] & 1) {
     HEAP32[$1 + 16 >> 2] = jsvSkipNameAndUnLock(jsvGetArrayItem(HEAP32[$1 + 20 >> 2], jsvGetArrayLength(HEAP32[$1 + 20 >> 2]) - 1 | 0))
    }
   }
   jsvUnLock(HEAP32[$1 + 20 >> 2]);
   HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 16 >> 2];
  }
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 28 >> 2];
 }
 
 function jsiIsInHistory($0) {
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 24 >> 2] = $0;
  HEAP32[$1 + 20 >> 2] = jsiGetHistory();
  block : {
   if (!HEAP32[$1 + 20 >> 2]) {
    HEAP8[$1 + 31 | 0] = 0;
    break block;
   }
   HEAP32[$1 + 16 >> 2] = jsvGetIndexOf(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 24 >> 2], 1);
   HEAP8[$1 + 15 | 0] = HEAP32[$1 + 16 >> 2] != 0;
   jsvUnLock2(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2]);
   HEAP8[$1 + 31 | 0] = HEAP8[$1 + 15 | 0] & 1;
  }
  __stack_pointer = $1 + 32 | 0;
  return HEAP8[$1 + 31 | 0] & 1;
 }
 
 function jsiReplaceInputLine($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  if (jsiShowInputLine() & 1) {
   jsiMoveCursorChar(HEAP32[92148], HEAP32[92150], 0);
   jsiConsoleEraseAfterCursor();
   jsiConsolePrintStringVarWithNewLineChar(HEAP32[$1 + 12 >> 2], 0, 58);
  }
  jsiInputLineCursorMoved();
  jsvUnLock(HEAP32[92148]);
  HEAP32[92148] = jsvLockAgain(HEAP32[$1 + 12 >> 2]);
  HEAP32[92150] = jsvGetStringLength(HEAP32[92148]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsiShowInputLine() {
  var $0 = 0;
  $0 = 0;
  block : {
   if (!(jsiEcho() & 1)) {
    break block
   }
   $0 = 0;
   if (HEAP8[368596] & 1) {
    break block
   }
   $0 = jsiPasswordProtected() ^ -1;
  }
  return $0 & 1;
 }
 
 function jsiChangeToHistory($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  HEAP32[$1 + 8 >> 2] = jsiGetHistoryLine(HEAP8[$1 + 15 | 0] & 1);
  block : {
   if (HEAP32[$1 + 8 >> 2]) {
    jsiReplaceInputLine(HEAP32[$1 + 8 >> 2]);
    jsvUnLock(HEAP32[$1 + 8 >> 2]);
    HEAP8[368605] = 1;
    break block;
   }
   if (!(HEAP8[$1 + 15 | 0] & 1)) {
    if (jsiShowInputLine() & 1) {
     jsiMoveCursorChar(HEAP32[92148], HEAP32[92150], 0);
     jsiConsoleEraseAfterCursor();
    }
    jsiInputLineCursorMoved();
    jsvUnLock(HEAP32[92148]);
    HEAP32[92148] = jsvNewFromEmptyString_815();
    HEAP32[92150] = 0;
   }
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsiIsAboutToEditInputLine() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  if (HEAP8[368605] & 1) {
   HEAP8[368605] = 0;
   if (jsiIsInHistory(HEAP32[92148]) & 1) {
    HEAP32[$0 + 12 >> 2] = jsvCopy(HEAP32[92148], 0);
    if (HEAP32[$0 + 12 >> 2]) {
     jsiInputLineCursorMoved();
     jsvUnLock(HEAP32[92148]);
     HEAP32[92148] = HEAP32[$0 + 12 >> 2];
    }
   }
  }
  if (HEAP32[50001] < 0) {
   HEAP32[50001] = jsvGetStringLength(HEAP32[92148])
  }
  __stack_pointer = $0 + 16 | 0;
 }
 
 function jsiHandleDelete($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 31 | 0] = $0;
  HEAP32[$1 + 24 >> 2] = jsvGetStringLength(HEAP32[92148]);
  block1 : {
   if (!(HEAP32[92150] | !(HEAP8[$1 + 31 | 0] & 1)) | !(HEAP8[$1 + 31 | 0] & 1 | HEAPU32[92150] < HEAPU32[$1 + 24 >> 2])) {
    break block1
   }
   block3 : {
    if (HEAP8[$1 + 31 | 0] & 1) {
     $0 = 1;
     if ((jsvGetCharInString(HEAP32[92148], HEAP32[92150] - 1 | 0) | 0) == 10) {
      break block3
     }
    }
    if (!(HEAP8[$1 + 31 | 0] & 1)) {
     $2 = (jsvGetCharInString(HEAP32[92148], HEAP32[92150]) | 0) == 10
    }
    $0 = $2;
   }
   HEAP8[$1 + 23 | 0] = $0 & 1;
   block4 : {
    if (!(HEAP8[$1 + 23 | 0] & 1)) {
     break block4
    }
    if (!(jsiShowInputLine() & 1)) {
     break block4
    }
    jsiConsoleEraseAfterCursor();
    if (HEAP8[$1 + 31 | 0] & 1) {
     jsiConsolePrintString(147033);
     jsiMoveCursorChar(HEAP32[92148], HEAP32[92150], HEAP32[92150] - 1 | 0);
     jsiInputLineCursorMoved();
    }
   }
   HEAP32[$1 + 16 >> 2] = jsvNewFromEmptyString_815();
   HEAP32[$1 + 12 >> 2] = HEAP32[92150];
   if (HEAP8[$1 + 31 | 0] & 1) {
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] - 1
   }
   if (HEAP32[$1 + 12 >> 2]) {
    jsvAppendStringVar(HEAP32[$1 + 16 >> 2], HEAP32[92148], 0, HEAP32[$1 + 12 >> 2])
   }
   if (HEAPU32[$1 + 24 >> 2] > HEAP32[$1 + 12 >> 2] + 1 >>> 0) {
    jsvAppendStringVar(HEAP32[$1 + 16 >> 2], HEAP32[92148], HEAP32[$1 + 12 >> 2] + 1 | 0, 2147483647)
   }
   jsiInputLineCursorMoved();
   jsvUnLock(HEAP32[92148]);
   HEAP32[92148] = HEAP32[$1 + 16 >> 2];
   if (HEAP8[$1 + 31 | 0] & 1) {
    HEAP32[92150] = HEAP32[92150] - 1
   }
   if (!(jsiShowInputLine() & 1)) {
    break block1
   }
   block5 : {
    if (HEAP8[$1 + 23 | 0] & 1) {
     jsiConsolePrintStringVarWithNewLineChar(HEAP32[92148], HEAP32[92150], 58);
     jsiMoveCursorChar(HEAP32[92148], jsvGetStringLength(HEAP32[92148]), HEAP32[92150]);
     break block5;
    }
    if (HEAP8[$1 + 31 | 0] & 1) {
     jsiConsolePrintChar(8)
    }
    jsiConsolePrintStringVarUntilEOL(HEAP32[92148], HEAP32[92150], -1, 1);
   }
  }
  __stack_pointer = $1 + 32 | 0;
 }
 
 function jsiHandleHome() {
  var $0 = 0;
  while (1) {
   $0 = 0;
   if (HEAP32[92150]) {
    $0 = (jsvGetCharInString(HEAP32[92148], HEAP32[92150] - 1 | 0) | 0) != 10
   }
   if ($0) {
    if (jsiShowInputLine() & 1) {
     jsiConsolePrintChar(8)
    }
    HEAP32[92150] = HEAP32[92150] - 1;
    continue;
   }
   break;
  };
 }
 
 function jsiHandleEnd() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = jsvGetStringLength(HEAP32[92148]);
  while (1) {
   $1 = 0;
   if (HEAPU32[92150] < HEAPU32[$0 + 12 >> 2]) {
    $1 = (jsvGetCharInString(HEAP32[92148], HEAP32[92150]) | 0) != 10
   }
   if ($1) {
    if (jsiShowInputLine() & 1) {
     jsiConsolePrintChar(jsvGetCharInString(HEAP32[92148], HEAP32[92150]) << 24 >> 24)
    }
    HEAP32[92150] = HEAP32[92150] + 1;
    continue;
   }
   break;
  };
  __stack_pointer = $0 + 16 | 0;
 }
 
 function jsiHandlePageUpDown($0) {
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 31 | 0] = $0;
  jsvGetLineAndCol(HEAP32[92148], HEAP32[92150], $1 + 20 | 0, $1 + 24 | 0);
  block : {
   if (!(HEAP8[$1 + 31 | 0] & 1)) {
    HEAP32[92150] = 0;
    break block;
   }
   HEAP32[92150] = jsvGetStringLength(HEAP32[92148]);
  }
  HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 24 >> 2];
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 20 >> 2];
  jsvGetLineAndCol(HEAP32[92148], HEAP32[92150], $1 + 12 | 0, $1 + 16 | 0);
  jsiMoveCursor(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 20 >> 2], HEAP32[$1 + 16 >> 2], HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 32 | 0;
 }
 
 function jsiHandleMoveUpDown($0) {
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 28 >> 2] = $0;
  HEAP32[$1 + 16 >> 2] = jsvGetLinesInString(HEAP32[92148]);
  jsvGetLineAndCol(HEAP32[92148], HEAP32[92150], $1 + 20 | 0, $1 + 24 | 0);
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 24 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 20 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + HEAP32[$1 + 28 >> 2];
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 + 8 >> 2] = 1
  }
  if (HEAPU32[$1 + 8 >> 2] > HEAPU32[$1 + 16 >> 2]) {
   HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 16 >> 2]
  }
  HEAP32[92150] = jsvGetIndexFromLineAndCol(HEAP32[92148], HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
  jsvGetLineAndCol(HEAP32[92148], HEAP32[92150], $1 + 8 | 0, $1 + 12 | 0);
  if (jsiShowInputLine() & 1) {
   jsiMoveCursor(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 20 >> 2], HEAP32[$1 + 12 >> 2], HEAP32[$1 + 8 >> 2])
  }
  __stack_pointer = $1 + 32 | 0;
 }
 
 function jsiAtEndOfInputLine() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 8 >> 2] = HEAP32[92150];
  HEAP32[$0 + 4 >> 2] = jsvGetStringLength(HEAP32[92148]);
  block : {
   while (1) {
    if (HEAPU32[$0 + 8 >> 2] < HEAPU32[$0 + 4 >> 2]) {
     if (isWhitespace(jsvGetCharInString(HEAP32[92148], HEAP32[$0 + 8 >> 2]) << 24 >> 24) & 1) {
      HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
      continue;
     } else {
      HEAP8[$0 + 15 | 0] = 0;
      break block;
     }
    }
    break;
   };
   HEAP8[$0 + 15 | 0] = 1;
  }
  __stack_pointer = $0 + 16 | 0;
  return HEAP8[$0 + 15 | 0] & 1;
 }
 
 function jsiTabComplete_findCommon($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
  block : {
   if (jsvGetStringLength(HEAP32[$2 + 8 >> 2]) >>> 0 <= HEAPU32[HEAP32[$2 + 4 >> 2] >> 2]) {
    break block
   }
   if (jsvCompareString(HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2], HEAP32[$2 + 8 >> 2], 0, 0, 1)) {
    break block
   }
   $0 = HEAP32[$2 + 4 >> 2];
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
   block1 : {
    if (HEAP32[HEAP32[$2 + 4 >> 2] + 8 >> 2]) {
     HEAP32[$2 >> 2] = jsvGetCommonCharacters(HEAP32[HEAP32[$2 + 4 >> 2] + 8 >> 2], HEAP32[$2 + 8 >> 2]);
     jsvUnLock(HEAP32[HEAP32[$2 + 4 >> 2] + 8 >> 2]);
     HEAP32[HEAP32[$2 + 4 >> 2] + 8 >> 2] = HEAP32[$2 >> 2];
     break block1;
    }
    $0 = jsvLockAgain(HEAP32[$2 + 8 >> 2]);
    HEAP32[HEAP32[$2 + 4 >> 2] + 8 >> 2] = $0;
   }
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsiTabComplete_printCommon($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 28 >> 2];
  block : {
   if (jsvGetStringLength(HEAP32[$2 + 24 >> 2]) >>> 0 <= HEAPU32[HEAP32[$2 + 20 >> 2] >> 2]) {
    break block
   }
   if (jsvCompareString(HEAP32[HEAP32[$2 + 20 >> 2] + 4 >> 2], HEAP32[$2 + 24 >> 2], 0, 0, 1)) {
    break block
   }
   block1 : {
    if (!HEAP32[HEAP32[$2 + 20 >> 2] + 16 >> 2]) {
     HEAP32[$2 >> 2] = HEAP32[$2 + 24 >> 2];
     jsiConsolePrintf(124350, $2);
     $0 = jsvGetStringLength(HEAP32[$2 + 24 >> 2]);
     HEAP32[HEAP32[$2 + 20 >> 2] + 16 >> 2] = $0;
     break block1;
    }
    if (HEAPU32[HEAP32[$2 + 20 >> 2] + 16 >> 2] >= 20) {
     HEAP32[HEAP32[$2 + 20 >> 2] + 16 >> 2] = 19
    }
    while (1) {
     if (HEAPU32[HEAP32[$2 + 20 >> 2] + 16 >> 2] < 20) {
      jsiConsolePrintChar(32);
      $0 = HEAP32[$2 + 20 >> 2];
      HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] + 1;
      continue;
     }
     break;
    };
    HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 24 >> 2];
    jsiConsolePrintf(147106, $2 + 16 | 0);
    HEAP32[HEAP32[$2 + 20 >> 2] + 16 >> 2] = 0;
   }
  }
  __stack_pointer = $2 + 32 | 0;
 }
 
 function jsiTabComplete() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 320 | 0;
  __stack_pointer = $0;
  block : {
   if (!(jsvIsString(HEAP32[92148]) & 1)) {
    break block
   }
   HEAP32[$0 + 316 >> 2] = 0;
   HEAP32[$0 + 300 >> 2] = 0;
   HEAP32[$0 + 292 >> 2] = 0;
   HEAP32[$0 + 156 >> 2] = jslSetLex($0 + 160 | 0);
   jslInit(HEAP32[92148]);
   while (1) {
    $1 = 0;
    $1 = HEAP16[$0 + 162 >> 1] << 16 >> 16 ? HEAPU32[92150] >= HEAP32[$0 + 164 >> 2] + 1 >>> 0 : $1;
    if ($1) {
     block1 : {
      if (HEAPU16[$0 + 162 >> 1] == 46) {
       jsvUnLock(HEAP32[$0 + 316 >> 2]);
       HEAP32[$0 + 316 >> 2] = HEAP32[$0 + 300 >> 2];
       HEAP32[$0 + 300 >> 2] = 0;
       break block1;
      }
      block2 : {
       if (HEAPU16[$0 + 162 >> 1] == 128) {
        jsvUnLock(HEAP32[$0 + 300 >> 2]);
        HEAP32[$0 + 300 >> 2] = jslGetTokenValueAsVar();
        HEAP32[$0 + 292 >> 2] = HEAP32[$0 + 164 >> 2] + 1;
        break block2;
       }
       jsvUnLock(HEAP32[$0 + 316 >> 2]);
       HEAP32[$0 + 316 >> 2] = 0;
       jsvUnLock(HEAP32[$0 + 300 >> 2]);
       HEAP32[$0 + 300 >> 2] = 0;
      }
     }
     jslGetNextToken();
     continue;
    }
    break;
   };
   jslKill();
   jslSetLex(HEAP32[$0 + 156 >> 2]);
   if (!(HEAP32[$0 + 316 >> 2] | HEAP32[$0 + 300 >> 2])) {
    break block
   }
   block4 : {
    if (HEAP32[$0 + 300 >> 2]) {
     HEAP32[$0 + 296 >> 2] = jsvGetStringLength(HEAP32[$0 + 300 >> 2]);
     HEAP32[$0 + 152 >> 2] = (HEAP32[92150] + 1 | 0) - HEAP32[$0 + 292 >> 2];
     if (HEAPU32[$0 + 152 >> 2] > HEAPU32[$0 + 296 >> 2]) {
      jsvUnLock2(HEAP32[$0 + 316 >> 2], HEAP32[$0 + 300 >> 2]);
      break block;
     }
     if (HEAPU32[$0 + 152 >> 2] < HEAPU32[$0 + 296 >> 2]) {
      HEAP32[$0 + 148 >> 2] = jsvNewFromStringVar(HEAP32[$0 + 300 >> 2], 0, HEAP32[$0 + 152 >> 2]);
      jsvUnLock(HEAP32[$0 + 300 >> 2]);
      HEAP32[$0 + 300 >> 2] = HEAP32[$0 + 148 >> 2];
      HEAP32[$0 + 296 >> 2] = HEAP32[$0 + 152 >> 2];
     }
     break block4;
    }
    HEAP32[$0 + 300 >> 2] = jsvNewFromEmptyString_815();
    HEAP32[$0 + 296 >> 2] = 0;
   }
   if (HEAP32[$0 + 316 >> 2]) {
    jsvGetString(HEAP32[$0 + 316 >> 2], $0 + 80 | 0, 64);
    HEAP32[$0 + 76 >> 2] = jspGetNamedVariable($0 + 80 | 0);
    block5 : {
     if (jsvIsVariableDefined(HEAP32[$0 + 76 >> 2]) & 1) {
      HEAP32[$0 + 76 >> 2] = jsvSkipNameAndUnLock(HEAP32[$0 + 76 >> 2]);
      break block5;
     }
     jsvUnLock(HEAP32[$0 + 76 >> 2]);
     HEAP32[$0 + 76 >> 2] = 0;
    }
    jsvUnLock(HEAP32[$0 + 316 >> 2]);
    HEAP32[$0 + 316 >> 2] = HEAP32[$0 + 76 >> 2];
    if (!HEAP32[$0 + 76 >> 2]) {
     jsvUnLock(HEAP32[$0 + 300 >> 2]);
     break block;
    }
   }
   if (!HEAP32[$0 + 316 >> 2]) {
    HEAP32[$0 + 316 >> 2] = jsvLockAgain(HEAP32[92130])
   }
   HEAP32[$0 + 304 >> 2] = 0;
   HEAP32[$0 + 308 >> 2] = 0;
   jswrap_object_keys_or_property_names_cb(HEAP32[$0 + 316 >> 2], 7, 559, $0 + 296 | 0);
   if (HEAP32[$0 + 308 >> 2] > 1) {
    jsiMoveCursorChar(HEAP32[92148], HEAP32[92150], HEAP32[50001]);
    HEAP8[368596] = 1;
    jsiConsolePrintString(148264);
    HEAP32[$0 + 312 >> 2] = 0;
    jswrap_object_keys_or_property_names_cb(HEAP32[$0 + 316 >> 2], 7, 560, $0 + 296 | 0);
    if (HEAP32[$0 + 312 >> 2]) {
     jsiConsolePrintString(148265)
    }
    jsiConsolePrintString(148265);
    jsiConsoleReturnInputLine();
   }
   jsvUnLock2(HEAP32[$0 + 316 >> 2], HEAP32[$0 + 300 >> 2]);
   if (!HEAP32[$0 + 304 >> 2]) {
    break block
   }
   jsvGetString(HEAP32[$0 + 304 >> 2], $0, 64);
   if (HEAPU32[$0 + 296 >> 2] < strlen($0) >>> 0) {
    jsiAppendStringToInputLine(HEAP32[$0 + 296 >> 2] + $0 | 0)
   }
   jsvUnLock(HEAP32[$0 + 304 >> 2]);
  }
  __stack_pointer = $0 + 320 | 0;
 }
 
 function jsiAppendStringToInputLine($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsiIsAboutToEditInputLine();
  HEAP32[$1 + 8 >> 2] = 1;
  while (1) {
   if (HEAPU8[HEAP32[$1 + 12 >> 2] + HEAP32[$1 + 8 >> 2] | 0]) {
    HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
    continue;
   }
   break;
  };
  block : {
   if (HEAP32[92150] >= HEAP32[50001]) {
    HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 12 >> 2];
    while (1) {
     if (HEAPU8[HEAP32[$1 + 4 >> 2]]) {
      $0 = HEAP32[$1 + 4 >> 2];
      HEAP32[$1 + 4 >> 2] = $0 + 1;
      jsiAppendToInputLine(HEAP8[$0 | 0] << 24 >> 24);
      continue;
     }
     break;
    };
    break block;
   }
   HEAP32[$1 >> 2] = jsvNewFromEmptyString_815();
   if (HEAP32[92150]) {
    jsvAppendStringVar(HEAP32[$1 >> 2], HEAP32[92148], 0, HEAP32[92150])
   }
   jsvAppendString(HEAP32[$1 >> 2], HEAP32[$1 + 12 >> 2]);
   jsvAppendStringVar(HEAP32[$1 >> 2], HEAP32[92148], HEAP32[92150], 2147483647);
   jsiInputLineCursorMoved();
   jsvUnLock(HEAP32[92148]);
   HEAP32[92148] = HEAP32[$1 >> 2];
   if (jsiShowInputLine() & 1) {
    jsiConsolePrintStringVarUntilEOL(HEAP32[92148], HEAP32[92150], -1, 1)
   }
  }
  HEAP32[92150] = HEAP32[$1 + 8 >> 2] + HEAP32[92150];
  if (jsiShowInputLine() & 1) {
   jsiConsolePrintString(HEAP32[$1 + 12 >> 2])
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsiAppendToInputLine($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  if (!HEAP32[92156]) {
   jsvStringIteratorNew(368612, HEAP32[92148], 0);
   jsvStringIteratorGotoEnd(368612);
   HEAP32[50001] = jsvGetStringLength(HEAP32[92148]);
  }
  jsvStringIteratorAppend(368612, HEAP8[$1 + 15 | 0] << 24 >> 24);
  HEAP32[50001] = HEAP32[50001] + 1;
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsiHandleNewLine($0) {
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 31 | 0] = $0;
  block3 : {
   if (jsiAtEndOfInputLine() & 1) {
    block : {
     if (!(HEAP8[$1 + 31 | 0] & 1)) {
      break block
     }
     if ((jsiCountBracketsInInput() | 0) > 0) {
      break block
     }
     if (jsiShowInputLine() & 1) {
      jsiConsolePrintString(148265)
     }
     if (!(HEAPU16[184294] & 2)) {
      HEAP8[368596] = 1
     }
     HEAP32[$1 + 24 >> 2] = jsvStringTrimRight(HEAP32[92148]);
     jsiClearInputLine(0);
     HEAP32[$1 + 20 >> 2] = jspEvaluateVar(HEAP32[$1 + 24 >> 2], 0, 141014, HEAPU16[184305]);
     HEAP8[$1 + 19 | 0] = jsvIsEmptyString(HEAP32[$1 + 24 >> 2]) & 1;
     block1 : {
      if (HEAP8[$1 + 19 | 0] & 1) {
       break block1
      }
      if (!(jsiEcho() & 1)) {
       break block1
      }
      jsiHistoryAddLine(HEAP32[$1 + 24 >> 2]);
     }
     jsvUnLock(HEAP32[$1 + 24 >> 2]);
     HEAP16[184305] = 0;
     block2 : {
      if (!(jsiEcho() & 1)) {
       break block2
      }
      if (jspHasError() & 1 | HEAP8[$1 + 19 | 0] & 1) {
       break block2
      }
      jsiConsolePrintChar(61);
      jsfPrintJSON(HEAP32[$1 + 20 >> 2], 813);
      jsiConsolePrintString(148265);
     }
     jsvUnLock(HEAP32[$1 + 20 >> 2]);
     jsiCheckErrors(1);
     HEAP16[184294] = HEAPU16[184294] & -3;
     break block3;
    }
    if (jsiShowInputLine() & 1) {
     jsiConsolePrintString(141977)
    }
    jsiIsAboutToEditInputLine();
    jsiAppendToInputLine(10);
    HEAP32[92150] = HEAP32[92150] + 1;
    break block3;
   }
   jsiIsAboutToEditInputLine();
   if (jsiShowInputLine() & 1) {
    jsiConsoleEraseAfterCursor()
   }
   HEAP32[$1 + 12 >> 2] = jsvNewFromEmptyString_815();
   if (HEAP32[92150]) {
    jsvAppendStringVar(HEAP32[$1 + 12 >> 2], HEAP32[92148], 0, HEAP32[92150])
   }
   jsvAppendCharacter_825(HEAP32[$1 + 12 >> 2], 10);
   jsvAppendStringVar(HEAP32[$1 + 12 >> 2], HEAP32[92148], HEAP32[92150], 2147483647);
   jsiInputLineCursorMoved();
   jsvUnLock(HEAP32[92148]);
   HEAP32[92148] = HEAP32[$1 + 12 >> 2];
   if (jsiShowInputLine() & 1) {
    jsiConsolePrintStringVarWithNewLineChar(HEAP32[92148], HEAP32[92150], 58);
    jsiMoveCursorChar(HEAP32[92148], jsvGetStringLength(HEAP32[92148]), HEAP32[92150] + 1 | 0);
   }
   HEAP32[92150] = HEAP32[92150] + 1;
  }
  __stack_pointer = $1 + 32 | 0;
 }
 
 function jsiQueueEvents($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  HEAP32[$4 + 12 >> 2] = jsvNewObject();
  if (HEAP32[$4 + 12 >> 2]) {
   jsvUnLock(jsvAddNamedChild(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 24 >> 2], 140216));
   if (HEAP32[$4 + 16 >> 2]) {
    HEAP32[$4 + 8 >> 2] = jsvNewArray(HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
    if (HEAP32[$4 + 8 >> 2]) {
     jsvAddNamedChildAndUnLock(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], 127293)
    }
   }
   if (HEAP32[$4 + 28 >> 2]) {
    jsvUnLock(jsvAddNamedChild(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 28 >> 2], 127283))
   }
   jsvArrayPushAndUnLock(HEAP32[92145], HEAP32[$4 + 12 >> 2]);
  }
  __stack_pointer = $4 + 32 | 0;
 }
 
 function jsiObjectHasCallbacks($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
  HEAP8[$2 + 3 | 0] = (jsvIsUndefined(HEAP32[$2 + 4 >> 2]) ^ -1) & 1;
  jsvUnLock(HEAP32[$2 + 4 >> 2]);
  __stack_pointer = $2 + 16 | 0;
  return HEAP8[$2 + 3 | 0] & 1;
 }
 
 function jsiQueueObjectCallbacks($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  HEAP32[$4 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2]);
  if (HEAP32[$4 + 12 >> 2]) {
   jsiQueueEvents(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 12 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
   jsvUnLock(HEAP32[$4 + 12 >> 2]);
  }
  __stack_pointer = $4 + 32 | 0;
 }
 
 function jsiExecuteEvents() {
  var $0 = 0;
  $0 = __stack_pointer - 32 | 0;
  __stack_pointer = $0;
  HEAP8[$0 + 31 | 0] = (jsvArrayIsEmpty(HEAP32[92145]) ^ -1) & 1;
  if (HEAP8[$0 + 31 | 0] & 1) {
   jsiSetBusy(1, 1)
  }
  while (1) {
   if ((jsvArrayIsEmpty(HEAP32[92145]) ^ -1) & 1) {
    HEAP32[$0 + 24 >> 2] = jsvSkipNameAndUnLock(jsvArrayPopFirst(HEAP32[92145]));
    HEAP32[$0 + 20 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 24 >> 2], 140216);
    HEAP32[$0 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 24 >> 2], 127283);
    HEAP32[$0 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 24 >> 2], 127293);
    jsvUnLock(HEAP32[$0 + 24 >> 2]);
    jsiExecuteEventCallbackArgsArray(HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2], HEAP32[$0 + 12 >> 2]);
    jsvUnLock(HEAP32[$0 + 12 >> 2]);
    jsvUnLock2(HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2]);
    continue;
   }
   break;
  };
  if (HEAP8[$0 + 31 | 0] & 1) {
   jsiSetBusy(1, 0);
   if (jspIsInterrupted() & 1) {
    HEAP16[184294] = HEAPU16[184294] | 32768
   }
  }
  __stack_pointer = $0 + 32 | 0;
 }
 
 function jsvArrayIsEmpty($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = (jsvGetFirstChild(HEAP32[$1 + 12 >> 2]) & 65535) != 0 ^ -1;
  __stack_pointer = $1 + 16 | 0;
  return $0 & 1;
 }
 
 function jsiExecuteEventCallbackArgsArray($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP32[$3 + 16 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = 0;
  HEAP32[$3 + 8 >> 2] = 0;
  block : {
   if (HEAP32[$3 + 16 >> 2]) {
    HEAP32[$3 + 12 >> 2] = jsvGetArrayLength(HEAP32[$3 + 16 >> 2]);
    if (HEAP32[$3 + 12 >> 2]) {
     $0 = $3 - ((HEAP32[$3 + 12 >> 2] << 2) + 15 & -16) | 0;
     __stack_pointer = $0;
     HEAP32[$3 + 8 >> 2] = $0;
     if (!HEAP32[$3 + 8 >> 2]) {
      HEAP8[$3 + 31 | 0] = 0;
      break block;
     }
     jsvGetArrayItems(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
    }
   }
   HEAP8[$3 + 7 | 0] = jsiExecuteEventCallback(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]) & 1;
   jsvUnLockMany(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
   HEAP8[$3 + 31 | 0] = HEAP8[$3 + 7 | 0] & 1;
  }
  __stack_pointer = $3 + 32 | 0;
  return HEAP8[$3 + 31 | 0] & 1;
 }
 
 function jsiSetTimeout($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAPF64[$2 + 16 >> 3] = $1;
  HEAP32[$2 + 12 >> 2] = jsvNewNativeFunction(HEAP32[$2 + 24 >> 2], 0);
  block : {
   if (!HEAP32[$2 + 12 >> 2]) {
    HEAP32[$2 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 8 >> 2] = jswrap_interface_setTimeout(HEAP32[$2 + 12 >> 2], HEAPF64[$2 + 16 >> 3], 0);
   jsvUnLock(HEAP32[$2 + 12 >> 2]);
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 8 >> 2];
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jsiClearTimeout($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = jsvNewArray($1 + 12 | 0, 1);
  jswrap_interface_clearTimeout(HEAP32[$1 + 8 >> 2]);
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsiShouldExecuteWatch($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP8[$2 + 11 | 0] = $1;
  HEAP32[$2 + 4 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 12 >> 2], 137838);
  __stack_pointer = $2 + 16 | 0;
  $0 = 1;
  block : {
   if (!HEAP32[$2 + 4 >> 2]) {
    break block
   }
   if (HEAP8[$2 + 11 | 0] & 1) {
    $0 = 1;
    if (HEAP32[$2 + 4 >> 2] > 0) {
     break block
    }
   }
   $3 = HEAP8[$2 + 11 | 0] & 1 ? $3 : HEAP32[$2 + 4 >> 2] < 0;
   $0 = $3;
  }
  return $0 & 1;
 }
 
 function jsiIsWatchingPin($0) {
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 30 | 0] = $0;
  block : {
   if (jshGetPinShouldStayWatched(HEAPU8[$1 + 30 | 0]) & 1) {
    HEAP8[$1 + 31 | 0] = 1;
    break block;
   }
   HEAP8[$1 + 29 | 0] = 0;
   HEAP32[$1 + 24 >> 2] = jsvLock(HEAPU16[184293]);
   jsvObjectIteratorNew($1 + 20 | 0, HEAP32[$1 + 24 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_820($1 + 20 | 0) & 1) {
     HEAP32[$1 + 16 >> 2] = jsvObjectIteratorGetValue_821($1 + 20 | 0);
     HEAP32[$1 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 16 >> 2], 135427);
     if ((jshGetPinFromVar(HEAP32[$1 + 12 >> 2]) & 255) == HEAPU8[$1 + 30 | 0]) {
      HEAP8[$1 + 29 | 0] = 1
     }
     jsvUnLock2(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 16 >> 2]);
     jsvObjectIteratorNext($1 + 20 | 0);
     continue;
    }
    break;
   };
   jsvObjectIteratorFree_822($1 + 20 | 0);
   jsvUnLock(HEAP32[$1 + 24 >> 2]);
   HEAP8[$1 + 31 | 0] = HEAP8[$1 + 29 | 0] & 1;
  }
  __stack_pointer = $1 + 32 | 0;
  return HEAP8[$1 + 31 | 0] & 1;
 }
 
 function jsiCtrlC() {
  if (!(jsiPasswordProtected() & 1 | !(HEAPU8[368604] < 2 | HEAPU8[368604] > 4))) {
   HEAP32[92138] = HEAP32[92138] | 2048
  }
 }
 
 function jsiHandleIOEventForSerial($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP8[$4 + 27 | 0] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 16 >> 2] + 2;
  block : {
   if (HEAP32[$4 + 16 >> 2]) {
    $0 = jsvNewStringOfLength(HEAP32[$4 + 16 >> 2], HEAP32[$4 + 20 >> 2]);
    break block;
   }
   $0 = 0;
  }
  HEAP32[$4 + 8 >> 2] = $0;
  if (HEAP32[$4 + 8 >> 2]) {
   while (1) {
    if (jshIsTopEvent(HEAPU8[$4 + 27 | 0] & 31) & 1) {
     jshPopIOEvent(HEAP32[$4 + 20 >> 2], $4 + 16 | 0);
     HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] + (HEAP32[$4 + 16 >> 2] + 2 | 0);
     jsvAppendStringBuf(HEAP32[$4 + 8 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
     continue;
    }
    break;
   };
   jswrap_stream_pushData(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 8 >> 2], 1);
   jsvUnLock(HEAP32[$4 + 8 >> 2]);
  }
  __stack_pointer = $4 + 32 | 0;
  return HEAP32[$4 + 16 >> 2] + 2 | 0;
 }
 
 function jsiHandleIOEventForConsole($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  jsiSetBusy(1, 1);
  HEAP32[$2 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 4 >> 2] < HEAP32[$2 + 8 >> 2]) {
    jsiHandleConsoleChar(HEAP8[HEAP32[$2 + 12 >> 2] + HEAP32[$2 + 4 >> 2] | 0] << 24 >> 24);
    HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
    continue;
   }
   break;
  };
  jsiSetBusy(1, 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsiHandleConsoleChar($0) {
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 31 | 0] = $0;
  block3 : {
   if (jsiPasswordProtected() & 1) {
    if (!(HEAPU8[$1 + 31 | 0] != 13 & HEAPU8[$1 + 31 | 0] != 10)) {
     HEAP32[$1 + 24 >> 2] = jsvObjectGetChildIfExists(HEAP32[92131], 138090);
     block1 : {
      if (!HEAP32[$1 + 24 >> 2]) {
       break block1
      }
      if (jsvCompareString(HEAP32[92148], HEAP32[$1 + 24 >> 2], 0, 0, 0)) {
       break block1
      }
      HEAP16[184294] = HEAPU16[184294] & -1025;
     }
     jsvUnLock(HEAP32[$1 + 24 >> 2]);
     jsiClearInputLine(0);
     block2 : {
      if (jsiPasswordProtected() & 1) {
       jsiConsolePrintString(141448);
       break block2;
      }
      jsiConsolePrintString(147991);
      HEAP8[368596] = 1;
      jsiConsoleReturnInputLine();
     }
     break block3;
    }
    if (jsvGetStringLength(HEAP32[92148]) >>> 0 < 20) {
     jsiAppendToInputLine(HEAP8[$1 + 31 | 0] << 24 >> 24)
    }
    break block3;
   }
   if (!(HEAPU8[$1 + 31 | 0] != 3 | HEAPU8[368604] < 2 | HEAPU8[368604] > 4)) {
    HEAP32[92138] = HEAP32[92138] & -6145
   }
   if (HEAPU8[368604] == 2) {
    if (!jsvGetStringLength(HEAP32[92148])) {
     HEAP16[184294] = HEAPU16[184294] & -3
    }
    HEAP16[184328] = HEAPU8[$1 + 31 | 0] << 8;
    HEAP8[368604] = 3;
    break block3;
   }
   block6 : {
    if (HEAPU8[368604] == 3) {
     HEAP16[184328] = HEAPU8[$1 + 31 | 0] | HEAPU16[184328];
     block5 : {
      if (!(HEAPU16[184328] & 8191)) {
       jsiPacketProcess();
       break block5;
      }
      HEAP8[368604] = 4;
     }
     break block6;
    }
    block7 : {
     if (HEAPU8[368604] == 4) {
      jsiAppendToInputLine(HEAP8[$1 + 31 | 0] << 24 >> 24);
      if (HEAP32[50001] >= (HEAPU16[184328] & 8191)) {
       jsiPacketProcess()
      }
      break block7;
     }
     block8 : {
      if (!HEAPU8[$1 + 31 | 0]) {
       HEAP8[368604] = 0;
       break block8;
      }
      block9 : {
       if (HEAPU8[$1 + 31 | 0] == 1) {
        if (HEAPU8[368604] == 5) {
         jsiPacketStart()
        }
        break block9;
       }
       if (HEAPU8[$1 + 31 | 0] != 3) {
        block10 : {
         if (HEAPU8[$1 + 31 | 0] == 5) {
          if (!jsvGetStringLength(HEAP32[92148])) {
           HEAP32[$1 + 4 >> 2] = 142110;
           HEAP32[$1 >> 2] = 141988;
           jsiConsolePrintf(147321, $1);
          }
          break block10;
         }
         block11 : {
          if (HEAPU8[$1 + 31 | 0] == 16) {
           if (!jsvGetStringLength(HEAP32[92148])) {
            HEAP16[184294] = HEAPU16[184294] | 2
           }
           HEAP8[368604] = 5;
           break block11;
          }
          block12 : {
           if (HEAPU8[$1 + 31 | 0] == 27) {
            HEAP8[368604] = 6;
            break block12;
           }
           block15 : {
            if (HEAPU8[368604] == 6) {
             HEAP8[368604] = 0;
             block13 : {
              if (HEAPU8[$1 + 31 | 0] == 79) {
               HEAP8[368604] = 7;
               break block13;
              }
              block14 : {
               if (HEAPU8[$1 + 31 | 0] == 91) {
                HEAP8[368604] = 8;
                break block14;
               }
               if (HEAPU8[$1 + 31 | 0] == 10) {
                jsiHandleNewLine(0)
               }
              }
             }
             break block15;
            }
            block22 : {
             if (HEAPU8[368604] == 7) {
              HEAP8[368604] = 0;
              block16 : {
               if (HEAPU8[$1 + 31 | 0] == 70) {
                jsiHandleEnd();
                break block16;
               }
               block17 : {
                if (HEAPU8[$1 + 31 | 0] == 72) {
                 jsiHandleHome();
                 break block17;
                }
                block18 : {
                 if (HEAPU8[$1 + 31 | 0] == 111) {
                  jsiHandleConsoleChar(47);
                  break block18;
                 }
                 block19 : {
                  if (HEAPU8[$1 + 31 | 0] == 106) {
                   jsiHandleConsoleChar(42);
                   break block19;
                  }
                  block20 : {
                   if (HEAPU8[$1 + 31 | 0] == 109) {
                    jsiHandleConsoleChar(45);
                    break block20;
                   }
                   block21 : {
                    if (HEAPU8[$1 + 31 | 0] == 107) {
                     jsiHandleConsoleChar(43);
                     break block21;
                    }
                    if (HEAPU8[$1 + 31 | 0] == 77) {
                     jsiHandleConsoleChar(13)
                    }
                   }
                  }
                 }
                }
               }
              }
              break block22;
             }
             block34 : {
              if (HEAPU8[368604] == 8) {
               HEAP8[368604] = 0;
               block24 : {
                if (!(HEAP8[$1 + 31 | 0] << 24 >> 24 < 48 | HEAP8[$1 + 31 | 0] << 24 >> 24 > 57)) {
                 HEAP16[184329] = (HEAP8[$1 + 31 | 0] << 24 >> 24) - 48;
                 HEAP8[368604] = 9;
                 break block24;
                }
                block25 : {
                 if (HEAPU8[$1 + 31 | 0] == 68) {
                  if (!HEAP32[92150]) {
                   break block25
                  }
                  if ((jsvGetCharInString(HEAP32[92148], HEAP32[92150] - 1 | 0) | 0) == 10) {
                   break block25
                  }
                  HEAP32[92150] = HEAP32[92150] - 1;
                  if (jsiShowInputLine() & 1) {
                   jsiConsolePrintString(141296)
                  }
                  break block25;
                 }
                 block26 : {
                  if (HEAPU8[$1 + 31 | 0] == 67) {
                   if (HEAPU32[92150] >= jsvGetStringLength(HEAP32[92148]) >>> 0) {
                    break block26
                   }
                   if ((jsvGetCharInString(HEAP32[92148], HEAP32[92150]) | 0) == 10) {
                    break block26
                   }
                   HEAP32[92150] = HEAP32[92150] + 1;
                   if (jsiShowInputLine() & 1) {
                    jsiConsolePrintString(141309)
                   }
                   break block26;
                  }
                  block29 : {
                   if (HEAPU8[$1 + 31 | 0] == 65) {
                    HEAP32[$1 + 20 >> 2] = jsvGetStringLength(HEAP32[92148]);
                    block28 : {
                     block27 : {
                      if (HEAP32[$1 + 20 >> 2]) {
                       if (!(jsiIsInHistory(HEAP32[92148]) & 1)) {
                        break block27
                       }
                      }
                      if (HEAP32[92150] != HEAP32[$1 + 20 >> 2]) {
                       break block27
                      }
                      jsiChangeToHistory(1);
                      break block28;
                     }
                     jsiHandleMoveUpDown(-1);
                    }
                    break block29;
                   }
                   block32 : {
                    if (HEAPU8[$1 + 31 | 0] == 66) {
                     HEAP32[$1 + 16 >> 2] = jsvGetStringLength(HEAP32[92148]);
                     block31 : {
                      block30 : {
                       if (HEAP32[$1 + 16 >> 2]) {
                        if (!(jsiIsInHistory(HEAP32[92148]) & 1)) {
                         break block30
                        }
                       }
                       if (HEAP32[92150] != HEAP32[$1 + 16 >> 2]) {
                        break block30
                       }
                       jsiChangeToHistory(0);
                       break block31;
                      }
                      jsiHandleMoveUpDown(1);
                     }
                     break block32;
                    }
                    block33 : {
                     if (HEAPU8[$1 + 31 | 0] == 70) {
                      jsiHandleEnd();
                      break block33;
                     }
                     if (HEAPU8[$1 + 31 | 0] == 72) {
                      jsiHandleHome()
                     }
                    }
                   }
                  }
                 }
                }
               }
               break block34;
              }
              block36 : {
               if (HEAPU8[368604] == 9) {
                if (!(HEAP8[$1 + 31 | 0] << 24 >> 24 < 48 | HEAP8[$1 + 31 | 0] << 24 >> 24 > 57)) {
                 HEAP16[184329] = ((HEAP8[$1 + 31 | 0] << 24 >> 24) + Math_imul(HEAPU16[184329], 10) | 0) - 48;
                 break block36;
                }
                block37 : {
                 if (HEAPU8[$1 + 31 | 0] == 100) {
                  HEAP16[184305] = HEAPU16[184329];
                  break block37;
                 }
                 block38 : {
                  if (HEAPU8[$1 + 31 | 0] == 72) {
                   if (HEAPU16[184329] == 2) {
                    jsiClearInputLine(1)
                   }
                   break block38;
                  }
                  if (HEAPU8[$1 + 31 | 0] == 126) {
                   block39 : {
                    if (HEAPU16[184329] == 1) {
                     jsiHandleHome();
                     break block39;
                    }
                    block40 : {
                     if (HEAPU16[184329] == 3) {
                      jsiHandleDelete(0);
                      break block40;
                     }
                     block41 : {
                      if (HEAPU16[184329] == 4) {
                       jsiHandleEnd();
                       break block41;
                      }
                      block42 : {
                       if (HEAPU16[184329] == 5) {
                        jsiHandlePageUpDown(0);
                        break block42;
                       }
                       if (HEAPU16[184329] == 6) {
                        jsiHandlePageUpDown(1)
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
                HEAP8[368604] = 0;
                break block36;
               }
               HEAP8[368604] = 0;
               block44 : {
                if (!(HEAPU8[$1 + 31 | 0] != 8 & HEAPU8[$1 + 31 | 0] != 127)) {
                 jsiHandleDelete(1);
                 break block44;
                }
                block46 : {
                 if (!(HEAPU8[$1 + 31 | 0] != 10 | HEAPU8[368604] != 1)) {
                  HEAP8[368604] = 0;
                  break block46;
                 }
                 block48 : {
                  if (!(HEAPU8[$1 + 31 | 0] != 13 & HEAPU8[$1 + 31 | 0] != 10)) {
                   if (HEAPU8[$1 + 31 | 0] == 13) {
                    HEAP8[368604] = 1
                   }
                   jsiHandleNewLine(1);
                   break block48;
                  }
                  block50 : {
                   block49 : {
                    if (HEAPU8[$1 + 31 | 0] != 9) {
                     break block49
                    }
                    if (!(jsiEcho() & 1)) {
                     break block49
                    }
                    jsiTabComplete();
                    break block50;
                   }
                   if (!(HEAPU8[$1 + 31 | 0] != 9 & HEAPU8[$1 + 31 | 0] < 32)) {
                    HEAP8[$1 + 14 | 0] = HEAPU8[$1 + 31 | 0];
                    HEAP8[$1 + 15 | 0] = 0;
                    HEAP32[$1 + 8 >> 2] = HEAPU8[$1 + 31 | 0] == 9 ? 147023 : $1 + 14 | 0;
                    jsiAppendStringToInputLine(HEAP32[$1 + 8 >> 2]);
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
  __stack_pointer = $1 + 32 | 0;
 }
 
 function jsiPacketProcess() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $0 = __stack_pointer - 144 | 0;
  __stack_pointer = $0;
  HEAP16[$0 + 142 >> 1] = HEAPU16[184328] & 57344;
  HEAP16[184328] = HEAPU16[184328] & 8191;
  block1 : {
   if (HEAPU16[$0 + 142 >> 1] == 8192) {
    HEAP32[$0 + 136 >> 2] = jspEvaluateExpressionVar(HEAP32[92148]);
    block : {
     if (jspHasError() & 1) {
      jsiConsolePrintChar(21);
      jsiCheckErrors(1);
      break block;
     }
     jsiConsolePrintChar(6);
     HEAP32[$0 + 132 >> 2] = jswrap_espruino_toJS(HEAP32[$0 + 136 >> 2]);
     jsiPacketReply(0, HEAP32[$0 + 132 >> 2]);
     jsvUnLock(HEAP32[$0 + 132 >> 2]);
    }
    jsvUnLock(HEAP32[$0 + 136 >> 2]);
    break block1;
   }
   block2 : {
    if (HEAPU16[$0 + 142 >> 1] == 16384) {
     HEAP32[$0 + 128 >> 2] = jswrap_json_parse_liberal(HEAP32[92148], 1);
     HEAP8[$0 + 127 | 0] = jsvIsObject(HEAP32[$0 + 128 >> 2]) & 1;
     if (HEAP8[$0 + 127 | 0] & 1) {
      HEAP8[$0 + 127 | 0] = jsiExecuteEventCallbackOn(141294, 125065, 1, $0 + 128 | 0) & 1
     }
     jsvUnLock(HEAP32[$0 + 128 >> 2]);
     jsiConsolePrintChar(HEAP8[$0 + 127 | 0] & 1 ? 6 : 21);
     break block2;
    }
    block4 : {
     if (HEAPU16[$0 + 142 >> 1] == 40960) {
      HEAP32[$0 + 120 >> 2] = jswrap_json_parse_liberal(HEAP32[92148], 1);
      HEAP8[$0 + 119 | 0] = jsvIsObject(HEAP32[$0 + 120 >> 2]) & 1;
      if (HEAP8[$0 + 119 | 0] & 1) {
       HEAP32[$0 + 112 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 120 >> 2], 135472);
       HEAP8[$0 + 119 | 0] = jsvIsString(HEAP32[$0 + 112 >> 2]) & 1;
       HEAP32[$0 + 108 >> 2] = jswrap_storage_read(HEAP32[$0 + 112 >> 2], 0, 0);
       block3 : {
        if (HEAP32[$0 + 108 >> 2]) {
         jsiConsolePrintChar(6);
         HEAP32[$0 + 104 >> 2] = jsvGetStringLength(HEAP32[$0 + 108 >> 2]);
         HEAP32[$0 + 100 >> 2] = 0;
         while (1) {
          if (HEAPU32[$0 + 100 >> 2] < HEAPU32[$0 + 104 >> 2]) {
           HEAP32[$0 + 96 >> 2] = jsvNewFromStringVar(HEAP32[$0 + 108 >> 2], HEAP32[$0 + 100 >> 2], 1024);
           jsiPacketReply(32768, HEAP32[$0 + 96 >> 2]);
           jsvUnLock(HEAP32[$0 + 96 >> 2]);
           HEAP32[$0 + 100 >> 2] = HEAP32[$0 + 100 >> 2] + 1024;
           continue;
          }
          break;
         };
         break block3;
        }
        HEAP8[$0 + 119 | 0] = 0;
       }
       jsvUnLock(HEAP32[$0 + 112 >> 2]);
       if (HEAP8[$0 + 119 | 0] & 1) {
        jsiPacketReply(32768, 0)
       }
      }
      if (!(HEAP8[$0 + 119 | 0] & 1)) {
       jsiConsolePrintChar(21)
      }
      break block4;
     }
     block5 : {
      if (HEAPU16[$0 + 142 >> 1] == 24576) {
       jsiPacketFileEnd();
       HEAP32[$0 + 92 >> 2] = jswrap_json_parse_liberal(HEAP32[92148], 1);
       HEAP8[$0 + 91 | 0] = jsvIsObject(HEAP32[$0 + 92 >> 2]) & 1;
       if (HEAP8[$0 + 91 | 0] & 1) {
        HEAP32[$0 + 84 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 92 >> 2], 135472);
        HEAP8[$0 + 91 | 0] = jsvIsString(HEAP32[$0 + 84 >> 2]) & 1;
        if (HEAP8[$0 + 91 | 0] & 1) {
         HEAP8[$0 + 91 | 0] = (jsvObjectGetIntegerChild(HEAP32[$0 + 92 >> 2], 127743) | 0) != 0
        }
        jsvUnLock(HEAP32[$0 + 84 >> 2]);
       }
       if (HEAP8[$0 + 91 | 0] & 1) {
        jsvObjectSetChildAndUnLock(HEAP32[92131], 141280, HEAP32[$0 + 92 >> 2]);
        jsiPacketFileSetTimeout(1);
       }
       jsvUnLock(HEAP32[$0 + 92 >> 2]);
       jsiConsolePrintChar(HEAP8[$0 + 91 | 0] & 1 ? 6 : 21);
       break block5;
      }
      block8 : {
       if (HEAPU16[$0 + 142 >> 1] == 32768) {
        HEAP32[$0 + 80 >> 2] = jsvObjectGetChildIfExists(HEAP32[92131], 141280);
        HEAP32[$0 + 76 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 80 >> 2], 135472);
        block7 : {
         if (!(!HEAP32[$0 + 80 >> 2] | !HEAP32[$0 + 76 >> 2])) {
          HEAP32[$0 + 68 >> 2] = jsvObjectGetIntegerChild(HEAP32[$0 + 80 >> 2], 127743);
          HEAP32[$0 + 64 >> 2] = jsvObjectGetIntegerChild(HEAP32[$0 + 80 >> 2], 127304);
          jsfNameFromVar($0 + 36 | 0, HEAP32[$0 + 76 >> 2]);
          $3 = HEAP32[92148];
          $4 = HEAP32[$0 + 64 >> 2];
          $5 = HEAP32[$0 + 68 >> 2];
          HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 60 >> 2];
          $1 = HEAP32[$0 + 56 >> 2];
          $2 = HEAP32[$0 + 52 >> 2];
          HEAP32[$0 + 24 >> 2] = $2;
          HEAP32[$0 + 28 >> 2] = $1;
          $2 = HEAP32[$0 + 48 >> 2];
          $1 = HEAP32[$0 + 44 >> 2];
          HEAP32[$0 + 16 >> 2] = $1;
          HEAP32[$0 + 20 >> 2] = $2;
          $1 = HEAP32[$0 + 40 >> 2];
          $2 = HEAP32[$0 + 36 >> 2];
          HEAP32[$0 + 8 >> 2] = $2;
          HEAP32[$0 + 12 >> 2] = $1;
          HEAP8[$0 + 75 | 0] = jsfWriteFile($0 + 8 | 0, $3, 0, $4, $5) & 1;
          HEAP32[$0 + 64 >> 2] = HEAPU16[184328] + HEAP32[$0 + 64 >> 2];
          jsvObjectSetChildAndUnLock(HEAP32[$0 + 80 >> 2], 127304, jsvNewFromInteger(HEAP32[$0 + 64 >> 2]));
          if (HEAP32[$0 + 64 >> 2] >= HEAP32[$0 + 68 >> 2]) {
           jsiPacketFileEnd()
          }
          break block7;
         }
         HEAP8[$0 + 75 | 0] = 0;
        }
        jsvUnLock2(HEAP32[$0 + 76 >> 2], HEAP32[$0 + 80 >> 2]);
        jsiConsolePrintChar(HEAP8[$0 + 75 | 0] & 1 ? 6 : 21);
        jsiPacketFileSetTimeout(1);
        break block8;
       }
       jsiConsolePrintChar(21);
      }
     }
    }
   }
  }
  jsiPacketExit();
  __stack_pointer = $0 + 144 | 0;
 }
 
 function jsiPacketStart() {
  HEAP8[368604] = 2;
  jsiInputLineCursorMoved();
  jsvObjectSetChildAndUnLock(HEAP32[92131], 141041, HEAP32[92148]);
  jsvObjectSetChildAndUnLock(HEAP32[92131], 140733, jsiSetTimeout(561, 5.0e3));
  HEAP32[92148] = jsvNewFromEmptyString_815();
 }
 
 function jsiIdle() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $0 = __stack_pointer - 400 | 0;
  __stack_pointer = $0;
  if (HEAPU8[368606] < 255) {
   HEAP8[368606] = HEAPU8[368606] + 1
  }
  HEAP8[$0 + 399 | 0] = 0;
  HEAP32[$0 + 312 >> 2] = jshGetEventsUsed();
  while (1) {
   $4 = HEAP32[$0 + 312 >> 2];
   HEAP32[$0 + 312 >> 2] = $4 - 1;
   $1 = 0;
   if (($4 | 0) > 0) {
    $4 = jshPopIOEvent($0 + 320 | 0, $0 + 316 | 0);
    HEAP8[$0 + 398 | 0] = $4;
    $1 = ($4 & 255) != 0;
   }
   if ($1) {
    jsiSetBusy(1, 1);
    HEAP8[$0 + 399 | 0] = 1;
    HEAP8[$0 + 311 | 0] = HEAPU8[$0 + 398 | 0] & 31;
    HEAP8[368606] = 0;
    block : {
     if (HEAPU8[$0 + 311 | 0] == HEAPU8[2e5]) {
      jsiHandleIOEventForConsole($0 + 320 | 0, HEAP32[$0 + 316 >> 2]);
      break block;
     }
     block2 : {
      if (!(HEAPU8[$0 + 311 | 0] < 17 | HEAPU8[$0 + 311 | 0] > 22)) {
       HEAP32[$0 + 304 >> 2] = jsvSkipNameAndUnLock(jsiGetClassNameFromDevice(HEAPU8[$0 + 311 | 0]));
       if (jsvIsObject(HEAP32[$0 + 304 >> 2]) & 1) {
        $4 = jsiHandleIOEventForSerial(HEAP32[$0 + 304 >> 2], HEAPU8[$0 + 398 | 0], $0 + 320 | 0, HEAP32[$0 + 316 >> 2]);
        HEAP32[$0 + 312 >> 2] = HEAP32[$0 + 312 >> 2] - $4;
       }
       jsvUnLock(HEAP32[$0 + 304 >> 2]);
       break block2;
      }
      block4 : {
       if (!(HEAPU8[$0 + 311 | 0] < 23 | HEAPU8[$0 + 311 | 0] > 23)) {
        HEAP32[$0 + 300 >> 2] = jsvSkipNameAndUnLock(jsiGetClassNameFromDevice(HEAPU8[$0 + 398 | 0] - 1 & 31));
        if (jsvIsObject(HEAP32[$0 + 300 >> 2]) & 1) {
         if (HEAPU8[$0 + 398 | 0] & 32) {
          jsiExecuteEventCallbackName(HEAP32[$0 + 300 >> 2], 136767, 0, 0)
         }
         if (HEAPU8[$0 + 398 | 0] & 64) {
          jsiExecuteEventCallbackName(HEAP32[$0 + 300 >> 2], 123607, 0, 0)
         }
        }
        jsvUnLock(HEAP32[$0 + 300 >> 2]);
        break block4;
       }
       block5 : {
        if (HEAPU8[$0 + 311 | 0] == 24) {
         jswOnCustomEvent(HEAPU8[$0 + 398 | 0], $0 + 320 | 0, HEAP32[$0 + 316 >> 2]);
         break block5;
        }
        block6 : {
         if (HEAPU8[$0 + 311 | 0] == 25) {
          jsbangle_exec_pending($0 + 320 | 0, HEAP32[$0 + 316 >> 2]);
          break block6;
         }
         if (!(!HEAPU8[$0 + 311 | 0] | HEAPU8[$0 + 311 | 0] > 16)) {
          HEAP32[$0 + 296 >> 2] = jsvLock(HEAPU16[184293]);
          jsvObjectIteratorNew($0 + 292 | 0, HEAP32[$0 + 296 >> 2]);
          while (1) {
           if (jsvObjectIteratorHasValue_820($0 + 292 | 0) & 1) {
            HEAP8[$0 + 291 | 0] = 0;
            HEAP32[$0 + 284 >> 2] = jsvObjectIteratorGetValue_821($0 + 292 | 0);
            HEAP8[$0 + 283 | 0] = jshGetPinFromVarAndUnLock(jsvObjectGetChildIfExists(HEAP32[$0 + 284 >> 2], 135427));
            if (jshIsEventForPin(HEAPU8[$0 + 398 | 0], HEAPU8[$0 + 283 | 0]) & 1) {
             $5 = jshGetSystemTime();
             HEAP32[$0 + 272 >> 2] = $5;
             $2 = i64toi32_i32$HIGH_BITS;
             HEAP32[$0 + 276 >> 2] = $2;
             HEAP32[$0 + 268 >> 2] = HEAP32[$0 + 320 >> 2];
             $2 = HEAP32[$0 + 272 >> 2];
             if ($2 >>> 0 < HEAPU32[$0 + 268 >> 2]) {
              $5 = HEAP32[$0 + 272 >> 2];
              $4 = $5;
              $2 = HEAP32[$0 + 276 >> 2];
              $1 = 1;
              $1 = $2 - $1 | 0;
              HEAP32[$0 + 272 >> 2] = $4;
              HEAP32[$0 + 276 >> 2] = $1;
             }
             $1 = HEAP32[$0 + 268 >> 2];
             $2 = $1;
             $4 = HEAP32[$0 + 272 >> 2];
             $1 = HEAP32[$0 + 276 >> 2];
             $4 = $1;
             $6 = $10;
             $1 = $2;
             $1 = $6 | $1;
             HEAP32[$0 + 256 >> 2] = $1;
             $2 = $4;
             HEAP32[$0 + 260 >> 2] = $2;
             HEAP8[$0 + 255 | 0] = (HEAPU8[$0 + 398 | 0] & 32) != 0;
             HEAP8[$0 + 254 | 0] = 0;
             HEAP8[$0 + 254 | 0] = (HEAPU8[$0 + 398 | 0] & 64) != 0;
             HEAP8[$0 + 253 | 0] = 0;
             HEAP32[$0 + 248 >> 2] = jsvObjectGetIntegerChild(HEAP32[$0 + 284 >> 2], 138005);
             block8 : {
              if (HEAP32[$0 + 248 >> 2] <= 0) {
               HEAP8[$0 + 253 | 0] = (HEAPU8[$0 + 254 | 0] ^ -1) & 1;
               jsvObjectSetChildAndUnLock(HEAP32[$0 + 284 >> 2], 137340, jsvNewFromBool(HEAP8[$0 + 255 | 0] & 1));
               break block8;
              }
              HEAP8[$0 + 247 | 0] = jsvObjectGetBoolChild(HEAP32[$0 + 284 >> 2], 137340) & 1;
              HEAP32[$0 + 240 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 284 >> 2], 124449);
              block10 : {
               if (HEAP32[$0 + 240 >> 2]) {
                $2 = HEAP32[92162];
                $4 = $2;
                $1 = HEAP32[92163];
                $3 = $1;
                $1 = jsvGetLongIntegerAndUnLock(jsvObjectGetChildIfExists(HEAP32[$0 + 240 >> 2], 137570));
                $6 = $1;
                $2 = i64toi32_i32$HIGH_BITS;
                $1 = $2;
                $2 = $3;
                $3 = $2 + $1 | 0;
                $5 = $4 + $6 | 0;
                $3 = $5 >>> 0 < $6 >>> 0 ? $3 + 1 | 0 : $3;
                HEAP32[$0 + 232 >> 2] = $5;
                HEAP32[$0 + 236 >> 2] = $3;
                $3 = HEAP32[$0 + 248 >> 2];
                $4 = $3 >> 31;
                $7 = $3;
                $8 = $4;
                $4 = HEAP32[$0 + 256 >> 2];
                $2 = $4;
                $3 = HEAP32[$0 + 260 >> 2];
                $5 = $3;
                $4 = HEAP32[92163];
                $9 = $4;
                $3 = HEAP32[92162];
                $6 = $3;
                $1 = $2 - $3 | 0;
                $4 = $5;
                $3 = $9;
                $5 = $3 + ($2 >>> 0 < $6 >>> 0) | 0;
                $5 = $4 - $5 | 0;
                $2 = $5;
                $6 = $1;
                $4 = $7;
                $3 = $1 + $4 | 0;
                $5 = $8;
                $1 = $5 + $2 | 0;
                $1 = $3 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
                jsvUnLock(jsvObjectSetChild(HEAP32[$0 + 240 >> 2], 137570, jsvNewFromLongInteger($3, $1)));
                jsvObjectSetChildAndUnLock(HEAP32[$0 + 240 >> 2], 137340, jsvNewFromBool(HEAP8[$0 + 255 | 0] & 1));
                block9 : {
                 if (!(HEAP8[$0 + 254 | 0] & 1)) {
                  $4 = HEAP32[$0 + 260 >> 2];
                  $2 = $4;
                  $1 = HEAP32[$0 + 256 >> 2];
                  $5 = $1;
                  $4 = HEAP32[$0 + 232 >> 2];
                  $6 = $4;
                  $1 = HEAP32[$0 + 236 >> 2];
                  $4 = $1;
                  $1 = $2;
                  if ($5 >>> 0 <= $6 >>> 0 & ($4 | 0) >= ($1 | 0) | ($1 | 0) < ($4 | 0) | (HEAP8[$0 + 255 | 0] & 1) == (HEAP8[$0 + 247 | 0] & 1)) {
                   break block9
                  }
                 }
                 HEAP8[$0 + 253 | 0] = (HEAPU8[$0 + 254 | 0] ^ -1) & 1;
                 $5 = HEAP32[$0 + 232 >> 2];
                 $6 = $5;
                 $1 = HEAP32[$0 + 236 >> 2];
                 $3 = $1;
                 $1 = HEAP32[$0 + 248 >> 2];
                 $5 = $1 >> 31;
                 $7 = $5;
                 $4 = $1;
                 $2 = $6 - $1 | 0;
                 $5 = $3;
                 $1 = $7;
                 $3 = $1 + ($4 >>> 0 > $6 >>> 0) | 0;
                 $3 = $5 - $3 | 0;
                 HEAP32[$0 + 256 >> 2] = $2;
                 HEAP32[$0 + 260 >> 2] = $3;
                 jsvObjectSetChildAndUnLock(HEAP32[$0 + 284 >> 2], 137340, jsvNewFromBool(HEAP8[$0 + 255 | 0] & 1));
                 jsiClearTimeout(HEAP32[$0 + 240 >> 2]);
                 jsvObjectRemoveChild(HEAP32[$0 + 284 >> 2], 124449);
                }
                break block10;
               }
               block12 : {
                if (!(HEAP8[$0 + 254 | 0] & 1 | (HEAP8[$0 + 255 | 0] & 1) == (HEAP8[$0 + 247 | 0] & 1))) {
                 HEAP32[$0 + 240 >> 2] = jsvNewObject();
                 if (HEAP32[$0 + 240 >> 2]) {
                  jsvObjectSetChild(HEAP32[$0 + 240 >> 2], 136439, HEAP32[$0 + 284 >> 2]);
                  $3 = HEAP32[$0 + 248 >> 2];
                  $6 = $3 >> 31;
                  $7 = $3;
                  $8 = $6;
                  $6 = HEAP32[$0 + 256 >> 2];
                  $5 = $6;
                  $3 = HEAP32[$0 + 260 >> 2];
                  $2 = $3;
                  $6 = HEAP32[92163];
                  $9 = $6;
                  $3 = HEAP32[92162];
                  $4 = $3;
                  $1 = $5 - $3 | 0;
                  $6 = $2;
                  $3 = $9;
                  $2 = $3 + ($4 >>> 0 > $5 >>> 0) | 0;
                  $2 = $6 - $2 | 0;
                  $4 = $1;
                  $6 = $7;
                  $3 = $1 + $6 | 0;
                  $5 = $2;
                  $2 = $8;
                  $1 = $5 + $2 | 0;
                  $1 = $4 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
                  jsvObjectSetChildAndUnLock(HEAP32[$0 + 240 >> 2], 137570, jsvNewFromLongInteger($3, $1));
                  jsvObjectSetChildAndUnLock(HEAP32[$0 + 240 >> 2], 140265, jsvObjectGetChildIfExists(HEAP32[$0 + 284 >> 2], 140265));
                  jsvObjectSetChildAndUnLock(HEAP32[$0 + 240 >> 2], 137575, jsvObjectGetChildIfExists(HEAP32[$0 + 284 >> 2], 137575));
                  jsvObjectSetChildAndUnLock(HEAP32[$0 + 240 >> 2], 135427, jsvNewFromPin(HEAPU8[$0 + 283 | 0]));
                  jsvObjectSetChildAndUnLock(HEAP32[$0 + 240 >> 2], 137340, jsvNewFromBool(HEAP8[$0 + 255 | 0] & 1));
                  jsiTimerAdd(HEAP32[$0 + 240 >> 2]);
                  jsvObjectSetChild(HEAP32[$0 + 284 >> 2], 124449, HEAP32[$0 + 240 >> 2]);
                 }
                 break block12;
                }
                if (HEAP8[$0 + 254 | 0] & 1) {
                 jsvObjectSetChildAndUnLock(HEAP32[$0 + 284 >> 2], 137340, jsvNewFromBool(HEAP8[$0 + 255 | 0] & 1))
                }
               }
              }
              jsvUnLock(HEAP32[$0 + 240 >> 2]);
             }
             if (HEAP8[$0 + 253 | 0] & 1) {
              $1 = HEAP32[$0 + 256 >> 2];
              $6 = HEAP32[$0 + 260 >> 2];
              HEAP32[$0 + 228 >> 2] = jsvNewFromFloat(jshGetMillisecondsFromTime($1, $6) / 1.0e3);
              if (jsiShouldExecuteWatch(HEAP32[$0 + 284 >> 2], HEAP8[$0 + 255 | 0] & 1) & 1) {
               HEAP32[$0 + 224 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 284 >> 2], 140265);
               HEAP8[$0 + 223 | 0] = jsvObjectGetBoolChild(HEAP32[$0 + 284 >> 2], 127745) & 1;
               HEAP32[$0 + 216 >> 2] = jsvNewObject();
               if (HEAP32[$0 + 216 >> 2]) {
                jsvObjectSetChildAndUnLock(HEAP32[$0 + 216 >> 2], 137340, jsvNewFromBool(HEAP8[$0 + 255 | 0] & 1));
                jsvObjectSetChildAndUnLock(HEAP32[$0 + 216 >> 2], 137575, jsvObjectGetChildIfExists(HEAP32[$0 + 284 >> 2], 137575));
                jsvObjectSetChild(HEAP32[$0 + 216 >> 2], 137570, HEAP32[$0 + 228 >> 2]);
                jsvObjectSetChildAndUnLock(HEAP32[$0 + 216 >> 2], 135427, jsvNewFromPin(HEAPU8[$0 + 283 | 0]));
                HEAP8[$0 + 215 | 0] = jshGetEventDataPin(HEAPU8[$0 + 311 | 0]);
                if (jshIsPinValid(HEAPU8[$0 + 215 | 0]) & 1) {
                 jsvObjectSetChildAndUnLock(HEAP32[$0 + 216 >> 2], 140390, jsvNewFromBool((HEAPU8[$0 + 398 | 0] & 64) != 0))
                }
               }
               if (!(jsiExecuteEventCallback(0, HEAP32[$0 + 224 >> 2], 1, $0 + 216 | 0) & 1 | !(HEAP8[$0 + 223 | 0] & 1))) {
                jsError(142368, 0);
                HEAP8[368518] = HEAPU8[368518] | 4;
                HEAP8[$0 + 223 | 0] = 0;
               }
               jsvUnLock(HEAP32[$0 + 216 >> 2]);
               if (!(HEAP8[$0 + 223 | 0] & 1)) {
                jsvObjectIteratorRemoveAndGotoNext($0 + 292 | 0, HEAP32[$0 + 296 >> 2]);
                HEAP8[$0 + 291 | 0] = 1;
                if (!(jsiIsWatchingPin(HEAPU8[$0 + 283 | 0]) & 1)) {
                 jshPinWatch(HEAPU8[$0 + 283 | 0], 0, 0)
                }
               }
               jsvUnLock(HEAP32[$0 + 224 >> 2]);
              }
              jsvObjectSetChildAndUnLock(HEAP32[$0 + 284 >> 2], 137575, HEAP32[$0 + 228 >> 2]);
             }
            }
            jsvUnLock(HEAP32[$0 + 284 >> 2]);
            if (!(HEAP8[$0 + 291 | 0] & 1)) {
             jsvObjectIteratorNext($0 + 292 | 0)
            }
            continue;
           }
           break;
          };
          jsvObjectIteratorFree_822($0 + 292 | 0);
          jsvUnLock(HEAP32[$0 + 296 >> 2]);
         }
        }
       }
      }
     }
    }
    continue;
   }
   break;
  };
  if ((jshGetEventsUsed() | 0) < 383) {
   jshSetFlowControlAllReady()
  }
  HEAP32[$0 + 200 >> 2] = -1;
  HEAP32[$0 + 204 >> 2] = 2147483647;
  $6 = jshGetSystemTime();
  HEAP32[$0 + 192 >> 2] = $6;
  $1 = i64toi32_i32$HIGH_BITS;
  HEAP32[$0 + 196 >> 2] = $1;
  $1 = HEAP32[$0 + 192 >> 2];
  $2 = $1;
  $6 = HEAP32[$0 + 196 >> 2];
  $3 = $6;
  $1 = HEAP32[92163];
  $7 = $1;
  $6 = HEAP32[92162];
  $4 = $6;
  $5 = $2 - $4 | 0;
  HEAP32[$0 + 184 >> 2] = $5;
  $1 = $3;
  $6 = $7;
  $3 = $6 + ($2 >>> 0 < $4 >>> 0) | 0;
  $3 = $1 - $3 | 0;
  HEAP32[$0 + 188 >> 2] = $3;
  $2 = HEAP32[$0 + 196 >> 2];
  $3 = HEAP32[$0 + 192 >> 2];
  HEAP32[92162] = $3;
  HEAP32[92163] = $2;
  HEAP32[$0 + 180 >> 2] = jsvLock(HEAPU16[184292]);
  jsvObjectIteratorNew($0 + 176 | 0, HEAP32[$0 + 180 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_820($0 + 176 | 0) & 1) {
    HEAP32[$0 + 172 >> 2] = jsvObjectIteratorGetValue_821($0 + 176 | 0);
    $2 = jsvGetLongIntegerAndUnLock(jsvObjectGetChildIfExists(HEAP32[$0 + 172 >> 2], 137570));
    HEAP32[$0 + 160 >> 2] = $2;
    $3 = i64toi32_i32$HIGH_BITS;
    HEAP32[$0 + 164 >> 2] = $3;
    $3 = HEAP32[$0 + 160 >> 2];
    $1 = $3;
    $2 = HEAP32[$0 + 164 >> 2];
    $5 = $2;
    $3 = HEAP32[$0 + 188 >> 2];
    $7 = $3;
    $2 = HEAP32[$0 + 184 >> 2];
    $4 = $2;
    $6 = $1 - $2 | 0;
    HEAP32[$0 + 152 >> 2] = $6;
    $3 = $5;
    $2 = $7;
    $5 = $2 + ($1 >>> 0 < $4 >>> 0) | 0;
    $5 = $3 - $5 | 0;
    HEAP32[$0 + 156 >> 2] = $5;
    $5 = HEAP32[$0 + 152 >> 2];
    $1 = HEAP32[$0 + 156 >> 2];
    jsvObjectSetChildAndUnLock(HEAP32[$0 + 172 >> 2], 137570, jsvNewFromLongInteger($5, $1));
    jsvUnLock(HEAP32[$0 + 172 >> 2]);
    jsvObjectIteratorNext($0 + 176 | 0);
    continue;
   }
   break;
  };
  jsvObjectIteratorFree_822($0 + 176 | 0);
  while (1) {
   HEAP16[184294] = HEAPU16[184294] & -5;
   jsvObjectIteratorNew($0 + 176 | 0, HEAP32[$0 + 180 >> 2]);
   while (1) {
    $4 = 0;
    if (jsvObjectIteratorHasValue_820($0 + 176 | 0) & 1) {
     $4 = (HEAPU16[184294] & 4) != 0 ^ -1
    }
    if ($4 & 1) {
     HEAP8[$0 + 151 | 0] = 0;
     HEAP32[$0 + 144 >> 2] = jsvObjectIteratorGetValue_821($0 + 176 | 0);
     $1 = jsvGetLongIntegerAndUnLock(jsvObjectGetChildIfExists(HEAP32[$0 + 144 >> 2], 137570));
     HEAP32[$0 + 136 >> 2] = $1;
     $5 = i64toi32_i32$HIGH_BITS;
     HEAP32[$0 + 140 >> 2] = $5;
     $5 = HEAP32[$0 + 136 >> 2];
     $3 = $5;
     $1 = HEAP32[$0 + 140 >> 2];
     if (($1 | 0) < 0) {
      $4 = 1
     } else {
      $4 = !$3 & ($1 | 0) <= 0
     }
     if ($4) {
      jsiSetBusy(1, 1);
      HEAP8[$0 + 399 | 0] = 1;
      HEAP32[$0 + 132 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 144 >> 2], 140265);
      HEAP32[$0 + 128 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 144 >> 2], 136439);
      HEAP8[$0 + 127 | 0] = 1;
      HEAP32[$0 + 120 >> 2] = 0;
      if (HEAP32[$0 + 128 >> 2]) {
       HEAP8[$0 + 119 | 0] = jsvObjectGetBoolChild(HEAP32[$0 + 128 >> 2], 137340) & 1;
       HEAP8[$0 + 118 | 0] = jsvObjectGetBoolChild(HEAP32[$0 + 144 >> 2], 137340) & 1;
       jsvObjectSetChildAndUnLock(HEAP32[$0 + 128 >> 2], 137340, jsvNewFromBool(HEAP8[$0 + 118 | 0] & 1));
       HEAP8[$0 + 127 | 0] = 0;
       if ((HEAP8[$0 + 119 | 0] & 1) != (HEAP8[$0 + 118 | 0] & 1)) {
        HEAP32[$0 + 112 >> 2] = jsvObjectGetIntegerChild(HEAP32[$0 + 128 >> 2], 138005);
        $3 = HEAP32[92162];
        $4 = $3;
        $1 = HEAP32[92163];
        $6 = $1;
        $3 = HEAP32[$0 + 140 >> 2];
        $7 = $3;
        $1 = HEAP32[$0 + 136 >> 2];
        $5 = $1;
        $2 = $1 + $4 | 0;
        $3 = $6;
        $1 = $7;
        $6 = $3 + $1 | 0;
        $6 = $2 >>> 0 < $5 >>> 0 ? $6 + 1 | 0 : $6;
        $3 = $6;
        $6 = HEAP32[$0 + 112 >> 2];
        $4 = $6 >> 31;
        $7 = $4;
        $5 = $6;
        $1 = $2 - $5 | 0;
        $4 = $3;
        $6 = $7;
        $2 = $6 + ($2 >>> 0 < $5 >>> 0) | 0;
        $2 = $4 - $2 | 0;
        HEAP32[$0 + 108 >> 2] = jsvNewFromFloat(jshGetMillisecondsFromTime($1, $2) / 1.0e3);
        if (jsiShouldExecuteWatch(HEAP32[$0 + 128 >> 2], HEAP8[$0 + 118 | 0] & 1) & 1) {
         HEAP32[$0 + 120 >> 2] = jsvNewObject();
         if (HEAP32[$0 + 120 >> 2]) {
          HEAP8[$0 + 127 | 0] = 1;
          jsvObjectSetChildAndUnLock(HEAP32[$0 + 120 >> 2], 137340, jsvNewFromBool(HEAP8[$0 + 118 | 0] & 1));
          jsvObjectSetChildAndUnLock(HEAP32[$0 + 120 >> 2], 137575, jsvObjectGetChildIfExists(HEAP32[$0 + 128 >> 2], 137575));
          jsvObjectSetChild(HEAP32[$0 + 120 >> 2], 137570, HEAP32[$0 + 108 >> 2]);
          jsvObjectSetChildAndUnLock(HEAP32[$0 + 120 >> 2], 135427, jsvObjectGetChildIfExists(HEAP32[$0 + 128 >> 2], 135427));
         }
        }
        jsvObjectSetChildAndUnLock(HEAP32[$0 + 128 >> 2], 137575, HEAP32[$0 + 108 >> 2]);
       }
      }
      HEAP8[$0 + 107 | 0] = 0;
      if (HEAP8[$0 + 127 | 0] & 1) {
       block14 : {
        if (HEAP32[$0 + 120 >> 2]) {
         HEAP8[$0 + 106 | 0] = jsiExecuteEventCallback(0, HEAP32[$0 + 132 >> 2], 1, $0 + 120 | 0) & 1;
         break block14;
        }
        HEAP32[$0 + 100 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 144 >> 2], 127293);
        HEAP8[$0 + 106 | 0] = jsiExecuteEventCallbackArgsArray(0, HEAP32[$0 + 132 >> 2], HEAP32[$0 + 100 >> 2]) & 1;
        jsvUnLock(HEAP32[$0 + 100 >> 2]);
       }
       if (!(HEAP8[$0 + 106 | 0] & 1)) {
        HEAP32[$0 + 96 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 144 >> 2], 127751);
        if (HEAP32[$0 + 96 >> 2]) {
         jsvUnLock(HEAP32[$0 + 96 >> 2]);
         jsError(142320, 0);
         HEAP8[368518] = HEAPU8[368518] | 4;
         HEAP8[$0 + 107 | 0] = 1;
        }
       }
      }
      jsvUnLock(HEAP32[$0 + 120 >> 2]);
      if (HEAP32[$0 + 128 >> 2]) {
       jsvObjectRemoveChild(HEAP32[$0 + 128 >> 2], 124449);
       if (HEAP8[$0 + 127 | 0] & 1) {
        HEAP8[$0 + 95 | 0] = jsvObjectGetBoolChild(HEAP32[$0 + 128 >> 2], 127745) & 1;
        if (!(HEAP8[$0 + 95 | 0] & 1)) {
         HEAP32[$0 + 88 >> 2] = jsvLock(HEAPU16[184293]);
         HEAP32[$0 + 84 >> 2] = jsvGetIndexOf(HEAP32[$0 + 88 >> 2], HEAP32[$0 + 128 >> 2], 1);
         if (HEAP32[$0 + 84 >> 2]) {
          jsvRemoveChildAndUnLock(HEAP32[$0 + 88 >> 2], HEAP32[$0 + 84 >> 2])
         }
         jsvUnLock(HEAP32[$0 + 88 >> 2]);
         HEAP8[$0 + 83 | 0] = jshGetPinFromVarAndUnLock(jsvObjectGetChildIfExists(HEAP32[$0 + 128 >> 2], 135427));
         if (!(jsiIsWatchingPin(HEAPU8[$0 + 83 | 0]) & 1)) {
          jshPinWatch(HEAPU8[$0 + 83 | 0], 0, 0)
         }
        }
       }
       jsvUnLock(HEAP32[$0 + 128 >> 2]);
      }
      HEAP32[$0 + 76 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 144 >> 2], 127751);
      block16 : {
       if (!(!HEAP32[$0 + 76 >> 2] | HEAP8[$0 + 107 | 0] & 1)) {
        $2 = HEAP32[$0 + 136 >> 2];
        $4 = $2;
        $3 = HEAP32[$0 + 140 >> 2];
        $1 = $3;
        $3 = jsvGetLongInteger(HEAP32[$0 + 76 >> 2]);
        $2 = i64toi32_i32$HIGH_BITS;
        $7 = $2;
        $5 = $3;
        $6 = $3 + $4 | 0;
        $2 = $1;
        $3 = $7;
        $1 = $2 + $3 | 0;
        HEAP32[$0 + 136 >> 2] = $6;
        $1 = $5 >>> 0 > $6 >>> 0 ? $1 + 1 | 0 : $1;
        HEAP32[$0 + 140 >> 2] = $1;
        $1 = HEAP32[$0 + 136 >> 2];
        $4 = HEAP32[$0 + 140 >> 2];
        jsvObjectSetChildAndUnLock(HEAP32[$0 + 144 >> 2], 137570, jsvNewFromLongInteger($1, $4));
        break block16;
       }
       jsvObjectIteratorRemoveAndGotoNext($0 + 176 | 0, HEAP32[$0 + 180 >> 2]);
       HEAP8[$0 + 151 | 0] = 1;
       HEAP32[$0 + 136 >> 2] = -1;
       HEAP32[$0 + 140 >> 2] = -1;
      }
      jsvUnLock2(HEAP32[$0 + 132 >> 2], HEAP32[$0 + 76 >> 2]);
     }
     $4 = HEAP32[$0 + 136 >> 2];
     $1 = HEAP32[$0 + 140 >> 2];
     block17 : {
      if (($1 | 0) < 0) {
       break block17
      }
      $2 = HEAP32[$0 + 136 >> 2];
      $5 = $2;
      $1 = HEAP32[$0 + 140 >> 2];
      $3 = $1;
      $2 = HEAP32[$0 + 204 >> 2];
      $6 = $2;
      $1 = HEAP32[$0 + 200 >> 2];
      $4 = $1;
      $2 = $3;
      $1 = $6;
      if ($4 >>> 0 <= $5 >>> 0 & ($2 | 0) >= ($1 | 0) | ($1 | 0) < ($2 | 0)) {
       break block17
      }
      $2 = HEAP32[$0 + 140 >> 2];
      $5 = HEAP32[$0 + 136 >> 2];
      HEAP32[$0 + 200 >> 2] = $5;
      HEAP32[$0 + 204 >> 2] = $2;
     }
     if (!(HEAP8[$0 + 151 | 0] & 1)) {
      jsvObjectIteratorNext($0 + 176 | 0)
     }
     jsvUnLock(HEAP32[$0 + 144 >> 2]);
     continue;
    }
    break;
   };
   jsvObjectIteratorFree_822($0 + 176 | 0);
   if (HEAPU16[184294] & 4) {
    continue
   }
   break;
  };
  jsvUnLock(HEAP32[$0 + 180 >> 2]);
  if (jswIdle() & 1) {
   HEAP8[$0 + 399 | 0] = 1
  }
  block18 : {
   if (!(HEAP8[$0 + 399 | 0] & 1)) {
    if (jsvArrayIsEmpty(HEAP32[92145]) & 1) {
     break block18
    }
   }
   HEAP8[368606] = 0;
  }
  if (HEAP8[$0 + 399 | 0] & 1) {
   jsiSetBusy(1, 0)
  }
  if (!(jspIsInterrupted() & 1)) {
   jsiExecuteEvents()
  }
  if (HEAPU16[184294] & 224) {
   jsiSetBusy(1, 1);
   HEAP16[$0 + 74 >> 1] = HEAPU16[184294];
   if ((HEAPU16[$0 + 74 >> 1] & 128) == 128) {
    jsiKill();
    jsvReset();
    jshReset();
    jsiSemiInit(0, 0);
    HEAP16[184294] = HEAPU16[184294] & 65407;
   }
   if ((HEAPU16[$0 + 74 >> 1] & 32) == 32) {
    jsvGarbageCollect();
    jsiSoftKill();
    jspSoftKill();
    jsvSoftKill();
    jsfSaveToFlash();
    jshReset();
    jsvSoftInit();
    jspSoftInit();
    jsiSoftInit(0);
    HEAP16[184294] = HEAPU16[184294] & 65503;
   }
   if ((HEAPU16[$0 + 74 >> 1] & 64) == 64) {
    HEAP32[$0 + 68 >> 2] = jsvObjectGetChildIfExists(HEAP32[92131], 139202);
    block19 : {
     if (HEAP32[$0 + 68 >> 2]) {
      jsfNameFromVarAndUnLock($0 + 40 | 0, HEAP32[$0 + 68 >> 2]);
      jsiKill();
      jsvReset();
      jshReset();
      jsiSemiInit(0, $0 + 40 | 0);
      HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 64 >> 2];
      $5 = HEAP32[$0 + 60 >> 2];
      $2 = HEAP32[$0 + 56 >> 2];
      HEAP32[$0 + 24 >> 2] = $2;
      HEAP32[$0 + 28 >> 2] = $5;
      $2 = HEAP32[$0 + 52 >> 2];
      $5 = HEAP32[$0 + 48 >> 2];
      HEAP32[$0 + 16 >> 2] = $5;
      HEAP32[$0 + 20 >> 2] = $2;
      $5 = HEAP32[$0 + 44 >> 2];
      $2 = HEAP32[$0 + 40 >> 2];
      HEAP32[$0 + 8 >> 2] = $2;
      HEAP32[$0 + 12 >> 2] = $5;
      HEAP32[$0 + 36 >> 2] = jsfReadFile($0 + 8 | 0, 0, 0);
      if (HEAP32[$0 + 36 >> 2]) {
       jsvUnLock2(jspEvaluateVar(HEAP32[$0 + 36 >> 2], 0, HEAP8[$0 + 67 | 0] << 24 >> 24 ? $0 + 40 | 0 : 139202, 0), HEAP32[$0 + 36 >> 2])
      }
      break block19;
     }
     jsiSoftKill();
     jspSoftKill();
     jsvSoftKill();
     jsvReset();
     jshReset();
     jsfLoadStateFromFlash();
     jsvSoftInit();
     jspSoftInit();
     jsiSoftInit(0);
    }
    HEAP16[184294] = HEAPU16[184294] & 65471;
   }
   jsiSetBusy(1, 0);
  }
  if (HEAPU16[184294] & 512) {
   jshKickWatchDog()
  }
  block21 : {
   block20 : {
    if (HEAPU8[368606] != 1) {
     break block20
    }
    $5 = HEAP32[$0 + 200 >> 2];
    $4 = $5;
    $2 = HEAP32[$0 + 204 >> 2];
    $1 = $2;
    $2 = jshGetTimeFromMilliseconds(10.0);
    $3 = $2;
    $5 = i64toi32_i32$HIGH_BITS;
    $2 = $5;
    $5 = $1;
    $1 = $3;
    if (($5 | 0) <= ($2 | 0) & $4 >>> 0 <= $1 >>> 0 | ($2 | 0) > ($5 | 0)) {
     break block20
    }
    if (jsvMoreFreeVariablesThan(600) & 1) {
     break block20
    }
    jsiSetBusy(1, 1);
    jsvGarbageCollect();
    jsiSetBusy(1, 0);
    break block21;
   }
   if (!HEAPU8[368606]) {
    break block21
   }
   if (jshHasEvents() & 1) {
    break block21
   }
   $4 = HEAP32[$0 + 200 >> 2];
   $5 = HEAP32[$0 + 204 >> 2];
   jshSleep($4, $5);
  }
  __stack_pointer = $0 + 400 | 0;
 }
 
 function jsiTimerAdd($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = jsvLock(HEAPU16[184292]);
  HEAP32[$1 + 4 >> 2] = jsvArrayAddToEnd(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2], 1) - 1;
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 4 >> 2];
 }
 
 function jsiLoop() {
  jshIdle();
  jsiIdle();
  jsiCheckErrors(0);
  if (!(!(HEAP32[92138] & 6144) | HEAPU8[368604] <= 4 & HEAPU8[368604] >= 2)) {
   HEAP32[92138] = HEAP32[92138] & -6145;
   block1 : {
    if (!(jsvIsEmptyString(HEAP32[92148]) & 1)) {
     break block1
    }
   }
   jsiClearInputLine(1);
  }
  jsiConsoleReturnInputLine();
  return !HEAPU8[368606];
 }
 
 function jsiDumpState($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0;
  $2 = __stack_pointer - 272 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 268 >> 2] = $0;
  HEAP32[$2 + 264 >> 2] = $1;
  jsvObjectIteratorNew($2 + 260 | 0, HEAP32[92130]);
  while (1) {
   if (jsvObjectIteratorHasValue_820($2 + 260 | 0) & 1) {
    HEAP32[$2 + 256 >> 2] = jsvObjectIteratorGetKey_830($2 + 260 | 0);
    HEAP32[$2 + 252 >> 2] = jsvObjectIteratorGetValue_821($2 + 260 | 0);
    jsvGetString(HEAP32[$2 + 256 >> 2], $2 + 176 | 0, 64);
    HEAP8[$2 + 175 | 0] = 0;
    HEAP32[$2 + 168 >> 2] = 167743;
    while (1) {
     if (HEAPU8[HEAP32[$2 + 168 >> 2]]) {
      if (!strcmp(HEAP32[$2 + 168 >> 2], $2 + 176 | 0)) {
       HEAP8[$2 + 175 | 0] = 1
      }
      HEAP32[$2 + 168 >> 2] = (strlen(HEAP32[$2 + 168 >> 2]) + 1 | 0) + HEAP32[$2 + 168 >> 2];
      continue;
     }
     break;
    };
    if (!(HEAP8[$2 + 175 | 0] & 1)) {
     block : {
      if (jswIsBuiltInObject($2 + 176 | 0) & 1) {
       jsiDumpObjectState(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], HEAP32[$2 + 256 >> 2], HEAP32[$2 + 252 >> 2]);
       break block;
      }
      if (!(jsvIsStringEqualOrStartsWith(HEAP32[$2 + 256 >> 2], 135410, 1) & 1)) {
       if (!(jsvIsStringEqual(HEAP32[$2 + 256 >> 2], 127099) & 1)) {
        if (!(jsvIsStringEqual(HEAP32[$2 + 256 >> 2], 127429) & 1)) {
         block1 : {
          if (HEAPU8[HEAP32[$2 + 256 >> 2]] == 255) {
           break block1
          }
          if (jshFromDeviceString($2 + 176 | 0) & 255) {
           break block1
          }
          if (!(jsvIsNativeFunction(HEAP32[$2 + 252 >> 2]) & 1)) {
           block2 : {
            if (jsvIsFunction(HEAP32[$2 + 252 >> 2]) & 1) {
             $0 = HEAP32[$2 + 268 >> 2];
             $1 = HEAP32[$2 + 264 >> 2];
             HEAP32[$2 >> 2] = HEAP32[$2 + 256 >> 2];
             cbprintf($0, $1, 124285, $2);
             jsfGetJSONForFunctionWithCallback(HEAP32[$2 + 252 >> 2], 32, HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2]);
             FUNCTION_TABLE[HEAP32[$2 + 268 >> 2]](148265, HEAP32[$2 + 264 >> 2]);
             jsiDumpObjectState(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], HEAP32[$2 + 256 >> 2], HEAP32[$2 + 252 >> 2]);
             break block2;
            }
            $0 = HEAP32[$2 + 268 >> 2];
            $1 = HEAP32[$2 + 264 >> 2];
            HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 256 >> 2];
            cbprintf($0, $1, 146883, $2 + 32 | 0);
            HEAP8[$2 + 167 | 0] = 0;
            if (jsvIsObject(HEAP32[$2 + 252 >> 2]) & 1) {
             HEAP32[$2 + 160 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 252 >> 2], 140424);
             if (HEAP32[$2 + 160 >> 2]) {
              HEAP32[$2 + 156 >> 2] = jsvGetPathTo(HEAP32[92130], HEAP32[$2 + 160 >> 2], 4, HEAP32[$2 + 252 >> 2]);
              if (HEAP32[$2 + 156 >> 2]) {
               $0 = HEAP32[$2 + 268 >> 2];
               $1 = HEAP32[$2 + 264 >> 2];
               HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 156 >> 2];
               cbprintf($0, $1, 147842, $2 + 16 | 0);
               jsiDumpObjectState(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], HEAP32[$2 + 256 >> 2], HEAP32[$2 + 252 >> 2]);
               HEAP8[$2 + 167 | 0] = 1;
              }
             }
            }
            if (!(HEAP8[$2 + 167 | 0] & 1)) {
             jsiDumpJSON(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], HEAP32[$2 + 252 >> 2], HEAP32[$2 + 256 >> 2]);
             FUNCTION_TABLE[HEAP32[$2 + 268 >> 2]](147966, HEAP32[$2 + 264 >> 2]);
            }
           }
          }
         }
        }
       }
      }
     }
    }
    jsvUnLock2(HEAP32[$2 + 252 >> 2], HEAP32[$2 + 256 >> 2]);
    jsvObjectIteratorNext($2 + 260 | 0);
    continue;
   }
   break;
  };
  jsvObjectIteratorFree_822($2 + 260 | 0);
  HEAP32[$2 + 152 >> 2] = jsvLock(HEAPU16[184292]);
  jsvObjectIteratorNew($2 + 260 | 0, HEAP32[$2 + 152 >> 2]);
  jsvUnLock(HEAP32[$2 + 152 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_820($2 + 260 | 0) & 1) {
    HEAP32[$2 + 148 >> 2] = jsvObjectIteratorGetValue_821($2 + 260 | 0);
    HEAP32[$2 + 144 >> 2] = jsvObjectIteratorGetKey_830($2 + 260 | 0);
    HEAP32[$2 + 140 >> 2] = jsvSkipOneNameAndUnLock(jsvFindChildFromString(HEAP32[$2 + 148 >> 2], 140265));
    HEAP32[$2 + 136 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 148 >> 2], 127751);
    FUNCTION_TABLE[HEAP32[$2 + 268 >> 2]](HEAP32[$2 + 136 >> 2] ? 146307 : 146285, HEAP32[$2 + 264 >> 2]);
    jsiDumpJSON(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], HEAP32[$2 + 140 >> 2], 0);
    $4 = HEAP32[$2 + 268 >> 2];
    $5 = HEAP32[$2 + 264 >> 2];
    block3 : {
     if (HEAP32[$2 + 136 >> 2]) {
      $0 = jsvGetLongInteger(HEAP32[$2 + 136 >> 2]);
      $3 = $0;
      $1 = i64toi32_i32$HIGH_BITS;
      $0 = $1;
      break block3;
     }
     $1 = jsvGetLongIntegerAndUnLock(jsvObjectGetChildIfExists(HEAP32[$2 + 148 >> 2], 137570));
     $3 = $1;
     $0 = i64toi32_i32$HIGH_BITS;
    }
    $6 = jshGetMillisecondsFromTime($3, $0);
    HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 144 >> 2];
    HEAPF64[$2 + 48 >> 3] = $6;
    cbprintf($4, $5, 147096, $2 + 48 | 0);
    jsvUnLock3(HEAP32[$2 + 136 >> 2], HEAP32[$2 + 140 >> 2], HEAP32[$2 + 144 >> 2]);
    jsvUnLock(HEAP32[$2 + 148 >> 2]);
    jsvObjectIteratorNext($2 + 260 | 0);
    continue;
   }
   break;
  };
  jsvObjectIteratorFree_822($2 + 260 | 0);
  HEAP32[$2 + 132 >> 2] = jsvLock(HEAPU16[184293]);
  jsvObjectIteratorNew($2 + 260 | 0, HEAP32[$2 + 132 >> 2]);
  jsvUnLock(HEAP32[$2 + 132 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_820($2 + 260 | 0) & 1) {
    HEAP32[$2 + 128 >> 2] = jsvObjectIteratorGetValue_821($2 + 260 | 0);
    HEAP32[$2 + 124 >> 2] = jsvSkipOneNameAndUnLock(jsvFindChildFromString(HEAP32[$2 + 128 >> 2], 140265));
    HEAP8[$2 + 123 | 0] = jsvObjectGetBoolChild(HEAP32[$2 + 128 >> 2], 127745) & 1;
    HEAP32[$2 + 116 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 128 >> 2], 137838);
    HEAP32[$2 + 112 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 128 >> 2], 135427);
    HEAP32[$2 + 108 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 128 >> 2], 138005);
    FUNCTION_TABLE[HEAP32[$2 + 268 >> 2]](146334, HEAP32[$2 + 264 >> 2]);
    jsiDumpJSON(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], HEAP32[$2 + 124 >> 2], 0);
    $0 = HEAP32[$2 + 268 >> 2];
    $1 = HEAP32[$2 + 264 >> 2];
    $3 = HEAP32[$2 + 112 >> 2];
    $4 = HEAP8[$2 + 123 | 0] & 1 ? 137108 : 137432;
    HEAP32[$2 + 88 >> 2] = HEAP32[$2 + 116 >> 2] < 0 ? 136778 : HEAP32[$2 + 116 >> 2] > 0 ? 136492 : 136092;
    HEAP32[$2 + 84 >> 2] = $4;
    HEAP32[$2 + 80 >> 2] = $3;
    cbprintf($0, $1, 146400, $2 + 80 | 0);
    if (HEAP32[$2 + 108 >> 2] > 0) {
     $3 = HEAP32[$2 + 268 >> 2];
     $4 = HEAP32[$2 + 264 >> 2];
     $0 = HEAP32[$2 + 108 >> 2];
     $1 = $0 >> 31;
     HEAPF64[$2 + 64 >> 3] = jshGetMillisecondsFromTime($0, $1);
     cbprintf($3, $4, 136956, $2 - -64 | 0);
    }
    FUNCTION_TABLE[HEAP32[$2 + 268 >> 2]](147836, HEAP32[$2 + 264 >> 2]);
    jsvUnLock2(HEAP32[$2 + 112 >> 2], HEAP32[$2 + 124 >> 2]);
    jsvUnLock(HEAP32[$2 + 128 >> 2]);
    jsvObjectIteratorNext($2 + 260 | 0);
    continue;
   }
   break;
  };
  jsvObjectIteratorFree_822($2 + 260 | 0);
  jsiDumpHardwareInitialisation(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], 1);
  HEAP32[$2 + 104 >> 2] = jsfGetBootCodeFromFlash(0);
  if (HEAP32[$2 + 104 >> 2]) {
   cbprintf(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], 147687, 0);
   jslPrintTokenisedString(HEAP32[$2 + 104 >> 2], HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2]);
   jsvUnLock(HEAP32[$2 + 104 >> 2]);
  }
  __stack_pointer = $2 + 272 | 0;
 }
 
 function jsiTimersChanged() {
  HEAP16[184294] = HEAPU16[184294] | 4;
 }
 
 function jsiPacketFileSetTimeout($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  HEAP32[$1 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[92131], 140744);
  if (HEAP32[$1 + 8 >> 2]) {
   jsiClearTimeout(HEAP32[$1 + 8 >> 2]);
   jsvUnLock(HEAP32[$1 + 8 >> 2]);
  }
  block : {
   if (HEAP8[$1 + 15 | 0] & 1) {
    jsvObjectSetChildAndUnLock(HEAP32[92131], 140744, jsiSetTimeout(562, 1.0e4));
    break block;
   }
   jsvObjectRemoveChild(HEAP32[92131], 140744);
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsiPacketFileTimeoutHandler() {
  jsiPacketFileEnd();
 }
 
 function jsiPacketReply($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP16[$2 + 14 >> 1] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP16[$2 + 6 >> 1] = HEAPU16[$2 + 14 >> 1] | jsvGetStringLength(HEAP32[$2 + 8 >> 2]) & 65535;
  jsiConsolePrintChar(16);
  jsiConsolePrintChar(1);
  jsiConsolePrintChar(HEAPU16[$2 + 6 >> 1] >>> 8 << 24 >> 24);
  jsiConsolePrintChar((HEAPU16[$2 + 6 >> 1] & 255) << 24 >> 24);
  if (HEAP32[$2 + 8 >> 2]) {
   jsiConsolePrintStringVar(HEAP32[$2 + 8 >> 2])
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsiPacketTimeoutHandler() {
  jsiConsolePrintChar(21);
  jsiPacketExit();
 }
 
 function jshInitDevices() {
  HEAP8[368668] = 0;
  jshResetDevices();
 }
 
 function jshResetDevices() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  jshResetPinStateIsManual();
  HEAP32[$0 + 12 >> 2] = 0;
  while (1) {
   block : {
    if (!HEAP32[$0 + 12 >> 2] | HEAP32[$0 + 12 >> 2] >= 2) {
     break block
    }
    if (HEAP32[$0 + 12 >> 2] == ((jsiGetConsoleDevice() & 255) - 21 | 0)) {
     break block
    }
    HEAP8[HEAP32[$0 + 12 >> 2] + 368668 | 0] = 0;
    HEAP8[HEAP32[$0 + 12 >> 2] + 368670 | 0] = 255;
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
    continue;
   }
   break;
  };
  HEAP32[$0 + 8 >> 2] = 1;
  while (1) {
   if (HEAP32[$0 + 8 >> 2] <= 16) {
    HEAP32[(HEAP32[$0 + 8 >> 2] << 2) + 368668 >> 2] = 0;
    HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
    continue;
   }
   break;
  };
  jshSetPinStateIsManual(17, 1);
  jshPinSetState(17, 6);
  __stack_pointer = $0 + 16 | 0;
 }
 
 function jshTransmit($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP8[$2 + 14 | 0] = $1;
  block1 : {
   if (!(HEAPU8[$2 + 15 | 0] != 17 & HEAPU8[$2 + 15 | 0] != 18)) {
    jshPushIOCharEvent(HEAPU8[$2 + 15 | 0] == 18 ? 17 : 18, HEAP8[$2 + 14 | 0] << 24 >> 24);
    break block1;
   }
   if (HEAPU8[$2 + 15 | 0] == 20) {
    terminalSendChar(HEAP8[$2 + 14 | 0] << 24 >> 24);
    break block1;
   }
   block2 : {
    if (HEAPU8[$2 + 15 | 0] != 21) {
     break block2
    }
    if (jshIsUSBSERIALConnected() & 1) {
     break block2
    }
    jshTransmitClearDevice(21);
    break block1;
   }
   if (!HEAPU8[$2 + 15 | 0]) {
    break block1
   }
   HEAP8[$2 + 13 | 0] = HEAPU8[368660] + 1;
   if (HEAPU8[$2 + 13 | 0] == HEAPU8[368661]) {
    jsiSetBusy(2, 1);
    if (HEAPU8[$2 + 15 | 0] == 19) {
     $3 = (jsiGetConsoleDevice() & 255) == 19
    }
    HEAP8[$2 + 12 | 0] = $3;
    while (1) {
     if (HEAPU8[$2 + 13 | 0] == HEAPU8[368661]) {
      if (jshIsInInterrupt() & 1) {
       HEAP8[368518] = HEAPU8[368518] | 2;
       break block1;
      }
      jshBusyIdle();
      if (!(jshIsUSBSERIALConnected() & 1)) {
       jshTransmitClearDevice(21)
      }
      continue;
     }
     break;
    };
    block3 : {
     if (!(HEAP8[$2 + 12 | 0] & 1)) {
      break block3
     }
     if ((jsiGetConsoleDevice() & 255) == 19) {
      break block3
     }
     HEAP8[$2 + 15 | 0] = jsiGetConsoleDevice();
    }
    jsiSetBusy(2, 0);
   }
   HEAP8[(HEAPU8[368660] << 1) + 368736 | 0] = HEAPU8[$2 + 15 | 0];
   HEAP8[((HEAPU8[368660] << 1) + 368736 | 0) + 1 | 0] = HEAPU8[$2 + 14 | 0];
   HEAP8[368660] = HEAPU8[$2 + 13 | 0];
   jshUSARTKick(HEAPU8[$2 + 15 | 0]);
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jshPushIOCharEvent($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP8[$2 + 14 | 0] = $1;
  jshPushIOCharEvents(HEAPU8[$2 + 15 | 0], $2 + 14 | 0, 1);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jshTransmitClearDevice($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  while (1) {
   if ((jshGetCharToTransmit(HEAPU8[$1 + 15 | 0]) | 0) >= 0) {
    continue
   }
   break;
  };
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jshPushIOCharEvents($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP8[$3 + 31 | 0] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  block : {
   if (jshPushIOCharEventsHandler(HEAPU8[$3 + 31 | 0], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]) & 1) {
    break block
   }
   block2 : {
    block1 : {
     if (HEAPU16[184332] == HEAPU16[184331] | HEAPU16[184332] == HEAPU16[184333] | (HEAPU8[(HEAPU16[184332] + 1 & 1023) + 369248 | 0] != HEAPU8[$3 + 31 | 0] | HEAPU8[HEAPU16[184332] + 369248 | 0] + HEAP32[$3 + 20 >> 2] >>> 0 >= 64)) {
      break block1
     }
     if ((jshGetIOCharEventsFree() | 0) <= 0) {
      break block1
     }
     $0 = HEAPU16[184332];
     HEAP8[$0 + 369248 | 0] = HEAPU8[$0 + 369248 | 0] + (HEAP32[$3 + 20 >> 2] & 255);
     HEAP32[$3 + 16 >> 2] = 0;
     while (1) {
      if (HEAPU32[$3 + 16 >> 2] < HEAPU32[$3 + 20 >> 2]) {
       HEAP8[HEAPU16[184331] + 369248 | 0] = HEAPU8[HEAP32[$3 + 24 >> 2] + HEAP32[$3 + 16 >> 2] | 0];
       HEAP16[184331] = HEAPU16[184331] + 1 & 1023;
       HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] + 1;
       continue;
      }
      break;
     };
     break block2;
    }
    while (1) {
     if (HEAP32[$3 + 20 >> 2]) {
      HEAP32[$3 + 12 >> 2] = HEAPU32[$3 + 20 >> 2] > 64 ? 64 : HEAP32[$3 + 20 >> 2];
      jshPushEvent(HEAPU8[$3 + 31 | 0], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 12 >> 2]);
      HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] - HEAP32[$3 + 12 >> 2];
      HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 12 >> 2] + HEAP32[$3 + 24 >> 2];
      continue;
     }
     break;
    };
   }
   if (HEAPU8[$3 + 31 | 0] < 21 | HEAPU8[$3 + 31 | 0] > 22) {
    break block
   }
   if ((jshGetEventsUsed() | 0) <= 767) {
    break block
   }
   jshSetFlowControlXON(HEAPU8[$3 + 31 | 0], 0);
  }
  __stack_pointer = $3 + 32 | 0;
 }
 
 function jshGetCharToTransmit($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP8[$1 + 11 | 0] = $0;
  block1 : {
   if (!(HEAPU8[$1 + 11 | 0] < 21 | HEAPU8[$1 + 11 | 0] > 22)) {
    HEAP32[$1 + 4 >> 2] = HEAPU8[$1 + 11 | 0] + 368647;
    if (HEAP8[HEAP32[$1 + 4 >> 2]] & 1) {
     HEAP8[HEAP32[$1 + 4 >> 2]] = HEAPU8[HEAP32[$1 + 4 >> 2]] & -2 | 4;
     HEAP32[$1 + 12 >> 2] = 19;
     break block1;
    }
    if (HEAPU8[HEAP32[$1 + 4 >> 2]] & 2) {
     HEAP8[HEAP32[$1 + 4 >> 2]] = HEAPU8[HEAP32[$1 + 4 >> 2]] & -7;
     HEAP32[$1 + 12 >> 2] = 17;
     break block1;
    }
   }
   HEAP8[$1 + 3 | 0] = HEAPU8[368661];
   while (1) {
    if (HEAPU8[368660] != HEAPU8[$1 + 3 | 0]) {
     if (HEAPU8[$1 + 11 | 0] == (HEAPU8[(HEAPU8[$1 + 3 | 0] << 1) + 368736 | 0] & 31)) {
      HEAP8[$1 + 2 | 0] = HEAPU8[((HEAPU8[$1 + 3 | 0] << 1) + 368736 | 0) + 1 | 0];
      if (HEAPU8[$1 + 3 | 0] != HEAPU8[368661]) {
       HEAP8[$1 + 1 | 0] = HEAPU8[$1 + 3 | 0];
       HEAP8[$1 | 0] = HEAPU8[$1 + 1 | 0] + 255;
       while (1) {
        if (HEAPU8[$1 + 1 | 0] != HEAPU8[368661]) {
         HEAP16[(HEAPU8[$1 + 1 | 0] << 1) + 368736 >> 1] = HEAPU16[(HEAPU8[$1 | 0] << 1) + 368736 >> 1];
         HEAP8[$1 + 1 | 0] = HEAPU8[$1 | 0];
         HEAP8[$1 | 0] = HEAPU8[$1 + 1 | 0] + 255;
         continue;
        }
        break;
       };
      }
      HEAP8[368661] = HEAPU8[368661] + 1;
      HEAP32[$1 + 12 >> 2] = HEAPU8[$1 + 2 | 0];
      break block1;
     } else {
      HEAP8[$1 + 3 | 0] = HEAPU8[$1 + 3 | 0] + 1;
      continue;
     }
    }
    break;
   };
   HEAP32[$1 + 12 >> 2] = -1;
  }
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jshGetDeviceToTransmit() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  block : {
   if (!(jshHasTransmitData() & 1)) {
    HEAP8[$0 + 15 | 0] = 0;
    break block;
   }
   HEAP8[$0 + 15 | 0] = HEAPU8[(HEAPU8[368661] << 1) + 368736 | 0] & 31;
  }
  __stack_pointer = $0 + 16 | 0;
  return HEAPU8[$0 + 15 | 0];
 }
 
 function jshHasTransmitData() {
  return HEAPU8[368660] != HEAPU8[368661];
 }
 
 function jshTransmitFlushDevice($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  jsiSetBusy(2, 1);
  HEAP8[$1 + 14 | 0] = 0;
  while (1) {
   HEAP8[$1 + 14 | 0] = 0;
   HEAP8[$1 + 13 | 0] = HEAPU8[368661];
   while (1) {
    if (HEAPU8[368660] != HEAPU8[$1 + 13 | 0]) {
     if (HEAPU8[$1 + 15 | 0] == (HEAPU8[(HEAPU8[$1 + 13 | 0] << 1) + 368736 | 0] & 31)) {
      HEAP8[$1 + 14 | 0] = 1
     } else {
      HEAP8[$1 + 13 | 0] = HEAPU8[$1 + 13 | 0] + 1;
      continue;
     }
    }
    break;
   };
   if (HEAP8[$1 + 14 | 0] & 1) {
    continue
   }
   break;
  };
  jsiSetBusy(2, 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jshTransmitMove($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP8[$2 + 14 | 0] = $1;
  block1 : {
   if (!(HEAPU8[$2 + 14 | 0] != 17 & HEAPU8[$2 + 14 | 0] != 18)) {
    HEAP8[$2 + 13 | 0] = HEAPU8[$2 + 14 | 0] == 18 ? 17 : 18;
    HEAP32[$2 + 8 >> 2] = jshGetCharToTransmit(HEAPU8[$2 + 15 | 0]);
    while (1) {
     if (HEAP32[$2 + 8 >> 2] >= 0) {
      jshPushIOCharEvent(HEAPU8[$2 + 13 | 0], HEAP32[$2 + 8 >> 2] << 24 >> 24);
      HEAP32[$2 + 8 >> 2] = jshGetCharToTransmit(HEAPU8[$2 + 15 | 0]);
      continue;
     }
     break;
    };
    break block1;
   }
   jshInterruptOff();
   HEAP8[$2 + 7 | 0] = HEAPU8[368661];
   while (1) {
    if (HEAPU8[$2 + 7 | 0] != HEAPU8[368660]) {
     if (HEAPU8[$2 + 15 | 0] == (HEAPU8[(HEAPU8[$2 + 7 | 0] << 1) + 368736 | 0] & 31)) {
      HEAP8[(HEAPU8[$2 + 7 | 0] << 1) + 368736 | 0] = HEAPU8[$2 + 14 | 0] | HEAPU8[(HEAPU8[$2 + 7 | 0] << 1) + 368736 | 0] & -32
     }
     HEAP8[$2 + 7 | 0] = HEAPU8[$2 + 7 | 0] + 1;
     continue;
    }
    break;
   };
   jshInterruptOn();
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jshIOEventOverflowed() {
  HEAP8[368518] = HEAPU8[368518] | 1;
 }
 
 function jshPushEvent($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP8[$3 + 30 | 0] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  if (HEAPU32[$3 + 20 >> 2] > 64) {
   HEAP32[$3 + 20 >> 2] = 64
  }
  jshInterruptOff();
  block : {
   if ((jshGetIOCharEventsFree() | 0) < (HEAP32[$3 + 20 >> 2] + 2 | 0)) {
    jshInterruptOn();
    jshIOEventOverflowed();
    HEAP8[$3 + 31 | 0] = 0;
    break block;
   }
   HEAP16[$3 + 18 >> 1] = HEAPU16[184331];
   HEAP8[HEAPU16[$3 + 18 >> 1] + 369248 | 0] = HEAP32[$3 + 20 >> 2];
   HEAP16[$3 + 18 >> 1] = HEAPU16[$3 + 18 >> 1] + 1 & 1023;
   HEAP8[HEAPU16[$3 + 18 >> 1] + 369248 | 0] = HEAPU8[$3 + 30 | 0];
   HEAP16[$3 + 18 >> 1] = HEAPU16[$3 + 18 >> 1] + 1 & 1023;
   HEAP32[$3 + 12 >> 2] = 0;
   while (1) {
    if (HEAPU32[$3 + 12 >> 2] < HEAPU32[$3 + 20 >> 2]) {
     HEAP8[HEAPU16[$3 + 18 >> 1] + 369248 | 0] = HEAPU8[HEAP32[$3 + 24 >> 2] + HEAP32[$3 + 12 >> 2] | 0];
     HEAP16[$3 + 18 >> 1] = HEAPU16[$3 + 18 >> 1] + 1 & 1023;
     HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
     continue;
    }
    break;
   };
   HEAP16[184332] = HEAPU16[184331];
   HEAP16[184331] = HEAPU16[$3 + 18 >> 1];
   jshInterruptOn();
   jshHadEvent();
   HEAP8[$3 + 31 | 0] = 1;
  }
  __stack_pointer = $3 + 32 | 0;
  return HEAP8[$3 + 31 | 0] & 1;
 }
 
 function jshGetIOCharEventsFree() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = 1024 - jshGetEventsUsed();
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$0 + 12 >> 2] - 4 | 0;
 }
 
 function jshPushIOCharEventsHandler($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP8[$3 + 31 | 0] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  HEAP8[$3 + 19 | 0] = 0;
  HEAP32[$3 + 12 >> 2] = 0;
  while (1) {
   if (HEAPU32[$3 + 12 >> 2] < HEAPU32[$3 + 20 >> 2]) {
    block : {
     if (HEAPU8[HEAP32[$3 + 24 >> 2] + HEAP32[$3 + 12 >> 2] | 0] != 3) {
      break block
     }
     if (HEAPU8[$3 + 31 | 0] != (jsiGetConsoleDevice() & 255)) {
      break block
     }
     jsiCtrlC();
    }
    HEAP8[$3 + 19 | 0] = jswOnCharEvent(HEAPU8[$3 + 31 | 0], HEAP8[HEAP32[$3 + 24 >> 2] + HEAP32[$3 + 12 >> 2] | 0] << 24 >> 24) & 1 | HEAP8[$3 + 19 | 0] & 1;
    HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
    continue;
   }
   break;
  };
  __stack_pointer = $3 + 32 | 0;
  return HEAP8[$3 + 19 | 0] & 1;
 }
 
 function jshGetEventsUsed() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 16 | 0;
  if (HEAPU16[184331] >= HEAPU16[184333]) {
   $1 = HEAPU16[184331] - HEAPU16[184333] | 0
  } else {
   $1 = (HEAPU16[184331] + 1024 | 0) - HEAPU16[184333] | 0
  }
  HEAP32[$0 + 12 >> 2] = $1;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function jshSetFlowControlXON($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP8[$2 + 14 | 0] = $1;
  if (!(HEAPU8[$2 + 15 | 0] < 21 | HEAPU8[$2 + 15 | 0] > 22)) {
   if (!(HEAP8[$2 + 14 | 0] & 1)) {
    HEAP8[370272] = 1
   }
   HEAP32[$2 + 8 >> 2] = HEAPU8[$2 + 15 | 0] - 21;
   HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2] + 368668;
   if (HEAPU8[HEAP32[$2 + 4 >> 2]] & 8) {
    block1 : {
     if (HEAP8[$2 + 14 | 0] & 1) {
      if ((HEAPU8[HEAP32[$2 + 4 >> 2]] & 6) == 4) {
       jshInterruptOff();
       $0 = HEAP32[$2 + 4 >> 2];
       HEAP8[$0 | 0] = HEAPU8[$0 | 0] | 2;
       jshInterruptOn();
       jshUSARTKick(HEAPU8[$2 + 15 | 0]);
      }
      break block1;
     }
     if (!(HEAPU8[HEAP32[$2 + 4 >> 2]] & 5)) {
      jshInterruptOff();
      $0 = HEAP32[$2 + 4 >> 2];
      HEAP8[$0 | 0] = HEAPU8[$0 | 0] | 1;
      jshInterruptOn();
      jshUSARTKick(HEAPU8[$2 + 15 | 0]);
     }
    }
   }
   HEAP8[$2 + 3 | 0] = HEAPU8[HEAP32[$2 + 8 >> 2] + 368670 | 0];
   if (HEAPU8[$2 + 3 | 0] != 255) {
    jshPinSetValue(HEAPU8[$2 + 3 | 0], (HEAPU8[$2 + 14 | 0] ^ -1) & 1)
   }
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jshPushIOWatchEvent($0) {
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 31 | 0] = $0;
  HEAP8[$1 + 30 | 0] = jshGetWatchedPinState(HEAPU8[$1 + 31 | 0]) & 1;
  HEAP32[$1 + 24 >> 2] = HEAPU8[$1 + 31 | 0] - 1;
  block1 : {
   if (HEAP32[(HEAP32[$1 + 24 >> 2] << 2) + 368672 >> 2]) {
    block : {
     if ((HEAP32[(HEAP32[$1 + 24 >> 2] << 2) + 368672 >> 2] & -256) == -256) {
      HEAP8[$1 + 23 | 0] = HEAP32[(HEAP32[$1 + 24 >> 2] << 2) + 368672 >> 2];
      if (jshPinGetValue(HEAPU8[$1 + 23 | 0]) & 1) {
       HEAP8[$1 + 31 | 0] = HEAPU8[$1 + 31 | 0] | 64
      }
      break block;
     }
     FUNCTION_TABLE[HEAP32[(HEAP32[$1 + 24 >> 2] << 2) + 368672 >> 2]](HEAP8[$1 + 30 | 0] & 1, HEAPU8[$1 + 31 | 0]);
     break block1;
    }
   }
   if (HEAP8[$1 + 30 | 0] & 1) {
    HEAP8[$1 + 31 | 0] = HEAPU8[$1 + 31 | 0] | 32
   }
   HEAP32[$1 + 8 >> 2] = jshGetSystemTime();
   HEAP32[$1 + 12 >> 2] = i64toi32_i32$HIGH_BITS;
   jshPushIOEvent(HEAPU8[$1 + 31 | 0], HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
  }
  __stack_pointer = $1 + 32 | 0;
 }
 
 function jshPushIOEvent($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP8[$3 + 31 | 0] = $0;
  HEAP32[$3 + 16 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 16 >> 2];
  jshPushEvent(HEAPU8[$3 + 31 | 0], $3 + 12 | 0, 4);
  __stack_pointer = $3 + 32 | 0;
 }
 
 function jshPopIOEvent($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  block : {
   if (HEAPU16[184331] == HEAPU16[184333]) {
    HEAP8[$2 + 31 | 0] = 0;
    break block;
   }
   if (HEAPU16[184332] == HEAPU16[184333]) {
    HEAP16[184332] = HEAPU16[184331]
   }
   HEAP16[$2 + 18 >> 1] = HEAPU16[184333];
   HEAP32[$2 + 12 >> 2] = HEAPU8[HEAPU16[$2 + 18 >> 1] + 369248 | 0];
   HEAP16[$2 + 18 >> 1] = HEAPU16[$2 + 18 >> 1] + 1 & 1023;
   HEAP8[$2 + 11 | 0] = HEAPU8[HEAPU16[$2 + 18 >> 1] + 369248 | 0];
   HEAP16[$2 + 18 >> 1] = HEAPU16[$2 + 18 >> 1] + 1 & 1023;
   if (HEAP32[$2 + 20 >> 2]) {
    HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = HEAP32[$2 + 12 >> 2]
   }
   HEAP32[$2 + 4 >> 2] = 0;
   while (1) {
    if (HEAPU32[$2 + 4 >> 2] < HEAPU32[$2 + 12 >> 2]) {
     if (HEAP32[$2 + 24 >> 2]) {
      HEAP8[HEAP32[$2 + 24 >> 2] + HEAP32[$2 + 4 >> 2] | 0] = HEAPU8[HEAPU16[$2 + 18 >> 1] + 369248 | 0]
     }
     HEAP16[$2 + 18 >> 1] = HEAPU16[$2 + 18 >> 1] + 1 & 1023;
     HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
     continue;
    }
    break;
   };
   HEAP16[184333] = HEAPU16[$2 + 18 >> 1];
   HEAP8[$2 + 31 | 0] = HEAPU8[$2 + 11 | 0];
  }
  return HEAPU8[$2 + 31 | 0];
 }
 
 function jshHasEvents() {
  return HEAPU16[184331] != HEAPU16[184333];
 }
 
 function jshIsTopEvent($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP8[$1 + 14 | 0] = $0;
  block : {
   if (HEAPU16[184331] == HEAPU16[184333]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   HEAP8[$1 + 15 | 0] = HEAPU8[$1 + 14 | 0] == (HEAPU8[(HEAPU16[184333] + 1 & 1023) + 369248 | 0] & 31);
  }
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jshGetDeviceString($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP8[$1 + 11 | 0] = $0;
  block10 : {
   block1 : {
    switch (HEAPU8[$1 + 11 | 0]) {
    case 0:
     HEAP32[$1 + 12 >> 2] = 135673;
     break block10;
    case 17:
     HEAP32[$1 + 12 >> 2] = 141380;
     break block10;
    case 18:
     HEAP32[$1 + 12 >> 2] = 141326;
     break block10;
    case 19:
     HEAP32[$1 + 12 >> 2] = 135037;
     break block10;
    case 21:
     HEAP32[$1 + 12 >> 2] = 141340;
     break block10;
    case 20:
     HEAP32[$1 + 12 >> 2] = 135838;
     break block10;
    case 22:
     HEAP32[$1 + 12 >> 2] = 142150;
     break block10;
    case 26:
     HEAP32[$1 + 12 >> 2] = 142185;
     break block10;
    case 27:
     HEAP32[$1 + 12 >> 2] = 142199;
     break block10;
    default:
     break block1;
    };
   }
   HEAP32[$1 + 12 >> 2] = 148266;
  }
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jshFromDeviceString($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (HEAPU8[HEAP32[$1 + 8 >> 2]] == 76) {
    if (!strcmp(HEAP32[$1 + 8 >> 2] + 1 | 0, 141381)) {
     HEAP8[$1 + 15 | 0] = 17;
     break block;
    }
    if (!strcmp(HEAP32[$1 + 8 >> 2] + 1 | 0, 141327)) {
     HEAP8[$1 + 15 | 0] = 18;
     break block;
    }
   }
   if (!(HEAPU8[HEAP32[$1 + 8 >> 2]] != 85 | HEAPU8[HEAP32[$1 + 8 >> 2] + 1 | 0] != 83 | (HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] << 24 >> 24 | HEAPU8[HEAP32[$1 + 8 >> 2] + 2 | 0] != 66))) {
    HEAP8[$1 + 15 | 0] = 21;
    break block;
   }
   block2 : {
    if (HEAPU8[HEAP32[$1 + 8 >> 2]] == 84) {
     if (!strcmp(HEAP32[$1 + 8 >> 2] + 1 | 0, 135839)) {
      HEAP8[$1 + 15 | 0] = 20;
      break block;
     }
     break block2;
    }
    block5 : {
     if (HEAPU8[HEAP32[$1 + 8 >> 2]] == 83) {
      block3 : {
       if (HEAPU8[HEAP32[$1 + 8 >> 2] + 1 | 0] != 101 | HEAPU8[HEAP32[$1 + 8 >> 2] + 2 | 0] != 114 | (HEAPU8[HEAP32[$1 + 8 >> 2] + 3 | 0] != 105 | HEAPU8[HEAP32[$1 + 8 >> 2] + 4 | 0] != 97)) {
        break block3
       }
       if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] != 108 | HEAP8[HEAP32[$1 + 8 >> 2] + 6 | 0] << 24 >> 24 < 49 | (HEAP8[HEAP32[$1 + 8 >> 2] + 7 | 0] << 24 >> 24 | ((HEAP8[HEAP32[$1 + 8 >> 2] + 6 | 0] << 24 >> 24) - 49 | 0) > 0)) {
        break block3
       }
       HEAP8[$1 + 15 | 0] = (HEAP8[HEAP32[$1 + 8 >> 2] + 6 | 0] << 24 >> 24) - 27;
       break block;
      }
      block4 : {
       if (HEAPU8[HEAP32[$1 + 8 >> 2] + 1 | 0] != 80 | HEAPU8[HEAP32[$1 + 8 >> 2] + 2 | 0] != 73 | (HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] << 24 >> 24 < 49 | ((HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] << 24 >> 24) - 49 | 0) > 0)) {
        break block4
       }
       if (HEAP8[HEAP32[$1 + 8 >> 2] + 4 | 0] << 24 >> 24) {
        break block4
       }
       HEAP8[$1 + 15 | 0] = (HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] << 24 >> 24) - 23;
       break block;
      }
      break block5;
     }
     block6 : {
      if (HEAPU8[HEAP32[$1 + 8 >> 2]] != 73 | HEAPU8[HEAP32[$1 + 8 >> 2] + 1 | 0] != 50 | (HEAPU8[HEAP32[$1 + 8 >> 2] + 2 | 0] != 67 | HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] << 24 >> 24 < 49)) {
       break block6
      }
      if (HEAP8[HEAP32[$1 + 8 >> 2] + 4 | 0] << 24 >> 24 | ((HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] << 24 >> 24) - 49 | 0) > 0) {
       break block6
      }
      HEAP8[$1 + 15 | 0] = (HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] << 24 >> 24) - 22;
      break block;
     }
    }
   }
   HEAP8[$1 + 15 | 0] = 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAPU8[$1 + 15 | 0];
 }
 
 function jshSetFlowControlAllReady() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  if (HEAP8[370272] & 1) {
   HEAP32[$0 + 12 >> 2] = 0;
   while (1) {
    if (HEAP32[$0 + 12 >> 2] < 2) {
     jshSetFlowControlXON(HEAP32[$0 + 12 >> 2] + 21 & 255, 1);
     HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
     continue;
    }
    break;
   };
   HEAP8[370272] = 0;
  }
  __stack_pointer = $0 + 16 | 0;
 }
 
 function jshSetFlowControlEnabled($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP8[$3 + 15 | 0] = $0;
  HEAP8[$3 + 14 | 0] = $1;
  HEAP8[$3 + 13 | 0] = $2;
  if (!(HEAPU8[$3 + 15 | 0] < 21 | HEAPU8[$3 + 15 | 0] > 22)) {
   HEAP32[$3 + 8 >> 2] = HEAPU8[$3 + 15 | 0] - 21;
   HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 8 >> 2] + 368668;
   block1 : {
    if (HEAP8[$3 + 14 | 0] & 1) {
     $0 = HEAP32[$3 + 4 >> 2];
     HEAP8[$0 | 0] = HEAPU8[$0 | 0] | 8;
     break block1;
    }
    $0 = HEAP32[$3 + 4 >> 2];
    HEAP8[$0 | 0] = HEAPU8[$0 | 0] & -9;
   }
   HEAP8[HEAP32[$3 + 8 >> 2] + 368670 | 0] = 255;
   if (jshIsPinValid(HEAPU8[$3 + 13 | 0]) & 1) {
    jshPinSetState(HEAPU8[$3 + 13 | 0], 1);
    jshPinSetValue(HEAPU8[$3 + 13 | 0], 0);
    HEAP8[HEAP32[$3 + 8 >> 2] + 368670 | 0] = HEAPU8[$3 + 13 | 0];
   }
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jshSetEventCallback($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[(HEAPU8[$2 + 15 | 0] << 2) + 368668 >> 2] = HEAP32[$2 + 8 >> 2];
 }
 
 function jshSetEventDataPin($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP8[$2 + 14 | 0] = $1;
  HEAP32[(HEAPU8[$2 + 15 | 0] << 2) + 368668 >> 2] = HEAPU8[$2 + 14 | 0] | -256;
 }
 
 function jshGetEventDataPin($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP8[$1 + 14 | 0] = $0;
  HEAP32[$1 + 8 >> 2] = HEAPU8[$1 + 14 | 0] - 1;
  block : {
   if ((HEAP32[(HEAP32[$1 + 8 >> 2] << 2) + 368672 >> 2] & -256) == -256) {
    HEAP8[$1 + 15 | 0] = HEAP32[(HEAP32[$1 + 8 >> 2] << 2) + 368672 >> 2];
    break block;
   }
   HEAP8[$1 + 15 | 0] = 255;
  }
  return HEAPU8[$1 + 15 | 0];
 }
 
 function jstUtilTimerSetupBuffer($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  $0 = _jsvGetAddressOf(HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8);
  $2 = HEAP32[$1 + 12 >> 2];
  HEAP8[$2 + 8 | 0] = $0;
  HEAP8[$2 + 9 | 0] = $0 >>> 8;
  HEAP8[$2 + 10 | 0] = $0 >>> 16;
  HEAP8[$2 + 11 | 0] = $0 >>> 24;
  $0 = HEAP32[$1 + 12 >> 2];
  block : {
   if (jsvIsFlatString(HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 1) {
    $0 = HEAP32[$1 + 12 >> 2];
    HEAP8[$0 + 18 | 0] = 14;
    HEAP8[$0 + 19 | 0] = 0;
    $0 = HEAP32[$1 + 12 >> 2];
    $2 = jsvGetCharactersInVar(HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24));
    $0 = HEAP32[$1 + 12 >> 2];
    $2 = $2 + 14 | 0;
    HEAP8[$0 + 20 | 0] = $2;
    HEAP8[$0 + 21 | 0] = $2 >>> 8;
    break block;
   }
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP8[$0 + 18 | 0] = 0;
   HEAP8[$0 + 19 | 0] = 0;
   $0 = HEAP32[$1 + 12 >> 2];
   $0 = jsvGetCharactersInVar(HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24));
   $2 = HEAP32[$1 + 12 >> 2];
   HEAP8[$2 + 20 | 0] = $0;
   HEAP8[$2 + 21 | 0] = $0 >>> 8;
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jstUtilTimerIsRunning() {
  return HEAP8[370275] & 1;
 }
 
 function jstUtilTimerWaitEmpty() {
  var $0 = 0, $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = 2e6;
  while (1) {
   $0 = 0;
   block : {
    if (!(jstUtilTimerIsRunning() & 1)) {
     break block
    }
    $0 = 0;
    if (jspIsInterrupted() & 1) {
     break block
    }
    $0 = HEAP32[$1 + 12 >> 2];
    HEAP32[$1 + 12 >> 2] = $0 - 1;
    $0 = ($0 | 0) > 0;
   }
   if ($0) {
    continue
   }
   break;
  };
  block1 : {
   if (jspIsInterrupted() & 1) {
    jsExceptionHere(4, 128055, 0);
    break block1;
   }
   if (HEAP32[$1 + 12 >> 2] <= 0) {
    jsExceptionHere(4, 128030, 0)
   }
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jstGetUtilTimerOffset() {
  return HEAP32[92676];
 }
 
 function jstRestartUtilTimer() {
  var $0 = 0, $1 = 0;
  $0 = Math_imul(HEAPU8[370274], 25) + 370304 | 0;
  HEAP32[92572] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
  $0 = jshGetSystemTime();
  HEAP32[92570] = $0;
  $1 = i64toi32_i32$HIGH_BITS;
  HEAP32[92571] = $1;
  if (HEAP32[92572] < 0) {
   HEAP32[92572] = 0
  }
  $1 = HEAP32[92572];
  $0 = $1 >> 31;
  jshUtilTimerStart($1, $0);
 }
 
 function utilTimerInsertTask($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $1;
  block : {
   if (utilTimerIsFull() & 1) {
    HEAP8[$3 + 31 | 0] = 0;
    break block;
   }
   jshInterruptOff();
   if (HEAP32[$3 + 20 >> 2]) {
    $0 = HEAP32[$3 + 24 >> 2];
    $1 = (HEAP32[HEAP32[$3 + 20 >> 2] >> 2] - HEAP32[92676] | 0) + (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) | 0;
    HEAP8[$0 | 0] = $1;
    HEAP8[$0 + 1 | 0] = $1 >>> 8;
    HEAP8[$0 + 2 | 0] = $1 >>> 16;
    HEAP8[$0 + 3 | 0] = $1 >>> 24;
   }
   $2 = jshGetSystemTime();
   $0 = $2;
   $2 = HEAP32[92571];
   $1 = $2;
   $5 = HEAP32[92570];
   $2 = i64toi32_i32$HIGH_BITS;
   $1 = ($0 >>> 0 < $5 >>> 0) + $1 | 0;
   HEAP32[$3 + 16 >> 2] = $0 - $5;
   HEAP8[$3 + 15 | 0] = HEAPU8[370274];
   while (1) {
    $0 = 0;
    if (HEAPU8[$3 + 15 | 0] != HEAPU8[370273]) {
     $0 = HEAP32[$3 + 24 >> 2];
     $1 = Math_imul(HEAPU8[$3 + 15 | 0], 25) + 370304 | 0;
     $0 = HEAP32[$3 + 16 >> 2] + (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) >>> 0 > (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24)) >>> 0;
    }
    if ($0) {
     HEAP8[$3 + 15 | 0] = HEAPU8[$3 + 15 | 0] + 1 & 15;
     continue;
    }
    break;
   };
   HEAP8[$3 + 14 | 0] = HEAPU8[$3 + 15 | 0] == HEAPU8[370274];
   HEAP32[$3 + 8 >> 2] = HEAPU8[370273];
   while (1) {
    if (HEAP32[$3 + 8 >> 2] != HEAPU8[$3 + 15 | 0]) {
     HEAP8[$3 + 7 | 0] = HEAP32[$3 + 8 >> 2] + 15 & 15;
     $2 = Math_imul(HEAPU8[$3 + 7 | 0], 25) + 370304 | 0;
     $1 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
     $0 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
     $4 = $1;
     $5 = Math_imul(HEAP32[$3 + 8 >> 2], 25) + 370304 | 0;
     $1 = $5;
     HEAP8[$1 | 0] = $4;
     HEAP8[$1 + 1 | 0] = $4 >>> 8;
     HEAP8[$1 + 2 | 0] = $4 >>> 16;
     HEAP8[$1 + 3 | 0] = $4 >>> 24;
     HEAP8[$1 + 4 | 0] = $0;
     HEAP8[$1 + 5 | 0] = $0 >>> 8;
     HEAP8[$1 + 6 | 0] = $0 >>> 16;
     HEAP8[$1 + 7 | 0] = $0 >>> 24;
     HEAP8[$1 + 24 | 0] = HEAPU8[$2 + 24 | 0];
     $1 = HEAPU8[$2 + 20 | 0] | HEAPU8[$2 + 21 | 0] << 8 | (HEAPU8[$2 + 22 | 0] << 16 | HEAPU8[$2 + 23 | 0] << 24);
     $0 = HEAPU8[$2 + 16 | 0] | HEAPU8[$2 + 17 | 0] << 8 | (HEAPU8[$2 + 18 | 0] << 16 | HEAPU8[$2 + 19 | 0] << 24);
     $4 = $0;
     $0 = $5;
     HEAP8[$0 + 16 | 0] = $4;
     HEAP8[$0 + 17 | 0] = $4 >>> 8;
     HEAP8[$0 + 18 | 0] = $4 >>> 16;
     HEAP8[$0 + 19 | 0] = $4 >>> 24;
     HEAP8[$0 + 20 | 0] = $1;
     HEAP8[$0 + 21 | 0] = $1 >>> 8;
     HEAP8[$0 + 22 | 0] = $1 >>> 16;
     HEAP8[$0 + 23 | 0] = $1 >>> 24;
     $0 = HEAPU8[$2 + 12 | 0] | HEAPU8[$2 + 13 | 0] << 8 | (HEAPU8[$2 + 14 | 0] << 16 | HEAPU8[$2 + 15 | 0] << 24);
     $1 = HEAPU8[$2 + 8 | 0] | HEAPU8[$2 + 9 | 0] << 8 | (HEAPU8[$2 + 10 | 0] << 16 | HEAPU8[$2 + 11 | 0] << 24);
     $4 = $1;
     $1 = $5;
     HEAP8[$1 + 8 | 0] = $4;
     HEAP8[$1 + 9 | 0] = $4 >>> 8;
     HEAP8[$1 + 10 | 0] = $4 >>> 16;
     HEAP8[$1 + 11 | 0] = $4 >>> 24;
     HEAP8[$1 + 12 | 0] = $0;
     HEAP8[$1 + 13 | 0] = $0 >>> 8;
     HEAP8[$1 + 14 | 0] = $0 >>> 16;
     HEAP8[$1 + 15 | 0] = $0 >>> 24;
     HEAP32[$3 + 8 >> 2] = HEAPU8[$3 + 7 | 0];
     continue;
    }
    break;
   };
   HEAP8[370273] = HEAPU8[370273] + 1 & 15;
   block2 : {
    if (HEAP8[$3 + 14 | 0] & 1) {
     HEAP32[$3 + 8 >> 2] = HEAPU8[370274];
     while (1) {
      if (HEAP32[$3 + 8 >> 2] != HEAPU8[370273]) {
       $0 = Math_imul(HEAP32[$3 + 8 >> 2], 25) + 370304 | 0;
       block1 : {
        if (HEAPU32[$3 + 16 >> 2] < (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) >>> 0) {
         $0 = Math_imul(HEAP32[$3 + 8 >> 2], 25) + 370304 | 0;
         $1 = (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) - HEAP32[$3 + 16 >> 2] | 0;
         HEAP8[$0 | 0] = $1;
         HEAP8[$0 + 1 | 0] = $1 >>> 8;
         HEAP8[$0 + 2 | 0] = $1 >>> 16;
         HEAP8[$0 + 3 | 0] = $1 >>> 24;
         break block1;
        }
        $0 = Math_imul(HEAP32[$3 + 8 >> 2], 25) + 370304 | 0;
        HEAP8[$0 | 0] = 0;
        HEAP8[$0 + 1 | 0] = 0;
        HEAP8[$0 + 2 | 0] = 0;
        HEAP8[$0 + 3 | 0] = 0;
       }
       HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + 1 & 15;
       continue;
      }
      break;
     };
     break block2;
    }
    $0 = HEAP32[$3 + 24 >> 2];
    $1 = HEAP32[$3 + 16 >> 2] + (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) | 0;
    HEAP8[$0 | 0] = $1;
    HEAP8[$0 + 1 | 0] = $1 >>> 8;
    HEAP8[$0 + 2 | 0] = $1 >>> 16;
    HEAP8[$0 + 3 | 0] = $1 >>> 24;
   }
   $2 = HEAP32[$3 + 24 >> 2];
   $0 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
   $1 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
   $4 = $0;
   $5 = Math_imul(HEAPU8[$3 + 15 | 0], 25) + 370304 | 0;
   $0 = $5;
   HEAP8[$0 | 0] = $4;
   HEAP8[$0 + 1 | 0] = $4 >>> 8;
   HEAP8[$0 + 2 | 0] = $4 >>> 16;
   HEAP8[$0 + 3 | 0] = $4 >>> 24;
   HEAP8[$0 + 4 | 0] = $1;
   HEAP8[$0 + 5 | 0] = $1 >>> 8;
   HEAP8[$0 + 6 | 0] = $1 >>> 16;
   HEAP8[$0 + 7 | 0] = $1 >>> 24;
   HEAP8[$0 + 24 | 0] = HEAPU8[$2 + 24 | 0];
   $0 = HEAPU8[$2 + 20 | 0] | HEAPU8[$2 + 21 | 0] << 8 | (HEAPU8[$2 + 22 | 0] << 16 | HEAPU8[$2 + 23 | 0] << 24);
   $1 = HEAPU8[$2 + 16 | 0] | HEAPU8[$2 + 17 | 0] << 8 | (HEAPU8[$2 + 18 | 0] << 16 | HEAPU8[$2 + 19 | 0] << 24);
   $4 = $1;
   $1 = $5;
   HEAP8[$1 + 16 | 0] = $4;
   HEAP8[$1 + 17 | 0] = $4 >>> 8;
   HEAP8[$1 + 18 | 0] = $4 >>> 16;
   HEAP8[$1 + 19 | 0] = $4 >>> 24;
   HEAP8[$1 + 20 | 0] = $0;
   HEAP8[$1 + 21 | 0] = $0 >>> 8;
   HEAP8[$1 + 22 | 0] = $0 >>> 16;
   HEAP8[$1 + 23 | 0] = $0 >>> 24;
   $1 = HEAPU8[$2 + 12 | 0] | HEAPU8[$2 + 13 | 0] << 8 | (HEAPU8[$2 + 14 | 0] << 16 | HEAPU8[$2 + 15 | 0] << 24);
   $0 = HEAPU8[$2 + 8 | 0] | HEAPU8[$2 + 9 | 0] << 8 | (HEAPU8[$2 + 10 | 0] << 16 | HEAPU8[$2 + 11 | 0] << 24);
   $4 = $0;
   $0 = $5;
   HEAP8[$0 + 8 | 0] = $4;
   HEAP8[$0 + 9 | 0] = $4 >>> 8;
   HEAP8[$0 + 10 | 0] = $4 >>> 16;
   HEAP8[$0 + 11 | 0] = $4 >>> 24;
   HEAP8[$0 + 12 | 0] = $1;
   HEAP8[$0 + 13 | 0] = $1 >>> 8;
   HEAP8[$0 + 14 | 0] = $1 >>> 16;
   HEAP8[$0 + 15 | 0] = $1 >>> 24;
   if (!(!(HEAP8[$3 + 14 | 0] & 1) & (HEAP8[370275] & 1))) {
    HEAP8[370275] = 1;
    jstRestartUtilTimer();
   }
   jshInterruptOn();
   HEAP8[$3 + 31 | 0] = 1;
  }
  __stack_pointer = $3 + 32 | 0;
  return HEAP8[$3 + 31 | 0] & 1;
 }
 
 function utilTimerIsFull() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  HEAP8[$0 + 15 | 0] = HEAPU8[370273] + 1 & 15;
  return HEAPU8[$0 + 15 | 0] == HEAPU8[370274];
 }
 
 function utilTimerRemoveTask($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  jshInterruptOff();
  HEAP8[$2 + 3 | 0] = HEAPU8[370273];
  block : {
   if (HEAPU8[$2 + 3 | 0] != HEAPU8[370274]) {
    HEAP8[$2 + 2 | 0] = HEAPU8[370274] + 15 & 15;
    HEAP8[$2 + 3 | 0] = HEAPU8[$2 + 3 | 0] + 15 & 15;
    while (1) {
     if (HEAPU8[$2 + 3 | 0] != HEAPU8[$2 + 2 | 0]) {
      if (FUNCTION_TABLE[HEAP32[$2 + 8 >> 2]](Math_imul(HEAPU8[$2 + 3 | 0], 25) + 370304 | 0, HEAP32[$2 + 4 >> 2]) & 1) {
       HEAP8[$2 + 1 | 0] = HEAPU8[$2 + 3 | 0] + 15 & 15;
       while (1) {
        if (HEAPU8[$2 + 1 | 0] != HEAPU8[$2 + 2 | 0]) {
         $3 = Math_imul(HEAPU8[$2 + 1 | 0], 25) + 370304 | 0;
         $0 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
         $4 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
         $5 = $0;
         $1 = Math_imul(HEAPU8[$2 + 3 | 0], 25) + 370304 | 0;
         $0 = $1;
         HEAP8[$0 | 0] = $5;
         HEAP8[$0 + 1 | 0] = $5 >>> 8;
         HEAP8[$0 + 2 | 0] = $5 >>> 16;
         HEAP8[$0 + 3 | 0] = $5 >>> 24;
         HEAP8[$0 + 4 | 0] = $4;
         HEAP8[$0 + 5 | 0] = $4 >>> 8;
         HEAP8[$0 + 6 | 0] = $4 >>> 16;
         HEAP8[$0 + 7 | 0] = $4 >>> 24;
         HEAP8[$0 + 24 | 0] = HEAPU8[$3 + 24 | 0];
         $0 = HEAPU8[$3 + 20 | 0] | HEAPU8[$3 + 21 | 0] << 8 | (HEAPU8[$3 + 22 | 0] << 16 | HEAPU8[$3 + 23 | 0] << 24);
         $4 = HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24);
         $5 = $4;
         $4 = $1;
         HEAP8[$4 + 16 | 0] = $5;
         HEAP8[$4 + 17 | 0] = $5 >>> 8;
         HEAP8[$4 + 18 | 0] = $5 >>> 16;
         HEAP8[$4 + 19 | 0] = $5 >>> 24;
         HEAP8[$4 + 20 | 0] = $0;
         HEAP8[$4 + 21 | 0] = $0 >>> 8;
         HEAP8[$4 + 22 | 0] = $0 >>> 16;
         HEAP8[$4 + 23 | 0] = $0 >>> 24;
         $4 = HEAPU8[$3 + 12 | 0] | HEAPU8[$3 + 13 | 0] << 8 | (HEAPU8[$3 + 14 | 0] << 16 | HEAPU8[$3 + 15 | 0] << 24);
         $0 = HEAPU8[$3 + 8 | 0] | HEAPU8[$3 + 9 | 0] << 8 | (HEAPU8[$3 + 10 | 0] << 16 | HEAPU8[$3 + 11 | 0] << 24);
         $5 = $0;
         $0 = $1;
         HEAP8[$0 + 8 | 0] = $5;
         HEAP8[$0 + 9 | 0] = $5 >>> 8;
         HEAP8[$0 + 10 | 0] = $5 >>> 16;
         HEAP8[$0 + 11 | 0] = $5 >>> 24;
         HEAP8[$0 + 12 | 0] = $4;
         HEAP8[$0 + 13 | 0] = $4 >>> 8;
         HEAP8[$0 + 14 | 0] = $4 >>> 16;
         HEAP8[$0 + 15 | 0] = $4 >>> 24;
         HEAP8[$2 + 3 | 0] = HEAPU8[$2 + 1 | 0];
         HEAP8[$2 + 1 | 0] = HEAPU8[$2 + 3 | 0] + 15 & 15;
         continue;
        }
        break;
       };
       HEAP8[370274] = HEAPU8[370274] + 1 & 15;
       jshInterruptOn();
       HEAP8[$2 + 15 | 0] = 1;
       break block;
      } else {
       HEAP8[$2 + 3 | 0] = HEAPU8[$2 + 3 | 0] + 15 & 15;
       continue;
      }
     }
     break;
    };
   }
   jshInterruptOn();
   HEAP8[$2 + 15 | 0] = 0;
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP8[$2 + 15 | 0] & 1;
 }
 
 function utilTimerGetLastTask($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 24 >> 2] = $0;
  HEAP32[$4 + 20 >> 2] = $1;
  HEAP32[$4 + 16 >> 2] = $2;
  jshInterruptOff();
  HEAP8[$4 + 15 | 0] = HEAPU8[370273];
  block : {
   if (HEAPU8[$4 + 15 | 0] != HEAPU8[370274]) {
    HEAP8[$4 + 15 | 0] = HEAPU8[$4 + 15 | 0] + 15 & 15;
    while (1) {
     if (HEAPU8[$4 + 15 | 0] != (HEAPU8[370274] + 15 & 15)) {
      if (FUNCTION_TABLE[HEAP32[$4 + 24 >> 2]](Math_imul(HEAPU8[$4 + 15 | 0], 25) + 370304 | 0, HEAP32[$4 + 20 >> 2]) & 1) {
       $3 = Math_imul(HEAPU8[$4 + 15 | 0], 25) + 370304 | 0;
       $0 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
       $2 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
       $5 = $0;
       $1 = HEAP32[$4 + 16 >> 2];
       $0 = $1;
       HEAP8[$0 | 0] = $5;
       HEAP8[$0 + 1 | 0] = $5 >>> 8;
       HEAP8[$0 + 2 | 0] = $5 >>> 16;
       HEAP8[$0 + 3 | 0] = $5 >>> 24;
       HEAP8[$0 + 4 | 0] = $2;
       HEAP8[$0 + 5 | 0] = $2 >>> 8;
       HEAP8[$0 + 6 | 0] = $2 >>> 16;
       HEAP8[$0 + 7 | 0] = $2 >>> 24;
       HEAP8[$0 + 24 | 0] = HEAPU8[$3 + 24 | 0];
       $0 = HEAPU8[$3 + 20 | 0] | HEAPU8[$3 + 21 | 0] << 8 | (HEAPU8[$3 + 22 | 0] << 16 | HEAPU8[$3 + 23 | 0] << 24);
       $2 = HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24);
       $5 = $2;
       $2 = $1;
       HEAP8[$2 + 16 | 0] = $5;
       HEAP8[$2 + 17 | 0] = $5 >>> 8;
       HEAP8[$2 + 18 | 0] = $5 >>> 16;
       HEAP8[$2 + 19 | 0] = $5 >>> 24;
       HEAP8[$2 + 20 | 0] = $0;
       HEAP8[$2 + 21 | 0] = $0 >>> 8;
       HEAP8[$2 + 22 | 0] = $0 >>> 16;
       HEAP8[$2 + 23 | 0] = $0 >>> 24;
       $2 = HEAPU8[$3 + 12 | 0] | HEAPU8[$3 + 13 | 0] << 8 | (HEAPU8[$3 + 14 | 0] << 16 | HEAPU8[$3 + 15 | 0] << 24);
       $0 = HEAPU8[$3 + 8 | 0] | HEAPU8[$3 + 9 | 0] << 8 | (HEAPU8[$3 + 10 | 0] << 16 | HEAPU8[$3 + 11 | 0] << 24);
       $5 = $0;
       $0 = $1;
       HEAP8[$0 + 8 | 0] = $5;
       HEAP8[$0 + 9 | 0] = $5 >>> 8;
       HEAP8[$0 + 10 | 0] = $5 >>> 16;
       HEAP8[$0 + 11 | 0] = $5 >>> 24;
       HEAP8[$0 + 12 | 0] = $2;
       HEAP8[$0 + 13 | 0] = $2 >>> 8;
       HEAP8[$0 + 14 | 0] = $2 >>> 16;
       HEAP8[$0 + 15 | 0] = $2 >>> 24;
       jshInterruptOn();
       HEAP8[$4 + 31 | 0] = 1;
       break block;
      } else {
       HEAP8[$4 + 15 | 0] = HEAPU8[$4 + 15 | 0] + 15 & 15;
       continue;
      }
     }
     break;
    };
   }
   jshInterruptOn();
   HEAP8[$4 + 31 | 0] = 0;
  }
  __stack_pointer = $4 + 32 | 0;
  return HEAP8[$4 + 31 | 0] & 1;
 }
 
 function jstGetLastPinTimerTask($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $0 = utilTimerGetLastTask(563, $2 + 15 | 0, HEAP32[$2 + 8 >> 2]);
  __stack_pointer = $2 + 16 | 0;
  return $0 & 1;
 }
 
 function jstPinTaskChecker($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  block : {
   if (HEAPU8[HEAP32[$2 + 24 >> 2] + 24 | 0] != 2) {
    HEAP8[$2 + 31 | 0] = 0;
    break block;
   }
   HEAP8[$2 + 19 | 0] = HEAPU8[HEAP32[$2 + 20 >> 2]];
   HEAP32[$2 + 12 >> 2] = 0;
   while (1) {
    if (HEAP32[$2 + 12 >> 2] < 8) {
     if (HEAPU8[HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 24 >> 2] + 8 | 0) | 0] == HEAPU8[$2 + 19 | 0]) {
      HEAP8[$2 + 31 | 0] = 1;
      break block;
     }
     if (HEAPU8[HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 24 >> 2] + 8 | 0) | 0] == 255) {
      HEAP8[$2 + 31 | 0] = 0;
      break block;
     } else {
      HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
      continue;
     }
    }
    break;
   };
   HEAP8[$2 + 31 | 0] = 0;
  }
  return HEAP8[$2 + 31 | 0] & 1;
 }
 
 function jstGetLastBufferTimerTask($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP16[$2 + 6 >> 1] = jsvGetRef(HEAP32[$2 + 12 >> 2]);
  $0 = utilTimerGetLastTask(564, $2 + 6 | 0, HEAP32[$2 + 8 >> 2]);
  __stack_pointer = $2 + 16 | 0;
  return $0 & 1;
 }
 
 function jstBufferTaskChecker($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  block1 : {
   if (!(HEAPU8[HEAP32[$2 + 8 >> 2] + 24 | 0] == 4 | HEAPU8[HEAP32[$2 + 8 >> 2] + 24 | 0] == 5 | (HEAPU8[HEAP32[$2 + 8 >> 2] + 24 | 0] == 6 | HEAPU8[HEAP32[$2 + 8 >> 2] + 24 | 0] == 7))) {
    HEAP8[$2 + 15 | 0] = 0;
    break block1;
   }
   HEAP16[$2 + 2 >> 1] = HEAPU16[HEAP32[$2 + 4 >> 2] >> 1];
   $0 = 1;
   $1 = HEAP32[$2 + 8 >> 2];
   if (HEAPU16[$2 + 2 >> 1] != (HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8)) {
    $0 = HEAP32[$2 + 8 >> 2];
    $0 = HEAPU16[$2 + 2 >> 1] == (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8);
   }
   HEAP8[$2 + 15 | 0] = $0;
  }
  return HEAP8[$2 + 15 | 0] & 1;
 }
 
 function jstPinOutputAtTime($0, $1, $2, $3, $4, $5) {
  var $6 = 0;
  $6 = __stack_pointer + -64 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 56 >> 2] = $0;
  HEAP32[$6 + 60 >> 2] = $1;
  HEAP32[$6 + 52 >> 2] = $2;
  HEAP32[$6 + 48 >> 2] = $3;
  HEAP32[$6 + 44 >> 2] = $4;
  HEAP8[$6 + 43 | 0] = $5;
  $1 = HEAP32[$6 + 56 >> 2];
  HEAP8[$6 + 18 | 0] = $1;
  HEAP8[$6 + 19 | 0] = $1 >>> 8;
  HEAP8[$6 + 20 | 0] = $1 >>> 16;
  HEAP8[$6 + 21 | 0] = $1 >>> 24;
  HEAP8[$6 + 22 | 0] = 0;
  HEAP8[$6 + 23 | 0] = 0;
  HEAP8[$6 + 24 | 0] = 0;
  HEAP8[$6 + 25 | 0] = 0;
  HEAP8[$6 + 42 | 0] = 2;
  HEAP32[$6 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$6 + 12 >> 2] < 8) {
    $1 = HEAP32[$6 + 12 >> 2] + ($6 + 26 | 0) | 0;
    if (HEAP32[$6 + 12 >> 2] < HEAP32[$6 + 44 >> 2]) {
     $0 = HEAPU8[HEAP32[$6 + 48 >> 2] + HEAP32[$6 + 12 >> 2] | 0]
    } else {
     $0 = 255
    }
    HEAP8[$1 | 0] = $0;
    HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 12 >> 2] + 1;
    continue;
   }
   break;
  };
  HEAP8[$6 + 34 | 0] = HEAPU8[$6 + 43 | 0];
  HEAP32[$6 + 8 >> 2] = 2e6;
  while (1) {
   $0 = 0;
   block1 : {
    if (!(utilTimerIsFull() & 1)) {
     break block1
    }
    $0 = 0;
    if (jspIsInterrupted() & 1) {
     break block1
    }
    $0 = HEAP32[$6 + 8 >> 2];
    HEAP32[$6 + 8 >> 2] = $0 - 1;
    $0 = ($0 | 0) > 0;
   }
   if ($0) {
    continue
   }
   break;
  };
  block2 : {
   if (jspIsInterrupted() & 1) {
    jsExceptionHere(4, 128055, 0);
    break block2;
   }
   if (HEAP32[$6 + 8 >> 2] <= 0) {
    jsExceptionHere(4, 128030, 0)
   }
  }
  $0 = utilTimerInsertTask($6 + 18 | 0, HEAP32[$6 + 52 >> 2]);
  __stack_pointer = $6 - -64 | 0;
  return $0 & 1;
 }
 
 function jstExecuteFn($0, $1, $2, $3, $4, $5) {
  var $6 = 0;
  $6 = __stack_pointer + -64 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 60 >> 2] = $0;
  HEAP32[$6 + 56 >> 2] = $1;
  HEAP32[$6 + 48 >> 2] = $2;
  HEAP32[$6 + 52 >> 2] = $3;
  HEAP32[$6 + 44 >> 2] = $4;
  HEAP32[$6 + 40 >> 2] = $5;
  $3 = HEAP32[$6 + 48 >> 2];
  HEAP8[$6 + 15 | 0] = $3;
  HEAP8[$6 + 16 | 0] = $3 >>> 8;
  HEAP8[$6 + 17 | 0] = $3 >>> 16;
  HEAP8[$6 + 18 | 0] = $3 >>> 24;
  $0 = HEAP32[$6 + 44 >> 2];
  HEAP8[$6 + 19 | 0] = $0;
  HEAP8[$6 + 20 | 0] = $0 >>> 8;
  HEAP8[$6 + 21 | 0] = $0 >>> 16;
  HEAP8[$6 + 22 | 0] = $0 >>> 24;
  HEAP8[$6 + 39 | 0] = 3;
  $0 = HEAP32[$6 + 60 >> 2];
  HEAP8[$6 + 23 | 0] = $0;
  HEAP8[$6 + 24 | 0] = $0 >>> 8;
  HEAP8[$6 + 25 | 0] = $0 >>> 16;
  HEAP8[$6 + 26 | 0] = $0 >>> 24;
  $0 = HEAP32[$6 + 56 >> 2];
  HEAP8[$6 + 27 | 0] = $0;
  HEAP8[$6 + 28 | 0] = $0 >>> 8;
  HEAP8[$6 + 29 | 0] = $0 >>> 16;
  HEAP8[$6 + 30 | 0] = $0 >>> 24;
  HEAP32[$6 + 8 >> 2] = 2e6;
  while (1) {
   $0 = 0;
   block : {
    if (!(utilTimerIsFull() & 1)) {
     break block
    }
    $0 = 0;
    if (jspIsInterrupted() & 1) {
     break block
    }
    $0 = HEAP32[$6 + 8 >> 2];
    HEAP32[$6 + 8 >> 2] = $0 - 1;
    $0 = ($0 | 0) > 0;
   }
   if ($0) {
    continue
   }
   break;
  };
  block1 : {
   if (jspIsInterrupted() & 1) {
    jsExceptionHere(4, 128055, 0);
    break block1;
   }
   if (HEAP32[$6 + 8 >> 2] <= 0) {
    jsExceptionHere(4, 128030, 0)
   }
  }
  $0 = utilTimerInsertTask($6 + 15 | 0, HEAP32[$6 + 40 >> 2]);
  __stack_pointer = $6 - -64 | 0;
  return $0 & 1;
 }
 
 function jstStartSignal($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0;
  $9 = __stack_pointer + -64 | 0;
  __stack_pointer = $9;
  HEAP32[$9 + 48 >> 2] = $0;
  HEAP32[$9 + 52 >> 2] = $1;
  HEAP32[$9 + 40 >> 2] = $2;
  $1 = $3;
  HEAP32[$9 + 44 >> 2] = $1;
  HEAP8[$9 + 39 | 0] = $4;
  HEAP8[$9 + 38 | 0] = $5;
  HEAP32[$9 + 32 >> 2] = $6;
  HEAP32[$9 + 28 >> 2] = $7;
  HEAP8[$9 + 27 | 0] = $8;
  block : {
   if (!(jshIsPinValid(HEAPU8[$9 + 39 | 0]) & 1)) {
    HEAP8[$9 + 63 | 0] = 0;
    break block;
   }
   $1 = HEAP32[$9 + 40 >> 2];
   HEAP8[$9 + 6 | 0] = $1;
   HEAP8[$9 + 7 | 0] = $1 >>> 8;
   HEAP8[$9 + 8 | 0] = $1 >>> 16;
   HEAP8[$9 + 9 | 0] = $1 >>> 24;
   $1 = HEAP32[$9 + 52 >> 2];
   $0 = $1;
   $1 = HEAP32[$9 + 40 >> 2];
   $2 = $1;
   $3 = $1 + HEAP32[$9 + 48 >> 2] | 0;
   $1 = HEAP32[$9 + 44 >> 2];
   $0 = $0 + $1 | 0;
   HEAP8[$9 + 2 | 0] = $3;
   HEAP8[$9 + 3 | 0] = $3 >>> 8;
   HEAP8[$9 + 4 | 0] = $3 >>> 16;
   HEAP8[$9 + 5 | 0] = $3 >>> 24;
   HEAP8[$9 + 26 | 0] = HEAPU8[$9 + 27 | 0];
   block2 : {
    if (!(HEAPU8[$9 + 27 | 0] != 4 & HEAPU8[$9 + 27 | 0] != 6)) {
     HEAP8[$9 + 24 | 0] = HEAPU8[$9 + 39 | 0];
     HEAP8[$9 + 25 | 0] = HEAPU8[$9 + 38 | 0];
     break block2;
    }
    block4 : {
     if (!(HEAPU8[$9 + 27 | 0] != 5 & HEAPU8[$9 + 27 | 0] != 7)) {
      if (!HEAPU8[(Math_imul(HEAPU8[$9 + 39 | 0], 3) + 182064 | 0) + 2 | 0]) {
       HEAP8[$9 + 63 | 0] = 0;
       break block;
      }
      HEAP8[$9 + 24 | 0] = HEAPU8[$9 + 39 | 0];
      break block4;
     }
     HEAP8[$9 + 63 | 0] = 0;
     break block;
    }
   }
   $0 = jsvGetRef(HEAP32[$9 + 32 >> 2]);
   HEAP8[$9 + 14 | 0] = $0;
   HEAP8[$9 + 15 | 0] = $0 >>> 8;
   block5 : {
    if (HEAP32[$9 + 28 >> 2]) {
     $0 = jsvGetRef(HEAP32[$9 + 28 >> 2]);
     HEAP8[$9 + 16 | 0] = $0;
     HEAP8[$9 + 17 | 0] = $0 >>> 8;
     break block5;
    }
    HEAP8[$9 + 16 | 0] = 0;
    HEAP8[$9 + 17 | 0] = 0;
   }
   jstUtilTimerSetupBuffer($9 + 2 | 0);
   HEAP8[$9 + 63 | 0] = utilTimerInsertTask($9 + 2 | 0, 0) & 1;
  }
  __stack_pointer = $9 - -64 | 0;
  return HEAP8[$9 + 63 | 0] & 1;
 }
 
 function jstStopBufferTimerTask($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP16[$1 + 10 >> 1] = jsvGetRef(HEAP32[$1 + 12 >> 2]);
  $0 = utilTimerRemoveTask(564, $1 + 10 | 0);
  __stack_pointer = $1 + 16 | 0;
  return $0 & 1;
 }
 
 function jstReset() {
  jshUtilTimerDisable();
  HEAP8[370275] = 0;
  HEAP8[370273] = 0;
  HEAP8[370274] = 0;
  HEAP32[92676] = 0;
  HEAP32[92572] = 0;
  HEAP32[92570] = jshGetSystemTime();
  HEAP32[92571] = i64toi32_i32$HIGH_BITS;
 }
 
 function jstSystemTimeChanged($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 12 >> 2] = $1;
 }
 
 function jstDumpUtilityTimers() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0;
  $0 = __stack_pointer - 528 | 0;
  __stack_pointer = $0;
  jshInterruptOff();
  HEAP32[$0 + 524 >> 2] = 0;
  while (1) {
   if (HEAP32[$0 + 524 >> 2] < 16) {
    $1 = Math_imul(HEAP32[$0 + 524 >> 2], 25) + 370304 | 0;
    $2 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    $3 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $4 = $2;
    $5 = ($0 + 112 | 0) + Math_imul(HEAP32[$0 + 524 >> 2], 25) | 0;
    $2 = $5;
    HEAP8[$2 | 0] = $4;
    HEAP8[$2 + 1 | 0] = $4 >>> 8;
    HEAP8[$2 + 2 | 0] = $4 >>> 16;
    HEAP8[$2 + 3 | 0] = $4 >>> 24;
    HEAP8[$2 + 4 | 0] = $3;
    HEAP8[$2 + 5 | 0] = $3 >>> 8;
    HEAP8[$2 + 6 | 0] = $3 >>> 16;
    HEAP8[$2 + 7 | 0] = $3 >>> 24;
    HEAP8[$2 + 24 | 0] = HEAPU8[$1 + 24 | 0];
    $2 = HEAPU8[$1 + 20 | 0] | HEAPU8[$1 + 21 | 0] << 8 | (HEAPU8[$1 + 22 | 0] << 16 | HEAPU8[$1 + 23 | 0] << 24);
    $3 = HEAPU8[$1 + 16 | 0] | HEAPU8[$1 + 17 | 0] << 8 | (HEAPU8[$1 + 18 | 0] << 16 | HEAPU8[$1 + 19 | 0] << 24);
    $4 = $3;
    $3 = $5;
    HEAP8[$3 + 16 | 0] = $4;
    HEAP8[$3 + 17 | 0] = $4 >>> 8;
    HEAP8[$3 + 18 | 0] = $4 >>> 16;
    HEAP8[$3 + 19 | 0] = $4 >>> 24;
    HEAP8[$3 + 20 | 0] = $2;
    HEAP8[$3 + 21 | 0] = $2 >>> 8;
    HEAP8[$3 + 22 | 0] = $2 >>> 16;
    HEAP8[$3 + 23 | 0] = $2 >>> 24;
    $3 = HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8 | (HEAPU8[$1 + 14 | 0] << 16 | HEAPU8[$1 + 15 | 0] << 24);
    $2 = HEAPU8[$1 + 8 | 0] | HEAPU8[$1 + 9 | 0] << 8 | (HEAPU8[$1 + 10 | 0] << 16 | HEAPU8[$1 + 11 | 0] << 24);
    $4 = $2;
    $2 = $5;
    HEAP8[$2 + 8 | 0] = $4;
    HEAP8[$2 + 9 | 0] = $4 >>> 8;
    HEAP8[$2 + 10 | 0] = $4 >>> 16;
    HEAP8[$2 + 11 | 0] = $4 >>> 24;
    HEAP8[$2 + 12 | 0] = $3;
    HEAP8[$2 + 13 | 0] = $3 >>> 8;
    HEAP8[$2 + 14 | 0] = $3 >>> 16;
    HEAP8[$2 + 15 | 0] = $3 >>> 24;
    HEAP32[$0 + 524 >> 2] = HEAP32[$0 + 524 >> 2] + 1;
    continue;
   }
   break;
  };
  HEAP8[$0 + 111 | 0] = HEAPU8[370273];
  HEAP8[$0 + 110 | 0] = HEAPU8[370274];
  jshInterruptOn();
  HEAP32[$0 + 64 >> 2] = HEAP8[370275] & 1 ? 135411 : 136903;
  jsiConsolePrintf(147337, $0 - -64 | 0);
  HEAP8[$0 + 109 | 0] = HEAPU8[$0 + 110 | 0];
  HEAP8[$0 + 108 | 0] = 0;
  while (1) {
   if (HEAPU8[$0 + 109 | 0] != HEAPU8[$0 + 111 | 0]) {
    HEAP8[$0 + 108 | 0] = 1;
    $1 = ($0 + 112 | 0) + Math_imul(HEAPU8[$0 + 109 | 0], 25) | 0;
    HEAP8[$0 + 104 | 0] = HEAPU8[$1 + 24 | 0];
    $3 = HEAPU8[$1 + 16 | 0] | HEAPU8[$1 + 17 | 0] << 8 | (HEAPU8[$1 + 18 | 0] << 16 | HEAPU8[$1 + 19 | 0] << 24);
    $2 = HEAPU8[$1 + 20 | 0] | HEAPU8[$1 + 21 | 0] << 8 | (HEAPU8[$1 + 22 | 0] << 16 | HEAPU8[$1 + 23 | 0] << 24);
    HEAP32[$0 + 96 >> 2] = $3;
    HEAP32[$0 + 100 >> 2] = $2;
    $3 = HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8 | (HEAPU8[$1 + 14 | 0] << 16 | HEAPU8[$1 + 15 | 0] << 24);
    $2 = HEAPU8[$1 + 8 | 0] | HEAPU8[$1 + 9 | 0] << 8 | (HEAPU8[$1 + 10 | 0] << 16 | HEAPU8[$1 + 11 | 0] << 24);
    HEAP32[$0 + 88 >> 2] = $2;
    HEAP32[$0 + 92 >> 2] = $3;
    $2 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $3 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP32[$0 + 80 >> 2] = $3;
    HEAP32[$0 + 84 >> 2] = $2;
    $2 = HEAPU8[$0 + 80 | 0] | HEAPU8[$0 + 81 | 0] << 8 | (HEAPU8[$0 + 82 | 0] << 16 | HEAPU8[$0 + 83 | 0] << 24);
    $3 = $2 >> 31;
    $6 = jshGetMillisecondsFromTime($2, $3) * 1.0e3;
    if (Math_abs($6) < 2147483647.0) {
     $2 = ~~$6
    } else {
     $2 = -2147483648
    }
    $3 = HEAPU8[$0 + 84 | 0] | HEAPU8[$0 + 85 | 0] << 8 | (HEAPU8[$0 + 86 | 0] << 16 | HEAPU8[$0 + 87 | 0] << 24);
    $6 = jshGetMillisecondsFromTime($3, 0) * 1.0e3;
    if (Math_abs($6) < 2147483647.0) {
     $5 = ~~$6
    } else {
     $5 = -2147483648
    }
    HEAP32[$0 + 48 >> 2] = $2;
    HEAP32[$0 + 52 >> 2] = $5;
    jsiConsolePrintf(146924, $0 + 48 | 0);
    block8 : {
     block7 : {
      switch (HEAPU8[$0 + 104 | 0] - 1 | 0) {
      case 0:
       jsiConsolePrintf(147830, 0);
       break block8;
      case 1:
       jsiConsolePrintf(146869, 0);
       HEAP32[$0 + 524 >> 2] = 0;
       while (1) {
        if (HEAP32[$0 + 524 >> 2] < 8) {
         if (HEAPU8[HEAP32[$0 + 524 >> 2] + ($0 + 88 | 0) | 0] != 255) {
          $2 = HEAPU8[HEAP32[$0 + 524 >> 2] + ($0 + 88 | 0) | 0];
          HEAP32[$0 + 20 >> 2] = HEAPU8[$0 + 96 | 0] >> HEAP32[$0 + 524 >> 2] & 1;
          HEAP32[$0 + 16 >> 2] = $2;
          jsiConsolePrintf(142528, $0 + 16 | 0);
         }
         HEAP32[$0 + 524 >> 2] = HEAP32[$0 + 524 >> 2] + 1;
         continue;
        }
        break;
       };
       jsiConsolePrintf(148265, 0);
       break block8;
      case 3:
       jsiConsolePrintf(147969, 0);
       break block8;
      case 4:
       jsiConsolePrintf(147974, 0);
       break block8;
      case 5:
       jsiConsolePrintf(147979, 0);
       break block8;
      case 6:
       jsiConsolePrintf(147985, 0);
       break block8;
      case 2:
       $2 = HEAPU8[$0 + 88 | 0] | HEAPU8[$0 + 89 | 0] << 8 | (HEAPU8[$0 + 90 | 0] << 16 | HEAPU8[$0 + 91 | 0] << 24);
       HEAP32[$0 + 36 >> 2] = HEAPU8[$0 + 92 | 0] | HEAPU8[$0 + 93 | 0] << 8 | (HEAPU8[$0 + 94 | 0] << 16 | HEAPU8[$0 + 95 | 0] << 24);
       HEAP32[$0 + 32 >> 2] = $2;
       jsiConsolePrintf(148183, $0 + 32 | 0);
       break block8;
      default:
       break block7;
      };
     }
     HEAP32[$0 >> 2] = HEAPU8[$0 + 104 | 0];
     jsiConsolePrintf(147823, $0);
    }
    HEAP8[$0 + 109 | 0] = HEAPU8[$0 + 109 | 0] + 1 & 15;
    continue;
   }
   break;
  };
  if (!(HEAP8[$0 + 108 | 0] & 1)) {
   jsiConsolePrintf(148089, 0)
  }
  __stack_pointer = $0 + 528 | 0;
 }
 
 function jsi2cPopulateI2CInfo($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer + -64 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 56 >> 2] = $0;
  HEAP32[$2 + 52 >> 2] = $1;
  jshI2CInitInfo(HEAP32[$2 + 56 >> 2]);
  HEAP32[$2 + 16 >> 2] = 135771;
  HEAP16[$2 + 20 >> 1] = 13;
  HEAP16[($2 + 16 | 0) + 6 >> 1] = 0;
  HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 56 >> 2] + 4;
  HEAP32[$2 + 28 >> 2] = 140408;
  HEAP16[$2 + 32 >> 1] = 13;
  HEAP16[($2 + 16 | 0) + 18 >> 1] = 0;
  HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 56 >> 2] + 5;
  HEAP32[$2 + 40 >> 2] = 137365;
  HEAP16[$2 + 44 >> 1] = 10;
  HEAP16[($2 + 16 | 0) + 30 >> 1] = 0;
  HEAP32[$2 + 48 >> 2] = HEAP32[$2 + 56 >> 2];
  block : {
   if (jsvReadConfigObject(HEAP32[$2 + 52 >> 2], $2 + 16 | 0, 3) & 1) {
    HEAP8[$2 + 15 | 0] = 1;
    $0 = HEAP32[$2 + 56 >> 2];
    if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) < 100) {
     jsExceptionHere(1, 137353, 0);
     HEAP8[$2 + 15 | 0] = 0;
    }
    HEAP8[$2 + 63 | 0] = HEAP8[$2 + 15 | 0] & 1;
    break block;
   }
   HEAP8[$2 + 63 | 0] = 0;
  }
  __stack_pointer = $2 - -64 | 0;
  return HEAP8[$2 + 63 | 0] & 1;
 }
 
 function jsi2cWrite($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 48 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 40 >> 2] = $0;
  HEAP8[$5 + 39 | 0] = $1;
  HEAP32[$5 + 32 >> 2] = $2;
  HEAP32[$5 + 28 >> 2] = $3;
  HEAP8[$5 + 27 | 0] = $4;
  block1 : {
   if (!(HEAPU8[HEAP32[$5 + 40 >> 2] + 4 | 0] != 255 & HEAPU8[HEAP32[$5 + 40 >> 2] + 5 | 0] != 255)) {
    HEAP8[$5 + 47 | 0] = 0;
    break block1;
   }
   i2c_initstruct($5 + 12 | 0, HEAP32[$5 + 40 >> 2]);
   i2c_start($5 + 12 | 0);
   if (!(i2c_wr($5 + 12 | 0, HEAPU8[$5 + 39 | 0] << 1) & 1)) {
    HEAP8[$5 + 47 | 0] = 0;
    break block1;
   }
   HEAP32[$5 + 8 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 8 >> 2] < HEAP32[$5 + 32 >> 2]) {
     i2c_wr($5 + 12 | 0, HEAPU8[HEAP32[$5 + 28 >> 2] + HEAP32[$5 + 8 >> 2] | 0]);
     HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] + 1;
     continue;
    }
    break;
   };
   if (HEAP8[$5 + 27 | 0] & 1) {
    i2c_stop($5 + 12 | 0)
   }
   HEAP8[HEAP32[$5 + 40 >> 2] + 6 | 0] = HEAP8[$5 + 14 | 0] & 1;
   HEAP8[$5 + 47 | 0] = 1;
  }
  __stack_pointer = $5 + 48 | 0;
  return HEAP8[$5 + 47 | 0] & 1;
 }
 
 function i2c_initstruct($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP8[HEAP32[$2 + 12 >> 2] + 1 | 0] = HEAPU8[HEAP32[$2 + 8 >> 2] + 5 | 0];
  HEAP8[HEAP32[$2 + 12 >> 2]] = HEAPU8[HEAP32[$2 + 8 >> 2] + 4 | 0];
  HEAP8[HEAP32[$2 + 12 >> 2] + 2 | 0] = HEAP8[HEAP32[$2 + 8 >> 2] + 6 | 0] & 1;
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2] = 25e4 / (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24));
  HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = HEAP8[HEAP32[$2 + 8 >> 2] + 7 | 0] & 1 ? 1e5 : 0;
 }
 
 function i2c_start($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  if (HEAP8[HEAP32[$1 + 12 >> 2] + 2 | 0] & 1) {
   i2c_pin_wr1(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0]);
   dly(HEAP32[$1 + 12 >> 2]);
   i2c_pin_wr1(HEAPU8[HEAP32[$1 + 12 >> 2]]);
   HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
   while (1) {
    $0 = 0;
    if (!(jshPinGetValue(HEAPU8[HEAP32[$1 + 12 >> 2]]) & 1)) {
     $0 = HEAP32[$1 + 8 >> 2] != 0
    }
    if ($0) {
     HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] - 1;
     continue;
    }
    break;
   };
   if (!(HEAP32[$1 + 8 >> 2] | !HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2])) {
    err(144173)
   }
   dly(HEAP32[$1 + 12 >> 2]);
  }
  block1 : {
   if (!HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2]) {
    break block1
   }
   if (jshPinGetValue(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0]) & 1) {
    break block1
   }
   err(144189);
  }
  i2c_pin_wr0(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0]);
  dly(HEAP32[$1 + 12 >> 2]);
  i2c_pin_wr0(HEAPU8[HEAP32[$1 + 12 >> 2]]);
  dly(HEAP32[$1 + 12 >> 2]);
  HEAP8[HEAP32[$1 + 12 >> 2] + 2 | 0] = 1;
  __stack_pointer = $1 + 16 | 0;
 }
 
 function i2c_wr($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 4 >> 2] < 8) {
    i2c_wr_bit(HEAP32[$2 + 12 >> 2], (HEAP32[$2 + 8 >> 2] & 128) != 0);
    HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] << 1;
    HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
    continue;
   }
   break;
  };
  i2c_rd_bit(HEAP32[$2 + 12 >> 2]);
  __stack_pointer = $2 + 16 | 0;
  return 1;
 }
 
 function i2c_stop($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  i2c_pin_wr0(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0]);
  dly(HEAP32[$1 + 12 >> 2]);
  i2c_pin_wr1(HEAPU8[HEAP32[$1 + 12 >> 2]]);
  HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
  while (1) {
   $0 = 0;
   if (!(jshPinGetValue(HEAPU8[HEAP32[$1 + 12 >> 2]]) & 1)) {
    $0 = HEAP32[$1 + 8 >> 2] != 0
   }
   if ($0) {
    HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] - 1;
    continue;
   }
   break;
  };
  if (!(HEAP32[$1 + 8 >> 2] | !HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2])) {
   err(144357)
  }
  dly(HEAP32[$1 + 12 >> 2]);
  i2c_pin_wr1(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0]);
  dly(HEAP32[$1 + 12 >> 2]);
  block1 : {
   if (!HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2]) {
    break block1
   }
   if (jshPinGetValue(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0]) & 1) {
    break block1
   }
   err(144372);
  }
  dly(HEAP32[$1 + 12 >> 2]);
  HEAP8[HEAP32[$1 + 12 >> 2] + 2 | 0] = 0;
  __stack_pointer = $1 + 16 | 0;
 }
 
 function i2c_pin_wr1($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  jshPinSetValue(HEAPU8[$1 + 15 | 0], 1);
  jshPinSetState(HEAPU8[$1 + 15 | 0], 1);
  jshPinSetState(HEAPU8[$1 + 15 | 0], 5);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function dly($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]) {
   jshDelayMicroseconds(HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2])
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function err($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 >> 2] = HEAP32[$1 + 12 >> 2];
  jsExceptionHere(1, 127731, $1);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function i2c_pin_wr0($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  jshPinSetValue(HEAPU8[$1 + 15 | 0], 0);
  jshPinSetState(HEAPU8[$1 + 15 | 0], 1);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function i2c_wr_bit($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP8[$2 + 11 | 0] = $1;
  block : {
   if (HEAP8[$2 + 11 | 0] & 1) {
    i2c_pin_wr1(HEAPU8[HEAP32[$2 + 12 >> 2] + 1 | 0]);
    break block;
   }
   i2c_pin_wr0(HEAPU8[HEAP32[$2 + 12 >> 2] + 1 | 0]);
  }
  dly(HEAP32[$2 + 12 >> 2]);
  i2c_pin_wr1(HEAPU8[HEAP32[$2 + 12 >> 2]]);
  dly(HEAP32[$2 + 12 >> 2]);
  dly(HEAP32[$2 + 12 >> 2]);
  HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2];
  while (1) {
   $0 = 0;
   if (!(jshPinGetValue(HEAPU8[HEAP32[$2 + 12 >> 2]]) & 1)) {
    $0 = HEAP32[$2 + 4 >> 2] != 0
   }
   if ($0) {
    HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] - 1;
    continue;
   }
   break;
  };
  if (!(HEAP32[$2 + 4 >> 2] | !HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2])) {
   err(144344)
  }
  i2c_pin_wr0(HEAPU8[HEAP32[$2 + 12 >> 2]]);
  i2c_pin_wr1(HEAPU8[HEAP32[$2 + 12 >> 2] + 1 | 0]);
  dly(HEAP32[$2 + 12 >> 2]);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function i2c_rd_bit($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  i2c_pin_wr1(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0]);
  dly(HEAP32[$1 + 12 >> 2]);
  i2c_pin_wr1(HEAPU8[HEAP32[$1 + 12 >> 2]]);
  dly(HEAP32[$1 + 12 >> 2]);
  HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
  while (1) {
   $0 = 0;
   if (!(jshPinGetValue(HEAPU8[HEAP32[$1 + 12 >> 2]]) & 1)) {
    $0 = HEAP32[$1 + 8 >> 2];
    HEAP32[$1 + 8 >> 2] = $0 - 1;
    $0 = ($0 | 0) != 0;
   }
   if ($0) {
    continue
   }
   break;
  };
  if (!(HEAP32[$1 + 8 >> 2] | !HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2])) {
   err(144498)
  }
  dly(HEAP32[$1 + 12 >> 2]);
  HEAP8[$1 + 7 | 0] = jshPinGetValue(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0]) & 1;
  i2c_pin_wr0(HEAPU8[HEAP32[$1 + 12 >> 2]]);
  dly(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return HEAP8[$1 + 7 | 0] & 1;
 }
 
 function jsi2cRead($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 48 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 40 >> 2] = $0;
  HEAP8[$5 + 39 | 0] = $1;
  HEAP32[$5 + 32 >> 2] = $2;
  HEAP32[$5 + 28 >> 2] = $3;
  HEAP8[$5 + 27 | 0] = $4;
  block1 : {
   if (!(HEAPU8[HEAP32[$5 + 40 >> 2] + 4 | 0] != 255 & HEAPU8[HEAP32[$5 + 40 >> 2] + 5 | 0] != 255)) {
    HEAP8[$5 + 47 | 0] = 0;
    break block1;
   }
   i2c_initstruct($5 + 12 | 0, HEAP32[$5 + 40 >> 2]);
   i2c_start($5 + 12 | 0);
   if (!(i2c_wr($5 + 12 | 0, HEAPU8[$5 + 39 | 0] << 1 | 1) & 1)) {
    HEAP8[$5 + 47 | 0] = 0;
    break block1;
   }
   HEAP32[$5 + 8 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 8 >> 2] < HEAP32[$5 + 32 >> 2]) {
     $0 = i2c_rd($5 + 12 | 0, HEAP32[$5 + 8 >> 2] == (HEAP32[$5 + 32 >> 2] - 1 | 0));
     HEAP8[HEAP32[$5 + 28 >> 2] + HEAP32[$5 + 8 >> 2] | 0] = $0;
     HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] + 1;
     continue;
    }
    break;
   };
   if (HEAP8[$5 + 27 | 0] & 1) {
    i2c_stop($5 + 12 | 0)
   }
   HEAP8[HEAP32[$5 + 40 >> 2] + 6 | 0] = HEAP8[$5 + 14 | 0] & 1;
   HEAP8[$5 + 47 | 0] = 1;
  }
  __stack_pointer = $5 + 48 | 0;
  return HEAP8[$5 + 47 | 0] & 1;
 }
 
 function i2c_rd($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP8[$2 + 11 | 0] = $1;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 4 >> 2] < 8) {
    HEAP32[$2 >> 2] = HEAP32[$2 >> 2] << 1 | i2c_rd_bit(HEAP32[$2 + 12 >> 2]) & 1;
    HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
    continue;
   }
   break;
  };
  i2c_wr_bit(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 11 | 0] & 1);
  i2c_pin_wr1(HEAPU8[HEAP32[$2 + 12 >> 2] + 1 | 0]);
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 >> 2];
 }
 
 function jsserialHardwareFunc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP8[$2 + 7 | 0] = HEAPU8[HEAP32[$2 + 8 >> 2]];
  jshTransmit(HEAPU8[$2 + 7 | 0], HEAP32[$2 + 12 >> 2] & 255);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsserialSoftwareFunc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $2 = __stack_pointer - 80 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 76 >> 2] = $0;
  HEAP32[$2 + 72 >> 2] = $1;
  HEAP32[$2 + 68 >> 2] = HEAP32[$2 + 72 >> 2];
  if (jshIsPinValid(HEAPU8[HEAP32[$2 + 68 >> 2] + 5 | 0]) & 1) {
   HEAP32[$2 + 64 >> 2] = (1 << HEAPU8[HEAP32[$2 + 68 >> 2] + 10 | 0]) - 1;
   HEAP32[$2 + 60 >> 2] = HEAPU8[HEAP32[$2 + 68 >> 2] + 10 | 0];
   HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 76 >> 2] & (1 << HEAPU8[HEAP32[$2 + 68 >> 2] + 8 | 0]) - 1 | HEAP32[$2 + 64 >> 2] << HEAPU8[HEAP32[$2 + 68 >> 2] + 8 | 0];
   HEAP32[$2 + 60 >> 2] = HEAPU8[HEAP32[$2 + 68 >> 2] + 8 | 0] + HEAP32[$2 + 60 >> 2];
   HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 64 >> 2] << 1;
   HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 60 >> 2] + 1;
   HEAP32[$2 + 56 >> 2] = jstGetUtilTimerOffset();
   $0 = HEAP32[$2 + 68 >> 2];
   $3 = jshGetTimeFromMilliseconds(1.0e3 / +(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)));
   HEAP32[$2 + 48 >> 2] = $3;
   $0 = i64toi32_i32$HIGH_BITS;
   HEAP32[$2 + 52 >> 2] = $0;
   block : {
    if (jstGetLastPinTimerTask(HEAPU8[HEAP32[$2 + 68 >> 2] + 5 | 0], $2 + 15 | 0) & 1) {
     $0 = HEAPU8[$2 + 15 | 0] | HEAPU8[$2 + 16 | 0] << 8 | (HEAPU8[$2 + 17 | 0] << 16 | HEAPU8[$2 + 18 | 0] << 24);
     $3 = $0 >> 31;
     $5 = $3;
     $3 = HEAP32[$2 + 48 >> 2];
     $4 = $3;
     $1 = $0 + $3 | 0;
     $0 = HEAP32[$2 + 52 >> 2];
     $3 = $0;
     $0 = $5;
     $0 = $3 + $0 | 0;
     HEAP32[$2 + 40 >> 2] = $1;
     $0 = $1 >>> 0 < $4 >>> 0 ? $0 + 1 | 0 : $0;
     HEAP32[$2 + 44 >> 2] = $0;
     break block;
    }
    $0 = jshGetTimeFromMilliseconds(1.0);
    HEAP32[$2 + 40 >> 2] = $0;
    $1 = i64toi32_i32$HIGH_BITS;
    HEAP32[$2 + 44 >> 2] = $1;
   }
   HEAP32[$2 + 8 >> 2] = 0;
   while (1) {
    if (HEAP32[$2 + 60 >> 2]) {
     HEAP8[$2 + 7 | 0] = HEAP32[$2 + 64 >> 2] & 1;
     HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 64 >> 2] >> 1;
     HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 60 >> 2] - 1;
     $1 = HEAP32[$2 + 40 >> 2];
     $0 = HEAP32[$2 + 44 >> 2];
     jstPinOutputAtTime($1, $0, $2 + 56 | 0, HEAP32[$2 + 68 >> 2] + 5 | 0, 1, HEAP8[$2 + 7 | 0] & 1);
     $1 = HEAP32[$2 + 52 >> 2];
     $5 = $1;
     $0 = HEAP32[$2 + 48 >> 2];
     $1 = HEAP32[$2 + 40 >> 2];
     $4 = $1;
     $3 = $0 + $1 | 0;
     $0 = HEAP32[$2 + 44 >> 2];
     $1 = $0;
     $0 = $5;
     $1 = $1 + $0 | 0;
     HEAP32[$2 + 40 >> 2] = $3;
     $1 = $3 >>> 0 < $4 >>> 0 ? $1 + 1 | 0 : $1;
     HEAP32[$2 + 44 >> 2] = $1;
     continue;
    }
    break;
   };
   $1 = HEAP32[$2 + 40 >> 2];
   $5 = $1;
   $0 = HEAP32[$2 + 44 >> 2];
   $3 = $0;
   $0 = HEAP32[$2 + 48 >> 2];
   $6 = $0;
   $1 = HEAP32[$2 + 52 >> 2];
   $4 = $1;
   $1 = HEAP32[$2 + 8 >> 2];
   $0 = $1 >> 31;
   $7 = $0;
   $0 = $4;
   $4 = $1;
   $1 = $7;
   $1 = __wasm_i64_mul($6, $0, $4, $1);
   $4 = $1;
   $0 = i64toi32_i32$HIGH_BITS;
   $1 = $0;
   $0 = $3;
   $3 = $0 + $1 | 0;
   $0 = $5;
   $1 = $4 + $0 | 0;
   $3 = $1 >>> 0 < $4 >>> 0 ? $3 + 1 | 0 : $3;
   HEAP32[$2 + 40 >> 2] = $1;
   HEAP32[$2 + 44 >> 2] = $3;
   $3 = HEAP32[$2 + 40 >> 2];
   $0 = HEAP32[$2 + 44 >> 2];
   jstPinOutputAtTime($3, $0, $2 + 56 | 0, HEAP32[$2 + 68 >> 2] + 5 | 0, 1, 1);
  }
  __stack_pointer = $2 + 80 | 0;
 }
 
 function jsserialPopulateUSARTInfo($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 192 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 188 >> 2] = $0;
  HEAP32[$3 + 184 >> 2] = $1;
  HEAP32[$3 + 180 >> 2] = $2;
  jshUSARTInitInfo(HEAP32[$3 + 188 >> 2]);
  HEAP32[$3 + 176 >> 2] = 0;
  HEAP32[$3 + 172 >> 2] = 0;
  HEAP32[$3 + 168 >> 2] = HEAPU8[HEAP32[$3 + 188 >> 2] + 8 | 0];
  HEAP32[$3 + 164 >> 2] = HEAPU8[HEAP32[$3 + 188 >> 2] + 10 | 0];
  HEAP32[$3 + 48 >> 2] = 123901;
  HEAP16[$3 + 52 >> 1] = 13;
  HEAP16[($3 + 48 | 0) + 6 >> 1] = 0;
  HEAP32[$3 + 56 >> 2] = HEAP32[$3 + 188 >> 2] + 4;
  HEAP32[$3 + 60 >> 2] = 123898;
  HEAP16[$3 + 64 >> 1] = 13;
  HEAP16[($3 + 48 | 0) + 18 >> 1] = 0;
  HEAP32[$3 + 68 >> 2] = HEAP32[$3 + 188 >> 2] + 5;
  HEAP32[$3 + 72 >> 2] = 135913;
  HEAP16[$3 + 76 >> 1] = 13;
  HEAP16[($3 + 48 | 0) + 30 >> 1] = 0;
  HEAP32[$3 + 80 >> 2] = HEAP32[$3 + 188 >> 2] + 6;
  HEAP32[$3 + 84 >> 2] = 126998;
  HEAP16[$3 + 88 >> 1] = 13;
  HEAP16[($3 + 48 | 0) + 42 >> 1] = 0;
  HEAP32[$3 + 92 >> 2] = HEAP32[$3 + 188 >> 2] + 7;
  HEAP32[$3 + 96 >> 2] = 136982;
  HEAP16[$3 + 100 >> 1] = 10;
  HEAP16[($3 + 48 | 0) + 54 >> 1] = 0;
  HEAP32[$3 + 104 >> 2] = $3 + 168;
  HEAP32[$3 + 108 >> 2] = 126966;
  HEAP16[$3 + 112 >> 1] = 10;
  HEAP16[($3 + 48 | 0) + 66 >> 1] = 0;
  HEAP32[$3 + 116 >> 2] = $3 + 164;
  HEAP32[$3 + 120 >> 2] = 123610;
  HEAP16[$3 + 124 >> 1] = 5;
  HEAP16[($3 + 48 | 0) + 78 >> 1] = 0;
  HEAP32[$3 + 128 >> 2] = $3 + 176;
  HEAP32[$3 + 132 >> 2] = 124079;
  HEAP16[$3 + 136 >> 1] = 5;
  HEAP16[($3 + 48 | 0) + 90 >> 1] = 0;
  HEAP32[$3 + 140 >> 2] = $3 + 172;
  HEAP32[$3 + 144 >> 2] = 127059;
  HEAP16[$3 + 148 >> 1] = 12;
  HEAP16[($3 + 48 | 0) + 102 >> 1] = 0;
  HEAP32[$3 + 152 >> 2] = HEAP32[$3 + 188 >> 2] + 12;
  if (!(jsvIsUndefined(HEAP32[$3 + 184 >> 2]) & 1)) {
   HEAP32[$3 + 44 >> 2] = jsvGetInteger(HEAP32[$3 + 184 >> 2]);
   block1 : {
    if (!(HEAP32[$3 + 44 >> 2] <= 1e7 & HEAP32[$3 + 44 >> 2] > 100)) {
     HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 44 >> 2];
     jsExceptionHere(1, 139613, $3 + 32 | 0);
     break block1;
    }
    $0 = HEAP32[$3 + 188 >> 2];
    $1 = HEAP32[$3 + 44 >> 2];
    HEAP8[$0 | 0] = $1;
    HEAP8[$0 + 1 | 0] = $1 >>> 8;
    HEAP8[$0 + 2 | 0] = $1 >>> 16;
    HEAP8[$0 + 3 | 0] = $1 >>> 24;
   }
  }
  HEAP8[$3 + 43 | 0] = 1;
  if (jsvReadConfigObject(HEAP32[$3 + 180 >> 2], $3 + 48 | 0, 9) & 1) {
   HEAP8[HEAP32[$3 + 188 >> 2] + 8 | 0] = HEAP32[$3 + 168 >> 2];
   HEAP8[HEAP32[$3 + 188 >> 2] + 10 | 0] = HEAP32[$3 + 164 >> 2];
   HEAP8[HEAP32[$3 + 188 >> 2] + 9 | 0] = 0;
   block3 : {
    if (jsvIsString(HEAP32[$3 + 176 >> 2]) & 1) {
     block2 : {
      if (!(jsvIsStringEqual(HEAP32[$3 + 176 >> 2], 135041) & 1)) {
       if (!(jsvIsStringEqual(HEAP32[$3 + 176 >> 2], 139037) & 1)) {
        break block2
       }
      }
      HEAP8[HEAP32[$3 + 188 >> 2] + 9 | 0] = 1;
      break block3;
     }
     block4 : {
      if (!(jsvIsStringEqual(HEAP32[$3 + 176 >> 2], 138088) & 1)) {
       if (!(jsvIsStringEqual(HEAP32[$3 + 176 >> 2], 135475) & 1)) {
        break block4
       }
      }
      HEAP8[HEAP32[$3 + 188 >> 2] + 9 | 0] = 2;
     }
     break block3;
    }
    if (jsvIsInt(HEAP32[$3 + 176 >> 2]) & 1) {
     $0 = jsvGetInteger(HEAP32[$3 + 176 >> 2]);
     HEAP8[HEAP32[$3 + 188 >> 2] + 9 | 0] = $0;
    }
   }
   if (HEAPU8[HEAP32[$3 + 188 >> 2] + 9 | 0] > 2) {
    HEAP32[$3 + 16 >> 2] = HEAPU8[HEAP32[$3 + 188 >> 2] + 9 | 0];
    jsExceptionHere(1, 139447, $3 + 16 | 0);
    HEAP8[$3 + 43 | 0] = 0;
   }
   if (HEAP8[$3 + 43 | 0] & 1) {
    block7 : {
     block6 : {
      block5 : {
       if (jsvIsUndefined(HEAP32[$3 + 172 >> 2]) & 1) {
        break block5
       }
       if (jsvIsNull(HEAP32[$3 + 172 >> 2]) & 1) {
        break block5
       }
       if (!(jsvIsStringEqual(HEAP32[$3 + 172 >> 2], 137563) & 1)) {
        break block6
       }
      }
      HEAP8[HEAP32[$3 + 188 >> 2] + 11 | 0] = 0;
      break block7;
     }
     block8 : {
      if (jsvIsStringEqual(HEAP32[$3 + 172 >> 2], 135072) & 1) {
       HEAP8[HEAP32[$3 + 188 >> 2] + 11 | 0] = 1;
       break block8;
      }
      HEAP32[$3 >> 2] = HEAP32[$3 + 172 >> 2];
      jsExceptionHere(1, 128579, $3);
      HEAP8[$3 + 43 | 0] = 0;
     }
    }
   }
  }
  jsvUnLock2(HEAP32[$3 + 176 >> 2], HEAP32[$3 + 172 >> 2]);
  __stack_pointer = $3 + 192 | 0;
  return HEAP8[$3 + 43 | 0] & 1;
 }
 
 function jsserialGetSendFunction($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 40 >> 2] = $0;
  HEAP32[$3 + 36 >> 2] = $1;
  HEAP32[$3 + 32 >> 2] = $2;
  HEAP8[$3 + 31 | 0] = jsiGetDeviceFromClass(HEAP32[$3 + 40 >> 2]);
  block2 : {
   if (!(HEAPU8[$3 + 31 | 0] < 17 | HEAPU8[$3 + 31 | 0] > 22)) {
    block1 : {
     if (HEAPU8[$3 + 31 | 0] < 22 | HEAPU8[$3 + 31 | 0] > 22) {
      break block1
     }
     if (jshIsDeviceInitialised(HEAPU8[$3 + 31 | 0]) & 1) {
      break block1
     }
     jshUSARTInitInfo($3 + 18 | 0);
     jshUSARTSetup(HEAPU8[$3 + 31 | 0], $3 + 18 | 0);
    }
    HEAP32[HEAP32[$3 + 36 >> 2] >> 2] = 565;
    HEAP8[HEAP32[$3 + 32 >> 2]] = HEAPU8[$3 + 31 | 0];
    HEAP8[$3 + 47 | 0] = 1;
    break block2;
   }
   if (!HEAPU8[$3 + 31 | 0]) {
    HEAP32[$3 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 40 >> 2], 137373);
    HEAP32[$3 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 40 >> 2], 127219);
    jsserialPopulateUSARTInfo($3 + 18 | 0, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
    jsvUnLock(HEAP32[$3 + 8 >> 2]);
    jsvUnLock(HEAP32[$3 + 12 >> 2]);
    HEAP32[HEAP32[$3 + 36 >> 2] >> 2] = 566;
    $0 = HEAPU8[$3 + 22 | 0] | HEAPU8[$3 + 23 | 0] << 8 | (HEAPU8[$3 + 24 | 0] << 16 | HEAPU8[$3 + 25 | 0] << 24);
    $1 = HEAPU8[$3 + 18 | 0] | HEAPU8[$3 + 19 | 0] << 8 | (HEAPU8[$3 + 20 | 0] << 16 | HEAPU8[$3 + 21 | 0] << 24);
    $4 = $1;
    $2 = HEAP32[$3 + 32 >> 2];
    $1 = $2;
    HEAP8[$1 | 0] = $4;
    HEAP8[$1 + 1 | 0] = $4 >>> 8;
    HEAP8[$1 + 2 | 0] = $4 >>> 16;
    HEAP8[$1 + 3 | 0] = $4 >>> 24;
    HEAP8[$1 + 4 | 0] = $0;
    HEAP8[$1 + 5 | 0] = $0 >>> 8;
    HEAP8[$1 + 6 | 0] = $0 >>> 16;
    HEAP8[$1 + 7 | 0] = $0 >>> 24;
    $1 = HEAPU8[$3 + 27 | 0] | HEAPU8[$3 + 28 | 0] << 8 | (HEAPU8[$3 + 29 | 0] << 16 | HEAPU8[$3 + 30 | 0] << 24);
    $0 = HEAPU8[$3 + 23 | 0] | HEAPU8[$3 + 24 | 0] << 8 | (HEAPU8[$3 + 25 | 0] << 16 | HEAPU8[$3 + 26 | 0] << 24);
    $4 = $0;
    $0 = $2;
    HEAP8[$0 + 5 | 0] = $4;
    HEAP8[$0 + 6 | 0] = $4 >>> 8;
    HEAP8[$0 + 7 | 0] = $4 >>> 16;
    HEAP8[$0 + 8 | 0] = $4 >>> 24;
    HEAP8[$0 + 9 | 0] = $1;
    HEAP8[$0 + 10 | 0] = $1 >>> 8;
    HEAP8[$0 + 11 | 0] = $1 >>> 16;
    HEAP8[$0 + 12 | 0] = $1 >>> 24;
    HEAP8[$3 + 47 | 0] = 1;
    break block2;
   }
   HEAP8[$3 + 47 | 0] = 0;
  }
  __stack_pointer = $3 + 48 | 0;
  return HEAP8[$3 + 47 | 0] & 1;
 }
 
 function jsserialGetSerialList($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  $0 = jsvObjectGetChild(HEAP32[92131], 135847, HEAP8[$1 + 15 | 0] & 1 ? 3 : 0);
  __stack_pointer = $1 + 16 | 0;
  return $0;
 }
 
 function jsserialEventCallbackInit($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  HEAP32[$2 + 16 >> 2] = jsvNewFlatStringOfLength(96);
  block : {
   if (!HEAP32[$2 + 16 >> 2]) {
    jsExceptionHere(1, 140613, 0);
    HEAP8[$2 + 31 | 0] = 0;
    break block;
   }
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 140395, HEAP32[$2 + 16 >> 2]);
   HEAP32[$2 + 12 >> 2] = jsvGetFlatStringPointer(HEAP32[$2 + 16 >> 2]);
   HEAP8[HEAP32[$2 + 12 >> 2] + 64 | 0] = 0;
   $0 = jshGetSystemTime();
   $1 = $0;
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP32[$0 + 72 >> 2] = $1;
   HEAP32[$0 + 76 >> 2] = i64toi32_i32$HIGH_BITS;
   $0 = HEAP32[$2 + 20 >> 2];
   HEAP32[HEAP32[$2 + 12 >> 2] + 80 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
   HEAP32[HEAP32[$2 + 12 >> 2] + 84 >> 2] = 0;
   HEAP8[HEAP32[$2 + 12 >> 2] + 88 | 0] = 0;
   HEAP8[HEAP32[$2 + 12 >> 2] + 89 | 0] = !!HEAPU8[HEAP32[$2 + 20 >> 2] + 9 | 0] + (HEAPU8[HEAP32[$2 + 20 >> 2] + 8 | 0] + HEAPU8[HEAP32[$2 + 20 >> 2] + 10 | 0] | 0);
   HEAP8[$2 + 11 | 0] = jshPinWatch(HEAPU8[HEAP32[$2 + 20 >> 2] + 4 | 0], 1, 1);
   block1 : {
    if (HEAPU8[$2 + 11 | 0]) {
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 136082, jsvNewFromInteger(HEAPU8[$2 + 11 | 0]));
     HEAP32[$2 + 4 >> 2] = jsserialGetSerialList(1);
     if (!HEAP32[$2 + 4 >> 2]) {
      HEAP8[$2 + 31 | 0] = 0;
      break block;
     }
     jsvSetArrayItem(HEAP32[$2 + 4 >> 2], HEAPU8[$2 + 11 | 0], HEAP32[$2 + 24 >> 2]);
     jsvUnLock(HEAP32[$2 + 4 >> 2]);
     jshSetEventCallback(HEAPU8[$2 + 11 | 0], 567);
     break block1;
    }
    HEAP32[$2 >> 2] = HEAPU8[HEAP32[$2 + 20 >> 2] + 4 | 0];
    jsExceptionHere(1, 140651, $2);
    HEAP8[$2 + 31 | 0] = 0;
    break block;
   }
   HEAP8[$2 + 31 | 0] = 1;
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP8[$2 + 31 | 0] & 1;
 }
 
 function jsserialEventCallback($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0.0, $5 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP8[$2 + 47 | 0] = $0;
  HEAP8[$2 + 46 | 0] = $1;
  HEAP32[$2 + 40 >> 2] = jsserialGetSerialList(0);
  block : {
   if (!HEAP32[$2 + 40 >> 2]) {
    break block
   }
   HEAP32[$2 + 36 >> 2] = jsvGetArrayItem(HEAP32[$2 + 40 >> 2], HEAPU8[$2 + 46 | 0]);
   if (!HEAP32[$2 + 36 >> 2]) {
    break block
   }
   HEAP32[$2 + 32 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 36 >> 2], 140395);
   HEAP32[$2 + 28 >> 2] = jsvGetFlatStringPointer(HEAP32[$2 + 32 >> 2]);
   if (!HEAP32[$2 + 28 >> 2]) {
    break block
   }
   HEAP32[$2 + 16 >> 2] = jshGetSystemTime();
   HEAP32[$2 + 20 >> 2] = i64toi32_i32$HIGH_BITS;
   $1 = HEAP32[$2 + 20 >> 2];
   $3 = HEAP32[$2 + 28 >> 2];
   $0 = HEAP32[$3 + 72 >> 2];
   $5 = HEAP32[$3 + 76 >> 2];
   $3 = HEAP32[$2 + 16 >> 2];
   HEAP32[$2 + 8 >> 2] = $3 - $0;
   $0 = ($3 >>> 0 < $0 >>> 0) + $5 | 0;
   $0 = $1 - $0 | 0;
   HEAP32[$2 + 12 >> 2] = $0;
   $3 = HEAP32[$2 + 20 >> 2];
   $0 = HEAP32[$2 + 16 >> 2];
   $1 = $0;
   $0 = HEAP32[$2 + 28 >> 2];
   HEAP32[$0 + 72 >> 2] = $1;
   HEAP32[$0 + 76 >> 2] = $3;
   HEAP8[$2 + 7 | 0] = (HEAPU8[$2 + 47 | 0] ^ -1) & 1;
   $3 = HEAP32[$2 + 8 >> 2];
   $0 = HEAP32[$2 + 12 >> 2];
   $4 = jshGetMillisecondsFromTime($3, $0) * +HEAP32[HEAP32[$2 + 28 >> 2] + 80 >> 2] / 1.0e3 + .5;
   if (Math_abs($4) < 2147483647.0) {
    $0 = ~~$4
   } else {
    $0 = -2147483648
   }
   HEAP32[$2 >> 2] = $0;
   if (!(HEAPU8[HEAP32[$2 + 28 >> 2] + 88 | 0] | !(HEAP8[$2 + 7 | 0] & 1)) | HEAP32[$2 >> 2] > 12) {
    break block
   }
   if (HEAP8[$2 + 7 | 0] & 1) {
    $0 = HEAP32[$2 + 28 >> 2];
    HEAP32[$0 + 84 >> 2] = HEAP32[$0 + 84 >> 2] | (1 << HEAP32[$2 >> 2]) - 1 << HEAPU8[HEAP32[$2 + 28 >> 2] + 88 | 0];
   }
   $0 = HEAP32[$2 + 28 >> 2];
   HEAP8[$0 + 88 | 0] = HEAP32[$2 >> 2] + HEAPU8[$0 + 88 | 0];
   jsserialCheckForCharacter(HEAP32[$2 + 28 >> 2]);
  }
  __stack_pointer = $2 + 48 | 0;
 }
 
 function jsserialCheckForCharacter($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  if (HEAPU8[HEAP32[$1 + 12 >> 2] + 88 | 0] >= HEAPU8[HEAP32[$1 + 12 >> 2] + 89 | 0]) {
   HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 84 >> 2] >>> 1 & 255;
   if (HEAPU8[HEAP32[$1 + 12 >> 2] + 64 | 0] < 64) {
    $3 = HEAP32[$1 + 8 >> 2];
    $0 = HEAP32[$1 + 12 >> 2];
    $2 = HEAPU8[$0 + 64 | 0];
    HEAP8[$0 + 64 | 0] = $2 + 1;
    HEAP8[$0 + $2 | 0] = $3;
    jshHasEvents();
   }
   HEAP8[HEAP32[$1 + 12 >> 2] + 88 | 0] = 0;
   HEAP32[HEAP32[$1 + 12 >> 2] + 84 >> 2] = 0;
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsserialEventCallbackKill($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  HEAP32[$2 + 20 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 28 >> 2], 136082);
  if (HEAP32[$2 + 20 >> 2]) {
   HEAP8[$2 + 19 | 0] = jsvGetIntegerAndUnLock(HEAP32[$2 + 20 >> 2]);
   jshPinWatch(HEAPU8[$2 + 19 | 0], 0, 0);
   HEAP32[$2 + 12 >> 2] = jsserialGetSerialList(0);
   if (HEAP32[$2 + 12 >> 2]) {
    HEAP32[$2 + 8 >> 2] = jsvGetArrayIndex(HEAP32[$2 + 12 >> 2], HEAPU8[$2 + 19 | 0]);
    if (HEAP32[$2 + 8 >> 2]) {
     jsvRemoveChild(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])
    }
    if (!jsvGetChildren(HEAP32[$2 + 12 >> 2])) {
     jsvObjectRemoveChild(HEAP32[92131], 135847)
    }
    jsvUnLock2(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2]);
   }
  }
  __stack_pointer = $2 + 32 | 0;
 }
 
 function jsserialEventCallbackIdle() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0;
  $0 = __stack_pointer - 48 | 0;
  __stack_pointer = $0;
  HEAP8[$0 + 46 | 0] = 0;
  HEAP32[$0 + 40 >> 2] = jsserialGetSerialList(0);
  block : {
   if (!HEAP32[$0 + 40 >> 2]) {
    HEAP8[$0 + 47 | 0] = 0;
    break block;
   }
   jsvObjectIteratorNew($0 + 36 | 0, HEAP32[$0 + 40 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_962($0 + 36 | 0) & 1) {
     HEAP32[$0 + 32 >> 2] = jsvObjectIteratorGetValue_963($0 + 36 | 0);
     HEAP32[$0 + 28 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 32 >> 2], 140395);
     HEAP32[$0 + 24 >> 2] = jsvGetFlatStringPointer(HEAP32[$0 + 28 >> 2]);
     if (HEAP32[$0 + 24 >> 2]) {
      if (HEAPU8[HEAP32[$0 + 24 >> 2] + 88 | 0]) {
       HEAP32[$0 + 16 >> 2] = jshGetSystemTime();
       HEAP32[$0 + 20 >> 2] = i64toi32_i32$HIGH_BITS;
       $5 = HEAP32[$0 + 20 >> 2];
       $2 = HEAP32[$0 + 24 >> 2];
       $3 = HEAP32[$2 + 72 >> 2];
       $1 = HEAP32[$2 + 76 >> 2];
       $2 = HEAP32[$0 + 16 >> 2];
       HEAP32[$0 + 8 >> 2] = $2 - $3;
       HEAP32[$0 + 12 >> 2] = $5 - (($2 >>> 0 < $3 >>> 0) + $1 | 0);
       $2 = HEAP32[$0 + 12 >> 2];
       $4 = jshGetMillisecondsFromTime(HEAP32[$0 + 8 >> 2], $2) * +HEAP32[HEAP32[$0 + 24 >> 2] + 80 >> 2] / 1.0e3 + .5;
       if (Math_abs($4) < 2147483647.0) {
        $1 = ~~$4
       } else {
        $1 = -2147483648
       }
       HEAP32[$0 + 4 >> 2] = $1;
       block1 : {
        if (HEAP32[$0 + 4 >> 2] > 10) {
         $1 = HEAP32[$0 + 24 >> 2];
         HEAP32[$1 + 84 >> 2] = HEAP32[$1 + 84 >> 2] | (1 << HEAP32[$0 + 4 >> 2]) - 1 << HEAPU8[HEAP32[$0 + 24 >> 2] + 88 | 0];
         $1 = HEAP32[$0 + 24 >> 2];
         HEAP8[$1 + 88 | 0] = HEAP32[$0 + 4 >> 2] + HEAPU8[$1 + 88 | 0];
         jsserialCheckForCharacter(HEAP32[$0 + 24 >> 2]);
         HEAP8[HEAP32[$0 + 24 >> 2] + 88 | 0] = 0;
         break block1;
        }
        HEAP8[$0 + 46 | 0] = 1;
       }
      }
      if (HEAPU8[HEAP32[$0 + 24 >> 2] + 64 | 0]) {
       HEAP32[$0 >> 2] = jsvNewStringOfLength(HEAPU8[HEAP32[$0 + 24 >> 2] + 64 | 0], HEAP32[$0 + 24 >> 2]);
       HEAP8[HEAP32[$0 + 24 >> 2] + 64 | 0] = 0;
       if (HEAP32[$0 >> 2]) {
        jswrap_stream_pushData(HEAP32[$0 + 32 >> 2], HEAP32[$0 >> 2], 1);
        jsvUnLock(HEAP32[$0 >> 2]);
       }
      }
     }
     jsvUnLock2(HEAP32[$0 + 28 >> 2], HEAP32[$0 + 32 >> 2]);
     jsvObjectIteratorNext($0 + 36 | 0);
     continue;
    }
    break;
   };
   jsvObjectIteratorFree_964($0 + 36 | 0);
   jsvUnLock(HEAP32[$0 + 40 >> 2]);
   HEAP8[$0 + 47 | 0] = HEAP8[$0 + 46 | 0] & 1;
  }
  __stack_pointer = $0 + 48 | 0;
  return HEAP8[$0 + 47 | 0] & 1;
 }
 
 function jsvObjectIteratorHasValue_962($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
 }
 
 function jsvObjectIteratorGetValue_963($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvObjectIteratorFree_964($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsspiHardwareFunc($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  HEAP8[$4 + 15 | 0] = HEAPU8[HEAP32[$4 + 16 >> 2]];
  jshSPISetReceive(HEAPU8[$4 + 15 | 0], HEAP32[$4 + 24 >> 2] != 0);
  jshSPISendMany(HEAPU8[$4 + 15 | 0], HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], 0);
  __stack_pointer = $4 + 32 | 0;
 }
 
 function jsspiFastSoftwareFunc($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 16 >> 2];
  HEAP32[$4 + 8 >> 2] = 0;
  while (1) {
   if (HEAPU32[$4 + 8 >> 2] < HEAPU32[$4 + 20 >> 2]) {
    HEAP32[$4 + 4 >> 2] = HEAPU8[HEAP32[$4 + 28 >> 2] + HEAP32[$4 + 8 >> 2] | 0];
    $0 = HEAP32[$4 + 12 >> 2];
    HEAP32[$4 >> 2] = (HEAPU8[$0 + 10 | 0] | HEAPU8[$0 + 11 | 0] << 8 | (HEAPU8[$0 + 12 | 0] << 16 | HEAPU8[$0 + 13 | 0] << 24)) - 1;
    while (1) {
     if (HEAP32[$4 >> 2] >= 0) {
      jshPinSetValue(HEAPU8[HEAP32[$4 + 12 >> 2] + 7 | 0], HEAP32[$4 + 4 >> 2] >> HEAP32[$4 >> 2] & 1);
      jshPinSetValue(HEAPU8[HEAP32[$4 + 12 >> 2] + 5 | 0], 1);
      jshPinSetValue(HEAPU8[HEAP32[$4 + 12 >> 2] + 5 | 0], 0);
      HEAP32[$4 >> 2] = HEAP32[$4 >> 2] - 1;
      continue;
     }
     break;
    };
    HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] + 1;
    continue;
   }
   break;
  };
  __stack_pointer = $4 + 32 | 0;
 }
 
 function jsspiSoftwareFunc($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 44 >> 2] = $0;
  HEAP32[$4 + 40 >> 2] = $1;
  HEAP32[$4 + 36 >> 2] = $2;
  HEAP32[$4 + 32 >> 2] = $3;
  HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 32 >> 2];
  HEAP8[$4 + 27 | 0] = HEAP8[HEAP32[$4 + 28 >> 2] + 8 | 0] & 1;
  HEAP8[$4 + 26 | 0] = (HEAPU8[HEAP32[$4 + 28 >> 2] + 8 | 0] & 2) != 0;
  HEAP32[$4 + 20 >> 2] = HEAP8[HEAP32[$4 + 28 >> 2] + 9 | 0] & 1 ? -1 : 1;
  if (HEAP8[HEAP32[$4 + 28 >> 2] + 9 | 0] & 1) {
   $0 = -1
  } else {
   $0 = HEAP32[$4 + 28 >> 2];
   $0 = HEAPU8[$0 + 10 | 0] | HEAPU8[$0 + 11 | 0] << 8 | (HEAPU8[$0 + 12 | 0] << 16 | HEAPU8[$0 + 13 | 0] << 24);
  }
  HEAP32[$4 + 16 >> 2] = $0;
  HEAP32[$4 + 12 >> 2] = 0;
  while (1) {
   if (HEAPU32[$4 + 12 >> 2] < HEAPU32[$4 + 36 >> 2]) {
    HEAP32[$4 + 8 >> 2] = HEAPU8[HEAP32[$4 + 44 >> 2] + HEAP32[$4 + 12 >> 2] | 0];
    HEAP32[$4 + 4 >> 2] = 0;
    block : {
     if (HEAP8[HEAP32[$4 + 28 >> 2] + 9 | 0] & 1) {
      $0 = HEAP32[$4 + 28 >> 2];
      $0 = (HEAPU8[$0 + 10 | 0] | HEAPU8[$0 + 11 | 0] << 8 | (HEAPU8[$0 + 12 | 0] << 16 | HEAPU8[$0 + 13 | 0] << 24)) - 1 | 0;
      break block;
     }
     $0 = 0;
    }
    HEAP32[$4 >> 2] = $0;
    while (1) {
     if (HEAP32[$4 >> 2] != HEAP32[$4 + 16 >> 2]) {
      block1 : {
       if (!(HEAP8[$4 + 27 | 0] & 1)) {
        if (HEAPU8[HEAP32[$4 + 28 >> 2] + 7 | 0] != 255) {
         jshPinSetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 7 | 0], HEAP32[$4 + 8 >> 2] >> HEAP32[$4 >> 2] & 1)
        }
        if (HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0] != 255) {
         jshPinSetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0], (HEAPU8[$4 + 26 | 0] ^ -1) & 1)
        }
        if (HEAPU8[HEAP32[$4 + 28 >> 2] + 6 | 0] != 255) {
         HEAP32[$4 + 4 >> 2] = (jshPinGetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 6 | 0]) & 1) << HEAP32[$4 >> 2] | HEAP32[$4 + 4 >> 2]
        }
        if (HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0] != 255) {
         jshPinSetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0], HEAP8[$4 + 26 | 0] & 1)
        }
        break block1;
       }
       if (HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0] != 255) {
        jshPinSetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0], (HEAPU8[$4 + 26 | 0] ^ -1) & 1)
       }
       if (HEAPU8[HEAP32[$4 + 28 >> 2] + 7 | 0] != 255) {
        jshPinSetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 7 | 0], HEAP32[$4 + 8 >> 2] >> HEAP32[$4 >> 2] & 1)
       }
       if (HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0] != 255) {
        jshPinSetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0], HEAP8[$4 + 26 | 0] & 1)
       }
       if (HEAPU8[HEAP32[$4 + 28 >> 2] + 6 | 0] != 255) {
        HEAP32[$4 + 4 >> 2] = (jshPinGetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 6 | 0]) & 1) << HEAP32[$4 >> 2] | HEAP32[$4 + 4 >> 2]
       }
      }
      HEAP32[$4 >> 2] = HEAP32[$4 + 20 >> 2] + HEAP32[$4 >> 2];
      continue;
     }
     break;
    };
    if (HEAP32[$4 + 40 >> 2]) {
     HEAP8[HEAP32[$4 + 40 >> 2] + HEAP32[$4 + 12 >> 2] | 0] = HEAP32[$4 + 4 >> 2]
    }
    HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] + 1;
    continue;
   }
   break;
  };
  __stack_pointer = $4 + 48 | 0;
 }
 
 function jsspiPopulateSPIInfo($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 128 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 124 >> 2] = $0;
  HEAP32[$2 + 120 >> 2] = $1;
  jshSPIInitInfo(HEAP32[$2 + 124 >> 2]);
  HEAP32[$2 + 116 >> 2] = 0;
  HEAP32[$2 + 112 >> 2] = HEAPU8[HEAP32[$2 + 124 >> 2] + 8 | 0];
  HEAP32[$2 + 16 >> 2] = 135889;
  HEAP16[$2 + 20 >> 1] = 13;
  HEAP16[($2 + 16 | 0) + 6 >> 1] = 0;
  HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 124 >> 2] + 5;
  HEAP32[$2 + 28 >> 2] = 135022;
  HEAP16[$2 + 32 >> 1] = 13;
  HEAP16[($2 + 16 | 0) + 18 >> 1] = 0;
  HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 124 >> 2] + 6;
  HEAP32[$2 + 40 >> 2] = 136087;
  HEAP16[$2 + 44 >> 1] = 13;
  HEAP16[($2 + 16 | 0) + 30 >> 1] = 0;
  HEAP32[$2 + 48 >> 2] = HEAP32[$2 + 124 >> 2] + 7;
  HEAP32[$2 + 52 >> 2] = 138094;
  HEAP16[$2 + 56 >> 1] = 10;
  HEAP16[($2 + 16 | 0) + 42 >> 1] = 0;
  HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 124 >> 2];
  HEAP32[$2 + 64 >> 2] = 137959;
  HEAP16[$2 + 68 >> 1] = 10;
  HEAP16[($2 + 16 | 0) + 54 >> 1] = 0;
  HEAP32[$2 + 72 >> 2] = $2 + 112;
  HEAP32[$2 + 76 >> 2] = 128289;
  HEAP16[$2 + 80 >> 1] = 5;
  HEAP16[($2 + 16 | 0) + 66 >> 1] = 0;
  HEAP32[$2 + 84 >> 2] = $2 + 116;
  HEAP32[$2 + 88 >> 2] = 126993;
  HEAP16[$2 + 92 >> 1] = 10;
  HEAP16[($2 + 16 | 0) + 78 >> 1] = 0;
  HEAP32[$2 + 96 >> 2] = HEAP32[$2 + 124 >> 2] + 10;
  HEAP8[$2 + 15 | 0] = 1;
  if (jsvReadConfigObject(HEAP32[$2 + 120 >> 2], $2 + 16 | 0, 7) & 1) {
   HEAP8[HEAP32[$2 + 124 >> 2] + 8 | 0] = HEAP32[$2 + 112 >> 2] & 3;
   block1 : {
    block : {
     if (!(jsvIsString(HEAP32[$2 + 116 >> 2]) & 1)) {
      break block
     }
     if (!(jsvIsStringEqual(HEAP32[$2 + 116 >> 2], 140234) & 1)) {
      break block
     }
     HEAP8[HEAP32[$2 + 124 >> 2] + 9 | 0] = 1;
     break block1;
    }
    block3 : {
     block2 : {
      if (!(jsvIsString(HEAP32[$2 + 116 >> 2]) & 1)) {
       break block2
      }
      if (!(jsvIsStringEqual(HEAP32[$2 + 116 >> 2], 140238) & 1)) {
       break block2
      }
      HEAP8[HEAP32[$2 + 124 >> 2] + 9 | 0] = 0;
      break block3;
     }
     if (!(jsvIsUndefined(HEAP32[$2 + 116 >> 2]) & 1)) {
      jsExceptionHere(1, 146498, 0);
      HEAP8[$2 + 15 | 0] = 0;
     }
    }
   }
   $0 = HEAP32[$2 + 124 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) < 100) {
    jsExceptionHere(1, 137391, 0);
    HEAP8[$2 + 15 | 0] = 0;
   }
  }
  jsvUnLock(HEAP32[$2 + 116 >> 2]);
  __stack_pointer = $2 + 128 | 0;
  return HEAP8[$2 + 15 | 0] & 1;
 }
 
 function jsspiGetSendFunction($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 40 >> 2] = $0;
  HEAP32[$3 + 36 >> 2] = $1;
  HEAP32[$3 + 32 >> 2] = $2;
  HEAP8[$3 + 31 | 0] = jsiGetDeviceFromClass(HEAP32[$3 + 40 >> 2]);
  block1 : {
   if (!(HEAPU8[$3 + 31 | 0] < 26 | HEAPU8[$3 + 31 | 0] > 26)) {
    if (!(jshIsDeviceInitialised(HEAPU8[$3 + 31 | 0]) & 1)) {
     jshSPIInitInfo($3 + 17 | 0);
     jshSPISetup(HEAPU8[$3 + 31 | 0], $3 + 17 | 0);
    }
    HEAP32[HEAP32[$3 + 36 >> 2] >> 2] = 568;
    HEAP8[HEAP32[$3 + 32 >> 2]] = HEAPU8[$3 + 31 | 0];
    HEAP8[$3 + 47 | 0] = 1;
    break block1;
   }
   if (!HEAPU8[$3 + 31 | 0]) {
    HEAP32[$3 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 40 >> 2], 127219);
    jsspiPopulateSPIInfo($3 + 17 | 0, HEAP32[$3 + 12 >> 2]);
    jsvUnLock(HEAP32[$3 + 12 >> 2]);
    block3 : {
     block2 : {
      if (HEAPU8[$3 + 24 | 0] == 255 | HEAPU8[$3 + 23 | 0] != 255 | (HEAPU8[$3 + 25 | 0] | HEAPU8[$3 + 22 | 0] == 255)) {
       break block2
      }
      if (!(HEAP8[$3 + 26 | 0] & 1)) {
       break block2
      }
      HEAP32[HEAP32[$3 + 36 >> 2] >> 2] = 569;
      break block3;
     }
     HEAP32[HEAP32[$3 + 36 >> 2] >> 2] = 570;
    }
    $0 = HEAPU8[$3 + 21 | 0] | HEAPU8[$3 + 22 | 0] << 8 | (HEAPU8[$3 + 23 | 0] << 16 | HEAPU8[$3 + 24 | 0] << 24);
    $1 = HEAPU8[$3 + 17 | 0] | HEAPU8[$3 + 18 | 0] << 8 | (HEAPU8[$3 + 19 | 0] << 16 | HEAPU8[$3 + 20 | 0] << 24);
    $4 = $1;
    $2 = HEAP32[$3 + 32 >> 2];
    $1 = $2;
    HEAP8[$1 | 0] = $4;
    HEAP8[$1 + 1 | 0] = $4 >>> 8;
    HEAP8[$1 + 2 | 0] = $4 >>> 16;
    HEAP8[$1 + 3 | 0] = $4 >>> 24;
    HEAP8[$1 + 4 | 0] = $0;
    HEAP8[$1 + 5 | 0] = $0 >>> 8;
    HEAP8[$1 + 6 | 0] = $0 >>> 16;
    HEAP8[$1 + 7 | 0] = $0 >>> 24;
    $1 = HEAPU8[$3 + 27 | 0] | HEAPU8[$3 + 28 | 0] << 8 | (HEAPU8[$3 + 29 | 0] << 16 | HEAPU8[$3 + 30 | 0] << 24);
    $0 = HEAPU8[$3 + 23 | 0] | HEAPU8[$3 + 24 | 0] << 8 | (HEAPU8[$3 + 25 | 0] << 16 | HEAPU8[$3 + 26 | 0] << 24);
    $4 = $0;
    $0 = $2;
    HEAP8[$0 + 6 | 0] = $4;
    HEAP8[$0 + 7 | 0] = $4 >>> 8;
    HEAP8[$0 + 8 | 0] = $4 >>> 16;
    HEAP8[$0 + 9 | 0] = $4 >>> 24;
    HEAP8[$0 + 10 | 0] = $1;
    HEAP8[$0 + 11 | 0] = $1 >>> 8;
    HEAP8[$0 + 12 | 0] = $1 >>> 16;
    HEAP8[$0 + 13 | 0] = $1 >>> 24;
    HEAP8[$3 + 47 | 0] = 1;
    break block1;
   }
   HEAP8[$3 + 47 | 0] = 0;
  }
  __stack_pointer = $3 + 48 | 0;
  return HEAP8[$3 + 47 | 0] & 1;
 }
 
 function jsspiSend4bit($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP8[$4 + 15 | 0] = $0;
  HEAP8[$4 + 14 | 0] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 4 >> 2] = $3;
  HEAP8[$4 | 0] = HEAP32[$4 + 8 >> 2] | HEAP32[$4 + 8 >> 2] << 4;
  HEAP8[$4 + 1 | 0] = HEAP32[$4 + 4 >> 2] | HEAP32[$4 + 8 >> 2] << 4;
  HEAP8[$4 + 2 | 0] = HEAP32[$4 + 8 >> 2] | HEAP32[$4 + 4 >> 2] << 4;
  HEAP8[$4 + 3 | 0] = HEAP32[$4 + 4 >> 2] | HEAP32[$4 + 4 >> 2] << 4;
  jshSPISend16(HEAPU8[$4 + 15 | 0], HEAPU8[(HEAPU8[$4 + 14 | 0] >>> 4 & 3) + $4 | 0] | HEAPU8[(HEAPU8[$4 + 14 | 0] >>> 6 | 0) + $4 | 0] << 8);
  jshSPISend16(HEAPU8[$4 + 15 | 0], HEAPU8[(HEAPU8[$4 + 14 | 0] & 3) + $4 | 0] | HEAPU8[(HEAPU8[$4 + 14 | 0] >>> 2 & 3) + $4 | 0] << 8);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function jsspiSend8bit($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP8[$4 + 15 | 0] = $0;
  HEAP8[$4 + 14 | 0] = $1;
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 4 >> 2] = $3;
  $2 = HEAPU8[$4 + 15 | 0];
  if (HEAPU8[$4 + 14 | 0] >>> 6 & 1) {
   $0 = HEAP32[$4 + 4 >> 2]
  } else {
   $0 = HEAP32[$4 + 8 >> 2]
  }
  if (HEAPU8[$4 + 14 | 0] >>> 7 | 0) {
   $1 = HEAP32[$4 + 4 >> 2]
  } else {
   $1 = HEAP32[$4 + 8 >> 2]
  }
  jshSPISend($2, $0 | $1 << 8);
  $2 = HEAPU8[$4 + 15 | 0];
  if (HEAPU8[$4 + 14 | 0] >>> 4 & 1) {
   $0 = HEAP32[$4 + 4 >> 2]
  } else {
   $0 = HEAP32[$4 + 8 >> 2]
  }
  if (HEAPU8[$4 + 14 | 0] >>> 5 & 1) {
   $1 = HEAP32[$4 + 4 >> 2]
  } else {
   $1 = HEAP32[$4 + 8 >> 2]
  }
  jshSPISend($2, $0 | $1 << 8);
  $2 = HEAPU8[$4 + 15 | 0];
  if (HEAPU8[$4 + 14 | 0] >>> 2 & 1) {
   $0 = HEAP32[$4 + 4 >> 2]
  } else {
   $0 = HEAP32[$4 + 8 >> 2]
  }
  if (HEAPU8[$4 + 14 | 0] >>> 3 & 1) {
   $1 = HEAP32[$4 + 4 >> 2]
  } else {
   $1 = HEAP32[$4 + 8 >> 2]
  }
  jshSPISend($2, $0 | $1 << 8);
  $2 = HEAPU8[$4 + 15 | 0];
  if (HEAP8[$4 + 14 | 0] & 1) {
   $0 = HEAP32[$4 + 4 >> 2]
  } else {
   $0 = HEAP32[$4 + 8 >> 2]
  }
  if (HEAPU8[$4 + 14 | 0] >>> 1 & 1) {
   $1 = HEAP32[$4 + 4 >> 2]
  } else {
   $1 = HEAP32[$4 + 8 >> 2]
  }
  jshSPISend($2, $0 | $1 << 8);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function jshUSARTInitInfo($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP8[$0 | 0] = 128;
  HEAP8[$0 + 1 | 0] = 37;
  HEAP8[$0 + 2 | 0] = 0;
  HEAP8[$0 + 3 | 0] = 0;
  HEAP8[HEAP32[$1 + 12 >> 2] + 4 | 0] = 255;
  HEAP8[HEAP32[$1 + 12 >> 2] + 5 | 0] = 255;
  HEAP8[HEAP32[$1 + 12 >> 2] + 6 | 0] = 255;
  HEAP8[HEAP32[$1 + 12 >> 2] + 7 | 0] = 255;
  HEAP8[HEAP32[$1 + 12 >> 2] + 8 | 0] = 8;
  HEAP8[HEAP32[$1 + 12 >> 2] + 9 | 0] = 0;
  HEAP8[HEAP32[$1 + 12 >> 2] + 10 | 0] = 1;
  HEAP8[HEAP32[$1 + 12 >> 2] + 11 | 0] = 0;
  HEAP8[HEAP32[$1 + 12 >> 2] + 12 | 0] = 0;
 }
 
 function jshSPIInitInfo($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP8[$0 | 0] = 160;
  HEAP8[$0 + 1 | 0] = 134;
  HEAP8[$0 + 2 | 0] = 1;
  HEAP8[$0 + 3 | 0] = 0;
  HEAP8[HEAP32[$1 + 12 >> 2] + 4 | 0] = 0;
  HEAP8[HEAP32[$1 + 12 >> 2] + 5 | 0] = 255;
  HEAP8[HEAP32[$1 + 12 >> 2] + 6 | 0] = 255;
  HEAP8[HEAP32[$1 + 12 >> 2] + 7 | 0] = 255;
  HEAP8[HEAP32[$1 + 12 >> 2] + 8 | 0] = 0;
  HEAP8[HEAP32[$1 + 12 >> 2] + 9 | 0] = 1;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP8[$0 + 10 | 0] = 8;
  HEAP8[$0 + 11 | 0] = 0;
  HEAP8[$0 + 12 | 0] = 0;
  HEAP8[$0 + 13 | 0] = 0;
 }
 
 function jshI2CInitInfo($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP8[HEAP32[$1 + 12 >> 2] + 4 | 0] = 255;
  HEAP8[HEAP32[$1 + 12 >> 2] + 5 | 0] = 255;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP8[$0 | 0] = 160;
  HEAP8[$0 + 1 | 0] = 134;
  HEAP8[$0 + 2 | 0] = 1;
  HEAP8[$0 + 3 | 0] = 0;
  HEAP8[HEAP32[$1 + 12 >> 2] + 6 | 0] = 0;
  HEAP8[HEAP32[$1 + 12 >> 2] + 7 | 0] = 1;
 }
 
 function jshFlashWriteAligned($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  block1 : {
   if (!(HEAPU32[$3 + 24 >> 2] < 134217728 | HEAPU32[$3 + 24 >> 2] >= 142606336)) {
    jshFlashWrite(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
    break block1;
   }
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 28 >> 2];
   HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 24 >> 2] & 3;
   if (HEAP32[$3 + 12 >> 2]) {
    jshFlashRead($3 + 8 | 0, HEAP32[$3 + 24 >> 2] - HEAP32[$3 + 12 >> 2] | 0, 4);
    HEAP32[$3 + 4 >> 2] = 4 - HEAP32[$3 + 12 >> 2];
    if (HEAPU32[$3 + 4 >> 2] > HEAPU32[$3 + 20 >> 2]) {
     HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 20 >> 2]
    }
    $1 = HEAP32[$3 + 12 >> 2];
    $2 = HEAP32[$3 + 16 >> 2];
    $0 = HEAP32[$3 + 4 >> 2];
    if ($0) {
     wasm2js_memory_copy(($3 + 8 | 0) + $1 | 0, $2, $0)
    }
    HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 4 >> 2] + HEAP32[$3 + 16 >> 2];
    jshFlashWrite($3 + 8 | 0, HEAP32[$3 + 24 >> 2] - HEAP32[$3 + 12 >> 2] | 0, 4);
    HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 4 >> 2] + HEAP32[$3 + 24 >> 2];
    if (HEAPU32[$3 + 4 >> 2] >= HEAPU32[$3 + 20 >> 2]) {
     break block1
    }
    HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] - HEAP32[$3 + 4 >> 2];
   }
   HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 20 >> 2] & 3;
   HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] - HEAP32[$3 + 12 >> 2];
   if (HEAP32[$3 + 20 >> 2]) {
    jshFlashWrite(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2])
   }
   HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 20 >> 2] + HEAP32[$3 + 24 >> 2];
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 20 >> 2] + HEAP32[$3 + 16 >> 2];
   if (!HEAP32[$3 + 12 >> 2]) {
    break block1
   }
   jshFlashRead($3, HEAP32[$3 + 24 >> 2], 4);
   $1 = HEAP32[$3 + 16 >> 2];
   $0 = HEAP32[$3 + 12 >> 2];
   if ($0) {
    wasm2js_memory_copy($3, $1, $0)
   }
   jshFlashWrite($3, HEAP32[$3 + 24 >> 2], 4);
  }
  __stack_pointer = $3 + 32 | 0;
 }
 
 function jshSPISendMany($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 48 | 0;
  __stack_pointer = $5;
  HEAP8[$5 + 47 | 0] = $0;
  HEAP32[$5 + 40 >> 2] = $1;
  HEAP32[$5 + 36 >> 2] = $2;
  HEAP32[$5 + 32 >> 2] = $3;
  HEAP32[$5 + 28 >> 2] = $4;
  HEAP32[$5 + 24 >> 2] = 0;
  HEAP32[$5 + 20 >> 2] = 0;
  while (1) {
   $0 = 0;
   if (HEAPU32[$5 + 24 >> 2] < HEAPU32[$5 + 32 >> 2]) {
    $0 = jspIsInterrupted() ^ -1
   }
   if ($0 & 1) {
    $1 = HEAPU8[$5 + 47 | 0];
    $2 = HEAP32[$5 + 40 >> 2];
    $0 = HEAP32[$5 + 24 >> 2];
    HEAP32[$5 + 24 >> 2] = $0 + 1;
    HEAP32[$5 + 16 >> 2] = jshSPISend($1, HEAPU8[$2 + $0 | 0]);
    if (HEAP32[$5 + 36 >> 2] ? HEAP32[$5 + 16 >> 2] >= 0 : 0) {
     $1 = HEAP32[$5 + 16 >> 2];
     $2 = HEAP32[$5 + 36 >> 2];
     $0 = HEAP32[$5 + 20 >> 2];
     HEAP32[$5 + 20 >> 2] = $0 + 1;
     HEAP8[$2 + $0 | 0] = $1;
    }
    continue;
   }
   break;
  };
  block : {
   if (HEAP32[$5 + 36 >> 2]) {
    while (1) {
     $0 = 0;
     if (HEAPU32[$5 + 20 >> 2] < HEAPU32[$5 + 32 >> 2]) {
      $0 = jspIsInterrupted() ^ -1
     }
     if ($0 & 1) {
      HEAP32[$5 + 12 >> 2] = jshSPISend(HEAPU8[$5 + 47 | 0], -1);
      $1 = HEAP32[$5 + 12 >> 2];
      $2 = HEAP32[$5 + 36 >> 2];
      $0 = HEAP32[$5 + 20 >> 2];
      HEAP32[$5 + 20 >> 2] = $0 + 1;
      HEAP8[$2 + $0 | 0] = $1;
      continue;
     }
     break;
    };
    break block;
   }
   jshSPIWait(HEAPU8[$5 + 47 | 0]);
  }
  if (HEAP32[$5 + 28 >> 2]) {
   FUNCTION_TABLE[HEAP32[$5 + 28 >> 2]]()
  }
  __stack_pointer = $5 + 48 | 0;
  return 1;
 }
 
 function jshIsPinStateDefault($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP8[$2 + 14 | 0] = $1;
  $0 = 1;
  $0 = HEAPU8[$2 + 14 | 0] != 4 ? HEAPU8[$2 + 14 | 0] == 7 : $0;
  return $0;
 }
 
 function jshUSARTUnSetup($0) {
  HEAP8[(__stack_pointer - 16 | 0) + 15 | 0] = $0;
 }
 
 function jshFlashErasePages($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 24 >> 2] + HEAP32[$2 + 20 >> 2];
  block : {
   if (!(jshFlashGetPage(HEAP32[$2 + 24 >> 2], $2 + 12 | 0, $2 + 8 | 0) & 1)) {
    HEAP8[$2 + 31 | 0] = 0;
    break block;
   }
   while (1) {
    $0 = 0;
    if (HEAPU32[$2 + 12 >> 2] < HEAPU32[$2 + 16 >> 2]) {
     $0 = jspIsInterrupted() ^ -1
    }
    if ($0 & 1) {
     jshFlashErasePage(HEAP32[$2 + 12 >> 2]);
     if (!(jshFlashGetPage(HEAP32[$2 + 12 >> 2] + HEAP32[$2 + 8 >> 2] | 0, $2 + 12 | 0, $2 + 8 | 0) & 1)) {
      HEAP8[$2 + 31 | 0] = 1;
      break block;
     }
     jshKickWatchDog();
     jshKickSoftWatchDog();
     continue;
    }
    break;
   };
   HEAP8[$2 + 31 | 0] = (jspIsInterrupted() ^ -1) & 1;
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP8[$2 + 31 | 0] & 1;
 }
 
 function jshKickSoftWatchDog() {
  jswrap_banglejs_kickPollWatchdog();
  if (HEAP32[92138] & 4096) {
   HEAP32[92138] = HEAP32[92138] & -4097 | 2048
  }
 }
 
 function jshHadEvent() {
  HEAP8[370708] = 1;
 }
 
 function jsvGetProcessorPowerUsage($0) {
  HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 }
 
 function jshGetSystemClock() {
  return 0;
 }
 
 function heatshrink_encoder_reset($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = 512;
  $2 = HEAP32[$1 + 12 >> 2];
  $0 = HEAP32[$1 + 8 >> 2];
  if ($0) {
   wasm2js_memory_fill($2 + 15 | 0, 0, $0)
  }
  HEAP16[HEAP32[$1 + 12 >> 2] >> 1] = 0;
  HEAP8[HEAP32[$1 + 12 >> 2] + 12 | 0] = 0;
  HEAP16[HEAP32[$1 + 12 >> 2] + 2 >> 1] = 0;
  HEAP8[HEAP32[$1 + 12 >> 2] + 11 | 0] = 0;
  HEAP8[HEAP32[$1 + 12 >> 2] + 14 | 0] = 128;
  HEAP8[HEAP32[$1 + 12 >> 2] + 13 | 0] = 0;
  HEAP16[HEAP32[$1 + 12 >> 2] + 4 >> 1] = 0;
  HEAP16[HEAP32[$1 + 12 >> 2] + 8 >> 1] = 0;
  HEAP8[HEAP32[$1 + 12 >> 2] + 10 | 0] = 0;
 }
 
 function heatshrink_encoder_sink($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 24 >> 2] = $0;
  HEAP32[$4 + 20 >> 2] = $1;
  HEAP32[$4 + 16 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  block2 : {
   if (HEAP32[$4 + 12 >> 2] ? !HEAP32[$4 + 24 >> 2] | !HEAP32[$4 + 20 >> 2] : 1) {
    HEAP32[$4 + 28 >> 2] = -1;
    break block2;
   }
   if (is_finishing(HEAP32[$4 + 24 >> 2])) {
    HEAP32[$4 + 28 >> 2] = -2;
    break block2;
   }
   if (HEAPU8[HEAP32[$4 + 24 >> 2] + 12 | 0]) {
    HEAP32[$4 + 28 >> 2] = -2;
    break block2;
   }
   HEAP16[$4 + 10 >> 1] = (get_input_offset(HEAP32[$4 + 24 >> 2]) & 65535) + HEAPU16[HEAP32[$4 + 24 >> 2] >> 1];
   HEAP16[$4 + 8 >> 1] = get_input_buffer_size(HEAP32[$4 + 24 >> 2]);
   HEAP16[$4 + 6 >> 1] = HEAPU16[$4 + 8 >> 1] - HEAPU16[HEAP32[$4 + 24 >> 2] >> 1];
   if (HEAPU16[$4 + 6 >> 1] < HEAPU32[$4 + 16 >> 2]) {
    $0 = HEAPU16[$4 + 6 >> 1]
   } else {
    $0 = HEAP32[$4 + 16 >> 2]
   }
   HEAP16[$4 + 4 >> 1] = $0;
   $1 = HEAP32[$4 + 24 >> 2];
   $2 = HEAPU16[$4 + 10 >> 1];
   $3 = HEAP32[$4 + 20 >> 2];
   $0 = HEAPU16[$4 + 4 >> 1];
   if ($0) {
    wasm2js_memory_copy(($1 + 15 | 0) + $2 | 0, $3, $0)
   }
   HEAP32[HEAP32[$4 + 12 >> 2] >> 2] = HEAPU16[$4 + 4 >> 1];
   $0 = HEAP32[$4 + 24 >> 2];
   HEAP16[$0 >> 1] = HEAPU16[$4 + 4 >> 1] + HEAPU16[$0 >> 1];
   if (HEAPU16[$4 + 4 >> 1] == HEAPU16[$4 + 6 >> 1]) {
    HEAP8[HEAP32[$4 + 24 >> 2] + 12 | 0] = 1
   }
   HEAP32[$4 + 28 >> 2] = 0;
  }
  __stack_pointer = $4 + 32 | 0;
  return HEAP32[$4 + 28 >> 2];
 }
 
 function is_finishing($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP8[HEAP32[$1 + 12 >> 2] + 11 | 0] & 1;
 }
 
 function get_input_offset($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = get_input_buffer_size(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return $0 & 65535;
 }
 
 function get_input_buffer_size($0) {
  HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
  return 256;
 }
 
 function heatshrink_encoder_poll($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 40 >> 2] = $0;
  HEAP32[$4 + 36 >> 2] = $1;
  HEAP32[$4 + 32 >> 2] = $2;
  HEAP32[$4 + 28 >> 2] = $3;
  block2 : {
   if (HEAP32[$4 + 28 >> 2] ? !HEAP32[$4 + 40 >> 2] | !HEAP32[$4 + 36 >> 2] : 1) {
    HEAP32[$4 + 44 >> 2] = -1;
    break block2;
   }
   if (!HEAP32[$4 + 32 >> 2]) {
    HEAP32[$4 + 44 >> 2] = -2;
    break block2;
   }
   HEAP32[HEAP32[$4 + 28 >> 2] >> 2] = 0;
   HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 36 >> 2];
   HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 32 >> 2];
   HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 28 >> 2];
   while (1) {
    HEAP8[$4 + 15 | 0] = HEAPU8[HEAP32[$4 + 40 >> 2] + 12 | 0];
    block14 : {
     block13 : {
      switch (HEAPU8[$4 + 15 | 0]) {
      case 0:
       HEAP32[$4 + 44 >> 2] = 0;
       break block2;
      case 1:
       do_indexing(HEAP32[$4 + 40 >> 2]);
       HEAP8[HEAP32[$4 + 40 >> 2] + 12 | 0] = 2;
       break block14;
      case 2:
       $0 = st_step_search(HEAP32[$4 + 40 >> 2]);
       HEAP8[HEAP32[$4 + 40 >> 2] + 12 | 0] = $0;
       break block14;
      case 3:
       $0 = st_yield_tag_bit(HEAP32[$4 + 40 >> 2], $4 + 16 | 0);
       HEAP8[HEAP32[$4 + 40 >> 2] + 12 | 0] = $0;
       break block14;
      case 4:
       $0 = st_e_yield_literal(HEAP32[$4 + 40 >> 2], $4 + 16 | 0);
       HEAP8[HEAP32[$4 + 40 >> 2] + 12 | 0] = $0;
       break block14;
      case 5:
       $0 = st_yield_br_index(HEAP32[$4 + 40 >> 2], $4 + 16 | 0);
       HEAP8[HEAP32[$4 + 40 >> 2] + 12 | 0] = $0;
       break block14;
      case 6:
       $0 = st_yield_br_length(HEAP32[$4 + 40 >> 2], $4 + 16 | 0);
       HEAP8[HEAP32[$4 + 40 >> 2] + 12 | 0] = $0;
       break block14;
      case 7:
       $0 = st_save_backlog(HEAP32[$4 + 40 >> 2]);
       HEAP8[HEAP32[$4 + 40 >> 2] + 12 | 0] = $0;
       break block14;
      case 8:
       $0 = st_flush_bit_buffer(HEAP32[$4 + 40 >> 2], $4 + 16 | 0);
       HEAP8[HEAP32[$4 + 40 >> 2] + 12 | 0] = $0;
       HEAP32[$4 + 44 >> 2] = 0;
       break block2;
      case 9:
       HEAP32[$4 + 44 >> 2] = 0;
       break block2;
      default:
       break block13;
      };
     }
     HEAP32[$4 + 44 >> 2] = -2;
     break block2;
    }
    if (!(HEAPU8[HEAP32[$4 + 40 >> 2] + 12 | 0] == HEAPU8[$4 + 15 | 0] & HEAP32[HEAP32[$4 + 28 >> 2] >> 2] == HEAP32[$4 + 32 >> 2])) {
     continue
    }
    break;
   };
   HEAP32[$4 + 44 >> 2] = 1;
  }
  __stack_pointer = $4 + 48 | 0;
  return HEAP32[$4 + 44 >> 2];
 }
 
 function do_indexing($0) {
  HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 }
 
 function st_step_search($0) {
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 24 >> 2] = $0;
  HEAP16[$1 + 22 >> 1] = get_input_buffer_size(HEAP32[$1 + 24 >> 2]);
  HEAP16[$1 + 20 >> 1] = get_lookahead_size(HEAP32[$1 + 24 >> 2]);
  HEAP16[$1 + 18 >> 1] = HEAPU16[HEAP32[$1 + 24 >> 2] + 2 >> 1];
  HEAP8[$1 + 17 | 0] = (is_finishing(HEAP32[$1 + 24 >> 2]) | 0) != 0;
  block : {
   if (HEAPU16[$1 + 18 >> 1] > (HEAPU16[HEAP32[$1 + 24 >> 2] >> 1] - (HEAP8[$1 + 17 | 0] & 1 ? 1 : HEAPU16[$1 + 20 >> 1]) | 0)) {
    HEAP32[$1 + 28 >> 2] = HEAP8[$1 + 17 | 0] & 1 ? 8 : 7;
    break block;
   }
   HEAP16[$1 + 14 >> 1] = get_input_offset(HEAP32[$1 + 24 >> 2]);
   HEAP16[$1 + 12 >> 1] = HEAPU16[$1 + 14 >> 1] + HEAPU16[$1 + 18 >> 1];
   HEAP16[$1 + 10 >> 1] = HEAPU16[$1 + 12 >> 1] - HEAPU16[$1 + 22 >> 1];
   HEAP16[$1 + 8 >> 1] = HEAPU16[$1 + 20 >> 1];
   if (HEAPU16[$1 + 20 >> 1] > (HEAPU16[HEAP32[$1 + 24 >> 2] >> 1] - HEAPU16[$1 + 18 >> 1] | 0)) {
    HEAP16[$1 + 8 >> 1] = HEAPU16[HEAP32[$1 + 24 >> 2] >> 1] - HEAPU16[$1 + 18 >> 1]
   }
   HEAP16[$1 + 6 >> 1] = 0;
   HEAP16[$1 + 4 >> 1] = find_longest_match(HEAP32[$1 + 24 >> 2], HEAPU16[$1 + 10 >> 1], HEAPU16[$1 + 12 >> 1], HEAPU16[$1 + 8 >> 1], $1 + 6 | 0);
   if (HEAPU16[$1 + 4 >> 1] == 65535) {
    $0 = HEAP32[$1 + 24 >> 2];
    HEAP16[$0 + 2 >> 1] = HEAPU16[$0 + 2 >> 1] + 1;
    HEAP16[HEAP32[$1 + 24 >> 2] + 4 >> 1] = 0;
    HEAP32[$1 + 28 >> 2] = 3;
    break block;
   }
   HEAP16[HEAP32[$1 + 24 >> 2] + 6 >> 1] = HEAPU16[$1 + 4 >> 1];
   HEAP16[HEAP32[$1 + 24 >> 2] + 4 >> 1] = HEAPU16[$1 + 6 >> 1];
   HEAP32[$1 + 28 >> 2] = 3;
  }
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 28 >> 2];
 }
 
 function st_yield_tag_bit($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  block : {
   if (can_take_byte(HEAP32[$2 + 4 >> 2])) {
    if (!HEAPU16[HEAP32[$2 + 8 >> 2] + 4 >> 1]) {
     add_tag_bit(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2], 1);
     HEAP32[$2 + 12 >> 2] = 4;
     break block;
    }
    add_tag_bit(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2], 0);
    HEAP16[HEAP32[$2 + 8 >> 2] + 8 >> 1] = HEAPU16[HEAP32[$2 + 8 >> 2] + 6 >> 1] - 1;
    HEAP8[HEAP32[$2 + 8 >> 2] + 10 | 0] = 8;
    HEAP32[$2 + 12 >> 2] = 5;
    break block;
   }
   HEAP32[$2 + 12 >> 2] = 3;
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function st_e_yield_literal($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  block : {
   if (can_take_byte(HEAP32[$2 + 4 >> 2])) {
    push_literal_byte(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
    HEAP32[$2 + 12 >> 2] = 2;
    break block;
   }
   HEAP32[$2 + 12 >> 2] = 4;
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function st_yield_br_index($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  block : {
   if (can_take_byte(HEAP32[$2 + 4 >> 2])) {
    if (push_outgoing_bits(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]) & 255) {
     HEAP32[$2 + 12 >> 2] = 5;
     break block;
    }
    HEAP16[HEAP32[$2 + 8 >> 2] + 8 >> 1] = HEAPU16[HEAP32[$2 + 8 >> 2] + 4 >> 1] - 1;
    HEAP8[HEAP32[$2 + 8 >> 2] + 10 | 0] = 6;
    HEAP32[$2 + 12 >> 2] = 6;
    break block;
   }
   HEAP32[$2 + 12 >> 2] = 5;
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function st_yield_br_length($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  block : {
   if (can_take_byte(HEAP32[$2 + 4 >> 2])) {
    if (push_outgoing_bits(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]) & 255) {
     HEAP32[$2 + 12 >> 2] = 6;
     break block;
    }
    $0 = HEAP32[$2 + 8 >> 2];
    HEAP16[$0 + 2 >> 1] = HEAPU16[HEAP32[$2 + 8 >> 2] + 4 >> 1] + HEAPU16[$0 + 2 >> 1];
    HEAP16[HEAP32[$2 + 8 >> 2] + 4 >> 1] = 0;
    HEAP32[$2 + 12 >> 2] = 2;
    break block;
   }
   HEAP32[$2 + 12 >> 2] = 6;
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function st_save_backlog($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  save_backlog(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return 0;
 }
 
 function st_flush_bit_buffer($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  block : {
   if (HEAPU8[HEAP32[$2 + 8 >> 2] + 14 | 0] == 128) {
    HEAP32[$2 + 12 >> 2] = 9;
    break block;
   }
   if (can_take_byte(HEAP32[$2 + 4 >> 2])) {
    $3 = HEAPU8[HEAP32[$2 + 8 >> 2] + 13 | 0];
    $4 = HEAP32[HEAP32[$2 + 4 >> 2] >> 2];
    $0 = HEAP32[HEAP32[$2 + 4 >> 2] + 8 >> 2];
    $1 = HEAP32[$0 >> 2];
    HEAP32[$0 >> 2] = $1 + 1;
    HEAP8[$1 + $4 | 0] = $3;
    HEAP32[$2 + 12 >> 2] = 9;
    break block;
   }
   HEAP32[$2 + 12 >> 2] = 8;
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function get_lookahead_size($0) {
  HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
  return 64;
 }
 
 function find_longest_match($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 48 | 0;
  HEAP32[$5 + 40 >> 2] = $0;
  HEAP16[$5 + 38 >> 1] = $1;
  HEAP16[$5 + 36 >> 1] = $2;
  HEAP16[$5 + 34 >> 1] = $3;
  HEAP32[$5 + 28 >> 2] = $4;
  HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 40 >> 2] + 15;
  HEAP16[$5 + 22 >> 1] = 0;
  HEAP16[$5 + 20 >> 1] = 65535;
  HEAP16[$5 + 18 >> 1] = 0;
  HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 24 >> 2] + HEAPU16[$5 + 36 >> 1];
  HEAP16[$5 + 10 >> 1] = HEAPU16[$5 + 36 >> 1] - 1;
  while (1) {
   block : {
    if (((HEAP16[$5 + 10 >> 1] << 16 >> 16) - (HEAP16[$5 + 38 >> 1] << 16 >> 16) | 0) < 0) {
     break block
    }
    HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 24 >> 2] + (HEAP16[$5 + 10 >> 1] << 16 >> 16);
    if (!(HEAPU8[HEAP32[$5 + 4 >> 2] + HEAPU16[$5 + 22 >> 1] | 0] != HEAPU8[HEAP32[$5 + 12 >> 2] + HEAPU16[$5 + 22 >> 1] | 0] | HEAPU8[HEAP32[$5 + 4 >> 2]] != HEAPU8[HEAP32[$5 + 12 >> 2]])) {
     HEAP16[$5 + 18 >> 1] = 1;
     while (1) {
      if (!(HEAPU8[HEAP32[$5 + 4 >> 2] + HEAPU16[$5 + 18 >> 1] | 0] != HEAPU8[HEAP32[$5 + 12 >> 2] + HEAPU16[$5 + 18 >> 1] | 0] | HEAPU16[$5 + 18 >> 1] >= HEAPU16[$5 + 34 >> 1])) {
       HEAP16[$5 + 18 >> 1] = HEAPU16[$5 + 18 >> 1] + 1;
       continue;
      }
      break;
     };
     if (HEAPU16[$5 + 18 >> 1] > HEAPU16[$5 + 22 >> 1]) {
      HEAP16[$5 + 22 >> 1] = HEAPU16[$5 + 18 >> 1];
      HEAP16[$5 + 20 >> 1] = HEAPU16[$5 + 10 >> 1];
      if (HEAPU16[$5 + 18 >> 1] == HEAPU16[$5 + 34 >> 1]) {
       break block
      }
     }
    }
    HEAP16[$5 + 10 >> 1] = HEAPU16[$5 + 10 >> 1] - 1;
    continue;
   }
   break;
  };
  HEAP32[$5 >> 2] = 15;
  block3 : {
   if (HEAPU16[$5 + 22 >> 1] > 1) {
    HEAP16[HEAP32[$5 + 28 >> 2] >> 1] = HEAPU16[$5 + 22 >> 1];
    HEAP16[$5 + 46 >> 1] = HEAPU16[$5 + 36 >> 1] - HEAPU16[$5 + 20 >> 1];
    break block3;
   }
   HEAP16[$5 + 46 >> 1] = 65535;
  }
  return HEAPU16[$5 + 46 >> 1];
 }
 
 function can_take_byte($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAPU32[HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
 }
 
 function add_tag_bit($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP8[$3 + 7 | 0] = $2;
  push_bits(HEAP32[$3 + 12 >> 2], 1, HEAPU8[$3 + 7 | 0], HEAP32[$3 + 8 >> 2]);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function push_literal_byte($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP16[$2 + 6 >> 1] = HEAPU16[HEAP32[$2 + 12 >> 2] + 2 >> 1] - 1;
  HEAP16[$2 + 4 >> 1] = (get_input_offset(HEAP32[$2 + 12 >> 2]) & 65535) + HEAPU16[$2 + 6 >> 1];
  HEAP8[$2 + 3 | 0] = HEAPU8[HEAPU16[$2 + 4 >> 1] + (HEAP32[$2 + 12 >> 2] + 15 | 0) | 0];
  push_bits(HEAP32[$2 + 12 >> 2], 8, HEAPU8[$2 + 3 | 0], HEAP32[$2 + 8 >> 2]);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function push_outgoing_bits($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP8[$2 + 7 | 0] = 0;
  HEAP8[$2 + 6 | 0] = 0;
  block : {
   if (HEAPU8[HEAP32[$2 + 12 >> 2] + 10 | 0] > 8) {
    HEAP8[$2 + 7 | 0] = 8;
    HEAP8[$2 + 6 | 0] = HEAPU16[HEAP32[$2 + 12 >> 2] + 8 >> 1] >> HEAPU8[HEAP32[$2 + 12 >> 2] + 10 | 0] - 8;
    break block;
   }
   HEAP8[$2 + 7 | 0] = HEAPU8[HEAP32[$2 + 12 >> 2] + 10 | 0];
   HEAP8[$2 + 6 | 0] = HEAPU16[HEAP32[$2 + 12 >> 2] + 8 >> 1];
  }
  if (HEAPU8[$2 + 7 | 0]) {
   push_bits(HEAP32[$2 + 12 >> 2], HEAPU8[$2 + 7 | 0], HEAPU8[$2 + 6 | 0], HEAP32[$2 + 8 >> 2]);
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP8[$0 + 10 | 0] = HEAPU8[$0 + 10 | 0] - HEAPU8[$2 + 7 | 0];
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAPU8[$2 + 7 | 0];
 }
 
 function save_backlog($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = get_input_buffer_size(HEAP32[$1 + 12 >> 2]) & 65535;
  HEAP16[$1 + 6 >> 1] = HEAPU16[HEAP32[$1 + 12 >> 2] + 2 >> 1];
  HEAP16[$1 + 4 >> 1] = HEAP32[$1 + 8 >> 2] - HEAPU16[$1 + 6 >> 1];
  HEAP16[$1 + 2 >> 1] = HEAP32[$1 + 8 >> 2] + HEAPU16[$1 + 4 >> 1];
  $2 = HEAP32[$1 + 12 >> 2];
  $3 = HEAP32[$1 + 12 >> 2];
  $4 = HEAP32[$1 + 8 >> 2];
  $5 = HEAPU16[$1 + 4 >> 1];
  $0 = HEAPU16[$1 + 2 >> 1];
  if ($0) {
   wasm2js_memory_copy($2 + 15 | 0, $3 + 15 + ($4 - $5) | 0, $0)
  }
  HEAP16[HEAP32[$1 + 12 >> 2] + 2 >> 1] = 0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP16[$0 >> 1] = HEAPU16[$0 >> 1] - (HEAP32[$1 + 8 >> 2] - HEAPU16[$1 + 4 >> 1] | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function heatshrink_encoder_finish($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP32[$1 + 12 >> 2] = -1;
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP8[$0 + 11 | 0] = HEAPU8[$0 + 11 | 0] | 1;
   if (!HEAPU8[HEAP32[$1 + 8 >> 2] + 12 | 0]) {
    HEAP8[HEAP32[$1 + 8 >> 2] + 12 | 0] = 1
   }
   HEAP32[$1 + 12 >> 2] = HEAPU8[HEAP32[$1 + 8 >> 2] + 12 | 0] != 9;
  }
  return HEAP32[$1 + 12 >> 2];
 }
 
 function push_bits($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP8[$4 + 27 | 0] = $1;
  HEAP8[$4 + 26 | 0] = $2;
  HEAP32[$4 + 20 >> 2] = $3;
  block1 : {
   if (!(HEAPU8[$4 + 27 | 0] != 8 | HEAPU8[HEAP32[$4 + 28 >> 2] + 14 | 0] != 128)) {
    $2 = HEAPU8[$4 + 26 | 0];
    $3 = HEAP32[HEAP32[$4 + 20 >> 2] >> 2];
    $0 = HEAP32[HEAP32[$4 + 20 >> 2] + 8 >> 2];
    $1 = HEAP32[$0 >> 2];
    HEAP32[$0 >> 2] = $1 + 1;
    HEAP8[$1 + $3 | 0] = $2;
    break block1;
   }
   HEAP32[$4 + 16 >> 2] = HEAPU8[$4 + 27 | 0] - 1;
   while (1) {
    if (HEAP32[$4 + 16 >> 2] >= 0) {
     HEAP8[$4 + 15 | 0] = (HEAPU8[$4 + 26 | 0] & 1 << HEAP32[$4 + 16 >> 2]) != 0;
     if (HEAP8[$4 + 15 | 0] & 1) {
      $0 = HEAP32[$4 + 28 >> 2];
      HEAP8[$0 + 13 | 0] = HEAPU8[HEAP32[$4 + 28 >> 2] + 14 | 0] | HEAPU8[$0 + 13 | 0];
     }
     $0 = HEAP32[$4 + 28 >> 2];
     HEAP8[$0 + 14 | 0] = HEAPU8[$0 + 14 | 0] >>> 1;
     if (!HEAPU8[HEAP32[$4 + 28 >> 2] + 14 | 0]) {
      HEAP8[HEAP32[$4 + 28 >> 2] + 14 | 0] = 128;
      $2 = HEAPU8[HEAP32[$4 + 28 >> 2] + 13 | 0];
      $3 = HEAP32[HEAP32[$4 + 20 >> 2] >> 2];
      $0 = HEAP32[HEAP32[$4 + 20 >> 2] + 8 >> 2];
      $1 = HEAP32[$0 >> 2];
      HEAP32[$0 >> 2] = $1 + 1;
      HEAP8[$1 + $3 | 0] = $2;
      HEAP8[HEAP32[$4 + 28 >> 2] + 13 | 0] = 0;
     }
     HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 16 >> 2] - 1;
     continue;
    }
    break;
   };
  }
 }
 
 function heatshrink_decoder_reset($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = 256;
  HEAP32[$1 + 4 >> 2] = 32;
  $2 = HEAP32[$1 + 12 >> 2];
  $0 = HEAP32[$1 + 8 >> 2] + HEAP32[$1 + 4 >> 2] | 0;
  if ($0) {
   wasm2js_memory_fill($2 + 13 | 0, 0, $0)
  }
  HEAP8[HEAP32[$1 + 12 >> 2] + 10 | 0] = 0;
  HEAP16[HEAP32[$1 + 12 >> 2] >> 1] = 0;
  HEAP16[HEAP32[$1 + 12 >> 2] + 2 >> 1] = 0;
  HEAP8[HEAP32[$1 + 12 >> 2] + 12 | 0] = 0;
  HEAP8[HEAP32[$1 + 12 >> 2] + 11 | 0] = 0;
  HEAP16[HEAP32[$1 + 12 >> 2] + 4 >> 1] = 0;
  HEAP16[HEAP32[$1 + 12 >> 2] + 6 >> 1] = 0;
  HEAP16[HEAP32[$1 + 12 >> 2] + 8 >> 1] = 0;
 }
 
 function heatshrink_decoder_sink($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  HEAP32[$4 + 24 >> 2] = $0;
  HEAP32[$4 + 20 >> 2] = $1;
  HEAP32[$4 + 16 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  block2 : {
   if (HEAP32[$4 + 12 >> 2] ? !HEAP32[$4 + 24 >> 2] | !HEAP32[$4 + 20 >> 2] : 1) {
    HEAP32[$4 + 28 >> 2] = -1;
    break block2;
   }
   HEAP32[$4 + 8 >> 2] = 32 - HEAPU16[HEAP32[$4 + 24 >> 2] >> 1];
   if (!HEAP32[$4 + 8 >> 2]) {
    HEAP32[HEAP32[$4 + 12 >> 2] >> 2] = 0;
    HEAP32[$4 + 28 >> 2] = 1;
    break block2;
   }
   if (HEAPU32[$4 + 8 >> 2] < HEAPU32[$4 + 16 >> 2]) {
    $0 = HEAP32[$4 + 8 >> 2]
   } else {
    $0 = HEAP32[$4 + 16 >> 2]
   }
   HEAP32[$4 + 16 >> 2] = $0;
   $1 = HEAP32[$4 + 24 >> 2];
   $2 = HEAPU16[HEAP32[$4 + 24 >> 2] >> 1];
   $3 = HEAP32[$4 + 20 >> 2];
   $0 = HEAP32[$4 + 16 >> 2];
   if ($0) {
    wasm2js_memory_copy(($1 + 13 | 0) + $2 | 0, $3, $0)
   }
   $0 = HEAP32[$4 + 24 >> 2];
   HEAP16[$0 >> 1] = HEAP32[$4 + 16 >> 2] + HEAPU16[$0 >> 1];
   HEAP32[HEAP32[$4 + 12 >> 2] >> 2] = HEAP32[$4 + 16 >> 2];
   HEAP32[$4 + 28 >> 2] = 0;
  }
  return HEAP32[$4 + 28 >> 2];
 }
 
 function heatshrink_decoder_poll($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 40 >> 2] = $0;
  HEAP32[$4 + 36 >> 2] = $1;
  HEAP32[$4 + 32 >> 2] = $2;
  HEAP32[$4 + 28 >> 2] = $3;
  block2 : {
   if (HEAP32[$4 + 28 >> 2] ? !HEAP32[$4 + 40 >> 2] | !HEAP32[$4 + 36 >> 2] : 1) {
    HEAP32[$4 + 44 >> 2] = -1;
    break block2;
   }
   HEAP32[HEAP32[$4 + 28 >> 2] >> 2] = 0;
   HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 36 >> 2];
   HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 32 >> 2];
   HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 28 >> 2];
   while (1) {
    HEAP8[$4 + 15 | 0] = HEAPU8[HEAP32[$4 + 40 >> 2] + 10 | 0];
    block11 : {
     block10 : {
      switch (HEAPU8[$4 + 15 | 0]) {
      case 0:
       $0 = st_tag_bit(HEAP32[$4 + 40 >> 2]);
       HEAP8[HEAP32[$4 + 40 >> 2] + 10 | 0] = $0;
       break block11;
      case 1:
       $0 = st_d_yield_literal(HEAP32[$4 + 40 >> 2], $4 + 16 | 0);
       HEAP8[HEAP32[$4 + 40 >> 2] + 10 | 0] = $0;
       break block11;
      case 2:
       $0 = st_backref_index_msb(HEAP32[$4 + 40 >> 2]);
       HEAP8[HEAP32[$4 + 40 >> 2] + 10 | 0] = $0;
       break block11;
      case 3:
       $0 = st_backref_index_lsb(HEAP32[$4 + 40 >> 2]);
       HEAP8[HEAP32[$4 + 40 >> 2] + 10 | 0] = $0;
       break block11;
      case 4:
       $0 = st_backref_count_msb(HEAP32[$4 + 40 >> 2]);
       HEAP8[HEAP32[$4 + 40 >> 2] + 10 | 0] = $0;
       break block11;
      case 5:
       $0 = st_backref_count_lsb(HEAP32[$4 + 40 >> 2]);
       HEAP8[HEAP32[$4 + 40 >> 2] + 10 | 0] = $0;
       break block11;
      case 6:
       $0 = st_yield_backref(HEAP32[$4 + 40 >> 2], $4 + 16 | 0);
       HEAP8[HEAP32[$4 + 40 >> 2] + 10 | 0] = $0;
       break block11;
      default:
       break block10;
      };
     }
     HEAP32[$4 + 44 >> 2] = -2;
     break block2;
    }
    if (HEAPU8[HEAP32[$4 + 40 >> 2] + 10 | 0] != HEAPU8[$4 + 15 | 0]) {
     continue
    }
    break;
   };
   if (HEAP32[HEAP32[$4 + 28 >> 2] >> 2] == HEAP32[$4 + 32 >> 2]) {
    HEAP32[$4 + 44 >> 2] = 1;
    break block2;
   }
   HEAP32[$4 + 44 >> 2] = 0;
  }
  __stack_pointer = $4 + 48 | 0;
  return HEAP32[$4 + 44 >> 2];
 }
 
 function st_tag_bit($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = get_bits(HEAP32[$1 + 8 >> 2], 1) & 65535;
  block : {
   if (HEAP32[$1 + 4 >> 2] == 65535) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   if (HEAP32[$1 + 4 >> 2]) {
    HEAP32[$1 + 12 >> 2] = 1;
    break block;
   }
   HEAP16[HEAP32[$1 + 8 >> 2] + 6 >> 1] = 0;
   HEAP32[$1 + 12 >> 2] = 3;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function st_d_yield_literal($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  block : {
   if (HEAPU32[HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2] >> 2] < HEAPU32[HEAP32[$2 + 20 >> 2] + 4 >> 2]) {
    HEAP16[$2 + 18 >> 1] = get_bits(HEAP32[$2 + 24 >> 2], 8);
    if (HEAPU16[$2 + 18 >> 1] == 65535) {
     HEAP32[$2 + 28 >> 2] = 1;
     break block;
    }
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 24 >> 2] + 45;
    HEAP16[$2 + 10 >> 1] = 255;
    HEAP8[$2 + 9 | 0] = HEAPU16[$2 + 18 >> 1];
    $3 = HEAPU8[$2 + 9 | 0];
    $4 = HEAP32[$2 + 12 >> 2];
    $0 = HEAP32[$2 + 24 >> 2];
    $1 = HEAPU16[$0 + 8 >> 1];
    HEAP16[$0 + 8 >> 1] = $1 + 1;
    HEAP8[(HEAPU16[$2 + 10 >> 1] & $1) + $4 | 0] = $3;
    push_byte(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAPU8[$2 + 9 | 0]);
    HEAP32[$2 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 28 >> 2] = 1;
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function st_backref_index_msb($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP8[$1 + 7 | 0] = 8;
  HEAP16[$1 + 4 >> 1] = get_bits(HEAP32[$1 + 8 >> 2], HEAPU8[$1 + 7 | 0] - 8 & 255);
  block : {
   if (HEAPU16[$1 + 4 >> 1] == 65535) {
    HEAP32[$1 + 12 >> 2] = 2;
    break block;
   }
   HEAP16[HEAP32[$1 + 8 >> 2] + 6 >> 1] = HEAPU16[$1 + 4 >> 1] << 8;
   HEAP32[$1 + 12 >> 2] = 3;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function st_backref_index_lsb($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP8[$1 + 7 | 0] = 8;
  $2 = HEAP32[$1 + 8 >> 2];
  if (HEAPU8[$1 + 7 | 0] < 8) {
   $0 = HEAPU8[$1 + 7 | 0]
  } else {
   $0 = 8
  }
  HEAP16[$1 + 4 >> 1] = get_bits($2, $0);
  block1 : {
   if (HEAPU16[$1 + 4 >> 1] == 65535) {
    HEAP32[$1 + 12 >> 2] = 3;
    break block1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP16[$0 + 6 >> 1] = HEAPU16[$1 + 4 >> 1] | HEAPU16[$0 + 6 >> 1];
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP16[$0 + 6 >> 1] = HEAPU16[$0 + 6 >> 1] + 1;
   HEAP8[$1 + 3 | 0] = 6;
   HEAP16[HEAP32[$1 + 8 >> 2] + 4 >> 1] = 0;
   HEAP32[$1 + 12 >> 2] = HEAPU8[$1 + 3 | 0] > 8 ? 4 : 5;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function st_backref_count_msb($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP8[$1 + 7 | 0] = 6;
  HEAP16[$1 + 4 >> 1] = get_bits(HEAP32[$1 + 8 >> 2], HEAPU8[$1 + 7 | 0] - 8 & 255);
  block : {
   if (HEAPU16[$1 + 4 >> 1] == 65535) {
    HEAP32[$1 + 12 >> 2] = 4;
    break block;
   }
   HEAP16[HEAP32[$1 + 8 >> 2] + 4 >> 1] = HEAPU16[$1 + 4 >> 1] << 8;
   HEAP32[$1 + 12 >> 2] = 5;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function st_backref_count_lsb($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP8[$1 + 7 | 0] = 6;
  $2 = HEAP32[$1 + 8 >> 2];
  if (HEAPU8[$1 + 7 | 0] < 8) {
   $0 = HEAPU8[$1 + 7 | 0]
  } else {
   $0 = 8
  }
  HEAP16[$1 + 4 >> 1] = get_bits($2, $0);
  block1 : {
   if (HEAPU16[$1 + 4 >> 1] == 65535) {
    HEAP32[$1 + 12 >> 2] = 5;
    break block1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP16[$0 + 4 >> 1] = HEAPU16[$1 + 4 >> 1] | HEAPU16[$0 + 4 >> 1];
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP16[$0 + 4 >> 1] = HEAPU16[$0 + 4 >> 1] + 1;
   HEAP32[$1 + 12 >> 2] = 6;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function st_yield_backref($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  HEAP32[$2 + 16 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 4 >> 2] - HEAP32[HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2] >> 2];
  block : {
   if (HEAP32[$2 + 16 >> 2]) {
    HEAP32[$2 + 12 >> 2] = 0;
    if (HEAPU16[HEAP32[$2 + 24 >> 2] + 4 >> 1] < HEAPU32[$2 + 16 >> 2]) {
     HEAP32[$2 + 16 >> 2] = HEAPU16[HEAP32[$2 + 24 >> 2] + 4 >> 1]
    }
    HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 24 >> 2] + 45;
    HEAP16[$2 + 6 >> 1] = 255;
    HEAP16[$2 + 4 >> 1] = HEAPU16[HEAP32[$2 + 24 >> 2] + 6 >> 1];
    HEAP32[$2 + 12 >> 2] = 0;
    while (1) {
     if (HEAPU32[$2 + 12 >> 2] < HEAPU32[$2 + 16 >> 2]) {
      HEAP8[$2 + 3 | 0] = HEAPU8[HEAP32[$2 + 8 >> 2] + (HEAPU16[$2 + 6 >> 1] & HEAPU16[HEAP32[$2 + 24 >> 2] + 8 >> 1] - HEAPU16[$2 + 4 >> 1]) | 0];
      push_byte(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAPU8[$2 + 3 | 0]);
      HEAP8[HEAP32[$2 + 8 >> 2] + (HEAPU16[HEAP32[$2 + 24 >> 2] + 8 >> 1] & HEAPU16[$2 + 6 >> 1]) | 0] = HEAPU8[$2 + 3 | 0];
      $0 = HEAP32[$2 + 24 >> 2];
      HEAP16[$0 + 8 >> 1] = HEAPU16[$0 + 8 >> 1] + 1;
      HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
      continue;
     }
     break;
    };
    $0 = HEAP32[$2 + 24 >> 2];
    HEAP16[$0 + 4 >> 1] = HEAPU16[$0 + 4 >> 1] - HEAP32[$2 + 16 >> 2];
    if (!HEAPU16[HEAP32[$2 + 24 >> 2] + 4 >> 1]) {
     HEAP32[$2 + 28 >> 2] = 0;
     break block;
    }
   }
   HEAP32[$2 + 28 >> 2] = 6;
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function get_bits($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP8[$2 + 7 | 0] = $1;
  HEAP16[$2 + 4 >> 1] = 0;
  HEAP32[$2 >> 2] = 0;
  block : {
   if (HEAPU8[$2 + 7 | 0] > 15) {
    HEAP16[$2 + 14 >> 1] = 65535;
    break block;
   }
   if (!HEAPU16[HEAP32[$2 + 8 >> 2] >> 1]) {
    if (HEAPU8[HEAP32[$2 + 8 >> 2] + 12 | 0] < 1 << HEAPU8[$2 + 7 | 0] - 1) {
     HEAP16[$2 + 14 >> 1] = 65535;
     break block;
    }
   }
   HEAP32[$2 >> 2] = 0;
   while (1) {
    if (HEAP32[$2 >> 2] < HEAPU8[$2 + 7 | 0]) {
     if (!HEAPU8[HEAP32[$2 + 8 >> 2] + 12 | 0]) {
      if (!HEAPU16[HEAP32[$2 + 8 >> 2] >> 1]) {
       HEAP16[$2 + 14 >> 1] = 65535;
       break block;
      }
      $0 = HEAP32[$2 + 8 >> 2];
      $1 = HEAPU16[$0 + 2 >> 1];
      HEAP16[$0 + 2 >> 1] = $1 + 1;
      HEAP8[HEAP32[$2 + 8 >> 2] + 11 | 0] = HEAPU8[($0 + 13 | 0) + $1 | 0];
      if (HEAPU16[HEAP32[$2 + 8 >> 2] + 2 >> 1] == HEAPU16[HEAP32[$2 + 8 >> 2] >> 1]) {
       HEAP16[HEAP32[$2 + 8 >> 2] + 2 >> 1] = 0;
       HEAP16[HEAP32[$2 + 8 >> 2] >> 1] = 0;
      }
      HEAP8[HEAP32[$2 + 8 >> 2] + 12 | 0] = 128;
     }
     HEAP16[$2 + 4 >> 1] = HEAPU16[$2 + 4 >> 1] << 1;
     if (HEAPU8[HEAP32[$2 + 8 >> 2] + 11 | 0] & HEAPU8[HEAP32[$2 + 8 >> 2] + 12 | 0]) {
      HEAP16[$2 + 4 >> 1] = HEAPU16[$2 + 4 >> 1] | 1
     }
     $0 = HEAP32[$2 + 8 >> 2];
     HEAP8[$0 + 12 | 0] = HEAPU8[$0 + 12 | 0] >>> 1;
     HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
     continue;
    }
    break;
   };
   block1 : {
    if (HEAPU8[$2 + 7 | 0] <= 1) {
     break block1
    }
   }
   HEAP16[$2 + 14 >> 1] = HEAPU16[$2 + 4 >> 1];
  }
  return HEAPU16[$2 + 14 >> 1];
 }
 
 function push_byte($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP8[$3 + 7 | 0] = $2;
  $1 = HEAPU8[$3 + 7 | 0];
  $0 = HEAP32[HEAP32[$3 + 8 >> 2] >> 2];
  $3 = HEAP32[HEAP32[$3 + 8 >> 2] + 8 >> 2];
  $2 = HEAP32[$3 >> 2];
  HEAP32[$3 >> 2] = $2 + 1;
  HEAP8[$2 + $0 | 0] = $1;
 }
 
 function heatshrink_decoder_finish($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP32[$1 + 12 >> 2] = -1;
    break block;
   }
   block4 : {
    switch (HEAPU8[HEAP32[$1 + 8 >> 2] + 10 | 0]) {
    case 0:
     HEAP32[$1 + 12 >> 2] = !!HEAPU16[HEAP32[$1 + 8 >> 2] >> 1];
     break block;
    case 2:
    case 3:
    case 4:
    case 5:
     HEAP32[$1 + 12 >> 2] = !!HEAPU16[HEAP32[$1 + 8 >> 2] >> 1];
     break block;
    case 1:
     HEAP32[$1 + 12 >> 2] = !!HEAPU16[HEAP32[$1 + 8 >> 2] >> 1];
     break block;
    default:
     break block4;
    };
   }
   HEAP32[$1 + 12 >> 2] = 1;
  }
  return HEAP32[$1 + 12 >> 2];
 }
 
 function heatshrink_ptr_output_cb($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
  $0 = HEAPU8[$2 + 15 | 0];
  $2 = HEAP32[$2 + 4 >> 2];
  $1 = HEAP32[$2 >> 2];
  HEAP32[$2 >> 2] = $1 + 1;
  HEAP8[$1 | 0] = $0;
 }
 
 function heatshrink_var_output_cb($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
  jsvStringIteratorSetCharAndNext(HEAP32[$2 + 4 >> 2], HEAP8[$2 + 15 | 0] << 24 >> 24);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function heatshrink_var_input_cb($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 12 >> 2];
  HEAP32[$1 + 4 >> 2] = -1;
  if (jsvIteratorHasElement(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 4 >> 2] = jsvIteratorGetIntegerValue(HEAP32[$1 + 8 >> 2]) & 255
  }
  jsvIteratorNext(HEAP32[$1 + 8 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 4 >> 2];
 }
 
 function heatshrink_encode_cb($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 832 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 828 >> 2] = $0;
  HEAP32[$4 + 824 >> 2] = $1;
  HEAP32[$4 + 820 >> 2] = $2;
  HEAP32[$4 + 816 >> 2] = $3;
  heatshrink_encoder_reset($4 + 288 | 0);
  HEAP32[$4 + 24 >> 2] = 0;
  HEAP32[$4 + 20 >> 2] = 0;
  HEAP32[$4 + 16 >> 2] = 0;
  HEAP32[$4 + 12 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  while (1) {
   $0 = 1;
   $0 = HEAP32[$4 + 16 >> 2] < 0 ? HEAP32[$4 + 12 >> 2] != 0 : $0;
   if ($0) {
    if (!HEAP32[$4 + 12 >> 2]) {
     HEAP32[$4 + 8 >> 2] = 0;
     while (1) {
      $0 = 0;
      $0 = HEAPU32[$4 + 12 >> 2] < 128 ? HEAP32[$4 + 16 >> 2] >= 0 : $0;
      if ($0) {
       HEAP32[$4 + 16 >> 2] = FUNCTION_TABLE[HEAP32[$4 + 828 >> 2]](HEAP32[$4 + 824 >> 2]);
       if (HEAP32[$4 + 16 >> 2] >= 0) {
        $1 = HEAP32[$4 + 16 >> 2];
        $0 = HEAP32[$4 + 12 >> 2];
        HEAP32[$4 + 12 >> 2] = $0 + 1;
        HEAP8[($4 + 160 | 0) + $0 | 0] = $1;
       }
       continue;
      }
      break;
     };
    }
    HEAP8[$4 + 7 | 0] = (heatshrink_encoder_sink($4 + 288 | 0, HEAP32[$4 + 8 >> 2] + ($4 + 160 | 0) | 0, HEAP32[$4 + 12 >> 2], $4 + 24 | 0) | 0) >= 0;
    HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] - HEAP32[$4 + 24 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 24 >> 2] + HEAP32[$4 + 8 >> 2];
    if (!(HEAP32[$4 + 12 >> 2] | HEAP32[$4 + 16 >> 2] >= 0)) {
     heatshrink_encoder_finish($4 + 288 | 0)
    }
    while (1) {
     HEAP32[$4 >> 2] = heatshrink_encoder_poll($4 + 288 | 0, $4 + 32 | 0, 128, $4 + 24 | 0);
     if (HEAP32[$4 + 820 >> 2]) {
      HEAP32[$4 + 28 >> 2] = 0;
      while (1) {
       if (HEAPU32[$4 + 28 >> 2] < HEAPU32[$4 + 24 >> 2]) {
        FUNCTION_TABLE[HEAP32[$4 + 820 >> 2]](HEAPU8[HEAP32[$4 + 28 >> 2] + ($4 + 32 | 0) | 0], HEAP32[$4 + 816 >> 2]);
        HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 28 >> 2] + 1;
        continue;
       }
       break;
      };
     }
     HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 24 >> 2] + HEAP32[$4 + 20 >> 2];
     if (HEAP32[$4 >> 2] == 1) {
      continue
     }
     break;
    };
    if (!(HEAP32[$4 + 12 >> 2] | HEAP32[$4 + 16 >> 2] >= 0)) {
     heatshrink_encoder_finish($4 + 288 | 0)
    }
    continue;
   }
   break;
  };
  __stack_pointer = $4 + 832 | 0;
  return HEAP32[$4 + 20 >> 2];
 }
 
 function heatshrink_decode_cb($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 608 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 604 >> 2] = $0;
  HEAP32[$4 + 600 >> 2] = $1;
  HEAP32[$4 + 596 >> 2] = $2;
  HEAP32[$4 + 592 >> 2] = $3;
  heatshrink_decoder_reset($4 + 290 | 0);
  HEAP32[$4 + 24 >> 2] = 0;
  HEAP32[$4 + 20 >> 2] = 0;
  HEAP32[$4 + 16 >> 2] = 0;
  HEAP32[$4 + 12 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  while (1) {
   $0 = 1;
   $0 = HEAP32[$4 + 16 >> 2] < 0 ? HEAP32[$4 + 12 >> 2] != 0 : $0;
   if ($0) {
    if (!HEAP32[$4 + 12 >> 2]) {
     HEAP32[$4 + 8 >> 2] = 0;
     while (1) {
      $0 = 0;
      $0 = HEAPU32[$4 + 12 >> 2] < 128 ? HEAP32[$4 + 16 >> 2] >= 0 : $0;
      if ($0) {
       HEAP32[$4 + 16 >> 2] = FUNCTION_TABLE[HEAP32[$4 + 604 >> 2]](HEAP32[$4 + 600 >> 2]);
       if (HEAP32[$4 + 16 >> 2] >= 0) {
        $1 = HEAP32[$4 + 16 >> 2];
        $0 = HEAP32[$4 + 12 >> 2];
        HEAP32[$4 + 12 >> 2] = $0 + 1;
        HEAP8[($4 + 160 | 0) + $0 | 0] = $1;
       }
       continue;
      }
      break;
     };
    }
    HEAP8[$4 + 7 | 0] = (heatshrink_decoder_sink($4 + 290 | 0, HEAP32[$4 + 8 >> 2] + ($4 + 160 | 0) | 0, HEAP32[$4 + 12 >> 2], $4 + 24 | 0) | 0) >= 0;
    HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] - HEAP32[$4 + 24 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 24 >> 2] + HEAP32[$4 + 8 >> 2];
    if (!(HEAP32[$4 + 12 >> 2] | HEAP32[$4 + 16 >> 2] >= 0)) {
     heatshrink_decoder_finish($4 + 290 | 0)
    }
    while (1) {
     HEAP32[$4 >> 2] = heatshrink_decoder_poll($4 + 290 | 0, $4 + 32 | 0, 128, $4 + 24 | 0);
     if (HEAP32[$4 + 596 >> 2]) {
      HEAP32[$4 + 28 >> 2] = 0;
      while (1) {
       if (HEAPU32[$4 + 28 >> 2] < HEAPU32[$4 + 24 >> 2]) {
        FUNCTION_TABLE[HEAP32[$4 + 596 >> 2]](HEAPU8[HEAP32[$4 + 28 >> 2] + ($4 + 32 | 0) | 0], HEAP32[$4 + 592 >> 2]);
        HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 28 >> 2] + 1;
        continue;
       }
       break;
      };
     }
     HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 24 >> 2] + HEAP32[$4 + 20 >> 2];
     if (HEAP32[$4 >> 2] == 1) {
      continue
     }
     break;
    };
    if (HEAP32[$4 + 16 >> 2] < 0) {
     heatshrink_decoder_finish($4 + 290 | 0)
    }
    continue;
   }
   break;
  };
  __stack_pointer = $4 + 608 | 0;
  return HEAP32[$4 + 20 >> 2];
 }
 
 function heatshrink_decode($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  HEAP32[$3 >> 2] = HEAP32[$3 + 4 >> 2];
  $0 = heatshrink_decode_cb(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2] ? 571 : 0, HEAP32[$3 + 4 >> 2] ? $3 : 0);
  __stack_pointer = $3 + 16 | 0;
  return $0;
 }
 
 function graphicsDrawChar4x6($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0;
  $7 = __stack_pointer - 48 | 0;
  __stack_pointer = $7;
  HEAP32[$7 + 44 >> 2] = $0;
  HEAP32[$7 + 40 >> 2] = $1;
  HEAP32[$7 + 36 >> 2] = $2;
  HEAP8[$7 + 35 | 0] = $3;
  HEAP16[$7 + 32 >> 1] = $4;
  HEAP16[$7 + 30 >> 1] = $5;
  HEAP8[$7 + 29 | 0] = $6;
  HEAP32[$7 + 24 >> 2] = HEAPU8[$7 + 35 | 0] - 33;
  block1 : {
   if (!(HEAP32[$7 + 24 >> 2] < 100 & HEAP32[$7 + 24 >> 2] >= 0)) {
    if (HEAP8[$7 + 29 | 0] & 1) {
     $0 = HEAP32[$7 + 44 >> 2];
     graphicsFillRect(HEAP32[$7 + 44 >> 2], HEAP32[$7 + 40 >> 2], HEAP32[$7 + 36 >> 2], HEAP32[$7 + 40 >> 2] + (HEAPU16[$7 + 32 >> 1] << 1) | 0, HEAP32[$7 + 36 >> 2] + Math_imul(HEAPU16[$7 + 30 >> 1], 5) | 0, HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
    }
    break block1;
   }
   HEAP32[$7 + 20 >> 2] = HEAP32[$7 + 24 >> 2] % 5;
   HEAP32[$7 + 24 >> 2] = Math_imul(HEAP32[$7 + 24 >> 2] / 5 | 0, 6);
   HEAP32[$7 + 16 >> 2] = 0;
   while (1) {
    if (HEAP32[$7 + 16 >> 2] < 6) {
     HEAP32[$7 + 12 >> 2] = HEAPU16[(HEAP32[$7 + 24 >> 2] + HEAP32[$7 + 16 >> 2] << 1) + 167760 >> 1] >> Math_imul(HEAP32[$7 + 20 >> 2], 3);
     HEAP32[$7 + 8 >> 2] = HEAP32[$7 + 36 >> 2] + Math_imul(HEAP32[$7 + 16 >> 2], HEAPU16[$7 + 30 >> 1]);
     HEAP32[$7 + 4 >> 2] = 0;
     while (1) {
      if (HEAP32[$7 + 4 >> 2] < 3) {
       HEAP8[$7 + 3 | 0] = (HEAP32[$7 + 12 >> 2] & 4) != 0;
       if (HEAP8[$7 + 29 | 0] & 1 | HEAP8[$7 + 3 | 0] & 1) {
        $1 = HEAP32[$7 + 44 >> 2];
        $2 = HEAP32[$7 + 40 >> 2] + Math_imul(HEAP32[$7 + 4 >> 2], HEAPU16[$7 + 32 >> 1]) | 0;
        $3 = HEAP32[$7 + 8 >> 2];
        $4 = (HEAP32[$7 + 40 >> 2] + Math_imul(HEAPU16[$7 + 32 >> 1], HEAP32[$7 + 4 >> 2] + 1 | 0) | 0) - 1 | 0;
        $5 = (HEAP32[$7 + 8 >> 2] + HEAPU16[$7 + 30 >> 1] | 0) - 1 | 0;
        block3 : {
         if (HEAP8[$7 + 3 | 0] & 1) {
          $0 = HEAP32[$7 + 44 >> 2];
          $0 = HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24);
          break block3;
         }
         $0 = HEAP32[$7 + 44 >> 2];
         $0 = HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
        }
        graphicsFillRect($1, $2, $3, $4, $5, $0);
       }
       HEAP32[$7 + 12 >> 2] = HEAP32[$7 + 12 >> 2] << 1;
       HEAP32[$7 + 4 >> 2] = HEAP32[$7 + 4 >> 2] + 1;
       continue;
      }
      break;
     };
     HEAP32[$7 + 16 >> 2] = HEAP32[$7 + 16 >> 2] + 1;
     continue;
    }
    break;
   };
   if (!(HEAP8[$7 + 29 | 0] & 1)) {
    break block1
   }
   $0 = HEAP32[$7 + 44 >> 2];
   graphicsFillRect(HEAP32[$7 + 44 >> 2], HEAP32[$7 + 40 >> 2] + Math_imul(HEAPU16[$7 + 32 >> 1], 3) | 0, HEAP32[$7 + 36 >> 2], (HEAP32[$7 + 40 >> 2] + (HEAPU16[$7 + 32 >> 1] << 2) | 0) - 1 | 0, (HEAP32[$7 + 36 >> 2] + Math_imul(HEAPU16[$7 + 30 >> 1], 6) | 0) - 1 | 0, HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
  }
  __stack_pointer = $7 + 48 | 0;
 }
 
 function graphicsDrawChar6x8($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0;
  $7 = __stack_pointer - 48 | 0;
  __stack_pointer = $7;
  HEAP32[$7 + 44 >> 2] = $0;
  HEAP32[$7 + 40 >> 2] = $1;
  HEAP32[$7 + 36 >> 2] = $2;
  HEAP8[$7 + 35 | 0] = $3;
  HEAP16[$7 + 32 >> 1] = $4;
  HEAP16[$7 + 30 >> 1] = $5;
  HEAP8[$7 + 29 | 0] = $6;
  HEAP32[$7 + 24 >> 2] = HEAPU8[$7 + 35 | 0] - 33;
  block1 : {
   if (!(HEAP32[$7 + 24 >> 2] < 223 & HEAP32[$7 + 24 >> 2] >= 0)) {
    if (HEAP8[$7 + 29 | 0] & 1) {
     $0 = HEAP32[$7 + 44 >> 2];
     graphicsFillRect(HEAP32[$7 + 44 >> 2], HEAP32[$7 + 40 >> 2], HEAP32[$7 + 36 >> 2], HEAP32[$7 + 40 >> 2] + Math_imul(HEAPU16[$7 + 32 >> 1], 5) | 0, HEAP32[$7 + 36 >> 2] + Math_imul(HEAPU16[$7 + 30 >> 1], 7) | 0, HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
    }
    break block1;
   }
   HEAP32[$7 + 20 >> 2] = HEAP32[$7 + 24 >> 2] % 6;
   HEAP32[$7 + 24 >> 2] = HEAP32[$7 + 24 >> 2] / 6 << 3;
   HEAP32[$7 + 16 >> 2] = 0;
   while (1) {
    if (HEAP32[$7 + 16 >> 2] < 8) {
     HEAP32[$7 + 12 >> 2] = HEAP32[(HEAP32[$7 + 24 >> 2] + HEAP32[$7 + 16 >> 2] << 2) + 168e3 >> 2] >>> Math_imul(HEAP32[$7 + 20 >> 2], 5);
     HEAP32[$7 + 8 >> 2] = HEAP32[$7 + 36 >> 2] + Math_imul(HEAP32[$7 + 16 >> 2], HEAPU16[$7 + 30 >> 1]);
     HEAP32[$7 + 4 >> 2] = 0;
     while (1) {
      if (HEAP32[$7 + 4 >> 2] < 5) {
       HEAP8[$7 + 3 | 0] = (HEAP32[$7 + 12 >> 2] & 16) != 0;
       if (HEAP8[$7 + 29 | 0] & 1 | HEAP8[$7 + 3 | 0] & 1) {
        $1 = HEAP32[$7 + 44 >> 2];
        $2 = HEAP32[$7 + 40 >> 2] + Math_imul(HEAP32[$7 + 4 >> 2], HEAPU16[$7 + 32 >> 1]) | 0;
        $3 = HEAP32[$7 + 8 >> 2];
        $4 = (HEAP32[$7 + 40 >> 2] + Math_imul(HEAPU16[$7 + 32 >> 1], HEAP32[$7 + 4 >> 2] + 1 | 0) | 0) - 1 | 0;
        $5 = (HEAP32[$7 + 8 >> 2] + HEAPU16[$7 + 30 >> 1] | 0) - 1 | 0;
        block3 : {
         if (HEAP8[$7 + 3 | 0] & 1) {
          $0 = HEAP32[$7 + 44 >> 2];
          $0 = HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24);
          break block3;
         }
         $0 = HEAP32[$7 + 44 >> 2];
         $0 = HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
        }
        graphicsFillRect($1, $2, $3, $4, $5, $0);
       }
       HEAP32[$7 + 12 >> 2] = HEAP32[$7 + 12 >> 2] << 1;
       HEAP32[$7 + 4 >> 2] = HEAP32[$7 + 4 >> 2] + 1;
       continue;
      }
      break;
     };
     HEAP32[$7 + 16 >> 2] = HEAP32[$7 + 16 >> 2] + 1;
     continue;
    }
    break;
   };
   if (!(HEAP8[$7 + 29 | 0] & 1)) {
    break block1
   }
   $0 = HEAP32[$7 + 44 >> 2];
   graphicsFillRect(HEAP32[$7 + 44 >> 2], HEAP32[$7 + 40 >> 2] + Math_imul(HEAPU16[$7 + 32 >> 1], 5) | 0, HEAP32[$7 + 36 >> 2], (HEAP32[$7 + 40 >> 2] + Math_imul(HEAPU16[$7 + 32 >> 1], 6) | 0) - 1 | 0, (HEAP32[$7 + 36 >> 2] + (HEAPU16[$7 + 30 >> 1] << 3) | 0) - 1 | 0, HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
  }
  __stack_pointer = $7 + 48 | 0;
 }
 
 function vfGetCharFromPtr($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0;
  $8 = __stack_pointer - 256 | 0;
  __stack_pointer = $8;
  HEAP32[$8 + 252 >> 2] = $0;
  HEAP32[$8 + 248 >> 2] = $1;
  HEAP32[$8 + 244 >> 2] = $2;
  HEAP32[$8 + 240 >> 2] = $3;
  HEAP32[$8 + 236 >> 2] = $4;
  HEAP32[$8 + 232 >> 2] = $5;
  HEAP32[$8 + 228 >> 2] = $6;
  HEAP32[$8 + 224 >> 2] = $7;
  HEAP32[$8 + 244 >> 2] = (HEAP32[$8 + 244 >> 2] << 4) - 8;
  HEAP32[$8 + 240 >> 2] = (HEAP32[$8 + 240 >> 2] << 4) - 8;
  HEAP32[$8 + 220 >> 2] = 0;
  HEAP32[$8 + 216 >> 2] = 0;
  while (1) {
   if (HEAP32[$8 + 216 >> 2] < HEAP32[$8 + 224 >> 2]) {
    HEAP32[$8 + 24 >> 2] = vfGetPolyPtr(HEAPU8[HEAP32[$8 + 228 >> 2] + HEAP32[$8 + 216 >> 2] | 0], $8 + 28 | 0);
    HEAP32[$8 + 20 >> 2] = 0;
    while (1) {
     if (HEAP32[$8 + 20 >> 2] < HEAP32[$8 + 28 >> 2]) {
      HEAP8[$8 + 19 | 0] = HEAPU8[HEAP32[$8 + 24 >> 2] + HEAP32[$8 + 20 >> 2] | 0];
      HEAP32[$8 + 12 >> 2] = HEAPU8[$8 + 19 | 0] % 13;
      HEAP32[$8 + 8 >> 2] = HEAPU8[$8 + 19 | 0] / 13;
      if (HEAP32[$8 + 12 >> 2] > HEAP32[$8 + 220 >> 2]) {
       HEAP32[$8 + 220 >> 2] = HEAP32[$8 + 12 >> 2]
      }
      HEAP16[($8 + 32 | 0) + (HEAP32[$8 + 20 >> 2] << 2) >> 1] = HEAP32[$8 + 244 >> 2] + ((Math_imul(HEAP32[$8 + 12 >> 2], HEAP32[$8 + 236 >> 2]) << 4) / 16 | 0);
      HEAP16[((HEAP32[$8 + 20 >> 2] << 2) + $8 | 0) + 34 >> 1] = HEAP32[$8 + 240 >> 2] + ((Math_imul(HEAP32[$8 + 232 >> 2], HEAP32[$8 + 8 >> 2] - 2 | 0) << 4) / 16 | 0);
      HEAP32[$8 + 20 >> 2] = HEAP32[$8 + 20 >> 2] + 1;
      continue;
     }
     break;
    };
    FUNCTION_TABLE[HEAP32[$8 + 252 >> 2]](HEAP32[$8 + 248 >> 2], HEAP32[$8 + 28 >> 2], $8 + 32 | 0);
    HEAP32[$8 + 216 >> 2] = HEAP32[$8 + 216 >> 2] + 1;
    continue;
   }
   break;
  };
  __stack_pointer = $8 + 256 | 0;
  return ((Math_imul(HEAP32[$8 + 236 >> 2], HEAP32[$8 + 220 >> 2] + 2 | 0) << 4) / 16 | 0) + 7 >> 4;
 }
 
 function vfGetPolyPtr($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  HEAP8[$2 + 27 | 0] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  block : {
   if (HEAPU8[$2 + 27 | 0] >= 201) {
    HEAP32[$2 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = HEAPU8[HEAPU8[$2 + 27 | 0] + 169216 | 0];
   HEAP32[$2 + 16 >> 2] = 169424;
   HEAP8[$2 + 15 | 0] = 0;
   while (1) {
    if (HEAPU8[$2 + 15 | 0] < HEAPU8[$2 + 27 | 0]) {
     HEAP32[$2 + 16 >> 2] = HEAPU8[HEAPU8[$2 + 15 | 0] + 169216 | 0] + HEAP32[$2 + 16 >> 2];
     HEAP8[$2 + 15 | 0] = HEAPU8[$2 + 15 | 0] + 1;
     continue;
    }
    break;
   };
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
  }
  return HEAP32[$2 + 28 >> 2];
 }
 
 function graphicsVectorCharWidth($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 40 >> 2] = $0;
  HEAP8[$2 + 39 | 0] = $1;
  HEAP32[$2 + 28 >> 2] = vfGetCharPtr(HEAP8[$2 + 39 | 0] << 24 >> 24, $2 + 32 | 0);
  block : {
   if (!HEAP32[$2 + 28 >> 2]) {
    HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 40 >> 2] >>> 1;
    break block;
   }
   HEAP32[$2 + 24 >> 2] = 0;
   HEAP32[$2 + 20 >> 2] = 0;
   while (1) {
    if (HEAP32[$2 + 20 >> 2] < HEAP32[$2 + 32 >> 2]) {
     HEAP32[$2 + 12 >> 2] = vfGetPolyPtr(HEAPU8[HEAP32[$2 + 28 >> 2] + HEAP32[$2 + 20 >> 2] | 0], $2 + 16 | 0);
     HEAP32[$2 + 8 >> 2] = 0;
     while (1) {
      if (HEAP32[$2 + 8 >> 2] < HEAP32[$2 + 16 >> 2]) {
       HEAP8[$2 + 7 | 0] = HEAPU8[HEAP32[$2 + 12 >> 2] + HEAP32[$2 + 8 >> 2] | 0];
       HEAP32[$2 >> 2] = HEAPU8[$2 + 7 | 0] % 13;
       if (HEAP32[$2 >> 2] > HEAP32[$2 + 24 >> 2]) {
        HEAP32[$2 + 24 >> 2] = HEAP32[$2 >> 2]
       }
       HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 1;
       continue;
      }
      break;
     };
     HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] + 1;
     continue;
    }
    break;
   };
   HEAP32[$2 + 44 >> 2] = (Math_imul(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 24 >> 2] + 2 | 0) & 268435455) + 7 >>> 4;
  }
  __stack_pointer = $2 + 48 | 0;
  return HEAP32[$2 + 44 >> 2];
 }
 
 function vfGetCharPtr($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  HEAP8[$2 + 27 | 0] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  HEAP8[$2 + 19 | 0] = HEAPU8[$2 + 27 | 0];
  block1 : {
   if (!(HEAPU8[$2 + 19 | 0] <= 255 & HEAPU8[$2 + 19 | 0] >= 33)) {
    HEAP32[$2 + 28 >> 2] = 0;
    break block1;
   }
   HEAP8[$2 + 19 | 0] = HEAPU8[$2 + 19 | 0] - 33;
   HEAP32[$2 + 12 >> 2] = 171328;
   HEAP8[$2 + 11 | 0] = 0;
   while (1) {
    if (HEAPU8[$2 + 11 | 0] < HEAPU8[$2 + 19 | 0]) {
     HEAP32[$2 + 12 >> 2] = HEAPU8[HEAPU8[$2 + 11 | 0] + 171680 | 0] + HEAP32[$2 + 12 >> 2];
     HEAP8[$2 + 11 | 0] = HEAPU8[$2 + 11 | 0] + 1;
     continue;
    }
    break;
   };
   HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = HEAPU8[HEAPU8[$2 + 19 | 0] + 171680 | 0];
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
  }
  return HEAP32[$2 + 28 >> 2];
 }
 
 function graphicsGetVectorChar($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0;
  $7 = __stack_pointer - 48 | 0;
  __stack_pointer = $7;
  HEAP32[$7 + 40 >> 2] = $0;
  HEAP32[$7 + 36 >> 2] = $1;
  HEAP32[$7 + 32 >> 2] = $2;
  HEAP32[$7 + 28 >> 2] = $3;
  HEAP32[$7 + 24 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $5;
  HEAP8[$7 + 19 | 0] = $6;
  HEAP32[$7 + 8 >> 2] = vfGetCharPtr(HEAP8[$7 + 19 | 0] << 24 >> 24, $7 + 12 | 0);
  block : {
   if (!HEAP32[$7 + 8 >> 2]) {
    HEAP32[$7 + 44 >> 2] = HEAP32[$7 + 24 >> 2] / 2;
    break block;
   }
   HEAP32[$7 + 44 >> 2] = vfGetCharFromPtr(HEAP32[$7 + 40 >> 2], HEAP32[$7 + 36 >> 2], HEAP32[$7 + 32 >> 2], HEAP32[$7 + 28 >> 2], HEAP32[$7 + 24 >> 2], HEAP32[$7 + 20 >> 2], HEAP32[$7 + 8 >> 2], HEAP32[$7 + 12 >> 2]);
  }
  __stack_pointer = $7 + 48 | 0;
  return HEAP32[$7 + 44 >> 2];
 }
 
 function graphicsFallbackSetPixel($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
 }
 
 function graphicsFallbackGetPixel($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = HEAP32[$3 + 12 >> 2];
  return HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
 }
 
 function graphicsFallbackFillRect($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 28 >> 2] = $0;
  HEAP32[$6 + 24 >> 2] = $1;
  HEAP32[$6 + 20 >> 2] = $2;
  HEAP32[$6 + 16 >> 2] = $3;
  HEAP32[$6 + 12 >> 2] = $4;
  HEAP32[$6 + 8 >> 2] = $5;
  HEAP32[$6 >> 2] = HEAP32[$6 + 20 >> 2];
  while (1) {
   if (HEAP32[$6 >> 2] <= HEAP32[$6 + 12 >> 2]) {
    HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 24 >> 2];
    while (1) {
     if (HEAP32[$6 + 4 >> 2] <= HEAP32[$6 + 16 >> 2]) {
      graphicsSetPixelDevice(HEAP32[$6 + 28 >> 2], HEAP32[$6 + 4 >> 2], HEAP32[$6 >> 2], HEAP32[$6 + 8 >> 2]);
      HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] + 1;
      continue;
     }
     break;
    };
    HEAP32[$6 >> 2] = HEAP32[$6 >> 2] + 1;
    continue;
   }
   break;
  };
  __stack_pointer = $6 + 32 | 0;
 }
 
 function graphicsSetPixelDevice($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
  $0 = HEAP32[$4 + 12 >> 2];
  block : {
   if (HEAP32[$4 + 8 >> 2] < (HEAPU8[$0 + 32 | 0] | HEAPU8[$0 + 33 | 0] << 8)) {
    break block
   }
   $0 = HEAP32[$4 + 12 >> 2];
   if (HEAP32[$4 + 4 >> 2] < (HEAPU8[$0 + 34 | 0] | HEAPU8[$0 + 35 | 0] << 8)) {
    break block
   }
   $0 = HEAP32[$4 + 12 >> 2];
   if (HEAP32[$4 + 8 >> 2] > (HEAPU8[$0 + 36 | 0] | HEAPU8[$0 + 37 | 0] << 8)) {
    break block
   }
   $0 = HEAP32[$4 + 12 >> 2];
   if (HEAP32[$4 + 4 >> 2] > (HEAPU8[$0 + 38 | 0] | HEAPU8[$0 + 39 | 0] << 8)) {
    break block
   }
   $0 = HEAP32[$4 + 12 >> 2];
   if (HEAP32[$4 + 8 >> 2] < (HEAPU8[$0 + 40 | 0] | HEAPU8[$0 + 41 | 0] << 8) << 16 >> 16) {
    $0 = HEAP32[$4 + 12 >> 2];
    $1 = HEAP32[$4 + 8 >> 2];
    HEAP8[$0 + 40 | 0] = $1;
    HEAP8[$0 + 41 | 0] = $1 >>> 8;
   }
   $0 = HEAP32[$4 + 12 >> 2];
   if (HEAP32[$4 + 8 >> 2] > (HEAPU8[$0 + 44 | 0] | HEAPU8[$0 + 45 | 0] << 8) << 16 >> 16) {
    $0 = HEAP32[$4 + 12 >> 2];
    $1 = HEAP32[$4 + 8 >> 2];
    HEAP8[$0 + 44 | 0] = $1;
    HEAP8[$0 + 45 | 0] = $1 >>> 8;
   }
   $0 = HEAP32[$4 + 12 >> 2];
   if (HEAP32[$4 + 4 >> 2] < (HEAPU8[$0 + 42 | 0] | HEAPU8[$0 + 43 | 0] << 8) << 16 >> 16) {
    $0 = HEAP32[$4 + 12 >> 2];
    $1 = HEAP32[$4 + 4 >> 2];
    HEAP8[$0 + 42 | 0] = $1;
    HEAP8[$0 + 43 | 0] = $1 >>> 8;
   }
   $0 = HEAP32[$4 + 12 >> 2];
   if (HEAP32[$4 + 4 >> 2] > (HEAPU8[$0 + 46 | 0] | HEAPU8[$0 + 47 | 0] << 8) << 16 >> 16) {
    $0 = HEAP32[$4 + 12 >> 2];
    $1 = HEAP32[$4 + 4 >> 2];
    HEAP8[$0 + 46 | 0] = $1;
    HEAP8[$0 + 47 | 0] = $1 >>> 8;
   }
   $0 = HEAP32[$4 + 12 >> 2];
   FUNCTION_TABLE[HEAPU8[$0 + 52 | 0] | HEAPU8[$0 + 53 | 0] << 8 | (HEAPU8[$0 + 54 | 0] << 16 | HEAPU8[$0 + 55 | 0] << 24)](HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2] & (1 << HEAPU8[HEAP32[$4 + 12 >> 2] + 16 | 0]) - 1);
  }
  __stack_pointer = $4 + 16 | 0;
 }
 
 function graphicsFallbackBlit($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0;
  $7 = __stack_pointer - 48 | 0;
  __stack_pointer = $7;
  HEAP32[$7 + 44 >> 2] = $0;
  HEAP32[$7 + 40 >> 2] = $1;
  HEAP32[$7 + 36 >> 2] = $2;
  HEAP32[$7 + 32 >> 2] = $3;
  HEAP32[$7 + 28 >> 2] = $4;
  HEAP32[$7 + 24 >> 2] = $5;
  HEAP32[$7 + 20 >> 2] = $6;
  HEAP32[$7 + 16 >> 2] = 0;
  while (1) {
   if (HEAP32[$7 + 16 >> 2] < HEAP32[$7 + 28 >> 2]) {
    HEAP32[$7 + 12 >> 2] = 0;
    while (1) {
     if (HEAP32[$7 + 12 >> 2] < HEAP32[$7 + 32 >> 2]) {
      $0 = HEAP32[$7 + 44 >> 2];
      $1 = HEAPU8[$0 + 52 | 0] | HEAPU8[$0 + 53 | 0] << 8 | (HEAPU8[$0 + 54 | 0] << 16 | HEAPU8[$0 + 55 | 0] << 24);
      $0 = HEAP32[$7 + 44 >> 2];
      FUNCTION_TABLE[$1 | 0](HEAP32[$7 + 44 >> 2], HEAP32[$7 + 12 >> 2] + HEAP32[$7 + 24 >> 2] | 0, HEAP32[$7 + 16 >> 2] + HEAP32[$7 + 20 >> 2] | 0, FUNCTION_TABLE[HEAPU8[$0 + 60 | 0] | HEAPU8[$0 + 61 | 0] << 8 | (HEAPU8[$0 + 62 | 0] << 16 | HEAPU8[$0 + 63 | 0] << 24)](HEAP32[$7 + 44 >> 2], HEAP32[$7 + 12 >> 2] + HEAP32[$7 + 40 >> 2] | 0, HEAP32[$7 + 16 >> 2] + HEAP32[$7 + 36 >> 2] | 0) | 0);
      HEAP32[$7 + 12 >> 2] = HEAP32[$7 + 12 >> 2] + 1;
      continue;
     }
     break;
    };
    HEAP32[$7 + 16 >> 2] = HEAP32[$7 + 16 >> 2] + 1;
    continue;
   }
   break;
  };
  __stack_pointer = $7 + 48 | 0;
 }
 
 function graphicsFallbackScrollX($0, $1, $2, $3, $4, $5) {
  var $6 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 28 >> 2] = $0;
  HEAP32[$6 + 24 >> 2] = $1;
  HEAP32[$6 + 20 >> 2] = $2;
  HEAP32[$6 + 16 >> 2] = $3;
  HEAP32[$6 + 12 >> 2] = $4;
  HEAP32[$6 + 8 >> 2] = $5;
  block : {
   if (HEAP32[$6 + 24 >> 2] <= 0) {
    HEAP32[$6 >> 2] = HEAP32[$6 + 8 >> 2] + HEAP32[$6 + 24 >> 2];
    HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 12 >> 2];
    while (1) {
     if (HEAP32[$6 + 4 >> 2] <= HEAP32[$6 >> 2]) {
      $0 = HEAP32[$6 + 28 >> 2];
      $1 = HEAPU8[$0 + 52 | 0] | HEAPU8[$0 + 53 | 0] << 8 | (HEAPU8[$0 + 54 | 0] << 16 | HEAPU8[$0 + 55 | 0] << 24);
      $0 = HEAP32[$6 + 28 >> 2];
      FUNCTION_TABLE[$1 | 0](HEAP32[$6 + 28 >> 2], HEAP32[$6 + 4 >> 2], HEAP32[$6 + 16 >> 2], FUNCTION_TABLE[HEAPU8[$0 + 60 | 0] | HEAPU8[$0 + 61 | 0] << 8 | (HEAPU8[$0 + 62 | 0] << 16 | HEAPU8[$0 + 63 | 0] << 24)](HEAP32[$6 + 28 >> 2], HEAP32[$6 + 4 >> 2] - HEAP32[$6 + 24 >> 2] | 0, HEAP32[$6 + 20 >> 2]) | 0);
      HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] + 1;
      continue;
     }
     break;
    };
    break block;
   }
   HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 8 >> 2] - HEAP32[$6 + 24 >> 2];
   while (1) {
    if (HEAP32[$6 + 4 >> 2] >= HEAP32[$6 + 12 >> 2]) {
     $0 = HEAP32[$6 + 28 >> 2];
     $1 = HEAPU8[$0 + 52 | 0] | HEAPU8[$0 + 53 | 0] << 8 | (HEAPU8[$0 + 54 | 0] << 16 | HEAPU8[$0 + 55 | 0] << 24);
     $0 = HEAP32[$6 + 28 >> 2];
     FUNCTION_TABLE[$1 | 0](HEAP32[$6 + 28 >> 2], HEAP32[$6 + 4 >> 2] + HEAP32[$6 + 24 >> 2] | 0, HEAP32[$6 + 16 >> 2], FUNCTION_TABLE[HEAPU8[$0 + 60 | 0] | HEAPU8[$0 + 61 | 0] << 8 | (HEAPU8[$0 + 62 | 0] << 16 | HEAPU8[$0 + 63 | 0] << 24)](HEAP32[$6 + 28 >> 2], HEAP32[$6 + 4 >> 2], HEAP32[$6 + 20 >> 2]) | 0);
     HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] - 1;
     continue;
    }
    break;
   };
  }
  __stack_pointer = $6 + 32 | 0;
 }
 
 function graphicsFallbackScroll($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0;
  $7 = __stack_pointer - 48 | 0;
  __stack_pointer = $7;
  HEAP32[$7 + 44 >> 2] = $0;
  HEAP32[$7 + 40 >> 2] = $1;
  HEAP32[$7 + 36 >> 2] = $2;
  HEAP32[$7 + 32 >> 2] = $3;
  HEAP32[$7 + 28 >> 2] = $4;
  HEAP32[$7 + 24 >> 2] = $5;
  HEAP32[$7 + 20 >> 2] = $6;
  block1 : {
   if (!(HEAP32[$7 + 40 >> 2] | HEAP32[$7 + 36 >> 2])) {
    break block1
   }
   if (HEAP32[$7 + 36 >> 2] <= 0) {
    HEAP32[$7 + 12 >> 2] = HEAP32[$7 + 20 >> 2] + HEAP32[$7 + 36 >> 2];
    HEAP32[$7 + 16 >> 2] = HEAP32[$7 + 28 >> 2];
    while (1) {
     if (HEAP32[$7 + 16 >> 2] <= HEAP32[$7 + 12 >> 2]) {
      graphicsFallbackScrollX(HEAP32[$7 + 44 >> 2], HEAP32[$7 + 40 >> 2], HEAP32[$7 + 16 >> 2] - HEAP32[$7 + 36 >> 2] | 0, HEAP32[$7 + 16 >> 2], HEAP32[$7 + 32 >> 2], HEAP32[$7 + 24 >> 2]);
      HEAP32[$7 + 16 >> 2] = HEAP32[$7 + 16 >> 2] + 1;
      continue;
     }
     break;
    };
    break block1;
   }
   HEAP32[$7 + 16 >> 2] = HEAP32[$7 + 20 >> 2] - HEAP32[$7 + 36 >> 2];
   while (1) {
    if (HEAP32[$7 + 16 >> 2] >= HEAP32[$7 + 28 >> 2]) {
     graphicsFallbackScrollX(HEAP32[$7 + 44 >> 2], HEAP32[$7 + 40 >> 2], HEAP32[$7 + 16 >> 2], HEAP32[$7 + 16 >> 2] + HEAP32[$7 + 36 >> 2] | 0, HEAP32[$7 + 32 >> 2], HEAP32[$7 + 24 >> 2]);
     HEAP32[$7 + 16 >> 2] = HEAP32[$7 + 16 >> 2] - 1;
     continue;
    }
    break;
   };
  }
  __stack_pointer = $7 + 48 | 0;
 }
 
 function graphicsStructResetState($0) {
  var $1 = 0, $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  block1 : {
   block : {
    $0 = HEAP32[$2 + 12 >> 2];
    if (!(HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24))) {
     break block
    }
    $0 = HEAP32[$2 + 12 >> 2];
    if ((HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24)) == 1) {
     break block
    }
    $0 = HEAP32[$2 + 12 >> 2];
    $1 = HEAPU8[370709] | HEAPU8[370710] << 8;
    HEAP8[$0 + 17 | 0] = $1;
    HEAP8[$0 + 18 | 0] = $1 >>> 8;
    HEAP8[$0 + 19 | 0] = $1 >>> 16;
    HEAP8[$0 + 20 | 0] = $1 >>> 24;
    $0 = HEAP32[$2 + 12 >> 2];
    $1 = HEAPU8[370711] | HEAPU8[370712] << 8;
    HEAP8[$0 + 21 | 0] = $1;
    HEAP8[$0 + 22 | 0] = $1 >>> 8;
    HEAP8[$0 + 23 | 0] = $1 >>> 16;
    HEAP8[$0 + 24 | 0] = $1 >>> 24;
    break block1;
   }
   $0 = HEAP32[$2 + 12 >> 2];
   $1 = HEAPU8[HEAP32[$2 + 12 >> 2] + 16 | 0] >= 32 ? -1 : (1 << HEAPU8[HEAP32[$2 + 12 >> 2] + 16 | 0]) - 1 | 0;
   HEAP8[$0 + 17 | 0] = $1;
   HEAP8[$0 + 18 | 0] = $1 >>> 8;
   HEAP8[$0 + 19 | 0] = $1 >>> 16;
   HEAP8[$0 + 20 | 0] = $1 >>> 24;
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP8[$0 + 21 | 0] = 0;
   HEAP8[$0 + 22 | 0] = 0;
   HEAP8[$0 + 23 | 0] = 0;
   HEAP8[$0 + 24 | 0] = 0;
  }
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP8[$0 + 25 | 0] = 1;
  HEAP8[$0 + 26 | 0] = 32;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP8[$0 + 31 | 0] = HEAPU8[$0 + 31 | 0] | 3;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP8[$0 + 31 | 0] = HEAPU8[$0 + 31 | 0] | 12;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP8[$0 + 31 | 0] = HEAPU8[$0 + 31 | 0] & -49;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP8[$0 + 32 | 0] = 0;
  HEAP8[$0 + 33 | 0] = 0;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP8[$0 + 34 | 0] = 0;
  HEAP8[$0 + 35 | 0] = 0;
  $0 = HEAP32[$2 + 12 >> 2];
  $1 = HEAP32[$2 + 12 >> 2];
  $1 = (HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) - 1 | 0;
  HEAP8[$0 + 36 | 0] = $1;
  HEAP8[$0 + 37 | 0] = $1 >>> 8;
  $0 = HEAP32[$2 + 12 >> 2];
  $1 = HEAP32[$2 + 12 >> 2];
  $1 = (HEAPU8[$1 + 14 | 0] | HEAPU8[$1 + 15 | 0] << 8) - 1 | 0;
  HEAP8[$0 + 38 | 0] = $1;
  HEAP8[$0 + 39 | 0] = $1 >>> 8;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP8[$0 + 27 | 0] = 0;
  HEAP8[$0 + 28 | 0] = 0;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP8[$0 + 29 | 0] = 0;
  HEAP8[$0 + 30 | 0] = 0;
 }
 
 function graphicsStructInit($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
  $0 = HEAP32[$4 + 12 >> 2];
  HEAP8[$0 + 8 | 0] = 0;
  HEAP8[$0 + 9 | 0] = 0;
  HEAP8[$0 + 10 | 0] = 0;
  HEAP8[$0 + 11 | 0] = 0;
  $0 = HEAP32[$4 + 12 >> 2];
  $1 = HEAP32[$4 + 8 >> 2];
  HEAP8[$0 + 12 | 0] = $1;
  HEAP8[$0 + 13 | 0] = $1 >>> 8;
  $0 = HEAP32[$4 + 12 >> 2];
  $1 = HEAP32[$4 + 4 >> 2];
  HEAP8[$0 + 14 | 0] = $1;
  HEAP8[$0 + 15 | 0] = $1 >>> 8;
  HEAP8[HEAP32[$4 + 12 >> 2] + 16 | 0] = HEAP32[$4 >> 2];
  graphicsStructResetState(HEAP32[$4 + 12 >> 2]);
  $0 = HEAP32[$4 + 12 >> 2];
  HEAP8[$0 + 44 | 0] = 0;
  HEAP8[$0 + 45 | 0] = 128;
  $0 = HEAP32[$4 + 12 >> 2];
  HEAP8[$0 + 46 | 0] = 0;
  HEAP8[$0 + 47 | 0] = 128;
  $0 = HEAP32[$4 + 12 >> 2];
  HEAP8[$0 + 40 | 0] = 255;
  HEAP8[$0 + 41 | 0] = 127;
  $0 = HEAP32[$4 + 12 >> 2];
  HEAP8[$0 + 42 | 0] = 255;
  HEAP8[$0 + 43 | 0] = 127;
  __stack_pointer = $4 + 16 | 0;
 }
 
 function graphicsSetCallbacks($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$0 + 52 | 0] = 60;
  HEAP8[$0 + 53 | 0] = 2;
  HEAP8[$0 + 54 | 0] = 0;
  HEAP8[$0 + 55 | 0] = 0;
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$0 + 60 | 0] = 61;
  HEAP8[$0 + 61 | 0] = 2;
  HEAP8[$0 + 62 | 0] = 0;
  HEAP8[$0 + 63 | 0] = 0;
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$0 + 56 | 0] = 62;
  HEAP8[$0 + 57 | 0] = 2;
  HEAP8[$0 + 58 | 0] = 0;
  HEAP8[$0 + 59 | 0] = 0;
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$0 + 64 | 0] = 63;
  HEAP8[$0 + 65 | 0] = 2;
  HEAP8[$0 + 66 | 0] = 0;
  HEAP8[$0 + 67 | 0] = 0;
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$0 + 68 | 0] = 64;
  HEAP8[$0 + 69 | 0] = 2;
  HEAP8[$0 + 70 | 0] = 0;
  HEAP8[$0 + 71 | 0] = 0;
  $0 = HEAP32[$1 + 8 >> 2];
  block3 : {
   block : {
    if (!(HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24))) {
     lcdSetCallbacks_ArrayBuffer(HEAP32[$1 + 8 >> 2]);
     break block;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    block1 : {
     if ((HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24)) == 1) {
      lcdSetCallbacks_JS(HEAP32[$1 + 8 >> 2]);
      break block1;
     }
     block2 : {
      $0 = HEAP32[$1 + 8 >> 2];
      if ((HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24)) == 6) {
       lcdMemLCD_setCallbacks(HEAP32[$1 + 8 >> 2]);
       break block2;
      }
      HEAP8[$1 + 15 | 0] = 0;
      break block3;
     }
    }
   }
   HEAP8[$1 + 15 | 0] = 1;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function graphicsGetFromVar($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$2 + 4 >> 2];
  HEAP8[$0 | 0] = $1;
  HEAP8[$0 + 1 | 0] = $1 >>> 8;
  HEAP8[$0 + 2 | 0] = $1 >>> 16;
  HEAP8[$0 + 3 | 0] = $1 >>> 24;
  HEAP32[$2 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 4 >> 2], 123921);
  block : {
   if (!HEAP32[$2 >> 2]) {
    wasm2js_memory_copy(HEAP32[$2 + 8 >> 2], 370724, 72);
    HEAP8[$2 + 15 | 0] = 1;
    break block;
   }
   if (HEAP32[$2 >> 2]) {
    jsvGetStringChars(HEAP32[$2 >> 2], 0, HEAP32[$2 + 8 >> 2] + 4 | 0, 44);
    jsvUnLock(HEAP32[$2 >> 2]);
    HEAP8[$2 + 15 | 0] = graphicsSetCallbacks(HEAP32[$2 + 8 >> 2]) & 1;
    break block;
   }
   HEAP8[$2 + 15 | 0] = 0;
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP8[$2 + 15 | 0] & 1;
 }
 
 function graphicsSetVarInitial($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[$1 + 8 >> 2] = jsvFindOrAddChildFromString(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 123921);
  HEAP32[$1 + 4 >> 2] = jsvSkipName(HEAP32[$1 + 8 >> 2]);
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 4 >> 2] = jsvNewStringOfLength(44, 0);
   jsvSetValueOfName(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 4 >> 2]);
  }
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
  jsvSetString(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 12 >> 2] + 4 | 0, 44);
  jsvUnLock(HEAP32[$1 + 4 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function graphicsSetVar($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[$1 + 8 >> 2] = jsvSkipNameAndUnLock(jsvFindChildFromString(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 123921));
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    wasm2js_memory_copy(370724, HEAP32[$1 + 12 >> 2], 72);
    break block;
   }
   if (!HEAP32[$1 + 8 >> 2]) {
    break block
   }
   jsvSetString(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2] + 4 | 0, 44);
   jsvUnLock(HEAP32[$1 + 8 >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function graphicsGetMemoryRequired($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = HEAP32[$1 + 12 >> 2];
  return Math_imul(HEAPU8[HEAP32[$1 + 12 >> 2] + 16 | 0], Math_imul(HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8, HEAPU8[$2 + 14 | 0] | HEAPU8[$2 + 15 | 0] << 8)) + 7 >>> 3 | 0;
 }
 
 function graphicsToDeviceCoordinates($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = HEAP32[$3 + 12 >> 2];
  if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 16) {
   HEAP32[$3 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] >> 2];
   HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = HEAP32[HEAP32[$3 + 4 >> 2] >> 2];
   HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = HEAP32[$3 >> 2];
  }
  $0 = HEAP32[$3 + 12 >> 2];
  if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 32) {
   $0 = HEAP32[$3 + 12 >> 2];
   HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) - (HEAP32[HEAP32[$3 + 8 >> 2] >> 2] + 1 | 0);
  }
  $0 = HEAP32[$3 + 12 >> 2];
  if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 64) {
   $0 = HEAP32[$3 + 12 >> 2];
   HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8) - (HEAP32[HEAP32[$3 + 4 >> 2] >> 2] + 1 | 0);
  }
 }
 
 function deviceToGraphicsCoordinates($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = HEAP32[$3 + 12 >> 2];
  if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 32) {
   $0 = HEAP32[$3 + 12 >> 2];
   HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) - (HEAP32[HEAP32[$3 + 8 >> 2] >> 2] + 1 | 0);
  }
  $0 = HEAP32[$3 + 12 >> 2];
  if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 64) {
   $0 = HEAP32[$3 + 12 >> 2];
   HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8) - (HEAP32[HEAP32[$3 + 4 >> 2] >> 2] + 1 | 0);
  }
  $0 = HEAP32[$3 + 12 >> 2];
  if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 16) {
   HEAP32[$3 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] >> 2];
   HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = HEAP32[HEAP32[$3 + 4 >> 2] >> 2];
   HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = HEAP32[$3 >> 2];
  }
 }
 
 function graphicsToDeviceCoordinates16x($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = HEAP32[$3 + 12 >> 2];
  if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 16) {
   HEAP32[$3 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] >> 2];
   HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = HEAP32[HEAP32[$3 + 4 >> 2] >> 2];
   HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = HEAP32[$3 >> 2];
  }
  $0 = HEAP32[$3 + 12 >> 2];
  if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 32) {
   $0 = HEAP32[$3 + 12 >> 2];
   HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) - 1 << 4) - HEAP32[HEAP32[$3 + 8 >> 2] >> 2];
  }
  $0 = HEAP32[$3 + 12 >> 2];
  if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 64) {
   $0 = HEAP32[$3 + 12 >> 2];
   HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = ((HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8) - 1 << 4) - HEAP32[HEAP32[$3 + 4 >> 2] >> 2];
  }
 }
 
 function graphicsGetWidth($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  block : {
   if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 16) {
    $0 = HEAP32[$1 + 12 >> 2];
    $0 = HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8;
    break block;
   }
   $0 = HEAP32[$1 + 12 >> 2];
   $0 = HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8;
  }
  return $0;
 }
 
 function graphicsGetHeight($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  block : {
   if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 16) {
    $0 = HEAP32[$1 + 12 >> 2];
    $0 = HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8;
    break block;
   }
   $0 = HEAP32[$1 + 12 >> 2];
   $0 = HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8;
  }
  return $0;
 }
 
 function graphicsSetModifiedAndClip($0, $1, $2, $3, $4, $5) {
  var $6 = 0;
  $6 = __stack_pointer - 48 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 44 >> 2] = $0;
  HEAP32[$6 + 40 >> 2] = $1;
  HEAP32[$6 + 36 >> 2] = $2;
  HEAP32[$6 + 32 >> 2] = $3;
  HEAP32[$6 + 28 >> 2] = $4;
  HEAP8[$6 + 27 | 0] = $5;
  HEAP8[$6 + 26 | 0] = 0;
  $0 = HEAP32[$6 + 44 >> 2];
  HEAP32[$6 + 20 >> 2] = HEAPU8[$0 + 32 | 0] | HEAPU8[$0 + 33 | 0] << 8;
  $0 = HEAP32[$6 + 44 >> 2];
  HEAP32[$6 + 16 >> 2] = HEAPU8[$0 + 34 | 0] | HEAPU8[$0 + 35 | 0] << 8;
  $0 = HEAP32[$6 + 44 >> 2];
  HEAP32[$6 + 12 >> 2] = HEAPU8[$0 + 36 | 0] | HEAPU8[$0 + 37 | 0] << 8;
  $0 = HEAP32[$6 + 44 >> 2];
  HEAP32[$6 + 8 >> 2] = HEAPU8[$0 + 38 | 0] | HEAPU8[$0 + 39 | 0] << 8;
  if (HEAP8[$6 + 27 | 0] & 1) {
   graphicsToDeviceCoordinates(HEAP32[$6 + 44 >> 2], $6 + 20 | 0, $6 + 16 | 0);
   graphicsToDeviceCoordinates(HEAP32[$6 + 44 >> 2], $6 + 12 | 0, $6 + 8 | 0);
   if (HEAP32[$6 + 12 >> 2] < HEAP32[$6 + 20 >> 2]) {
    HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 20 >> 2];
    HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 12 >> 2];
    HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 4 >> 2];
   }
   if (HEAP32[$6 + 8 >> 2] < HEAP32[$6 + 16 >> 2]) {
    HEAP32[$6 >> 2] = HEAP32[$6 + 16 >> 2];
    HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 8 >> 2];
    HEAP32[$6 + 8 >> 2] = HEAP32[$6 >> 2];
   }
  }
  if (HEAP32[HEAP32[$6 + 40 >> 2] >> 2] < HEAP32[$6 + 20 >> 2]) {
   HEAP32[HEAP32[$6 + 40 >> 2] >> 2] = HEAP32[$6 + 20 >> 2];
   HEAP8[$6 + 26 | 0] = 1;
  }
  if (HEAP32[HEAP32[$6 + 36 >> 2] >> 2] < HEAP32[$6 + 16 >> 2]) {
   HEAP32[HEAP32[$6 + 36 >> 2] >> 2] = HEAP32[$6 + 16 >> 2];
   HEAP8[$6 + 26 | 0] = 1;
  }
  if (HEAP32[HEAP32[$6 + 32 >> 2] >> 2] > HEAP32[$6 + 12 >> 2]) {
   HEAP32[HEAP32[$6 + 32 >> 2] >> 2] = HEAP32[$6 + 12 >> 2];
   HEAP8[$6 + 26 | 0] = 1;
  }
  if (HEAP32[HEAP32[$6 + 28 >> 2] >> 2] > HEAP32[$6 + 8 >> 2]) {
   HEAP32[HEAP32[$6 + 28 >> 2] >> 2] = HEAP32[$6 + 8 >> 2];
   HEAP8[$6 + 26 | 0] = 1;
  }
  $0 = HEAP32[$6 + 44 >> 2];
  if (HEAP32[HEAP32[$6 + 40 >> 2] >> 2] < (HEAPU8[$0 + 40 | 0] | HEAPU8[$0 + 41 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$6 + 44 >> 2];
   $1 = HEAP32[HEAP32[$6 + 40 >> 2] >> 2];
   HEAP8[$0 + 40 | 0] = $1;
   HEAP8[$0 + 41 | 0] = $1 >>> 8;
   HEAP8[$6 + 26 | 0] = 1;
  }
  $0 = HEAP32[$6 + 44 >> 2];
  if (HEAP32[HEAP32[$6 + 32 >> 2] >> 2] > (HEAPU8[$0 + 44 | 0] | HEAPU8[$0 + 45 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$6 + 44 >> 2];
   $1 = HEAP32[HEAP32[$6 + 32 >> 2] >> 2];
   HEAP8[$0 + 44 | 0] = $1;
   HEAP8[$0 + 45 | 0] = $1 >>> 8;
   HEAP8[$6 + 26 | 0] = 1;
  }
  $0 = HEAP32[$6 + 44 >> 2];
  if (HEAP32[HEAP32[$6 + 36 >> 2] >> 2] < (HEAPU8[$0 + 42 | 0] | HEAPU8[$0 + 43 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$6 + 44 >> 2];
   $1 = HEAP32[HEAP32[$6 + 36 >> 2] >> 2];
   HEAP8[$0 + 42 | 0] = $1;
   HEAP8[$0 + 43 | 0] = $1 >>> 8;
   HEAP8[$6 + 26 | 0] = 1;
  }
  $0 = HEAP32[$6 + 44 >> 2];
  if (HEAP32[HEAP32[$6 + 28 >> 2] >> 2] > (HEAPU8[$0 + 46 | 0] | HEAPU8[$0 + 47 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$6 + 44 >> 2];
   $1 = HEAP32[HEAP32[$6 + 28 >> 2] >> 2];
   HEAP8[$0 + 46 | 0] = $1;
   HEAP8[$0 + 47 | 0] = $1 >>> 8;
   HEAP8[$6 + 26 | 0] = 1;
  }
  __stack_pointer = $6 + 48 | 0;
  return HEAP8[$6 + 26 | 0] & 1;
 }
 
 function graphicsSetModified($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  HEAP32[$5 + 28 >> 2] = $0;
  HEAP32[$5 + 24 >> 2] = $1;
  HEAP32[$5 + 20 >> 2] = $2;
  HEAP32[$5 + 16 >> 2] = $3;
  HEAP32[$5 + 12 >> 2] = $4;
  $0 = HEAP32[$5 + 28 >> 2];
  if (HEAP32[$5 + 24 >> 2] < (HEAPU8[$0 + 40 | 0] | HEAPU8[$0 + 41 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$5 + 28 >> 2];
   $1 = HEAP32[$5 + 24 >> 2];
   HEAP8[$0 + 40 | 0] = $1;
   HEAP8[$0 + 41 | 0] = $1 >>> 8;
  }
  $0 = HEAP32[$5 + 28 >> 2];
  if (HEAP32[$5 + 16 >> 2] > (HEAPU8[$0 + 44 | 0] | HEAPU8[$0 + 45 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$5 + 28 >> 2];
   $1 = HEAP32[$5 + 16 >> 2];
   HEAP8[$0 + 44 | 0] = $1;
   HEAP8[$0 + 45 | 0] = $1 >>> 8;
  }
  $0 = HEAP32[$5 + 28 >> 2];
  if (HEAP32[$5 + 20 >> 2] < (HEAPU8[$0 + 42 | 0] | HEAPU8[$0 + 43 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$5 + 28 >> 2];
   $1 = HEAP32[$5 + 20 >> 2];
   HEAP8[$0 + 42 | 0] = $1;
   HEAP8[$0 + 43 | 0] = $1 >>> 8;
  }
  $0 = HEAP32[$5 + 28 >> 2];
  if (HEAP32[$5 + 12 >> 2] > (HEAPU8[$0 + 46 | 0] | HEAPU8[$0 + 47 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$5 + 28 >> 2];
   $1 = HEAP32[$5 + 12 >> 2];
   HEAP8[$0 + 46 | 0] = $1;
   HEAP8[$0 + 47 | 0] = $1 >>> 8;
  }
 }
 
 function graphicsGetSetPixelFn($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  $0 = HEAP32[$1 + 8 >> 2];
  block : {
   if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 112) {
    HEAP32[$1 + 12 >> 2] = 577;
    break block;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP32[$1 + 12 >> 2] = HEAPU8[$0 + 52 | 0] | HEAPU8[$0 + 53 | 0] << 8 | (HEAPU8[$0 + 54 | 0] << 16 | HEAPU8[$0 + 55 | 0] << 24);
  }
  return HEAP32[$1 + 12 >> 2];
 }
 
 function graphicsSetPixel($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
  graphicsToDeviceCoordinates(HEAP32[$4 + 12 >> 2], $4 + 8 | 0, $4 + 4 | 0);
  graphicsSetPixelDevice(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function graphicsGetSetPixelUnclippedFn($0, $1, $2, $3, $4, $5) {
  var $6 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 24 >> 2] = $0;
  HEAP32[$6 + 20 >> 2] = $1;
  HEAP32[$6 + 16 >> 2] = $2;
  HEAP32[$6 + 12 >> 2] = $3;
  HEAP32[$6 + 8 >> 2] = $4;
  HEAP8[$6 + 7 | 0] = $5;
  block1 : {
   block : {
    $0 = HEAP32[$6 + 24 >> 2];
    if (!((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 112)) {
     if (!(graphicsSetModifiedAndClip(HEAP32[$6 + 24 >> 2], $6 + 20 | 0, $6 + 16 | 0, $6 + 12 | 0, $6 + 8 | 0, HEAP8[$6 + 7 | 0] & 1) & 1)) {
      break block
     }
    }
    HEAP32[$6 + 28 >> 2] = 577;
    break block1;
   }
   $0 = HEAP32[$6 + 24 >> 2];
   HEAP32[$6 + 28 >> 2] = HEAPU8[$0 + 52 | 0] | HEAPU8[$0 + 53 | 0] << 8 | (HEAPU8[$0 + 54 | 0] << 16 | HEAPU8[$0 + 55 | 0] << 24);
  }
  __stack_pointer = $6 + 32 | 0;
  return HEAP32[$6 + 28 >> 2];
 }
 
 function graphicsBlendColorRGB565($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 48 | 0;
  HEAP16[$3 + 46 >> 1] = $0;
  HEAP16[$3 + 44 >> 1] = $1;
  HEAP32[$3 + 40 >> 2] = $2;
  HEAP32[$3 + 36 >> 2] = HEAPU16[$3 + 44 >> 1] >>> 11;
  HEAP32[$3 + 32 >> 2] = HEAPU16[$3 + 44 >> 1] >>> 5 & 63;
  HEAP32[$3 + 28 >> 2] = HEAPU16[$3 + 44 >> 1] & 31;
  HEAP32[$3 + 24 >> 2] = HEAPU16[$3 + 46 >> 1] >>> 11;
  HEAP32[$3 + 20 >> 2] = HEAPU16[$3 + 46 >> 1] >>> 5 & 63;
  HEAP32[$3 + 16 >> 2] = HEAPU16[$3 + 46 >> 1] & 31;
  HEAP32[$3 + 12 >> 2] = Math_imul(HEAP32[$3 + 36 >> 2], 256 - HEAP32[$3 + 40 >> 2] | 0) + Math_imul(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 40 >> 2]) >>> 8;
  HEAP32[$3 + 8 >> 2] = Math_imul(HEAP32[$3 + 32 >> 2], 256 - HEAP32[$3 + 40 >> 2] | 0) + Math_imul(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 40 >> 2]) >>> 8;
  HEAP32[$3 + 4 >> 2] = Math_imul(HEAP32[$3 + 28 >> 2], 256 - HEAP32[$3 + 40 >> 2] | 0) + Math_imul(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 40 >> 2]) >>> 8;
  return (HEAP32[$3 + 4 >> 2] | HEAP32[$3 + 8 >> 2] << 5 | HEAP32[$3 + 12 >> 2] << 11) & 65535;
 }
 
 function graphicsBlendColor($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 80 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 72 >> 2] = $0;
  HEAP32[$4 + 68 >> 2] = $1;
  HEAP32[$4 + 64 >> 2] = $2;
  HEAP32[$4 + 60 >> 2] = $3;
  if (HEAP32[$4 + 60 >> 2] > 0) {
   $0 = HEAP32[$4 + 60 >> 2]
  } else {
   $0 = 0
  }
  HEAP32[$4 + 56 >> 2] = $0;
  if (HEAPU32[$4 + 56 >> 2] > 256) {
   HEAP32[$4 + 56 >> 2] = 256
  }
  block3 : {
   if (!(!(HEAPU8[HEAP32[$4 + 72 >> 2] + 16 | 0] == 2 | HEAPU8[HEAP32[$4 + 72 >> 2] + 16 | 0] == 4) & HEAPU8[HEAP32[$4 + 72 >> 2] + 16 | 0] != 8)) {
    HEAP32[$4 + 76 >> 2] = (Math_imul(HEAP32[$4 + 64 >> 2], 256 - HEAP32[$4 + 56 >> 2] | 0) + Math_imul(HEAP32[$4 + 68 >> 2], HEAP32[$4 + 56 >> 2]) | 0) + 127 >>> 8;
    break block3;
   }
   if (HEAPU8[HEAP32[$4 + 72 >> 2] + 16 | 0] == 16) {
    HEAP32[$4 + 76 >> 2] = graphicsBlendColorRGB565(HEAP32[$4 + 68 >> 2] & 65535, HEAP32[$4 + 64 >> 2] & 65535, HEAP32[$4 + 60 >> 2]) & 65535;
    break block3;
   }
   if (HEAPU8[HEAP32[$4 + 72 >> 2] + 16 | 0] == 24) {
    HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 64 >> 2];
    HEAP32[$4 + 48 >> 2] = HEAP32[$4 + 52 >> 2] >>> 16 & 255;
    HEAP32[$4 + 44 >> 2] = HEAP32[$4 + 52 >> 2] >>> 8 & 255;
    HEAP32[$4 + 40 >> 2] = HEAP32[$4 + 52 >> 2] & 255;
    HEAP32[$4 + 36 >> 2] = HEAP32[$4 + 68 >> 2];
    HEAP32[$4 + 32 >> 2] = HEAP32[$4 + 36 >> 2] >>> 16 & 255;
    HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 36 >> 2] >>> 8 & 255;
    HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 36 >> 2] & 255;
    HEAP32[$4 + 20 >> 2] = Math_imul(HEAP32[$4 + 48 >> 2], 256 - HEAP32[$4 + 56 >> 2] | 0) + Math_imul(HEAP32[$4 + 32 >> 2], HEAP32[$4 + 56 >> 2]) >>> 8;
    HEAP32[$4 + 16 >> 2] = Math_imul(HEAP32[$4 + 44 >> 2], 256 - HEAP32[$4 + 56 >> 2] | 0) + Math_imul(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 56 >> 2]) >>> 8;
    HEAP32[$4 + 12 >> 2] = Math_imul(HEAP32[$4 + 40 >> 2], 256 - HEAP32[$4 + 56 >> 2] | 0) + Math_imul(HEAP32[$4 + 24 >> 2], HEAP32[$4 + 56 >> 2]) >>> 8;
    HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 12 >> 2] | HEAP32[$4 + 16 >> 2] << 8 | HEAP32[$4 + 20 >> 2] << 16;
    break block3;
   }
   if (HEAPU32[$4 + 56 >> 2] >= 128) {
    $0 = HEAP32[$4 + 68 >> 2]
   } else {
    $0 = HEAP32[$4 + 64 >> 2]
   }
   HEAP32[$4 + 76 >> 2] = $0;
  }
  __stack_pointer = $4 + 80 | 0;
  return HEAP32[$4 + 76 >> 2];
 }
 
 function graphicsBlendGfxColor($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $0 = HEAP32[$2 + 12 >> 2];
  $1 = HEAP32[$2 + 12 >> 2];
  $0 = graphicsBlendColor(HEAP32[$2 + 12 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24), HEAPU8[$1 + 21 | 0] | HEAPU8[$1 + 22 | 0] << 8 | (HEAPU8[$1 + 23 | 0] << 16 | HEAPU8[$1 + 24 | 0] << 24), HEAP32[$2 + 8 >> 2]);
  __stack_pointer = $2 + 16 | 0;
  return $0;
 }
 
 function graphicsFillRectDevice($0, $1, $2, $3, $4, $5) {
  var $6 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 28 >> 2] = $0;
  HEAP32[$6 + 24 >> 2] = $1;
  HEAP32[$6 + 20 >> 2] = $2;
  HEAP32[$6 + 16 >> 2] = $3;
  HEAP32[$6 + 12 >> 2] = $4;
  HEAP32[$6 + 8 >> 2] = $5;
  if (HEAP32[$6 + 24 >> 2] > HEAP32[$6 + 16 >> 2]) {
   HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 24 >> 2];
   HEAP32[$6 + 24 >> 2] = HEAP32[$6 + 16 >> 2];
   HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 4 >> 2];
  }
  if (HEAP32[$6 + 20 >> 2] > HEAP32[$6 + 12 >> 2]) {
   HEAP32[$6 >> 2] = HEAP32[$6 + 20 >> 2];
   HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 12 >> 2];
   HEAP32[$6 + 12 >> 2] = HEAP32[$6 >> 2];
  }
  $0 = HEAP32[$6 + 28 >> 2];
  if (HEAP32[$6 + 24 >> 2] < (HEAPU8[$0 + 32 | 0] | HEAPU8[$0 + 33 | 0] << 8)) {
   $0 = HEAP32[$6 + 28 >> 2];
   HEAP32[$6 + 24 >> 2] = HEAPU8[$0 + 32 | 0] | HEAPU8[$0 + 33 | 0] << 8;
  }
  $0 = HEAP32[$6 + 28 >> 2];
  if (HEAP32[$6 + 20 >> 2] < (HEAPU8[$0 + 34 | 0] | HEAPU8[$0 + 35 | 0] << 8)) {
   $0 = HEAP32[$6 + 28 >> 2];
   HEAP32[$6 + 20 >> 2] = HEAPU8[$0 + 34 | 0] | HEAPU8[$0 + 35 | 0] << 8;
  }
  $0 = HEAP32[$6 + 28 >> 2];
  if (HEAP32[$6 + 16 >> 2] > (HEAPU8[$0 + 36 | 0] | HEAPU8[$0 + 37 | 0] << 8)) {
   $0 = HEAP32[$6 + 28 >> 2];
   HEAP32[$6 + 16 >> 2] = HEAPU8[$0 + 36 | 0] | HEAPU8[$0 + 37 | 0] << 8;
  }
  $0 = HEAP32[$6 + 28 >> 2];
  if (HEAP32[$6 + 12 >> 2] > (HEAPU8[$0 + 38 | 0] | HEAPU8[$0 + 39 | 0] << 8)) {
   $0 = HEAP32[$6 + 28 >> 2];
   HEAP32[$6 + 12 >> 2] = HEAPU8[$0 + 38 | 0] | HEAPU8[$0 + 39 | 0] << 8;
  }
  block : {
   if (HEAP32[$6 + 16 >> 2] < HEAP32[$6 + 24 >> 2] | HEAP32[$6 + 12 >> 2] < HEAP32[$6 + 20 >> 2]) {
    break block
   }
   $0 = HEAP32[$6 + 28 >> 2];
   if (HEAP32[$6 + 24 >> 2] < (HEAPU8[$0 + 40 | 0] | HEAPU8[$0 + 41 | 0] << 8) << 16 >> 16) {
    $0 = HEAP32[$6 + 28 >> 2];
    $1 = HEAP32[$6 + 24 >> 2];
    HEAP8[$0 + 40 | 0] = $1;
    HEAP8[$0 + 41 | 0] = $1 >>> 8;
   }
   $0 = HEAP32[$6 + 28 >> 2];
   if (HEAP32[$6 + 16 >> 2] > (HEAPU8[$0 + 44 | 0] | HEAPU8[$0 + 45 | 0] << 8) << 16 >> 16) {
    $0 = HEAP32[$6 + 28 >> 2];
    $1 = HEAP32[$6 + 16 >> 2];
    HEAP8[$0 + 44 | 0] = $1;
    HEAP8[$0 + 45 | 0] = $1 >>> 8;
   }
   $0 = HEAP32[$6 + 28 >> 2];
   if (HEAP32[$6 + 20 >> 2] < (HEAPU8[$0 + 42 | 0] | HEAPU8[$0 + 43 | 0] << 8) << 16 >> 16) {
    $0 = HEAP32[$6 + 28 >> 2];
    $1 = HEAP32[$6 + 20 >> 2];
    HEAP8[$0 + 42 | 0] = $1;
    HEAP8[$0 + 43 | 0] = $1 >>> 8;
   }
   $0 = HEAP32[$6 + 28 >> 2];
   if (HEAP32[$6 + 12 >> 2] > (HEAPU8[$0 + 46 | 0] | HEAPU8[$0 + 47 | 0] << 8) << 16 >> 16) {
    $0 = HEAP32[$6 + 28 >> 2];
    $1 = HEAP32[$6 + 12 >> 2];
    HEAP8[$0 + 46 | 0] = $1;
    HEAP8[$0 + 47 | 0] = $1 >>> 8;
   }
   if (!(HEAP32[$6 + 24 >> 2] != HEAP32[$6 + 16 >> 2] | HEAP32[$6 + 20 >> 2] != HEAP32[$6 + 12 >> 2])) {
    $0 = HEAP32[$6 + 28 >> 2];
    FUNCTION_TABLE[HEAPU8[$0 + 52 | 0] | HEAPU8[$0 + 53 | 0] << 8 | (HEAPU8[$0 + 54 | 0] << 16 | HEAPU8[$0 + 55 | 0] << 24)](HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 8 >> 2]);
    break block;
   }
   $0 = HEAP32[$6 + 28 >> 2];
   FUNCTION_TABLE[HEAPU8[$0 + 56 | 0] | HEAPU8[$0 + 57 | 0] << 8 | (HEAPU8[$0 + 58 | 0] << 16 | HEAPU8[$0 + 59 | 0] << 24)](HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2], HEAP32[$6 + 8 >> 2]);
  }
  __stack_pointer = $6 + 32 | 0;
 }
 
 function graphicsGetPixel($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  graphicsToDeviceCoordinates(HEAP32[$3 + 12 >> 2], $3 + 8 | 0, $3 + 4 | 0);
  $0 = graphicsGetPixelDevice(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 16 | 0;
  return $0;
 }
 
 function graphicsGetPixelDevice($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 8 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 >> 2] = $2;
  block2 : {
   block1 : {
    block : {
     if ((HEAP32[$3 + 4 >> 2] | HEAP32[$3 >> 2]) < 0) {
      break block
     }
     $0 = HEAP32[$3 + 8 >> 2];
     if (HEAP32[$3 + 4 >> 2] >= (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8)) {
      break block
     }
     $0 = HEAP32[$3 + 8 >> 2];
     if (HEAP32[$3 >> 2] < (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8)) {
      break block1
     }
    }
    HEAP32[$3 + 12 >> 2] = 0;
    break block2;
   }
   $0 = HEAP32[$3 + 8 >> 2];
   HEAP32[$3 + 12 >> 2] = FUNCTION_TABLE[HEAPU8[$0 + 60 | 0] | HEAPU8[$0 + 61 | 0] << 8 | (HEAPU8[$0 + 62 | 0] << 16 | HEAPU8[$0 + 63 | 0] << 24)](HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], HEAP32[$3 >> 2]);
  }
  __stack_pointer = $3 + 16 | 0;
  return HEAP32[$3 + 12 >> 2];
 }
 
 function graphicsFillRect($0, $1, $2, $3, $4, $5) {
  var $6 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 28 >> 2] = $0;
  HEAP32[$6 + 24 >> 2] = $1;
  HEAP32[$6 + 20 >> 2] = $2;
  HEAP32[$6 + 16 >> 2] = $3;
  HEAP32[$6 + 12 >> 2] = $4;
  HEAP32[$6 + 8 >> 2] = $5;
  graphicsToDeviceCoordinates(HEAP32[$6 + 28 >> 2], $6 + 24 | 0, $6 + 20 | 0);
  graphicsToDeviceCoordinates(HEAP32[$6 + 28 >> 2], $6 + 16 | 0, $6 + 12 | 0);
  graphicsFillRectDevice(HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2], HEAP32[$6 + 8 >> 2]);
  __stack_pointer = $6 + 32 | 0;
 }
 
 function graphicsClear($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $2 = HEAP32[$1 + 12 >> 2];
  $3 = HEAP32[$1 + 12 >> 2];
  $0 = HEAP32[$1 + 12 >> 2];
  graphicsFillRectDevice(HEAP32[$1 + 12 >> 2], 0, 0, (HEAPU8[$2 + 12 | 0] | HEAPU8[$2 + 13 | 0] << 8) - 1 | 0, (HEAPU8[$3 + 14 | 0] | HEAPU8[$3 + 15 | 0] << 8) - 1 | 0, HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
  __stack_pointer = $1 + 16 | 0;
 }
 
 function graphicsDrawRect($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 28 >> 2] = $0;
  HEAP32[$5 + 24 >> 2] = $1;
  HEAP32[$5 + 20 >> 2] = $2;
  HEAP32[$5 + 16 >> 2] = $3;
  HEAP32[$5 + 12 >> 2] = $4;
  graphicsToDeviceCoordinates(HEAP32[$5 + 28 >> 2], $5 + 24 | 0, $5 + 20 | 0);
  graphicsToDeviceCoordinates(HEAP32[$5 + 28 >> 2], $5 + 16 | 0, $5 + 12 | 0);
  $0 = HEAP32[$5 + 28 >> 2];
  graphicsFillRectDevice(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 20 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
  $0 = HEAP32[$5 + 28 >> 2];
  graphicsFillRectDevice(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
  $0 = HEAP32[$5 + 28 >> 2];
  graphicsFillRectDevice(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 12 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
  $0 = HEAP32[$5 + 28 >> 2];
  graphicsFillRectDevice(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 12 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
  __stack_pointer = $5 + 32 | 0;
 }
 
 function graphicsDrawEllipse($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 80 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 76 >> 2] = $0;
  HEAP32[$5 + 72 >> 2] = $1;
  HEAP32[$5 + 68 >> 2] = $2;
  HEAP32[$5 + 64 >> 2] = $3;
  HEAP32[$5 + 60 >> 2] = $4;
  graphicsToDeviceCoordinates(HEAP32[$5 + 76 >> 2], $5 + 72 | 0, $5 + 68 | 0);
  graphicsToDeviceCoordinates(HEAP32[$5 + 76 >> 2], $5 - -64 | 0, $5 + 60 | 0);
  if (HEAP32[$5 + 72 >> 2] > HEAP32[$5 + 64 >> 2]) {
   HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 72 >> 2];
   HEAP32[$5 + 72 >> 2] = HEAP32[$5 + 64 >> 2];
   HEAP32[$5 + 64 >> 2] = HEAP32[$5 + 56 >> 2];
  }
  if (HEAP32[$5 + 68 >> 2] > HEAP32[$5 + 60 >> 2]) {
   HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 68 >> 2];
   HEAP32[$5 + 68 >> 2] = HEAP32[$5 + 60 >> 2];
   HEAP32[$5 + 60 >> 2] = HEAP32[$5 + 52 >> 2];
  }
  HEAP32[$5 + 48 >> 2] = (HEAP32[$5 + 72 >> 2] + HEAP32[$5 + 64 >> 2] | 0) / 2;
  HEAP32[$5 + 44 >> 2] = (HEAP32[$5 + 68 >> 2] + HEAP32[$5 + 60 >> 2] | 0) / 2;
  HEAP32[$5 + 40 >> 2] = (HEAP32[$5 + 64 >> 2] - HEAP32[$5 + 72 >> 2] | 0) / 2;
  HEAP32[$5 + 36 >> 2] = (HEAP32[$5 + 60 >> 2] - HEAP32[$5 + 68 >> 2] | 0) / 2;
  HEAP32[$5 + 32 >> 2] = 0;
  HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 36 >> 2];
  HEAP32[$5 + 24 >> 2] = Math_imul(HEAP32[$5 + 40 >> 2], HEAP32[$5 + 40 >> 2]);
  HEAP32[$5 + 20 >> 2] = Math_imul(HEAP32[$5 + 36 >> 2], HEAP32[$5 + 36 >> 2]);
  HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 20 >> 2] - Math_imul(HEAP32[$5 + 24 >> 2], (HEAP32[$5 + 36 >> 2] << 1) - 1 | 0);
  HEAP8[$5 + 11 | 0] = 0;
  while (1) {
   HEAP8[$5 + 11 | 0] = 0;
   $0 = HEAP32[$5 + 76 >> 2];
   graphicsSetPixelDevice(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 48 >> 2] + HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2] + HEAP32[$5 + 28 >> 2] | 0, HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
   $0 = HEAP32[$5 + 76 >> 2];
   graphicsSetPixelDevice(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2] + HEAP32[$5 + 28 >> 2] | 0, HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
   $0 = HEAP32[$5 + 76 >> 2];
   graphicsSetPixelDevice(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 48 >> 2] + HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2] - HEAP32[$5 + 28 >> 2] | 0, HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
   $0 = HEAP32[$5 + 76 >> 2];
   graphicsSetPixelDevice(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2] - HEAP32[$5 + 28 >> 2] | 0, HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
   HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 16 >> 2] << 1;
   if (HEAP32[$5 + 12 >> 2] < (Math_imul(HEAP32[$5 + 20 >> 2], (HEAP32[$5 + 32 >> 2] << 1) + 1 | 0) | 0)) {
    HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 32 >> 2] + 1;
    HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + Math_imul(HEAP32[$5 + 20 >> 2], (HEAP32[$5 + 32 >> 2] << 1) + 1 | 0);
    HEAP8[$5 + 11 | 0] = 1;
   }
   if (HEAP32[$5 + 12 >> 2] > (Math_imul(HEAP32[$5 + 24 >> 2], 1 - (HEAP32[$5 + 28 >> 2] << 1) | 0) | 0)) {
    HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 28 >> 2] - 1;
    HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] - Math_imul(HEAP32[$5 + 24 >> 2], (HEAP32[$5 + 28 >> 2] << 1) - 1 | 0);
    HEAP8[$5 + 11 | 0] = 1;
   }
   $0 = 0;
   $0 = HEAP8[$5 + 11 | 0] & 1 ? HEAP32[$5 + 28 >> 2] >= 0 : $0;
   if ($0) {
    continue
   }
   break;
  };
  while (1) {
   $0 = HEAP32[$5 + 32 >> 2];
   HEAP32[$5 + 32 >> 2] = $0 + 1;
   if (($0 | 0) < HEAP32[$5 + 40 >> 2]) {
    $0 = HEAP32[$5 + 76 >> 2];
    graphicsSetPixelDevice(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 48 >> 2] + HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
    $0 = HEAP32[$5 + 76 >> 2];
    graphicsSetPixelDevice(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
    continue;
   }
   break;
  };
  __stack_pointer = $5 + 80 | 0;
 }
 
 function graphicsFillEllipse($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 80 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 76 >> 2] = $0;
  HEAP32[$5 + 72 >> 2] = $1;
  HEAP32[$5 + 68 >> 2] = $2;
  HEAP32[$5 + 64 >> 2] = $3;
  HEAP32[$5 + 60 >> 2] = $4;
  graphicsToDeviceCoordinates(HEAP32[$5 + 76 >> 2], $5 + 72 | 0, $5 + 68 | 0);
  graphicsToDeviceCoordinates(HEAP32[$5 + 76 >> 2], $5 - -64 | 0, $5 + 60 | 0);
  if (HEAP32[$5 + 72 >> 2] > HEAP32[$5 + 64 >> 2]) {
   HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 72 >> 2];
   HEAP32[$5 + 72 >> 2] = HEAP32[$5 + 64 >> 2];
   HEAP32[$5 + 64 >> 2] = HEAP32[$5 + 56 >> 2];
  }
  if (HEAP32[$5 + 68 >> 2] > HEAP32[$5 + 60 >> 2]) {
   HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 68 >> 2];
   HEAP32[$5 + 68 >> 2] = HEAP32[$5 + 60 >> 2];
   HEAP32[$5 + 60 >> 2] = HEAP32[$5 + 52 >> 2];
  }
  HEAP32[$5 + 48 >> 2] = (HEAP32[$5 + 72 >> 2] + HEAP32[$5 + 64 >> 2] | 0) / 2;
  HEAP32[$5 + 44 >> 2] = (HEAP32[$5 + 68 >> 2] + HEAP32[$5 + 60 >> 2] | 0) / 2;
  HEAP32[$5 + 40 >> 2] = (HEAP32[$5 + 64 >> 2] - HEAP32[$5 + 72 >> 2] | 0) / 2;
  HEAP32[$5 + 36 >> 2] = (HEAP32[$5 + 60 >> 2] - HEAP32[$5 + 68 >> 2] | 0) / 2;
  HEAP32[$5 + 32 >> 2] = 0;
  HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 36 >> 2];
  HEAP32[$5 + 24 >> 2] = Math_imul(HEAP32[$5 + 40 >> 2], HEAP32[$5 + 40 >> 2]);
  HEAP32[$5 + 20 >> 2] = Math_imul(HEAP32[$5 + 36 >> 2], HEAP32[$5 + 36 >> 2]);
  HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 20 >> 2] - Math_imul(HEAP32[$5 + 24 >> 2], (HEAP32[$5 + 36 >> 2] << 1) - 1 | 0);
  HEAP8[$5 + 11 | 0] = 0;
  while (1) {
   HEAP8[$5 + 11 | 0] = 0;
   HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 16 >> 2] << 1;
   if (HEAP32[$5 + 12 >> 2] < (Math_imul(HEAP32[$5 + 20 >> 2], (HEAP32[$5 + 32 >> 2] << 1) + 1 | 0) | 0)) {
    HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 32 >> 2] + 1;
    HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + Math_imul(HEAP32[$5 + 20 >> 2], (HEAP32[$5 + 32 >> 2] << 1) + 1 | 0);
    HEAP8[$5 + 11 | 0] = 1;
   }
   if (HEAP32[$5 + 12 >> 2] > (Math_imul(HEAP32[$5 + 24 >> 2], 1 - (HEAP32[$5 + 28 >> 2] << 1) | 0) | 0)) {
    $0 = HEAP32[$5 + 76 >> 2];
    graphicsFillRectDevice(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 48 >> 2] + HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2] + HEAP32[$5 + 28 >> 2] | 0, HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2] + HEAP32[$5 + 28 >> 2] | 0, HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
    $0 = HEAP32[$5 + 76 >> 2];
    graphicsFillRectDevice(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 48 >> 2] + HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2] - HEAP32[$5 + 28 >> 2] | 0, HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2] - HEAP32[$5 + 28 >> 2] | 0, HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
    HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 28 >> 2] - 1;
    HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] - Math_imul(HEAP32[$5 + 24 >> 2], (HEAP32[$5 + 28 >> 2] << 1) - 1 | 0);
    HEAP8[$5 + 11 | 0] = 1;
   }
   $0 = 0;
   $0 = HEAP8[$5 + 11 | 0] & 1 ? HEAP32[$5 + 28 >> 2] >= 0 : $0;
   if ($0) {
    continue
   }
   break;
  };
  while (1) {
   $0 = HEAP32[$5 + 32 >> 2];
   HEAP32[$5 + 32 >> 2] = $0 + 1;
   if (($0 | 0) < HEAP32[$5 + 40 >> 2]) {
    $0 = HEAP32[$5 + 76 >> 2];
    graphicsFillRectDevice(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 48 >> 2] + HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2], HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
    continue;
   }
   break;
  };
  __stack_pointer = $5 + 80 | 0;
 }
 
 function graphicsDrawLine($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer + -64 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 60 >> 2] = $0;
  HEAP32[$5 + 56 >> 2] = $1;
  HEAP32[$5 + 52 >> 2] = $2;
  HEAP32[$5 + 48 >> 2] = $3;
  HEAP32[$5 + 44 >> 2] = $4;
  graphicsToDeviceCoordinates(HEAP32[$5 + 60 >> 2], $5 + 56 | 0, $5 + 52 | 0);
  graphicsToDeviceCoordinates(HEAP32[$5 + 60 >> 2], $5 + 48 | 0, $5 + 44 | 0);
  HEAP32[$5 + 40 >> 2] = HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 56 >> 2];
  HEAP32[$5 + 36 >> 2] = HEAP32[$5 + 44 >> 2] - HEAP32[$5 + 52 >> 2];
  if (HEAP32[$5 + 40 >> 2] < 0) {
   HEAP32[$5 + 40 >> 2] = 0 - HEAP32[$5 + 40 >> 2]
  }
  if (HEAP32[$5 + 36 >> 2] < 0) {
   HEAP32[$5 + 36 >> 2] = 0 - HEAP32[$5 + 36 >> 2]
  }
  block1 : {
   if (HEAP32[$5 + 40 >> 2] > HEAP32[$5 + 36 >> 2]) {
    block : {
     if (HEAP32[$5 + 56 >> 2] > HEAP32[$5 + 48 >> 2]) {
      HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 56 >> 2];
      HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 48 >> 2];
      HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 32 >> 2];
      HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 52 >> 2];
      HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 44 >> 2];
      HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 32 >> 2];
      break block;
     }
     if (!HEAP32[$5 + 40 >> 2]) {
      HEAP32[$5 + 40 >> 2] = 1
     }
    }
    HEAP32[$5 + 28 >> 2] = (HEAP32[$5 + 52 >> 2] << 8) + 128;
    HEAP32[$5 + 24 >> 2] = (HEAP32[$5 + 44 >> 2] - HEAP32[$5 + 52 >> 2] << 8) / HEAP32[$5 + 40 >> 2];
    HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 56 >> 2];
    while (1) {
     if (HEAP32[$5 + 20 >> 2] <= HEAP32[$5 + 48 >> 2]) {
      $0 = HEAP32[$5 + 60 >> 2];
      graphicsSetPixelDevice(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 28 >> 2] >> 8, HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
      HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 24 >> 2] + HEAP32[$5 + 28 >> 2];
      HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + 1;
      continue;
     }
     break;
    };
    break block1;
   }
   block2 : {
    if (HEAP32[$5 + 52 >> 2] > HEAP32[$5 + 44 >> 2]) {
     HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 56 >> 2];
     HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 48 >> 2];
     HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 16 >> 2];
     HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 52 >> 2];
     HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 44 >> 2];
     HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 16 >> 2];
     break block2;
    }
    if (!HEAP32[$5 + 36 >> 2]) {
     HEAP32[$5 + 36 >> 2] = 1
    }
   }
   HEAP32[$5 + 12 >> 2] = (HEAP32[$5 + 56 >> 2] << 8) + 128;
   HEAP32[$5 + 8 >> 2] = (HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 56 >> 2] << 8) / HEAP32[$5 + 36 >> 2];
   HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 52 >> 2];
   while (1) {
    if (HEAP32[$5 + 4 >> 2] <= HEAP32[$5 + 44 >> 2]) {
     $0 = HEAP32[$5 + 60 >> 2];
     graphicsSetPixelDevice(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 12 >> 2] >> 8, HEAP32[$5 + 4 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
     HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 8 >> 2] + HEAP32[$5 + 12 >> 2];
     HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] + 1;
     continue;
    }
    break;
   };
  }
  __stack_pointer = $5 - -64 | 0;
 }
 
 function graphicsDrawLineAA($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 112 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 108 >> 2] = $0;
  HEAP32[$5 + 104 >> 2] = $1;
  HEAP32[$5 + 100 >> 2] = $2;
  HEAP32[$5 + 96 >> 2] = $3;
  HEAP32[$5 + 92 >> 2] = $4;
  graphicsToDeviceCoordinates16x(HEAP32[$5 + 108 >> 2], $5 + 104 | 0, $5 + 100 | 0);
  graphicsToDeviceCoordinates16x(HEAP32[$5 + 108 >> 2], $5 + 96 | 0, $5 + 92 | 0);
  HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 104 >> 2] << 4;
  HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 100 >> 2] << 4;
  HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 96 >> 2] << 4;
  HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 92 >> 2] << 4;
  $0 = HEAP32[$5 + 76 >> 2] - HEAP32[$5 + 84 >> 2] | 0;
  $1 = $0 >> 31;
  $2 = HEAP32[$5 + 80 >> 2] - HEAP32[$5 + 88 >> 2] | 0;
  $3 = $2 >> 31;
  HEAP8[$5 + 75 | 0] = (($1 ^ $0) - $1 | 0) > (($3 ^ $2) - $3 | 0);
  if (HEAP8[$5 + 75 | 0] & 1) {
   HEAP32[$5 + 68 >> 2] = HEAP32[$5 + 88 >> 2];
   HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 84 >> 2];
   HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 68 >> 2];
   HEAP32[$5 + 68 >> 2] = HEAP32[$5 + 80 >> 2];
   HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 76 >> 2];
   HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 68 >> 2];
  }
  if (HEAP32[$5 + 88 >> 2] > HEAP32[$5 + 80 >> 2]) {
   HEAP32[$5 + 64 >> 2] = HEAP32[$5 + 88 >> 2];
   HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 80 >> 2];
   HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 64 >> 2];
   HEAP32[$5 + 64 >> 2] = HEAP32[$5 + 84 >> 2];
   HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 76 >> 2];
   HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 64 >> 2];
  }
  HEAP32[$5 + 60 >> 2] = HEAP32[$5 + 80 >> 2] - HEAP32[$5 + 88 >> 2];
  HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 76 >> 2] - HEAP32[$5 + 84 >> 2];
  if (HEAP32[$5 + 60 >> 2]) {
   $0 = (HEAP32[$5 + 56 >> 2] << 8) / HEAP32[$5 + 60 >> 2] | 0
  } else {
   $0 = 256
  }
  HEAP32[$5 + 52 >> 2] = $0;
  HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 88 >> 2] & -256;
  HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 84 >> 2] + (Math_imul(HEAP32[$5 + 52 >> 2], HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 88 >> 2] | 0) >> 8);
  HEAP32[$5 + 40 >> 2] = 255 - (HEAP32[$5 + 88 >> 2] & 255);
  HEAP32[$5 + 36 >> 2] = HEAP32[$5 + 48 >> 2] >> 8;
  HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 44 >> 2] >> 8;
  HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 44 >> 2] & 255;
  block1 : {
   if (HEAP8[$5 + 75 | 0] & 1) {
    graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 32 >> 2], HEAP32[$5 + 36 >> 2], Math_imul(HEAP32[$5 + 40 >> 2], 256 - HEAP32[$5 + 28 >> 2] | 0) >> 8);
    graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 32 >> 2] + 1 | 0, HEAP32[$5 + 36 >> 2], Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 40 >> 2]) >> 8);
    break block1;
   }
   graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 36 >> 2], HEAP32[$5 + 32 >> 2], Math_imul(HEAP32[$5 + 40 >> 2], 256 - HEAP32[$5 + 28 >> 2] | 0) >> 8);
   graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 36 >> 2], HEAP32[$5 + 32 >> 2] + 1 | 0, Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 40 >> 2]) >> 8);
  }
  HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 44 >> 2] + HEAP32[$5 + 52 >> 2];
  HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 80 >> 2] + 256 & -256;
  HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 76 >> 2] + (Math_imul(HEAP32[$5 + 52 >> 2], HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 80 >> 2] | 0) >> 8);
  HEAP32[$5 + 40 >> 2] = HEAP32[$5 + 80 >> 2] + 256 & 255;
  HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 48 >> 2] >> 8;
  HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 44 >> 2] >> 8;
  HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 44 >> 2] & 255;
  block2 : {
   if (HEAP8[$5 + 75 | 0] & 1) {
    graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 20 >> 2], Math_imul(HEAP32[$5 + 40 >> 2], 256 - HEAP32[$5 + 28 >> 2] | 0) >> 8);
    graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 16 >> 2] + 1 | 0, HEAP32[$5 + 20 >> 2], Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 40 >> 2]) >> 8);
    break block2;
   }
   graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], Math_imul(HEAP32[$5 + 40 >> 2], 256 - HEAP32[$5 + 28 >> 2] | 0) >> 8);
   graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2] + 1 | 0, Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 40 >> 2]) >> 8);
  }
  HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 36 >> 2] + 1;
  while (1) {
   if (HEAP32[$5 + 12 >> 2] < HEAP32[$5 + 20 >> 2]) {
    HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 24 >> 2] >> 8;
    HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 24 >> 2] & 255;
    block3 : {
     if (HEAP8[$5 + 75 | 0] & 1) {
      graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 8 >> 2], HEAP32[$5 + 12 >> 2], 256 - HEAP32[$5 + 28 >> 2] | 0);
      graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 8 >> 2] + 1 | 0, HEAP32[$5 + 12 >> 2], HEAP32[$5 + 28 >> 2]);
      break block3;
     }
     graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 12 >> 2], HEAP32[$5 + 8 >> 2], 256 - HEAP32[$5 + 28 >> 2] | 0);
     graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 12 >> 2], HEAP32[$5 + 8 >> 2] + 1 | 0, HEAP32[$5 + 28 >> 2]);
    }
    HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 52 >> 2] + HEAP32[$5 + 24 >> 2];
    HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 12 >> 2] + 1;
    continue;
   }
   break;
  };
  __stack_pointer = $5 + 112 | 0;
 }
 
 function graphicsSetPixelDeviceBlended($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  HEAP32[$4 + 12 >> 2] = graphicsGetPixelDevice(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2]);
  $0 = HEAP32[$4 + 28 >> 2];
  HEAP32[$4 + 8 >> 2] = graphicsBlendColor(HEAP32[$4 + 28 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24), HEAP32[$4 + 12 >> 2], HEAP32[$4 + 16 >> 2]);
  graphicsSetPixelDevice(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 8 >> 2]);
  __stack_pointer = $4 + 32 | 0;
 }
 
 function graphicsDrawCircleAA($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 44 >> 2] = $0;
  HEAP32[$4 + 40 >> 2] = $1;
  HEAP32[$4 + 36 >> 2] = $2;
  HEAP32[$4 + 32 >> 2] = $3;
  graphicsToDeviceCoordinates(HEAP32[$4 + 44 >> 2], $4 + 40 | 0, $4 + 36 | 0);
  HEAP32[$4 + 28 >> 2] = 0 - HEAP32[$4 + 32 >> 2];
  HEAP32[$4 + 24 >> 2] = 0;
  HEAP32[$4 + 20 >> 2] = 2 - (HEAP32[$4 + 32 >> 2] << 1);
  HEAP32[$4 + 32 >> 2] = 1 - HEAP32[$4 + 20 >> 2];
  while (1) {
   $0 = (HEAP32[$4 + 20 >> 2] - (HEAP32[$4 + 28 >> 2] + HEAP32[$4 + 24 >> 2] << 1) | 0) - 2 | 0;
   $1 = $0 >> 31;
   HEAP32[$4 + 16 >> 2] = 255 - ((Math_imul(($1 ^ $0) - $1 | 0, 255) | 0) / HEAP32[$4 + 32 >> 2] | 0);
   graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2] - HEAP32[$4 + 28 >> 2] | 0, HEAP32[$4 + 36 >> 2] + HEAP32[$4 + 24 >> 2] | 0, HEAP32[$4 + 16 >> 2]);
   graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2] - HEAP32[$4 + 24 >> 2] | 0, HEAP32[$4 + 36 >> 2] - HEAP32[$4 + 28 >> 2] | 0, HEAP32[$4 + 16 >> 2]);
   graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2] + HEAP32[$4 + 28 >> 2] | 0, HEAP32[$4 + 36 >> 2] - HEAP32[$4 + 24 >> 2] | 0, HEAP32[$4 + 16 >> 2]);
   graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2] + HEAP32[$4 + 24 >> 2] | 0, HEAP32[$4 + 36 >> 2] + HEAP32[$4 + 28 >> 2] | 0, HEAP32[$4 + 16 >> 2]);
   HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 20 >> 2];
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 28 >> 2];
   if ((HEAP32[$4 + 20 >> 2] + HEAP32[$4 + 24 >> 2] | 0) > 0) {
    HEAP32[$4 + 16 >> 2] = 255 - ((Math_imul((HEAP32[$4 + 20 >> 2] - (HEAP32[$4 + 28 >> 2] << 1) | 0) - 1 | 0, 255) | 0) / HEAP32[$4 + 32 >> 2] | 0);
    if (HEAP32[$4 + 16 >> 2] > 0) {
     graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2] - HEAP32[$4 + 28 >> 2] | 0, (HEAP32[$4 + 36 >> 2] + HEAP32[$4 + 24 >> 2] | 0) + 1 | 0, HEAP32[$4 + 16 >> 2]);
     graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], (HEAP32[$4 + 40 >> 2] - HEAP32[$4 + 24 >> 2] | 0) - 1 | 0, HEAP32[$4 + 36 >> 2] - HEAP32[$4 + 28 >> 2] | 0, HEAP32[$4 + 16 >> 2]);
     graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2] + HEAP32[$4 + 28 >> 2] | 0, (HEAP32[$4 + 36 >> 2] - HEAP32[$4 + 24 >> 2] | 0) - 1 | 0, HEAP32[$4 + 16 >> 2]);
     graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], (HEAP32[$4 + 40 >> 2] + HEAP32[$4 + 24 >> 2] | 0) + 1 | 0, HEAP32[$4 + 36 >> 2] + HEAP32[$4 + 28 >> 2] | 0, HEAP32[$4 + 16 >> 2]);
    }
    $0 = HEAP32[$4 + 28 >> 2] + 1 | 0;
    HEAP32[$4 + 28 >> 2] = $0;
    HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 20 >> 2] + (($0 << 1) + 1 | 0);
   }
   if ((HEAP32[$4 + 8 >> 2] + HEAP32[$4 + 12 >> 2] | 0) <= 0) {
    HEAP32[$4 + 16 >> 2] = 255 - ((Math_imul(((HEAP32[$4 + 24 >> 2] << 1) + 3 | 0) - HEAP32[$4 + 8 >> 2] | 0, 255) | 0) / HEAP32[$4 + 32 >> 2] | 0);
    if (HEAP32[$4 + 16 >> 2] > 0) {
     graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], (HEAP32[$4 + 40 >> 2] - HEAP32[$4 + 12 >> 2] | 0) - 1 | 0, HEAP32[$4 + 36 >> 2] + HEAP32[$4 + 24 >> 2] | 0, HEAP32[$4 + 16 >> 2]);
     graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2] - HEAP32[$4 + 24 >> 2] | 0, (HEAP32[$4 + 36 >> 2] - HEAP32[$4 + 12 >> 2] | 0) - 1 | 0, HEAP32[$4 + 16 >> 2]);
     graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], (HEAP32[$4 + 40 >> 2] + HEAP32[$4 + 12 >> 2] | 0) + 1 | 0, HEAP32[$4 + 36 >> 2] - HEAP32[$4 + 24 >> 2] | 0, HEAP32[$4 + 16 >> 2]);
     graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2] + HEAP32[$4 + 24 >> 2] | 0, (HEAP32[$4 + 36 >> 2] + HEAP32[$4 + 12 >> 2] | 0) + 1 | 0, HEAP32[$4 + 16 >> 2]);
    }
    $0 = HEAP32[$4 + 24 >> 2] + 1 | 0;
    HEAP32[$4 + 24 >> 2] = $0;
    HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 20 >> 2] + (($0 << 1) + 1 | 0);
   }
   if (HEAP32[$4 + 28 >> 2] < 0) {
    continue
   }
   break;
  };
  __stack_pointer = $4 + 48 | 0;
 }
 
 function graphicsFillPoly($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $4 = __stack_pointer - 96 | 0;
  $3 = $4;
  __stack_pointer = $3;
  HEAP32[$3 + 92 >> 2] = $0;
  HEAP32[$3 + 88 >> 2] = $1;
  HEAP32[$3 + 84 >> 2] = $2;
  HEAP32[$3 + 80 >> 2] = HEAP32[$3 + 84 >> 2];
  $0 = HEAP32[$3 + 92 >> 2];
  HEAP32[$3 + 64 >> 2] = (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8) - 1;
  HEAP32[$3 + 60 >> 2] = 0;
  HEAP32[$3 + 76 >> 2] = 0;
  while (1) {
   if (HEAP32[$3 + 76 >> 2] < HEAP32[$3 + 88 >> 2]) {
    HEAP32[$3 + 56 >> 2] = HEAP16[HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) >> 1] << 16 >> 16;
    HEAP32[$3 + 52 >> 2] = HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) | 0) + 2 >> 1] << 16 >> 16;
    graphicsToDeviceCoordinates16x(HEAP32[$3 + 92 >> 2], $3 + 56 | 0, $3 + 52 | 0);
    HEAP16[HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) >> 1] = HEAP32[$3 + 56 >> 2];
    HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) | 0) + 2 >> 1] = HEAP32[$3 + 52 >> 2];
    HEAP16[$3 + 50 >> 1] = HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) | 0) + 2 >> 1] << 16 >> 16 >> 4;
    if (HEAP32[$3 + 64 >> 2] > HEAP16[$3 + 50 >> 1] << 16 >> 16) {
     HEAP32[$3 + 64 >> 2] = HEAP16[$3 + 50 >> 1] << 16 >> 16
    }
    if (HEAP32[$3 + 60 >> 2] < HEAP16[$3 + 50 >> 1] << 16 >> 16) {
     HEAP32[$3 + 60 >> 2] = HEAP16[$3 + 50 >> 1] << 16 >> 16
    }
    HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
    continue;
   }
   break;
  };
  $0 = HEAP32[$3 + 92 >> 2];
  if (HEAP32[$3 + 64 >> 2] < (HEAPU8[$0 + 34 | 0] | HEAPU8[$0 + 35 | 0] << 8)) {
   $0 = HEAP32[$3 + 92 >> 2];
   HEAP32[$3 + 64 >> 2] = HEAPU8[$0 + 34 | 0] | HEAPU8[$0 + 35 | 0] << 8;
  }
  $0 = HEAP32[$3 + 92 >> 2];
  if (HEAP32[$3 + 60 >> 2] > (HEAPU8[$0 + 38 | 0] | HEAPU8[$0 + 39 | 0] << 8)) {
   $0 = HEAP32[$3 + 92 >> 2];
   HEAP32[$3 + 60 >> 2] = HEAPU8[$0 + 38 | 0] | HEAPU8[$0 + 39 | 0] << 8;
  }
  HEAP32[$3 + 44 >> 2] = 64;
  HEAP32[$3 + 68 >> 2] = HEAP32[$3 + 64 >> 2] << 4;
  while (1) {
   if (HEAP32[$3 + 68 >> 2] <= HEAP32[$3 + 60 >> 2] << 4) {
    HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 68 >> 2] >> 4;
    HEAP32[$3 + 36 >> 2] = $4;
    $4 = $4 - 128 | 0;
    __stack_pointer = $4;
    $0 = $4 + -64 | 0;
    __stack_pointer = $0;
    HEAP32[$3 + 32 >> 2] = 0;
    HEAP32[$3 + 72 >> 2] = HEAP32[$3 + 88 >> 2] - 1;
    HEAP32[$3 + 76 >> 2] = 0;
    while (1) {
     if (HEAP32[$3 + 76 >> 2] < HEAP32[$3 + 88 >> 2]) {
      block1 : {
       block : {
        if (HEAP32[$3 + 68 >> 2] >= HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) | 0) + 2 >> 1] << 16 >> 16) {
         if (HEAP32[$3 + 68 >> 2] < HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 72 >> 2] << 2) | 0) + 2 >> 1] << 16 >> 16) {
          break block
         }
        }
        if (HEAP32[$3 + 68 >> 2] < HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 72 >> 2] << 2) | 0) + 2 >> 1] << 16 >> 16 | HEAP32[$3 + 68 >> 2] >= HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) | 0) + 2 >> 1] << 16 >> 16) {
         break block1
        }
       }
       if (HEAP32[$3 + 32 >> 2] < 64) {
        HEAP32[$3 + 28 >> 2] = (HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 72 >> 2] << 2) | 0) + 2 >> 1] << 16 >> 16) - (HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) | 0) + 2 >> 1] << 16 >> 16);
        if (HEAP32[$3 + 28 >> 2]) {
         HEAP16[(HEAP32[$3 + 32 >> 2] << 1) + $4 >> 1] = (HEAP16[HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) >> 1] << 16 >> 16) + ((Math_imul(HEAP32[$3 + 68 >> 2] - (HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) | 0) + 2 >> 1] << 16 >> 16) | 0, (HEAP16[HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 72 >> 2] << 2) >> 1] << 16 >> 16) - (HEAP16[HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) >> 1] << 16 >> 16) | 0) | 0) / HEAP32[$3 + 28 >> 2] | 0);
         HEAP8[HEAP32[$3 + 32 >> 2] + $0 | 0] = HEAP32[$3 + 28 >> 2] > 1;
         HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 32 >> 2] + 1;
        }
       }
      }
      HEAP32[$3 + 72 >> 2] = HEAP32[$3 + 76 >> 2];
      HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
      continue;
     }
     break;
    };
    HEAP32[$3 + 76 >> 2] = 0;
    while (1) {
     if (HEAP32[$3 + 76 >> 2] < (HEAP32[$3 + 32 >> 2] - 1 | 0)) {
      if (HEAP16[(HEAP32[$3 + 76 >> 2] << 1) + $4 >> 1] << 16 >> 16 > HEAP16[(HEAP32[$3 + 76 >> 2] + 1 << 1) + $4 >> 1] << 16 >> 16) {
       HEAP16[$3 + 26 >> 1] = HEAPU16[(HEAP32[$3 + 76 >> 2] << 1) + $4 >> 1];
       HEAP16[(HEAP32[$3 + 76 >> 2] << 1) + $4 >> 1] = HEAPU16[(HEAP32[$3 + 76 >> 2] + 1 << 1) + $4 >> 1];
       HEAP16[(HEAP32[$3 + 76 >> 2] + 1 << 1) + $4 >> 1] = HEAPU16[$3 + 26 >> 1];
       HEAP8[$3 + 25 | 0] = HEAP8[HEAP32[$3 + 76 >> 2] + $0 | 0] & 1;
       HEAP8[HEAP32[$3 + 76 >> 2] + $0 | 0] = HEAP8[(HEAP32[$3 + 76 >> 2] + 1 | 0) + $0 | 0] & 1;
       HEAP8[(HEAP32[$3 + 76 >> 2] + 1 | 0) + $0 | 0] = HEAP8[$3 + 25 | 0] & 1;
       if (HEAP32[$3 + 76 >> 2]) {
        HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] - 1
       }
       continue;
      }
      HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
      continue;
     }
     break;
    };
    HEAP32[$3 + 20 >> 2] = 0;
    HEAP32[$3 + 16 >> 2] = 0;
    HEAP32[$3 + 76 >> 2] = 0;
    while (1) {
     block2 : {
      if (HEAP32[$3 + 76 >> 2] >= HEAP32[$3 + 32 >> 2]) {
       break block2
      }
      if (!HEAP32[$3 + 16 >> 2]) {
       HEAP32[$3 + 20 >> 2] = HEAP16[(HEAP32[$3 + 76 >> 2] << 1) + $4 >> 1] << 16 >> 16
      }
      block3 : {
       if (HEAP8[HEAP32[$3 + 76 >> 2] + $0 | 0] & 1) {
        HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] + 1;
        break block3;
       }
       HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] - 1;
      }
      if (!(HEAP32[$3 + 76 >> 2] != (HEAP32[$3 + 32 >> 2] - 1 | 0) ? HEAP32[$3 + 16 >> 2] : 0)) {
       HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 20 >> 2] + 15 >> 4;
       HEAP32[$3 + 8 >> 2] = (HEAP16[(HEAP32[$3 + 76 >> 2] << 1) + $4 >> 1] << 16 >> 16) + 15 >> 4;
       if (HEAP32[$3 + 8 >> 2] > HEAP32[$3 + 12 >> 2]) {
        $1 = HEAP32[$3 + 92 >> 2];
        graphicsFillRectDevice(HEAP32[$3 + 92 >> 2], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 40 >> 2], HEAP32[$3 + 8 >> 2] - 1 | 0, HEAP32[$3 + 40 >> 2], HEAPU8[$1 + 17 | 0] | HEAPU8[$1 + 18 | 0] << 8 | (HEAPU8[$1 + 19 | 0] << 16 | HEAPU8[$1 + 20 | 0] << 24));
       }
      }
      if (jspIsInterrupted() & 1) {
       break block2
      }
      HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
      continue;
     }
     break;
    };
    $4 = HEAP32[$3 + 36 >> 2];
    HEAP32[$3 + 68 >> 2] = HEAP32[$3 + 68 >> 2] + 16;
    continue;
   }
   break;
  };
  __stack_pointer = $3 + 96 | 0;
 }
 
 function graphicsScroll($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 44 >> 2] = $0;
  HEAP32[$3 + 40 >> 2] = $1;
  HEAP32[$3 + 36 >> 2] = $2;
  HEAP32[$3 + 32 >> 2] = 0;
  HEAP32[$3 + 28 >> 2] = 0;
  HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 40 >> 2];
  HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 36 >> 2];
  graphicsToDeviceCoordinates(HEAP32[$3 + 44 >> 2], $3 + 32 | 0, $3 + 28 | 0);
  graphicsToDeviceCoordinates(HEAP32[$3 + 44 >> 2], $3 + 24 | 0, $3 + 20 | 0);
  HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 24 >> 2] - HEAP32[$3 + 32 >> 2];
  HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 20 >> 2] - HEAP32[$3 + 28 >> 2];
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 32 >> 2] = HEAPU8[$0 + 32 | 0] | HEAPU8[$0 + 33 | 0] << 8;
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 28 >> 2] = HEAPU8[$0 + 34 | 0] | HEAPU8[$0 + 35 | 0] << 8;
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 24 >> 2] = HEAPU8[$0 + 36 | 0] | HEAPU8[$0 + 37 | 0] << 8;
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 20 >> 2] = HEAPU8[$0 + 38 | 0] | HEAPU8[$0 + 39 | 0] << 8;
  HEAP8[$3 + 19 | 0] = 1;
  HEAP32[$3 + 12 >> 2] = (HEAP32[$3 + 24 >> 2] + 1 | 0) - HEAP32[$3 + 32 >> 2];
  HEAP32[$3 + 8 >> 2] = (HEAP32[$3 + 20 >> 2] + 1 | 0) - HEAP32[$3 + 28 >> 2];
  if (HEAP32[$3 + 40 >> 2] >= HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 12 >> 2];
   HEAP8[$3 + 19 | 0] = 0;
  }
  if (HEAP32[$3 + 40 >> 2] <= (0 - HEAP32[$3 + 12 >> 2] | 0)) {
   HEAP32[$3 + 40 >> 2] = 0 - HEAP32[$3 + 12 >> 2];
   HEAP8[$3 + 19 | 0] = 0;
  }
  if (HEAP32[$3 + 36 >> 2] >= HEAP32[$3 + 8 >> 2]) {
   HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 8 >> 2];
   HEAP8[$3 + 19 | 0] = 0;
  }
  if (HEAP32[$3 + 36 >> 2] <= (0 - HEAP32[$3 + 8 >> 2] | 0)) {
   HEAP32[$3 + 36 >> 2] = 0 - HEAP32[$3 + 8 >> 2];
   HEAP8[$3 + 19 | 0] = 0;
  }
  if (HEAP8[$3 + 19 | 0] & 1) {
   $0 = HEAP32[$3 + 44 >> 2];
   FUNCTION_TABLE[HEAPU8[$0 + 68 | 0] | HEAPU8[$0 + 69 | 0] << 8 | (HEAPU8[$0 + 70 | 0] << 16 | HEAPU8[$0 + 71 | 0] << 24)](HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2], HEAP32[$3 + 36 >> 2], HEAP32[$3 + 32 >> 2], HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
  }
  graphicsSetModified(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 32 >> 2], HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
  block : {
   if (HEAP32[$3 + 40 >> 2] > 0) {
    $0 = HEAP32[$3 + 44 >> 2];
    $1 = HEAP32[$3 + 44 >> 2];
    FUNCTION_TABLE[HEAPU8[$1 + 56 | 0] | HEAPU8[$1 + 57 | 0] << 8 | (HEAPU8[$1 + 58 | 0] << 16 | HEAPU8[$1 + 59 | 0] << 24)](HEAP32[$3 + 44 >> 2], HEAP32[$3 + 32 >> 2], HEAP32[$3 + 28 >> 2], (HEAP32[$3 + 32 >> 2] + HEAP32[$3 + 40 >> 2] | 0) - 1 | 0, HEAP32[$3 + 20 >> 2], HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
    break block;
   }
   if (HEAP32[$3 + 40 >> 2] < 0) {
    $0 = HEAP32[$3 + 44 >> 2];
    $1 = HEAP32[$3 + 44 >> 2];
    FUNCTION_TABLE[HEAPU8[$1 + 56 | 0] | HEAPU8[$1 + 57 | 0] << 8 | (HEAPU8[$1 + 58 | 0] << 16 | HEAPU8[$1 + 59 | 0] << 24)](HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2] + (HEAP32[$3 + 24 >> 2] + 1 | 0) | 0, HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
   }
  }
  block1 : {
   if (HEAP32[$3 + 36 >> 2] > 0) {
    $0 = HEAP32[$3 + 44 >> 2];
    $1 = HEAP32[$3 + 44 >> 2];
    FUNCTION_TABLE[HEAPU8[$1 + 56 | 0] | HEAPU8[$1 + 57 | 0] << 8 | (HEAPU8[$1 + 58 | 0] << 16 | HEAPU8[$1 + 59 | 0] << 24)](HEAP32[$3 + 44 >> 2], HEAP32[$3 + 32 >> 2], HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], (HEAP32[$3 + 28 >> 2] + HEAP32[$3 + 36 >> 2] | 0) - 1 | 0, HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
    break block1;
   }
   if (HEAP32[$3 + 36 >> 2] < 0) {
    $0 = HEAP32[$3 + 44 >> 2];
    $1 = HEAP32[$3 + 44 >> 2];
    FUNCTION_TABLE[HEAPU8[$1 + 56 | 0] | HEAPU8[$1 + 57 | 0] << 8 | (HEAPU8[$1 + 58 | 0] << 16 | HEAPU8[$1 + 59 | 0] << 24)](HEAP32[$3 + 44 >> 2], HEAP32[$3 + 32 >> 2], HEAP32[$3 + 36 >> 2] + (HEAP32[$3 + 20 >> 2] + 1 | 0) | 0, HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
   }
  }
  __stack_pointer = $3 + 48 | 0;
 }
 
 function graphicsIdle() {
  
 }
 
 function lcdGetPixelIndex_ArrayBuffer($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  HEAP32[$4 + 24 >> 2] = $0;
  HEAP32[$4 + 20 >> 2] = $1;
  HEAP32[$4 + 16 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  $0 = HEAP32[$4 + 24 >> 2];
  if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 1 & (HEAP32[$4 + 16 >> 2] & 1)) {
   $0 = HEAP32[$4 + 24 >> 2];
   HEAP32[$4 + 20 >> 2] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) - (HEAP32[$4 + 20 >> 2] + HEAP32[$4 + 12 >> 2] | 0);
  }
  $0 = HEAP32[$4 + 24 >> 2];
  block : {
   if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 8) {
    $0 = HEAP32[$4 + 24 >> 2];
    HEAP32[$4 + 8 >> 2] = (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8) >>> 1;
    HEAP32[$4 + 4 >> 2] = 0;
    if (HEAP32[$4 + 16 >> 2] >= HEAP32[$4 + 8 >> 2]) {
     HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 16 >> 2] - HEAP32[$4 + 8 >> 2];
     HEAP32[$4 + 4 >> 2] = HEAPU8[HEAP32[$4 + 24 >> 2] + 16 | 0];
    }
    $0 = HEAP32[$4 + 24 >> 2];
    HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 4 >> 2] + Math_imul(HEAP32[$4 + 20 >> 2] + Math_imul(HEAP32[$4 + 16 >> 2], HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) | 0, HEAPU8[HEAP32[$4 + 24 >> 2] + 16 | 0] << 1);
    break block;
   }
   $0 = HEAP32[$4 + 24 >> 2];
   if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 2) {
    $0 = HEAP32[$4 + 24 >> 2];
    HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 16 >> 2] & 7 | HEAP32[$4 + 20 >> 2] + Math_imul(HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8, HEAP32[$4 + 16 >> 2] >> 3) << 3;
    break block;
   }
   $0 = HEAP32[$4 + 24 >> 2];
   HEAP32[$4 + 28 >> 2] = Math_imul(HEAPU8[HEAP32[$4 + 24 >> 2] + 16 | 0], HEAP32[$4 + 20 >> 2] + Math_imul(HEAP32[$4 + 16 >> 2], HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) | 0);
  }
  return HEAP32[$4 + 28 >> 2];
 }
 
 function lcdGetPixel_ArrayBuffer($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 112 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 108 >> 2] = $0;
  HEAP32[$3 + 104 >> 2] = $1;
  HEAP32[$3 + 100 >> 2] = $2;
  HEAP32[$3 + 96 >> 2] = 0;
  $0 = HEAP32[$3 + 108 >> 2];
  HEAP32[$3 + 92 >> 2] = HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24);
  HEAP32[$3 + 88 >> 2] = lcdGetPixelIndex_ArrayBuffer(HEAP32[$3 + 108 >> 2], HEAP32[$3 + 104 >> 2], HEAP32[$3 + 100 >> 2], 1);
  jsvArrayBufferIteratorNew($3 + 32 | 0, HEAP32[$3 + 92 >> 2], HEAP32[$3 + 88 >> 2] >>> 3 | 0);
  block1 : {
   if (HEAPU8[HEAP32[$3 + 108 >> 2] + 16 | 0] & 7) {
    HEAP32[$3 + 88 >> 2] = HEAP32[$3 + 88 >> 2] & 7;
    HEAP32[$3 + 28 >> 2] = (1 << HEAPU8[HEAP32[$3 + 108 >> 2] + 16 | 0]) - 1;
    HEAP32[$3 + 24 >> 2] = jsvArrayBufferIteratorGetIntegerValue($3 + 32 | 0);
    $0 = HEAP32[$3 + 108 >> 2];
    if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4) {
     $0 = 8 - (HEAP32[$3 + 88 >> 2] + HEAPU8[HEAP32[$3 + 108 >> 2] + 16 | 0] | 0) | 0
    } else {
     $0 = HEAP32[$3 + 88 >> 2]
    }
    HEAP32[$3 + 20 >> 2] = $0;
    HEAP32[$3 + 96 >> 2] = HEAP32[$3 + 28 >> 2] & HEAP32[$3 + 24 >> 2] >>> HEAP32[$3 + 20 >> 2];
    break block1;
   }
   $0 = HEAP32[$3 + 108 >> 2];
   block2 : {
    if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4) {
     HEAP32[$3 + 16 >> 2] = HEAPU8[HEAP32[$3 + 108 >> 2] + 16 | 0] - 8;
     while (1) {
      if (HEAP32[$3 + 16 >> 2] >= 0) {
       HEAP32[$3 + 96 >> 2] = jsvArrayBufferIteratorGetIntegerValue($3 + 32 | 0) << HEAP32[$3 + 16 >> 2] | HEAP32[$3 + 96 >> 2];
       jsvArrayBufferIteratorNext($3 + 32 | 0);
       HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] - 8;
       continue;
      }
      break;
     };
     break block2;
    }
    HEAP32[$3 + 12 >> 2] = 0;
    while (1) {
     if (HEAP32[$3 + 12 >> 2] < HEAPU8[HEAP32[$3 + 108 >> 2] + 16 | 0]) {
      HEAP32[$3 + 96 >> 2] = jsvArrayBufferIteratorGetIntegerValue($3 + 32 | 0) << HEAP32[$3 + 12 >> 2] | HEAP32[$3 + 96 >> 2];
      jsvArrayBufferIteratorNext($3 + 32 | 0);
      HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 8;
      continue;
     }
     break;
    };
   }
  }
  jsvArrayBufferIteratorFree($3 + 32 | 0);
  __stack_pointer = $3 + 112 | 0;
  return HEAP32[$3 + 96 >> 2];
 }
 
 function lcdSetPixels_ArrayBuffer($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 128 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 124 >> 2] = $0;
  HEAP32[$5 + 120 >> 2] = $1;
  HEAP32[$5 + 116 >> 2] = $2;
  HEAP32[$5 + 112 >> 2] = $3;
  HEAP32[$5 + 108 >> 2] = $4;
  $0 = HEAP32[$5 + 124 >> 2];
  HEAP32[$5 + 104 >> 2] = HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24);
  HEAP32[$5 + 100 >> 2] = lcdGetPixelIndex_ArrayBuffer(HEAP32[$5 + 124 >> 2], HEAP32[$5 + 120 >> 2], HEAP32[$5 + 116 >> 2], HEAP32[$5 + 112 >> 2]);
  jsvArrayBufferIteratorNew($5 + 44 | 0, HEAP32[$5 + 104 >> 2], HEAP32[$5 + 100 >> 2] >>> 3 | 0);
  HEAP32[$5 + 40 >> 2] = (1 << HEAPU8[HEAP32[$5 + 124 >> 2] + 16 | 0]) - 1;
  block : {
   if (HEAP32[$5 + 108 >> 2]) {
    $0 = 0;
    if (HEAP32[$5 + 40 >> 2] != (HEAP32[$5 + 108 >> 2] & HEAP32[$5 + 40 >> 2])) {
     break block
    }
   }
   $0 = HEAP32[$5 + 124 >> 2];
   $0 = ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 2) != 0 ^ -1;
  }
  HEAP8[$5 + 39 | 0] = $0 & 1;
  HEAP32[$5 + 32 >> 2] = HEAPU8[HEAP32[$5 + 124 >> 2] + 16 | 0];
  $0 = HEAP32[$5 + 124 >> 2];
  if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 8) {
   HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 32 >> 2] << 1;
   HEAP8[$5 + 39 | 0] = 0;
  }
  while (1) {
   block1 : {
    $0 = HEAP32[$5 + 112 >> 2];
    HEAP32[$5 + 112 >> 2] = $0 - 1;
    if (!$0) {
     break block1
    }
    block5 : {
     if (HEAPU8[HEAP32[$5 + 124 >> 2] + 16 | 0] & 7) {
      HEAP32[$5 + 100 >> 2] = HEAP32[$5 + 100 >> 2] & 7;
      if (!(HEAP32[$5 + 100 >> 2] | !(HEAP8[$5 + 39 | 0] & 1))) {
       HEAP32[$5 + 28 >> 2] = Math_imul(HEAPU8[HEAP32[$5 + 124 >> 2] + 16 | 0], HEAP32[$5 + 112 >> 2] + 1 | 0) >> 3;
       if (HEAP32[$5 + 28 >> 2]) {
        HEAP8[$5 + 27 | 0] = HEAP32[$5 + 108 >> 2] ? 255 : 0;
        HEAP32[$5 + 112 >> 2] = (HEAP32[$5 + 112 >> 2] + 1 | 0) - ((HEAP32[$5 + 28 >> 2] << 3) / HEAPU8[HEAP32[$5 + 124 >> 2] + 16 | 0] | 0);
        while (1) {
         $0 = HEAP32[$5 + 28 >> 2];
         HEAP32[$5 + 28 >> 2] = $0 - 1;
         if ($0) {
          jsvArrayBufferIteratorSetByteValue($5 + 44 | 0, HEAP8[$5 + 27 | 0] << 24 >> 24);
          jsvArrayBufferIteratorNext($5 + 44 | 0);
          continue;
         }
         break;
        };
        continue;
       }
      }
      HEAP32[$5 + 20 >> 2] = (1 << HEAPU8[HEAP32[$5 + 124 >> 2] + 16 | 0]) - 1;
      HEAP32[$5 + 16 >> 2] = jsvArrayBufferIteratorGetIntegerValue($5 + 44 | 0);
      $0 = HEAP32[$5 + 124 >> 2];
      if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4) {
       $0 = 8 - (HEAP32[$5 + 100 >> 2] + HEAPU8[HEAP32[$5 + 124 >> 2] + 16 | 0] | 0) | 0
      } else {
       $0 = HEAP32[$5 + 100 >> 2]
      }
      HEAP32[$5 + 12 >> 2] = $0;
      jsvArrayBufferIteratorSetByteValue($5 + 44 | 0, (HEAP32[$5 + 16 >> 2] & (HEAP32[$5 + 20 >> 2] << HEAP32[$5 + 12 >> 2] ^ -1) | (HEAP32[$5 + 108 >> 2] & HEAP32[$5 + 20 >> 2]) << HEAP32[$5 + 12 >> 2]) << 24 >> 24);
      $0 = HEAP32[$5 + 124 >> 2];
      block4 : {
       if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 2) {
        jsvArrayBufferIteratorNext($5 + 44 | 0);
        break block4;
       }
       HEAP32[$5 + 100 >> 2] = HEAP32[$5 + 32 >> 2] + HEAP32[$5 + 100 >> 2];
       if (HEAPU32[$5 + 100 >> 2] >= 8) {
        jsvArrayBufferIteratorNext($5 + 44 | 0)
       }
      }
      break block5;
     }
     $0 = HEAP32[$5 + 124 >> 2];
     block6 : {
      if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4) {
       HEAP32[$5 + 8 >> 2] = HEAPU8[HEAP32[$5 + 124 >> 2] + 16 | 0] - 8;
       while (1) {
        if (HEAP32[$5 + 8 >> 2] >= 0) {
         jsvArrayBufferIteratorSetByteValue($5 + 44 | 0, HEAP32[$5 + 108 >> 2] >>> HEAP32[$5 + 8 >> 2] << 24 >> 24);
         jsvArrayBufferIteratorNext($5 + 44 | 0);
         HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] - 8;
         continue;
        }
        break;
       };
       break block6;
      }
      HEAP32[$5 + 4 >> 2] = 0;
      while (1) {
       if (HEAP32[$5 + 4 >> 2] < HEAPU8[HEAP32[$5 + 124 >> 2] + 16 | 0]) {
        jsvArrayBufferIteratorSetByteValue($5 + 44 | 0, HEAP32[$5 + 108 >> 2] >>> HEAP32[$5 + 4 >> 2] << 24 >> 24);
        jsvArrayBufferIteratorNext($5 + 44 | 0);
        HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] + 8;
        continue;
       }
       break;
      };
     }
    }
    continue;
   }
   break;
  };
  jsvArrayBufferIteratorFree($5 + 44 | 0);
  __stack_pointer = $5 + 128 | 0;
 }
 
 function lcdSetPixel_ArrayBuffer($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
  lcdSetPixels_ArrayBuffer(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], 1, HEAP32[$4 >> 2]);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function lcdFillRect_ArrayBuffer($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 28 >> 2] = $0;
  HEAP32[$6 + 24 >> 2] = $1;
  HEAP32[$6 + 20 >> 2] = $2;
  HEAP32[$6 + 16 >> 2] = $3;
  HEAP32[$6 + 12 >> 2] = $4;
  HEAP32[$6 + 8 >> 2] = $5;
  HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 20 >> 2];
  while (1) {
   if (HEAP32[$6 + 4 >> 2] <= HEAP32[$6 + 12 >> 2]) {
    lcdSetPixels_ArrayBuffer(HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 4 >> 2], (HEAP32[$6 + 16 >> 2] + 1 | 0) - HEAP32[$6 + 24 >> 2] | 0, HEAP32[$6 + 8 >> 2]);
    HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] + 1;
    continue;
   }
   break;
  };
  __stack_pointer = $6 + 32 | 0;
 }
 
 function lcdGetPixel_ArrayBuffer_flat($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 44 >> 2] = $0;
  HEAP32[$3 + 40 >> 2] = $1;
  HEAP32[$3 + 36 >> 2] = $2;
  HEAP32[$3 + 32 >> 2] = 0;
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 28 >> 2] = HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24);
  HEAP32[$3 + 24 >> 2] = lcdGetPixelIndex_ArrayBuffer(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2], HEAP32[$3 + 36 >> 2], 1);
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 28 >> 2] + (HEAP32[$3 + 24 >> 2] >>> 3 | 0);
  block1 : {
   if (HEAPU8[HEAP32[$3 + 44 >> 2] + 16 | 0] & 7) {
    HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] & 7;
    HEAP32[$3 + 20 >> 2] = (1 << HEAPU8[HEAP32[$3 + 44 >> 2] + 16 | 0]) - 1;
    HEAP32[$3 + 16 >> 2] = HEAPU8[HEAP32[$3 + 28 >> 2]];
    $0 = HEAP32[$3 + 44 >> 2];
    if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4) {
     $0 = 8 - (HEAP32[$3 + 24 >> 2] + HEAPU8[HEAP32[$3 + 44 >> 2] + 16 | 0] | 0) | 0
    } else {
     $0 = HEAP32[$3 + 24 >> 2]
    }
    HEAP32[$3 + 12 >> 2] = $0;
    HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 20 >> 2] & HEAP32[$3 + 16 >> 2] >>> HEAP32[$3 + 12 >> 2];
    break block1;
   }
   $0 = HEAP32[$3 + 44 >> 2];
   block2 : {
    if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4) {
     HEAP32[$3 + 8 >> 2] = HEAPU8[HEAP32[$3 + 44 >> 2] + 16 | 0] - 8;
     while (1) {
      if (HEAP32[$3 + 8 >> 2] >= 0) {
       HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 32 >> 2] | HEAPU8[HEAP32[$3 + 28 >> 2]] << HEAP32[$3 + 8 >> 2];
       HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 28 >> 2] + 1;
       HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] - 8;
       continue;
      }
      break;
     };
     break block2;
    }
    HEAP32[$3 + 4 >> 2] = 0;
    while (1) {
     if (HEAP32[$3 + 4 >> 2] < HEAPU8[HEAP32[$3 + 44 >> 2] + 16 | 0]) {
      HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 32 >> 2] | HEAPU8[HEAP32[$3 + 28 >> 2]] << HEAP32[$3 + 4 >> 2];
      HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 28 >> 2] + 1;
      HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 8;
      continue;
     }
     break;
    };
   }
  }
  __stack_pointer = $3 + 48 | 0;
  return HEAP32[$3 + 32 >> 2];
 }
 
 function lcdSetPixels_ArrayBuffer_flat($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 80 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 76 >> 2] = $0;
  HEAP32[$5 + 72 >> 2] = $1;
  HEAP32[$5 + 68 >> 2] = $2;
  HEAP32[$5 + 64 >> 2] = $3;
  HEAP32[$5 + 60 >> 2] = $4;
  $0 = HEAP32[$5 + 76 >> 2];
  HEAP32[$5 + 56 >> 2] = HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24);
  HEAP32[$5 + 52 >> 2] = lcdGetPixelIndex_ArrayBuffer(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 72 >> 2], HEAP32[$5 + 68 >> 2], HEAP32[$5 + 64 >> 2]);
  HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 56 >> 2] + (HEAP32[$5 + 52 >> 2] >>> 3 | 0);
  HEAP32[$5 + 48 >> 2] = (1 << HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0]) - 1;
  block : {
   if (HEAP32[$5 + 60 >> 2]) {
    $0 = 0;
    if (HEAP32[$5 + 48 >> 2] != (HEAP32[$5 + 60 >> 2] & HEAP32[$5 + 48 >> 2])) {
     break block
    }
   }
   $0 = HEAP32[$5 + 76 >> 2];
   $0 = ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 2) != 0 ^ -1;
  }
  HEAP8[$5 + 47 | 0] = $0 & 1;
  HEAP32[$5 + 40 >> 2] = HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0];
  $0 = HEAP32[$5 + 76 >> 2];
  if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 8) {
   HEAP32[$5 + 40 >> 2] = HEAP32[$5 + 40 >> 2] << 1;
   HEAP8[$5 + 47 | 0] = 0;
  }
  while (1) {
   block1 : {
    $0 = HEAP32[$5 + 64 >> 2];
    HEAP32[$5 + 64 >> 2] = $0 - 1;
    if (!$0) {
     break block1
    }
    block5 : {
     if (HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0] & 7) {
      HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 52 >> 2] & 7;
      if (!(HEAP32[$5 + 52 >> 2] | !(HEAP8[$5 + 47 | 0] & 1))) {
       HEAP32[$5 + 36 >> 2] = Math_imul(HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0], HEAP32[$5 + 64 >> 2] + 1 | 0) >> 3;
       if (HEAP32[$5 + 36 >> 2]) {
        HEAP8[$5 + 35 | 0] = HEAP32[$5 + 60 >> 2] ? 255 : 0;
        HEAP32[$5 + 64 >> 2] = (HEAP32[$5 + 64 >> 2] + 1 | 0) - ((HEAP32[$5 + 36 >> 2] << 3) / HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0] | 0);
        while (1) {
         $0 = HEAP32[$5 + 36 >> 2];
         HEAP32[$5 + 36 >> 2] = $0 - 1;
         if ($0) {
          HEAP8[HEAP32[$5 + 56 >> 2]] = HEAPU8[$5 + 35 | 0];
          HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 56 >> 2] + 1;
          continue;
         }
         break;
        };
        continue;
       }
      }
      HEAP32[$5 + 28 >> 2] = (1 << HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0]) - 1;
      HEAP32[$5 + 24 >> 2] = HEAPU8[HEAP32[$5 + 56 >> 2]];
      $0 = HEAP32[$5 + 76 >> 2];
      if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4) {
       $0 = 8 - (HEAP32[$5 + 52 >> 2] + HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0] | 0) | 0
      } else {
       $0 = HEAP32[$5 + 52 >> 2]
      }
      HEAP32[$5 + 20 >> 2] = $0;
      HEAP8[HEAP32[$5 + 56 >> 2]] = HEAP32[$5 + 24 >> 2] & (HEAP32[$5 + 28 >> 2] << HEAP32[$5 + 20 >> 2] ^ -1) | (HEAP32[$5 + 60 >> 2] & HEAP32[$5 + 28 >> 2]) << HEAP32[$5 + 20 >> 2];
      $0 = HEAP32[$5 + 76 >> 2];
      block4 : {
       if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 2) {
        HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 56 >> 2] + 1;
        break block4;
       }
       HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 40 >> 2] + HEAP32[$5 + 52 >> 2];
       if (HEAPU32[$5 + 52 >> 2] >= 8) {
        HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 56 >> 2] + 1
       }
      }
      break block5;
     }
     $0 = HEAP32[$5 + 76 >> 2];
     block6 : {
      if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4) {
       HEAP32[$5 + 16 >> 2] = HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0] - 8;
       while (1) {
        if (HEAP32[$5 + 16 >> 2] >= 0) {
         $1 = HEAP32[$5 + 60 >> 2];
         $2 = HEAP32[$5 + 16 >> 2];
         $0 = HEAP32[$5 + 56 >> 2];
         HEAP32[$5 + 56 >> 2] = $0 + 1;
         HEAP8[$0 | 0] = $1 >>> $2;
         HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] - 8;
         continue;
        }
        break;
       };
       break block6;
      }
      HEAP32[$5 + 12 >> 2] = 0;
      while (1) {
       if (HEAP32[$5 + 12 >> 2] < HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0]) {
        $1 = HEAP32[$5 + 60 >> 2];
        $2 = HEAP32[$5 + 12 >> 2];
        $0 = HEAP32[$5 + 56 >> 2];
        HEAP32[$5 + 56 >> 2] = $0 + 1;
        HEAP8[$0 | 0] = $1 >>> $2;
        HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 12 >> 2] + 8;
        continue;
       }
       break;
      };
     }
    }
    continue;
   }
   break;
  };
  __stack_pointer = $5 + 80 | 0;
 }
 
 function lcdSetPixel_ArrayBuffer_flat($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
  lcdSetPixels_ArrayBuffer_flat(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], 1, HEAP32[$4 >> 2]);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function lcdFillRect_ArrayBuffer_flat($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 28 >> 2] = $0;
  HEAP32[$6 + 24 >> 2] = $1;
  HEAP32[$6 + 20 >> 2] = $2;
  HEAP32[$6 + 16 >> 2] = $3;
  HEAP32[$6 + 12 >> 2] = $4;
  HEAP32[$6 + 8 >> 2] = $5;
  HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 20 >> 2];
  while (1) {
   if (HEAP32[$6 + 4 >> 2] <= HEAP32[$6 + 12 >> 2]) {
    lcdSetPixels_ArrayBuffer_flat(HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 4 >> 2], (HEAP32[$6 + 16 >> 2] + 1 | 0) - HEAP32[$6 + 24 >> 2] | 0, HEAP32[$6 + 8 >> 2]);
    HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] + 1;
    continue;
   }
   break;
  };
  __stack_pointer = $6 + 32 | 0;
 }
 
 function lcdScroll_ArrayBuffer_flat($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0;
  $7 = __stack_pointer + -64 | 0;
  __stack_pointer = $7;
  HEAP32[$7 + 60 >> 2] = $0;
  HEAP32[$7 + 56 >> 2] = $1;
  HEAP32[$7 + 52 >> 2] = $2;
  HEAP32[$7 + 48 >> 2] = $3;
  HEAP32[$7 + 44 >> 2] = $4;
  HEAP32[$7 + 40 >> 2] = $5;
  HEAP32[$7 + 36 >> 2] = $6;
  block4 : {
   block : {
    if (HEAP32[$7 + 48 >> 2]) {
     break block
    }
    $0 = HEAP32[$7 + 60 >> 2];
    if (HEAP32[$7 + 56 >> 2] | HEAP32[$7 + 40 >> 2] != ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) - 1 | 0)) {
     break block
    }
    $0 = HEAP32[$7 + 60 >> 2];
    if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 11) {
     break block
    }
    $0 = HEAP32[$7 + 52 >> 2];
    $1 = $0 >> 31;
    HEAP32[$7 + 32 >> 2] = (HEAP32[$7 + 36 >> 2] + 1 | 0) - HEAP32[$7 + 44 >> 2] - (($1 ^ $0) - $1);
    HEAP32[$7 + 28 >> 2] = Math_imul(HEAP32[$7 + 32 >> 2], (HEAP32[$7 + 40 >> 2] + 1 | 0) - HEAP32[$7 + 48 >> 2] | 0);
    if (HEAP32[$7 + 52 >> 2] < 0) {
     $0 = 0 - HEAP32[$7 + 52 >> 2] | 0
    } else {
     $0 = 0
    }
    HEAP32[$7 + 24 >> 2] = $0 + HEAP32[$7 + 44 >> 2];
    if (HEAP32[$7 + 52 >> 2] > 0) {
     $0 = HEAP32[$7 + 52 >> 2]
    } else {
     $0 = 0
    }
    HEAP32[$7 + 20 >> 2] = $0 + HEAP32[$7 + 44 >> 2];
    HEAP32[$7 + 16 >> 2] = lcdGetPixelIndex_ArrayBuffer(HEAP32[$7 + 60 >> 2], HEAP32[$7 + 48 >> 2], HEAP32[$7 + 24 >> 2], HEAP32[$7 + 28 >> 2]);
    HEAP32[$7 + 12 >> 2] = lcdGetPixelIndex_ArrayBuffer(HEAP32[$7 + 60 >> 2], HEAP32[$7 + 48 >> 2], HEAP32[$7 + 20 >> 2], HEAP32[$7 + 28 >> 2]);
    HEAP32[$7 + 8 >> 2] = Math_imul(HEAP32[$7 + 28 >> 2], HEAPU8[HEAP32[$7 + 60 >> 2] + 16 | 0]);
    if (!(HEAP32[$7 + 8 >> 2] & 7 | (HEAP32[$7 + 16 >> 2] & 7 | HEAP32[$7 + 12 >> 2] & 7))) {
     $0 = HEAP32[$7 + 60 >> 2];
     HEAP32[$7 + 4 >> 2] = HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24);
     $1 = HEAP32[$7 + 4 >> 2];
     $2 = HEAP32[$7 + 12 >> 2];
     $3 = HEAP32[$7 + 4 >> 2];
     $4 = HEAP32[$7 + 16 >> 2];
     $0 = HEAP32[$7 + 8 >> 2] >>> 3 | 0;
     if ($0) {
      wasm2js_memory_copy(($2 >>> 3 | 0) + $1 | 0, ($4 >>> 3 | 0) + $3 | 0, $0)
     }
     break block4;
    }
   }
   graphicsFallbackScroll(HEAP32[$7 + 60 >> 2], HEAP32[$7 + 56 >> 2], HEAP32[$7 + 52 >> 2], HEAP32[$7 + 48 >> 2], HEAP32[$7 + 44 >> 2], HEAP32[$7 + 40 >> 2], HEAP32[$7 + 36 >> 2]);
  }
  __stack_pointer = $7 - -64 | 0;
 }
 
 function lcdSetPixel_ArrayBuffer_flat1($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  $0 = HEAP32[$4 + 28 >> 2];
  HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 24 >> 2] + Math_imul(HEAP32[$4 + 20 >> 2], HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8);
  $0 = HEAP32[$4 + 28 >> 2];
  HEAP32[$4 + 8 >> 2] = (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) + (HEAP32[$4 + 12 >> 2] >> 3);
  block : {
   if (HEAP32[$4 + 16 >> 2]) {
    $0 = HEAP32[$4 + 8 >> 2];
    HEAP8[$0 | 0] = HEAPU8[$0 | 0] | 128 >> (HEAP32[$4 + 12 >> 2] & 7) & 255;
    break block;
   }
   $0 = HEAP32[$4 + 8 >> 2];
   HEAP8[$0 | 0] = HEAPU8[$0 | 0] & (65407 >> (HEAP32[$4 + 12 >> 2] & 7) & 255);
  }
 }
 
 function lcdGetPixel_ArrayBuffer_flat1($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  $0 = HEAP32[$3 + 28 >> 2];
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 24 >> 2] + Math_imul(HEAP32[$3 + 20 >> 2], HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8);
  $0 = HEAP32[$3 + 28 >> 2];
  HEAP8[$3 + 15 | 0] = HEAPU8[(HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) + (HEAP32[$3 + 16 >> 2] >> 3) | 0];
  return HEAPU8[$3 + 15 | 0] >> 7 - (HEAP32[$3 + 16 >> 2] & 7) & 1;
 }
 
 function lcdFillRect_ArrayBuffer_flat1($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 80 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 76 >> 2] = $0;
  HEAP32[$6 + 72 >> 2] = $1;
  HEAP32[$6 + 68 >> 2] = $2;
  HEAP32[$6 + 64 >> 2] = $3;
  HEAP32[$6 + 60 >> 2] = $4;
  HEAP32[$6 + 56 >> 2] = $5;
  block : {
   if ((HEAP32[$6 + 64 >> 2] - HEAP32[$6 + 72 >> 2] | 0) < 8) {
    lcdFillRect_ArrayBuffer_flat(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 72 >> 2], HEAP32[$6 + 68 >> 2], HEAP32[$6 + 64 >> 2], HEAP32[$6 + 60 >> 2], HEAP32[$6 + 56 >> 2]);
    break block;
   }
   $0 = HEAP32[$6 + 76 >> 2];
   HEAP32[$6 + 52 >> 2] = HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24);
   HEAP32[$6 + 56 >> 2] = HEAP32[$6 + 56 >> 2] & 1;
   HEAP8[$6 + 51 | 0] = HEAP32[$6 + 56 >> 2] & 255 | HEAP32[$6 + 56 >> 2] << 1 & 255;
   HEAP8[$6 + 51 | 0] = HEAPU8[$6 + 51 | 0] | HEAPU8[$6 + 51 | 0] << 2;
   HEAP8[$6 + 51 | 0] = HEAPU8[$6 + 51 | 0] | HEAPU8[$6 + 51 | 0] << 4;
   HEAP32[$6 + 44 >> 2] = HEAP32[$6 + 68 >> 2];
   while (1) {
    if (HEAP32[$6 + 44 >> 2] > HEAP32[$6 + 60 >> 2]) {
     break block
    }
    $0 = HEAP32[$6 + 76 >> 2];
    HEAP32[$6 + 40 >> 2] = Math_imul(HEAP32[$6 + 44 >> 2], HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8);
    HEAP32[$6 + 36 >> 2] = HEAP32[$6 + 72 >> 2] + HEAP32[$6 + 40 >> 2];
    HEAP32[$6 + 32 >> 2] = HEAP32[$6 + 64 >> 2] + HEAP32[$6 + 40 >> 2];
    HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 52 >> 2] + (HEAP32[$6 + 36 >> 2] >> 3);
    if (HEAP32[$6 + 36 >> 2] & 7) {
     HEAP32[$6 + 24 >> 2] = 8 - (HEAP32[$6 + 36 >> 2] & 7);
     HEAP32[$6 + 20 >> 2] = 255 << HEAP32[$6 + 24 >> 2] ^ -1;
     HEAP8[HEAP32[$6 + 28 >> 2]] = HEAPU8[HEAP32[$6 + 28 >> 2]] & (HEAP32[$6 + 20 >> 2] ^ -1) | HEAPU8[$6 + 51 | 0] & HEAP32[$6 + 20 >> 2];
     HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 28 >> 2] + 1;
     HEAP32[$6 + 36 >> 2] = (HEAP32[$6 + 36 >> 2] & -8) + 8;
    }
    while (1) {
     if (HEAP32[$6 + 32 >> 2] >= (HEAP32[$6 + 36 >> 2] + 7 | 0)) {
      $1 = HEAPU8[$6 + 51 | 0];
      $0 = HEAP32[$6 + 28 >> 2];
      HEAP32[$6 + 28 >> 2] = $0 + 1;
      HEAP8[$0 | 0] = $1;
      HEAP32[$6 + 36 >> 2] = HEAP32[$6 + 36 >> 2] + 8;
      continue;
     }
     break;
    };
    if (HEAP32[$6 + 36 >> 2] <= HEAP32[$6 + 32 >> 2]) {
     HEAP32[$6 + 16 >> 2] = (HEAP32[$6 + 32 >> 2] + 1 | 0) - HEAP32[$6 + 36 >> 2];
     HEAP32[$6 + 12 >> 2] = 255 >> HEAP32[$6 + 16 >> 2] ^ -1;
     HEAP8[HEAP32[$6 + 28 >> 2]] = HEAPU8[HEAP32[$6 + 28 >> 2]] & (HEAP32[$6 + 12 >> 2] ^ -1) | HEAPU8[$6 + 51 | 0] & HEAP32[$6 + 12 >> 2];
    }
    HEAP32[$6 + 44 >> 2] = HEAP32[$6 + 44 >> 2] + 1;
    continue;
   };
  }
  __stack_pointer = $6 + 80 | 0;
 }
 
 function lcdSetPixel_ArrayBuffer_flat2($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  $0 = HEAP32[$4 + 28 >> 2];
  HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 24 >> 2] + Math_imul(HEAP32[$4 + 20 >> 2], HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8);
  HEAP32[$4 + 8 >> 2] = (HEAP32[$4 + 12 >> 2] & 3) << 1;
  $0 = HEAP32[$4 + 28 >> 2];
  HEAP32[$4 + 4 >> 2] = (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) + (HEAP32[$4 + 12 >> 2] >> 2);
  HEAP8[HEAP32[$4 + 4 >> 2]] = HEAPU8[HEAP32[$4 + 4 >> 2]] & 65343 >> HEAP32[$4 + 8 >> 2] | (HEAP32[$4 + 16 >> 2] & 3) << 6 - HEAP32[$4 + 8 >> 2];
 }
 
 function lcdGetPixel_ArrayBuffer_flat2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  $0 = HEAP32[$3 + 28 >> 2];
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 24 >> 2] + Math_imul(HEAP32[$3 + 20 >> 2], HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8);
  HEAP32[$3 + 12 >> 2] = (HEAP32[$3 + 16 >> 2] & 3) << 1;
  $0 = HEAP32[$3 + 28 >> 2];
  HEAP32[$3 + 8 >> 2] = (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) + (HEAP32[$3 + 16 >> 2] >> 2);
  return HEAPU8[HEAP32[$3 + 8 >> 2]] >> 6 - HEAP32[$3 + 12 >> 2] & 3;
 }
 
 function lcdFillRect_ArrayBuffer_flat2($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 80 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 76 >> 2] = $0;
  HEAP32[$6 + 72 >> 2] = $1;
  HEAP32[$6 + 68 >> 2] = $2;
  HEAP32[$6 + 64 >> 2] = $3;
  HEAP32[$6 + 60 >> 2] = $4;
  HEAP32[$6 + 56 >> 2] = $5;
  block : {
   if ((HEAP32[$6 + 64 >> 2] - HEAP32[$6 + 72 >> 2] | 0) < 4) {
    lcdFillRect_ArrayBuffer_flat(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 72 >> 2], HEAP32[$6 + 68 >> 2], HEAP32[$6 + 64 >> 2], HEAP32[$6 + 60 >> 2], HEAP32[$6 + 56 >> 2]);
    break block;
   }
   $0 = HEAP32[$6 + 76 >> 2];
   HEAP32[$6 + 52 >> 2] = HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24);
   HEAP32[$6 + 56 >> 2] = HEAP32[$6 + 56 >> 2] & 3;
   HEAP8[$6 + 51 | 0] = HEAP32[$6 + 56 >> 2] & 255 | HEAP32[$6 + 56 >> 2] << 2 & 255;
   HEAP8[$6 + 51 | 0] = HEAPU8[$6 + 51 | 0] | HEAPU8[$6 + 51 | 0] << 4;
   HEAP32[$6 + 44 >> 2] = HEAP32[$6 + 68 >> 2];
   while (1) {
    if (HEAP32[$6 + 44 >> 2] > HEAP32[$6 + 60 >> 2]) {
     break block
    }
    $0 = HEAP32[$6 + 76 >> 2];
    HEAP32[$6 + 40 >> 2] = Math_imul(HEAP32[$6 + 44 >> 2], HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8);
    HEAP32[$6 + 36 >> 2] = HEAP32[$6 + 72 >> 2] + HEAP32[$6 + 40 >> 2];
    HEAP32[$6 + 32 >> 2] = HEAP32[$6 + 64 >> 2] + HEAP32[$6 + 40 >> 2];
    HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 52 >> 2] + (HEAP32[$6 + 36 >> 2] >> 2);
    if (HEAP32[$6 + 36 >> 2] & 3) {
     HEAP32[$6 + 24 >> 2] = 4 - (HEAP32[$6 + 36 >> 2] & 3);
     HEAP32[$6 + 20 >> 2] = 255 << (HEAP32[$6 + 24 >> 2] << 1) ^ -1;
     HEAP8[HEAP32[$6 + 28 >> 2]] = HEAPU8[HEAP32[$6 + 28 >> 2]] & (HEAP32[$6 + 20 >> 2] ^ -1) | HEAPU8[$6 + 51 | 0] & HEAP32[$6 + 20 >> 2];
     HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 28 >> 2] + 1;
     HEAP32[$6 + 36 >> 2] = (HEAP32[$6 + 36 >> 2] & -4) + 4;
    }
    while (1) {
     if (HEAP32[$6 + 32 >> 2] >= (HEAP32[$6 + 36 >> 2] + 3 | 0)) {
      $1 = HEAPU8[$6 + 51 | 0];
      $0 = HEAP32[$6 + 28 >> 2];
      HEAP32[$6 + 28 >> 2] = $0 + 1;
      HEAP8[$0 | 0] = $1;
      HEAP32[$6 + 36 >> 2] = HEAP32[$6 + 36 >> 2] + 4;
      continue;
     }
     break;
    };
    if (HEAP32[$6 + 36 >> 2] <= HEAP32[$6 + 32 >> 2]) {
     HEAP32[$6 + 16 >> 2] = (HEAP32[$6 + 32 >> 2] + 1 | 0) - HEAP32[$6 + 36 >> 2];
     HEAP32[$6 + 12 >> 2] = 255 >> (HEAP32[$6 + 16 >> 2] << 1) ^ -1;
     HEAP8[HEAP32[$6 + 28 >> 2]] = HEAPU8[HEAP32[$6 + 28 >> 2]] & (HEAP32[$6 + 12 >> 2] ^ -1) | HEAPU8[$6 + 51 | 0] & HEAP32[$6 + 12 >> 2];
    }
    HEAP32[$6 + 44 >> 2] = HEAP32[$6 + 44 >> 2] + 1;
    continue;
   };
  }
  __stack_pointer = $6 + 80 | 0;
 }
 
 function lcdSetPixel_ArrayBuffer_flat4($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  $0 = HEAP32[$4 + 28 >> 2];
  HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 24 >> 2] + Math_imul(HEAP32[$4 + 20 >> 2], HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8);
  HEAP32[$4 + 8 >> 2] = (HEAP32[$4 + 12 >> 2] & 1) << 2;
  $0 = HEAP32[$4 + 28 >> 2];
  HEAP32[$4 + 4 >> 2] = (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) + (HEAP32[$4 + 12 >> 2] >> 1);
  HEAP8[HEAP32[$4 + 4 >> 2]] = HEAPU8[HEAP32[$4 + 4 >> 2]] & 65295 >> HEAP32[$4 + 8 >> 2] | (HEAP32[$4 + 16 >> 2] & 15) << 4 - HEAP32[$4 + 8 >> 2];
 }
 
 function lcdGetPixel_ArrayBuffer_flat4($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  $0 = HEAP32[$3 + 28 >> 2];
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 24 >> 2] + Math_imul(HEAP32[$3 + 20 >> 2], HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8);
  HEAP32[$3 + 12 >> 2] = (HEAP32[$3 + 16 >> 2] & 1) << 2;
  $0 = HEAP32[$3 + 28 >> 2];
  HEAP32[$3 + 8 >> 2] = (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) + (HEAP32[$3 + 16 >> 2] >> 1);
  return HEAPU8[HEAP32[$3 + 8 >> 2]] >> 4 - HEAP32[$3 + 12 >> 2] & 15;
 }
 
 function lcdFillRect_ArrayBuffer_flat4($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = __stack_pointer + -64 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 60 >> 2] = $0;
  HEAP32[$6 + 56 >> 2] = $1;
  HEAP32[$6 + 52 >> 2] = $2;
  HEAP32[$6 + 48 >> 2] = $3;
  HEAP32[$6 + 44 >> 2] = $4;
  HEAP32[$6 + 40 >> 2] = $5;
  block : {
   if ((HEAP32[$6 + 48 >> 2] - HEAP32[$6 + 56 >> 2] | 0) < 2) {
    lcdFillRect_ArrayBuffer_flat(HEAP32[$6 + 60 >> 2], HEAP32[$6 + 56 >> 2], HEAP32[$6 + 52 >> 2], HEAP32[$6 + 48 >> 2], HEAP32[$6 + 44 >> 2], HEAP32[$6 + 40 >> 2]);
    break block;
   }
   $0 = HEAP32[$6 + 60 >> 2];
   HEAP32[$6 + 36 >> 2] = HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24);
   HEAP32[$6 + 40 >> 2] = HEAP32[$6 + 40 >> 2] & 15;
   HEAP8[$6 + 35 | 0] = HEAP32[$6 + 40 >> 2] & 255 | HEAP32[$6 + 40 >> 2] << 4 & 255;
   HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 52 >> 2];
   while (1) {
    if (HEAP32[$6 + 28 >> 2] > HEAP32[$6 + 44 >> 2]) {
     break block
    }
    $0 = HEAP32[$6 + 60 >> 2];
    HEAP32[$6 + 24 >> 2] = Math_imul(HEAP32[$6 + 28 >> 2], HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8);
    HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 56 >> 2] + HEAP32[$6 + 24 >> 2];
    HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 48 >> 2] + HEAP32[$6 + 24 >> 2];
    HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 36 >> 2] + (HEAP32[$6 + 20 >> 2] >> 1);
    if (HEAP32[$6 + 20 >> 2] & 1) {
     HEAP8[HEAP32[$6 + 12 >> 2]] = HEAP32[$6 + 40 >> 2] | HEAPU8[HEAP32[$6 + 12 >> 2]] & 240;
     HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 12 >> 2] + 1;
     HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 20 >> 2] + 1;
    }
    while (1) {
     if (HEAP32[$6 + 16 >> 2] >= (HEAP32[$6 + 20 >> 2] + 1 | 0)) {
      $1 = HEAPU8[$6 + 35 | 0];
      $0 = HEAP32[$6 + 12 >> 2];
      HEAP32[$6 + 12 >> 2] = $0 + 1;
      HEAP8[$0 | 0] = $1;
      HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 20 >> 2] + 2;
      continue;
     }
     break;
    };
    if (HEAP32[$6 + 20 >> 2] <= HEAP32[$6 + 16 >> 2]) {
     HEAP8[HEAP32[$6 + 12 >> 2]] = HEAPU8[HEAP32[$6 + 12 >> 2]] & 15 | HEAP32[$6 + 40 >> 2] << 4
    }
    HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 28 >> 2] + 1;
    continue;
   };
  }
  __stack_pointer = $6 - -64 | 0;
 }
 
 function lcdSetPixel_ArrayBuffer_flat8($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
  $1 = HEAP32[$4 + 12 >> 2];
  $0 = HEAP32[$4 + 12 >> 2];
  HEAP8[(HEAP32[$4 + 8 >> 2] + Math_imul(HEAP32[$4 + 4 >> 2], HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) | 0) + (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) | 0] = HEAP32[$4 >> 2];
 }
 
 function lcdGetPixel_ArrayBuffer_flat8($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = HEAP32[$3 + 12 >> 2];
  $0 = HEAP32[$3 + 12 >> 2];
  return HEAPU8[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) | 0) + (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) | 0];
 }
 
 function lcdFillRect_ArrayBuffer_flat8($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 48 | 0;
  HEAP32[$6 + 44 >> 2] = $0;
  HEAP32[$6 + 40 >> 2] = $1;
  HEAP32[$6 + 36 >> 2] = $2;
  HEAP32[$6 + 32 >> 2] = $3;
  HEAP32[$6 + 28 >> 2] = $4;
  HEAP32[$6 + 24 >> 2] = $5;
  HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 36 >> 2];
  while (1) {
   if (HEAP32[$6 + 20 >> 2] <= HEAP32[$6 + 28 >> 2]) {
    $1 = HEAP32[$6 + 44 >> 2];
    $0 = HEAP32[$6 + 44 >> 2];
    HEAP32[$6 + 16 >> 2] = (HEAP32[$6 + 40 >> 2] + Math_imul(HEAP32[$6 + 20 >> 2], HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) | 0) + (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24));
    HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 40 >> 2];
    while (1) {
     if (HEAP32[$6 + 12 >> 2] <= HEAP32[$6 + 32 >> 2]) {
      $1 = HEAP32[$6 + 24 >> 2];
      $0 = HEAP32[$6 + 16 >> 2];
      HEAP32[$6 + 16 >> 2] = $0 + 1;
      HEAP8[$0 | 0] = $1;
      HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 12 >> 2] + 1;
      continue;
     }
     break;
    };
    HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 20 >> 2] + 1;
    continue;
   }
   break;
  };
 }
 
 function lcdScroll_ArrayBuffer_flat8($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0;
  $7 = __stack_pointer - 48 | 0;
  HEAP32[$7 + 44 >> 2] = $0;
  HEAP32[$7 + 40 >> 2] = $1;
  HEAP32[$7 + 36 >> 2] = $2;
  HEAP32[$7 + 32 >> 2] = $3;
  HEAP32[$7 + 28 >> 2] = $4;
  HEAP32[$7 + 24 >> 2] = $5;
  HEAP32[$7 + 20 >> 2] = $6;
  HEAP32[$7 + 16 >> 2] = HEAP32[$7 + 24 >> 2] - HEAP32[$7 + 32 >> 2];
  HEAP32[$7 + 12 >> 2] = HEAP32[$7 + 20 >> 2] - HEAP32[$7 + 28 >> 2];
  HEAP32[$7 + 8 >> 2] = 0 - (HEAP32[$7 + 40 >> 2] + Math_imul(HEAP32[$7 + 36 >> 2], HEAP32[$7 + 16 >> 2]) | 0);
  $0 = HEAP32[$7 + 44 >> 2];
  HEAP32[$7 + 4 >> 2] = HEAP32[$7 + 32 >> 2] + Math_imul(HEAP32[$7 + 28 >> 2] - HEAP32[$7 + 36 >> 2] | 0, HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8);
  HEAP32[$7 >> 2] = 0;
  while (1) {
   if (HEAP32[$7 >> 2] < (HEAP32[$7 + 12 >> 2] + HEAP32[$7 + 36 >> 2] | 0)) {
    block : {
     if (HEAP32[$7 + 8 >> 2] < 0) {
      $0 = HEAP32[$7 + 44 >> 2];
      $1 = HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24);
      $2 = HEAP32[$7 + 4 >> 2];
      $3 = HEAP32[$7 + 8 >> 2];
      $0 = HEAP32[$7 + 44 >> 2];
      $4 = HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24);
      $5 = HEAP32[$7 + 4 >> 2];
      $0 = HEAP32[$7 + 16 >> 2] + HEAP32[$7 + 40 >> 2] | 0;
      if ($0) {
       wasm2js_memory_copy(($2 - $3 | 0) + $1 | 0, $4 + $5 | 0, $0)
      }
      break block;
     }
     $0 = HEAP32[$7 + 44 >> 2];
     $1 = HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24);
     $2 = HEAP32[$7 + 4 >> 2];
     $0 = HEAP32[$7 + 44 >> 2];
     $3 = HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24);
     $4 = HEAP32[$7 + 4 >> 2];
     $5 = HEAP32[$7 + 8 >> 2];
     $0 = HEAP32[$7 + 16 >> 2] - HEAP32[$7 + 40 >> 2] | 0;
     if ($0) {
      wasm2js_memory_copy($1 + $2 | 0, ($4 + $5 | 0) + $3 | 0, $0)
     }
    }
    $0 = HEAP32[$7 + 44 >> 2];
    HEAP32[$7 + 4 >> 2] = HEAP32[$7 + 4 >> 2] + (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8);
    HEAP32[$7 >> 2] = HEAP32[$7 >> 2] + 1;
    continue;
   }
   break;
  };
 }
 
 function lcdInit_ArrayBuffer($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  block : {
   if (HEAP32[$2 + 8 >> 2]) {
    $0 = HEAP32[$2 + 12 >> 2];
    jsvUnLock(jsvAddNamedChild(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), HEAP32[$2 + 8 >> 2], 128153));
    break block;
   }
   HEAP32[$2 + 4 >> 2] = jswrap_arraybuffer_constructor(graphicsGetMemoryRequired(HEAP32[$2 + 12 >> 2]));
   $0 = HEAP32[$2 + 12 >> 2];
   jsvAddNamedChildAndUnLock(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), HEAP32[$2 + 4 >> 2], 128153);
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function lcdSetCallbacks_ArrayBuffer($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[$1 + 8 >> 2] = jsvObjectGetChildIfExists(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 128153);
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$1 >> 2] = jsvGetDataPointer(HEAP32[$1 + 8 >> 2], $1 + 4 | 0);
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
  block9 : {
   block : {
    if (!HEAP32[$1 >> 2]) {
     break block
    }
    if (HEAPU32[$1 + 4 >> 2] < graphicsGetMemoryRequired(HEAP32[$1 + 12 >> 2]) >>> 0) {
     break block
    }
    $0 = HEAP32[$1 + 12 >> 2];
    if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 1) {
     break block
    }
    $0 = HEAP32[$1 + 12 >> 2];
    $2 = HEAP32[$1 >> 2];
    HEAP8[$0 + 48 | 0] = $2;
    HEAP8[$0 + 49 | 0] = $2 >>> 8;
    HEAP8[$0 + 50 | 0] = $2 >>> 16;
    HEAP8[$0 + 51 | 0] = $2 >>> 24;
    block2 : {
     block1 : {
      if (HEAPU8[HEAP32[$1 + 12 >> 2] + 16 | 0] != 1) {
       break block1
      }
      $0 = HEAP32[$1 + 12 >> 2];
      if (!((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4)) {
       break block1
      }
      $0 = HEAP32[$1 + 12 >> 2];
      if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 11) {
       break block1
      }
      $0 = HEAP32[$1 + 12 >> 2];
      HEAP8[$0 + 52 | 0] = 66;
      HEAP8[$0 + 53 | 0] = 2;
      HEAP8[$0 + 54 | 0] = 0;
      HEAP8[$0 + 55 | 0] = 0;
      $0 = HEAP32[$1 + 12 >> 2];
      HEAP8[$0 + 60 | 0] = 67;
      HEAP8[$0 + 61 | 0] = 2;
      HEAP8[$0 + 62 | 0] = 0;
      HEAP8[$0 + 63 | 0] = 0;
      $0 = HEAP32[$1 + 12 >> 2];
      HEAP8[$0 + 56 | 0] = 68;
      HEAP8[$0 + 57 | 0] = 2;
      HEAP8[$0 + 58 | 0] = 0;
      HEAP8[$0 + 59 | 0] = 0;
      break block2;
     }
     block4 : {
      block3 : {
       if (HEAPU8[HEAP32[$1 + 12 >> 2] + 16 | 0] != 2) {
        break block3
       }
       $0 = HEAP32[$1 + 12 >> 2];
       if (!((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4)) {
        break block3
       }
       $0 = HEAP32[$1 + 12 >> 2];
       if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 11) {
        break block3
       }
       $0 = HEAP32[$1 + 12 >> 2];
       HEAP8[$0 + 52 | 0] = 69;
       HEAP8[$0 + 53 | 0] = 2;
       HEAP8[$0 + 54 | 0] = 0;
       HEAP8[$0 + 55 | 0] = 0;
       $0 = HEAP32[$1 + 12 >> 2];
       HEAP8[$0 + 60 | 0] = 70;
       HEAP8[$0 + 61 | 0] = 2;
       HEAP8[$0 + 62 | 0] = 0;
       HEAP8[$0 + 63 | 0] = 0;
       $0 = HEAP32[$1 + 12 >> 2];
       HEAP8[$0 + 56 | 0] = 71;
       HEAP8[$0 + 57 | 0] = 2;
       HEAP8[$0 + 58 | 0] = 0;
       HEAP8[$0 + 59 | 0] = 0;
       break block4;
      }
      block6 : {
       block5 : {
        if (HEAPU8[HEAP32[$1 + 12 >> 2] + 16 | 0] != 4) {
         break block5
        }
        $0 = HEAP32[$1 + 12 >> 2];
        if (!((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4)) {
         break block5
        }
        $0 = HEAP32[$1 + 12 >> 2];
        if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 11) {
         break block5
        }
        $0 = HEAP32[$1 + 12 >> 2];
        HEAP8[$0 + 52 | 0] = 72;
        HEAP8[$0 + 53 | 0] = 2;
        HEAP8[$0 + 54 | 0] = 0;
        HEAP8[$0 + 55 | 0] = 0;
        $0 = HEAP32[$1 + 12 >> 2];
        HEAP8[$0 + 60 | 0] = 73;
        HEAP8[$0 + 61 | 0] = 2;
        HEAP8[$0 + 62 | 0] = 0;
        HEAP8[$0 + 63 | 0] = 0;
        $0 = HEAP32[$1 + 12 >> 2];
        HEAP8[$0 + 56 | 0] = 74;
        HEAP8[$0 + 57 | 0] = 2;
        HEAP8[$0 + 58 | 0] = 0;
        HEAP8[$0 + 59 | 0] = 0;
        break block6;
       }
       block8 : {
        block7 : {
         if (HEAPU8[HEAP32[$1 + 12 >> 2] + 16 | 0] != 8) {
          break block7
         }
         $0 = HEAP32[$1 + 12 >> 2];
         if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 11) {
          break block7
         }
         $0 = HEAP32[$1 + 12 >> 2];
         HEAP8[$0 + 52 | 0] = 75;
         HEAP8[$0 + 53 | 0] = 2;
         HEAP8[$0 + 54 | 0] = 0;
         HEAP8[$0 + 55 | 0] = 0;
         $0 = HEAP32[$1 + 12 >> 2];
         HEAP8[$0 + 60 | 0] = 76;
         HEAP8[$0 + 61 | 0] = 2;
         HEAP8[$0 + 62 | 0] = 0;
         HEAP8[$0 + 63 | 0] = 0;
         $0 = HEAP32[$1 + 12 >> 2];
         HEAP8[$0 + 56 | 0] = 77;
         HEAP8[$0 + 57 | 0] = 2;
         HEAP8[$0 + 58 | 0] = 0;
         HEAP8[$0 + 59 | 0] = 0;
         $0 = HEAP32[$1 + 12 >> 2];
         HEAP8[$0 + 68 | 0] = 78;
         HEAP8[$0 + 69 | 0] = 2;
         HEAP8[$0 + 70 | 0] = 0;
         HEAP8[$0 + 71 | 0] = 0;
         break block8;
        }
        $0 = HEAP32[$1 + 12 >> 2];
        HEAP8[$0 + 52 | 0] = 79;
        HEAP8[$0 + 53 | 0] = 2;
        HEAP8[$0 + 54 | 0] = 0;
        HEAP8[$0 + 55 | 0] = 0;
        $0 = HEAP32[$1 + 12 >> 2];
        HEAP8[$0 + 60 | 0] = 80;
        HEAP8[$0 + 61 | 0] = 2;
        HEAP8[$0 + 62 | 0] = 0;
        HEAP8[$0 + 63 | 0] = 0;
        $0 = HEAP32[$1 + 12 >> 2];
        HEAP8[$0 + 56 | 0] = 81;
        HEAP8[$0 + 57 | 0] = 2;
        HEAP8[$0 + 58 | 0] = 0;
        HEAP8[$0 + 59 | 0] = 0;
        $0 = HEAP32[$1 + 12 >> 2];
        HEAP8[$0 + 68 | 0] = 82;
        HEAP8[$0 + 69 | 0] = 2;
        HEAP8[$0 + 70 | 0] = 0;
        HEAP8[$0 + 71 | 0] = 0;
       }
      }
     }
    }
    break block9;
   }
   if (jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) {
    $0 = HEAP32[$1 + 12 >> 2];
    $2 = HEAP32[$1 + 8 >> 2];
    HEAP8[$0 + 48 | 0] = $2;
    HEAP8[$0 + 49 | 0] = $2 >>> 8;
    HEAP8[$0 + 50 | 0] = $2 >>> 16;
    HEAP8[$0 + 51 | 0] = $2 >>> 24;
    $0 = HEAP32[$1 + 12 >> 2];
    HEAP8[$0 + 52 | 0] = 83;
    HEAP8[$0 + 53 | 0] = 2;
    HEAP8[$0 + 54 | 0] = 0;
    HEAP8[$0 + 55 | 0] = 0;
    $0 = HEAP32[$1 + 12 >> 2];
    HEAP8[$0 + 60 | 0] = 84;
    HEAP8[$0 + 61 | 0] = 2;
    HEAP8[$0 + 62 | 0] = 0;
    HEAP8[$0 + 63 | 0] = 0;
    $0 = HEAP32[$1 + 12 >> 2];
    HEAP8[$0 + 56 | 0] = 85;
    HEAP8[$0 + 57 | 0] = 2;
    HEAP8[$0 + 58 | 0] = 0;
    HEAP8[$0 + 59 | 0] = 0;
   }
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function lcdSetPixel_JS($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  $0 = HEAP32[$4 + 28 >> 2];
  HEAP32[$4 + 12 >> 2] = jsvObjectGetChildIfExists(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 135744);
  if (HEAP32[$4 + 12 >> 2]) {
   HEAP32[$4 >> 2] = jsvNewFromInteger(HEAP32[$4 + 24 >> 2]);
   HEAP32[$4 + 4 >> 2] = jsvNewFromInteger(HEAP32[$4 + 20 >> 2]);
   HEAP32[$4 + 8 >> 2] = jsvNewFromInteger(HEAP32[$4 + 16 >> 2]);
   $0 = HEAP32[$4 + 28 >> 2];
   jsvUnLock(jspExecuteFunction(HEAP32[$4 + 12 >> 2], HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 3, $4));
   jsvUnLockMany(3, $4);
   jsvUnLock(HEAP32[$4 + 12 >> 2]);
  }
  __stack_pointer = $4 + 32 | 0;
 }
 
 function lcdFillRect_JS($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 48 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 44 >> 2] = $0;
  HEAP32[$6 + 40 >> 2] = $1;
  HEAP32[$6 + 36 >> 2] = $2;
  HEAP32[$6 + 32 >> 2] = $3;
  HEAP32[$6 + 28 >> 2] = $4;
  HEAP32[$6 + 24 >> 2] = $5;
  $0 = HEAP32[$6 + 44 >> 2];
  HEAP32[$6 + 20 >> 2] = jsvObjectGetChildIfExists(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 125102);
  block : {
   if (HEAP32[$6 + 20 >> 2]) {
    HEAP32[$6 >> 2] = jsvNewFromInteger(HEAP32[$6 + 40 >> 2]);
    HEAP32[$6 + 4 >> 2] = jsvNewFromInteger(HEAP32[$6 + 36 >> 2]);
    HEAP32[$6 + 8 >> 2] = jsvNewFromInteger(HEAP32[$6 + 32 >> 2]);
    HEAP32[$6 + 12 >> 2] = jsvNewFromInteger(HEAP32[$6 + 28 >> 2]);
    HEAP32[$6 + 16 >> 2] = jsvNewFromInteger(HEAP32[$6 + 24 >> 2]);
    $0 = HEAP32[$6 + 44 >> 2];
    jsvUnLock(jspExecuteFunction(HEAP32[$6 + 20 >> 2], HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 5, $6));
    jsvUnLockMany(5, $6);
    jsvUnLock(HEAP32[$6 + 20 >> 2]);
    break block;
   }
   graphicsFallbackFillRect(HEAP32[$6 + 44 >> 2], HEAP32[$6 + 40 >> 2], HEAP32[$6 + 36 >> 2], HEAP32[$6 + 32 >> 2], HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2]);
  }
  __stack_pointer = $6 + 48 | 0;
 }
 
 function lcdInit_JS($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = HEAP32[$3 + 12 >> 2];
  jsvObjectSetChild(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 135744, HEAP32[$3 + 8 >> 2]);
  $0 = HEAP32[$3 + 12 >> 2];
  jsvObjectSetChild(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 125102, HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function lcdSetCallbacks_JS($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP8[$0 + 52 | 0] = 86;
  HEAP8[$0 + 53 | 0] = 2;
  HEAP8[$0 + 54 | 0] = 0;
  HEAP8[$0 + 55 | 0] = 0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP8[$0 + 56 | 0] = 87;
  HEAP8[$0 + 57 | 0] = 2;
  HEAP8[$0 + 58 | 0] = 0;
  HEAP8[$0 + 59 | 0] = 0;
 }
 
 function jsGfxChanged() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  HEAP8[$0 + 15 | 0] = HEAP8[370796] & 1;
  HEAP8[370796] = 0;
  return HEAP8[$0 + 15 | 0] & 1;
 }
 
 function jsGfxGetPtr($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block1 : {
   if (!(HEAP32[$1 + 8 >> 2] < 176 & HEAP32[$1 + 8 >> 2] >= 0)) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block1;
   }
   HEAP32[$1 + 12 >> 2] = Math_imul(HEAP32[$1 + 8 >> 2], 68) + 370802;
  }
  return HEAP32[$1 + 12 >> 2];
 }
 
 function lcdMemLCD_getRowPtr($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return Math_imul(HEAP32[$1 + 12 >> 2], 68) + 382770 | 0;
 }
 
 function lcdMemLCD_getPixel($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  HEAP32[$3 + 16 >> 2] = (Math_imul(HEAP32[$3 + 24 >> 2], 3) + 16 | 0) + Math_imul(HEAP32[$3 + 20 >> 2], 544);
  HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 16 >> 2] & 7;
  $0 = HEAP32[$3 + 16 >> 2] >> 3;
  HEAP16[$3 + 10 >> 1] = HEAPU8[$0 + 382768 | 0] | HEAPU8[$0 + 382769 | 0] << 8;
  HEAP32[$3 + 4 >> 2] = HEAPU16[$3 + 10 >> 1] >> HEAP32[$3 + 12 >> 2] & 7;
  return (HEAP32[$3 + 4 >> 2] & 1 ? 63488 : 0) | (HEAP32[$3 + 4 >> 2] & 2 ? 2016 : 0) | (HEAP32[$3 + 4 >> 2] & 4 ? 31 : 0);
 }
 
 function lcdMemLCD_setPixel($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  HEAP32[$4 + 16 >> 2] = lcdMemLCD_convert16toLCD(HEAP32[$4 + 16 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2]);
  lcdMemLCD_waitForSendComplete();
  HEAP32[$4 + 12 >> 2] = (Math_imul(HEAP32[$4 + 24 >> 2], 3) + 16 | 0) + Math_imul(HEAP32[$4 + 20 >> 2], 544);
  HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 12 >> 2] & 7;
  $0 = HEAP32[$4 + 12 >> 2] >> 3;
  HEAP16[$4 + 6 >> 1] = HEAPU8[$0 + 382768 | 0] | HEAPU8[$0 + 382769 | 0] << 8;
  $0 = HEAP32[$4 + 12 >> 2] >> 3;
  $1 = HEAPU16[$4 + 6 >> 1] & (7 << HEAP32[$4 + 8 >> 2] ^ -1) | HEAP32[$4 + 16 >> 2] << HEAP32[$4 + 8 >> 2];
  HEAP8[$0 + 382768 | 0] = $1;
  HEAP8[$0 + 382769 | 0] = $1 >>> 8;
  __stack_pointer = $4 + 32 | 0;
 }
 
 function lcdMemLCD_convert16toLCD($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = HEAPU16[(((HEAP32[$3 + 4 >> 2] & 1) << 2) + 171904 | 0) + ((HEAP32[$3 + 8 >> 2] & 1) << 1) >> 1] + (HEAP32[$3 + 12 >> 2] & 59164);
  return !!(HEAP32[$3 + 12 >> 2] & 65536) | (HEAP32[$3 + 12 >> 2] & 2048 ? 2 : 0) | (HEAP32[$3 + 12 >> 2] & 32 ? 4 : 0);
 }
 
 function lcdMemLCD_waitForSendComplete() {
  var $0 = 0, $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = 1e6;
  while (1) {
   $0 = 0;
   if (HEAP8[394872] & 1) {
    $0 = HEAP32[$1 + 12 >> 2] - 1 | 0;
    HEAP32[$1 + 12 >> 2] = $0;
    $0 = ($0 | 0) != 0;
   }
   if ($0) {
    continue
   }
   break;
  };
  if (HEAP8[394872] & 1) {
   HEAP8[394872] = 0
  }
 }
 
 function lcdMemLCD_fillRect($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 80 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 76 >> 2] = $0;
  HEAP32[$6 + 72 >> 2] = $1;
  HEAP32[$6 + 68 >> 2] = $2;
  HEAP32[$6 + 64 >> 2] = $3;
  HEAP32[$6 + 60 >> 2] = $4;
  HEAP32[$6 + 56 >> 2] = $5;
  lcdMemLCD_waitForSendComplete();
  block1 : {
   if (!(HEAP32[$6 + 72 >> 2] | HEAP32[$6 + 64 >> 2] != 175 | (HEAP32[$6 + 56 >> 2] != 65535 ? HEAP32[$6 + 56 >> 2] : 0))) {
    HEAP32[$6 + 52 >> 2] = Math_imul(HEAP32[$6 + 68 >> 2], 68) + 2;
    HEAP32[$6 + 48 >> 2] = HEAP32[$6 + 68 >> 2];
    while (1) {
     if (HEAP32[$6 + 48 >> 2] <= HEAP32[$6 + 60 >> 2]) {
      wasm2js_memory_fill(HEAP32[$6 + 52 >> 2] + 382768 | 0, HEAP32[$6 + 56 >> 2] ? 255 : 0, 66);
      HEAP32[$6 + 52 >> 2] = HEAP32[$6 + 52 >> 2] + 68;
      HEAP32[$6 + 48 >> 2] = HEAP32[$6 + 48 >> 2] + 1;
      continue;
     }
     break;
    };
    break block1;
   }
   HEAP32[$6 + 32 >> 2] = lcdMemLCD_convert16toLCD(HEAP32[$6 + 56 >> 2], 0, 0);
   HEAP32[$6 + 36 >> 2] = lcdMemLCD_convert16toLCD(HEAP32[$6 + 56 >> 2], 1, 0);
   HEAP32[$6 + 40 >> 2] = lcdMemLCD_convert16toLCD(HEAP32[$6 + 56 >> 2], 0, 1);
   HEAP32[$6 + 44 >> 2] = lcdMemLCD_convert16toLCD(HEAP32[$6 + 56 >> 2], 1, 1);
   HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 68 >> 2];
   while (1) {
    if (HEAP32[$6 + 28 >> 2] <= HEAP32[$6 + 60 >> 2]) {
     HEAP32[$6 + 24 >> 2] = ($6 + 32 | 0) + ((HEAP32[$6 + 28 >> 2] & 1) << 3);
     HEAP32[$6 + 20 >> 2] = (Math_imul(HEAP32[$6 + 72 >> 2], 3) + 16 | 0) + Math_imul(HEAP32[$6 + 28 >> 2], 544);
     HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 72 >> 2];
     while (1) {
      if (HEAP32[$6 + 16 >> 2] <= HEAP32[$6 + 64 >> 2]) {
       HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 20 >> 2] & 7;
       $0 = HEAP32[$6 + 20 >> 2] >> 3;
       HEAP16[$6 + 10 >> 1] = HEAPU8[$0 + 382768 | 0] | HEAPU8[$0 + 382769 | 0] << 8;
       $0 = HEAP32[$6 + 20 >> 2] >> 3;
       $1 = HEAPU16[$6 + 10 >> 1] & (7 << HEAP32[$6 + 12 >> 2] ^ -1) | HEAP32[HEAP32[$6 + 24 >> 2] + ((HEAP32[$6 + 16 >> 2] & 1) << 2) >> 2] << HEAP32[$6 + 12 >> 2];
       HEAP8[$0 + 382768 | 0] = $1;
       HEAP8[$0 + 382769 | 0] = $1 >>> 8;
       HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 20 >> 2] + 3;
       HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 16 >> 2] + 1;
       continue;
      }
      break;
     };
     HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 28 >> 2] + 1;
     continue;
    }
    break;
   };
  }
  __stack_pointer = $6 + 80 | 0;
 }
 
 function lcdMemLCD_scroll($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0;
  $7 = __stack_pointer - 128 | 0;
  __stack_pointer = $7;
  HEAP32[$7 + 124 >> 2] = $0;
  HEAP32[$7 + 120 >> 2] = $1;
  HEAP32[$7 + 116 >> 2] = $2;
  HEAP32[$7 + 112 >> 2] = $3;
  HEAP32[$7 + 108 >> 2] = $4;
  HEAP32[$7 + 104 >> 2] = $5;
  HEAP32[$7 + 100 >> 2] = $6;
  lcdMemLCD_waitForSendComplete();
  block1 : {
   if (!(!HEAP32[$7 + 112 >> 2] & HEAP32[$7 + 104 >> 2] == 175)) {
    graphicsFallbackScroll(HEAP32[$7 + 124 >> 2], HEAP32[$7 + 120 >> 2], HEAP32[$7 + 116 >> 2], HEAP32[$7 + 112 >> 2], HEAP32[$7 + 108 >> 2], HEAP32[$7 + 104 >> 2], HEAP32[$7 + 100 >> 2]);
    break block1;
   }
   if (HEAP32[$7 + 116 >> 2] <= 0) {
    HEAP32[$7 + 12 >> 2] = HEAP32[$7 + 108 >> 2];
    while (1) {
     if (HEAP32[$7 + 12 >> 2] <= (HEAP32[$7 + 100 >> 2] + HEAP32[$7 + 116 >> 2] | 0)) {
      HEAP32[$7 + 8 >> 2] = HEAP32[$7 + 12 >> 2] - HEAP32[$7 + 116 >> 2];
      lcdMemLCD_scrollX(HEAP32[$7 + 124 >> 2], $7 + 16 | 0, Math_imul(HEAP32[$7 + 8 >> 2], 68) + 382768 | 0, HEAP32[$7 + 120 >> 2]);
      wasm2js_memory_copy(Math_imul(HEAP32[$7 + 12 >> 2], 68) + 382770 | 0, $7 + 18 | 0, 66);
      HEAP32[$7 + 12 >> 2] = HEAP32[$7 + 12 >> 2] + 1;
      continue;
     }
     break;
    };
    break block1;
   }
   if (HEAP32[$7 + 116 >> 2] > 0) {
    HEAP32[$7 + 4 >> 2] = HEAP32[$7 + 100 >> 2] - HEAP32[$7 + 116 >> 2];
    while (1) {
     if (HEAP32[$7 + 4 >> 2] >= HEAP32[$7 + 108 >> 2]) {
      HEAP32[$7 >> 2] = HEAP32[$7 + 4 >> 2] + HEAP32[$7 + 116 >> 2];
      lcdMemLCD_scrollX(HEAP32[$7 + 124 >> 2], $7 + 16 | 0, Math_imul(HEAP32[$7 + 4 >> 2], 68) + 382768 | 0, HEAP32[$7 + 120 >> 2]);
      wasm2js_memory_copy(Math_imul(HEAP32[$7 >> 2], 68) + 382770 | 0, $7 + 18 | 0, 66);
      HEAP32[$7 + 4 >> 2] = HEAP32[$7 + 4 >> 2] - 1;
      continue;
     }
     break;
    };
   }
  }
  __stack_pointer = $7 + 128 | 0;
 }
 
 function lcdMemLCD_scrollX($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer + -64 | 0;
  HEAP32[$4 + 60 >> 2] = $0;
  HEAP32[$4 + 56 >> 2] = $1;
  HEAP32[$4 + 52 >> 2] = $2;
  HEAP32[$4 + 48 >> 2] = $3;
  HEAP32[$4 + 44 >> 2] = HEAP32[$4 + 56 >> 2] + 2;
  HEAP32[$4 + 40 >> 2] = HEAP32[$4 + 52 >> 2] + 2;
  block : {
   if (!HEAP32[$4 + 48 >> 2]) {
    wasm2js_memory_copy(HEAP32[$4 + 56 >> 2], HEAP32[$4 + 52 >> 2], 68);
    break block;
   }
   block1 : {
    if (HEAP32[$4 + 48 >> 2] < 0) {
     HEAP32[$4 + 36 >> 2] = Math_imul(HEAP32[$4 + 48 >> 2], -3);
     HEAP32[$4 + 32 >> 2] = HEAP32[$4 + 36 >> 2] >> 5;
     HEAP32[$4 + 36 >> 2] = HEAP32[$4 + 36 >> 2] & 31;
     HEAP32[$4 + 28 >> 2] = 528 - HEAP32[$4 + 36 >> 2] >> 5;
     HEAP32[$4 + 24 >> 2] = 0;
     while (1) {
      if (HEAP32[$4 + 24 >> 2] <= HEAP32[$4 + 28 >> 2]) {
       HEAP32[HEAP32[$4 + 44 >> 2] + (HEAP32[$4 + 24 >> 2] << 2) >> 2] = HEAP32[HEAP32[$4 + 40 >> 2] + ((HEAP32[$4 + 24 >> 2] + HEAP32[$4 + 32 >> 2] | 0) + 1 << 2) >> 2] << 32 - HEAP32[$4 + 36 >> 2] | HEAP32[HEAP32[$4 + 40 >> 2] + (HEAP32[$4 + 24 >> 2] + HEAP32[$4 + 32 >> 2] << 2) >> 2] >>> HEAP32[$4 + 36 >> 2];
       HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 24 >> 2] + 1;
       continue;
      }
      break;
     };
     break block1;
    }
    HEAP32[$4 + 20 >> 2] = Math_imul(HEAP32[$4 + 48 >> 2], 3);
    HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 20 >> 2] >> 5;
    HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 20 >> 2] & 31;
    HEAP32[$4 + 12 >> 2] = 543 - HEAP32[$4 + 20 >> 2] >> 5;
    HEAP32[$4 + 8 >> 2] = 0;
    while (1) {
     if (HEAP32[$4 + 8 >> 2] <= HEAP32[$4 + 12 >> 2]) {
      HEAP32[HEAP32[$4 + 44 >> 2] + (HEAP32[$4 + 8 >> 2] << 2) >> 2] = HEAP32[HEAP32[$4 + 40 >> 2] + (HEAP32[$4 + 8 >> 2] - HEAP32[$4 + 16 >> 2] << 2) >> 2] << HEAP32[$4 + 20 >> 2] | HEAP32[HEAP32[$4 + 40 >> 2] + (HEAP32[$4 + 8 >> 2] - (HEAP32[$4 + 16 >> 2] + 1 | 0) << 2) >> 2] >>> 32 - HEAP32[$4 + 20 >> 2];
      HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] + 1;
      continue;
     }
     break;
    };
   }
  }
 }
 
 function lcdMemLCD_flip($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 336 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 332 >> 2] = $0;
  $0 = HEAP32[$1 + 332 >> 2];
  $2 = HEAP32[$1 + 332 >> 2];
  if ((HEAPU8[$0 + 42 | 0] | HEAPU8[$0 + 43 | 0] << 8) << 16 >> 16 <= (HEAPU8[$2 + 46 | 0] | HEAPU8[$2 + 47 | 0] << 8) << 16 >> 16) {
   HEAP8[370796] = 1;
   lcdMemLCD_waitForSendComplete();
   $0 = HEAP32[$1 + 332 >> 2];
   HEAP32[$1 + 328 >> 2] = (HEAPU8[$0 + 42 | 0] | HEAPU8[$0 + 43 | 0] << 8) << 16 >> 16;
   $0 = HEAP32[$1 + 332 >> 2];
   HEAP32[$1 + 324 >> 2] = (HEAPU8[$0 + 46 | 0] | HEAPU8[$0 + 47 | 0] << 8) << 16 >> 16;
   HEAP32[$1 + 320 >> 2] = (HEAP32[$1 + 324 >> 2] + 1 | 0) - HEAP32[$1 + 328 >> 2];
   HEAP8[$1 + 319 | 0] = 0;
   if (HEAP32[98719]) {
    HEAP8[$1 + 319 | 0] = _jswrap_graphics_parseImage(HEAP32[$1 + 332 >> 2], HEAP32[98719], 0, $1 + 232 | 0) & 1
   }
   jshPinSetValue(5, 1);
   block3 : {
    if (HEAP8[$1 + 319 | 0] & 1) {
     HEAP8[$1 + 231 | 0] = ((HEAPU8[370732] | HEAPU8[370733] << 8 | (HEAPU8[370734] << 16 | HEAPU8[370735] << 24)) & 112) == 96;
     if (HEAP8[$1 + 231 | 0] & 1) {
      $0 = 176 - (HEAP32[$1 + 236 >> 2] + (HEAP16[197440] << 16 >> 16) | 0) | 0
     } else {
      $0 = HEAP16[197440] << 16 >> 16
     }
     HEAP32[$1 + 224 >> 2] = $0;
     $0 = HEAP32[$1 + 332 >> 2];
     HEAP32[$1 + 220 >> 2] = HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24);
     $0 = HEAP32[$1 + 332 >> 2];
     HEAP32[$1 + 216 >> 2] = HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
     $0 = HEAP32[$1 + 332 >> 2];
     $2 = HEAPU8[370709] | HEAPU8[370710] << 8;
     HEAP8[$0 + 17 | 0] = $2;
     HEAP8[$0 + 18 | 0] = $2 >>> 8;
     HEAP8[$0 + 19 | 0] = $2 >>> 16;
     HEAP8[$0 + 20 | 0] = $2 >>> 24;
     $0 = HEAP32[$1 + 332 >> 2];
     $2 = HEAPU8[370711] | HEAPU8[370712] << 8;
     HEAP8[$0 + 21 | 0] = $2;
     HEAP8[$0 + 22 | 0] = $2 >>> 8;
     HEAP8[$0 + 23 | 0] = $2 >>> 16;
     HEAP8[$0 + 24 | 0] = $2 >>> 24;
     HEAP32[$1 + 24 >> 2] = 0;
     HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 224 >> 2] << 8;
     wasm2js_memory_copy($1 + 60 | 0, $1 + 232 | 0, 84);
     HEAPF64[$1 + 40 >> 3] = HEAP8[$1 + 231 | 0] & 1 ? 3.141592 : 0.0;
     HEAPF64[$1 + 48 >> 3] = 1;
     HEAP8[$1 + 56 | 0] = 0;
     HEAP8[$1 + 57 | 0] = 0;
     jsvStringIteratorNew($1 + 144 | 0, HEAP32[$1 + 80 >> 2], HEAP32[$1 + 84 >> 2]);
     _jswrap_drawImageLayerInit($1 + 24 | 0);
     _jswrap_drawImageLayerSetStart($1 + 24 | 0, 0, HEAP32[$1 + 328 >> 2]);
     HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 328 >> 2];
     while (1) {
      if (HEAP32[$1 + 20 >> 2] <= HEAP32[$1 + 324 >> 2]) {
       HEAP32[$1 + 16 >> 2] = (HEAP32[$1 + 20 >> 2] & 1) + 176;
       HEAP32[$1 + 12 >> 2] = Math_imul(HEAP32[$1 + 16 >> 2], 68) + 382768;
       wasm2js_memory_copy(HEAP32[$1 + 12 >> 2], Math_imul(HEAP32[$1 + 20 >> 2], 68) + 382768 | 0, 68);
       if (!(HEAP32[$1 + 20 >> 2] < HEAP32[$1 + 224 >> 2] | HEAP32[$1 + 20 >> 2] >= (HEAP32[$1 + 224 >> 2] + HEAP32[$1 + 236 >> 2] | 0))) {
        _jswrap_drawImageLayerStartX($1 + 24 | 0);
        HEAP32[$1 + 8 >> 2] = 0;
        while (1) {
         if (HEAP32[$1 + 8 >> 2] < HEAP32[$1 + 232 >> 2]) {
          HEAP32[$1 >> 2] = HEAP32[$1 + 8 >> 2] + (HEAP16[197441] << 16 >> 16);
          if (!(!(_jswrap_drawImageLayerGetPixel($1 + 24 | 0, $1 + 4 | 0) & 1) | HEAP32[$1 >> 2] >= 176 | HEAP32[$1 >> 2] < 0)) {
           lcdMemLCD_setPixel(0, HEAP32[$1 >> 2], HEAP32[$1 + 16 >> 2], HEAP32[$1 + 4 >> 2])
          }
          _jswrap_drawImageLayerNextX($1 + 24 | 0);
          HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
          continue;
         }
         break;
        };
       }
       _jswrap_drawImageLayerNextY($1 + 24 | 0);
       wasm2js_memory_copy(Math_imul(HEAP32[$1 + 20 >> 2], 68) + 370800 | 0, HEAP32[$1 + 12 >> 2], 68);
       HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 20 >> 2] + 1;
       continue;
      }
      break;
     };
     jsvStringIteratorFree_1115($1 + 144 | 0);
     _jswrap_graphics_freeImageInfo($1 + 232 | 0);
     $0 = HEAP32[$1 + 332 >> 2];
     $2 = HEAP32[$1 + 220 >> 2];
     HEAP8[$0 + 17 | 0] = $2;
     HEAP8[$0 + 18 | 0] = $2 >>> 8;
     HEAP8[$0 + 19 | 0] = $2 >>> 16;
     HEAP8[$0 + 20 | 0] = $2 >>> 24;
     $0 = HEAP32[$1 + 332 >> 2];
     $2 = HEAP32[$1 + 216 >> 2];
     HEAP8[$0 + 21 | 0] = $2;
     HEAP8[$0 + 22 | 0] = $2 >>> 8;
     HEAP8[$0 + 23 | 0] = $2 >>> 16;
     HEAP8[$0 + 24 | 0] = $2 >>> 24;
     break block3;
    }
    wasm2js_memory_copy(370800, 382768, 11968);
   }
   $0 = HEAP32[$1 + 332 >> 2];
   HEAP8[$0 + 44 | 0] = 0;
   HEAP8[$0 + 45 | 0] = 128;
   $0 = HEAP32[$1 + 332 >> 2];
   HEAP8[$0 + 46 | 0] = 0;
   HEAP8[$0 + 47 | 0] = 128;
   $0 = HEAP32[$1 + 332 >> 2];
   HEAP8[$0 + 40 | 0] = 255;
   HEAP8[$0 + 41 | 0] = 127;
   $0 = HEAP32[$1 + 332 >> 2];
   HEAP8[$0 + 42 | 0] = 255;
   HEAP8[$0 + 43 | 0] = 127;
  }
  __stack_pointer = $1 + 336 | 0;
 }
 
 function jsvStringIteratorFree_1115($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function lcdMemLCD_init($0) {
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 28 >> 2] = $0;
  $0 = HEAP32[$1 + 28 >> 2];
  HEAP8[$0 + 12 | 0] = 176;
  HEAP8[$0 + 13 | 0] = 0;
  $0 = HEAP32[$1 + 28 >> 2];
  HEAP8[$0 + 14 | 0] = 176;
  HEAP8[$0 + 15 | 0] = 0;
  HEAP8[HEAP32[$1 + 28 >> 2] + 16 | 0] = 16;
  wasm2js_memory_fill(382768, 0, 12104);
  HEAP32[$1 + 24 >> 2] = 0;
  while (1) {
   if (HEAP32[$1 + 24 >> 2] < 176) {
    $0 = jswrap_espruino_reverseByte(128);
    HEAP8[Math_imul(HEAP32[$1 + 24 >> 2], 68) + 382768 | 0] = $0;
    $0 = jswrap_espruino_reverseByte(HEAP32[$1 + 24 >> 2] + 1 | 0);
    HEAP8[(Math_imul(HEAP32[$1 + 24 >> 2], 68) + 1 | 0) + 382768 | 0] = $0;
    HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 24 >> 2] + 1;
    continue;
   }
   break;
  };
  jshPinOutput(5, 0);
  jshPinOutput(26, 1);
  jshPinOutput(27, 1);
  jshPinOutput(7, 1);
  jshPinOutput(6, 1);
  jshSPIInitInfo($1 + 10 | 0);
  HEAP8[$1 + 10 | 0] = 0;
  HEAP8[$1 + 11 | 0] = 9;
  HEAP8[$1 + 12 | 0] = 61;
  HEAP8[$1 + 13 | 0] = 0;
  HEAP8[$1 + 17 | 0] = 27;
  HEAP8[$1 + 15 | 0] = 26;
  HEAP8[$1 + 19 | 0] = 0;
  jshSPISetup(26, $1 + 10 | 0);
  __stack_pointer = $1 + 32 | 0;
 }
 
 function lcdMemLCD_extcominBacklight($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  HEAP8[394884] = HEAP8[$1 + 15 | 0] & 1;
  block : {
   if (HEAP8[$1 + 15 | 0] & 1) {
    jshPinAnalogOutput(6, .0003, 120.0, 0);
    break block;
   }
   jshPinOutput(6, 0);
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function lcdMemLCD_setOverlay($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  if (HEAP32[98719]) {
   jsvUnLock(HEAP32[98719])
  }
  block : {
   if (HEAP32[$3 + 12 >> 2]) {
    HEAP32[98719] = jsvLockAgain(HEAP32[$3 + 12 >> 2]);
    HEAP16[197441] = HEAP32[$3 + 8 >> 2];
    HEAP16[197440] = HEAP32[$3 + 4 >> 2];
    break block;
   }
   HEAP32[98719] = 0;
   HEAP16[197441] = 0;
   HEAP16[197440] = 0;
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function lcdMemLCD_setCallbacks($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP8[$0 + 52 | 0] = 88;
  HEAP8[$0 + 53 | 0] = 2;
  HEAP8[$0 + 54 | 0] = 0;
  HEAP8[$0 + 55 | 0] = 0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP8[$0 + 56 | 0] = 89;
  HEAP8[$0 + 57 | 0] = 2;
  HEAP8[$0 + 58 | 0] = 0;
  HEAP8[$0 + 59 | 0] = 0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP8[$0 + 60 | 0] = 90;
  HEAP8[$0 + 61 | 0] = 2;
  HEAP8[$0 + 62 | 0] = 0;
  HEAP8[$0 + 63 | 0] = 0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP8[$0 + 68 | 0] = 91;
  HEAP8[$0 + 69 | 0] = 2;
  HEAP8[$0 + 70 | 0] = 0;
  HEAP8[$0 + 71 | 0] = 0;
 }
 
 function mbedtls_sha1_init($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  wasm2js_memory_fill(HEAP32[$1 + 12 >> 2], 0, 92);
 }
 
 function mbedtls_sha1_free($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  if (HEAP32[$1 + 12 >> 2]) {
   mbedtls_zeroize(HEAP32[$1 + 12 >> 2], 92)
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function mbedtls_zeroize($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
  while (1) {
   $0 = HEAP32[$2 + 8 >> 2];
   HEAP32[$2 + 8 >> 2] = $0 - 1;
   if ($0) {
    $0 = HEAP32[$2 + 4 >> 2];
    HEAP32[$2 + 4 >> 2] = $0 + 1;
    HEAP8[$0 | 0] = 0;
    continue;
   }
   break;
  };
 }
 
 function mbedtls_sha1_starts($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[HEAP32[$1 + 12 >> 2] >> 2] = 0;
  HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = 0;
  HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] = 1732584193;
  HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2] = -271733879;
  HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = -1732584194;
  HEAP32[HEAP32[$1 + 12 >> 2] + 20 >> 2] = 271733878;
  HEAP32[HEAP32[$1 + 12 >> 2] + 24 >> 2] = -1009589776;
 }
 
 function mbedtls_sha1_processR($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 12 >> 2] + ((HEAP32[$2 + 8 >> 2] & 15) << 2) >> 2] ^ (HEAP32[HEAP32[$2 + 12 >> 2] + ((HEAP32[$2 + 8 >> 2] - 14 & 15) << 2) >> 2] ^ (HEAP32[HEAP32[$2 + 12 >> 2] + ((HEAP32[$2 + 8 >> 2] - 3 & 15) << 2) >> 2] ^ HEAP32[HEAP32[$2 + 12 >> 2] + ((HEAP32[$2 + 8 >> 2] - 8 & 15) << 2) >> 2]));
  $0 = HEAP32[$2 + 4 >> 2] << 1 | HEAP32[$2 + 4 >> 2] >>> 31;
  HEAP32[HEAP32[$2 + 12 >> 2] + ((HEAP32[$2 + 8 >> 2] & 15) << 2) >> 2] = $0;
  return $0;
 }
 
 function mbedtls_sha1_process($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 160 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 156 >> 2] = $0;
  HEAP32[$2 + 152 >> 2] = $1;
  HEAP32[$2 + 64 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 3 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2]] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 1 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 2 | 0] << 8);
  HEAP32[$2 + 68 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 7 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 4 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 5 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 6 | 0] << 8);
  HEAP32[$2 + 72 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 11 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 8 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 9 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 10 | 0] << 8);
  HEAP32[$2 + 76 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 15 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 12 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 13 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 14 | 0] << 8);
  HEAP32[$2 + 80 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 19 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 16 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 17 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 18 | 0] << 8);
  HEAP32[$2 + 84 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 23 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 20 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 21 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 22 | 0] << 8);
  HEAP32[$2 + 88 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 27 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 24 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 25 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 26 | 0] << 8);
  HEAP32[$2 + 92 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 31 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 28 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 29 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 30 | 0] << 8);
  HEAP32[$2 + 96 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 35 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 32 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 33 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 34 | 0] << 8);
  HEAP32[$2 + 100 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 39 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 36 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 37 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 38 | 0] << 8);
  HEAP32[$2 + 104 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 43 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 40 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 41 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 42 | 0] << 8);
  HEAP32[$2 + 108 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 47 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 44 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 45 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 46 | 0] << 8);
  HEAP32[$2 + 112 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 51 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 48 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 49 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 50 | 0] << 8);
  HEAP32[$2 + 116 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 55 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 52 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 53 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 54 | 0] << 8);
  HEAP32[$2 + 120 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 59 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 56 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 57 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 58 | 0] << 8);
  HEAP32[$2 + 124 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 63 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 60 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 61 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 62 | 0] << 8);
  HEAP32[$2 + 148 >> 2] = 0;
  while (1) {
   if (HEAPU32[$2 + 148 >> 2] < 5) {
    HEAP32[($2 + 32 | 0) + (HEAP32[$2 + 148 >> 2] << 2) >> 2] = HEAP32[(HEAP32[$2 + 156 >> 2] + 8 | 0) + (HEAP32[$2 + 148 >> 2] << 2) >> 2];
    HEAP32[$2 + 148 >> 2] = HEAP32[$2 + 148 >> 2] + 1;
    continue;
   }
   break;
  };
  HEAP32[$2 + 148 >> 2] = 0;
  while (1) {
   if (HEAPU32[$2 + 148 >> 2] < 20) {
    HEAP32[$2 + 28 >> 2] = HEAPU32[$2 + 148 >> 2] % 5;
    block : {
     if (HEAPU32[$2 + 148 >> 2] < 16) {
      HEAP32[$2 + 24 >> 2] = HEAP32[($2 - -64 | 0) + (HEAP32[$2 + 148 >> 2] << 2) >> 2];
      break block;
     }
     HEAP32[$2 + 24 >> 2] = mbedtls_sha1_processR($2 - -64 | 0, HEAP32[$2 + 148 >> 2]);
    }
    $0 = ((0 - HEAP32[$2 + 28 >> 2] << 2) + $2 | 0) + 48 | 0;
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + (HEAP32[$2 + 24 >> 2] + (((HEAP32[($2 + 32 | 0) + ((5 - HEAP32[$2 + 28 >> 2] >>> 0) % 5 << 2) >> 2] << 5 | HEAP32[($2 + 32 | 0) + ((5 - HEAP32[$2 + 28 >> 2] >>> 0) % 5 << 2) >> 2] >>> 27) + (HEAP32[($2 + 32 | 0) + ((8 - HEAP32[$2 + 28 >> 2] >>> 0) % 5 << 2) >> 2] ^ HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 28 >> 2] >>> 0) % 5 << 2) >> 2] & (HEAP32[($2 + 32 | 0) + ((7 - HEAP32[$2 + 28 >> 2] >>> 0) % 5 << 2) >> 2] ^ HEAP32[($2 + 32 | 0) + ((8 - HEAP32[$2 + 28 >> 2] >>> 0) % 5 << 2) >> 2])) | 0) + 1518500249 | 0) | 0);
    HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 28 >> 2] >>> 0) % 5 << 2) >> 2] = HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 28 >> 2] >>> 0) % 5 << 2) >> 2] << 30 | HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 28 >> 2] >>> 0) % 5 << 2) >> 2] >>> 2;
    HEAP32[$2 + 148 >> 2] = HEAP32[$2 + 148 >> 2] + 1;
    continue;
   }
   break;
  };
  HEAP32[$2 + 148 >> 2] = 20;
  while (1) {
   if (HEAPU32[$2 + 148 >> 2] < 40) {
    HEAP32[$2 + 20 >> 2] = HEAPU32[$2 + 148 >> 2] % 5;
    $1 = ((HEAP32[($2 + 32 | 0) + ((5 - HEAP32[$2 + 20 >> 2] >>> 0) % 5 << 2) >> 2] << 5 | HEAP32[($2 + 32 | 0) + ((5 - HEAP32[$2 + 20 >> 2] >>> 0) % 5 << 2) >> 2] >>> 27) + (HEAP32[($2 + 32 | 0) + ((8 - HEAP32[$2 + 20 >> 2] >>> 0) % 5 << 2) >> 2] ^ (HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 20 >> 2] >>> 0) % 5 << 2) >> 2] ^ HEAP32[($2 + 32 | 0) + ((7 - HEAP32[$2 + 20 >> 2] >>> 0) % 5 << 2) >> 2])) | 0) + 1859775393 | 0;
    $3 = mbedtls_sha1_processR($2 - -64 | 0, HEAP32[$2 + 148 >> 2]);
    $0 = ((0 - HEAP32[$2 + 20 >> 2] << 2) + $2 | 0) + 48 | 0;
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + ($1 + $3 | 0);
    HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 20 >> 2] >>> 0) % 5 << 2) >> 2] = HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 20 >> 2] >>> 0) % 5 << 2) >> 2] << 30 | HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 20 >> 2] >>> 0) % 5 << 2) >> 2] >>> 2;
    HEAP32[$2 + 148 >> 2] = HEAP32[$2 + 148 >> 2] + 1;
    continue;
   }
   break;
  };
  HEAP32[$2 + 148 >> 2] = 40;
  while (1) {
   if (HEAPU32[$2 + 148 >> 2] < 60) {
    HEAP32[$2 + 16 >> 2] = HEAPU32[$2 + 148 >> 2] % 5;
    $1 = ((HEAP32[($2 + 32 | 0) + ((5 - HEAP32[$2 + 16 >> 2] >>> 0) % 5 << 2) >> 2] << 5 | HEAP32[($2 + 32 | 0) + ((5 - HEAP32[$2 + 16 >> 2] >>> 0) % 5 << 2) >> 2] >>> 27) + (HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 16 >> 2] >>> 0) % 5 << 2) >> 2] & HEAP32[($2 + 32 | 0) + ((7 - HEAP32[$2 + 16 >> 2] >>> 0) % 5 << 2) >> 2] | HEAP32[($2 + 32 | 0) + ((8 - HEAP32[$2 + 16 >> 2] >>> 0) % 5 << 2) >> 2] & (HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 16 >> 2] >>> 0) % 5 << 2) >> 2] | HEAP32[($2 + 32 | 0) + ((7 - HEAP32[$2 + 16 >> 2] >>> 0) % 5 << 2) >> 2])) | 0) - 1894007588 | 0;
    $3 = mbedtls_sha1_processR($2 - -64 | 0, HEAP32[$2 + 148 >> 2]);
    $0 = ((0 - HEAP32[$2 + 16 >> 2] << 2) + $2 | 0) + 48 | 0;
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + ($1 + $3 | 0);
    HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 16 >> 2] >>> 0) % 5 << 2) >> 2] = HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 16 >> 2] >>> 0) % 5 << 2) >> 2] << 30 | HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 16 >> 2] >>> 0) % 5 << 2) >> 2] >>> 2;
    HEAP32[$2 + 148 >> 2] = HEAP32[$2 + 148 >> 2] + 1;
    continue;
   }
   break;
  };
  HEAP32[$2 + 148 >> 2] = 60;
  while (1) {
   if (HEAPU32[$2 + 148 >> 2] < 80) {
    HEAP32[$2 + 12 >> 2] = HEAPU32[$2 + 148 >> 2] % 5;
    $1 = ((HEAP32[($2 + 32 | 0) + ((5 - HEAP32[$2 + 12 >> 2] >>> 0) % 5 << 2) >> 2] << 5 | HEAP32[($2 + 32 | 0) + ((5 - HEAP32[$2 + 12 >> 2] >>> 0) % 5 << 2) >> 2] >>> 27) + (HEAP32[($2 + 32 | 0) + ((8 - HEAP32[$2 + 12 >> 2] >>> 0) % 5 << 2) >> 2] ^ (HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 12 >> 2] >>> 0) % 5 << 2) >> 2] ^ HEAP32[($2 + 32 | 0) + ((7 - HEAP32[$2 + 12 >> 2] >>> 0) % 5 << 2) >> 2])) | 0) - 899497514 | 0;
    $3 = mbedtls_sha1_processR($2 - -64 | 0, HEAP32[$2 + 148 >> 2]);
    $0 = ((0 - HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) + 48 | 0;
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + ($1 + $3 | 0);
    HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 12 >> 2] >>> 0) % 5 << 2) >> 2] = HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 12 >> 2] >>> 0) % 5 << 2) >> 2] << 30 | HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 12 >> 2] >>> 0) % 5 << 2) >> 2] >>> 2;
    HEAP32[$2 + 148 >> 2] = HEAP32[$2 + 148 >> 2] + 1;
    continue;
   }
   break;
  };
  HEAP32[$2 + 148 >> 2] = 0;
  while (1) {
   if (HEAPU32[$2 + 148 >> 2] < 5) {
    $0 = (HEAP32[$2 + 156 >> 2] + 8 | 0) + (HEAP32[$2 + 148 >> 2] << 2) | 0;
    HEAP32[$0 >> 2] = HEAP32[($2 + 32 | 0) + (HEAP32[$2 + 148 >> 2] << 2) >> 2] + HEAP32[$0 >> 2];
    HEAP32[$2 + 148 >> 2] = HEAP32[$2 + 148 >> 2] + 1;
    continue;
   }
   break;
  };
  __stack_pointer = $2 + 160 | 0;
 }
 
 function mbedtls_sha1_update($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  block : {
   if (!HEAP32[$3 + 20 >> 2]) {
    break block
   }
   HEAP32[$3 + 12 >> 2] = HEAP32[HEAP32[$3 + 28 >> 2] >> 2] & 63;
   HEAP32[$3 + 16 >> 2] = 64 - HEAP32[$3 + 12 >> 2];
   $0 = HEAP32[$3 + 28 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$3 + 20 >> 2] + HEAP32[$0 >> 2];
   $0 = HEAP32[$3 + 28 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2];
   if (HEAPU32[HEAP32[$3 + 28 >> 2] >> 2] < HEAPU32[$3 + 20 >> 2]) {
    $0 = HEAP32[$3 + 28 >> 2];
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
   }
   if (!(!HEAP32[$3 + 12 >> 2] | HEAPU32[$3 + 20 >> 2] < HEAPU32[$3 + 16 >> 2])) {
    $1 = HEAP32[$3 + 28 >> 2];
    $2 = HEAP32[$3 + 12 >> 2];
    $4 = HEAP32[$3 + 24 >> 2];
    $0 = HEAP32[$3 + 16 >> 2];
    if ($0) {
     wasm2js_memory_copy(($1 + 28 | 0) + $2 | 0, $4, $0)
    }
    mbedtls_sha1_process(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 28 >> 2] + 28 | 0);
    HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 16 >> 2] + HEAP32[$3 + 24 >> 2];
    HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] - HEAP32[$3 + 16 >> 2];
    HEAP32[$3 + 12 >> 2] = 0;
   }
   while (1) {
    if (HEAPU32[$3 + 20 >> 2] >= 64) {
     mbedtls_sha1_process(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2]);
     HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] - -64;
     HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] + -64;
     continue;
    }
    break;
   };
   if (!HEAP32[$3 + 20 >> 2]) {
    break block
   }
   $1 = HEAP32[$3 + 28 >> 2];
   $2 = HEAP32[$3 + 12 >> 2];
   $4 = HEAP32[$3 + 24 >> 2];
   $0 = HEAP32[$3 + 20 >> 2];
   if ($0) {
    wasm2js_memory_copy(($1 + 28 | 0) + $2 | 0, $4, $0)
   }
  }
  __stack_pointer = $3 + 32 | 0;
 }
 
 function mbedtls_sha1_finish($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 96 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 92 >> 2] = $0;
  HEAP32[$2 + 88 >> 2] = $1;
  HEAP32[$2 + 76 >> 2] = HEAP32[HEAP32[$2 + 92 >> 2] + 4 >> 2] << 3 | HEAP32[HEAP32[$2 + 92 >> 2] >> 2] >>> 29;
  HEAP32[$2 + 72 >> 2] = HEAP32[HEAP32[$2 + 92 >> 2] >> 2] << 3;
  HEAP8[$2 + 64 | 0] = HEAP32[$2 + 76 >> 2] >>> 24;
  HEAP8[$2 + 65 | 0] = HEAP32[$2 + 76 >> 2] >>> 16;
  HEAP8[$2 + 66 | 0] = HEAP32[$2 + 76 >> 2] >>> 8;
  HEAP8[$2 + 67 | 0] = HEAP32[$2 + 76 >> 2];
  HEAP8[$2 + 68 | 0] = HEAP32[$2 + 72 >> 2] >>> 24;
  HEAP8[$2 + 69 | 0] = HEAP32[$2 + 72 >> 2] >>> 16;
  HEAP8[$2 + 70 | 0] = HEAP32[$2 + 72 >> 2] >>> 8;
  HEAP8[$2 + 71 | 0] = HEAP32[$2 + 72 >> 2];
  HEAP32[$2 + 84 >> 2] = HEAP32[HEAP32[$2 + 92 >> 2] >> 2] & 63;
  if (HEAPU32[$2 + 84 >> 2] < 56) {
   $0 = 56 - HEAP32[$2 + 84 >> 2] | 0
  } else {
   $0 = 120 - HEAP32[$2 + 84 >> 2] | 0
  }
  HEAP32[$2 + 80 >> 2] = $0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$2 + 56 >> 2] = 0;
  HEAP32[$2 + 60 >> 2] = 0;
  HEAP32[$2 + 48 >> 2] = 0;
  HEAP32[$2 + 52 >> 2] = 0;
  HEAP32[$2 + 40 >> 2] = 0;
  HEAP32[$2 + 44 >> 2] = 0;
  HEAP32[$2 + 32 >> 2] = 0;
  HEAP32[$2 + 36 >> 2] = 0;
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = 0;
  HEAP32[$2 + 16 >> 2] = 0;
  HEAP32[$2 + 20 >> 2] = 0;
  HEAP32[$2 + 8 >> 2] = 0;
  HEAP32[$2 + 12 >> 2] = 0;
  HEAP8[$2 | 0] = 128;
  mbedtls_sha1_update(HEAP32[$2 + 92 >> 2], $2, HEAP32[$2 + 80 >> 2]);
  mbedtls_sha1_update(HEAP32[$2 + 92 >> 2], $2 - -64 | 0, 8);
  HEAP8[HEAP32[$2 + 88 >> 2]] = HEAP32[HEAP32[$2 + 92 >> 2] + 8 >> 2] >>> 24;
  HEAP8[HEAP32[$2 + 88 >> 2] + 1 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 8 >> 2] >>> 16;
  HEAP8[HEAP32[$2 + 88 >> 2] + 2 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 8 >> 2] >>> 8;
  HEAP8[HEAP32[$2 + 88 >> 2] + 3 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 8 >> 2];
  HEAP8[HEAP32[$2 + 88 >> 2] + 4 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 12 >> 2] >>> 24;
  HEAP8[HEAP32[$2 + 88 >> 2] + 5 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 12 >> 2] >>> 16;
  HEAP8[HEAP32[$2 + 88 >> 2] + 6 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 12 >> 2] >>> 8;
  HEAP8[HEAP32[$2 + 88 >> 2] + 7 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 12 >> 2];
  HEAP8[HEAP32[$2 + 88 >> 2] + 8 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 16 >> 2] >>> 24;
  HEAP8[HEAP32[$2 + 88 >> 2] + 9 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 16 >> 2] >>> 16;
  HEAP8[HEAP32[$2 + 88 >> 2] + 10 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 16 >> 2] >>> 8;
  HEAP8[HEAP32[$2 + 88 >> 2] + 11 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 16 >> 2];
  HEAP8[HEAP32[$2 + 88 >> 2] + 12 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 20 >> 2] >>> 24;
  HEAP8[HEAP32[$2 + 88 >> 2] + 13 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 20 >> 2] >>> 16;
  HEAP8[HEAP32[$2 + 88 >> 2] + 14 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 20 >> 2] >>> 8;
  HEAP8[HEAP32[$2 + 88 >> 2] + 15 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 20 >> 2];
  HEAP8[HEAP32[$2 + 88 >> 2] + 16 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 24 >> 2] >>> 24;
  HEAP8[HEAP32[$2 + 88 >> 2] + 17 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 24 >> 2] >>> 16;
  HEAP8[HEAP32[$2 + 88 >> 2] + 18 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 24 >> 2] >>> 8;
  HEAP8[HEAP32[$2 + 88 >> 2] + 19 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 24 >> 2];
  __stack_pointer = $2 + 96 | 0;
 }
 
 function mbedtls_sha1($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 112 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 108 >> 2] = $0;
  HEAP32[$3 + 104 >> 2] = $1;
  HEAP32[$3 + 100 >> 2] = $2;
  mbedtls_sha1_init($3 + 8 | 0);
  mbedtls_sha1_starts($3 + 8 | 0);
  mbedtls_sha1_update($3 + 8 | 0, HEAP32[$3 + 108 >> 2], HEAP32[$3 + 104 >> 2]);
  mbedtls_sha1_finish($3 + 8 | 0, HEAP32[$3 + 100 >> 2]);
  mbedtls_sha1_free($3 + 8 | 0);
  __stack_pointer = $3 + 112 | 0;
 }
 
 function mbedtls_sha256_init($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  wasm2js_memory_fill(HEAP32[$1 + 12 >> 2], 0, 108);
 }
 
 function mbedtls_sha256_free($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  if (HEAP32[$1 + 12 >> 2]) {
   mbedtls_zeroize_1131(HEAP32[$1 + 12 >> 2], 108)
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function mbedtls_zeroize_1131($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
  while (1) {
   $0 = HEAP32[$2 + 8 >> 2];
   HEAP32[$2 + 8 >> 2] = $0 - 1;
   if ($0) {
    $0 = HEAP32[$2 + 4 >> 2];
    HEAP32[$2 + 4 >> 2] = $0 + 1;
    HEAP8[$0 | 0] = 0;
    continue;
   }
   break;
  };
 }
 
 function mbedtls_sha256_starts($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = 0;
  HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2] = 0;
  block : {
   if (!HEAP32[$2 + 8 >> 2]) {
    HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = 1779033703;
    HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] = -1150833019;
    HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] = 1013904242;
    HEAP32[HEAP32[$2 + 12 >> 2] + 20 >> 2] = -1521486534;
    HEAP32[HEAP32[$2 + 12 >> 2] + 24 >> 2] = 1359893119;
    HEAP32[HEAP32[$2 + 12 >> 2] + 28 >> 2] = -1694144372;
    HEAP32[HEAP32[$2 + 12 >> 2] + 32 >> 2] = 528734635;
    HEAP32[HEAP32[$2 + 12 >> 2] + 36 >> 2] = 1541459225;
    break block;
   }
   HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = -1056596264;
   HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] = 914150663;
   HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] = 812702999;
   HEAP32[HEAP32[$2 + 12 >> 2] + 20 >> 2] = -150054599;
   HEAP32[HEAP32[$2 + 12 >> 2] + 24 >> 2] = -4191439;
   HEAP32[HEAP32[$2 + 12 >> 2] + 28 >> 2] = 1750603025;
   HEAP32[HEAP32[$2 + 12 >> 2] + 32 >> 2] = 1694076839;
   HEAP32[HEAP32[$2 + 12 >> 2] + 36 >> 2] = -1090891868;
  }
  HEAP32[HEAP32[$2 + 12 >> 2] + 104 >> 2] = HEAP32[$2 + 8 >> 2];
 }
 
 function mbedtls_sha256_process($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 320 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 316 >> 2] = $0;
  HEAP32[$2 + 312 >> 2] = $1;
  HEAP32[$2 + 12 >> 2] = 0;
  while (1) {
   if (HEAPU32[$2 + 12 >> 2] < 8) {
    HEAP32[($2 + 16 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2] = HEAP32[(HEAP32[$2 + 316 >> 2] + 8 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2];
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
    continue;
   }
   break;
  };
  HEAP32[$2 + 12 >> 2] = 0;
  while (1) {
   if (HEAPU32[$2 + 12 >> 2] < 64) {
    block : {
     if (HEAPU32[$2 + 12 >> 2] < 16) {
      HEAP32[($2 + 48 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2] = HEAPU8[HEAP32[$2 + 312 >> 2] + ((HEAP32[$2 + 12 >> 2] << 2) + 3 | 0) | 0] | (HEAPU8[HEAP32[$2 + 312 >> 2] + (HEAP32[$2 + 12 >> 2] << 2) | 0] << 24 | HEAPU8[HEAP32[$2 + 312 >> 2] + ((HEAP32[$2 + 12 >> 2] << 2) + 1 | 0) | 0] << 16 | HEAPU8[HEAP32[$2 + 312 >> 2] + ((HEAP32[$2 + 12 >> 2] << 2) + 2 | 0) | 0] << 8);
      break block;
     }
     HEAP32[($2 + 48 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2] = HEAP32[((HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) - 16 >> 2] + ((HEAP32[((HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) + 20 >> 2] + ((HEAP32[((HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) + 40 >> 2] << 15 | HEAP32[((HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) + 40 >> 2] >>> 17) ^ (HEAP32[((HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) + 40 >> 2] << 13 | HEAP32[((HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) + 40 >> 2] >>> 19) ^ HEAP32[((HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) + 40 >> 2] >>> 10) | 0) + ((HEAP32[((HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) - 12 >> 2] << 25 | HEAP32[((HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) - 12 >> 2] >>> 7) ^ (HEAP32[((HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) - 12 >> 2] << 14 | HEAP32[((HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) - 12 >> 2] >>> 18) ^ HEAP32[((HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) - 12 >> 2] >>> 3) | 0);
    }
    HEAP32[$2 + 308 >> 2] = HEAP32[($2 + 48 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2] + (HEAP32[(HEAP32[$2 + 12 >> 2] << 2) + 171920 >> 2] + ((HEAP32[$2 + 44 >> 2] + ((HEAP32[$2 + 32 >> 2] << 7 | HEAP32[$2 + 32 >> 2] >>> 25) ^ ((HEAP32[$2 + 32 >> 2] << 26 | HEAP32[$2 + 32 >> 2] >>> 6) ^ (HEAP32[$2 + 32 >> 2] << 21 | HEAP32[$2 + 32 >> 2] >>> 11))) | 0) + (HEAP32[$2 + 40 >> 2] ^ HEAP32[$2 + 32 >> 2] & (HEAP32[$2 + 36 >> 2] ^ HEAP32[$2 + 40 >> 2])) | 0) | 0);
    HEAP32[$2 + 304 >> 2] = (HEAP32[$2 + 16 >> 2] & HEAP32[$2 + 20 >> 2] | HEAP32[$2 + 24 >> 2] & (HEAP32[$2 + 16 >> 2] | HEAP32[$2 + 20 >> 2])) + ((HEAP32[$2 + 16 >> 2] << 10 | HEAP32[$2 + 16 >> 2] >>> 22) ^ ((HEAP32[$2 + 16 >> 2] << 30 | HEAP32[$2 + 16 >> 2] >>> 2) ^ (HEAP32[$2 + 16 >> 2] << 19 | HEAP32[$2 + 16 >> 2] >>> 13)));
    HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 308 >> 2] + HEAP32[$2 + 28 >> 2];
    HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 308 >> 2] + HEAP32[$2 + 304 >> 2];
    HEAP32[$2 + 308 >> 2] = HEAP32[$2 + 44 >> 2];
    HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 40 >> 2];
    HEAP32[$2 + 40 >> 2] = HEAP32[$2 + 36 >> 2];
    HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 32 >> 2];
    HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 28 >> 2];
    HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 24 >> 2];
    HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 20 >> 2];
    HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 16 >> 2];
    HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 308 >> 2];
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
    continue;
   }
   break;
  };
  HEAP32[$2 + 12 >> 2] = 0;
  while (1) {
   if (HEAPU32[$2 + 12 >> 2] < 8) {
    $0 = (HEAP32[$2 + 316 >> 2] + 8 | 0) + (HEAP32[$2 + 12 >> 2] << 2) | 0;
    HEAP32[$0 >> 2] = HEAP32[($2 + 16 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2] + HEAP32[$0 >> 2];
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
    continue;
   }
   break;
  };
  __stack_pointer = $2 + 320 | 0;
 }
 
 function mbedtls_sha256_update($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  block : {
   if (!HEAP32[$3 + 20 >> 2]) {
    break block
   }
   HEAP32[$3 + 12 >> 2] = HEAP32[HEAP32[$3 + 28 >> 2] >> 2] & 63;
   HEAP32[$3 + 16 >> 2] = 64 - HEAP32[$3 + 12 >> 2];
   $0 = HEAP32[$3 + 28 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$3 + 20 >> 2] + HEAP32[$0 >> 2];
   $0 = HEAP32[$3 + 28 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2];
   if (HEAPU32[HEAP32[$3 + 28 >> 2] >> 2] < HEAPU32[$3 + 20 >> 2]) {
    $0 = HEAP32[$3 + 28 >> 2];
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
   }
   if (!(!HEAP32[$3 + 12 >> 2] | HEAPU32[$3 + 20 >> 2] < HEAPU32[$3 + 16 >> 2])) {
    $1 = HEAP32[$3 + 28 >> 2];
    $2 = HEAP32[$3 + 12 >> 2];
    $4 = HEAP32[$3 + 24 >> 2];
    $0 = HEAP32[$3 + 16 >> 2];
    if ($0) {
     wasm2js_memory_copy(($1 + 40 | 0) + $2 | 0, $4, $0)
    }
    mbedtls_sha256_process(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 28 >> 2] + 40 | 0);
    HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 16 >> 2] + HEAP32[$3 + 24 >> 2];
    HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] - HEAP32[$3 + 16 >> 2];
    HEAP32[$3 + 12 >> 2] = 0;
   }
   while (1) {
    if (HEAPU32[$3 + 20 >> 2] >= 64) {
     mbedtls_sha256_process(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2]);
     HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] - -64;
     HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] + -64;
     continue;
    }
    break;
   };
   if (!HEAP32[$3 + 20 >> 2]) {
    break block
   }
   $1 = HEAP32[$3 + 28 >> 2];
   $2 = HEAP32[$3 + 12 >> 2];
   $4 = HEAP32[$3 + 24 >> 2];
   $0 = HEAP32[$3 + 20 >> 2];
   if ($0) {
    wasm2js_memory_copy(($1 + 40 | 0) + $2 | 0, $4, $0)
   }
  }
  __stack_pointer = $3 + 32 | 0;
 }
 
 function mbedtls_sha256_finish($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[$2 + 28 >> 2] + 4 >> 2] << 3 | HEAP32[HEAP32[$2 + 28 >> 2] >> 2] >>> 29;
  HEAP32[$2 + 8 >> 2] = HEAP32[HEAP32[$2 + 28 >> 2] >> 2] << 3;
  HEAP8[$2 | 0] = HEAP32[$2 + 12 >> 2] >>> 24;
  HEAP8[$2 + 1 | 0] = HEAP32[$2 + 12 >> 2] >>> 16;
  HEAP8[$2 + 2 | 0] = HEAP32[$2 + 12 >> 2] >>> 8;
  HEAP8[$2 + 3 | 0] = HEAP32[$2 + 12 >> 2];
  HEAP8[$2 + 4 | 0] = HEAP32[$2 + 8 >> 2] >>> 24;
  HEAP8[$2 + 5 | 0] = HEAP32[$2 + 8 >> 2] >>> 16;
  HEAP8[$2 + 6 | 0] = HEAP32[$2 + 8 >> 2] >>> 8;
  HEAP8[$2 + 7 | 0] = HEAP32[$2 + 8 >> 2];
  HEAP32[$2 + 20 >> 2] = HEAP32[HEAP32[$2 + 28 >> 2] >> 2] & 63;
  if (HEAPU32[$2 + 20 >> 2] < 56) {
   $0 = 56 - HEAP32[$2 + 20 >> 2] | 0
  } else {
   $0 = 120 - HEAP32[$2 + 20 >> 2] | 0
  }
  HEAP32[$2 + 16 >> 2] = $0;
  mbedtls_sha256_update(HEAP32[$2 + 28 >> 2], 172176, HEAP32[$2 + 16 >> 2]);
  mbedtls_sha256_update(HEAP32[$2 + 28 >> 2], $2, 8);
  HEAP8[HEAP32[$2 + 24 >> 2]] = HEAP32[HEAP32[$2 + 28 >> 2] + 8 >> 2] >>> 24;
  HEAP8[HEAP32[$2 + 24 >> 2] + 1 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 8 >> 2] >>> 16;
  HEAP8[HEAP32[$2 + 24 >> 2] + 2 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 8 >> 2] >>> 8;
  HEAP8[HEAP32[$2 + 24 >> 2] + 3 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 8 >> 2];
  HEAP8[HEAP32[$2 + 24 >> 2] + 4 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 12 >> 2] >>> 24;
  HEAP8[HEAP32[$2 + 24 >> 2] + 5 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 12 >> 2] >>> 16;
  HEAP8[HEAP32[$2 + 24 >> 2] + 6 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 12 >> 2] >>> 8;
  HEAP8[HEAP32[$2 + 24 >> 2] + 7 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 12 >> 2];
  HEAP8[HEAP32[$2 + 24 >> 2] + 8 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 16 >> 2] >>> 24;
  HEAP8[HEAP32[$2 + 24 >> 2] + 9 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 16 >> 2] >>> 16;
  HEAP8[HEAP32[$2 + 24 >> 2] + 10 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 16 >> 2] >>> 8;
  HEAP8[HEAP32[$2 + 24 >> 2] + 11 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 16 >> 2];
  HEAP8[HEAP32[$2 + 24 >> 2] + 12 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 20 >> 2] >>> 24;
  HEAP8[HEAP32[$2 + 24 >> 2] + 13 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 20 >> 2] >>> 16;
  HEAP8[HEAP32[$2 + 24 >> 2] + 14 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 20 >> 2] >>> 8;
  HEAP8[HEAP32[$2 + 24 >> 2] + 15 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 20 >> 2];
  HEAP8[HEAP32[$2 + 24 >> 2] + 16 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 24 >> 2] >>> 24;
  HEAP8[HEAP32[$2 + 24 >> 2] + 17 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 24 >> 2] >>> 16;
  HEAP8[HEAP32[$2 + 24 >> 2] + 18 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 24 >> 2] >>> 8;
  HEAP8[HEAP32[$2 + 24 >> 2] + 19 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 24 >> 2];
  HEAP8[HEAP32[$2 + 24 >> 2] + 20 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 28 >> 2] >>> 24;
  HEAP8[HEAP32[$2 + 24 >> 2] + 21 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 28 >> 2] >>> 16;
  HEAP8[HEAP32[$2 + 24 >> 2] + 22 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 28 >> 2] >>> 8;
  HEAP8[HEAP32[$2 + 24 >> 2] + 23 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 28 >> 2];
  HEAP8[HEAP32[$2 + 24 >> 2] + 24 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 32 >> 2] >>> 24;
  HEAP8[HEAP32[$2 + 24 >> 2] + 25 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 32 >> 2] >>> 16;
  HEAP8[HEAP32[$2 + 24 >> 2] + 26 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 32 >> 2] >>> 8;
  HEAP8[HEAP32[$2 + 24 >> 2] + 27 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 32 >> 2];
  if (!HEAP32[HEAP32[$2 + 28 >> 2] + 104 >> 2]) {
   HEAP8[HEAP32[$2 + 24 >> 2] + 28 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 36 >> 2] >>> 24;
   HEAP8[HEAP32[$2 + 24 >> 2] + 29 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 36 >> 2] >>> 16;
   HEAP8[HEAP32[$2 + 24 >> 2] + 30 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 36 >> 2] >>> 8;
   HEAP8[HEAP32[$2 + 24 >> 2] + 31 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 36 >> 2];
  }
  __stack_pointer = $2 + 32 | 0;
 }
 
 function mbedtls_sha256($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 128 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 124 >> 2] = $0;
  HEAP32[$4 + 120 >> 2] = $1;
  HEAP32[$4 + 116 >> 2] = $2;
  HEAP32[$4 + 112 >> 2] = $3;
  mbedtls_sha256_init($4 + 4 | 0);
  mbedtls_sha256_starts($4 + 4 | 0, HEAP32[$4 + 112 >> 2]);
  mbedtls_sha256_update($4 + 4 | 0, HEAP32[$4 + 124 >> 2], HEAP32[$4 + 120 >> 2]);
  mbedtls_sha256_finish($4 + 4 | 0, HEAP32[$4 + 116 >> 2]);
  mbedtls_sha256_free($4 + 4 | 0);
  __stack_pointer = $4 + 128 | 0;
 }
 
 function mbedtls_sha512_init($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  wasm2js_memory_fill(HEAP32[$1 + 12 >> 2], 0, 216);
 }
 
 function mbedtls_sha512_free($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  if (HEAP32[$1 + 12 >> 2]) {
   mbedtls_zeroize_1139(HEAP32[$1 + 12 >> 2], 216)
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function mbedtls_zeroize_1139($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
  while (1) {
   $0 = HEAP32[$2 + 8 >> 2];
   HEAP32[$2 + 8 >> 2] = $0 - 1;
   if ($0) {
    $0 = HEAP32[$2 + 4 >> 2];
    HEAP32[$2 + 4 >> 2] = $0 + 1;
    HEAP8[$0 | 0] = 0;
    continue;
   }
   break;
  };
 }
 
 function mbedtls_sha512_starts($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  block : {
   if (!HEAP32[$2 + 8 >> 2]) {
    $0 = HEAP32[$2 + 12 >> 2];
    HEAP32[$0 + 16 >> 2] = -205731576;
    HEAP32[$0 + 20 >> 2] = 1779033703;
    $0 = HEAP32[$2 + 12 >> 2];
    HEAP32[$0 + 24 >> 2] = -2067093701;
    HEAP32[$0 + 28 >> 2] = -1150833019;
    $0 = HEAP32[$2 + 12 >> 2];
    HEAP32[$0 + 32 >> 2] = -23791573;
    HEAP32[$0 + 36 >> 2] = 1013904242;
    $0 = HEAP32[$2 + 12 >> 2];
    HEAP32[$0 + 40 >> 2] = 1595750129;
    HEAP32[$0 + 44 >> 2] = -1521486534;
    $0 = HEAP32[$2 + 12 >> 2];
    HEAP32[$0 + 48 >> 2] = -1377402159;
    HEAP32[$0 + 52 >> 2] = 1359893119;
    $0 = HEAP32[$2 + 12 >> 2];
    HEAP32[$0 + 56 >> 2] = 725511199;
    HEAP32[$0 + 60 >> 2] = -1694144372;
    $0 = HEAP32[$2 + 12 >> 2];
    HEAP32[$0 + 64 >> 2] = -79577749;
    HEAP32[$0 + 68 >> 2] = 528734635;
    $0 = HEAP32[$2 + 12 >> 2];
    HEAP32[$0 + 72 >> 2] = 327033209;
    HEAP32[$0 + 76 >> 2] = 1541459225;
    break block;
   }
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP32[$0 + 16 >> 2] = -1056596264;
   HEAP32[$0 + 20 >> 2] = -876896931;
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP32[$0 + 24 >> 2] = 914150663;
   HEAP32[$0 + 28 >> 2] = 1654270250;
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP32[$0 + 32 >> 2] = 812702999;
   HEAP32[$0 + 36 >> 2] = -1856437926;
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP32[$0 + 40 >> 2] = -150054599;
   HEAP32[$0 + 44 >> 2] = 355462360;
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP32[$0 + 48 >> 2] = -4191439;
   HEAP32[$0 + 52 >> 2] = 1731405415;
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP32[$0 + 56 >> 2] = 1750603025;
   HEAP32[$0 + 60 >> 2] = -1900787065;
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP32[$0 + 64 >> 2] = 1694076839;
   HEAP32[$0 + 68 >> 2] = -619958771;
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP32[$0 + 72 >> 2] = -1090891868;
   HEAP32[$0 + 76 >> 2] = 1203062813;
  }
  HEAP32[HEAP32[$2 + 12 >> 2] + 208 >> 2] = HEAP32[$2 + 8 >> 2];
 }
 
 function mbedtls_sha512_process($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
  $3 = __stack_pointer - 736 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 732 >> 2] = $0;
  HEAP32[$3 + 728 >> 2] = $1;
  HEAP32[$3 + 724 >> 2] = 0;
  while (1) {
   if (HEAP32[$3 + 724 >> 2] < 16) {
    $4 = HEAP32[$3 + 728 >> 2] + ((HEAP32[$3 + 724 >> 2] << 3) + 7 | 0) | 0;
    $1 = HEAPU8[$4 | 0];
    $5 = $1;
    $4 = HEAP32[$3 + 728 >> 2] + (HEAP32[$3 + 724 >> 2] << 3) | 0;
    $0 = HEAPU8[$4 | 0];
    $0 = $0 << 24;
    $2 = $0;
    $1 = HEAP32[$3 + 728 >> 2] + ((HEAP32[$3 + 724 >> 2] << 3) + 1 | 0) | 0;
    $0 = HEAPU8[$1 | 0];
    $0 = $0 << 16;
    $1 = $0;
    $0 = $2;
    $1 = $1 | $0;
    $2 = $1;
    $0 = HEAP32[$3 + 728 >> 2] + ((HEAP32[$3 + 724 >> 2] << 3) + 2 | 0) | 0;
    $1 = HEAPU8[$0 | 0];
    $0 = $1;
    $1 = $0 << 8;
    $0 = $1;
    $1 = $2;
    $0 = $1 | $0;
    $2 = $0;
    $1 = HEAP32[$3 + 728 >> 2] + ((HEAP32[$3 + 724 >> 2] << 3) + 3 | 0) | 0;
    $0 = HEAPU8[$1 | 0];
    $1 = $0;
    $0 = $2;
    $1 = $1 | $0;
    $2 = $1;
    $0 = HEAP32[$3 + 728 >> 2] + ((HEAP32[$3 + 724 >> 2] << 3) + 4 | 0) | 0;
    $1 = HEAPU8[$0 | 0];
    $0 = $1;
    $7 = $0 << 24;
    $1 = $0 >>> 8 | 0;
    $0 = $1;
    $1 = $2;
    $0 = $1 | $0;
    $2 = $0;
    $4 = 0;
    $6 = 0;
    $4 = $4 | $6;
    $4 = $4 | 0;
    $4 = $4 | 0;
    $6 = $7;
    $4 = $4 | $6;
    $1 = HEAP32[$3 + 728 >> 2] + ((HEAP32[$3 + 724 >> 2] << 3) + 5 | 0) | 0;
    $0 = HEAPU8[$1 | 0];
    $6 = $0 << 16;
    $0 = $0 >>> 16 | 0;
    $1 = $0;
    $0 = $2;
    $1 = $1 | $0;
    $2 = $1;
    $0 = HEAP32[$3 + 728 >> 2] + ((HEAP32[$3 + 724 >> 2] << 3) + 6 | 0) | 0;
    $1 = HEAPU8[$0 | 0];
    $0 = $1;
    $7 = $0 << 8;
    $1 = $0 >>> 24 | 0;
    $0 = $1;
    $1 = $2;
    $0 = $1 | $0;
    $1 = $5;
    $4 = $4 | $6;
    $6 = $7;
    $6 = $4 | $6;
    $2 = $1 | $6;
    $1 = ($3 - -64 | 0) + (HEAP32[$3 + 724 >> 2] << 3) | 0;
    HEAP32[$1 >> 2] = $2;
    $4 = $0;
    HEAP32[$1 + 4 >> 2] = $4;
    HEAP32[$3 + 724 >> 2] = HEAP32[$3 + 724 >> 2] + 1;
    continue;
   }
   break;
  };
  while (1) {
   if (HEAP32[$3 + 724 >> 2] < 80) {
    $0 = ((HEAP32[$3 + 724 >> 2] << 3) + $3 | 0) + -64 | 0;
    $4 = HEAP32[$0 >> 2];
    $10 = $4;
    $1 = HEAP32[$0 + 4 >> 2];
    $9 = $1;
    $0 = ((HEAP32[$3 + 724 >> 2] << 3) + $3 | 0) + 8 | 0;
    $1 = HEAP32[$0 >> 2];
    $8 = $1;
    $4 = HEAP32[$0 + 4 >> 2];
    $7 = $4;
    $0 = ((HEAP32[$3 + 724 >> 2] << 3) + $3 | 0) + 48 | 0;
    $4 = HEAP32[$0 >> 2];
    $0 = $4;
    $4 = $0 << 13;
    $2 = $4;
    $1 = ((HEAP32[$3 + 724 >> 2] << 3) + $3 | 0) + 48 | 0;
    $4 = HEAP32[$1 >> 2];
    $0 = HEAP32[$1 + 4 >> 2];
    $1 = $4;
    $4 = $0 >>> 19 | 0;
    $6 = ($0 & 524287) << 13 | $1 >>> 19;
    $0 = 0;
    $13 = $0 | $6;
    $1 = $4;
    $4 = $2;
    $1 = $1 | $4;
    $5 = $1;
    $4 = ((HEAP32[$3 + 724 >> 2] << 3) + $3 | 0) + 48 | 0;
    $1 = HEAP32[$4 >> 2];
    $0 = HEAP32[$4 + 4 >> 2];
    $12 = $1 << 3;
    $1 = $0 << 3 | $1 >>> 29;
    $2 = $1;
    $0 = ((HEAP32[$3 + 724 >> 2] << 3) + $3 | 0) + 48 | 0;
    $1 = HEAP32[$0 >> 2];
    $4 = HEAP32[$0 + 4 >> 2];
    $6 = $4 >>> 29 | 0;
    $1 = $2;
    $0 = $11;
    $0 = $1 | $0;
    $2 = $0;
    $1 = $13;
    $4 = $12;
    $6 = $4 | $6;
    $12 = $1 ^ $6;
    $0 = $5;
    $4 = $2;
    $4 = $0 ^ $4;
    $2 = $4;
    $0 = ((HEAP32[$3 + 724 >> 2] << 3) + $3 | 0) + 48 | 0;
    $4 = HEAP32[$0 >> 2];
    $1 = HEAP32[$0 + 4 >> 2];
    $0 = $4;
    $6 = ($1 & 63) << 26 | $0 >>> 6;
    $4 = $1 >>> 6 | 0;
    $0 = $4;
    $4 = $2;
    $0 = $0 ^ $4;
    $4 = $8;
    $1 = $12;
    $6 = $1 ^ $6;
    $2 = $4 + $6 | 0;
    $1 = $0;
    $0 = $7;
    $5 = $1 + $0 | 0;
    $5 = $2 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
    $8 = $5;
    $0 = ((HEAP32[$3 + 724 >> 2] << 3) + $3 | 0) - 56 | 0;
    $5 = HEAP32[$0 >> 2];
    $0 = $5;
    $5 = $0 << 31;
    $1 = $5;
    $4 = ((HEAP32[$3 + 724 >> 2] << 3) + $3 | 0) - 56 | 0;
    $5 = HEAP32[$4 >> 2];
    $0 = HEAP32[$4 + 4 >> 2];
    $4 = $5;
    $5 = $0 >>> 1 | 0;
    $6 = ($0 & 1) << 31 | $4 >>> 1;
    $0 = 0;
    $12 = $0 | $6;
    $4 = $5;
    $5 = $1;
    $4 = $4 | $5;
    $7 = $4;
    $5 = ((HEAP32[$3 + 724 >> 2] << 3) + $3 | 0) - 56 | 0;
    $4 = HEAP32[$5 >> 2];
    $4 = $4 << 24;
    $1 = $4;
    $0 = ((HEAP32[$3 + 724 >> 2] << 3) + $3 | 0) - 56 | 0;
    $4 = HEAP32[$0 >> 2];
    $5 = HEAP32[$0 + 4 >> 2];
    $0 = $4;
    $6 = ($5 & 255) << 24 | $0 >>> 8;
    $4 = $5 >>> 8 | 0;
    $0 = $4;
    $4 = $1;
    $0 = $0 | $4;
    $1 = $0;
    $4 = $12;
    $5 = 0;
    $6 = $6 | $5;
    $12 = $4 ^ $6;
    $0 = $7;
    $5 = $1;
    $5 = $0 ^ $5;
    $1 = $5;
    $0 = ((HEAP32[$3 + 724 >> 2] << 3) + $3 | 0) - 56 | 0;
    $5 = HEAP32[$0 >> 2];
    $4 = HEAP32[$0 + 4 >> 2];
    $0 = $5;
    $6 = ($4 & 127) << 25 | $0 >>> 7;
    $5 = $4 >>> 7 | 0;
    $0 = $5;
    $5 = $1;
    $0 = $0 ^ $5;
    $5 = $0;
    $4 = $12;
    $6 = $4 ^ $6;
    $1 = $6 + $2 | 0;
    $0 = $8;
    $4 = $5;
    $2 = $0 + $4 | 0;
    $2 = $1 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
    $5 = $2;
    $6 = $1;
    $0 = $10;
    $4 = $0 + $1 | 0;
    $2 = $9;
    $1 = $2 + $5 | 0;
    $0 = ($3 - -64 | 0) + (HEAP32[$3 + 724 >> 2] << 3) | 0;
    HEAP32[$0 >> 2] = $4;
    $1 = $4 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
    HEAP32[$0 + 4 >> 2] = $1;
    HEAP32[$3 + 724 >> 2] = HEAP32[$3 + 724 >> 2] + 1;
    continue;
   }
   break;
  };
  $2 = HEAP32[$3 + 732 >> 2];
  $1 = HEAP32[$2 + 16 >> 2];
  $0 = HEAP32[$2 + 20 >> 2];
  HEAP32[$3 + 56 >> 2] = $1;
  HEAP32[$3 + 60 >> 2] = $0;
  $2 = HEAP32[$3 + 732 >> 2];
  $0 = HEAP32[$2 + 24 >> 2];
  $1 = HEAP32[$2 + 28 >> 2];
  HEAP32[$3 + 48 >> 2] = $0;
  HEAP32[$3 + 52 >> 2] = $1;
  $2 = HEAP32[$3 + 732 >> 2];
  $1 = HEAP32[$2 + 32 >> 2];
  $0 = HEAP32[$2 + 36 >> 2];
  HEAP32[$3 + 40 >> 2] = $1;
  HEAP32[$3 + 44 >> 2] = $0;
  $2 = HEAP32[$3 + 732 >> 2];
  $0 = HEAP32[$2 + 40 >> 2];
  $1 = HEAP32[$2 + 44 >> 2];
  HEAP32[$3 + 32 >> 2] = $0;
  HEAP32[$3 + 36 >> 2] = $1;
  $2 = HEAP32[$3 + 732 >> 2];
  $1 = HEAP32[$2 + 48 >> 2];
  $0 = HEAP32[$2 + 52 >> 2];
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 28 >> 2] = $0;
  $2 = HEAP32[$3 + 732 >> 2];
  $0 = HEAP32[$2 + 56 >> 2];
  $1 = HEAP32[$2 + 60 >> 2];
  HEAP32[$3 + 16 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $1;
  $2 = HEAP32[$3 + 732 >> 2];
  $1 = HEAP32[$2 + 64 >> 2];
  $0 = HEAP32[$2 + 68 >> 2];
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 12 >> 2] = $0;
  $2 = HEAP32[$3 + 732 >> 2];
  $0 = HEAP32[$2 + 72 >> 2];
  $1 = HEAP32[$2 + 76 >> 2];
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 + 724 >> 2] = 0;
  while (1) {
   $2 = ($3 - -64 | 0) + (HEAP32[$3 + 724 >> 2] << 3) | 0;
   $1 = HEAP32[$2 >> 2];
   $14 = $1;
   $0 = HEAP32[$2 + 4 >> 2];
   $15 = $0;
   $2 = (HEAP32[$3 + 724 >> 2] << 3) + 172240 | 0;
   $0 = HEAP32[$2 >> 2];
   $13 = $0;
   $1 = HEAP32[$2 + 4 >> 2];
   $12 = $1;
   $1 = HEAP32[$3 >> 2];
   $9 = $1;
   $0 = HEAP32[$3 + 4 >> 2];
   $8 = $0;
   $0 = HEAP32[$3 + 24 >> 2];
   $5 = $0 << 23;
   $1 = HEAP32[$3 + 28 >> 2];
   $0 = $1 << 23 | $0 >>> 9;
   $4 = $0;
   $0 = HEAP32[$3 + 24 >> 2];
   $2 = HEAP32[$3 + 28 >> 2];
   $6 = $2 >>> 9 | 0;
   $2 = $5;
   $11 = $6 | $2;
   $0 = 0;
   $1 = $0;
   $0 = $4;
   $1 = $1 | $0;
   $7 = $1;
   $1 = HEAP32[$3 + 24 >> 2];
   $0 = $1;
   $1 = $0 << 18;
   $4 = $1;
   $1 = HEAP32[$3 + 24 >> 2];
   $2 = $1;
   $0 = HEAP32[$3 + 28 >> 2];
   $1 = $0 >>> 14 | 0;
   $6 = ($0 & 16383) << 18 | $2 >>> 14;
   $2 = $1;
   $0 = 0;
   $10 = $0 | $6;
   $1 = $4;
   $2 = $1 | $2;
   $5 = $2;
   $2 = HEAP32[$3 + 24 >> 2];
   $1 = $2;
   $2 = $1 << 14;
   $4 = $2;
   $2 = HEAP32[$3 + 24 >> 2];
   $0 = $2;
   $1 = HEAP32[$3 + 28 >> 2];
   $2 = $1 >>> 18 | 0;
   $6 = ($1 & 262143) << 14 | $0 >>> 18;
   $0 = $2;
   $2 = $4;
   $0 = $0 | $2;
   $1 = 0;
   $6 = $1 | $6;
   $2 = $10;
   $6 = $6 ^ $2;
   $1 = $0;
   $0 = $5;
   $1 = $1 ^ $0;
   $2 = $1;
   $1 = $7;
   $2 = $1 ^ $2;
   $1 = $9;
   $0 = $11;
   $6 = $0 ^ $6;
   $5 = $1 + $6 | 0;
   $0 = $2;
   $2 = $8;
   $4 = $0 + $2 | 0;
   $4 = $5 >>> 0 < $6 >>> 0 ? $4 + 1 | 0 : $4;
   $11 = $4;
   $4 = HEAP32[$3 + 8 >> 2];
   $10 = $4;
   $1 = HEAP32[$3 + 12 >> 2];
   $9 = $1;
   $1 = HEAP32[$3 + 24 >> 2];
   $8 = $1;
   $4 = HEAP32[$3 + 28 >> 2];
   $7 = $4;
   $4 = HEAP32[$3 + 16 >> 2];
   $2 = $4;
   $1 = HEAP32[$3 + 20 >> 2];
   $0 = $1;
   $1 = HEAP32[$3 + 8 >> 2];
   $6 = $1;
   $4 = HEAP32[$3 + 12 >> 2];
   $1 = $4;
   $4 = $0;
   $1 = $1 ^ $4;
   $0 = $1;
   $4 = $8;
   $6 = $6 ^ $2;
   $6 = $4 & $6;
   $1 = $7;
   $2 = $0;
   $2 = $1 & $2;
   $4 = $2;
   $2 = $9;
   $4 = $4 ^ $2;
   $1 = $10;
   $6 = $1 ^ $6;
   $2 = $5;
   $0 = $6 + $2 | 0;
   $1 = $4;
   $4 = $11;
   $5 = $1 + $4 | 0;
   $5 = $0 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
   $6 = $0;
   $4 = $13;
   $1 = $4 + $0 | 0;
   $2 = $5;
   $5 = $12;
   $0 = $2 + $5 | 0;
   $0 = $1 >>> 0 < $6 >>> 0 ? $0 + 1 | 0 : $0;
   $4 = $0;
   $6 = $1;
   $5 = $14;
   $2 = $5 + $1 | 0;
   $0 = $15;
   $1 = $0 + $4 | 0;
   HEAP32[$3 + 712 >> 2] = $2;
   $1 = $2 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
   HEAP32[$3 + 716 >> 2] = $1;
   $1 = HEAP32[$3 + 56 >> 2];
   $0 = $1;
   $5 = HEAP32[$3 + 60 >> 2];
   $4 = $5;
   $1 = HEAP32[$3 + 52 >> 2];
   $2 = $1;
   $5 = HEAP32[$3 + 48 >> 2];
   $9 = $0 & $5;
   $1 = $4;
   $5 = $2;
   $5 = $1 & $5;
   $8 = $5;
   $5 = HEAP32[$3 + 40 >> 2];
   $7 = $5;
   $0 = HEAP32[$3 + 44 >> 2];
   $4 = $0;
   $0 = HEAP32[$3 + 56 >> 2];
   $2 = $0;
   $5 = HEAP32[$3 + 60 >> 2];
   $1 = $5;
   $5 = HEAP32[$3 + 48 >> 2];
   $6 = $5;
   $0 = HEAP32[$3 + 52 >> 2];
   $5 = $0;
   $0 = $1;
   $5 = $0 | $5;
   $0 = $7;
   $1 = $2;
   $6 = $1 | $6;
   $1 = $5;
   $5 = $4;
   $1 = $1 & $5;
   $2 = $1;
   $6 = $0 & $6;
   $5 = $9;
   $11 = $6 | $5;
   $1 = $8;
   $0 = $2;
   $0 = $1 | $0;
   $8 = $0;
   $0 = HEAP32[$3 + 56 >> 2];
   $4 = $0 << 25;
   $5 = HEAP32[$3 + 60 >> 2];
   $0 = $5 << 25 | $0 >>> 7;
   $2 = $0;
   $0 = HEAP32[$3 + 56 >> 2];
   $1 = HEAP32[$3 + 60 >> 2];
   $6 = $1 >>> 7 | 0;
   $1 = $4;
   $10 = $1 | $6;
   $0 = $2;
   $5 = $16;
   $5 = $0 | $5;
   $7 = $5;
   $5 = HEAP32[$3 + 56 >> 2];
   $0 = $5;
   $5 = $0 << 4;
   $2 = $5;
   $5 = HEAP32[$3 + 56 >> 2];
   $1 = $5;
   $0 = HEAP32[$3 + 60 >> 2];
   $5 = $0 >>> 28 | 0;
   $6 = ($0 & 268435455) << 4 | $1 >>> 28;
   $0 = 0;
   $6 = $0 | $6;
   $1 = $5;
   $5 = $2;
   $1 = $1 | $5;
   $4 = $1;
   $1 = HEAP32[$3 + 56 >> 2];
   $9 = $1 << 30;
   $0 = HEAP32[$3 + 60 >> 2];
   $1 = $0 << 30 | $1 >>> 2;
   $0 = $1;
   $1 = HEAP32[$3 + 56 >> 2];
   $5 = HEAP32[$3 + 60 >> 2];
   $1 = $0;
   $0 = $16;
   $0 = $1 | $0;
   $2 = $0;
   $1 = $6;
   $6 = $5 >>> 2 | 0;
   $5 = $9;
   $6 = $6 | $5;
   $6 = $1 ^ $6;
   $0 = $4;
   $5 = $2;
   $5 = $0 ^ $5;
   $1 = $5;
   $5 = $7;
   $1 = $1 ^ $5;
   $2 = $1;
   $0 = $10;
   $6 = $0 ^ $6;
   $5 = $11;
   $4 = $6 + $5 | 0;
   $1 = $8;
   $0 = $2;
   $2 = $1 + $0 | 0;
   HEAP32[$3 + 704 >> 2] = $4;
   $2 = $4 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
   HEAP32[$3 + 708 >> 2] = $2;
   $2 = HEAP32[$3 + 712 >> 2];
   $1 = $2;
   $5 = HEAP32[$3 + 716 >> 2];
   $0 = $5;
   $5 = HEAP32[$3 + 32 >> 2];
   $6 = $5;
   $2 = HEAP32[$3 + 36 >> 2];
   $5 = $2;
   $2 = $0;
   $4 = $2 + $5 | 0;
   $0 = $1 + $6 | 0;
   $4 = $0 >>> 0 < $6 >>> 0 ? $4 + 1 | 0 : $4;
   HEAP32[$3 + 32 >> 2] = $0;
   HEAP32[$3 + 36 >> 2] = $4;
   $1 = HEAP32[$3 + 716 >> 2];
   $0 = $1;
   $1 = HEAP32[$3 + 704 >> 2];
   $6 = $1;
   $4 = HEAP32[$3 + 712 >> 2];
   $2 = $4;
   $5 = $1 + $2 | 0;
   $4 = HEAP32[$3 + 708 >> 2];
   $1 = $4;
   $4 = $0;
   $0 = $1 + $4 | 0;
   HEAP32[$3 >> 2] = $5;
   $0 = $5 >>> 0 < $6 >>> 0 ? $0 + 1 | 0 : $0;
   HEAP32[$3 + 4 >> 2] = $0;
   HEAP32[$3 + 724 >> 2] = HEAP32[$3 + 724 >> 2] + 1;
   $4 = ($3 - -64 | 0) + (HEAP32[$3 + 724 >> 2] << 3) | 0;
   $0 = HEAP32[$4 >> 2];
   $14 = $0;
   $2 = HEAP32[$4 + 4 >> 2];
   $15 = $2;
   $4 = (HEAP32[$3 + 724 >> 2] << 3) + 172240 | 0;
   $2 = HEAP32[$4 >> 2];
   $13 = $2;
   $0 = HEAP32[$4 + 4 >> 2];
   $12 = $0;
   $0 = HEAP32[$3 + 8 >> 2];
   $9 = $0;
   $2 = HEAP32[$3 + 12 >> 2];
   $8 = $2;
   $2 = HEAP32[$3 + 32 >> 2];
   $5 = $2 << 23;
   $0 = HEAP32[$3 + 36 >> 2];
   $2 = $0 << 23 | $2 >>> 9;
   $1 = $2;
   $2 = HEAP32[$3 + 32 >> 2];
   $4 = HEAP32[$3 + 36 >> 2];
   $6 = $4 >>> 9 | 0;
   $4 = $5;
   $11 = $4 | $6;
   $2 = 0;
   $0 = $2;
   $2 = $1;
   $0 = $0 | $2;
   $7 = $0;
   $0 = HEAP32[$3 + 32 >> 2];
   $0 = $0 << 18;
   $5 = $0;
   $0 = HEAP32[$3 + 32 >> 2];
   $4 = $0;
   $2 = HEAP32[$3 + 36 >> 2];
   $0 = $2 >>> 14 | 0;
   $1 = $0;
   $6 = ($2 & 16383) << 18 | $4 >>> 14;
   $2 = 0;
   $10 = $6 | $2;
   $0 = $5;
   $4 = $1;
   $4 = $0 | $4;
   $5 = $4;
   $4 = HEAP32[$3 + 32 >> 2];
   $0 = $4;
   $4 = $0 << 14;
   $1 = $4;
   $4 = HEAP32[$3 + 32 >> 2];
   $2 = $4;
   $0 = HEAP32[$3 + 36 >> 2];
   $4 = $0 >>> 18 | 0;
   $6 = ($0 & 262143) << 14 | $2 >>> 18;
   $2 = $4;
   $4 = $1;
   $2 = $4 | $2;
   $4 = $10;
   $0 = 0;
   $6 = $0 | $6;
   $6 = $4 ^ $6;
   $0 = $2;
   $2 = $5;
   $0 = $0 ^ $2;
   $4 = $0;
   $0 = $7;
   $4 = $0 ^ $4;
   $5 = $4;
   $0 = $9;
   $2 = $11;
   $6 = $6 ^ $2;
   $1 = $0 + $6 | 0;
   $4 = $8;
   $2 = $5;
   $5 = $4 + $2 | 0;
   $5 = $1 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
   $11 = $5;
   $5 = HEAP32[$3 + 16 >> 2];
   $10 = $5;
   $0 = HEAP32[$3 + 20 >> 2];
   $9 = $0;
   $0 = HEAP32[$3 + 32 >> 2];
   $8 = $0;
   $5 = HEAP32[$3 + 36 >> 2];
   $7 = $5;
   $5 = HEAP32[$3 + 24 >> 2];
   $4 = $5;
   $0 = HEAP32[$3 + 28 >> 2];
   $2 = $0;
   $0 = HEAP32[$3 + 16 >> 2];
   $6 = $0;
   $5 = HEAP32[$3 + 20 >> 2];
   $0 = $5;
   $5 = $2;
   $0 = $0 ^ $5;
   $2 = $0;
   $6 = $4 ^ $6;
   $5 = $8;
   $6 = $6 & $5;
   $0 = $7;
   $4 = $2;
   $4 = $0 & $4;
   $5 = $4;
   $4 = $9;
   $5 = $4 ^ $5;
   $0 = $10;
   $6 = $0 ^ $6;
   $2 = $6 + $1 | 0;
   $0 = $5;
   $5 = $11;
   $1 = $0 + $5 | 0;
   $1 = $2 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
   $4 = $1;
   $6 = $2;
   $5 = $13;
   $0 = $5 + $2 | 0;
   $1 = $12;
   $2 = $1 + $4 | 0;
   $2 = $0 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
   $5 = $2;
   $6 = $0;
   $1 = $14;
   $4 = $0 + $1 | 0;
   $2 = $15;
   $0 = $2 + $5 | 0;
   HEAP32[$3 + 712 >> 2] = $4;
   $0 = $4 >>> 0 < $6 >>> 0 ? $0 + 1 | 0 : $0;
   HEAP32[$3 + 716 >> 2] = $0;
   $1 = HEAP32[$3 + 4 >> 2];
   $2 = $1;
   $1 = HEAP32[$3 + 56 >> 2];
   $0 = HEAP32[$3 >> 2];
   $10 = $1 & $0;
   $0 = HEAP32[$3 + 60 >> 2];
   $1 = $0;
   $0 = $2;
   $1 = $1 & $0;
   $9 = $1;
   $1 = HEAP32[$3 + 48 >> 2];
   $8 = $1;
   $2 = HEAP32[$3 + 52 >> 2];
   $7 = $2;
   $2 = HEAP32[$3 >> 2];
   $5 = $2;
   $1 = HEAP32[$3 + 4 >> 2];
   $0 = $1;
   $1 = HEAP32[$3 + 56 >> 2];
   $6 = $1;
   $2 = HEAP32[$3 + 60 >> 2];
   $1 = $2;
   $2 = $0;
   $1 = $1 | $2;
   $4 = $1;
   $0 = $5;
   $6 = $0 | $6;
   $2 = $8;
   $1 = $7;
   $0 = $4;
   $0 = $1 & $0;
   $4 = $0;
   $1 = $10;
   $6 = $6 & $2;
   $11 = $1 | $6;
   $0 = $9;
   $2 = $4;
   $2 = $0 | $2;
   $8 = $2;
   $2 = HEAP32[$3 >> 2];
   $0 = $2;
   $5 = $0 << 25;
   $1 = HEAP32[$3 + 4 >> 2];
   $2 = $1 << 25 | $0 >>> 7;
   $4 = $2;
   $2 = HEAP32[$3 >> 2];
   $0 = HEAP32[$3 + 4 >> 2];
   $6 = $0 >>> 7 | 0;
   $0 = $5;
   $10 = $0 | $6;
   $2 = 0;
   $1 = $2;
   $2 = $4;
   $1 = $1 | $2;
   $7 = $1;
   $1 = HEAP32[$3 >> 2];
   $1 = $1 << 4;
   $5 = $1;
   $1 = HEAP32[$3 >> 2];
   $0 = $1;
   $2 = HEAP32[$3 + 4 >> 2];
   $1 = $2 >>> 28 | 0;
   $4 = $1;
   $6 = ($2 & 268435455) << 4 | $0 >>> 28;
   $2 = 0;
   $9 = $6 | $2;
   $1 = $5;
   $0 = $4;
   $0 = $1 | $0;
   $4 = $0;
   $0 = HEAP32[$3 >> 2];
   $5 = $0 << 30;
   $2 = HEAP32[$3 + 4 >> 2];
   $0 = $2 << 30 | $0 >>> 2;
   $2 = $0;
   $0 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   $6 = $1 >>> 2 | 0;
   $0 = $2;
   $2 = $16;
   $2 = $0 | $2;
   $0 = $9;
   $1 = $5;
   $6 = $1 | $6;
   $6 = $0 ^ $6;
   $1 = $2;
   $2 = $4;
   $1 = $1 ^ $2;
   $0 = $1;
   $1 = $7;
   $0 = $1 ^ $0;
   $4 = $0;
   $1 = $11;
   $2 = $10;
   $6 = $6 ^ $2;
   $5 = $1 + $6 | 0;
   $0 = $8;
   $2 = $4;
   $4 = $0 + $2 | 0;
   HEAP32[$3 + 704 >> 2] = $5;
   $4 = $5 >>> 0 < $6 >>> 0 ? $4 + 1 | 0 : $4;
   HEAP32[$3 + 708 >> 2] = $4;
   $1 = HEAP32[$3 + 716 >> 2];
   $5 = $1;
   $4 = HEAP32[$3 + 712 >> 2];
   $0 = $4;
   $1 = HEAP32[$3 + 40 >> 2];
   $6 = $1;
   $2 = $0 + $1 | 0;
   $4 = HEAP32[$3 + 44 >> 2];
   $1 = $4;
   $4 = $5;
   $5 = $1 + $4 | 0;
   HEAP32[$3 + 40 >> 2] = $2;
   $5 = $2 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
   HEAP32[$3 + 44 >> 2] = $5;
   $5 = HEAP32[$3 + 712 >> 2];
   $4 = $5;
   $0 = HEAP32[$3 + 716 >> 2];
   $1 = $0;
   $0 = HEAP32[$3 + 704 >> 2];
   $6 = $0;
   $5 = HEAP32[$3 + 708 >> 2];
   $0 = $5;
   $5 = $1;
   $2 = $0 + $5 | 0;
   $1 = $4 + $6 | 0;
   $2 = $1 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
   HEAP32[$3 + 8 >> 2] = $1;
   HEAP32[$3 + 12 >> 2] = $2;
   HEAP32[$3 + 724 >> 2] = HEAP32[$3 + 724 >> 2] + 1;
   $5 = ($3 - -64 | 0) + (HEAP32[$3 + 724 >> 2] << 3) | 0;
   $2 = HEAP32[$5 >> 2];
   $14 = $2;
   $4 = HEAP32[$5 + 4 >> 2];
   $15 = $4;
   $5 = (HEAP32[$3 + 724 >> 2] << 3) + 172240 | 0;
   $4 = HEAP32[$5 >> 2];
   $13 = $4;
   $2 = HEAP32[$5 + 4 >> 2];
   $12 = $2;
   $2 = HEAP32[$3 + 16 >> 2];
   $9 = $2;
   $4 = HEAP32[$3 + 20 >> 2];
   $8 = $4;
   $4 = HEAP32[$3 + 40 >> 2];
   $1 = $4 << 23;
   $2 = HEAP32[$3 + 44 >> 2];
   $4 = $2 << 23 | $4 >>> 9;
   $0 = $4;
   $4 = HEAP32[$3 + 40 >> 2];
   $5 = HEAP32[$3 + 44 >> 2];
   $6 = $5 >>> 9 | 0;
   $5 = $1;
   $11 = $6 | $5;
   $4 = $0;
   $2 = $16;
   $2 = $4 | $2;
   $7 = $2;
   $2 = HEAP32[$3 + 40 >> 2];
   $2 = $2 << 18;
   $0 = $2;
   $2 = HEAP32[$3 + 40 >> 2];
   $5 = $2;
   $4 = HEAP32[$3 + 44 >> 2];
   $2 = $4 >>> 14 | 0;
   $6 = ($4 & 16383) << 18 | $5 >>> 14;
   $5 = $2;
   $4 = 0;
   $10 = $4 | $6;
   $2 = $0;
   $5 = $2 | $5;
   $1 = $5;
   $5 = HEAP32[$3 + 40 >> 2];
   $2 = $5;
   $5 = $2 << 14;
   $0 = $5;
   $5 = HEAP32[$3 + 40 >> 2];
   $4 = $5;
   $2 = HEAP32[$3 + 44 >> 2];
   $5 = $2 >>> 18 | 0;
   $6 = ($2 & 262143) << 14 | $4 >>> 18;
   $4 = $5;
   $5 = $0;
   $4 = $4 | $5;
   $0 = $4;
   $2 = 0;
   $6 = $6 | $2;
   $5 = $10;
   $6 = $6 ^ $5;
   $4 = $1;
   $2 = $0;
   $2 = $4 ^ $2;
   $5 = $2;
   $2 = $7;
   $5 = $2 ^ $5;
   $4 = $11;
   $6 = $4 ^ $6;
   $2 = $9;
   $0 = $6 + $2 | 0;
   $4 = $5;
   $5 = $8;
   $1 = $4 + $5 | 0;
   $1 = $0 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
   $11 = $1;
   $1 = HEAP32[$3 + 24 >> 2];
   $10 = $1;
   $2 = HEAP32[$3 + 28 >> 2];
   $9 = $2;
   $2 = HEAP32[$3 + 40 >> 2];
   $8 = $2;
   $1 = HEAP32[$3 + 44 >> 2];
   $7 = $1;
   $1 = HEAP32[$3 + 32 >> 2];
   $5 = $1;
   $2 = HEAP32[$3 + 36 >> 2];
   $4 = $2;
   $2 = HEAP32[$3 + 24 >> 2];
   $6 = $2;
   $1 = HEAP32[$3 + 28 >> 2];
   $2 = $1;
   $1 = $4;
   $2 = $1 ^ $2;
   $4 = $2;
   $1 = $8;
   $6 = $6 ^ $5;
   $6 = $1 & $6;
   $2 = $7;
   $5 = $4;
   $5 = $2 & $5;
   $1 = $5;
   $5 = $9;
   $1 = $1 ^ $5;
   $5 = $1;
   $2 = $10;
   $6 = $6 ^ $2;
   $4 = $6 + $0 | 0;
   $1 = $11;
   $2 = $5;
   $0 = $1 + $2 | 0;
   $0 = $4 >>> 0 < $6 >>> 0 ? $0 + 1 | 0 : $0;
   $5 = $0;
   $6 = $4;
   $1 = $13;
   $2 = $4 + $1 | 0;
   $0 = $12;
   $4 = $0 + $5 | 0;
   $4 = $2 >>> 0 < $6 >>> 0 ? $4 + 1 | 0 : $4;
   $6 = $2;
   $0 = $14;
   $5 = $2 + $0 | 0;
   $1 = $4;
   $4 = $15;
   $2 = $1 + $4 | 0;
   HEAP32[$3 + 712 >> 2] = $5;
   $2 = $5 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
   HEAP32[$3 + 716 >> 2] = $2;
   $0 = HEAP32[$3 + 12 >> 2];
   $1 = $0;
   $2 = HEAP32[$3 + 8 >> 2];
   $0 = HEAP32[$3 >> 2];
   $9 = $2 & $0;
   $2 = HEAP32[$3 + 4 >> 2];
   $0 = $2;
   $2 = $1;
   $0 = $0 & $2;
   $8 = $0;
   $0 = HEAP32[$3 + 56 >> 2];
   $7 = $0;
   $4 = HEAP32[$3 + 60 >> 2];
   $5 = $4;
   $4 = HEAP32[$3 + 8 >> 2];
   $2 = $4;
   $0 = HEAP32[$3 + 12 >> 2];
   $1 = $0;
   $0 = HEAP32[$3 >> 2];
   $6 = $0;
   $4 = HEAP32[$3 + 4 >> 2];
   $0 = $4;
   $4 = $1;
   $0 = $0 | $4;
   $1 = $0;
   $4 = $7;
   $6 = $6 | $2;
   $0 = $5;
   $2 = $1;
   $2 = $0 & $2;
   $0 = $9;
   $6 = $4 & $6;
   $12 = $0 | $6;
   $4 = $2;
   $2 = $8;
   $4 = $4 | $2;
   $8 = $4;
   $4 = HEAP32[$3 + 8 >> 2];
   $2 = $4;
   $5 = $2 << 25;
   $0 = HEAP32[$3 + 12 >> 2];
   $4 = $0 << 25 | $2 >>> 7;
   $1 = $4;
   $4 = HEAP32[$3 + 8 >> 2];
   $2 = HEAP32[$3 + 12 >> 2];
   $6 = $2 >>> 7 | 0;
   $2 = $5;
   $11 = $6 | $2;
   $4 = 0;
   $0 = $4;
   $4 = $1;
   $0 = $0 | $4;
   $7 = $0;
   $0 = HEAP32[$3 + 8 >> 2];
   $0 = $0 << 4;
   $1 = $0;
   $0 = HEAP32[$3 + 8 >> 2];
   $2 = $0;
   $4 = HEAP32[$3 + 12 >> 2];
   $0 = $4 >>> 28 | 0;
   $6 = ($4 & 268435455) << 4 | $2 >>> 28;
   $2 = $0;
   $4 = 0;
   $10 = $4 | $6;
   $0 = $1;
   $2 = $0 | $2;
   $5 = $2;
   $2 = HEAP32[$3 + 8 >> 2];
   $0 = $2;
   $9 = $0 << 30;
   $4 = HEAP32[$3 + 12 >> 2];
   $2 = $4 << 30 | $0 >>> 2;
   $1 = $2;
   $2 = HEAP32[$3 + 8 >> 2];
   $0 = HEAP32[$3 + 12 >> 2];
   $6 = $0 >>> 2 | 0;
   $2 = 0;
   $4 = $2;
   $2 = $1;
   $4 = $4 | $2;
   $0 = $9;
   $6 = $0 | $6;
   $2 = $10;
   $6 = $6 ^ $2;
   $0 = $4;
   $4 = $5;
   $0 = $0 ^ $4;
   $2 = $0;
   $0 = $7;
   $2 = $0 ^ $2;
   $0 = $12;
   $4 = $11;
   $6 = $4 ^ $6;
   $1 = $0 + $6 | 0;
   $4 = $2;
   $2 = $8;
   $5 = $4 + $2 | 0;
   HEAP32[$3 + 704 >> 2] = $1;
   $5 = $1 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
   HEAP32[$3 + 708 >> 2] = $5;
   $0 = HEAP32[$3 + 716 >> 2];
   $1 = $0;
   $0 = HEAP32[$3 + 48 >> 2];
   $6 = $0;
   $5 = HEAP32[$3 + 712 >> 2];
   $2 = $5;
   $4 = $0 + $2 | 0;
   $5 = HEAP32[$3 + 52 >> 2];
   $0 = $5;
   $5 = $1;
   $1 = $0 + $5 | 0;
   HEAP32[$3 + 48 >> 2] = $4;
   $1 = $4 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
   HEAP32[$3 + 52 >> 2] = $1;
   $1 = HEAP32[$3 + 712 >> 2];
   $5 = $1;
   $2 = HEAP32[$3 + 716 >> 2];
   $7 = $2;
   $1 = HEAP32[$3 + 708 >> 2];
   $4 = $1;
   $2 = HEAP32[$3 + 704 >> 2];
   $6 = $2;
   $0 = $2 + $5 | 0;
   $1 = $7;
   $2 = $4;
   $4 = $1 + $2 | 0;
   HEAP32[$3 + 16 >> 2] = $0;
   $4 = $0 >>> 0 < $6 >>> 0 ? $4 + 1 | 0 : $4;
   HEAP32[$3 + 20 >> 2] = $4;
   HEAP32[$3 + 724 >> 2] = HEAP32[$3 + 724 >> 2] + 1;
   $1 = ($3 - -64 | 0) + (HEAP32[$3 + 724 >> 2] << 3) | 0;
   $4 = HEAP32[$1 >> 2];
   $14 = $4;
   $5 = HEAP32[$1 + 4 >> 2];
   $15 = $5;
   $1 = (HEAP32[$3 + 724 >> 2] << 3) + 172240 | 0;
   $5 = HEAP32[$1 >> 2];
   $13 = $5;
   $4 = HEAP32[$1 + 4 >> 2];
   $12 = $4;
   $4 = HEAP32[$3 + 24 >> 2];
   $9 = $4;
   $5 = HEAP32[$3 + 28 >> 2];
   $8 = $5;
   $5 = HEAP32[$3 + 48 >> 2];
   $1 = $5;
   $2 = $1 << 23;
   $4 = HEAP32[$3 + 52 >> 2];
   $5 = $4 << 23 | $1 >>> 9;
   $0 = $5;
   $5 = HEAP32[$3 + 48 >> 2];
   $1 = HEAP32[$3 + 52 >> 2];
   $6 = $1 >>> 9 | 0;
   $1 = $2;
   $11 = $1 | $6;
   $5 = 0;
   $4 = $5;
   $5 = $0;
   $4 = $4 | $5;
   $7 = $4;
   $4 = HEAP32[$3 + 48 >> 2];
   $4 = $4 << 18;
   $0 = $4;
   $4 = HEAP32[$3 + 48 >> 2];
   $1 = $4;
   $5 = HEAP32[$3 + 52 >> 2];
   $4 = $5 >>> 14 | 0;
   $6 = ($5 & 16383) << 18 | $1 >>> 14;
   $5 = 0;
   $10 = $6 | $5;
   $1 = $4;
   $4 = $0;
   $1 = $1 | $4;
   $2 = $1;
   $1 = HEAP32[$3 + 48 >> 2];
   $1 = $1 << 14;
   $0 = $1;
   $1 = HEAP32[$3 + 48 >> 2];
   $5 = $1;
   $4 = HEAP32[$3 + 52 >> 2];
   $1 = $4 >>> 18 | 0;
   $6 = ($4 & 262143) << 14 | $5 >>> 18;
   $5 = $1;
   $1 = $0;
   $5 = $1 | $5;
   $1 = $10;
   $4 = 0;
   $6 = $4 | $6;
   $6 = $1 ^ $6;
   $4 = $5;
   $5 = $2;
   $4 = $4 ^ $5;
   $1 = $4;
   $4 = $7;
   $1 = $1 ^ $4;
   $0 = $1;
   $4 = $9;
   $5 = $11;
   $6 = $6 ^ $5;
   $2 = $4 + $6 | 0;
   $1 = $8;
   $5 = $0;
   $0 = $1 + $5 | 0;
   $0 = $2 >>> 0 < $6 >>> 0 ? $0 + 1 | 0 : $0;
   $11 = $0;
   $0 = HEAP32[$3 + 32 >> 2];
   $10 = $0;
   $4 = HEAP32[$3 + 36 >> 2];
   $9 = $4;
   $4 = HEAP32[$3 + 48 >> 2];
   $8 = $4;
   $0 = HEAP32[$3 + 52 >> 2];
   $7 = $0;
   $0 = HEAP32[$3 + 40 >> 2];
   $5 = $0;
   $4 = HEAP32[$3 + 44 >> 2];
   $1 = $4;
   $4 = HEAP32[$3 + 32 >> 2];
   $6 = $4;
   $0 = HEAP32[$3 + 36 >> 2];
   $4 = $0;
   $0 = $1;
   $4 = $0 ^ $4;
   $0 = $8;
   $1 = $5;
   $6 = $1 ^ $6;
   $6 = $0 & $6;
   $1 = $4;
   $4 = $7;
   $1 = $1 & $4;
   $0 = $1;
   $1 = $9;
   $0 = $1 ^ $0;
   $7 = $0;
   $1 = $2;
   $4 = $10;
   $6 = $4 ^ $6;
   $5 = $1 + $6 | 0;
   $0 = $11;
   $4 = $7;
   $2 = $0 + $4 | 0;
   $2 = $5 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
   $6 = $5;
   $0 = $13;
   $4 = $5 + $0 | 0;
   $1 = $2;
   $2 = $12;
   $5 = $1 + $2 | 0;
   $5 = $4 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
   $6 = $4;
   $2 = $14;
   $1 = $2 + $4 | 0;
   $0 = $5;
   $5 = $15;
   $4 = $0 + $5 | 0;
   HEAP32[$3 + 712 >> 2] = $1;
   $4 = $1 >>> 0 < $6 >>> 0 ? $4 + 1 | 0 : $4;
   HEAP32[$3 + 716 >> 2] = $4;
   $4 = HEAP32[$3 + 16 >> 2];
   $5 = $4;
   $2 = HEAP32[$3 + 20 >> 2];
   $1 = $2;
   $4 = HEAP32[$3 + 12 >> 2];
   $0 = $4;
   $2 = HEAP32[$3 + 8 >> 2];
   $9 = $2 & $5;
   $4 = $1;
   $2 = $0;
   $2 = $4 & $2;
   $8 = $2;
   $2 = HEAP32[$3 >> 2];
   $7 = $2;
   $5 = HEAP32[$3 + 4 >> 2];
   $1 = $5;
   $5 = HEAP32[$3 + 16 >> 2];
   $4 = $5;
   $2 = HEAP32[$3 + 20 >> 2];
   $0 = $2;
   $2 = HEAP32[$3 + 8 >> 2];
   $6 = $2;
   $5 = HEAP32[$3 + 12 >> 2];
   $2 = $5;
   $5 = $0;
   $2 = $2 | $5;
   $6 = $4 | $6;
   $5 = $7;
   $4 = $2;
   $2 = $1;
   $4 = $4 & $2;
   $0 = $4;
   $6 = $6 & $5;
   $2 = $9;
   $11 = $6 | $2;
   $4 = $8;
   $5 = $0;
   $5 = $4 | $5;
   $8 = $5;
   $5 = HEAP32[$3 + 16 >> 2];
   $4 = $5;
   $1 = $4 << 25;
   $2 = HEAP32[$3 + 20 >> 2];
   $5 = $2 << 25 | $4 >>> 7;
   $0 = $5;
   $5 = HEAP32[$3 + 16 >> 2];
   $4 = HEAP32[$3 + 20 >> 2];
   $6 = $4 >>> 7 | 0;
   $4 = $1;
   $10 = $4 | $6;
   $5 = 0;
   $2 = $5;
   $5 = $0;
   $2 = $2 | $5;
   $7 = $2;
   $2 = HEAP32[$3 + 16 >> 2];
   $2 = $2 << 4;
   $0 = $2;
   $2 = HEAP32[$3 + 16 >> 2];
   $4 = $2;
   $5 = HEAP32[$3 + 20 >> 2];
   $2 = $5 >>> 28 | 0;
   $6 = ($5 & 268435455) << 4 | $4 >>> 28;
   $5 = 0;
   $6 = $6 | $5;
   $4 = $2;
   $2 = $0;
   $4 = $4 | $2;
   $1 = $4;
   $4 = HEAP32[$3 + 16 >> 2];
   $2 = $4;
   $9 = $2 << 30;
   $5 = HEAP32[$3 + 20 >> 2];
   $4 = $5 << 30 | $2 >>> 2;
   $0 = $4;
   $4 = HEAP32[$3 + 16 >> 2];
   $2 = HEAP32[$3 + 20 >> 2];
   $4 = $0;
   $5 = $16;
   $5 = $4 | $5;
   $4 = $6;
   $6 = $2 >>> 2 | 0;
   $2 = $9;
   $6 = $6 | $2;
   $6 = $4 ^ $6;
   $2 = $5;
   $5 = $1;
   $2 = $2 ^ $5;
   $4 = $2;
   $2 = $7;
   $4 = $4 ^ $2;
   $1 = $4;
   $5 = $10;
   $6 = $6 ^ $5;
   $2 = $11;
   $0 = $6 + $2 | 0;
   $4 = $8;
   $5 = $1;
   $1 = $4 + $5 | 0;
   HEAP32[$3 + 704 >> 2] = $0;
   $1 = $0 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
   HEAP32[$3 + 708 >> 2] = $1;
   $1 = HEAP32[$3 + 712 >> 2];
   $4 = $1;
   $2 = HEAP32[$3 + 716 >> 2];
   $7 = $2;
   $1 = HEAP32[$3 + 60 >> 2];
   $0 = $1;
   $2 = HEAP32[$3 + 56 >> 2];
   $6 = $2;
   $5 = $4 + $2 | 0;
   $1 = $7;
   $2 = $0;
   $0 = $1 + $2 | 0;
   HEAP32[$3 + 56 >> 2] = $5;
   $0 = $5 >>> 0 < $6 >>> 0 ? $0 + 1 | 0 : $0;
   HEAP32[$3 + 60 >> 2] = $0;
   $0 = HEAP32[$3 + 712 >> 2];
   $1 = $0;
   $4 = HEAP32[$3 + 716 >> 2];
   $7 = $4;
   $0 = HEAP32[$3 + 708 >> 2];
   $5 = $0;
   $4 = HEAP32[$3 + 704 >> 2];
   $6 = $4;
   $2 = $1 + $4 | 0;
   $0 = $7;
   $4 = $5;
   $5 = $0 + $4 | 0;
   HEAP32[$3 + 24 >> 2] = $2;
   $5 = $2 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
   HEAP32[$3 + 28 >> 2] = $5;
   HEAP32[$3 + 724 >> 2] = HEAP32[$3 + 724 >> 2] + 1;
   $0 = ($3 - -64 | 0) + (HEAP32[$3 + 724 >> 2] << 3) | 0;
   $5 = HEAP32[$0 >> 2];
   $14 = $5;
   $1 = HEAP32[$0 + 4 >> 2];
   $15 = $1;
   $0 = (HEAP32[$3 + 724 >> 2] << 3) + 172240 | 0;
   $1 = HEAP32[$0 >> 2];
   $13 = $1;
   $5 = HEAP32[$0 + 4 >> 2];
   $12 = $5;
   $5 = HEAP32[$3 + 32 >> 2];
   $9 = $5;
   $1 = HEAP32[$3 + 36 >> 2];
   $8 = $1;
   $1 = HEAP32[$3 + 56 >> 2];
   $0 = $1;
   $4 = $0 << 23;
   $5 = HEAP32[$3 + 60 >> 2];
   $1 = $5 << 23 | $0 >>> 9;
   $2 = $1;
   $1 = HEAP32[$3 + 56 >> 2];
   $0 = HEAP32[$3 + 60 >> 2];
   $6 = $0 >>> 9 | 0;
   $0 = $4;
   $11 = $0 | $6;
   $1 = $2;
   $5 = $16;
   $5 = $1 | $5;
   $7 = $5;
   $5 = HEAP32[$3 + 56 >> 2];
   $1 = $5;
   $5 = $1 << 18;
   $2 = $5;
   $5 = HEAP32[$3 + 56 >> 2];
   $0 = $5;
   $1 = HEAP32[$3 + 60 >> 2];
   $5 = $1 >>> 14 | 0;
   $6 = ($1 & 16383) << 18 | $0 >>> 14;
   $1 = 0;
   $10 = $1 | $6;
   $0 = $5;
   $5 = $2;
   $0 = $0 | $5;
   $4 = $0;
   $0 = HEAP32[$3 + 56 >> 2];
   $0 = $0 << 14;
   $2 = $0;
   $0 = HEAP32[$3 + 56 >> 2];
   $1 = $0;
   $5 = HEAP32[$3 + 60 >> 2];
   $0 = $5 >>> 18 | 0;
   $6 = ($5 & 262143) << 14 | $1 >>> 18;
   $1 = $0;
   $0 = $2;
   $1 = $1 | $0;
   $2 = $1;
   $0 = $10;
   $5 = 0;
   $6 = $6 | $5;
   $6 = $0 ^ $6;
   $1 = $4;
   $5 = $2;
   $5 = $1 ^ $5;
   $0 = $5;
   $5 = $7;
   $0 = $0 ^ $5;
   $1 = $11;
   $6 = $1 ^ $6;
   $5 = $9;
   $4 = $6 + $5 | 0;
   $1 = $0;
   $0 = $8;
   $2 = $1 + $0 | 0;
   $2 = $4 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
   $11 = $2;
   $2 = HEAP32[$3 + 40 >> 2];
   $10 = $2;
   $5 = HEAP32[$3 + 44 >> 2];
   $9 = $5;
   $5 = HEAP32[$3 + 56 >> 2];
   $8 = $5;
   $2 = HEAP32[$3 + 60 >> 2];
   $7 = $2;
   $2 = HEAP32[$3 + 48 >> 2];
   $1 = $2;
   $5 = HEAP32[$3 + 52 >> 2];
   $0 = $5;
   $5 = HEAP32[$3 + 40 >> 2];
   $6 = $5;
   $2 = HEAP32[$3 + 44 >> 2];
   $5 = $2;
   $2 = $0;
   $5 = $2 ^ $5;
   $0 = $1;
   $6 = $0 ^ $6;
   $2 = $8;
   $6 = $6 & $2;
   $0 = $5;
   $5 = $7;
   $0 = $0 & $5;
   $2 = $0;
   $0 = $9;
   $2 = $0 ^ $2;
   $7 = $2;
   $0 = $4;
   $5 = $10;
   $6 = $6 ^ $5;
   $1 = $0 + $6 | 0;
   $2 = $11;
   $5 = $7;
   $4 = $2 + $5 | 0;
   $4 = $1 >>> 0 < $6 >>> 0 ? $4 + 1 | 0 : $4;
   $6 = $1;
   $2 = $13;
   $5 = $2 + $1 | 0;
   $0 = $4;
   $4 = $12;
   $1 = $0 + $4 | 0;
   $1 = $5 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
   $2 = $1;
   $6 = $5;
   $4 = $14;
   $0 = $5 + $4 | 0;
   $1 = $15;
   $5 = $1 + $2 | 0;
   HEAP32[$3 + 712 >> 2] = $0;
   $5 = $0 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
   HEAP32[$3 + 716 >> 2] = $5;
   $4 = HEAP32[$3 + 28 >> 2];
   $0 = $4;
   $5 = HEAP32[$3 + 24 >> 2];
   $1 = $5;
   $4 = HEAP32[$3 + 16 >> 2];
   $9 = $1 & $4;
   $5 = HEAP32[$3 + 20 >> 2];
   $4 = $5;
   $5 = $0;
   $4 = $4 & $5;
   $8 = $4;
   $4 = HEAP32[$3 + 8 >> 2];
   $7 = $4;
   $1 = HEAP32[$3 + 12 >> 2];
   $2 = $1;
   $1 = HEAP32[$3 + 24 >> 2];
   $5 = $1;
   $4 = HEAP32[$3 + 28 >> 2];
   $0 = $4;
   $4 = HEAP32[$3 + 16 >> 2];
   $6 = $4;
   $1 = HEAP32[$3 + 20 >> 2];
   $4 = $1;
   $1 = $0;
   $4 = $1 | $4;
   $0 = $4;
   $1 = $7;
   $6 = $6 | $5;
   $4 = $2;
   $5 = $0;
   $5 = $4 & $5;
   $4 = $9;
   $6 = $1 & $6;
   $12 = $4 | $6;
   $1 = $5;
   $5 = $8;
   $1 = $1 | $5;
   $8 = $1;
   $1 = HEAP32[$3 + 24 >> 2];
   $2 = $1 << 25;
   $4 = HEAP32[$3 + 28 >> 2];
   $1 = $4 << 25 | $1 >>> 7;
   $0 = $1;
   $1 = HEAP32[$3 + 24 >> 2];
   $5 = HEAP32[$3 + 28 >> 2];
   $6 = $5 >>> 7 | 0;
   $5 = $2;
   $11 = $6 | $5;
   $1 = $0;
   $4 = $16;
   $4 = $1 | $4;
   $7 = $4;
   $4 = HEAP32[$3 + 24 >> 2];
   $1 = $4;
   $4 = $1 << 4;
   $0 = $4;
   $4 = HEAP32[$3 + 24 >> 2];
   $5 = $4;
   $1 = HEAP32[$3 + 28 >> 2];
   $4 = $1 >>> 28 | 0;
   $6 = ($1 & 268435455) << 4 | $5 >>> 28;
   $5 = $4;
   $1 = 0;
   $10 = $1 | $6;
   $4 = $0;
   $5 = $4 | $5;
   $2 = $5;
   $5 = HEAP32[$3 + 24 >> 2];
   $4 = $5;
   $9 = $4 << 30;
   $1 = HEAP32[$3 + 28 >> 2];
   $5 = $1 << 30 | $4 >>> 2;
   $0 = $5;
   $5 = HEAP32[$3 + 24 >> 2];
   $4 = HEAP32[$3 + 28 >> 2];
   $6 = $4 >>> 2 | 0;
   $5 = 0;
   $1 = $5;
   $5 = $0;
   $1 = $1 | $5;
   $0 = $1;
   $4 = $9;
   $6 = $4 | $6;
   $5 = $10;
   $6 = $6 ^ $5;
   $1 = $2;
   $4 = $0;
   $4 = $1 ^ $4;
   $5 = $4;
   $4 = $7;
   $5 = $4 ^ $5;
   $4 = $12;
   $1 = $11;
   $6 = $1 ^ $6;
   $2 = $4 + $6 | 0;
   $1 = $5;
   $5 = $8;
   $0 = $1 + $5 | 0;
   HEAP32[$3 + 704 >> 2] = $2;
   $0 = $2 >>> 0 < $6 >>> 0 ? $0 + 1 | 0 : $0;
   HEAP32[$3 + 708 >> 2] = $0;
   $0 = HEAP32[$3 + 712 >> 2];
   $5 = $0;
   $4 = HEAP32[$3 + 716 >> 2];
   $7 = $4;
   $0 = HEAP32[$3 + 4 >> 2];
   $2 = $0;
   $4 = HEAP32[$3 >> 2];
   $6 = $4;
   $1 = $4 + $5 | 0;
   $0 = $7;
   $4 = $2;
   $2 = $0 + $4 | 0;
   HEAP32[$3 >> 2] = $1;
   $2 = $1 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
   HEAP32[$3 + 4 >> 2] = $2;
   $2 = HEAP32[$3 + 712 >> 2];
   $4 = $2;
   $5 = HEAP32[$3 + 716 >> 2];
   $0 = $5;
   $5 = HEAP32[$3 + 704 >> 2];
   $6 = $5;
   $2 = HEAP32[$3 + 708 >> 2];
   $5 = $2;
   $2 = $0;
   $1 = $2 + $5 | 0;
   $0 = $4;
   $4 = $0 + $6 | 0;
   $1 = $4 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
   HEAP32[$3 + 32 >> 2] = $4;
   HEAP32[$3 + 36 >> 2] = $1;
   HEAP32[$3 + 724 >> 2] = HEAP32[$3 + 724 >> 2] + 1;
   $2 = ($3 - -64 | 0) + (HEAP32[$3 + 724 >> 2] << 3) | 0;
   $1 = HEAP32[$2 >> 2];
   $14 = $1;
   $0 = HEAP32[$2 + 4 >> 2];
   $15 = $0;
   $2 = (HEAP32[$3 + 724 >> 2] << 3) + 172240 | 0;
   $0 = HEAP32[$2 >> 2];
   $13 = $0;
   $1 = HEAP32[$2 + 4 >> 2];
   $12 = $1;
   $1 = HEAP32[$3 + 40 >> 2];
   $9 = $1;
   $0 = HEAP32[$3 + 44 >> 2];
   $8 = $0;
   $0 = HEAP32[$3 >> 2];
   $5 = $0 << 23;
   $1 = HEAP32[$3 + 4 >> 2];
   $0 = $1 << 23 | $0 >>> 9;
   $4 = $0;
   $0 = HEAP32[$3 >> 2];
   $2 = HEAP32[$3 + 4 >> 2];
   $6 = $2 >>> 9 | 0;
   $2 = $5;
   $11 = $6 | $2;
   $0 = 0;
   $1 = $0;
   $0 = $4;
   $1 = $1 | $0;
   $7 = $1;
   $1 = HEAP32[$3 >> 2];
   $0 = $1;
   $1 = $0 << 18;
   $4 = $1;
   $1 = HEAP32[$3 >> 2];
   $2 = $1;
   $0 = HEAP32[$3 + 4 >> 2];
   $1 = $0 >>> 14 | 0;
   $6 = ($0 & 16383) << 18 | $2 >>> 14;
   $2 = $1;
   $0 = 0;
   $10 = $0 | $6;
   $1 = $4;
   $2 = $1 | $2;
   $5 = $2;
   $2 = HEAP32[$3 >> 2];
   $1 = $2;
   $2 = $1 << 14;
   $4 = $2;
   $2 = HEAP32[$3 >> 2];
   $0 = $2;
   $1 = HEAP32[$3 + 4 >> 2];
   $2 = $1 >>> 18 | 0;
   $6 = ($1 & 262143) << 14 | $0 >>> 18;
   $0 = $2;
   $2 = $4;
   $0 = $0 | $2;
   $1 = 0;
   $6 = $1 | $6;
   $2 = $10;
   $6 = $6 ^ $2;
   $1 = $0;
   $0 = $5;
   $1 = $1 ^ $0;
   $2 = $1;
   $1 = $7;
   $2 = $1 ^ $2;
   $1 = $9;
   $0 = $11;
   $6 = $0 ^ $6;
   $5 = $1 + $6 | 0;
   $0 = $2;
   $2 = $8;
   $4 = $0 + $2 | 0;
   $4 = $5 >>> 0 < $6 >>> 0 ? $4 + 1 | 0 : $4;
   $11 = $4;
   $4 = HEAP32[$3 + 48 >> 2];
   $10 = $4;
   $1 = HEAP32[$3 + 52 >> 2];
   $9 = $1;
   $1 = HEAP32[$3 >> 2];
   $8 = $1;
   $4 = HEAP32[$3 + 4 >> 2];
   $7 = $4;
   $4 = HEAP32[$3 + 56 >> 2];
   $2 = $4;
   $1 = HEAP32[$3 + 60 >> 2];
   $0 = $1;
   $1 = HEAP32[$3 + 48 >> 2];
   $6 = $1;
   $4 = HEAP32[$3 + 52 >> 2];
   $1 = $4;
   $4 = $0;
   $1 = $1 ^ $4;
   $0 = $1;
   $4 = $8;
   $6 = $6 ^ $2;
   $6 = $4 & $6;
   $1 = $7;
   $2 = $0;
   $2 = $1 & $2;
   $4 = $2;
   $2 = $9;
   $4 = $4 ^ $2;
   $1 = $10;
   $6 = $1 ^ $6;
   $2 = $5;
   $0 = $6 + $2 | 0;
   $1 = $4;
   $4 = $11;
   $5 = $1 + $4 | 0;
   $5 = $0 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
   $6 = $0;
   $4 = $13;
   $1 = $4 + $0 | 0;
   $2 = $5;
   $5 = $12;
   $0 = $2 + $5 | 0;
   $0 = $1 >>> 0 < $6 >>> 0 ? $0 + 1 | 0 : $0;
   $4 = $0;
   $6 = $1;
   $5 = $14;
   $2 = $5 + $1 | 0;
   $0 = $15;
   $1 = $0 + $4 | 0;
   HEAP32[$3 + 712 >> 2] = $2;
   $1 = $2 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
   HEAP32[$3 + 716 >> 2] = $1;
   $1 = HEAP32[$3 + 32 >> 2];
   $0 = $1;
   $5 = HEAP32[$3 + 36 >> 2];
   $4 = $5;
   $1 = HEAP32[$3 + 28 >> 2];
   $2 = $1;
   $5 = HEAP32[$3 + 24 >> 2];
   $9 = $0 & $5;
   $1 = $4;
   $5 = $2;
   $5 = $1 & $5;
   $8 = $5;
   $5 = HEAP32[$3 + 16 >> 2];
   $7 = $5;
   $0 = HEAP32[$3 + 20 >> 2];
   $4 = $0;
   $0 = HEAP32[$3 + 32 >> 2];
   $2 = $0;
   $5 = HEAP32[$3 + 36 >> 2];
   $1 = $5;
   $5 = HEAP32[$3 + 24 >> 2];
   $6 = $5;
   $0 = HEAP32[$3 + 28 >> 2];
   $5 = $0;
   $0 = $1;
   $5 = $0 | $5;
   $0 = $7;
   $1 = $2;
   $6 = $1 | $6;
   $1 = $5;
   $5 = $4;
   $1 = $1 & $5;
   $2 = $1;
   $6 = $0 & $6;
   $5 = $9;
   $11 = $6 | $5;
   $1 = $8;
   $0 = $2;
   $0 = $1 | $0;
   $8 = $0;
   $0 = HEAP32[$3 + 32 >> 2];
   $4 = $0 << 25;
   $5 = HEAP32[$3 + 36 >> 2];
   $0 = $5 << 25 | $0 >>> 7;
   $2 = $0;
   $0 = HEAP32[$3 + 32 >> 2];
   $1 = HEAP32[$3 + 36 >> 2];
   $6 = $1 >>> 7 | 0;
   $1 = $4;
   $10 = $1 | $6;
   $0 = $2;
   $5 = $16;
   $5 = $0 | $5;
   $7 = $5;
   $5 = HEAP32[$3 + 32 >> 2];
   $0 = $5;
   $5 = $0 << 4;
   $2 = $5;
   $5 = HEAP32[$3 + 32 >> 2];
   $1 = $5;
   $0 = HEAP32[$3 + 36 >> 2];
   $5 = $0 >>> 28 | 0;
   $6 = ($0 & 268435455) << 4 | $1 >>> 28;
   $0 = 0;
   $6 = $0 | $6;
   $1 = $5;
   $5 = $2;
   $1 = $1 | $5;
   $4 = $1;
   $1 = HEAP32[$3 + 32 >> 2];
   $9 = $1 << 30;
   $0 = HEAP32[$3 + 36 >> 2];
   $1 = $0 << 30 | $1 >>> 2;
   $0 = $1;
   $1 = HEAP32[$3 + 32 >> 2];
   $5 = HEAP32[$3 + 36 >> 2];
   $1 = $0;
   $0 = $16;
   $0 = $1 | $0;
   $2 = $0;
   $1 = $6;
   $6 = $5 >>> 2 | 0;
   $5 = $9;
   $6 = $6 | $5;
   $6 = $1 ^ $6;
   $0 = $4;
   $5 = $2;
   $5 = $0 ^ $5;
   $1 = $5;
   $5 = $7;
   $1 = $1 ^ $5;
   $2 = $1;
   $0 = $10;
   $6 = $0 ^ $6;
   $5 = $11;
   $4 = $6 + $5 | 0;
   $1 = $8;
   $0 = $2;
   $2 = $1 + $0 | 0;
   HEAP32[$3 + 704 >> 2] = $4;
   $2 = $4 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
   HEAP32[$3 + 708 >> 2] = $2;
   $2 = HEAP32[$3 + 712 >> 2];
   $1 = $2;
   $5 = HEAP32[$3 + 716 >> 2];
   $0 = $5;
   $5 = HEAP32[$3 + 8 >> 2];
   $6 = $5;
   $2 = HEAP32[$3 + 12 >> 2];
   $5 = $2;
   $2 = $0;
   $4 = $2 + $5 | 0;
   $0 = $1 + $6 | 0;
   $4 = $0 >>> 0 < $6 >>> 0 ? $4 + 1 | 0 : $4;
   HEAP32[$3 + 8 >> 2] = $0;
   HEAP32[$3 + 12 >> 2] = $4;
   $1 = HEAP32[$3 + 716 >> 2];
   $0 = $1;
   $1 = HEAP32[$3 + 704 >> 2];
   $6 = $1;
   $4 = HEAP32[$3 + 712 >> 2];
   $2 = $4;
   $5 = $1 + $2 | 0;
   $4 = HEAP32[$3 + 708 >> 2];
   $1 = $4;
   $4 = $0;
   $0 = $1 + $4 | 0;
   HEAP32[$3 + 40 >> 2] = $5;
   $0 = $5 >>> 0 < $6 >>> 0 ? $0 + 1 | 0 : $0;
   HEAP32[$3 + 44 >> 2] = $0;
   HEAP32[$3 + 724 >> 2] = HEAP32[$3 + 724 >> 2] + 1;
   $4 = ($3 - -64 | 0) + (HEAP32[$3 + 724 >> 2] << 3) | 0;
   $0 = HEAP32[$4 >> 2];
   $14 = $0;
   $2 = HEAP32[$4 + 4 >> 2];
   $15 = $2;
   $4 = (HEAP32[$3 + 724 >> 2] << 3) + 172240 | 0;
   $2 = HEAP32[$4 >> 2];
   $13 = $2;
   $0 = HEAP32[$4 + 4 >> 2];
   $12 = $0;
   $0 = HEAP32[$3 + 48 >> 2];
   $9 = $0;
   $2 = HEAP32[$3 + 52 >> 2];
   $8 = $2;
   $2 = HEAP32[$3 + 8 >> 2];
   $5 = $2 << 23;
   $0 = HEAP32[$3 + 12 >> 2];
   $2 = $0 << 23 | $2 >>> 9;
   $1 = $2;
   $2 = HEAP32[$3 + 8 >> 2];
   $4 = HEAP32[$3 + 12 >> 2];
   $6 = $4 >>> 9 | 0;
   $4 = $5;
   $11 = $4 | $6;
   $2 = 0;
   $0 = $2;
   $2 = $1;
   $0 = $0 | $2;
   $7 = $0;
   $0 = HEAP32[$3 + 8 >> 2];
   $0 = $0 << 18;
   $5 = $0;
   $0 = HEAP32[$3 + 8 >> 2];
   $4 = $0;
   $2 = HEAP32[$3 + 12 >> 2];
   $0 = $2 >>> 14 | 0;
   $1 = $0;
   $6 = ($2 & 16383) << 18 | $4 >>> 14;
   $2 = 0;
   $10 = $6 | $2;
   $0 = $5;
   $4 = $1;
   $4 = $0 | $4;
   $5 = $4;
   $4 = HEAP32[$3 + 8 >> 2];
   $0 = $4;
   $4 = $0 << 14;
   $1 = $4;
   $4 = HEAP32[$3 + 8 >> 2];
   $2 = $4;
   $0 = HEAP32[$3 + 12 >> 2];
   $4 = $0 >>> 18 | 0;
   $6 = ($0 & 262143) << 14 | $2 >>> 18;
   $2 = $4;
   $4 = $1;
   $2 = $4 | $2;
   $4 = $10;
   $0 = 0;
   $6 = $0 | $6;
   $6 = $4 ^ $6;
   $0 = $2;
   $2 = $5;
   $0 = $0 ^ $2;
   $4 = $0;
   $0 = $7;
   $4 = $0 ^ $4;
   $5 = $4;
   $0 = $9;
   $2 = $11;
   $6 = $6 ^ $2;
   $1 = $0 + $6 | 0;
   $4 = $8;
   $2 = $5;
   $5 = $4 + $2 | 0;
   $5 = $1 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
   $11 = $5;
   $5 = HEAP32[$3 + 56 >> 2];
   $10 = $5;
   $0 = HEAP32[$3 + 60 >> 2];
   $9 = $0;
   $0 = HEAP32[$3 + 8 >> 2];
   $8 = $0;
   $5 = HEAP32[$3 + 12 >> 2];
   $7 = $5;
   $5 = HEAP32[$3 >> 2];
   $4 = $5;
   $0 = HEAP32[$3 + 4 >> 2];
   $2 = $0;
   $0 = HEAP32[$3 + 56 >> 2];
   $6 = $0;
   $5 = HEAP32[$3 + 60 >> 2];
   $0 = $5;
   $5 = $2;
   $0 = $0 ^ $5;
   $2 = $0;
   $6 = $4 ^ $6;
   $5 = $8;
   $6 = $6 & $5;
   $0 = $7;
   $4 = $2;
   $4 = $0 & $4;
   $5 = $4;
   $4 = $9;
   $5 = $4 ^ $5;
   $0 = $10;
   $6 = $0 ^ $6;
   $2 = $6 + $1 | 0;
   $0 = $5;
   $5 = $11;
   $1 = $0 + $5 | 0;
   $1 = $2 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
   $4 = $1;
   $6 = $2;
   $5 = $13;
   $0 = $5 + $2 | 0;
   $1 = $12;
   $2 = $1 + $4 | 0;
   $2 = $0 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
   $5 = $2;
   $6 = $0;
   $1 = $14;
   $4 = $0 + $1 | 0;
   $2 = $15;
   $0 = $2 + $5 | 0;
   HEAP32[$3 + 712 >> 2] = $4;
   $0 = $4 >>> 0 < $6 >>> 0 ? $0 + 1 | 0 : $0;
   HEAP32[$3 + 716 >> 2] = $0;
   $1 = HEAP32[$3 + 44 >> 2];
   $2 = $1;
   $1 = HEAP32[$3 + 32 >> 2];
   $0 = HEAP32[$3 + 40 >> 2];
   $10 = $1 & $0;
   $0 = HEAP32[$3 + 36 >> 2];
   $1 = $0;
   $0 = $2;
   $1 = $1 & $0;
   $9 = $1;
   $1 = HEAP32[$3 + 24 >> 2];
   $8 = $1;
   $2 = HEAP32[$3 + 28 >> 2];
   $7 = $2;
   $2 = HEAP32[$3 + 40 >> 2];
   $5 = $2;
   $1 = HEAP32[$3 + 44 >> 2];
   $0 = $1;
   $1 = HEAP32[$3 + 32 >> 2];
   $6 = $1;
   $2 = HEAP32[$3 + 36 >> 2];
   $1 = $2;
   $2 = $0;
   $1 = $1 | $2;
   $4 = $1;
   $0 = $5;
   $6 = $0 | $6;
   $2 = $8;
   $1 = $7;
   $0 = $4;
   $0 = $1 & $0;
   $4 = $0;
   $1 = $10;
   $6 = $6 & $2;
   $11 = $1 | $6;
   $0 = $9;
   $2 = $4;
   $2 = $0 | $2;
   $8 = $2;
   $2 = HEAP32[$3 + 40 >> 2];
   $0 = $2;
   $5 = $0 << 25;
   $1 = HEAP32[$3 + 44 >> 2];
   $2 = $1 << 25 | $0 >>> 7;
   $4 = $2;
   $2 = HEAP32[$3 + 40 >> 2];
   $0 = HEAP32[$3 + 44 >> 2];
   $6 = $0 >>> 7 | 0;
   $0 = $5;
   $10 = $0 | $6;
   $2 = 0;
   $1 = $2;
   $2 = $4;
   $1 = $1 | $2;
   $7 = $1;
   $1 = HEAP32[$3 + 40 >> 2];
   $1 = $1 << 4;
   $5 = $1;
   $1 = HEAP32[$3 + 40 >> 2];
   $0 = $1;
   $2 = HEAP32[$3 + 44 >> 2];
   $1 = $2 >>> 28 | 0;
   $4 = $1;
   $6 = ($2 & 268435455) << 4 | $0 >>> 28;
   $2 = 0;
   $9 = $6 | $2;
   $1 = $5;
   $0 = $4;
   $0 = $1 | $0;
   $4 = $0;
   $0 = HEAP32[$3 + 40 >> 2];
   $5 = $0 << 30;
   $2 = HEAP32[$3 + 44 >> 2];
   $0 = $2 << 30 | $0 >>> 2;
   $2 = $0;
   $0 = HEAP32[$3 + 40 >> 2];
   $1 = HEAP32[$3 + 44 >> 2];
   $6 = $1 >>> 2 | 0;
   $0 = $2;
   $2 = $16;
   $2 = $0 | $2;
   $0 = $9;
   $1 = $5;
   $6 = $1 | $6;
   $6 = $0 ^ $6;
   $1 = $2;
   $2 = $4;
   $1 = $1 ^ $2;
   $0 = $1;
   $1 = $7;
   $0 = $1 ^ $0;
   $4 = $0;
   $1 = $11;
   $2 = $10;
   $6 = $6 ^ $2;
   $5 = $1 + $6 | 0;
   $0 = $8;
   $2 = $4;
   $4 = $0 + $2 | 0;
   HEAP32[$3 + 704 >> 2] = $5;
   $4 = $5 >>> 0 < $6 >>> 0 ? $4 + 1 | 0 : $4;
   HEAP32[$3 + 708 >> 2] = $4;
   $1 = HEAP32[$3 + 716 >> 2];
   $5 = $1;
   $4 = HEAP32[$3 + 712 >> 2];
   $0 = $4;
   $1 = HEAP32[$3 + 16 >> 2];
   $6 = $1;
   $2 = $0 + $1 | 0;
   $4 = HEAP32[$3 + 20 >> 2];
   $1 = $4;
   $4 = $5;
   $5 = $1 + $4 | 0;
   HEAP32[$3 + 16 >> 2] = $2;
   $5 = $2 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
   HEAP32[$3 + 20 >> 2] = $5;
   $5 = HEAP32[$3 + 712 >> 2];
   $4 = $5;
   $0 = HEAP32[$3 + 716 >> 2];
   $1 = $0;
   $0 = HEAP32[$3 + 704 >> 2];
   $6 = $0;
   $5 = HEAP32[$3 + 708 >> 2];
   $0 = $5;
   $5 = $1;
   $2 = $0 + $5 | 0;
   $1 = $4 + $6 | 0;
   $2 = $1 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
   HEAP32[$3 + 48 >> 2] = $1;
   HEAP32[$3 + 52 >> 2] = $2;
   HEAP32[$3 + 724 >> 2] = HEAP32[$3 + 724 >> 2] + 1;
   $5 = ($3 - -64 | 0) + (HEAP32[$3 + 724 >> 2] << 3) | 0;
   $2 = HEAP32[$5 >> 2];
   $14 = $2;
   $4 = HEAP32[$5 + 4 >> 2];
   $15 = $4;
   $5 = (HEAP32[$3 + 724 >> 2] << 3) + 172240 | 0;
   $4 = HEAP32[$5 >> 2];
   $13 = $4;
   $2 = HEAP32[$5 + 4 >> 2];
   $12 = $2;
   $2 = HEAP32[$3 + 56 >> 2];
   $9 = $2;
   $4 = HEAP32[$3 + 60 >> 2];
   $8 = $4;
   $4 = HEAP32[$3 + 16 >> 2];
   $1 = $4 << 23;
   $2 = HEAP32[$3 + 20 >> 2];
   $4 = $2 << 23 | $4 >>> 9;
   $0 = $4;
   $4 = HEAP32[$3 + 16 >> 2];
   $5 = HEAP32[$3 + 20 >> 2];
   $6 = $5 >>> 9 | 0;
   $5 = $1;
   $11 = $6 | $5;
   $4 = $0;
   $2 = $16;
   $2 = $4 | $2;
   $7 = $2;
   $2 = HEAP32[$3 + 16 >> 2];
   $2 = $2 << 18;
   $0 = $2;
   $2 = HEAP32[$3 + 16 >> 2];
   $5 = $2;
   $4 = HEAP32[$3 + 20 >> 2];
   $2 = $4 >>> 14 | 0;
   $6 = ($4 & 16383) << 18 | $5 >>> 14;
   $5 = $2;
   $4 = 0;
   $10 = $4 | $6;
   $2 = $0;
   $5 = $2 | $5;
   $1 = $5;
   $5 = HEAP32[$3 + 16 >> 2];
   $2 = $5;
   $5 = $2 << 14;
   $0 = $5;
   $5 = HEAP32[$3 + 16 >> 2];
   $4 = $5;
   $2 = HEAP32[$3 + 20 >> 2];
   $5 = $2 >>> 18 | 0;
   $6 = ($2 & 262143) << 14 | $4 >>> 18;
   $4 = $5;
   $5 = $0;
   $4 = $4 | $5;
   $0 = $4;
   $2 = 0;
   $6 = $6 | $2;
   $5 = $10;
   $6 = $6 ^ $5;
   $4 = $1;
   $2 = $0;
   $2 = $4 ^ $2;
   $5 = $2;
   $2 = $7;
   $5 = $2 ^ $5;
   $4 = $11;
   $6 = $4 ^ $6;
   $2 = $9;
   $0 = $6 + $2 | 0;
   $4 = $5;
   $5 = $8;
   $1 = $4 + $5 | 0;
   $1 = $0 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
   $11 = $1;
   $1 = HEAP32[$3 >> 2];
   $10 = $1;
   $2 = HEAP32[$3 + 4 >> 2];
   $9 = $2;
   $2 = HEAP32[$3 + 16 >> 2];
   $8 = $2;
   $1 = HEAP32[$3 + 20 >> 2];
   $7 = $1;
   $1 = HEAP32[$3 + 8 >> 2];
   $5 = $1;
   $2 = HEAP32[$3 + 12 >> 2];
   $4 = $2;
   $2 = HEAP32[$3 >> 2];
   $6 = $2;
   $1 = HEAP32[$3 + 4 >> 2];
   $2 = $1;
   $1 = $4;
   $2 = $1 ^ $2;
   $4 = $2;
   $1 = $8;
   $6 = $6 ^ $5;
   $6 = $1 & $6;
   $2 = $7;
   $5 = $4;
   $5 = $2 & $5;
   $1 = $5;
   $5 = $9;
   $1 = $1 ^ $5;
   $5 = $1;
   $2 = $10;
   $6 = $6 ^ $2;
   $4 = $6 + $0 | 0;
   $1 = $11;
   $2 = $5;
   $0 = $1 + $2 | 0;
   $0 = $4 >>> 0 < $6 >>> 0 ? $0 + 1 | 0 : $0;
   $5 = $0;
   $6 = $4;
   $1 = $13;
   $2 = $4 + $1 | 0;
   $0 = $12;
   $4 = $0 + $5 | 0;
   $4 = $2 >>> 0 < $6 >>> 0 ? $4 + 1 | 0 : $4;
   $6 = $2;
   $0 = $14;
   $5 = $2 + $0 | 0;
   $1 = $4;
   $4 = $15;
   $2 = $1 + $4 | 0;
   HEAP32[$3 + 712 >> 2] = $5;
   $2 = $5 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
   HEAP32[$3 + 716 >> 2] = $2;
   $0 = HEAP32[$3 + 52 >> 2];
   $1 = $0;
   $2 = HEAP32[$3 + 48 >> 2];
   $0 = HEAP32[$3 + 40 >> 2];
   $9 = $2 & $0;
   $2 = HEAP32[$3 + 44 >> 2];
   $0 = $2;
   $2 = $1;
   $0 = $0 & $2;
   $8 = $0;
   $0 = HEAP32[$3 + 32 >> 2];
   $7 = $0;
   $4 = HEAP32[$3 + 36 >> 2];
   $5 = $4;
   $4 = HEAP32[$3 + 48 >> 2];
   $2 = $4;
   $0 = HEAP32[$3 + 52 >> 2];
   $1 = $0;
   $0 = HEAP32[$3 + 40 >> 2];
   $6 = $0;
   $4 = HEAP32[$3 + 44 >> 2];
   $0 = $4;
   $4 = $1;
   $0 = $0 | $4;
   $1 = $0;
   $4 = $7;
   $6 = $6 | $2;
   $0 = $5;
   $2 = $1;
   $2 = $0 & $2;
   $0 = $9;
   $6 = $4 & $6;
   $12 = $0 | $6;
   $4 = $2;
   $2 = $8;
   $4 = $4 | $2;
   $8 = $4;
   $4 = HEAP32[$3 + 48 >> 2];
   $2 = $4;
   $5 = $2 << 25;
   $0 = HEAP32[$3 + 52 >> 2];
   $4 = $0 << 25 | $2 >>> 7;
   $1 = $4;
   $4 = HEAP32[$3 + 48 >> 2];
   $2 = HEAP32[$3 + 52 >> 2];
   $6 = $2 >>> 7 | 0;
   $2 = $5;
   $11 = $6 | $2;
   $4 = 0;
   $0 = $4;
   $4 = $1;
   $0 = $0 | $4;
   $7 = $0;
   $0 = HEAP32[$3 + 48 >> 2];
   $0 = $0 << 4;
   $1 = $0;
   $0 = HEAP32[$3 + 48 >> 2];
   $2 = $0;
   $4 = HEAP32[$3 + 52 >> 2];
   $0 = $4 >>> 28 | 0;
   $6 = ($4 & 268435455) << 4 | $2 >>> 28;
   $2 = $0;
   $4 = 0;
   $10 = $4 | $6;
   $0 = $1;
   $2 = $0 | $2;
   $5 = $2;
   $2 = HEAP32[$3 + 48 >> 2];
   $0 = $2;
   $9 = $0 << 30;
   $4 = HEAP32[$3 + 52 >> 2];
   $2 = $4 << 30 | $0 >>> 2;
   $1 = $2;
   $2 = HEAP32[$3 + 48 >> 2];
   $0 = HEAP32[$3 + 52 >> 2];
   $6 = $0 >>> 2 | 0;
   $2 = 0;
   $4 = $2;
   $2 = $1;
   $4 = $4 | $2;
   $0 = $9;
   $6 = $0 | $6;
   $2 = $10;
   $6 = $6 ^ $2;
   $0 = $4;
   $4 = $5;
   $0 = $0 ^ $4;
   $2 = $0;
   $0 = $7;
   $2 = $0 ^ $2;
   $0 = $12;
   $4 = $11;
   $6 = $4 ^ $6;
   $1 = $0 + $6 | 0;
   $4 = $2;
   $2 = $8;
   $5 = $4 + $2 | 0;
   HEAP32[$3 + 704 >> 2] = $1;
   $5 = $1 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
   HEAP32[$3 + 708 >> 2] = $5;
   $0 = HEAP32[$3 + 716 >> 2];
   $1 = $0;
   $0 = HEAP32[$3 + 24 >> 2];
   $6 = $0;
   $5 = HEAP32[$3 + 712 >> 2];
   $2 = $5;
   $4 = $0 + $2 | 0;
   $5 = HEAP32[$3 + 28 >> 2];
   $0 = $5;
   $5 = $1;
   $1 = $0 + $5 | 0;
   HEAP32[$3 + 24 >> 2] = $4;
   $1 = $4 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
   HEAP32[$3 + 28 >> 2] = $1;
   $1 = HEAP32[$3 + 712 >> 2];
   $5 = $1;
   $2 = HEAP32[$3 + 716 >> 2];
   $7 = $2;
   $1 = HEAP32[$3 + 708 >> 2];
   $4 = $1;
   $2 = HEAP32[$3 + 704 >> 2];
   $6 = $2;
   $0 = $2 + $5 | 0;
   $1 = $7;
   $2 = $4;
   $4 = $1 + $2 | 0;
   HEAP32[$3 + 56 >> 2] = $0;
   $4 = $0 >>> 0 < $6 >>> 0 ? $4 + 1 | 0 : $4;
   HEAP32[$3 + 60 >> 2] = $4;
   HEAP32[$3 + 724 >> 2] = HEAP32[$3 + 724 >> 2] + 1;
   if (HEAP32[$3 + 724 >> 2] < 80) {
    continue
   }
   break;
  };
  $8 = HEAP32[$3 + 732 >> 2];
  $4 = HEAP32[$3 + 56 >> 2];
  $2 = $4;
  $5 = HEAP32[$3 + 60 >> 2];
  $7 = $5;
  $1 = $8;
  $5 = HEAP32[$1 + 16 >> 2];
  $4 = HEAP32[$1 + 20 >> 2];
  $0 = $4;
  $1 = $2;
  $6 = $5;
  $2 = $1 + $5 | 0;
  $4 = $7;
  $5 = $0;
  $0 = $4 + $5 | 0;
  $1 = $8;
  HEAP32[$1 + 16 >> 2] = $2;
  $0 = $2 >>> 0 < $6 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$1 + 20 >> 2] = $0;
  $7 = HEAP32[$3 + 732 >> 2];
  $0 = HEAP32[$3 + 48 >> 2];
  $5 = $0;
  $1 = HEAP32[$3 + 52 >> 2];
  $2 = $1;
  $4 = $7;
  $1 = HEAP32[$4 + 24 >> 2];
  $0 = HEAP32[$4 + 28 >> 2];
  $4 = $5;
  $6 = $1;
  $5 = $4 + $1 | 0;
  $1 = $0;
  $0 = $2;
  $2 = $1 + $0 | 0;
  $4 = $7;
  HEAP32[$4 + 24 >> 2] = $5;
  $2 = $5 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
  HEAP32[$4 + 28 >> 2] = $2;
  $8 = HEAP32[$3 + 732 >> 2];
  $2 = HEAP32[$3 + 40 >> 2];
  $7 = $2;
  $4 = HEAP32[$3 + 44 >> 2];
  $1 = $4;
  $0 = $8;
  $4 = HEAP32[$0 + 32 >> 2];
  $6 = $4;
  $2 = HEAP32[$0 + 36 >> 2];
  $4 = $2;
  $2 = $1;
  $5 = $4 + $2 | 0;
  $0 = $7;
  $1 = $0 + $6 | 0;
  $5 = $1 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
  $0 = $8;
  HEAP32[$0 + 32 >> 2] = $1;
  HEAP32[$0 + 36 >> 2] = $5;
  $7 = HEAP32[$3 + 732 >> 2];
  $5 = HEAP32[$3 + 32 >> 2];
  $4 = $5;
  $0 = HEAP32[$3 + 36 >> 2];
  $1 = $0;
  $2 = $7;
  $0 = HEAP32[$2 + 40 >> 2];
  $6 = $0;
  $5 = HEAP32[$2 + 44 >> 2];
  $0 = $5;
  $5 = $1;
  $1 = $0 + $5 | 0;
  $2 = $4;
  $4 = $6 + $2 | 0;
  $1 = $4 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
  $2 = $7;
  HEAP32[$2 + 40 >> 2] = $4;
  HEAP32[$2 + 44 >> 2] = $1;
  $8 = HEAP32[$3 + 732 >> 2];
  $1 = HEAP32[$3 + 24 >> 2];
  $7 = $1;
  $2 = HEAP32[$3 + 28 >> 2];
  $0 = $2;
  $5 = $8;
  $2 = HEAP32[$5 + 48 >> 2];
  $6 = $2;
  $1 = HEAP32[$5 + 52 >> 2];
  $2 = $1;
  $1 = $0;
  $4 = $1 + $2 | 0;
  $5 = $7;
  $0 = $6 + $5 | 0;
  $4 = $0 >>> 0 < $6 >>> 0 ? $4 + 1 | 0 : $4;
  $5 = $8;
  HEAP32[$5 + 48 >> 2] = $0;
  HEAP32[$5 + 52 >> 2] = $4;
  $8 = HEAP32[$3 + 732 >> 2];
  $4 = HEAP32[$3 + 16 >> 2];
  $2 = $4;
  $5 = HEAP32[$3 + 20 >> 2];
  $7 = $5;
  $1 = $8;
  $5 = HEAP32[$1 + 56 >> 2];
  $4 = HEAP32[$1 + 60 >> 2];
  $0 = $4;
  $1 = $2;
  $6 = $5;
  $2 = $1 + $5 | 0;
  $4 = $7;
  $5 = $0;
  $0 = $4 + $5 | 0;
  $1 = $8;
  HEAP32[$1 + 56 >> 2] = $2;
  $0 = $2 >>> 0 < $6 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$1 + 60 >> 2] = $0;
  $7 = HEAP32[$3 + 732 >> 2];
  $0 = HEAP32[$3 + 8 >> 2];
  $5 = $0;
  $1 = HEAP32[$3 + 12 >> 2];
  $2 = $1;
  $4 = $7;
  $1 = HEAP32[$4 + 64 >> 2];
  $0 = HEAP32[$4 + 68 >> 2];
  $4 = $5;
  $6 = $1;
  $5 = $4 + $1 | 0;
  $1 = $0;
  $0 = $2;
  $2 = $1 + $0 | 0;
  $4 = $7;
  HEAP32[$4 + 64 >> 2] = $5;
  $2 = $5 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
  HEAP32[$4 + 68 >> 2] = $2;
  $8 = HEAP32[$3 + 732 >> 2];
  $2 = HEAP32[$3 >> 2];
  $7 = $2;
  $4 = HEAP32[$3 + 4 >> 2];
  $1 = $4;
  $0 = $8;
  $4 = HEAP32[$0 + 72 >> 2];
  $6 = $4;
  $2 = HEAP32[$0 + 76 >> 2];
  $4 = $2;
  $2 = $1;
  $5 = $4 + $2 | 0;
  $0 = $7;
  $1 = $0 + $6 | 0;
  $5 = $1 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
  $0 = $8;
  HEAP32[$0 + 72 >> 2] = $1;
  HEAP32[$0 + 76 >> 2] = $5;
  __stack_pointer = $3 + 736 | 0;
 }
 
 function mbedtls_sha512_update($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  block : {
   if (!HEAP32[$3 + 20 >> 2]) {
    break block
   }
   $2 = HEAP32[$3 + 28 >> 2];
   $0 = HEAP32[$2 >> 2];
   $2 = $0;
   HEAP32[$3 + 12 >> 2] = $2 & 127;
   HEAP32[$3 + 16 >> 2] = 128 - HEAP32[$3 + 12 >> 2];
   $4 = HEAP32[$3 + 28 >> 2];
   $0 = HEAP32[$3 + 20 >> 2];
   $1 = $0;
   $0 = $4;
   $2 = HEAP32[$0 >> 2];
   $0 = HEAP32[$0 + 4 >> 2];
   $6 = $0;
   $0 = $1;
   $1 = $2;
   $5 = $0 + $2 | 0;
   $2 = $6;
   $0 = $4;
   HEAP32[$0 >> 2] = $5;
   $2 = $1 >>> 0 > $5 >>> 0 ? $2 + 1 | 0 : $2;
   HEAP32[$0 + 4 >> 2] = $2;
   $0 = HEAP32[$3 + 28 >> 2];
   $2 = HEAP32[$0 >> 2];
   $1 = $2;
   $0 = HEAP32[$0 + 4 >> 2];
   $2 = $0;
   $0 = HEAP32[$3 + 20 >> 2];
   $4 = $0;
   $0 = $1;
   $1 = $4;
   if (!$2 & $0 >>> 0 < $1 >>> 0) {
    $4 = HEAP32[$3 + 28 >> 2];
    $1 = $4;
    $0 = HEAP32[$1 + 8 >> 2];
    $2 = HEAP32[$1 + 12 >> 2];
    $1 = $0;
    $5 = $2;
    $2 = $1 + 1 | 0;
    $5 = $2 ? $5 : $5 + 1 | 0;
    $1 = $4;
    HEAP32[$1 + 8 >> 2] = $2;
    HEAP32[$1 + 12 >> 2] = $5;
   }
   if (!(!HEAP32[$3 + 12 >> 2] | HEAPU32[$3 + 20 >> 2] < HEAPU32[$3 + 16 >> 2])) {
    $1 = HEAP32[$3 + 28 >> 2];
    $2 = HEAP32[$3 + 12 >> 2];
    $4 = HEAP32[$3 + 24 >> 2];
    $0 = HEAP32[$3 + 16 >> 2];
    if ($0) {
     wasm2js_memory_copy(($1 + 80 | 0) + $2 | 0, $4, $0)
    }
    mbedtls_sha512_process(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 28 >> 2] + 80 | 0);
    HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 16 >> 2] + HEAP32[$3 + 24 >> 2];
    HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] - HEAP32[$3 + 16 >> 2];
    HEAP32[$3 + 12 >> 2] = 0;
   }
   while (1) {
    if (HEAPU32[$3 + 20 >> 2] >= 128) {
     mbedtls_sha512_process(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2]);
     HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] + 128;
     HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] - 128;
     continue;
    }
    break;
   };
   if (!HEAP32[$3 + 20 >> 2]) {
    break block
   }
   $1 = HEAP32[$3 + 28 >> 2];
   $2 = HEAP32[$3 + 12 >> 2];
   $4 = HEAP32[$3 + 24 >> 2];
   $0 = HEAP32[$3 + 20 >> 2];
   if ($0) {
    wasm2js_memory_copy(($1 + 80 | 0) + $2 | 0, $4, $0)
   }
  }
  __stack_pointer = $3 + 32 | 0;
 }
 
 function mbedtls_sha512_finish($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 44 >> 2] = $0;
  HEAP32[$3 + 40 >> 2] = $1;
  $1 = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$1 + 8 >> 2];
  $2 = HEAP32[$1 + 12 >> 2];
  $4 = $0 << 3;
  $0 = $2 << 3 | $0 >>> 29;
  $5 = $0;
  $2 = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$2 >> 2];
  $1 = HEAP32[$2 + 4 >> 2];
  $0 = $1 >>> 29 | 0;
  $1 = $4;
  $0 = $0 | $1;
  HEAP32[$3 + 24 >> 2] = $0;
  $0 = $5;
  $2 = $6;
  $2 = $0 | $2;
  HEAP32[$3 + 28 >> 2] = $2;
  $0 = HEAP32[$3 + 44 >> 2];
  $2 = HEAP32[$0 >> 2];
  $1 = HEAP32[$0 + 4 >> 2];
  $0 = $2;
  $2 = $1 << 3 | $2 >>> 29;
  $0 = $0 << 3;
  HEAP32[$3 + 16 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $2;
  $2 = HEAP32[$3 + 24 >> 2];
  $0 = HEAP32[$3 + 28 >> 2];
  HEAP8[$3 | 0] = $0 >>> 24;
  $2 = HEAP32[$3 + 24 >> 2];
  $1 = HEAP32[$3 + 28 >> 2];
  HEAP8[$3 + 1 | 0] = $1 >>> 16;
  $2 = HEAP32[$3 + 24 >> 2];
  $0 = HEAP32[$3 + 28 >> 2];
  HEAP8[$3 + 2 | 0] = $0 >>> 8;
  $2 = HEAP32[$3 + 24 >> 2];
  $1 = HEAP32[$3 + 28 >> 2];
  HEAP8[$3 + 3 | 0] = $1;
  $2 = HEAP32[$3 + 24 >> 2];
  $1 = $2;
  $0 = HEAP32[$3 + 28 >> 2];
  HEAP8[$3 + 4 | 0] = ($0 & 16777215) << 8 | $1 >>> 24;
  $2 = HEAP32[$3 + 24 >> 2];
  $0 = $2;
  $1 = HEAP32[$3 + 28 >> 2];
  HEAP8[$3 + 5 | 0] = ($1 & 65535) << 16 | $0 >>> 16;
  $2 = HEAP32[$3 + 24 >> 2];
  $1 = $2;
  $0 = HEAP32[$3 + 28 >> 2];
  HEAP8[$3 + 6 | 0] = ($0 & 255) << 24 | $1 >>> 8;
  $2 = HEAP32[$3 + 24 >> 2];
  HEAP8[$3 + 7 | 0] = $2;
  $1 = HEAP32[$3 + 16 >> 2];
  $2 = HEAP32[$3 + 20 >> 2];
  HEAP8[$3 + 8 | 0] = $2 >>> 24;
  $1 = HEAP32[$3 + 16 >> 2];
  $0 = HEAP32[$3 + 20 >> 2];
  HEAP8[$3 + 9 | 0] = $0 >>> 16;
  $1 = HEAP32[$3 + 16 >> 2];
  $2 = HEAP32[$3 + 20 >> 2];
  HEAP8[$3 + 10 | 0] = $2 >>> 8;
  $1 = HEAP32[$3 + 16 >> 2];
  $0 = HEAP32[$3 + 20 >> 2];
  HEAP8[$3 + 11 | 0] = $0;
  $1 = HEAP32[$3 + 16 >> 2];
  $0 = $1;
  $2 = HEAP32[$3 + 20 >> 2];
  HEAP8[$3 + 12 | 0] = ($2 & 16777215) << 8 | $0 >>> 24;
  $1 = HEAP32[$3 + 16 >> 2];
  $2 = $1;
  $0 = HEAP32[$3 + 20 >> 2];
  HEAP8[$3 + 13 | 0] = ($0 & 65535) << 16 | $2 >>> 16;
  $1 = HEAP32[$3 + 16 >> 2];
  $0 = $1;
  $2 = HEAP32[$3 + 20 >> 2];
  HEAP8[$3 + 14 | 0] = ($2 & 255) << 24 | $0 >>> 8;
  $1 = HEAP32[$3 + 16 >> 2];
  HEAP8[$3 + 15 | 0] = $1;
  $2 = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$2 >> 2];
  $2 = $0;
  HEAP32[$3 + 36 >> 2] = $2 & 127;
  if (HEAPU32[$3 + 36 >> 2] < 112) {
   $0 = 112 - HEAP32[$3 + 36 >> 2] | 0
  } else {
   $0 = 240 - HEAP32[$3 + 36 >> 2] | 0
  }
  HEAP32[$3 + 32 >> 2] = $0;
  mbedtls_sha512_update(HEAP32[$3 + 44 >> 2], 172880, HEAP32[$3 + 32 >> 2]);
  mbedtls_sha512_update(HEAP32[$3 + 44 >> 2], $3, 16);
  $1 = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$1 + 16 >> 2];
  $2 = HEAP32[$1 + 20 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2]] = $2 >>> 24;
  $2 = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$2 + 16 >> 2];
  $1 = HEAP32[$2 + 20 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 1 | 0] = $1 >>> 16;
  $1 = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$1 + 16 >> 2];
  $2 = HEAP32[$1 + 20 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 2 | 0] = $2 >>> 8;
  $2 = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$2 + 16 >> 2];
  $1 = HEAP32[$2 + 20 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 3 | 0] = $1;
  $1 = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$1 + 16 >> 2];
  $2 = HEAP32[$1 + 20 >> 2];
  $1 = $0;
  HEAP8[HEAP32[$3 + 40 >> 2] + 4 | 0] = ($2 & 16777215) << 8 | $1 >>> 24;
  $2 = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$2 + 16 >> 2];
  $1 = HEAP32[$2 + 20 >> 2];
  $2 = $0;
  HEAP8[HEAP32[$3 + 40 >> 2] + 5 | 0] = ($1 & 65535) << 16 | $2 >>> 16;
  $1 = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$1 + 16 >> 2];
  $2 = HEAP32[$1 + 20 >> 2];
  $1 = $0;
  HEAP8[HEAP32[$3 + 40 >> 2] + 6 | 0] = ($2 & 255) << 24 | $1 >>> 8;
  $2 = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$2 + 16 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 7 | 0] = $0;
  $2 = HEAP32[$3 + 44 >> 2];
  $1 = HEAP32[$2 + 24 >> 2];
  $0 = HEAP32[$2 + 28 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 8 | 0] = $0 >>> 24;
  $0 = HEAP32[$3 + 44 >> 2];
  $1 = HEAP32[$0 + 24 >> 2];
  $2 = HEAP32[$0 + 28 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 9 | 0] = $2 >>> 16;
  $2 = HEAP32[$3 + 44 >> 2];
  $1 = HEAP32[$2 + 24 >> 2];
  $0 = HEAP32[$2 + 28 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 10 | 0] = $0 >>> 8;
  $0 = HEAP32[$3 + 44 >> 2];
  $1 = HEAP32[$0 + 24 >> 2];
  $2 = HEAP32[$0 + 28 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 11 | 0] = $2;
  $2 = HEAP32[$3 + 44 >> 2];
  $1 = HEAP32[$2 + 24 >> 2];
  $0 = HEAP32[$2 + 28 >> 2];
  $2 = $1;
  HEAP8[HEAP32[$3 + 40 >> 2] + 12 | 0] = ($0 & 16777215) << 8 | $2 >>> 24;
  $0 = HEAP32[$3 + 44 >> 2];
  $1 = HEAP32[$0 + 24 >> 2];
  $2 = HEAP32[$0 + 28 >> 2];
  $0 = $1;
  HEAP8[HEAP32[$3 + 40 >> 2] + 13 | 0] = ($2 & 65535) << 16 | $0 >>> 16;
  $2 = HEAP32[$3 + 44 >> 2];
  $1 = HEAP32[$2 + 24 >> 2];
  $0 = HEAP32[$2 + 28 >> 2];
  $2 = $1;
  HEAP8[HEAP32[$3 + 40 >> 2] + 14 | 0] = ($0 & 255) << 24 | $2 >>> 8;
  $0 = HEAP32[$3 + 44 >> 2];
  $1 = HEAP32[$0 + 24 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 15 | 0] = $1;
  $0 = HEAP32[$3 + 44 >> 2];
  $2 = HEAP32[$0 + 32 >> 2];
  $1 = HEAP32[$0 + 36 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 16 | 0] = $1 >>> 24;
  $1 = HEAP32[$3 + 44 >> 2];
  $2 = HEAP32[$1 + 32 >> 2];
  $0 = HEAP32[$1 + 36 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 17 | 0] = $0 >>> 16;
  $0 = HEAP32[$3 + 44 >> 2];
  $2 = HEAP32[$0 + 32 >> 2];
  $1 = HEAP32[$0 + 36 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 18 | 0] = $1 >>> 8;
  $1 = HEAP32[$3 + 44 >> 2];
  $2 = HEAP32[$1 + 32 >> 2];
  $0 = HEAP32[$1 + 36 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 19 | 0] = $0;
  $0 = HEAP32[$3 + 44 >> 2];
  $2 = HEAP32[$0 + 32 >> 2];
  $1 = HEAP32[$0 + 36 >> 2];
  $0 = $2;
  HEAP8[HEAP32[$3 + 40 >> 2] + 20 | 0] = ($1 & 16777215) << 8 | $0 >>> 24;
  $1 = HEAP32[$3 + 44 >> 2];
  $2 = HEAP32[$1 + 32 >> 2];
  $0 = HEAP32[$1 + 36 >> 2];
  $1 = $2;
  HEAP8[HEAP32[$3 + 40 >> 2] + 21 | 0] = ($0 & 65535) << 16 | $1 >>> 16;
  $0 = HEAP32[$3 + 44 >> 2];
  $2 = HEAP32[$0 + 32 >> 2];
  $1 = HEAP32[$0 + 36 >> 2];
  $0 = $2;
  HEAP8[HEAP32[$3 + 40 >> 2] + 22 | 0] = ($1 & 255) << 24 | $0 >>> 8;
  $1 = HEAP32[$3 + 44 >> 2];
  $2 = HEAP32[$1 + 32 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 23 | 0] = $2;
  $1 = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$1 + 40 >> 2];
  $2 = HEAP32[$1 + 44 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 24 | 0] = $2 >>> 24;
  $2 = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$2 + 40 >> 2];
  $1 = HEAP32[$2 + 44 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 25 | 0] = $1 >>> 16;
  $1 = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$1 + 40 >> 2];
  $2 = HEAP32[$1 + 44 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 26 | 0] = $2 >>> 8;
  $2 = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$2 + 40 >> 2];
  $1 = HEAP32[$2 + 44 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 27 | 0] = $1;
  $1 = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$1 + 40 >> 2];
  $2 = HEAP32[$1 + 44 >> 2];
  $1 = $0;
  HEAP8[HEAP32[$3 + 40 >> 2] + 28 | 0] = ($2 & 16777215) << 8 | $1 >>> 24;
  $2 = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$2 + 40 >> 2];
  $1 = HEAP32[$2 + 44 >> 2];
  $2 = $0;
  HEAP8[HEAP32[$3 + 40 >> 2] + 29 | 0] = ($1 & 65535) << 16 | $2 >>> 16;
  $1 = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$1 + 40 >> 2];
  $2 = HEAP32[$1 + 44 >> 2];
  $1 = $0;
  HEAP8[HEAP32[$3 + 40 >> 2] + 30 | 0] = ($2 & 255) << 24 | $1 >>> 8;
  $2 = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$2 + 40 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 31 | 0] = $0;
  $2 = HEAP32[$3 + 44 >> 2];
  $1 = HEAP32[$2 + 48 >> 2];
  $0 = HEAP32[$2 + 52 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 32 | 0] = $0 >>> 24;
  $0 = HEAP32[$3 + 44 >> 2];
  $1 = HEAP32[$0 + 48 >> 2];
  $2 = HEAP32[$0 + 52 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 33 | 0] = $2 >>> 16;
  $2 = HEAP32[$3 + 44 >> 2];
  $1 = HEAP32[$2 + 48 >> 2];
  $0 = HEAP32[$2 + 52 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 34 | 0] = $0 >>> 8;
  $0 = HEAP32[$3 + 44 >> 2];
  $1 = HEAP32[$0 + 48 >> 2];
  $2 = HEAP32[$0 + 52 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 35 | 0] = $2;
  $2 = HEAP32[$3 + 44 >> 2];
  $1 = HEAP32[$2 + 48 >> 2];
  $0 = HEAP32[$2 + 52 >> 2];
  $2 = $1;
  HEAP8[HEAP32[$3 + 40 >> 2] + 36 | 0] = ($0 & 16777215) << 8 | $2 >>> 24;
  $0 = HEAP32[$3 + 44 >> 2];
  $1 = HEAP32[$0 + 48 >> 2];
  $2 = HEAP32[$0 + 52 >> 2];
  $0 = $1;
  HEAP8[HEAP32[$3 + 40 >> 2] + 37 | 0] = ($2 & 65535) << 16 | $0 >>> 16;
  $2 = HEAP32[$3 + 44 >> 2];
  $1 = HEAP32[$2 + 48 >> 2];
  $0 = HEAP32[$2 + 52 >> 2];
  $2 = $1;
  HEAP8[HEAP32[$3 + 40 >> 2] + 38 | 0] = ($0 & 255) << 24 | $2 >>> 8;
  $0 = HEAP32[$3 + 44 >> 2];
  $1 = HEAP32[$0 + 48 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 39 | 0] = $1;
  $0 = HEAP32[$3 + 44 >> 2];
  $2 = HEAP32[$0 + 56 >> 2];
  $1 = HEAP32[$0 + 60 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 40 | 0] = $1 >>> 24;
  $1 = HEAP32[$3 + 44 >> 2];
  $2 = HEAP32[$1 + 56 >> 2];
  $0 = HEAP32[$1 + 60 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 41 | 0] = $0 >>> 16;
  $0 = HEAP32[$3 + 44 >> 2];
  $2 = HEAP32[$0 + 56 >> 2];
  $1 = HEAP32[$0 + 60 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 42 | 0] = $1 >>> 8;
  $1 = HEAP32[$3 + 44 >> 2];
  $2 = HEAP32[$1 + 56 >> 2];
  $0 = HEAP32[$1 + 60 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 43 | 0] = $0;
  $0 = HEAP32[$3 + 44 >> 2];
  $2 = HEAP32[$0 + 56 >> 2];
  $1 = HEAP32[$0 + 60 >> 2];
  $0 = $2;
  HEAP8[HEAP32[$3 + 40 >> 2] + 44 | 0] = ($1 & 16777215) << 8 | $0 >>> 24;
  $1 = HEAP32[$3 + 44 >> 2];
  $2 = HEAP32[$1 + 56 >> 2];
  $0 = HEAP32[$1 + 60 >> 2];
  $1 = $2;
  HEAP8[HEAP32[$3 + 40 >> 2] + 45 | 0] = ($0 & 65535) << 16 | $1 >>> 16;
  $0 = HEAP32[$3 + 44 >> 2];
  $2 = HEAP32[$0 + 56 >> 2];
  $1 = HEAP32[$0 + 60 >> 2];
  $0 = $2;
  HEAP8[HEAP32[$3 + 40 >> 2] + 46 | 0] = ($1 & 255) << 24 | $0 >>> 8;
  $1 = HEAP32[$3 + 44 >> 2];
  $2 = HEAP32[$1 + 56 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 47 | 0] = $2;
  if (!HEAP32[HEAP32[$3 + 44 >> 2] + 208 >> 2]) {
   $1 = HEAP32[$3 + 44 >> 2];
   $0 = HEAP32[$1 + 64 >> 2];
   $2 = HEAP32[$1 + 68 >> 2];
   HEAP8[HEAP32[$3 + 40 >> 2] + 48 | 0] = $2 >>> 24;
   $2 = HEAP32[$3 + 44 >> 2];
   $0 = HEAP32[$2 + 64 >> 2];
   $1 = HEAP32[$2 + 68 >> 2];
   HEAP8[HEAP32[$3 + 40 >> 2] + 49 | 0] = $1 >>> 16;
   $1 = HEAP32[$3 + 44 >> 2];
   $0 = HEAP32[$1 + 64 >> 2];
   $2 = HEAP32[$1 + 68 >> 2];
   HEAP8[HEAP32[$3 + 40 >> 2] + 50 | 0] = $2 >>> 8;
   $2 = HEAP32[$3 + 44 >> 2];
   $0 = HEAP32[$2 + 64 >> 2];
   $1 = HEAP32[$2 + 68 >> 2];
   HEAP8[HEAP32[$3 + 40 >> 2] + 51 | 0] = $1;
   $1 = HEAP32[$3 + 44 >> 2];
   $0 = HEAP32[$1 + 64 >> 2];
   $2 = HEAP32[$1 + 68 >> 2];
   $1 = $0;
   HEAP8[HEAP32[$3 + 40 >> 2] + 52 | 0] = ($2 & 16777215) << 8 | $1 >>> 24;
   $2 = HEAP32[$3 + 44 >> 2];
   $0 = HEAP32[$2 + 64 >> 2];
   $1 = HEAP32[$2 + 68 >> 2];
   $2 = $0;
   HEAP8[HEAP32[$3 + 40 >> 2] + 53 | 0] = ($1 & 65535) << 16 | $2 >>> 16;
   $1 = HEAP32[$3 + 44 >> 2];
   $0 = HEAP32[$1 + 64 >> 2];
   $2 = HEAP32[$1 + 68 >> 2];
   $1 = $0;
   HEAP8[HEAP32[$3 + 40 >> 2] + 54 | 0] = ($2 & 255) << 24 | $1 >>> 8;
   $2 = HEAP32[$3 + 44 >> 2];
   $0 = HEAP32[$2 + 64 >> 2];
   HEAP8[HEAP32[$3 + 40 >> 2] + 55 | 0] = $0;
   $2 = HEAP32[$3 + 44 >> 2];
   $1 = HEAP32[$2 + 72 >> 2];
   $0 = HEAP32[$2 + 76 >> 2];
   HEAP8[HEAP32[$3 + 40 >> 2] + 56 | 0] = $0 >>> 24;
   $0 = HEAP32[$3 + 44 >> 2];
   $1 = HEAP32[$0 + 72 >> 2];
   $2 = HEAP32[$0 + 76 >> 2];
   HEAP8[HEAP32[$3 + 40 >> 2] + 57 | 0] = $2 >>> 16;
   $2 = HEAP32[$3 + 44 >> 2];
   $1 = HEAP32[$2 + 72 >> 2];
   $0 = HEAP32[$2 + 76 >> 2];
   HEAP8[HEAP32[$3 + 40 >> 2] + 58 | 0] = $0 >>> 8;
   $0 = HEAP32[$3 + 44 >> 2];
   $1 = HEAP32[$0 + 72 >> 2];
   $2 = HEAP32[$0 + 76 >> 2];
   HEAP8[HEAP32[$3 + 40 >> 2] + 59 | 0] = $2;
   $2 = HEAP32[$3 + 44 >> 2];
   $1 = HEAP32[$2 + 72 >> 2];
   $0 = HEAP32[$2 + 76 >> 2];
   $2 = $1;
   HEAP8[HEAP32[$3 + 40 >> 2] + 60 | 0] = ($0 & 16777215) << 8 | $2 >>> 24;
   $0 = HEAP32[$3 + 44 >> 2];
   $1 = HEAP32[$0 + 72 >> 2];
   $2 = HEAP32[$0 + 76 >> 2];
   $0 = $1;
   HEAP8[HEAP32[$3 + 40 >> 2] + 61 | 0] = ($2 & 65535) << 16 | $0 >>> 16;
   $2 = HEAP32[$3 + 44 >> 2];
   $1 = HEAP32[$2 + 72 >> 2];
   $0 = HEAP32[$2 + 76 >> 2];
   $2 = $1;
   HEAP8[HEAP32[$3 + 40 >> 2] + 62 | 0] = ($0 & 255) << 24 | $2 >>> 8;
   $0 = HEAP32[$3 + 44 >> 2];
   $1 = HEAP32[$0 + 72 >> 2];
   HEAP8[HEAP32[$3 + 40 >> 2] + 63 | 0] = $1;
  }
  __stack_pointer = $3 + 48 | 0;
 }
 
 function mbedtls_sha512($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 240 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 236 >> 2] = $0;
  HEAP32[$4 + 232 >> 2] = $1;
  HEAP32[$4 + 228 >> 2] = $2;
  HEAP32[$4 + 224 >> 2] = $3;
  mbedtls_sha512_init($4 + 8 | 0);
  mbedtls_sha512_starts($4 + 8 | 0, HEAP32[$4 + 224 >> 2]);
  mbedtls_sha512_update($4 + 8 | 0, HEAP32[$4 + 236 >> 2], HEAP32[$4 + 232 >> 2]);
  mbedtls_sha512_finish($4 + 8 | 0, HEAP32[$4 + 228 >> 2]);
  mbedtls_sha512_free($4 + 8 | 0);
  __stack_pointer = $4 + 240 | 0;
 }
 
 function mbedtls_ccm_init($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 48 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP32[$0 + 44 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
 }
 
 function mbedtls_ccm_setkey($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 24 >> 2] = $0;
  HEAP32[$4 + 20 >> 2] = $1;
  HEAP32[$4 + 16 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[$4 + 4 >> 2] = mbedtls_cipher_info_from_values(HEAP32[$4 + 20 >> 2], HEAP32[$4 + 12 >> 2], 1);
  block : {
   if (!HEAP32[$4 + 4 >> 2]) {
    HEAP32[$4 + 28 >> 2] = -13;
    break block;
   }
   if (HEAP32[HEAP32[$4 + 4 >> 2] + 24 >> 2] != 16) {
    HEAP32[$4 + 28 >> 2] = -13;
    break block;
   }
   mbedtls_cipher_free(HEAP32[$4 + 24 >> 2]);
   $0 = mbedtls_cipher_setup(HEAP32[$4 + 24 >> 2], HEAP32[$4 + 4 >> 2]);
   HEAP32[$4 + 8 >> 2] = $0;
   if ($0) {
    HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 8 >> 2];
    break block;
   }
   $0 = mbedtls_cipher_setkey(HEAP32[$4 + 24 >> 2], HEAP32[$4 + 16 >> 2], HEAP32[$4 + 12 >> 2], 1);
   HEAP32[$4 + 8 >> 2] = $0;
   if ($0) {
    HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 8 >> 2];
    break block;
   }
   HEAP32[$4 + 28 >> 2] = 0;
  }
  __stack_pointer = $4 + 32 | 0;
  return HEAP32[$4 + 28 >> 2];
 }
 
 function mbedtls_ccm_free($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  mbedtls_cipher_free(HEAP32[$1 + 12 >> 2]);
  mbedtls_zeroize_1148(HEAP32[$1 + 12 >> 2], 56);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function mbedtls_zeroize_1148($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
  while (1) {
   $0 = HEAP32[$2 + 8 >> 2];
   HEAP32[$2 + 8 >> 2] = $0 - 1;
   if ($0) {
    $0 = HEAP32[$2 + 4 >> 2];
    HEAP32[$2 + 4 >> 2] = $0 + 1;
    HEAP8[$0 | 0] = 0;
    continue;
   }
   break;
  };
 }
 
 function mbedtls_ccm_encrypt_and_tag($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  var $10 = 0;
  $10 = __stack_pointer - 48 | 0;
  __stack_pointer = $10;
  HEAP32[$10 + 44 >> 2] = $0;
  HEAP32[$10 + 40 >> 2] = $1;
  HEAP32[$10 + 36 >> 2] = $2;
  HEAP32[$10 + 32 >> 2] = $3;
  HEAP32[$10 + 28 >> 2] = $4;
  HEAP32[$10 + 24 >> 2] = $5;
  HEAP32[$10 + 20 >> 2] = $6;
  HEAP32[$10 + 16 >> 2] = $7;
  HEAP32[$10 + 12 >> 2] = $8;
  HEAP32[$10 + 8 >> 2] = $9;
  $0 = ccm_auth_crypt(HEAP32[$10 + 44 >> 2], 0, HEAP32[$10 + 40 >> 2], HEAP32[$10 + 36 >> 2], HEAP32[$10 + 32 >> 2], HEAP32[$10 + 28 >> 2], HEAP32[$10 + 24 >> 2], HEAP32[$10 + 20 >> 2], HEAP32[$10 + 16 >> 2], HEAP32[$10 + 12 >> 2], HEAP32[$10 + 8 >> 2]);
  __stack_pointer = $10 + 48 | 0;
  return $0;
 }
 
 function ccm_auth_crypt($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
  var $11 = 0;
  $11 = __stack_pointer - 128 | 0;
  __stack_pointer = $11;
  HEAP32[$11 + 120 >> 2] = $0;
  HEAP32[$11 + 116 >> 2] = $1;
  HEAP32[$11 + 112 >> 2] = $2;
  HEAP32[$11 + 108 >> 2] = $3;
  HEAP32[$11 + 104 >> 2] = $4;
  HEAP32[$11 + 100 >> 2] = $5;
  HEAP32[$11 + 96 >> 2] = $6;
  HEAP32[$11 + 92 >> 2] = $7;
  HEAP32[$11 + 88 >> 2] = $8;
  HEAP32[$11 + 84 >> 2] = $9;
  HEAP32[$11 + 80 >> 2] = $10;
  block2 : {
   if (HEAP32[$11 + 80 >> 2] & 1 | (HEAPU32[$11 + 80 >> 2] < 4 | HEAPU32[$11 + 80 >> 2] > 16)) {
    HEAP32[$11 + 124 >> 2] = -13;
    break block2;
   }
   if (!(HEAPU32[$11 + 104 >> 2] <= 13 & HEAPU32[$11 + 104 >> 2] >= 7)) {
    HEAP32[$11 + 124 >> 2] = -13;
    break block2;
   }
   if (HEAPU32[$11 + 96 >> 2] > 65280) {
    HEAP32[$11 + 124 >> 2] = -13;
    break block2;
   }
   HEAP8[$11 + 74 | 0] = 15 - (HEAP32[$11 + 104 >> 2] & 255);
   HEAP8[$11 + 48 | 0] = 0;
   HEAP8[$11 + 48 | 0] = HEAPU8[$11 + 48 | 0] | (HEAP32[$11 + 96 >> 2] != 0) << 6;
   HEAP8[$11 + 48 | 0] = HEAPU8[$11 + 48 | 0] | HEAP32[$11 + 80 >> 2] - 2 >>> 1 << 3;
   HEAP8[$11 + 48 | 0] = HEAPU8[$11 + 48 | 0] | HEAPU8[$11 + 74 | 0] - 1;
   $1 = HEAP32[$11 + 108 >> 2];
   $0 = HEAP32[$11 + 104 >> 2];
   if ($0) {
    wasm2js_memory_copy($11 + 49 | 0, $1, $0)
   }
   HEAP8[$11 + 75 | 0] = 0;
   HEAP32[$11 + 68 >> 2] = HEAP32[$11 + 112 >> 2];
   while (1) {
    if (HEAPU8[$11 + 75 | 0] < HEAPU8[$11 + 74 | 0]) {
     HEAP8[($11 - HEAPU8[$11 + 75 | 0] | 0) + 63 | 0] = HEAP32[$11 + 68 >> 2];
     HEAP8[$11 + 75 | 0] = HEAPU8[$11 + 75 | 0] + 1;
     HEAP32[$11 + 68 >> 2] = HEAP32[$11 + 68 >> 2] >>> 8;
     continue;
    }
    break;
   };
   if (HEAP32[$11 + 68 >> 2]) {
    HEAP32[$11 + 124 >> 2] = -13;
    break block2;
   }
   $0 = $11 + 32 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   HEAP32[$0 + 12 >> 2] = 0;
   HEAP8[$11 + 75 | 0] = 0;
   while (1) {
    if (HEAPU8[$11 + 75 | 0] < 16) {
     $0 = HEAPU8[$11 + 75 | 0] + ($11 + 32 | 0) | 0;
     HEAP8[$0 | 0] = HEAPU8[HEAPU8[$11 + 75 | 0] + ($11 + 48 | 0) | 0] ^ HEAPU8[$0 | 0];
     HEAP8[$11 + 75 | 0] = HEAPU8[$11 + 75 | 0] + 1;
     continue;
    }
    break;
   };
   $0 = mbedtls_cipher_update(HEAP32[$11 + 120 >> 2], $11 + 32 | 0, 16, $11 + 32 | 0, $11 - -64 | 0);
   HEAP32[$11 + 76 >> 2] = $0;
   if ($0) {
    HEAP32[$11 + 124 >> 2] = HEAP32[$11 + 76 >> 2];
    break block2;
   }
   if (HEAP32[$11 + 96 >> 2]) {
    HEAP32[$11 + 68 >> 2] = HEAP32[$11 + 96 >> 2];
    HEAP32[$11 + 12 >> 2] = HEAP32[$11 + 100 >> 2];
    $0 = $11 + 48 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$0 + 8 >> 2] = 0;
    HEAP32[$0 + 12 >> 2] = 0;
    HEAP8[$11 + 48 | 0] = HEAP32[$11 + 96 >> 2] >>> 8;
    HEAP8[$11 + 49 | 0] = HEAP32[$11 + 96 >> 2];
    if (HEAPU32[$11 + 68 >> 2] < 14) {
     $0 = HEAP32[$11 + 68 >> 2]
    } else {
     $0 = 14
    }
    HEAP32[$11 + 4 >> 2] = $0;
    $1 = HEAP32[$11 + 12 >> 2];
    $0 = HEAP32[$11 + 4 >> 2];
    if ($0) {
     wasm2js_memory_copy($11 + 50 | 0, $1, $0)
    }
    HEAP32[$11 + 68 >> 2] = HEAP32[$11 + 68 >> 2] - HEAP32[$11 + 4 >> 2];
    HEAP32[$11 + 12 >> 2] = HEAP32[$11 + 4 >> 2] + HEAP32[$11 + 12 >> 2];
    HEAP8[$11 + 75 | 0] = 0;
    while (1) {
     if (HEAPU8[$11 + 75 | 0] < 16) {
      $0 = HEAPU8[$11 + 75 | 0] + ($11 + 32 | 0) | 0;
      HEAP8[$0 | 0] = HEAPU8[HEAPU8[$11 + 75 | 0] + ($11 + 48 | 0) | 0] ^ HEAPU8[$0 | 0];
      HEAP8[$11 + 75 | 0] = HEAPU8[$11 + 75 | 0] + 1;
      continue;
     }
     break;
    };
    $0 = mbedtls_cipher_update(HEAP32[$11 + 120 >> 2], $11 + 32 | 0, 16, $11 + 32 | 0, $11 - -64 | 0);
    HEAP32[$11 + 76 >> 2] = $0;
    if ($0) {
     HEAP32[$11 + 124 >> 2] = HEAP32[$11 + 76 >> 2];
     break block2;
    }
    while (1) {
     if (HEAP32[$11 + 68 >> 2]) {
      HEAP32[$11 + 4 >> 2] = HEAPU32[$11 + 68 >> 2] > 16 ? 16 : HEAP32[$11 + 68 >> 2];
      $0 = $11 + 48 | 0;
      HEAP32[$0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      HEAP32[$0 + 8 >> 2] = 0;
      HEAP32[$0 + 12 >> 2] = 0;
      $1 = HEAP32[$11 + 12 >> 2];
      $0 = HEAP32[$11 + 4 >> 2];
      if ($0) {
       wasm2js_memory_copy($11 + 48 | 0, $1, $0)
      }
      HEAP8[$11 + 75 | 0] = 0;
      while (1) {
       if (HEAPU8[$11 + 75 | 0] < 16) {
        $0 = HEAPU8[$11 + 75 | 0] + ($11 + 32 | 0) | 0;
        HEAP8[$0 | 0] = HEAPU8[HEAPU8[$11 + 75 | 0] + ($11 + 48 | 0) | 0] ^ HEAPU8[$0 | 0];
        HEAP8[$11 + 75 | 0] = HEAPU8[$11 + 75 | 0] + 1;
        continue;
       }
       break;
      };
      $0 = mbedtls_cipher_update(HEAP32[$11 + 120 >> 2], $11 + 32 | 0, 16, $11 + 32 | 0, $11 - -64 | 0);
      HEAP32[$11 + 76 >> 2] = $0;
      if ($0) {
       HEAP32[$11 + 124 >> 2] = HEAP32[$11 + 76 >> 2];
       break block2;
      } else {
       HEAP32[$11 + 68 >> 2] = HEAP32[$11 + 68 >> 2] - HEAP32[$11 + 4 >> 2];
       HEAP32[$11 + 12 >> 2] = HEAP32[$11 + 4 >> 2] + HEAP32[$11 + 12 >> 2];
       continue;
      }
     }
     break;
    };
   }
   HEAP8[$11 + 16 | 0] = HEAPU8[$11 + 74 | 0] - 1;
   $1 = HEAP32[$11 + 108 >> 2];
   $0 = HEAP32[$11 + 104 >> 2];
   if ($0) {
    wasm2js_memory_copy($11 + 17 | 0, $1, $0)
   }
   $1 = HEAP32[$11 + 104 >> 2];
   $0 = HEAPU8[$11 + 74 | 0];
   if ($0) {
    wasm2js_memory_fill(($11 + 17 | 0) + $1 | 0, 0, $0)
   }
   HEAP8[$11 + 31 | 0] = 1;
   HEAP32[$11 + 68 >> 2] = HEAP32[$11 + 112 >> 2];
   HEAP32[$11 + 12 >> 2] = HEAP32[$11 + 92 >> 2];
   HEAP32[$11 + 8 >> 2] = HEAP32[$11 + 88 >> 2];
   while (1) {
    if (HEAP32[$11 + 68 >> 2]) {
     HEAP32[$11 >> 2] = HEAPU32[$11 + 68 >> 2] > 16 ? 16 : HEAP32[$11 + 68 >> 2];
     if (!HEAP32[$11 + 116 >> 2]) {
      $0 = $11 + 48 | 0;
      HEAP32[$0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      HEAP32[$0 + 8 >> 2] = 0;
      HEAP32[$0 + 12 >> 2] = 0;
      $1 = HEAP32[$11 + 12 >> 2];
      $0 = HEAP32[$11 >> 2];
      if ($0) {
       wasm2js_memory_copy($11 + 48 | 0, $1, $0)
      }
      HEAP8[$11 + 75 | 0] = 0;
      while (1) {
       if (HEAPU8[$11 + 75 | 0] < 16) {
        $0 = HEAPU8[$11 + 75 | 0] + ($11 + 32 | 0) | 0;
        HEAP8[$0 | 0] = HEAPU8[HEAPU8[$11 + 75 | 0] + ($11 + 48 | 0) | 0] ^ HEAPU8[$0 | 0];
        HEAP8[$11 + 75 | 0] = HEAPU8[$11 + 75 | 0] + 1;
        continue;
       }
       break;
      };
      $0 = mbedtls_cipher_update(HEAP32[$11 + 120 >> 2], $11 + 32 | 0, 16, $11 + 32 | 0, $11 - -64 | 0);
      HEAP32[$11 + 76 >> 2] = $0;
      if ($0) {
       HEAP32[$11 + 124 >> 2] = HEAP32[$11 + 76 >> 2];
       break block2;
      }
     }
     $0 = mbedtls_cipher_update(HEAP32[$11 + 120 >> 2], $11 + 16 | 0, 16, $11 + 48 | 0, $11 - -64 | 0);
     HEAP32[$11 + 76 >> 2] = $0;
     if ($0) {
      HEAP32[$11 + 124 >> 2] = HEAP32[$11 + 76 >> 2];
      break block2;
     }
     HEAP8[$11 + 75 | 0] = 0;
     while (1) {
      if (HEAPU8[$11 + 75 | 0] < HEAPU32[$11 >> 2]) {
       HEAP8[HEAP32[$11 + 8 >> 2] + HEAPU8[$11 + 75 | 0] | 0] = HEAPU8[HEAP32[$11 + 12 >> 2] + HEAPU8[$11 + 75 | 0] | 0] ^ HEAPU8[HEAPU8[$11 + 75 | 0] + ($11 + 48 | 0) | 0];
       HEAP8[$11 + 75 | 0] = HEAPU8[$11 + 75 | 0] + 1;
       continue;
      }
      break;
     };
     if (HEAP32[$11 + 116 >> 2] == 1) {
      $0 = $11 + 48 | 0;
      HEAP32[$0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      HEAP32[$0 + 8 >> 2] = 0;
      HEAP32[$0 + 12 >> 2] = 0;
      $1 = HEAP32[$11 + 8 >> 2];
      $0 = HEAP32[$11 >> 2];
      if ($0) {
       wasm2js_memory_copy($11 + 48 | 0, $1, $0)
      }
      HEAP8[$11 + 75 | 0] = 0;
      while (1) {
       if (HEAPU8[$11 + 75 | 0] < 16) {
        $0 = HEAPU8[$11 + 75 | 0] + ($11 + 32 | 0) | 0;
        HEAP8[$0 | 0] = HEAPU8[HEAPU8[$11 + 75 | 0] + ($11 + 48 | 0) | 0] ^ HEAPU8[$0 | 0];
        HEAP8[$11 + 75 | 0] = HEAPU8[$11 + 75 | 0] + 1;
        continue;
       }
       break;
      };
      $0 = mbedtls_cipher_update(HEAP32[$11 + 120 >> 2], $11 + 32 | 0, 16, $11 + 32 | 0, $11 - -64 | 0);
      HEAP32[$11 + 76 >> 2] = $0;
      if ($0) {
       HEAP32[$11 + 124 >> 2] = HEAP32[$11 + 76 >> 2];
       break block2;
      }
     }
     HEAP32[$11 + 8 >> 2] = HEAP32[$11 >> 2] + HEAP32[$11 + 8 >> 2];
     HEAP32[$11 + 12 >> 2] = HEAP32[$11 >> 2] + HEAP32[$11 + 12 >> 2];
     HEAP32[$11 + 68 >> 2] = HEAP32[$11 + 68 >> 2] - HEAP32[$11 >> 2];
     HEAP8[$11 + 75 | 0] = 0;
     while (1) {
      block5 : {
       if (HEAPU8[$11 + 75 | 0] >= HEAPU8[$11 + 74 | 0]) {
        break block5
       }
       $0 = ($11 - HEAPU8[$11 + 75 | 0] | 0) + 31 | 0;
       $1 = HEAPU8[$0 | 0] + 1 | 0;
       HEAP8[$0 | 0] = $1;
       if ($1 & 255) {
        break block5
       }
       HEAP8[$11 + 75 | 0] = HEAPU8[$11 + 75 | 0] + 1;
       continue;
      }
      break;
     };
     continue;
    }
    break;
   };
   HEAP8[$11 + 75 | 0] = 0;
   while (1) {
    if (HEAPU8[$11 + 75 | 0] < HEAPU8[$11 + 74 | 0]) {
     HEAP8[($11 - HEAPU8[$11 + 75 | 0] | 0) + 31 | 0] = 0;
     HEAP8[$11 + 75 | 0] = HEAPU8[$11 + 75 | 0] + 1;
     continue;
    }
    break;
   };
   $0 = mbedtls_cipher_update(HEAP32[$11 + 120 >> 2], $11 + 16 | 0, 16, $11 + 48 | 0, $11 - -64 | 0);
   HEAP32[$11 + 76 >> 2] = $0;
   if ($0) {
    HEAP32[$11 + 124 >> 2] = HEAP32[$11 + 76 >> 2];
    break block2;
   }
   HEAP8[$11 + 75 | 0] = 0;
   while (1) {
    if (HEAPU8[$11 + 75 | 0] < 16) {
     HEAP8[HEAPU8[$11 + 75 | 0] + ($11 + 32 | 0) | 0] = HEAPU8[HEAPU8[$11 + 75 | 0] + ($11 + 32 | 0) | 0] ^ HEAPU8[HEAPU8[$11 + 75 | 0] + ($11 + 48 | 0) | 0];
     HEAP8[$11 + 75 | 0] = HEAPU8[$11 + 75 | 0] + 1;
     continue;
    }
    break;
   };
   $1 = HEAP32[$11 + 84 >> 2];
   $0 = HEAP32[$11 + 80 >> 2];
   if ($0) {
    wasm2js_memory_copy($1, $11 + 32 | 0, $0)
   }
   HEAP32[$11 + 124 >> 2] = 0;
  }
  __stack_pointer = $11 + 128 | 0;
  return HEAP32[$11 + 124 >> 2];
 }
 
 function mbedtls_ccm_auth_decrypt($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  var $10 = 0;
  $10 = __stack_pointer - 80 | 0;
  __stack_pointer = $10;
  HEAP32[$10 + 72 >> 2] = $0;
  HEAP32[$10 + 68 >> 2] = $1;
  HEAP32[$10 + 64 >> 2] = $2;
  HEAP32[$10 + 60 >> 2] = $3;
  HEAP32[$10 + 56 >> 2] = $4;
  HEAP32[$10 + 52 >> 2] = $5;
  HEAP32[$10 + 48 >> 2] = $6;
  HEAP32[$10 + 44 >> 2] = $7;
  HEAP32[$10 + 40 >> 2] = $8;
  HEAP32[$10 + 36 >> 2] = $9;
  $0 = ccm_auth_crypt(HEAP32[$10 + 72 >> 2], 1, HEAP32[$10 + 68 >> 2], HEAP32[$10 + 64 >> 2], HEAP32[$10 + 60 >> 2], HEAP32[$10 + 56 >> 2], HEAP32[$10 + 52 >> 2], HEAP32[$10 + 48 >> 2], HEAP32[$10 + 44 >> 2], $10 + 16 | 0, HEAP32[$10 + 36 >> 2]);
  HEAP32[$10 + 32 >> 2] = $0;
  block : {
   if ($0) {
    HEAP32[$10 + 76 >> 2] = HEAP32[$10 + 32 >> 2];
    break block;
   }
   HEAP32[$10 + 8 >> 2] = 0;
   HEAP8[$10 + 15 | 0] = 0;
   while (1) {
    if (HEAPU8[$10 + 15 | 0] < HEAPU32[$10 + 36 >> 2]) {
     HEAP32[$10 + 8 >> 2] = HEAP32[$10 + 8 >> 2] | HEAPU8[HEAP32[$10 + 40 >> 2] + HEAPU8[$10 + 15 | 0] | 0] ^ HEAPU8[HEAPU8[$10 + 15 | 0] + ($10 + 16 | 0) | 0];
     HEAP8[$10 + 15 | 0] = HEAPU8[$10 + 15 | 0] + 1;
     continue;
    }
    break;
   };
   if (HEAP32[$10 + 8 >> 2]) {
    mbedtls_zeroize_1148(HEAP32[$10 + 44 >> 2], HEAP32[$10 + 68 >> 2]);
    HEAP32[$10 + 76 >> 2] = -15;
    break block;
   }
   HEAP32[$10 + 76 >> 2] = 0;
  }
  __stack_pointer = $10 + 80 | 0;
  return HEAP32[$10 + 76 >> 2];
 }
 
 function mbedtls_aes_init($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  wasm2js_memory_fill(HEAP32[$1 + 12 >> 2], 0, 280);
 }
 
 function mbedtls_aes_free($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  if (HEAP32[$1 + 12 >> 2]) {
   mbedtls_zeroize_1154(HEAP32[$1 + 12 >> 2], 280)
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function mbedtls_zeroize_1154($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
  while (1) {
   $0 = HEAP32[$2 + 8 >> 2];
   HEAP32[$2 + 8 >> 2] = $0 - 1;
   if ($0) {
    $0 = HEAP32[$2 + 4 >> 2];
    HEAP32[$2 + 4 >> 2] = $0 + 1;
    HEAP8[$0 | 0] = 0;
    continue;
   }
   break;
  };
 }
 
 function mbedtls_aes_setkey_enc($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP32[$3 + 16 >> 2] = $2;
  block4 : {
   block3 : {
    block2 : {
     block1 : {
      block : {
       $0 = HEAP32[$3 + 16 >> 2];
       if (($0 | 0) != 128) {
        if (($0 | 0) == 192) {
         break block
        }
        if (($0 | 0) == 256) {
         break block1
        }
        break block2;
       }
       HEAP32[HEAP32[$3 + 24 >> 2] >> 2] = 10;
       break block3;
      }
      HEAP32[HEAP32[$3 + 24 >> 2] >> 2] = 12;
      break block3;
     }
     HEAP32[HEAP32[$3 + 24 >> 2] >> 2] = 14;
     break block3;
    }
    HEAP32[$3 + 28 >> 2] = -32;
    break block4;
   }
   $0 = HEAP32[$3 + 24 >> 2] + 8 | 0;
   HEAP32[$3 + 8 >> 2] = $0;
   HEAP32[HEAP32[$3 + 24 >> 2] + 4 >> 2] = $0;
   HEAP32[$3 + 12 >> 2] = 0;
   while (1) {
    if (HEAPU32[$3 + 12 >> 2] < HEAP32[$3 + 16 >> 2] >>> 5 >>> 0) {
     HEAP32[HEAP32[$3 + 8 >> 2] + (HEAP32[$3 + 12 >> 2] << 2) >> 2] = HEAPU8[HEAP32[$3 + 20 >> 2] + (HEAP32[$3 + 12 >> 2] << 2) | 0] | HEAPU8[HEAP32[$3 + 20 >> 2] + ((HEAP32[$3 + 12 >> 2] << 2) + 1 | 0) | 0] << 8 | HEAPU8[HEAP32[$3 + 20 >> 2] + ((HEAP32[$3 + 12 >> 2] << 2) + 2 | 0) | 0] << 16 | HEAPU8[HEAP32[$3 + 20 >> 2] + ((HEAP32[$3 + 12 >> 2] << 2) + 3 | 0) | 0] << 24;
     HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
     continue;
    }
    break;
   };
   block6 : {
    block8 : {
     switch (HEAP32[HEAP32[$3 + 24 >> 2] >> 2] - 10 | 0) {
     case 0:
      HEAP32[$3 + 12 >> 2] = 0;
      while (1) {
       if (HEAPU32[$3 + 12 >> 2] < 10) {
        HEAP32[HEAP32[$3 + 8 >> 2] + 16 >> 2] = HEAPU8[(HEAP32[HEAP32[$3 + 8 >> 2] + 12 >> 2] >>> 8 & 255) + 173056 | 0] ^ (HEAP32[HEAP32[$3 + 8 >> 2] >> 2] ^ HEAP32[(HEAP32[$3 + 12 >> 2] << 2) + 173008 >> 2]) ^ HEAPU8[(HEAP32[HEAP32[$3 + 8 >> 2] + 12 >> 2] >>> 16 & 255) + 173056 | 0] << 8 ^ HEAPU8[(HEAP32[HEAP32[$3 + 8 >> 2] + 12 >> 2] >>> 24 | 0) + 173056 | 0] << 16 ^ HEAPU8[(HEAP32[HEAP32[$3 + 8 >> 2] + 12 >> 2] & 255) + 173056 | 0] << 24;
        HEAP32[HEAP32[$3 + 8 >> 2] + 20 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] + 4 >> 2] ^ HEAP32[HEAP32[$3 + 8 >> 2] + 16 >> 2];
        HEAP32[HEAP32[$3 + 8 >> 2] + 24 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] + 8 >> 2] ^ HEAP32[HEAP32[$3 + 8 >> 2] + 20 >> 2];
        HEAP32[HEAP32[$3 + 8 >> 2] + 28 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] + 12 >> 2] ^ HEAP32[HEAP32[$3 + 8 >> 2] + 24 >> 2];
        HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
        HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + 16;
        continue;
       }
       break;
      };
      break block6;
     case 2:
      HEAP32[$3 + 12 >> 2] = 0;
      while (1) {
       if (HEAPU32[$3 + 12 >> 2] < 8) {
        HEAP32[HEAP32[$3 + 8 >> 2] + 24 >> 2] = HEAPU8[(HEAP32[HEAP32[$3 + 8 >> 2] + 20 >> 2] >>> 8 & 255) + 173056 | 0] ^ (HEAP32[HEAP32[$3 + 8 >> 2] >> 2] ^ HEAP32[(HEAP32[$3 + 12 >> 2] << 2) + 173008 >> 2]) ^ HEAPU8[(HEAP32[HEAP32[$3 + 8 >> 2] + 20 >> 2] >>> 16 & 255) + 173056 | 0] << 8 ^ HEAPU8[(HEAP32[HEAP32[$3 + 8 >> 2] + 20 >> 2] >>> 24 | 0) + 173056 | 0] << 16 ^ HEAPU8[(HEAP32[HEAP32[$3 + 8 >> 2] + 20 >> 2] & 255) + 173056 | 0] << 24;
        HEAP32[HEAP32[$3 + 8 >> 2] + 28 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] + 4 >> 2] ^ HEAP32[HEAP32[$3 + 8 >> 2] + 24 >> 2];
        HEAP32[HEAP32[$3 + 8 >> 2] + 32 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] + 8 >> 2] ^ HEAP32[HEAP32[$3 + 8 >> 2] + 28 >> 2];
        HEAP32[HEAP32[$3 + 8 >> 2] + 36 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] + 12 >> 2] ^ HEAP32[HEAP32[$3 + 8 >> 2] + 32 >> 2];
        HEAP32[HEAP32[$3 + 8 >> 2] + 40 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] + 16 >> 2] ^ HEAP32[HEAP32[$3 + 8 >> 2] + 36 >> 2];
        HEAP32[HEAP32[$3 + 8 >> 2] + 44 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] + 20 >> 2] ^ HEAP32[HEAP32[$3 + 8 >> 2] + 40 >> 2];
        HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
        HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + 24;
        continue;
       }
       break;
      };
      break block6;
     case 4:
      break block8;
     default:
      break block6;
     };
    }
    HEAP32[$3 + 12 >> 2] = 0;
    while (1) {
     if (HEAPU32[$3 + 12 >> 2] < 7) {
      HEAP32[HEAP32[$3 + 8 >> 2] + 32 >> 2] = HEAPU8[(HEAP32[HEAP32[$3 + 8 >> 2] + 28 >> 2] >>> 8 & 255) + 173056 | 0] ^ (HEAP32[HEAP32[$3 + 8 >> 2] >> 2] ^ HEAP32[(HEAP32[$3 + 12 >> 2] << 2) + 173008 >> 2]) ^ HEAPU8[(HEAP32[HEAP32[$3 + 8 >> 2] + 28 >> 2] >>> 16 & 255) + 173056 | 0] << 8 ^ HEAPU8[(HEAP32[HEAP32[$3 + 8 >> 2] + 28 >> 2] >>> 24 | 0) + 173056 | 0] << 16 ^ HEAPU8[(HEAP32[HEAP32[$3 + 8 >> 2] + 28 >> 2] & 255) + 173056 | 0] << 24;
      HEAP32[HEAP32[$3 + 8 >> 2] + 36 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] + 4 >> 2] ^ HEAP32[HEAP32[$3 + 8 >> 2] + 32 >> 2];
      HEAP32[HEAP32[$3 + 8 >> 2] + 40 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] + 8 >> 2] ^ HEAP32[HEAP32[$3 + 8 >> 2] + 36 >> 2];
      HEAP32[HEAP32[$3 + 8 >> 2] + 44 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] + 12 >> 2] ^ HEAP32[HEAP32[$3 + 8 >> 2] + 40 >> 2];
      HEAP32[HEAP32[$3 + 8 >> 2] + 48 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] + 16 >> 2] ^ HEAPU8[(HEAP32[HEAP32[$3 + 8 >> 2] + 44 >> 2] & 255) + 173056 | 0] ^ HEAPU8[(HEAP32[HEAP32[$3 + 8 >> 2] + 44 >> 2] >>> 8 & 255) + 173056 | 0] << 8 ^ HEAPU8[(HEAP32[HEAP32[$3 + 8 >> 2] + 44 >> 2] >>> 16 & 255) + 173056 | 0] << 16 ^ HEAPU8[(HEAP32[HEAP32[$3 + 8 >> 2] + 44 >> 2] >>> 24 | 0) + 173056 | 0] << 24;
      HEAP32[HEAP32[$3 + 8 >> 2] + 52 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] + 20 >> 2] ^ HEAP32[HEAP32[$3 + 8 >> 2] + 48 >> 2];
      HEAP32[HEAP32[$3 + 8 >> 2] + 56 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] + 24 >> 2] ^ HEAP32[HEAP32[$3 + 8 >> 2] + 52 >> 2];
      HEAP32[HEAP32[$3 + 8 >> 2] + 60 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] + 28 >> 2] ^ HEAP32[HEAP32[$3 + 8 >> 2] + 56 >> 2];
      HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
      HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + 32;
      continue;
     }
     break;
    };
   }
   HEAP32[$3 + 28 >> 2] = 0;
  }
  return HEAP32[$3 + 28 >> 2];
 }
 
 function mbedtls_aes_setkey_dec($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 320 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 316 >> 2] = $0;
  HEAP32[$3 + 312 >> 2] = $1;
  HEAP32[$3 + 308 >> 2] = $2;
  mbedtls_aes_init($3 + 16 | 0);
  $0 = HEAP32[$3 + 316 >> 2] + 8 | 0;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[HEAP32[$3 + 316 >> 2] + 4 >> 2] = $0;
  $0 = mbedtls_aes_setkey_enc($3 + 16 | 0, HEAP32[$3 + 312 >> 2], HEAP32[$3 + 308 >> 2]);
  HEAP32[$3 + 296 >> 2] = $0;
  if (!$0) {
   HEAP32[HEAP32[$3 + 316 >> 2] >> 2] = HEAP32[$3 + 16 >> 2];
   HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 20 >> 2] + (HEAP32[$3 + 16 >> 2] << 4);
   $0 = HEAP32[$3 + 8 >> 2];
   HEAP32[$3 + 8 >> 2] = $0 + 4;
   $1 = HEAP32[$0 >> 2];
   $0 = HEAP32[$3 + 12 >> 2];
   HEAP32[$3 + 12 >> 2] = $0 + 4;
   HEAP32[$0 >> 2] = $1;
   $0 = HEAP32[$3 + 8 >> 2];
   HEAP32[$3 + 8 >> 2] = $0 + 4;
   $1 = HEAP32[$0 >> 2];
   $0 = HEAP32[$3 + 12 >> 2];
   HEAP32[$3 + 12 >> 2] = $0 + 4;
   HEAP32[$0 >> 2] = $1;
   $0 = HEAP32[$3 + 8 >> 2];
   HEAP32[$3 + 8 >> 2] = $0 + 4;
   $1 = HEAP32[$0 >> 2];
   $0 = HEAP32[$3 + 12 >> 2];
   HEAP32[$3 + 12 >> 2] = $0 + 4;
   HEAP32[$0 >> 2] = $1;
   $0 = HEAP32[$3 + 8 >> 2];
   HEAP32[$3 + 8 >> 2] = $0 + 4;
   $1 = HEAP32[$0 >> 2];
   $0 = HEAP32[$3 + 12 >> 2];
   HEAP32[$3 + 12 >> 2] = $0 + 4;
   HEAP32[$0 >> 2] = $1;
   HEAP32[$3 + 304 >> 2] = HEAP32[HEAP32[$3 + 316 >> 2] >> 2] - 1;
   HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] - 32;
   while (1) {
    if (HEAP32[$3 + 304 >> 2] > 0) {
     HEAP32[$3 + 300 >> 2] = 0;
     while (1) {
      if (HEAP32[$3 + 300 >> 2] < 4) {
       $1 = HEAP32[(HEAPU8[(HEAP32[HEAP32[$3 + 8 >> 2] >> 2] >>> 24 | 0) + 173056 | 0] << 2) + 176384 >> 2];
       $2 = HEAP32[(HEAPU8[(HEAP32[HEAP32[$3 + 8 >> 2] >> 2] >>> 16 & 255) + 173056 | 0] << 2) + 175360 >> 2] ^ (HEAP32[(HEAPU8[(HEAP32[HEAP32[$3 + 8 >> 2] >> 2] & 255) + 173056 | 0] << 2) + 173312 >> 2] ^ HEAP32[(HEAPU8[(HEAP32[HEAP32[$3 + 8 >> 2] >> 2] >>> 8 & 255) + 173056 | 0] << 2) + 174336 >> 2]);
       $0 = HEAP32[$3 + 12 >> 2];
       HEAP32[$3 + 12 >> 2] = $0 + 4;
       HEAP32[$0 >> 2] = $1 ^ $2;
       HEAP32[$3 + 300 >> 2] = HEAP32[$3 + 300 >> 2] + 1;
       HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + 4;
       continue;
      }
      break;
     };
     HEAP32[$3 + 304 >> 2] = HEAP32[$3 + 304 >> 2] - 1;
     HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] - 32;
     continue;
    }
    break;
   };
   $0 = HEAP32[$3 + 8 >> 2];
   HEAP32[$3 + 8 >> 2] = $0 + 4;
   $1 = HEAP32[$0 >> 2];
   $0 = HEAP32[$3 + 12 >> 2];
   HEAP32[$3 + 12 >> 2] = $0 + 4;
   HEAP32[$0 >> 2] = $1;
   $0 = HEAP32[$3 + 8 >> 2];
   HEAP32[$3 + 8 >> 2] = $0 + 4;
   $1 = HEAP32[$0 >> 2];
   $0 = HEAP32[$3 + 12 >> 2];
   HEAP32[$3 + 12 >> 2] = $0 + 4;
   HEAP32[$0 >> 2] = $1;
   $0 = HEAP32[$3 + 8 >> 2];
   HEAP32[$3 + 8 >> 2] = $0 + 4;
   $1 = HEAP32[$0 >> 2];
   $0 = HEAP32[$3 + 12 >> 2];
   HEAP32[$3 + 12 >> 2] = $0 + 4;
   HEAP32[$0 >> 2] = $1;
   $0 = HEAP32[$3 + 8 >> 2];
   HEAP32[$3 + 8 >> 2] = $0 + 4;
   $1 = HEAP32[$0 >> 2];
   $0 = HEAP32[$3 + 12 >> 2];
   HEAP32[$3 + 12 >> 2] = $0 + 4;
   HEAP32[$0 >> 2] = $1;
  }
  mbedtls_aes_free($3 + 16 | 0);
  __stack_pointer = $3 + 320 | 0;
  return HEAP32[$3 + 296 >> 2];
 }
 
 function mbedtls_aes_encrypt($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer + -64 | 0;
  HEAP32[$3 + 60 >> 2] = $0;
  HEAP32[$3 + 56 >> 2] = $1;
  HEAP32[$3 + 52 >> 2] = $2;
  HEAP32[$3 + 44 >> 2] = HEAP32[HEAP32[$3 + 60 >> 2] + 4 >> 2];
  HEAP32[$3 + 40 >> 2] = HEAPU8[HEAP32[$3 + 56 >> 2]] | HEAPU8[HEAP32[$3 + 56 >> 2] + 1 | 0] << 8 | HEAPU8[HEAP32[$3 + 56 >> 2] + 2 | 0] << 16 | HEAPU8[HEAP32[$3 + 56 >> 2] + 3 | 0] << 24;
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 44 >> 2] = $0 + 4;
  HEAP32[$3 + 40 >> 2] = HEAP32[$0 >> 2] ^ HEAP32[$3 + 40 >> 2];
  HEAP32[$3 + 36 >> 2] = HEAPU8[HEAP32[$3 + 56 >> 2] + 4 | 0] | HEAPU8[HEAP32[$3 + 56 >> 2] + 5 | 0] << 8 | HEAPU8[HEAP32[$3 + 56 >> 2] + 6 | 0] << 16 | HEAPU8[HEAP32[$3 + 56 >> 2] + 7 | 0] << 24;
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 44 >> 2] = $0 + 4;
  HEAP32[$3 + 36 >> 2] = HEAP32[$0 >> 2] ^ HEAP32[$3 + 36 >> 2];
  HEAP32[$3 + 32 >> 2] = HEAPU8[HEAP32[$3 + 56 >> 2] + 8 | 0] | HEAPU8[HEAP32[$3 + 56 >> 2] + 9 | 0] << 8 | HEAPU8[HEAP32[$3 + 56 >> 2] + 10 | 0] << 16 | HEAPU8[HEAP32[$3 + 56 >> 2] + 11 | 0] << 24;
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 44 >> 2] = $0 + 4;
  HEAP32[$3 + 32 >> 2] = HEAP32[$0 >> 2] ^ HEAP32[$3 + 32 >> 2];
  HEAP32[$3 + 28 >> 2] = HEAPU8[HEAP32[$3 + 56 >> 2] + 12 | 0] | HEAPU8[HEAP32[$3 + 56 >> 2] + 13 | 0] << 8 | HEAPU8[HEAP32[$3 + 56 >> 2] + 14 | 0] << 16 | HEAPU8[HEAP32[$3 + 56 >> 2] + 15 | 0] << 24;
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 44 >> 2] = $0 + 4;
  HEAP32[$3 + 28 >> 2] = HEAP32[$0 >> 2] ^ HEAP32[$3 + 28 >> 2];
  HEAP32[$3 + 48 >> 2] = (HEAP32[HEAP32[$3 + 60 >> 2] >> 2] >> 1) - 1;
  while (1) {
   if (HEAP32[$3 + 48 >> 2] > 0) {
    $0 = HEAP32[$3 + 44 >> 2];
    HEAP32[$3 + 44 >> 2] = $0 + 4;
    HEAP32[$3 + 24 >> 2] = HEAP32[(HEAP32[$3 + 28 >> 2] >>> 24 << 2) + 180480 >> 2] ^ (HEAP32[((HEAP32[$3 + 32 >> 2] >>> 16 & 255) << 2) + 179456 >> 2] ^ (HEAP32[((HEAP32[$3 + 36 >> 2] >>> 8 & 255) << 2) + 178432 >> 2] ^ (HEAP32[$0 >> 2] ^ HEAP32[((HEAP32[$3 + 40 >> 2] & 255) << 2) + 177408 >> 2])));
    $0 = HEAP32[$3 + 44 >> 2];
    HEAP32[$3 + 44 >> 2] = $0 + 4;
    HEAP32[$3 + 20 >> 2] = HEAP32[(HEAP32[$3 + 40 >> 2] >>> 24 << 2) + 180480 >> 2] ^ (HEAP32[((HEAP32[$3 + 28 >> 2] >>> 16 & 255) << 2) + 179456 >> 2] ^ (HEAP32[((HEAP32[$3 + 32 >> 2] >>> 8 & 255) << 2) + 178432 >> 2] ^ (HEAP32[$0 >> 2] ^ HEAP32[((HEAP32[$3 + 36 >> 2] & 255) << 2) + 177408 >> 2])));
    $0 = HEAP32[$3 + 44 >> 2];
    HEAP32[$3 + 44 >> 2] = $0 + 4;
    HEAP32[$3 + 16 >> 2] = HEAP32[(HEAP32[$3 + 36 >> 2] >>> 24 << 2) + 180480 >> 2] ^ (HEAP32[((HEAP32[$3 + 40 >> 2] >>> 16 & 255) << 2) + 179456 >> 2] ^ (HEAP32[((HEAP32[$3 + 28 >> 2] >>> 8 & 255) << 2) + 178432 >> 2] ^ (HEAP32[$0 >> 2] ^ HEAP32[((HEAP32[$3 + 32 >> 2] & 255) << 2) + 177408 >> 2])));
    $0 = HEAP32[$3 + 44 >> 2];
    HEAP32[$3 + 44 >> 2] = $0 + 4;
    HEAP32[$3 + 12 >> 2] = HEAP32[(HEAP32[$3 + 32 >> 2] >>> 24 << 2) + 180480 >> 2] ^ (HEAP32[((HEAP32[$3 + 36 >> 2] >>> 16 & 255) << 2) + 179456 >> 2] ^ (HEAP32[((HEAP32[$3 + 40 >> 2] >>> 8 & 255) << 2) + 178432 >> 2] ^ (HEAP32[$0 >> 2] ^ HEAP32[((HEAP32[$3 + 28 >> 2] & 255) << 2) + 177408 >> 2])));
    $0 = HEAP32[$3 + 44 >> 2];
    HEAP32[$3 + 44 >> 2] = $0 + 4;
    HEAP32[$3 + 40 >> 2] = HEAP32[(HEAP32[$3 + 12 >> 2] >>> 24 << 2) + 180480 >> 2] ^ (HEAP32[((HEAP32[$3 + 16 >> 2] >>> 16 & 255) << 2) + 179456 >> 2] ^ (HEAP32[((HEAP32[$3 + 20 >> 2] >>> 8 & 255) << 2) + 178432 >> 2] ^ (HEAP32[$0 >> 2] ^ HEAP32[((HEAP32[$3 + 24 >> 2] & 255) << 2) + 177408 >> 2])));
    $0 = HEAP32[$3 + 44 >> 2];
    HEAP32[$3 + 44 >> 2] = $0 + 4;
    HEAP32[$3 + 36 >> 2] = HEAP32[(HEAP32[$3 + 24 >> 2] >>> 24 << 2) + 180480 >> 2] ^ (HEAP32[((HEAP32[$3 + 12 >> 2] >>> 16 & 255) << 2) + 179456 >> 2] ^ (HEAP32[((HEAP32[$3 + 16 >> 2] >>> 8 & 255) << 2) + 178432 >> 2] ^ (HEAP32[$0 >> 2] ^ HEAP32[((HEAP32[$3 + 20 >> 2] & 255) << 2) + 177408 >> 2])));
    $0 = HEAP32[$3 + 44 >> 2];
    HEAP32[$3 + 44 >> 2] = $0 + 4;
    HEAP32[$3 + 32 >> 2] = HEAP32[(HEAP32[$3 + 20 >> 2] >>> 24 << 2) + 180480 >> 2] ^ (HEAP32[((HEAP32[$3 + 24 >> 2] >>> 16 & 255) << 2) + 179456 >> 2] ^ (HEAP32[((HEAP32[$3 + 12 >> 2] >>> 8 & 255) << 2) + 178432 >> 2] ^ (HEAP32[$0 >> 2] ^ HEAP32[((HEAP32[$3 + 16 >> 2] & 255) << 2) + 177408 >> 2])));
    $0 = HEAP32[$3 + 44 >> 2];
    HEAP32[$3 + 44 >> 2] = $0 + 4;
    HEAP32[$3 + 28 >> 2] = HEAP32[(HEAP32[$3 + 16 >> 2] >>> 24 << 2) + 180480 >> 2] ^ (HEAP32[((HEAP32[$3 + 20 >> 2] >>> 16 & 255) << 2) + 179456 >> 2] ^ (HEAP32[((HEAP32[$3 + 24 >> 2] >>> 8 & 255) << 2) + 178432 >> 2] ^ (HEAP32[$0 >> 2] ^ HEAP32[((HEAP32[$3 + 12 >> 2] & 255) << 2) + 177408 >> 2])));
    HEAP32[$3 + 48 >> 2] = HEAP32[$3 + 48 >> 2] - 1;
    continue;
   }
   break;
  };
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 44 >> 2] = $0 + 4;
  HEAP32[$3 + 24 >> 2] = HEAP32[(HEAP32[$3 + 28 >> 2] >>> 24 << 2) + 180480 >> 2] ^ (HEAP32[((HEAP32[$3 + 32 >> 2] >>> 16 & 255) << 2) + 179456 >> 2] ^ (HEAP32[((HEAP32[$3 + 36 >> 2] >>> 8 & 255) << 2) + 178432 >> 2] ^ (HEAP32[$0 >> 2] ^ HEAP32[((HEAP32[$3 + 40 >> 2] & 255) << 2) + 177408 >> 2])));
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 44 >> 2] = $0 + 4;
  HEAP32[$3 + 20 >> 2] = HEAP32[(HEAP32[$3 + 40 >> 2] >>> 24 << 2) + 180480 >> 2] ^ (HEAP32[((HEAP32[$3 + 28 >> 2] >>> 16 & 255) << 2) + 179456 >> 2] ^ (HEAP32[((HEAP32[$3 + 32 >> 2] >>> 8 & 255) << 2) + 178432 >> 2] ^ (HEAP32[$0 >> 2] ^ HEAP32[((HEAP32[$3 + 36 >> 2] & 255) << 2) + 177408 >> 2])));
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 44 >> 2] = $0 + 4;
  HEAP32[$3 + 16 >> 2] = HEAP32[(HEAP32[$3 + 36 >> 2] >>> 24 << 2) + 180480 >> 2] ^ (HEAP32[((HEAP32[$3 + 40 >> 2] >>> 16 & 255) << 2) + 179456 >> 2] ^ (HEAP32[((HEAP32[$3 + 28 >> 2] >>> 8 & 255) << 2) + 178432 >> 2] ^ (HEAP32[$0 >> 2] ^ HEAP32[((HEAP32[$3 + 32 >> 2] & 255) << 2) + 177408 >> 2])));
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 44 >> 2] = $0 + 4;
  HEAP32[$3 + 12 >> 2] = HEAP32[(HEAP32[$3 + 32 >> 2] >>> 24 << 2) + 180480 >> 2] ^ (HEAP32[((HEAP32[$3 + 36 >> 2] >>> 16 & 255) << 2) + 179456 >> 2] ^ (HEAP32[((HEAP32[$3 + 40 >> 2] >>> 8 & 255) << 2) + 178432 >> 2] ^ (HEAP32[$0 >> 2] ^ HEAP32[((HEAP32[$3 + 28 >> 2] & 255) << 2) + 177408 >> 2])));
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 44 >> 2] = $0 + 4;
  HEAP32[$3 + 40 >> 2] = HEAP32[$0 >> 2] ^ HEAPU8[(HEAP32[$3 + 24 >> 2] & 255) + 173056 | 0] ^ HEAPU8[(HEAP32[$3 + 20 >> 2] >>> 8 & 255) + 173056 | 0] << 8 ^ HEAPU8[(HEAP32[$3 + 16 >> 2] >>> 16 & 255) + 173056 | 0] << 16 ^ HEAPU8[(HEAP32[$3 + 12 >> 2] >>> 24 | 0) + 173056 | 0] << 24;
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 44 >> 2] = $0 + 4;
  HEAP32[$3 + 36 >> 2] = HEAP32[$0 >> 2] ^ HEAPU8[(HEAP32[$3 + 20 >> 2] & 255) + 173056 | 0] ^ HEAPU8[(HEAP32[$3 + 16 >> 2] >>> 8 & 255) + 173056 | 0] << 8 ^ HEAPU8[(HEAP32[$3 + 12 >> 2] >>> 16 & 255) + 173056 | 0] << 16 ^ HEAPU8[(HEAP32[$3 + 24 >> 2] >>> 24 | 0) + 173056 | 0] << 24;
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 44 >> 2] = $0 + 4;
  HEAP32[$3 + 32 >> 2] = HEAP32[$0 >> 2] ^ HEAPU8[(HEAP32[$3 + 16 >> 2] & 255) + 173056 | 0] ^ HEAPU8[(HEAP32[$3 + 12 >> 2] >>> 8 & 255) + 173056 | 0] << 8 ^ HEAPU8[(HEAP32[$3 + 24 >> 2] >>> 16 & 255) + 173056 | 0] << 16 ^ HEAPU8[(HEAP32[$3 + 20 >> 2] >>> 24 | 0) + 173056 | 0] << 24;
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 44 >> 2] = $0 + 4;
  HEAP32[$3 + 28 >> 2] = HEAP32[$0 >> 2] ^ HEAPU8[(HEAP32[$3 + 12 >> 2] & 255) + 173056 | 0] ^ HEAPU8[(HEAP32[$3 + 24 >> 2] >>> 8 & 255) + 173056 | 0] << 8 ^ HEAPU8[(HEAP32[$3 + 20 >> 2] >>> 16 & 255) + 173056 | 0] << 16 ^ HEAPU8[(HEAP32[$3 + 16 >> 2] >>> 24 | 0) + 173056 | 0] << 24;
  HEAP8[HEAP32[$3 + 52 >> 2]] = HEAP32[$3 + 40 >> 2];
  HEAP8[HEAP32[$3 + 52 >> 2] + 1 | 0] = HEAP32[$3 + 40 >> 2] >>> 8;
  HEAP8[HEAP32[$3 + 52 >> 2] + 2 | 0] = HEAP32[$3 + 40 >> 2] >>> 16;
  HEAP8[HEAP32[$3 + 52 >> 2] + 3 | 0] = HEAP32[$3 + 40 >> 2] >>> 24;
  HEAP8[HEAP32[$3 + 52 >> 2] + 4 | 0] = HEAP32[$3 + 36 >> 2];
  HEAP8[HEAP32[$3 + 52 >> 2] + 5 | 0] = HEAP32[$3 + 36 >> 2] >>> 8;
  HEAP8[HEAP32[$3 + 52 >> 2] + 6 | 0] = HEAP32[$3 + 36 >> 2] >>> 16;
  HEAP8[HEAP32[$3 + 52 >> 2] + 7 | 0] = HEAP32[$3 + 36 >> 2] >>> 24;
  HEAP8[HEAP32[$3 + 52 >> 2] + 8 | 0] = HEAP32[$3 + 32 >> 2];
  HEAP8[HEAP32[$3 + 52 >> 2] + 9 | 0] = HEAP32[$3 + 32 >> 2] >>> 8;
  HEAP8[HEAP32[$3 + 52 >> 2] + 10 | 0] = HEAP32[$3 + 32 >> 2] >>> 16;
  HEAP8[HEAP32[$3 + 52 >> 2] + 11 | 0] = HEAP32[$3 + 32 >> 2] >>> 24;
  HEAP8[HEAP32[$3 + 52 >> 2] + 12 | 0] = HEAP32[$3 + 28 >> 2];
  HEAP8[HEAP32[$3 + 52 >> 2] + 13 | 0] = HEAP32[$3 + 28 >> 2] >>> 8;
  HEAP8[HEAP32[$3 + 52 >> 2] + 14 | 0] = HEAP32[$3 + 28 >> 2] >>> 16;
  HEAP8[HEAP32[$3 + 52 >> 2] + 15 | 0] = HEAP32[$3 + 28 >> 2] >>> 24;
 }
 
 function mbedtls_aes_decrypt($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer + -64 | 0;
  HEAP32[$3 + 60 >> 2] = $0;
  HEAP32[$3 + 56 >> 2] = $1;
  HEAP32[$3 + 52 >> 2] = $2;
  HEAP32[$3 + 44 >> 2] = HEAP32[HEAP32[$3 + 60 >> 2] + 4 >> 2];
  HEAP32[$3 + 40 >> 2] = HEAPU8[HEAP32[$3 + 56 >> 2]] | HEAPU8[HEAP32[$3 + 56 >> 2] + 1 | 0] << 8 | HEAPU8[HEAP32[$3 + 56 >> 2] + 2 | 0] << 16 | HEAPU8[HEAP32[$3 + 56 >> 2] + 3 | 0] << 24;
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 44 >> 2] = $0 + 4;
  HEAP32[$3 + 40 >> 2] = HEAP32[$0 >> 2] ^ HEAP32[$3 + 40 >> 2];
  HEAP32[$3 + 36 >> 2] = HEAPU8[HEAP32[$3 + 56 >> 2] + 4 | 0] | HEAPU8[HEAP32[$3 + 56 >> 2] + 5 | 0] << 8 | HEAPU8[HEAP32[$3 + 56 >> 2] + 6 | 0] << 16 | HEAPU8[HEAP32[$3 + 56 >> 2] + 7 | 0] << 24;
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 44 >> 2] = $0 + 4;
  HEAP32[$3 + 36 >> 2] = HEAP32[$0 >> 2] ^ HEAP32[$3 + 36 >> 2];
  HEAP32[$3 + 32 >> 2] = HEAPU8[HEAP32[$3 + 56 >> 2] + 8 | 0] | HEAPU8[HEAP32[$3 + 56 >> 2] + 9 | 0] << 8 | HEAPU8[HEAP32[$3 + 56 >> 2] + 10 | 0] << 16 | HEAPU8[HEAP32[$3 + 56 >> 2] + 11 | 0] << 24;
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 44 >> 2] = $0 + 4;
  HEAP32[$3 + 32 >> 2] = HEAP32[$0 >> 2] ^ HEAP32[$3 + 32 >> 2];
  HEAP32[$3 + 28 >> 2] = HEAPU8[HEAP32[$3 + 56 >> 2] + 12 | 0] | HEAPU8[HEAP32[$3 + 56 >> 2] + 13 | 0] << 8 | HEAPU8[HEAP32[$3 + 56 >> 2] + 14 | 0] << 16 | HEAPU8[HEAP32[$3 + 56 >> 2] + 15 | 0] << 24;
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 44 >> 2] = $0 + 4;
  HEAP32[$3 + 28 >> 2] = HEAP32[$0 >> 2] ^ HEAP32[$3 + 28 >> 2];
  HEAP32[$3 + 48 >> 2] = (HEAP32[HEAP32[$3 + 60 >> 2] >> 2] >> 1) - 1;
  while (1) {
   if (HEAP32[$3 + 48 >> 2] > 0) {
    $0 = HEAP32[$3 + 44 >> 2];
    HEAP32[$3 + 44 >> 2] = $0 + 4;
    HEAP32[$3 + 24 >> 2] = HEAP32[(HEAP32[$3 + 36 >> 2] >>> 24 << 2) + 176384 >> 2] ^ (HEAP32[((HEAP32[$3 + 32 >> 2] >>> 16 & 255) << 2) + 175360 >> 2] ^ (HEAP32[((HEAP32[$3 + 28 >> 2] >>> 8 & 255) << 2) + 174336 >> 2] ^ (HEAP32[$0 >> 2] ^ HEAP32[((HEAP32[$3 + 40 >> 2] & 255) << 2) + 173312 >> 2])));
    $0 = HEAP32[$3 + 44 >> 2];
    HEAP32[$3 + 44 >> 2] = $0 + 4;
    HEAP32[$3 + 20 >> 2] = HEAP32[(HEAP32[$3 + 32 >> 2] >>> 24 << 2) + 176384 >> 2] ^ (HEAP32[((HEAP32[$3 + 28 >> 2] >>> 16 & 255) << 2) + 175360 >> 2] ^ (HEAP32[((HEAP32[$3 + 40 >> 2] >>> 8 & 255) << 2) + 174336 >> 2] ^ (HEAP32[$0 >> 2] ^ HEAP32[((HEAP32[$3 + 36 >> 2] & 255) << 2) + 173312 >> 2])));
    $0 = HEAP32[$3 + 44 >> 2];
    HEAP32[$3 + 44 >> 2] = $0 + 4;
    HEAP32[$3 + 16 >> 2] = HEAP32[(HEAP32[$3 + 28 >> 2] >>> 24 << 2) + 176384 >> 2] ^ (HEAP32[((HEAP32[$3 + 40 >> 2] >>> 16 & 255) << 2) + 175360 >> 2] ^ (HEAP32[((HEAP32[$3 + 36 >> 2] >>> 8 & 255) << 2) + 174336 >> 2] ^ (HEAP32[$0 >> 2] ^ HEAP32[((HEAP32[$3 + 32 >> 2] & 255) << 2) + 173312 >> 2])));
    $0 = HEAP32[$3 + 44 >> 2];
    HEAP32[$3 + 44 >> 2] = $0 + 4;
    HEAP32[$3 + 12 >> 2] = HEAP32[(HEAP32[$3 + 40 >> 2] >>> 24 << 2) + 176384 >> 2] ^ (HEAP32[((HEAP32[$3 + 36 >> 2] >>> 16 & 255) << 2) + 175360 >> 2] ^ (HEAP32[((HEAP32[$3 + 32 >> 2] >>> 8 & 255) << 2) + 174336 >> 2] ^ (HEAP32[$0 >> 2] ^ HEAP32[((HEAP32[$3 + 28 >> 2] & 255) << 2) + 173312 >> 2])));
    $0 = HEAP32[$3 + 44 >> 2];
    HEAP32[$3 + 44 >> 2] = $0 + 4;
    HEAP32[$3 + 40 >> 2] = HEAP32[(HEAP32[$3 + 20 >> 2] >>> 24 << 2) + 176384 >> 2] ^ (HEAP32[((HEAP32[$3 + 16 >> 2] >>> 16 & 255) << 2) + 175360 >> 2] ^ (HEAP32[((HEAP32[$3 + 12 >> 2] >>> 8 & 255) << 2) + 174336 >> 2] ^ (HEAP32[$0 >> 2] ^ HEAP32[((HEAP32[$3 + 24 >> 2] & 255) << 2) + 173312 >> 2])));
    $0 = HEAP32[$3 + 44 >> 2];
    HEAP32[$3 + 44 >> 2] = $0 + 4;
    HEAP32[$3 + 36 >> 2] = HEAP32[(HEAP32[$3 + 16 >> 2] >>> 24 << 2) + 176384 >> 2] ^ (HEAP32[((HEAP32[$3 + 12 >> 2] >>> 16 & 255) << 2) + 175360 >> 2] ^ (HEAP32[((HEAP32[$3 + 24 >> 2] >>> 8 & 255) << 2) + 174336 >> 2] ^ (HEAP32[$0 >> 2] ^ HEAP32[((HEAP32[$3 + 20 >> 2] & 255) << 2) + 173312 >> 2])));
    $0 = HEAP32[$3 + 44 >> 2];
    HEAP32[$3 + 44 >> 2] = $0 + 4;
    HEAP32[$3 + 32 >> 2] = HEAP32[(HEAP32[$3 + 12 >> 2] >>> 24 << 2) + 176384 >> 2] ^ (HEAP32[((HEAP32[$3 + 24 >> 2] >>> 16 & 255) << 2) + 175360 >> 2] ^ (HEAP32[((HEAP32[$3 + 20 >> 2] >>> 8 & 255) << 2) + 174336 >> 2] ^ (HEAP32[$0 >> 2] ^ HEAP32[((HEAP32[$3 + 16 >> 2] & 255) << 2) + 173312 >> 2])));
    $0 = HEAP32[$3 + 44 >> 2];
    HEAP32[$3 + 44 >> 2] = $0 + 4;
    HEAP32[$3 + 28 >> 2] = HEAP32[(HEAP32[$3 + 24 >> 2] >>> 24 << 2) + 176384 >> 2] ^ (HEAP32[((HEAP32[$3 + 20 >> 2] >>> 16 & 255) << 2) + 175360 >> 2] ^ (HEAP32[((HEAP32[$3 + 16 >> 2] >>> 8 & 255) << 2) + 174336 >> 2] ^ (HEAP32[$0 >> 2] ^ HEAP32[((HEAP32[$3 + 12 >> 2] & 255) << 2) + 173312 >> 2])));
    HEAP32[$3 + 48 >> 2] = HEAP32[$3 + 48 >> 2] - 1;
    continue;
   }
   break;
  };
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 44 >> 2] = $0 + 4;
  HEAP32[$3 + 24 >> 2] = HEAP32[(HEAP32[$3 + 36 >> 2] >>> 24 << 2) + 176384 >> 2] ^ (HEAP32[((HEAP32[$3 + 32 >> 2] >>> 16 & 255) << 2) + 175360 >> 2] ^ (HEAP32[((HEAP32[$3 + 28 >> 2] >>> 8 & 255) << 2) + 174336 >> 2] ^ (HEAP32[$0 >> 2] ^ HEAP32[((HEAP32[$3 + 40 >> 2] & 255) << 2) + 173312 >> 2])));
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 44 >> 2] = $0 + 4;
  HEAP32[$3 + 20 >> 2] = HEAP32[(HEAP32[$3 + 32 >> 2] >>> 24 << 2) + 176384 >> 2] ^ (HEAP32[((HEAP32[$3 + 28 >> 2] >>> 16 & 255) << 2) + 175360 >> 2] ^ (HEAP32[((HEAP32[$3 + 40 >> 2] >>> 8 & 255) << 2) + 174336 >> 2] ^ (HEAP32[$0 >> 2] ^ HEAP32[((HEAP32[$3 + 36 >> 2] & 255) << 2) + 173312 >> 2])));
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 44 >> 2] = $0 + 4;
  HEAP32[$3 + 16 >> 2] = HEAP32[(HEAP32[$3 + 28 >> 2] >>> 24 << 2) + 176384 >> 2] ^ (HEAP32[((HEAP32[$3 + 40 >> 2] >>> 16 & 255) << 2) + 175360 >> 2] ^ (HEAP32[((HEAP32[$3 + 36 >> 2] >>> 8 & 255) << 2) + 174336 >> 2] ^ (HEAP32[$0 >> 2] ^ HEAP32[((HEAP32[$3 + 32 >> 2] & 255) << 2) + 173312 >> 2])));
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 44 >> 2] = $0 + 4;
  HEAP32[$3 + 12 >> 2] = HEAP32[(HEAP32[$3 + 40 >> 2] >>> 24 << 2) + 176384 >> 2] ^ (HEAP32[((HEAP32[$3 + 36 >> 2] >>> 16 & 255) << 2) + 175360 >> 2] ^ (HEAP32[((HEAP32[$3 + 32 >> 2] >>> 8 & 255) << 2) + 174336 >> 2] ^ (HEAP32[$0 >> 2] ^ HEAP32[((HEAP32[$3 + 28 >> 2] & 255) << 2) + 173312 >> 2])));
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 44 >> 2] = $0 + 4;
  HEAP32[$3 + 40 >> 2] = HEAP32[$0 >> 2] ^ HEAPU8[(HEAP32[$3 + 24 >> 2] & 255) + 181504 | 0] ^ HEAPU8[(HEAP32[$3 + 12 >> 2] >>> 8 & 255) + 181504 | 0] << 8 ^ HEAPU8[(HEAP32[$3 + 16 >> 2] >>> 16 & 255) + 181504 | 0] << 16 ^ HEAPU8[(HEAP32[$3 + 20 >> 2] >>> 24 | 0) + 181504 | 0] << 24;
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 44 >> 2] = $0 + 4;
  HEAP32[$3 + 36 >> 2] = HEAP32[$0 >> 2] ^ HEAPU8[(HEAP32[$3 + 20 >> 2] & 255) + 181504 | 0] ^ HEAPU8[(HEAP32[$3 + 24 >> 2] >>> 8 & 255) + 181504 | 0] << 8 ^ HEAPU8[(HEAP32[$3 + 12 >> 2] >>> 16 & 255) + 181504 | 0] << 16 ^ HEAPU8[(HEAP32[$3 + 16 >> 2] >>> 24 | 0) + 181504 | 0] << 24;
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 44 >> 2] = $0 + 4;
  HEAP32[$3 + 32 >> 2] = HEAP32[$0 >> 2] ^ HEAPU8[(HEAP32[$3 + 16 >> 2] & 255) + 181504 | 0] ^ HEAPU8[(HEAP32[$3 + 20 >> 2] >>> 8 & 255) + 181504 | 0] << 8 ^ HEAPU8[(HEAP32[$3 + 24 >> 2] >>> 16 & 255) + 181504 | 0] << 16 ^ HEAPU8[(HEAP32[$3 + 12 >> 2] >>> 24 | 0) + 181504 | 0] << 24;
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 44 >> 2] = $0 + 4;
  HEAP32[$3 + 28 >> 2] = HEAP32[$0 >> 2] ^ HEAPU8[(HEAP32[$3 + 12 >> 2] & 255) + 181504 | 0] ^ HEAPU8[(HEAP32[$3 + 16 >> 2] >>> 8 & 255) + 181504 | 0] << 8 ^ HEAPU8[(HEAP32[$3 + 20 >> 2] >>> 16 & 255) + 181504 | 0] << 16 ^ HEAPU8[(HEAP32[$3 + 24 >> 2] >>> 24 | 0) + 181504 | 0] << 24;
  HEAP8[HEAP32[$3 + 52 >> 2]] = HEAP32[$3 + 40 >> 2];
  HEAP8[HEAP32[$3 + 52 >> 2] + 1 | 0] = HEAP32[$3 + 40 >> 2] >>> 8;
  HEAP8[HEAP32[$3 + 52 >> 2] + 2 | 0] = HEAP32[$3 + 40 >> 2] >>> 16;
  HEAP8[HEAP32[$3 + 52 >> 2] + 3 | 0] = HEAP32[$3 + 40 >> 2] >>> 24;
  HEAP8[HEAP32[$3 + 52 >> 2] + 4 | 0] = HEAP32[$3 + 36 >> 2];
  HEAP8[HEAP32[$3 + 52 >> 2] + 5 | 0] = HEAP32[$3 + 36 >> 2] >>> 8;
  HEAP8[HEAP32[$3 + 52 >> 2] + 6 | 0] = HEAP32[$3 + 36 >> 2] >>> 16;
  HEAP8[HEAP32[$3 + 52 >> 2] + 7 | 0] = HEAP32[$3 + 36 >> 2] >>> 24;
  HEAP8[HEAP32[$3 + 52 >> 2] + 8 | 0] = HEAP32[$3 + 32 >> 2];
  HEAP8[HEAP32[$3 + 52 >> 2] + 9 | 0] = HEAP32[$3 + 32 >> 2] >>> 8;
  HEAP8[HEAP32[$3 + 52 >> 2] + 10 | 0] = HEAP32[$3 + 32 >> 2] >>> 16;
  HEAP8[HEAP32[$3 + 52 >> 2] + 11 | 0] = HEAP32[$3 + 32 >> 2] >>> 24;
  HEAP8[HEAP32[$3 + 52 >> 2] + 12 | 0] = HEAP32[$3 + 28 >> 2];
  HEAP8[HEAP32[$3 + 52 >> 2] + 13 | 0] = HEAP32[$3 + 28 >> 2] >>> 8;
  HEAP8[HEAP32[$3 + 52 >> 2] + 14 | 0] = HEAP32[$3 + 28 >> 2] >>> 16;
  HEAP8[HEAP32[$3 + 52 >> 2] + 15 | 0] = HEAP32[$3 + 28 >> 2] >>> 24;
 }
 
 function mbedtls_aes_crypt_ecb($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
  block : {
   if (HEAP32[$4 + 8 >> 2] == 1) {
    mbedtls_aes_encrypt(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
    break block;
   }
   mbedtls_aes_decrypt(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
  }
  __stack_pointer = $4 + 16 | 0;
  return 0;
 }
 
 function mbedtls_cipher_info_from_values($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP32[$3 + 16 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = 181952;
  block1 : {
   while (1) {
    if (HEAP32[HEAP32[$3 + 12 >> 2] + 4 >> 2]) {
     if (!(HEAP32[HEAP32[HEAP32[HEAP32[$3 + 12 >> 2] + 4 >> 2] + 28 >> 2] >> 2] != HEAP32[$3 + 24 >> 2] | HEAP32[HEAP32[HEAP32[$3 + 12 >> 2] + 4 >> 2] + 8 >> 2] != HEAP32[$3 + 20 >> 2] | HEAP32[HEAP32[HEAP32[$3 + 12 >> 2] + 4 >> 2] + 4 >> 2] != HEAP32[$3 + 16 >> 2])) {
      HEAP32[$3 + 28 >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + 4 >> 2];
      break block1;
     }
     HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 8;
     continue;
    }
    break;
   };
   HEAP32[$3 + 28 >> 2] = 0;
  }
  return HEAP32[$3 + 28 >> 2];
 }
 
 function mbedtls_cipher_free($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  if (HEAP32[$1 + 12 >> 2]) {
   if (HEAP32[HEAP32[$1 + 12 >> 2] + 52 >> 2]) {
    FUNCTION_TABLE[HEAP32[HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] >> 2] + 28 >> 2] + 20 >> 2]](HEAP32[HEAP32[$1 + 12 >> 2] + 52 >> 2])
   }
   mbedtls_zeroize_1162(HEAP32[$1 + 12 >> 2], 56);
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function mbedtls_zeroize_1162($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
  while (1) {
   $0 = HEAP32[$2 + 8 >> 2];
   HEAP32[$2 + 8 >> 2] = $0 - 1;
   if ($0) {
    $0 = HEAP32[$2 + 4 >> 2];
    HEAP32[$2 + 4 >> 2] = $0 + 1;
    HEAP8[$0 | 0] = 0;
    continue;
   }
   break;
  };
 }
 
 function mbedtls_cipher_setup($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  block1 : {
   if (!(HEAP32[$2 + 8 >> 2] ? HEAP32[$2 + 4 >> 2] : 0)) {
    HEAP32[$2 + 12 >> 2] = -24832;
    break block1;
   }
   $0 = HEAP32[$2 + 8 >> 2];
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 + 48 >> 2] = 0;
   HEAP32[$0 + 52 >> 2] = 0;
   HEAP32[$0 + 40 >> 2] = 0;
   HEAP32[$0 + 44 >> 2] = 0;
   HEAP32[$0 + 32 >> 2] = 0;
   HEAP32[$0 + 36 >> 2] = 0;
   HEAP32[$0 + 24 >> 2] = 0;
   HEAP32[$0 + 28 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   HEAP32[$0 + 12 >> 2] = 0;
   $0 = FUNCTION_TABLE[HEAP32[HEAP32[HEAP32[$2 + 4 >> 2] + 28 >> 2] + 16 >> 2]]() | 0;
   HEAP32[HEAP32[$2 + 8 >> 2] + 52 >> 2] = $0;
   if (!$0) {
    HEAP32[$2 + 12 >> 2] = -24960;
    break block1;
   }
   HEAP32[HEAP32[$2 + 8 >> 2] >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$2 + 12 >> 2] = 0;
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function mbedtls_cipher_setkey($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 24 >> 2] = $0;
  HEAP32[$4 + 20 >> 2] = $1;
  HEAP32[$4 + 16 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  block1 : {
   if (!(HEAP32[HEAP32[$4 + 24 >> 2] >> 2] ? HEAP32[$4 + 24 >> 2] : 0)) {
    HEAP32[$4 + 28 >> 2] = -24832;
    break block1;
   }
   if (!(HEAP32[HEAP32[HEAP32[$4 + 24 >> 2] >> 2] + 20 >> 2] & 2 | HEAP32[HEAP32[HEAP32[$4 + 24 >> 2] >> 2] + 8 >> 2] == HEAP32[$4 + 16 >> 2])) {
    HEAP32[$4 + 28 >> 2] = -24832;
    break block1;
   }
   HEAP32[HEAP32[$4 + 24 >> 2] + 4 >> 2] = HEAP32[$4 + 16 >> 2];
   HEAP32[HEAP32[$4 + 24 >> 2] + 8 >> 2] = HEAP32[$4 + 12 >> 2];
   if (!(!(HEAP32[$4 + 12 >> 2] == 1 | HEAP32[HEAP32[HEAP32[$4 + 24 >> 2] >> 2] + 4 >> 2] == 3) & HEAP32[HEAP32[HEAP32[$4 + 24 >> 2] >> 2] + 4 >> 2] != 5)) {
    HEAP32[$4 + 28 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[HEAP32[HEAP32[$4 + 24 >> 2] >> 2] + 28 >> 2] + 8 >> 2]](HEAP32[HEAP32[$4 + 24 >> 2] + 52 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[HEAP32[$4 + 24 >> 2] + 4 >> 2]);
    break block1;
   }
   if (!HEAP32[$4 + 12 >> 2]) {
    HEAP32[$4 + 28 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[HEAP32[HEAP32[$4 + 24 >> 2] >> 2] + 28 >> 2] + 12 >> 2]](HEAP32[HEAP32[$4 + 24 >> 2] + 52 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[HEAP32[$4 + 24 >> 2] + 4 >> 2]);
    break block1;
   }
   HEAP32[$4 + 28 >> 2] = -24832;
  }
  __stack_pointer = $4 + 32 | 0;
  return HEAP32[$4 + 28 >> 2];
 }
 
 function mbedtls_cipher_update($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 24 >> 2] = $0;
  HEAP32[$5 + 20 >> 2] = $1;
  HEAP32[$5 + 16 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 8 >> 2] = $4;
  block2 : {
   if (HEAP32[$5 + 8 >> 2] ? !HEAP32[$5 + 24 >> 2] | !HEAP32[HEAP32[$5 + 24 >> 2] >> 2] : 1) {
    HEAP32[$5 + 28 >> 2] = -24832;
    break block2;
   }
   HEAP32[HEAP32[$5 + 8 >> 2] >> 2] = 0;
   if (HEAP32[HEAP32[HEAP32[$5 + 24 >> 2] >> 2] + 4 >> 2] == 1) {
    if (HEAP32[$5 + 16 >> 2] != (mbedtls_cipher_get_block_size(HEAP32[$5 + 24 >> 2]) | 0)) {
     HEAP32[$5 + 28 >> 2] = -25216;
     break block2;
    }
    HEAP32[HEAP32[$5 + 8 >> 2] >> 2] = HEAP32[$5 + 16 >> 2];
    $0 = FUNCTION_TABLE[HEAP32[HEAP32[HEAP32[HEAP32[$5 + 24 >> 2] >> 2] + 28 >> 2] + 4 >> 2]](HEAP32[HEAP32[$5 + 24 >> 2] + 52 >> 2], HEAP32[HEAP32[$5 + 24 >> 2] + 8 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 12 >> 2]) | 0;
    HEAP32[$5 + 4 >> 2] = $0;
    if ($0) {
     HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 4 >> 2];
     break block2;
    }
    HEAP32[$5 + 28 >> 2] = 0;
    break block2;
   }
   block3 : {
    if (HEAP32[$5 + 20 >> 2] != HEAP32[$5 + 12 >> 2]) {
     break block3
    }
    if (!HEAP32[HEAP32[$5 + 24 >> 2] + 28 >> 2]) {
     if (!(HEAPU32[$5 + 16 >> 2] % (mbedtls_cipher_get_block_size(HEAP32[$5 + 24 >> 2]) >>> 0) | 0)) {
      break block3
     }
    }
    HEAP32[$5 + 28 >> 2] = -24832;
    break block2;
   }
   HEAP32[$5 + 28 >> 2] = -24704;
  }
  __stack_pointer = $5 + 32 | 0;
  return HEAP32[$5 + 28 >> 2];
 }
 
 function mbedtls_cipher_get_block_size($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block1 : {
   if (!(HEAP32[HEAP32[$1 + 8 >> 2] >> 2] ? HEAP32[$1 + 8 >> 2] : 0)) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block1;
   }
   HEAP32[$1 + 12 >> 2] = HEAP32[HEAP32[HEAP32[$1 + 8 >> 2] >> 2] + 24 >> 2];
  }
  return HEAP32[$1 + 12 >> 2];
 }
 
 function aes_crypt_ecb_wrap($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
  $0 = mbedtls_aes_crypt_ecb(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
  __stack_pointer = $4 + 16 | 0;
  return $0 | 0;
 }
 
 function aes_setkey_enc_wrap($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = mbedtls_aes_setkey_enc(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function aes_setkey_dec_wrap($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = mbedtls_aes_setkey_dec(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function aes_ctx_alloc() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 8 >> 2] = jsvMalloc(280);
  block : {
   if (!HEAP32[$0 + 8 >> 2]) {
    HEAP32[$0 + 12 >> 2] = 0;
    break block;
   }
   mbedtls_aes_init(HEAP32[$0 + 8 >> 2]);
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
  }
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function aes_ctx_free($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  mbedtls_aes_free(HEAP32[$1 + 12 >> 2]);
  jsvFree(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function ccm_aes_setkey_wrap($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = mbedtls_ccm_setkey(HEAP32[$3 + 12 >> 2], 2, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function ccm_ctx_alloc() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = jsvMalloc(56);
  if (HEAP32[$0 + 12 >> 2]) {
   mbedtls_ccm_init(HEAP32[$0 + 12 >> 2])
  }
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function ccm_ctx_free($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  mbedtls_ccm_free(HEAP32[$1 + 12 >> 2]);
  jsvFree(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsInit() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[98722] = $0 + 12;
  jshInit();
  jswHWInit();
  jsvInit(12e3);
  jsiInit(1);
  __stack_pointer = $0 + 16 | 0;
 }
 
 function jsIdle() {
  HEAP32[50002] = -1;
  jsiLoop();
  return HEAP32[50002];
 }
 
 function jsSendPinWatchEvent($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP8[$1 + 11 | 0] = jshGetEventFlagsForPin(HEAP32[$1 + 12 >> 2] & 255);
  if (HEAPU8[$1 + 11 | 0]) {
   jshPushIOWatchEvent(HEAPU8[$1 + 11 | 0])
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsSendTouchEvent($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
  touchHandlerInternal(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function jsKill() {
  jsiKill();
  jsvKill();
  jshKill();
 }
 
 function jshInit() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$0 + 12 >> 2] < 16) {
    HEAP8[HEAP32[$0 + 12 >> 2] + 394896 | 0] = 255;
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
    continue;
   }
   break;
  };
  jshInitDevices();
  HEAP8[200012] = 1;
  __stack_pointer = $0 + 16 | 0;
 }
 
 function jshReset() {
  jshResetDevices();
 }
 
 function jshKill() {
  
 }
 
 function jshIdle() {
  if (HEAP8[200012] & 1) {
   jsiOneSecondAfterStartup()
  }
  HEAP8[200012] = 0;
 }
 
 function jshBusyIdle() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = 200270;
  $1 = HEAP32[$0 + 12 >> 2];
  HEAP8[$0 + 11 | 0] = 0;
  emscripten_asm_const_int($1 | 0, $0 + 11 | 0, 0) | 0;
  __stack_pointer = $0 + 16 | 0;
 }
 
 function jshGetSerialNumber($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 32 | 0;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  HEAP32[$2 + 20 >> 2] = 0;
  HEAP32[$2 + 8 >> 2] = -559030611;
  HEAP32[$2 + 12 >> 2] = -559030611;
  $1 = HEAP32[$2 + 28 >> 2];
  $0 = HEAP32[$2 + 20 >> 2];
  HEAP8[$1 | 0] = $0;
  HEAP8[$1 + 1 | 0] = $0 >>> 8;
  HEAP8[$1 + 2 | 0] = $0 >>> 16;
  HEAP8[$1 + 3 | 0] = $0 >>> 24;
  $1 = HEAP32[$2 + 12 >> 2];
  $3 = HEAP32[$2 + 8 >> 2];
  $0 = $3;
  $3 = HEAP32[$2 + 28 >> 2];
  HEAP8[$3 + 4 | 0] = $0;
  HEAP8[$3 + 5 | 0] = $0 >>> 8;
  HEAP8[$3 + 6 | 0] = $0 >>> 16;
  HEAP8[$3 + 7 | 0] = $0 >>> 24;
  HEAP8[$3 + 8 | 0] = $1;
  HEAP8[$3 + 9 | 0] = $1 >>> 8;
  HEAP8[$3 + 10 | 0] = $1 >>> 16;
  HEAP8[$3 + 11 | 0] = $1 >>> 24;
  return 12;
 }
 
 function jshInterruptOff() {
  
 }
 
 function jshInterruptOn() {
  
 }
 
 function jshIsInInterrupt() {
  return 0;
 }
 
 function jshDelayMicroseconds($0) {
  HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 }
 
 function jshPinSetState($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP8[$2 + 14 | 0] = $1;
 }
 
 function jshPinGetState($0) {
  HEAP8[(__stack_pointer - 16 | 0) + 15 | 0] = $0;
  return 0;
 }
 
 function jshPinSetValue($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP8[$2 + 31 | 0] = $0;
  HEAP8[$2 + 30 | 0] = $1;
  if (HEAPU8[Math_imul(HEAPU8[$2 + 31 | 0], 3) + 182064 | 0] & 16) {
   HEAP8[$2 + 30 | 0] = (HEAPU8[$2 + 30 | 0] ^ -1) & 1
  }
  HEAP32[$2 + 24 >> 2] = 200288;
  $0 = HEAP32[$2 + 24 >> 2];
  HEAP8[$2 + 21 | 0] = 105;
  HEAP8[$2 + 22 | 0] = 112;
  HEAP8[$2 + 23 | 0] = 0;
  $1 = HEAPU8[$2 + 31 | 0];
  HEAP32[$2 + 4 >> 2] = HEAP8[$2 + 30 | 0] & 1;
  HEAP32[$2 >> 2] = $1;
  emscripten_asm_const_int($0 | 0, $2 + 21 | 0, $2 | 0) | 0;
  __stack_pointer = $2 + 32 | 0;
 }
 
 function jshPinGetValue($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  HEAP32[$1 + 8 >> 2] = 200313;
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 6 | 0] = 105;
  HEAP8[$1 + 7 | 0] = 0;
  HEAP32[$1 >> 2] = HEAPU8[$1 + 15 | 0];
  HEAP8[$1 + 14 | 0] = (emscripten_asm_const_int($0 | 0, $1 + 6 | 0, $1 | 0) | 0) != 0;
  if (HEAPU8[Math_imul(HEAPU8[$1 + 15 | 0], 3) + 182064 | 0] & 16) {
   HEAP8[$1 + 14 | 0] = (HEAPU8[$1 + 14 | 0] ^ -1) & 1
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP8[$1 + 14 | 0] & 1;
 }
 
 function jshIsDeviceInitialised($0) {
  HEAP8[(__stack_pointer - 16 | 0) + 15 | 0] = $0;
  return 1;
 }
 
 function jshIsUSBSERIALConnected() {
  return 1;
 }
 
 function jshGetTimeFromMilliseconds($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAPF64[$1 + 8 >> 3] = $0;
  $0 = HEAPF64[$1 + 8 >> 3] * 1.0e3;
  if (Math_abs($0) < 9223372036854775808.0) {
   if (Math_abs($0) >= 1.0) {
    $1 = ~~($0 > 0.0 ? Math_min(Math_floor($0 * 2.3283064365386963e-10), 4294967295.0) : Math_ceil(($0 - +(~~$0 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0
   } else {
    $1 = 0
   }
   $2 = ~~$0 >>> 0;
  } else {
   $1 = -2147483648
  }
  i64toi32_i32$HIGH_BITS = $1;
  return $2;
 }
 
 function jshGetMillisecondsFromTime($0, $1) {
  var $2 = 0, $3 = 0.0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 12 >> 2] = $1;
  $3 = +HEAPU32[$2 + 8 >> 2];
  $2 = HEAP32[$2 + 12 >> 2];
  return ($3 + +($2 | 0) * 4294967296.0) / 1.0e3;
 }
 
 function jshGetSystemTime() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = 200342;
  $1 = HEAP32[$0 + 12 >> 2];
  HEAP8[$0 + 11 | 0] = 0;
  $1 = jshGetTimeFromMilliseconds(+emscripten_asm_const_double($1 | 0, $0 + 11 | 0, 0));
  __stack_pointer = $0 + 16 | 0;
  return $1;
 }
 
 function jshSetSystemTime($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 12 >> 2] = $1;
 }
 
 function jshPinAnalog($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP8[$1 + 15 | 0] = $0;
  HEAPF64[$1 >> 3] = 0;
  return +HEAPF64[$1 >> 3];
 }
 
 function jshPinAnalogOutput($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  HEAP8[$4 + 31 | 0] = $0;
  HEAPF64[$4 + 16 >> 3] = $1;
  HEAPF64[$4 + 8 >> 3] = $2;
  HEAP32[$4 + 4 >> 2] = $3;
  return 0;
 }
 
 function jshCanWatch($0) {
  HEAP8[(__stack_pointer - 16 | 0) + 15 | 0] = $0;
  return 1;
 }
 
 function jshGetEventFlagsForPin($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP8[$1 + 14 | 0] = $0;
  HEAP32[$1 + 8 >> 2] = 0;
  block : {
   while (1) {
    if (HEAP32[$1 + 8 >> 2] < 16) {
     if (HEAPU8[HEAP32[$1 + 8 >> 2] + 394896 | 0] == HEAPU8[$1 + 14 | 0]) {
      HEAP8[$1 + 15 | 0] = HEAP32[$1 + 8 >> 2] + 1;
      break block;
     } else {
      HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
      continue;
     }
    }
    break;
   };
   HEAP8[$1 + 15 | 0] = 0;
  }
  return HEAPU8[$1 + 15 | 0];
 }
 
 function jshPinWatch($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP8[$3 + 14 | 0] = $0;
  HEAP8[$3 + 13 | 0] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  block : {
   if (HEAP8[$3 + 13 | 0] & 1) {
    HEAP32[$3 + 4 >> 2] = 0;
    while (1) {
     if (HEAP32[$3 + 4 >> 2] < 16) {
      if (HEAPU8[HEAP32[$3 + 4 >> 2] + 394896 | 0] == 255) {
       HEAP8[HEAP32[$3 + 4 >> 2] + 394896 | 0] = HEAPU8[$3 + 14 | 0];
       HEAP8[$3 + 15 | 0] = HEAP32[$3 + 4 >> 2] + 1;
       break block;
      } else {
       HEAP32[$3 >> 2] = 0;
       while (1) {
        if (HEAP32[$3 >> 2] < 16) {
         if (HEAPU8[HEAP32[$3 >> 2] + 394896 | 0] == HEAPU8[$3 + 14 | 0]) {
          HEAP8[HEAP32[$3 >> 2] + 394896 | 0] = 255
         }
         HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
         continue;
        }
        break;
       };
       HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
       continue;
      }
     }
     break;
    };
   }
   HEAP8[$3 + 15 | 0] = 0;
  }
  return HEAPU8[$3 + 15 | 0];
 }
 
 function jshGetWatchedPinState($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  $0 = jshPinGetValue(HEAPU8[(HEAPU8[$1 + 15 | 0] - 1 | 0) + 394896 | 0]);
  __stack_pointer = $1 + 16 | 0;
  return $0 & 1;
 }
 
 function jshIsEventForPin($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP8[$2 + 14 | 0] = $1;
  $0 = HEAPU8[$2 + 15 | 0] & 31;
  $1 = jshGetEventFlagsForPin(HEAPU8[$2 + 14 | 0]) & 255;
  __stack_pointer = $2 + 16 | 0;
  return ($0 | 0) == ($1 | 0);
 }
 
 function jshUSARTSetup($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
 }
 
 function jshUSARTKick($0) {
  HEAP8[(__stack_pointer - 16 | 0) + 15 | 0] = $0;
 }
 
 function jshSPISetup($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
 }
 
 function jshSPISend($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP8[$2 + 11 | 0] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function jshSPISend16($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
 }
 
 function jshSPISet16($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP8[$2 + 14 | 0] = $1;
 }
 
 function jshSPISetReceive($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP8[$2 + 14 | 0] = $1;
 }
 
 function jshSPIWait($0) {
  HEAP8[(__stack_pointer - 16 | 0) + 15 | 0] = $0;
 }
 
 function jshI2CSetup($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
 }
 
 function jshI2CWrite($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP8[$5 + 15 | 0] = $0;
  HEAP8[$5 + 14 | 0] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 4 >> 2] = $3;
  HEAP8[$5 + 3 | 0] = $4;
 }
 
 function jshI2CRead($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP8[$5 + 15 | 0] = $0;
  HEAP8[$5 + 14 | 0] = $1;
  HEAP32[$5 + 8 >> 2] = $2;
  HEAP32[$5 + 4 >> 2] = $3;
  HEAP8[$5 + 3 | 0] = $4;
 }
 
 function jshSleep($0, $1) {
  var $2 = 0, $3 = 0.0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 12 >> 2] = $1;
  HEAPF64[$2 >> 3] = jshGetMillisecondsFromTime(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2]);
  if (HEAPF64[$2 >> 3] > 2147483647.0) {
   HEAPF64[$2 >> 3] = 2147483647
  }
  $3 = HEAPF64[$2 >> 3];
  if (Math_abs($3) < 2147483647.0) {
   $0 = ~~$3
  } else {
   $0 = -2147483648
  }
  HEAP32[50002] = $0;
  __stack_pointer = $2 + 16 | 0;
  return 0;
 }
 
 function jshUtilTimerDisable() {
  
 }
 
 function jshUtilTimerStart($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 12 >> 2] = $1;
 }
 
 function jshEnableWatchDog($0) {
  HEAPF64[(__stack_pointer - 16 | 0) + 8 >> 3] = $0;
 }
 
 function jshKickWatchDog() {
  
 }
 
 function jshReadTemperature() {
  return NaN;
 }
 
 function jshReadVRef() {
  return NaN;
 }
 
 function jshGetRandomNumber() {
  return rand() | 0;
 }
 
 function jshFlashGetPage($0, $1, $2) {
  var $3 = 0, $4 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 8 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 >> 2] = $2;
  block : {
   if (HEAPU32[$3 + 8 >> 2] < 134217728) {
    HEAP8[$3 + 15 | 0] = 0;
    break block;
   }
   $1 = HEAP32[$3 + 4 >> 2];
   $4 = +(HEAP32[$3 + 8 >> 2] >>> 12 >>> 0) * 4096.0;
   if ($4 < 4294967295.0 & $4 >= 0.0) {
    $0 = ~~$4 >>> 0
   } else {
    $0 = 0
   }
   HEAP32[$1 >> 2] = $0;
   HEAP32[HEAP32[$3 >> 2] >> 2] = 4096;
   HEAP8[$3 + 15 | 0] = 1;
  }
  return HEAP8[$3 + 15 | 0] & 1;
 }
 
 function jshFlashGetFree() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = jsvNewEmptyArray();
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function jshFlashErasePage($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 4144 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 4140 >> 2] = $0;
  if (jshFlashGetPage(HEAP32[$1 + 4140 >> 2], $1 + 4136 | 0, $1 + 4132 | 0) & 1) {
   wasm2js_memory_fill($1 + 32 | 0, 255, 4096);
   HEAP32[$1 + 28 >> 2] = 200365;
   $0 = HEAP32[$1 + 28 >> 2];
   HEAP8[$1 + 24 | 0] = 105;
   HEAP8[$1 + 25 | 0] = 112;
   HEAP8[$1 + 26 | 0] = 105;
   HEAP8[$1 + 27 | 0] = 0;
   $2 = HEAP32[$1 + 4136 >> 2];
   HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 4132 >> 2];
   HEAP32[$1 + 4 >> 2] = $1 + 32;
   HEAP32[$1 >> 2] = $2 + -134217728;
   emscripten_asm_const_int($0 | 0, $1 + 24 | 0, $1 | 0) | 0;
  }
  __stack_pointer = $1 + 4144 | 0;
 }
 
 function jshFlashRead($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  block : {
   if (HEAPU32[$3 + 24 >> 2] < 134217728) {
    break block
   }
   HEAP32[$3 + 16 >> 2] = 0;
   while (1) {
    if (HEAPU32[$3 + 16 >> 2] >= HEAPU32[$3 + 20 >> 2]) {
     break block
    }
    HEAP32[$3 + 12 >> 2] = 200396;
    $0 = HEAP32[$3 + 12 >> 2];
    HEAP8[$3 + 10 | 0] = 105;
    HEAP8[$3 + 11 | 0] = 0;
    HEAP32[$3 >> 2] = (HEAP32[$3 + 24 >> 2] + HEAP32[$3 + 16 >> 2] | 0) + -134217728;
    $0 = emscripten_asm_const_int($0 | 0, $3 + 10 | 0, $3 | 0) | 0;
    HEAP8[HEAP32[$3 + 28 >> 2] + HEAP32[$3 + 16 >> 2] | 0] = $0;
    HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] + 1;
    continue;
   };
  }
  __stack_pointer = $3 + 32 | 0;
 }
 
 function jshFlashWrite($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  if (HEAPU32[$3 + 24 >> 2] >= 134217728) {
   HEAP32[$3 + 16 >> 2] = 200423;
   $0 = HEAP32[$3 + 16 >> 2];
   HEAP8[$3 + 12 | 0] = 105;
   HEAP8[$3 + 13 | 0] = 112;
   HEAP8[$3 + 14 | 0] = 105;
   HEAP8[$3 + 15 | 0] = 0;
   $1 = HEAP32[$3 + 24 >> 2];
   $2 = HEAP32[$3 + 28 >> 2];
   HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 20 >> 2];
   HEAP32[$3 + 4 >> 2] = $2;
   HEAP32[$3 >> 2] = $1 + -134217728;
   emscripten_asm_const_int($0 | 0, $3 + 12 | 0, $3 | 0) | 0;
  }
  __stack_pointer = $3 + 32 | 0;
 }
 
 function jshFlashGetMemMapAddress($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block1 : {
   if (!(HEAPU32[$1 + 8 >> 2] < 134217728 | HEAPU32[$1 + 8 >> 2] >= 142606336)) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block1;
   }
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2];
  }
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jshSetSystemClock($0) {
  HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
  return 0;
 }
 
 function jswrap_banglejs_pwrBacklight($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  jshPinOutput(8, HEAP8[$1 + 15 | 0] & 1);
  lcdMemLCD_extcominBacklight(HEAP8[$1 + 15 | 0] & 1);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function graphicsInternalFlip() {
  lcdMemLCD_flip(370724);
 }
 
 function lcd_flip($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP8[$2 + 11 | 0] = $1;
  if (HEAP8[$2 + 11 | 0] & 1) {
   HEAP8[370764] = 0;
   HEAP8[370765] = 0;
   HEAP8[370766] = 0;
   HEAP8[370767] = 0;
   HEAP8[370768] = 175;
   HEAP8[370769] = 0;
   HEAP8[370770] = 175;
   HEAP8[370771] = 0;
  }
  graphicsInternalFlip();
  __stack_pointer = $2 + 16 | 0;
 }
 
 function wakeUpBangle($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP8[$1 + 11 | 0] = 0;
  if (!(!HEAP32[98731] | HEAP32[98729] & 65536)) {
   HEAP8[$1 + 11 | 0] = 1;
   HEAP32[98732] = HEAP32[98732] | 2;
  }
  if (!(!HEAP32[98733] | HEAP32[98729] & 131072)) {
   HEAP8[$1 + 11 | 0] = 1;
   HEAP32[98732] = HEAP32[98732] | 8;
  }
  if (!(!HEAP32[98734] | !(HEAP32[98729] & 262144))) {
   HEAP8[$1 + 11 | 0] = 1;
   HEAP32[98730] = HEAP32[$1 + 12 >> 2];
   HEAP32[98732] = HEAP32[98732] | 64;
  }
  if (HEAP8[$1 + 11 | 0] & 1) {
   HEAP16[197470] = 0;
   jshHadEvent();
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP8[$1 + 11 | 0] & 1;
 }
 
 function jswrap_banglejs_setPollInterval_internal($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP16[$1 + 14 >> 1] = $0;
  HEAP16[197471] = HEAPU16[$1 + 14 >> 1];
 }
 
 function jswrap_banglejs_kickPollWatchdog() {
  HEAP16[197472] = 0;
 }
 
 function btnHandlerCommon($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP8[$3 + 11 | 0] = $1;
  HEAP8[$3 + 10 | 0] = $2;
  block4 : {
   if (HEAP32[98731] | HEAP32[98733] | HEAP32[98734]) {
    block3 : {
     if (!((HEAP32[$3 + 12 >> 2] == 1 ? HEAP32[98729] & 2 : 0) | (HEAP32[$3 + 12 >> 2] == 2 ? HEAP32[98729] & 4 : 0))) {
      if (!(HEAP32[98729] & 8) | HEAP32[$3 + 12 >> 2] != 3) {
       break block3
      }
     }
     if (HEAP8[$3 + 11 | 0] & 1) {
      HEAP8[$3 + 9 | 0] = wakeUpBangle(135076) & 1;
      if (HEAP8[$3 + 9 | 0] & 1) {
       HEAP16[197470] = 0;
       HEAP8[394946] = HEAP32[$3 + 12 >> 2];
       $4 = jshGetSystemTime();
       $2 = i64toi32_i32$HIGH_BITS;
       $0 = $2;
       $2 = jshGetTimeFromMilliseconds(100.0);
       $1 = $2;
       $4 = $2 + $4 | 0;
       $2 = i64toi32_i32$HIGH_BITS;
       $0 = $2 + $0 | 0;
       HEAP32[98738] = $4;
       $0 = $4 >>> 0 < $1 >>> 0 ? $0 + 1 | 0 : $0;
       HEAP32[98739] = $0;
       break block4;
      }
     }
    }
   }
   HEAP8[$3 + 8 | 0] = 1;
   block5 : {
    if (HEAP32[98729] & 262144) {
     HEAP8[$3 + 8 | 0] = 0;
     break block5;
    }
    HEAP16[197470] = 0;
   }
   if (HEAP32[$3 + 12 >> 2] == 1) {
    HEAP16[197480] = 0
   }
   $0 = jshGetSystemTime();
   HEAP32[$3 >> 2] = $0;
   HEAP32[$3 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
   if (HEAP32[$3 + 12 >> 2] == HEAP8[394946] << 24 >> 24) {
    $0 = HEAP32[$3 + 4 >> 2];
    $2 = $0;
    $0 = HEAP32[98738];
    $1 = $0;
    $0 = HEAP32[98739];
    block7 : {
     if (!(HEAP8[$3 + 11 | 0] & 1 & (($0 | 0) <= ($2 | 0) & $1 >>> 0 <= HEAPU32[$3 >> 2] | ($0 | 0) < ($2 | 0)))) {
      $1 = HEAP32[$3 >> 2];
      $2 = HEAP32[$3 + 4 >> 2];
      $0 = jshGetTimeFromMilliseconds(100.0);
      $4 = i64toi32_i32$HIGH_BITS + $2 | 0;
      $2 = $1 + $0 | 0;
      $4 = $2 >>> 0 < $0 >>> 0 ? $4 + 1 | 0 : $4;
      HEAP32[98738] = $2;
      HEAP32[98739] = $4;
      HEAP8[$3 + 10 | 0] = HEAPU8[$3 + 10 | 0] | 64;
      $1 = 394952;
      break block7;
     }
     HEAP8[394946] = 0;
     HEAP32[98738] = 0;
     HEAP32[98739] = 0;
     $1 = 394952;
    }
   }
   if (!(HEAP8[$3 + 8 | 0] & 1)) {
    break block4
   }
   $4 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   jshPushIOEvent((HEAPU8[$3 + 10 | 0] | (HEAP8[$3 + 11 | 0] & 1 ? 32 : 0)) & 255, $4, $1);
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function btn1Handler($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP8[$2 + 14 | 0] = $1;
  if (!(HEAP32[98729] & 4194304)) {
   btnHandlerCommon(1, HEAP8[$2 + 15 | 0] & 1, HEAPU8[$2 + 14 | 0])
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function touchSwipeRotate($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  if ((HEAPU8[370732] | HEAPU8[370733] << 8 | (HEAPU8[370734] << 16 | HEAPU8[370735] << 24)) & 32) {
   block : {
    if (HEAP32[$1 + 12 >> 2] == 1) {
     HEAP32[$1 + 12 >> 2] = 2;
     break block;
    }
    if (HEAP32[$1 + 12 >> 2] == 2) {
     HEAP32[$1 + 12 >> 2] = 1
    }
   }
  }
  if ((HEAPU8[370732] | HEAPU8[370733] << 8 | (HEAPU8[370734] << 16 | HEAPU8[370735] << 24)) & 64) {
   block1 : {
    if (HEAP32[$1 + 12 >> 2] == 3) {
     HEAP32[$1 + 12 >> 2] = 4;
     break block1;
    }
    if (HEAP32[$1 + 12 >> 2] == 4) {
     HEAP32[$1 + 12 >> 2] = 3
    }
   }
  }
  if ((HEAPU8[370732] | HEAPU8[370733] << 8 | (HEAPU8[370734] << 16 | HEAPU8[370735] << 24)) & 16) {
   block2 : {
    if (HEAP32[$1 + 12 >> 2] == 1) {
     HEAP32[$1 + 12 >> 2] = 3;
     break block2;
    }
    block3 : {
     if (HEAP32[$1 + 12 >> 2] == 2) {
      HEAP32[$1 + 12 >> 2] = 4;
      break block3;
     }
     block4 : {
      if (HEAP32[$1 + 12 >> 2] == 3) {
       HEAP32[$1 + 12 >> 2] = 1;
       break block4;
      }
      if (HEAP32[$1 + 12 >> 2] == 4) {
       HEAP32[$1 + 12 >> 2] = 2
      }
     }
    }
   }
  }
  return HEAP32[$1 + 12 >> 2];
 }
 
 function touchHandlerInternal($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  if (!(HEAP32[98729] & 262144)) {
   deviceToGraphicsCoordinates(370724, $4 + 28 | 0, $4 + 24 | 0);
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 28 >> 2] - (HEAP16[197481] << 16 >> 16);
   HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 24 >> 2] - (HEAP16[197482] << 16 >> 16);
   HEAP16[197481] = HEAP32[$4 + 28 >> 2];
   HEAP16[197482] = HEAP32[$4 + 24 >> 2];
   HEAP8[394966] = HEAP32[$4 + 20 >> 2] != 0;
   HEAP32[$4 + 4 >> 2] = HEAP32[98732];
   if (HEAP32[$4 + 16 >> 2] != HEAP32[98742]) {
    block5 : {
     block7 : {
      switch (HEAP32[$4 + 16 >> 2] - 1 | 0) {
      case 0:
       HEAP32[98743] = touchSwipeRotate(4);
       HEAP32[98732] = HEAP32[98732] | 524288;
       break block5;
      case 1:
       HEAP32[98743] = touchSwipeRotate(3);
       HEAP32[98732] = HEAP32[98732] | 524288;
       break block5;
      case 2:
       HEAP32[98743] = touchSwipeRotate(1);
       HEAP32[98732] = HEAP32[98732] | 524288;
       break block5;
      case 3:
       HEAP32[98743] = touchSwipeRotate(2);
       HEAP32[98732] = HEAP32[98732] | 524288;
       break block5;
      case 4:
       block8 : {
        if (HEAP16[197481] << 16 >> 16 < 80) {
         HEAP32[98732] = HEAP32[98732] | 1048576;
         break block8;
        }
        HEAP32[98732] = HEAP32[98732] | 2097152;
       }
       HEAP8[394976] = 0;
       break block5;
      case 10:
       block9 : {
        if (HEAP16[197481] << 16 >> 16 < 80) {
         HEAP32[98732] = HEAP32[98732] | 1048576;
         break block9;
        }
        HEAP32[98732] = HEAP32[98732] | 2097152;
       }
       HEAP8[394976] = 1;
       break block5;
      case 11:
       break block7;
      default:
       break block5;
      };
     }
     block10 : {
      if (HEAP16[197481] << 16 >> 16 < 80) {
       HEAP32[98732] = HEAP32[98732] | 1048576;
       break block10;
      }
      HEAP32[98732] = HEAP32[98732] | 2097152;
     }
     HEAP8[394976] = 2;
    }
   }
   if (!(!((HEAP8[394966] & 1) != (HEAP8[394977] & 1) | HEAPU16[197489] != HEAPU16[197481]) & HEAPU16[197490] == HEAPU16[197482])) {
    HEAP32[98732] = HEAP32[98732] | 4194304
   }
   if (HEAP32[$4 + 4 >> 2] != HEAP32[98732]) {
    jshHadEvent();
    HEAP16[197470] = 0;
   }
   HEAP32[98742] = HEAP32[$4 + 16 >> 2];
  }
  __stack_pointer = $4 + 32 | 0;
 }
 
 function jswrap_banglejs_setLCDPowerBacklight($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  if ((HEAP8[$1 + 15 | 0] & 1) != ((HEAP32[98729] & 131072) != 0 | 0)) {
   HEAP32[$1 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[92130], 137685);
   if (HEAP32[$1 + 8 >> 2]) {
    HEAP32[$1 + 4 >> 2] = jsvNewFromBool(HEAP8[$1 + 15 | 0] & 1);
    jsiQueueObjectCallbacks(HEAP32[$1 + 8 >> 2], 124901, $1 + 4 | 0, 1);
    jsvUnLock(HEAP32[$1 + 4 >> 2]);
   }
   jsvUnLock(HEAP32[$1 + 8 >> 2]);
  }
  block : {
   if (HEAP8[$1 + 15 | 0] & 1) {
    if (HEAP32[98733] > 0) {
     HEAP16[197470] = 0
    }
    HEAP32[98729] = HEAP32[98729] | 131072;
    break block;
   }
   if (!(HEAP32[98734] <= 0 | HEAP32[98734] > HEAP32[98733])) {
    _jswrap_banglejs_setLocked(1, 124918)
   }
   HEAP32[98729] = HEAP32[98729] & -131073;
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function _jswrap_banglejs_setLocked($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP8[$2 + 31 | 0] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  if ((HEAP32[98729] & 262144) != (HEAP8[$2 + 31 | 0] & 1)) {
   HEAP32[$2 + 20 >> 2] = jsvObjectGetChildIfExists(HEAP32[92130], 137685);
   if (HEAP32[$2 + 20 >> 2]) {
    HEAP32[$2 + 12 >> 2] = jsvNewFromBool(HEAP8[$2 + 31 | 0] & 1);
    $1 = $2 + 12 | 0;
    block : {
     if (HEAP32[$2 + 24 >> 2]) {
      $0 = jsvNewFromString(HEAP32[$2 + 24 >> 2]);
      break block;
     }
     $0 = 0;
    }
    HEAP32[$1 + 4 >> 2] = $0;
    jsiQueueObjectCallbacks(HEAP32[$2 + 20 >> 2], 135893, $2 + 12 | 0, 2);
    jsvUnLockMany(2, $2 + 12 | 0);
   }
   jsvUnLock(HEAP32[$2 + 20 >> 2]);
  }
  block1 : {
   if (HEAP8[$2 + 31 | 0] & 1) {
    HEAP32[98729] = HEAP32[98729] | 262144;
    break block1;
   }
   HEAP16[197470] = 0;
   HEAP32[98729] = HEAP32[98729] & -262145;
  }
  __stack_pointer = $2 + 32 | 0;
 }
 
 function jswrap_banglejs_setLCDPower($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  jswrap_banglejs_setLCDPowerController(HEAP8[$1 + 15 | 0] & 1);
  jswrap_banglejs_setLCDPowerBacklight(HEAP8[$1 + 15 | 0] & 1);
  if ((HEAP8[$1 + 15 | 0] & 1) != ((HEAP32[98729] & 65536) != 0 | 0)) {
   HEAP32[$1 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[92130], 137685);
   if (HEAP32[$1 + 8 >> 2]) {
    HEAP32[$1 + 4 >> 2] = jsvNewFromBool(HEAP8[$1 + 15 | 0] & 1);
    jsiQueueObjectCallbacks(HEAP32[$1 + 8 >> 2], 127972, $1 + 4 | 0, 1);
    jsvUnLock(HEAP32[$1 + 4 >> 2]);
   }
   jsvUnLock(HEAP32[$1 + 8 >> 2]);
  }
  block1 : {
   if (HEAP8[$1 + 15 | 0] & 1) {
    if (!(HEAP32[98731] <= 0 & HEAP32[98733] <= 0)) {
     HEAP16[197470] = 0
    }
    HEAP32[98729] = HEAP32[98729] | 65536;
    break block1;
   }
   HEAP32[98729] = HEAP32[98729] & -65537;
   if (!(HEAP32[98734] <= 0 | HEAP32[98734] > HEAP32[98731])) {
    _jswrap_banglejs_setLocked(1, 139045)
   }
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_banglejs_setLCDPowerController($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  jshPinOutput(6, 0);
  jshPinOutput(7, HEAP8[$1 + 15 | 0] & 1);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_banglejs_setLCDBrightness($0) {
  $0 = +$0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAPF64[$1 + 8 >> 3] = $0;
  $0 = HEAPF64[$1 + 8 >> 3] * 256.0 + .5;
  if (Math_abs($0) < 2147483647.0) {
   $2 = ~~$0
  } else {
   $2 = -2147483648
  }
  HEAP32[$1 + 4 >> 2] = $2;
  if (HEAP32[$1 + 4 >> 2] < 0) {
   HEAP32[$1 + 4 >> 2] = 0
  }
  if (HEAP32[$1 + 4 >> 2] > 255) {
   HEAP32[$1 + 4 >> 2] = 255
  }
  HEAP8[394982] = HEAP32[$1 + 4 >> 2];
  if (HEAP32[98729] & 131072) {
   jswrap_banglejs_setLCDPowerBacklight(1)
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_banglejs_setLCDMode($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsExceptionHere(1, 138038, 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_banglejs_getLCDMode() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 8 >> 2] = 0;
  block : {
   if (!HEAP32[$0 + 8 >> 2]) {
    HEAP32[$0 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$0 + 12 >> 2] = jsvNewFromString(HEAP32[$0 + 8 >> 2]);
  }
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function jswrap_banglejs_setLCDOffset($0) {
  $0 = $0 | 0;
  HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 }
 
 function jswrap_banglejs_setLCDOverlay($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 44 >> 2] = $0;
  HEAP32[$4 + 40 >> 2] = $1;
  HEAP32[$4 + 36 >> 2] = $2;
  HEAP32[$4 + 32 >> 2] = $3;
  HEAP8[$4 + 31 | 0] = jsvIsUndefined(HEAP32[$4 + 44 >> 2]) & 1;
  HEAP32[$4 + 24 >> 2] = jsvGetInteger(HEAP32[$4 + 40 >> 2]);
  if (HEAP8[$4 + 31 | 0] & 1) {
   HEAP32[$4 + 32 >> 2] = HEAP32[$4 + 40 >> 2]
  }
  HEAP32[$4 + 20 >> 2] = 0;
  if (jsvIsObject(HEAP32[$4 + 32 >> 2]) & 1) {
   HEAP32[$4 + 20 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 32 >> 2], 138517)
  }
  HEAP32[$4 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[92131], 139326);
  HEAP8[$4 + 15 | 0] = (jsvIsEqual(HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]) ^ -1) & 1;
  jsvUnLock(HEAP32[$4 + 16 >> 2]);
  block1 : {
   if (!(!(HEAP8[$4 + 15 | 0] & 1) | (!(HEAP8[$4 + 31 | 0] & 1) | !HEAP32[$4 + 20 >> 2]))) {
    jsvUnLock(HEAP32[$4 + 20 >> 2]);
    break block1;
   }
   if (HEAP8[$4 + 15 | 0] & 1) {
    HEAP32[$4 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[92131], 140289);
    if (HEAP32[$4 + 8 >> 2]) {
     jsiQueueEvents(0, HEAP32[$4 + 8 >> 2], 0, 0);
     jsvUnLock(HEAP32[$4 + 8 >> 2]);
    }
   }
   block3 : {
    if (HEAP32[$4 + 44 >> 2]) {
     jsvObjectSetOrRemoveChild(HEAP32[92131], 139326, HEAP32[$4 + 20 >> 2]);
     block2 : {
      if (jsvIsObject(HEAP32[$4 + 32 >> 2]) & 1) {
       $0 = jsvObjectGetChildIfExists(HEAP32[$4 + 32 >> 2], 137042);
       break block2;
      }
      $0 = 0;
     }
     HEAP32[$4 + 4 >> 2] = $0;
     jsvObjectSetOrRemoveChild(HEAP32[92131], 140289, HEAP32[$4 + 4 >> 2]);
     jsvUnLock(HEAP32[$4 + 4 >> 2]);
     break block3;
    }
    jsvObjectRemoveChild(HEAP32[92131], 139326);
    jsvObjectRemoveChild(HEAP32[92131], 140289);
   }
   jsvUnLock(HEAP32[$4 + 20 >> 2]);
   lcdMemLCD_setOverlay(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 36 >> 2]);
   HEAP8[370764] = 0;
   HEAP8[370765] = 0;
   HEAP8[370766] = 0;
   HEAP8[370767] = 0;
   HEAP8[370768] = 175;
   HEAP8[370769] = 0;
   HEAP8[370770] = 175;
   HEAP8[370771] = 0;
  }
  __stack_pointer = $4 + 48 | 0;
 }
 
 function jswrap_banglejs_setLCDTimeout($0) {
  $0 = +$0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAPF64[$1 + 24 >> 3] = $0;
  __DOUBLE_BITS_1254(HEAPF64[$1 + 24 >> 3]);
  $2 = i64toi32_i32$HIGH_BITS & 2147483647;
  block : {
   if (($2 | 0) == 2146435072 | $2 >>> 0 > 2146435072) {
    HEAPF64[$1 + 24 >> 3] = 0;
    break block;
   }
   if (HEAPF64[$1 + 24 >> 3] < 0.0) {
    HEAPF64[$1 + 24 >> 3] = 0
   }
  }
  $0 = HEAPF64[$1 + 24 >> 3] * 1.0e3;
  if (Math_abs($0) < 2147483647.0) {
   $2 = ~~$0
  } else {
   $2 = -2147483648
  }
  HEAP32[98733] = $2;
  $0 = HEAPF64[$1 + 24 >> 3] * 1.0e3;
  if (Math_abs($0) < 2147483647.0) {
   $2 = ~~$0
  } else {
   $2 = -2147483648
  }
  HEAP32[98734] = $2;
  __stack_pointer = $1 + 32 | 0;
 }
 
 function __DOUBLE_BITS_1254($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAPF64[$1 + 8 >> 3] = $0;
  HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  return HEAP32[$1 >> 2];
 }
 
 function jswrap_banglejs_setPollInterval($0) {
  $0 = +$0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAPF64[$1 + 24 >> 3] = $0;
  __DOUBLE_BITS_1254(HEAPF64[$1 + 24 >> 3]);
  block2 : {
   block1 : {
    $2 = i64toi32_i32$HIGH_BITS & 2147483647;
    if (!(($2 | 0) == 2146435072 | $2 >>> 0 > 2146435072 | HEAPF64[$1 + 24 >> 3] < 10.0)) {
     if (!(HEAPF64[$1 + 24 >> 3] > 4.0e3)) {
      break block1
     }
    }
    jsExceptionHere(1, 135780, 0);
    break block2;
   }
   HEAP32[98729] = HEAP32[98729] & -2049;
   $0 = HEAPF64[$1 + 24 >> 3];
   if ($0 < 4294967295.0 & $0 >= 0.0) {
    $2 = ~~$0 >>> 0
   } else {
    $2 = 0
   }
   jswrap_banglejs_setPollInterval_internal($2 & 65535);
  }
  __stack_pointer = $1 + 32 | 0;
 }
 
 function _jswrap_banglejs_setOptions($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 416 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 408 >> 2] = $0;
  HEAP8[$2 + 407 | 0] = $1;
  HEAP8[$2 + 406 | 0] = (HEAP32[98729] & 2) != 0;
  HEAP8[$2 + 405 | 0] = (HEAP32[98729] & 4) != 0;
  HEAP8[$2 + 404 | 0] = (HEAP32[98729] & 8) != 0;
  HEAP8[$2 + 403 | 0] = HEAP32[98729] & 1;
  HEAP8[$2 + 402 | 0] = (HEAP32[98729] & 16) != 0;
  HEAP8[$2 + 401 | 0] = (HEAP32[98729] & 32) != 0;
  HEAP8[$2 + 400 | 0] = (HEAP32[98729] & 64) != 0;
  HEAP8[$2 + 399 | 0] = (HEAP32[98729] & 2048) != 0;
  HEAP8[$2 + 398 | 0] = (HEAP32[98729] & 2097152) != 0;
  HEAP8[$2 + 397 | 0] = (HEAP32[98729] & 4194304) != 0;
  HEAP32[$2 + 384 >> 2] = Math_imul(HEAPU16[100009], HEAPU16[100009]);
  HEAP32[$2 + 380 >> 2] = Math_imul(HEAPU16[100010], HEAPU16[100010]);
  HEAP32[$2 + 376 >> 2] = HEAP16[197456] << 16 >> 16;
  HEAP32[$2 + 372 >> 2] = HEAP16[197457] << 16 >> 16;
  HEAP32[$2 + 368 >> 2] = HEAP16[100007] << 16 >> 16;
  HEAP32[$2 + 364 >> 2] = HEAP16[100008] << 16 >> 16;
  HEAP32[$2 + 360 >> 2] = lcdMemLCD_getRowPtr(0);
  HEAP8[$2 + 359 | 0] = (HEAP32[98729] & 1048576) != 0;
  HEAP32[$2 >> 2] = 136181;
  HEAP16[$2 + 4 >> 1] = 10;
  HEAP16[$2 + 6 >> 1] = 0;
  HEAP32[$2 + 8 >> 2] = $2 + 384;
  HEAP32[$2 + 12 >> 2] = 136200;
  HEAP16[$2 + 16 >> 1] = 10;
  HEAP16[$2 + 18 >> 1] = 0;
  HEAP32[$2 + 20 >> 2] = $2 + 380;
  HEAP32[$2 + 24 >> 2] = 124603;
  HEAP16[$2 + 28 >> 1] = 10;
  HEAP16[$2 + 30 >> 1] = 0;
  HEAP32[$2 + 32 >> 2] = 200024;
  HEAP32[$2 + 36 >> 2] = 136137;
  HEAP16[$2 + 40 >> 1] = 10;
  HEAP16[$2 + 42 >> 1] = 0;
  HEAP32[$2 + 44 >> 2] = 200028;
  HEAP32[$2 + 48 >> 2] = 124084;
  HEAP16[$2 + 52 >> 1] = 10;
  HEAP16[$2 + 54 >> 1] = 0;
  HEAP32[$2 + 56 >> 2] = $2 + 392;
  HEAP32[$2 + 60 >> 2] = 136248;
  HEAP16[$2 + 64 >> 1] = 10;
  HEAP16[$2 + 66 >> 1] = 0;
  HEAP32[$2 + 68 >> 2] = $2 + 388;
  HEAP32[$2 + 72 >> 2] = 138429;
  HEAP16[$2 + 76 >> 1] = 10;
  HEAP16[$2 + 78 >> 1] = 0;
  HEAP32[$2 + 80 >> 2] = 200032;
  HEAP32[$2 + 84 >> 2] = 124457;
  HEAP16[$2 + 88 >> 1] = 10;
  HEAP16[$2 + 90 >> 1] = 0;
  HEAP32[$2 + 92 >> 2] = 200040;
  HEAP32[$2 + 96 >> 2] = 140556;
  HEAP16[$2 + 100 >> 1] = 10;
  HEAP16[$2 + 102 >> 1] = 0;
  HEAP32[$2 + 104 >> 2] = 200036;
  HEAP32[$2 + 108 >> 2] = 142174;
  HEAP16[$2 + 112 >> 1] = 12;
  HEAP16[$2 + 114 >> 1] = 0;
  HEAP32[$2 + 116 >> 2] = $2 + 406;
  HEAP32[$2 + 120 >> 2] = 142099;
  HEAP16[$2 + 124 >> 1] = 12;
  HEAP16[$2 + 126 >> 1] = 0;
  HEAP32[$2 + 128 >> 2] = $2 + 405;
  HEAP32[$2 + 132 >> 2] = 142044;
  HEAP16[$2 + 136 >> 1] = 12;
  HEAP16[$2 + 138 >> 1] = 0;
  HEAP32[$2 + 140 >> 2] = $2 + 404;
  HEAP32[$2 + 144 >> 2] = 128821;
  HEAP16[$2 + 148 >> 1] = 12;
  HEAP16[$2 + 150 >> 1] = 0;
  HEAP32[$2 + 152 >> 2] = $2 + 403;
  HEAP32[$2 + 156 >> 2] = 136292;
  HEAP16[$2 + 160 >> 1] = 12;
  HEAP16[$2 + 162 >> 1] = 0;
  HEAP32[$2 + 164 >> 2] = $2 + 402;
  HEAP32[$2 + 168 >> 2] = 128795;
  HEAP16[$2 + 172 >> 1] = 12;
  HEAP16[$2 + 174 >> 1] = 0;
  HEAP32[$2 + 176 >> 2] = $2 + 401;
  HEAP32[$2 + 180 >> 2] = 124553;
  HEAP16[$2 + 184 >> 1] = 12;
  HEAP16[$2 + 186 >> 1] = 0;
  HEAP32[$2 + 188 >> 2] = $2 + 400;
  HEAP32[$2 + 192 >> 2] = 137061;
  HEAP16[$2 + 196 >> 1] = 12;
  HEAP16[$2 + 198 >> 1] = 0;
  HEAP32[$2 + 200 >> 2] = $2 + 399;
  HEAP32[$2 + 204 >> 2] = 136456;
  HEAP16[$2 + 208 >> 1] = 12;
  HEAP16[$2 + 210 >> 1] = 0;
  HEAP32[$2 + 212 >> 2] = $2 + 398;
  HEAP32[$2 + 216 >> 2] = 123904;
  HEAP16[$2 + 220 >> 1] = 12;
  HEAP16[$2 + 222 >> 1] = 0;
  HEAP32[$2 + 224 >> 2] = $2 + 397;
  HEAP32[$2 + 228 >> 2] = 124503;
  HEAP16[$2 + 232 >> 1] = 10;
  HEAP16[$2 + 234 >> 1] = 0;
  HEAP32[$2 + 236 >> 2] = 394936;
  HEAP32[$2 + 240 >> 2] = 124487;
  HEAP16[$2 + 244 >> 1] = 10;
  HEAP16[$2 + 246 >> 1] = 0;
  HEAP32[$2 + 248 >> 2] = 394924;
  HEAP32[$2 + 252 >> 2] = 124470;
  HEAP16[$2 + 256 >> 1] = 10;
  HEAP16[$2 + 258 >> 1] = 0;
  HEAP32[$2 + 260 >> 2] = 394932;
  HEAP32[$2 + 264 >> 2] = 124515;
  HEAP16[$2 + 268 >> 1] = 10;
  HEAP16[$2 + 270 >> 1] = 0;
  HEAP32[$2 + 272 >> 2] = 394984;
  HEAP32[$2 + 276 >> 2] = 142166;
  HEAP16[$2 + 280 >> 1] = 10;
  HEAP16[$2 + 282 >> 1] = 0;
  HEAP32[$2 + 284 >> 2] = $2 + 376;
  HEAP32[$2 + 288 >> 2] = 142158;
  HEAP16[$2 + 292 >> 1] = 10;
  HEAP16[$2 + 294 >> 1] = 0;
  HEAP32[$2 + 296 >> 2] = $2 + 372;
  HEAP32[$2 + 300 >> 2] = 142091;
  HEAP16[$2 + 304 >> 1] = 10;
  HEAP16[$2 + 306 >> 1] = 0;
  HEAP32[$2 + 308 >> 2] = $2 + 368;
  HEAP32[$2 + 312 >> 2] = 142083;
  HEAP16[$2 + 316 >> 1] = 10;
  HEAP16[$2 + 318 >> 1] = 0;
  HEAP32[$2 + 320 >> 2] = $2 + 364;
  HEAP32[$2 + 324 >> 2] = 127756;
  HEAP16[$2 + 328 >> 1] = 10;
  HEAP16[$2 + 330 >> 1] = 0;
  HEAP32[$2 + 332 >> 2] = $2 + 360;
  HEAP32[$2 + 336 >> 2] = 136217;
  HEAP16[$2 + 340 >> 1] = 12;
  HEAP16[$2 + 342 >> 1] = 0;
  HEAP32[$2 + 344 >> 2] = $2 + 359;
  block : {
   if (HEAP8[$2 + 407 | 0] & 1) {
    HEAP32[$2 + 412 >> 2] = jsvCreateConfigObject($2, 29);
    break block;
   }
   if (jsvReadConfigObject(HEAP32[$2 + 408 >> 2], $2, 29) & 1) {
    HEAP32[98729] = HEAP32[98729] & -3 | (HEAP8[$2 + 406 | 0] & 1 ? 2 : 0);
    HEAP32[98729] = HEAP32[98729] & -5 | (HEAP8[$2 + 405 | 0] & 1 ? 4 : 0);
    HEAP32[98729] = HEAP32[98729] & -9 | (HEAP8[$2 + 404 | 0] & 1 ? 8 : 0);
    HEAP32[98729] = HEAP32[98729] & -2 | HEAP8[$2 + 403 | 0] & 1;
    HEAP32[98729] = HEAP32[98729] & -17 | (HEAP8[$2 + 402 | 0] & 1 ? 16 : 0);
    HEAP32[98729] = HEAP32[98729] & -33 | (HEAP8[$2 + 401 | 0] & 1 ? 32 : 0);
    HEAP32[98729] = HEAP32[98729] & -65 | (HEAP8[$2 + 400 | 0] & 1 ? 64 : 0);
    HEAP32[98729] = HEAP32[98729] & -2049 | (HEAP8[$2 + 399 | 0] & 1 ? 2048 : 0);
    HEAP32[98729] = HEAP32[98729] & -2097153 | (HEAP8[$2 + 398 | 0] & 1 ? 2097152 : 0);
    HEAP32[98729] = HEAP32[98729] & -4194305 | (HEAP8[$2 + 397 | 0] & 1 ? 4194304 : 0);
    if (HEAP32[98734] < 0) {
     HEAP32[98734] = 0
    }
    if (HEAP32[98731] < 0) {
     HEAP32[98731] = 0
    }
    if (HEAP32[98733] < 0) {
     HEAP32[98733] = 0
    }
    HEAP16[100009] = int_sqrt32(HEAP32[$2 + 384 >> 2]);
    HEAP16[100010] = int_sqrt32(HEAP32[$2 + 380 >> 2]);
    HEAP16[197456] = HEAP32[$2 + 376 >> 2];
    HEAP16[197457] = HEAP32[$2 + 372 >> 2];
    HEAP16[100007] = HEAP32[$2 + 368 >> 2];
    HEAP16[100008] = HEAP32[$2 + 364 >> 2];
    HEAP32[98729] = HEAP32[98729] & -1048577 | (HEAP8[$2 + 359 | 0] & 1 ? 1048576 : 0);
   }
   HEAP32[$2 + 412 >> 2] = 0;
  }
  __stack_pointer = $2 + 416 | 0;
  return HEAP32[$2 + 412 >> 2];
 }
 
 function jswrap_banglejs_setOptions($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  _jswrap_banglejs_setOptions(HEAP32[$1 + 12 >> 2], 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_banglejs_getOptions() {
  return _jswrap_banglejs_setOptions(0, 1) | 0;
 }
 
 function jswrap_banglejs_isLCDOn() {
  return (HEAP32[98729] & 65536) != 0 | 0;
 }
 
 function jswrap_banglejs_isBacklightOn() {
  return (HEAP32[98729] & 131072) != 0 | 0;
 }
 
 function jswrap_banglejs_setLocked($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  _jswrap_banglejs_setLocked(HEAP8[$1 + 15 | 0] & 1, 127280);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_banglejs_isLocked() {
  return (HEAP32[98729] & 262144) != 0 | 0;
 }
 
 function jswrap_banglejs_isCharging() {
  return (jshPinGetValue(23) ^ -1) & 1;
 }
 
 function jswrap_banglejs_getBattery() {
  return 50;
 }
 
 function jswrap_banglejs_lcdWr($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  $2 = $3;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$2 >> 2] = jsvGetDataPointer(HEAP32[$2 + 8 >> 2], $2 + 4 | 0);
  if (!(HEAP32[$2 >> 2] | !HEAP32[$2 + 8 >> 2])) {
   HEAP32[$2 + 4 >> 2] = jsvIterateCallbackCount(HEAP32[$2 + 8 >> 2]);
   block1 : {
    if (HEAP32[$2 + 4 >> 2] + 256 >>> 0 > jsuGetFreeStack() >>> 0) {
     jsExceptionHere(1, 140362, 0);
     break block1;
    }
    $3 = $3 - (HEAP32[$2 + 4 >> 2] + 15 & -16) | 0;
    __stack_pointer = $3;
    HEAP32[$2 >> 2] = $3;
    jsvIterateCallbackToBytes(HEAP32[$2 + 8 >> 2], HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]);
   }
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jswrap_banglejs_setHRMPower($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  return 0;
 }
 
 function jswrap_banglejs_isHRMOn() {
  return (HEAP32[98729] & 4096) != 0 | 0;
 }
 
 function jswrap_banglejs_setGPSPower($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  return 0;
 }
 
 function jswrap_banglejs_isGPSOn() {
  return (HEAP32[98729] & 8192) != 0 | 0;
 }
 
 function jswrap_banglejs_getGPSFix() {
  return 0;
 }
 
 function jswrap_banglejs_setCompassPower($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  return 0;
 }
 
 function jswrap_banglejs_isCompassOn() {
  return (HEAP32[98729] & 16384) != 0 | 0;
 }
 
 function jswrap_banglejs_resetCompass() {
  
 }
 
 function jswrap_banglejs_setBarometerPower($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  return 0;
 }
 
 function jswrap_banglejs_isBarometerOn() {
  return (HEAP32[98729] & 32768) != 0 | 0;
 }
 
 function jswrap_banglejs_getStepCount() {
  return HEAP32[98747];
 }
 
 function jswrap_banglejs_setStepCount($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[98747] = HEAP32[$1 + 12 >> 2];
 }
 
 function jswrap_banglejs_getCompass() {
  return 0;
 }
 
 function jswrap_banglejs_getAccel() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = jsvNewObject();
  if (HEAP32[$0 + 12 >> 2]) {
   jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 124025, jsvNewFromFloat(+HEAP16[197496] * .0001220703125));
   jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 123896, jsvNewFromFloat(+HEAP16[197497] * .0001220703125));
   jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 123596, jsvNewFromFloat(+HEAP16[197498] * .0001220703125));
   jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 136836, jsvNewFromFloat(Math_sqrt(+HEAP32[98750]) * .0001220703125));
   jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 136907, jsvNewFromFloat(+HEAPU32[98751] * .0001220703125));
  }
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function jswrap_banglejs_getHealthStatus($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block1 : {
   block : {
    if (!(jsvIsUndefined(HEAP32[$1 + 8 >> 2]) & 1)) {
     if (!(jsvIsStringEqual(HEAP32[$1 + 8 >> 2], 135431) & 1)) {
      break block
     }
    }
    HEAP32[$1 + 12 >> 2] = _jswrap_banglejs_getHealthStatusObject(395008);
    break block1;
   }
   if (jsvIsStringEqual(HEAP32[$1 + 8 >> 2], 124569) & 1) {
    HEAP32[$1 + 12 >> 2] = _jswrap_banglejs_getHealthStatusObject(395027);
    break block1;
   }
   if (jsvIsStringEqual(HEAP32[$1 + 8 >> 2], 123894) & 1) {
    HEAP32[$1 + 12 >> 2] = _jswrap_banglejs_getHealthStatusObject(395046);
    break block1;
   }
   HEAP32[$1 >> 2] = HEAP32[$1 + 8 >> 2];
   jsExceptionHere(1, 128508, $1);
   HEAP32[$1 + 12 >> 2] = 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function _jswrap_banglejs_getHealthStatusObject($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 28 >> 2] = $0;
  HEAP32[$1 + 24 >> 2] = jsvNewObject();
  if (HEAP32[$1 + 24 >> 2]) {
   $0 = HEAP32[$1 + 28 >> 2];
   $2 = HEAP32[$1 + 28 >> 2];
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 24 >> 2], 124788, jsvNewFromInteger(((HEAPU8[$0 + 1 | 0] | HEAPU8[$0 + 2 | 0] << 8 | (HEAPU8[$0 + 3 | 0] << 16 | HEAPU8[$0 + 4 | 0] << 24)) >>> 0) / ((HEAPU8[$2 + 5 | 0] | HEAPU8[$2 + 6 | 0] << 8) >>> 0) | 0));
   $0 = HEAP32[$1 + 28 >> 2];
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 24 >> 2], 127213, jsvNewFromInteger(HEAPU8[$0 + 7 | 0] | HEAPU8[$0 + 8 | 0] << 8));
   $0 = HEAP32[45675];
   $2 = HEAP32[45674];
   HEAP32[$1 + 8 >> 2] = $2;
   HEAP32[$1 + 12 >> 2] = $0;
   $2 = HEAP32[45673];
   $0 = HEAP32[45672];
   HEAP32[$1 >> 2] = $0;
   HEAP32[$1 + 4 >> 2] = $2;
   if (HEAPU8[HEAP32[$1 + 28 >> 2] + 18 | 0] < 4) {
    jsvObjectSetChildAndUnLock(HEAP32[$1 + 24 >> 2], 123598, jsvNewFromString(HEAP32[(HEAPU8[HEAP32[$1 + 28 >> 2] + 18 | 0] << 2) + $1 >> 2]))
   }
  }
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 24 >> 2];
 }
 
 function jswrap_banglejs_postInit() {
  
 }
 
 function jswrap_banglejs_setTheme() {
  HEAP8[370709] = 0;
  HEAP8[370710] = 0;
  HEAP8[370711] = 255;
  HEAP8[370712] = 255;
  HEAP8[370713] = 0;
  HEAP8[370714] = 0;
  HEAP8[370715] = 255;
  HEAP8[370716] = 191;
  HEAP8[370717] = 0;
  HEAP8[370718] = 0;
  HEAP8[370719] = 255;
  HEAP8[370720] = 7;
  HEAP8[370721] = 0;
 }
 
 function jswrap_banglejs_hwinit() {
  graphicsStructInit(370724, 176, 176, 3);
  HEAP8[370728] = 6;
  HEAP8[370729] = 0;
  HEAP8[370730] = 0;
  HEAP8[370731] = 0;
  HEAP8[370740] = 16;
  HEAP8[370732] = 0;
  HEAP8[370733] = 0;
  HEAP8[370734] = 0;
  HEAP8[370735] = 0;
  HEAP8[370749] = 1;
  HEAP8[370750] = 64;
  lcdMemLCD_init(370724);
  jswrap_banglejs_pwrBacklight(1);
  graphicsSetCallbacks(370724);
  jswrap_banglejs_setTheme();
  graphicsFillRect(370724, 0, 0, 175, 175, HEAPU8[370711] | HEAPU8[370712] << 8);
 }
 
 function jswrap_banglejs_init() {
  var $0 = 0, $1 = 0, $2 = 0;
  $0 = __stack_pointer - 256 | 0;
  __stack_pointer = $0;
  HEAP8[$0 + 254 | 0] = (HEAPU16[184294] & 4096) != 0;
  HEAP8[$0 + 253 | 0] = 0;
  if (HEAP8[$0 + 254 | 0] & 1) {
   HEAP32[98729] = 196686;
   HEAP8[394982] = 255;
   HEAP32[98751] = 0;
   healthStateClear(395008);
   healthStateClear(395027);
   healthStateClear(395046);
   if (jshPinGetValue(17) & 1) {
    HEAP8[$0 + 253 | 0] = 1
   }
  }
  HEAP32[98729] = HEAP32[98729] | 2048;
  HEAP16[197470] = 0;
  HEAP32[98746] = 1500;
  HEAP32[98731] = 0;
  HEAP32[98733] = 3e3;
  HEAP32[98734] = 5e3;
  HEAP8[394946] = 0;
  if (jshPinGetValue(17) & 1) {
   HEAP8[394946] = 1
  }
  HEAP8[395065] = 0;
  HEAP16[197533] = 0;
  if (!(HEAP8[$0 + 253 | 0] & 1)) {
   HEAP32[$0 + 248 >> 2] = jsvNewFromString(135083);
   HEAP32[$0 + 244 >> 2] = jswrap_storage_readJSON(HEAP32[$0 + 248 >> 2], 1);
   jsvUnLock(HEAP32[$0 + 248 >> 2]);
   block : {
    if (jsvIsObject(HEAP32[$0 + 244 >> 2]) & 1) {
     $1 = jsvObjectGetChildIfExists(HEAP32[$0 + 244 >> 2], 128764);
     break block;
    }
    $1 = 0;
   }
   HEAP32[$0 + 240 >> 2] = $1;
   block2 : {
    block1 : {
     if (!HEAP32[$0 + 240 >> 2]) {
      break block1
     }
     if (jsvGetBool(HEAP32[$0 + 240 >> 2]) & 1) {
      break block1
     }
     HEAP32[98729] = HEAP32[98729] & -257;
     break block2;
    }
    HEAP32[98729] = HEAP32[98729] | 256;
    HEAP32[98729] = HEAP32[98729] | 128;
   }
   jsvUnLock(HEAP32[$0 + 240 >> 2]);
   block3 : {
    if (jsvIsObject(HEAP32[$0 + 244 >> 2]) & 1) {
     $1 = jsvObjectGetChildIfExists(HEAP32[$0 + 244 >> 2], 137383);
     break block3;
    }
    $1 = 0;
   }
   HEAP32[$0 + 240 >> 2] = $1;
   block5 : {
    block4 : {
     if (!HEAP32[$0 + 240 >> 2]) {
      break block4
     }
     if (jsvGetBool(HEAP32[$0 + 240 >> 2]) & 1) {
      break block4
     }
     HEAP32[98729] = HEAP32[98729] & -513;
     break block5;
    }
    HEAP32[98729] = HEAP32[98729] | 512;
   }
   jsvUnLock(HEAP32[$0 + 240 >> 2]);
   jswrap_banglejs_setTheme();
   block6 : {
    if (jsvIsObject(HEAP32[$0 + 244 >> 2]) & 1) {
     $1 = jsvObjectGetChildIfExists(HEAP32[$0 + 244 >> 2], 137584);
     break block6;
    }
    $1 = 0;
   }
   HEAP32[$0 + 240 >> 2] = $1;
   if (jsvIsObject(HEAP32[$0 + 240 >> 2]) & 1) {
    $1 = jsvObjectGetIntegerChild(HEAP32[$0 + 240 >> 2], 136807);
    HEAP8[370709] = $1;
    HEAP8[370710] = $1 >>> 8;
    $1 = jsvObjectGetIntegerChild(HEAP32[$0 + 240 >> 2], 136811);
    HEAP8[370711] = $1;
    HEAP8[370712] = $1 >>> 8;
    $1 = jsvObjectGetIntegerChild(HEAP32[$0 + 240 >> 2], 142075);
    HEAP8[370713] = $1;
    HEAP8[370714] = $1 >>> 8;
    $1 = jsvObjectGetIntegerChild(HEAP32[$0 + 240 >> 2], 142079);
    HEAP8[370715] = $1;
    HEAP8[370716] = $1 >>> 8;
    $1 = jsvObjectGetIntegerChild(HEAP32[$0 + 240 >> 2], 141205);
    HEAP8[370717] = $1;
    HEAP8[370718] = $1 >>> 8;
    $1 = jsvObjectGetIntegerChild(HEAP32[$0 + 240 >> 2], 141209);
    HEAP8[370719] = $1;
    HEAP8[370720] = $1 >>> 8;
    HEAP8[370721] = jsvObjectGetBoolChild(HEAP32[$0 + 240 >> 2], 135863) & 1;
   }
   jsvUnLock(HEAP32[$0 + 240 >> 2]);
   block7 : {
    if (jsvIsObject(HEAP32[$0 + 244 >> 2]) & 1) {
     $1 = jsvObjectGetChildIfExists(HEAP32[$0 + 244 >> 2], 136286);
     break block7;
    }
    $1 = 0;
   }
   HEAP32[$0 + 240 >> 2] = $1;
   if (jsvIsObject(HEAP32[$0 + 240 >> 2]) & 1) {
    HEAP16[197456] = jsvObjectGetIntegerChild(HEAP32[$0 + 240 >> 2], 142142);
    HEAP16[197457] = jsvObjectGetIntegerChild(HEAP32[$0 + 240 >> 2], 142139);
    HEAP16[100007] = jsvObjectGetIntegerChild(HEAP32[$0 + 240 >> 2], 142064);
    HEAP16[100008] = jsvObjectGetIntegerChild(HEAP32[$0 + 240 >> 2], 142061);
   }
   jsvUnLock(HEAP32[$0 + 240 >> 2]);
   jsvUnLock(HEAP32[$0 + 244 >> 2]);
  }
  jswrap_banglejs_setLCDOffset(0);
  graphicsStructResetState(370724);
  HEAP32[$0 + 236 >> 2] = jspNewObject(0, 127608);
  block8 : {
   if (!HEAP32[$0 + 236 >> 2]) {
    break block8
   }
   jsvObjectSetChild(HEAP32[92130], 136851, HEAP32[$0 + 236 >> 2]);
   jsvObjectSetChild(HEAP32[92131], 123922, HEAP32[$0 + 236 >> 2]);
   $1 = HEAP32[$0 + 236 >> 2];
   HEAP8[370724] = $1;
   HEAP8[370725] = $1 >>> 8;
   HEAP8[370726] = $1 >>> 16;
   HEAP8[370727] = $1 >>> 24;
   HEAP32[$0 + 232 >> 2] = jsvNewNativeFunction(612, 32792);
   jsvObjectSetChildAndUnLock(HEAP32[$0 + 236 >> 2], 128751, HEAP32[$0 + 232 >> 2]);
   block9 : {
    if (HEAP8[$0 + 254 | 0] & 1) {
     break block9
    }
   }
   HEAP8[$0 + 231 | 0] = 1;
   if (HEAPU16[184294] & 64) {
    HEAP8[$0 + 231 | 0] = 0;
    if (!(HEAP8[$0 + 254 | 0] & 1 | HEAP8[$0 + 253 | 0] & 1)) {
     jsfNameFromString($0 + 196 | 0, 136798);
     HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 220 >> 2];
     $1 = HEAP32[$0 + 216 >> 2];
     $2 = HEAP32[$0 + 212 >> 2];
     HEAP32[$0 + 56 >> 2] = $2;
     HEAP32[$0 + 60 >> 2] = $1;
     $2 = HEAP32[$0 + 208 >> 2];
     $1 = HEAP32[$0 + 204 >> 2];
     HEAP32[$0 + 48 >> 2] = $1;
     HEAP32[$0 + 52 >> 2] = $2;
     $1 = HEAP32[$0 + 200 >> 2];
     $2 = HEAP32[$0 + 196 >> 2];
     HEAP32[$0 + 40 >> 2] = $2;
     HEAP32[$0 + 44 >> 2] = $1;
     HEAP32[$0 + 224 >> 2] = jsfReadFile($0 + 40 | 0, 0, 0);
     block11 : {
      if (jsvIsString(HEAP32[$0 + 224 >> 2]) & 1) {
       if (jsvGetStringLength(HEAP32[$0 + 224 >> 2]) >>> 0 > 3) {
        HEAP32[$0 + 192 >> 2] = jsvGetCharInString(HEAP32[$0 + 224 >> 2], 0) & 255;
        HEAP32[$0 + 188 >> 2] = jsvGetCharInString(HEAP32[$0 + 224 >> 2], 1) & 255;
        jsvUnLock2(jswrap_graphics_drawImage(HEAP32[$0 + 236 >> 2], HEAP32[$0 + 224 >> 2], (176 - HEAP32[$0 + 192 >> 2] | 0) / 2 | 0, (176 - HEAP32[$0 + 188 >> 2] | 0) / 2 | 0, 0), HEAP32[$0 + 224 >> 2]);
        graphicsInternalFlip();
       }
       break block11;
      }
      HEAP32[$0 + 184 >> 2] = 88;
      HEAP32[$0 + 180 >> 2] = 88;
      graphicsFillRect(370724, HEAP32[$0 + 184 >> 2] - 49 | 0, HEAP32[$0 + 180 >> 2] - 19 | 0, HEAP32[$0 + 184 >> 2] + 49 | 0, HEAP32[$0 + 180 >> 2] + 19 | 0, HEAPU8[370711] | HEAPU8[370712] << 8);
      $1 = HEAPU8[370709] | HEAPU8[370710] << 8;
      HEAP8[370741] = $1;
      HEAP8[370742] = $1 >>> 8;
      HEAP8[370743] = $1 >>> 16;
      HEAP8[370744] = $1 >>> 24;
      graphicsDrawRect(370724, HEAP32[$0 + 184 >> 2] - 50 | 0, HEAP32[$0 + 180 >> 2] - 20 | 0, HEAP32[$0 + 184 >> 2] + 50 | 0, HEAP32[$0 + 180 >> 2] + 20 | 0);
      HEAP32[$0 + 180 >> 2] = HEAP32[$0 + 180 >> 2] - 4;
      HEAP32[$0 + 184 >> 2] = HEAP32[$0 + 184 >> 2] - 24;
      HEAP32[$0 + 176 >> 2] = 142474;
      while (1) {
       if (HEAPU8[HEAP32[$0 + 176 >> 2]]) {
        graphicsDrawChar6x8(370724, HEAP32[$0 + 184 >> 2], HEAP32[$0 + 180 >> 2], HEAP8[HEAP32[$0 + 176 >> 2]] << 24 >> 24, 1, 1, 0);
        HEAP32[$0 + 184 >> 2] = HEAP32[$0 + 184 >> 2] + 6;
        HEAP32[$0 + 176 >> 2] = HEAP32[$0 + 176 >> 2] + 1;
        continue;
       }
       break;
      };
      graphicsInternalFlip();
     }
    }
   }
   if (HEAP8[$0 + 253 | 0] & 1) {
    HEAP8[$0 + 231 | 0] = 0
   }
   if (HEAP8[$0 + 231 | 0] & 1) {
    HEAP8[370749] = 1;
    HEAP8[370750] = 64;
    graphicsClear(370724);
    HEAP8[$0 + 175 | 0] = 0;
    jsfNameFromString($0 + 140 | 0, 136234);
    HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 164 >> 2];
    $2 = HEAP32[$0 + 160 >> 2];
    $1 = HEAP32[$0 + 156 >> 2];
    HEAP32[$0 + 24 >> 2] = $1;
    HEAP32[$0 + 28 >> 2] = $2;
    $1 = HEAP32[$0 + 152 >> 2];
    $2 = HEAP32[$0 + 148 >> 2];
    HEAP32[$0 + 16 >> 2] = $2;
    HEAP32[$0 + 20 >> 2] = $1;
    $2 = HEAP32[$0 + 144 >> 2];
    $1 = HEAP32[$0 + 140 >> 2];
    HEAP32[$0 + 8 >> 2] = $1;
    HEAP32[$0 + 12 >> 2] = $2;
    HEAP32[$0 + 168 >> 2] = jsfReadFile($0 + 8 | 0, 0, 0);
    block12 : {
     if (jsvIsString(HEAP32[$0 + 168 >> 2]) & 1) {
      if (jsvGetStringLength(HEAP32[$0 + 168 >> 2])) {
       break block12
      }
     }
     jsvUnLock(HEAP32[$0 + 168 >> 2]);
     HEAP8[$0 + 175 | 0] = 1;
     HEAP32[$0 + 168 >> 2] = jswrap_banglejs_getLogo();
    }
    HEAP32[$0 + 136 >> 2] = jsvGetCharInString(HEAP32[$0 + 168 >> 2], 0) & 255;
    HEAP32[$0 + 132 >> 2] = jsvGetCharInString(HEAP32[$0 + 168 >> 2], 1) & 255;
    HEAP32[$0 + 108 >> 2] = jsvNewFromString(138731);
    jsvGetString(HEAP32[$0 + 108 >> 2], $0 + 112 | 0, 20);
    jsvUnLock(HEAP32[$0 + 108 >> 2]);
    HEAP32[$0 + 104 >> 2] = (176 - HEAP32[$0 + 132 >> 2] | 0) / 2;
    jsvUnLock2(jswrap_graphics_drawImage(HEAP32[$0 + 236 >> 2], HEAP32[$0 + 168 >> 2], (176 - HEAP32[$0 + 136 >> 2] | 0) / 2 | 0, HEAP32[$0 + 104 >> 2], 0), HEAP32[$0 + 168 >> 2]);
    if (HEAP8[$0 + 175 | 0] & 1) {
     block13 : {
      if (HEAP32[$0 + 132 >> 2] > 56) {
       HEAP32[$0 + 104 >> 2] = HEAP32[$0 + 104 >> 2] + (HEAP32[$0 + 132 >> 2] - 28 | 0);
       break block13;
      }
      HEAP32[$0 + 104 >> 2] = HEAP32[$0 + 104 >> 2] + (HEAP32[$0 + 132 >> 2] - 15 | 0);
     }
     HEAP32[$0 + 76 >> 2] = jsvNewFromString(138731);
     jsvGetString(HEAP32[$0 + 76 >> 2], $0 + 80 | 0, 20);
     jsvUnLock(HEAP32[$0 + 76 >> 2]);
     jswrap_graphics_drawCString(370724, 8, HEAP32[$0 + 104 >> 2], 141988);
     jswrap_graphics_drawCString(370724, 8, HEAP32[$0 + 104 >> 2] + 10 | 0, $0 + 80 | 0);
     jswrap_graphics_drawCString(370724, 8, HEAP32[$0 + 104 >> 2] + 20 | 0, 127254);
    }
   }
   graphicsInternalFlip();
   graphicsStructResetState(370724);
   if (HEAP8[$0 + 254 | 0] & 1) {
    stepcount_init();
    HEAP32[98747] = 0;
   }
   HEAP8[395068] = 0;
   jshPinSetState(23, 5);
   HEAP32[98768] = 0;
   HEAP32[98769] = 0;
   HEAP32[98770] = 0;
   jshSetPinShouldStayWatched(17, 1);
   HEAP8[$0 + 255 | 0] = jshPinWatch(17, 1, 0);
   if (HEAPU8[$0 + 255 | 0]) {
    jshSetEventCallback(HEAPU8[$0 + 255 | 0], 613)
   }
   if (!(HEAP8[$0 + 254 | 0] & 1)) {
    jsvUnLock(jsiSetTimeout(614, 500.0))
   }
   if (!(HEAP8[$0 + 253 | 0] & 1)) {
    break block8
   }
   jsvUnLock(jspEvaluate(145630, 1));
  }
  __stack_pointer = $0 + 256 | 0;
 }
 
 function healthStateClear($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP8[$0 | 0] = 0;
  HEAP8[$0 + 1 | 0] = 0;
  HEAP8[$0 + 2 | 0] = 0;
  HEAP8[$0 + 3 | 0] = 0;
  HEAP8[$0 + 4 | 0] = 0;
  HEAP8[$0 + 5 | 0] = 0;
  HEAP8[$0 + 6 | 0] = 0;
  HEAP8[$0 + 7 | 0] = 0;
  HEAP8[$0 + 15 | 0] = 0;
  HEAP8[$0 + 16 | 0] = 0;
  HEAP8[$0 + 17 | 0] = 0;
  HEAP8[$0 + 18 | 0] = 0;
  HEAP8[$0 + 8 | 0] = 0;
  HEAP8[$0 + 9 | 0] = 0;
  HEAP8[$0 + 10 | 0] = 0;
  HEAP8[$0 + 11 | 0] = 0;
  HEAP8[$0 + 12 | 0] = 0;
  HEAP8[$0 + 13 | 0] = 0;
  HEAP8[$0 + 14 | 0] = 0;
  HEAP8[$0 + 15 | 0] = 0;
 }
 
 function jswrap_banglejs_getLogo() {
  var $0 = 0;
  $0 = __stack_pointer - 496 | 0;
  __stack_pointer = $0;
  wasm2js_memory_copy($0 + 16 | 0, 182208, 467);
  HEAP32[$0 + 12 >> 2] = jsvNewNativeString($0 + 16 | 0, 467);
  HEAP32[$0 + 8 >> 2] = jswrap_heatshrink_decompress(HEAP32[$0 + 12 >> 2]);
  HEAP32[$0 + 4 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$0 + 8 >> 2], 0);
  jsvUnLock2(HEAP32[$0 + 12 >> 2], HEAP32[$0 + 8 >> 2]);
  __stack_pointer = $0 + 496 | 0;
  return HEAP32[$0 + 4 >> 2];
 }
 
 function jswrap_banglejs_kill() {
  jsvUnLock(HEAP32[98771]);
  HEAP32[98771] = 0;
  jsvUnLock(HEAP32[98772]);
  HEAP32[98772] = 0;
  if (HEAPU16[197533]) {
   jswrap_banglejs_beep_callback()
  }
  if (HEAPU8[395065]) {
   jswrap_banglejs_buzz_callback()
  }
  jshPinWatch(17, 0, 0);
  jshSetPinShouldStayWatched(17, 0);
  lcdMemLCD_setOverlay(0, 0, 0);
  jsvUnLock(HEAPU8[370724] | HEAPU8[370725] << 8 | (HEAPU8[370726] << 16 | HEAPU8[370727] << 24));
  HEAP8[370724] = 0;
  HEAP8[370725] = 0;
  HEAP8[370726] = 0;
  HEAP8[370727] = 0;
 }
 
 function jswrap_banglejs_beep_callback() {
  HEAP16[197533] = 0;
  if (HEAP32[98729] & 128) {
   _jswrap_banglejs_setVibration()
  }
  jshHadEvent();
 }
 
 function jswrap_banglejs_buzz_callback() {
  HEAP8[395065] = 0;
  _jswrap_banglejs_setVibration();
  jshHadEvent();
 }
 
 function jswrap_banglejs_idle() {
  var $0 = 0, $1 = 0, $2 = 0;
  $0 = __stack_pointer - 144 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 140 >> 2] = jsvObjectGetChildIfExists(HEAP32[92130], 137685);
  block : {
   if (jsiObjectHasCallbacks(HEAP32[$0 + 140 >> 2], 135762) & 1) {
    HEAP32[98729] = HEAP32[98729] | 1024;
    break block;
   }
   HEAP32[98729] = HEAP32[98729] & -1025;
  }
  if (!HEAP32[$0 + 140 >> 2]) {
   HEAP32[98732] = 0
  }
  if (HEAP32[98732]) {
   if (HEAP32[98732] & 4) {
    jswrap_banglejs_setLCDPower(0)
   }
   if (HEAP32[98732] & 2) {
    jswrap_banglejs_setLCDPower(1)
   }
   if (HEAP32[98732] & 16) {
    jswrap_banglejs_setLCDPowerBacklight(0)
   }
   if (HEAP32[98732] & 8) {
    jswrap_banglejs_setLCDPowerBacklight(1)
   }
   if (HEAP32[98732] & 32) {
    _jswrap_banglejs_setLocked(1, HEAP32[98730]);
    HEAP32[98730] = 0;
   }
   if (HEAP32[98732] & 64) {
    _jswrap_banglejs_setLocked(0, HEAP32[98730]);
    HEAP32[98730] = 0;
   }
   if (HEAP32[98732] & 1) {
    HEAP16[184294] = HEAPU16[184294] | 64
   }
   if (HEAP32[98732] & 67108864) {
    jswrap_banglejs_setPollInterval_internal(80)
   }
   if (HEAP32[98732] & 134217728) {
    jswrap_banglejs_setPollInterval_internal(800)
   }
   if (HEAP32[98732] & 128) {
    HEAP32[$0 + 136 >> 2] = jswrap_banglejs_getAccel();
    if (HEAP32[$0 + 136 >> 2]) {
     jsiQueueObjectCallbacks(HEAP32[$0 + 140 >> 2], 135762, $0 + 136 | 0, 1);
     jsvUnLock(HEAP32[$0 + 136 >> 2]);
    }
   }
   if (HEAP32[98732] & 256) {
    HEAP32[$0 + 132 >> 2] = jsvNewObject();
    if (HEAP32[$0 + 132 >> 2]) {
     HEAP32[$0 + 128 >> 2] = 148266;
     if (HEAPU8[395092] & 2) {
      HEAP32[$0 + 128 >> 2] = 124674
     }
     if (HEAP8[395092] & 1) {
      HEAP32[$0 + 128 >> 2] = 135911
     }
     if (HEAPU8[395092] & 8) {
      HEAP32[$0 + 128 >> 2] = 135604
     }
     if (HEAPU8[395092] & 4) {
      HEAP32[$0 + 128 >> 2] = 128646
     }
     if (HEAPU8[395092] & 16) {
      HEAP32[$0 + 128 >> 2] = 124883
     }
     if (HEAPU8[395092] & 32) {
      HEAP32[$0 + 128 >> 2] = 124965
     }
     HEAP32[$0 + 124 >> 2] = HEAPU8[395092] & 128 ? 2 : 1;
     jsvObjectSetChildAndUnLock(HEAP32[$0 + 132 >> 2], 127964, jsvNewFromString(HEAP32[$0 + 128 >> 2]));
     jsvObjectSetChildAndUnLock(HEAP32[$0 + 132 >> 2], 137692, jsvNewFromBool((HEAPU8[395092] & 128) != 0));
     $2 = HEAP32[$0 + 132 >> 2];
     if (HEAPU8[395092] & 16) {
      $1 = 0 - HEAP32[$0 + 124 >> 2] | 0
     } else {
      if (HEAPU8[395092] & 32) {
       $1 = HEAP32[$0 + 124 >> 2]
      } else {
       $1 = 0
      }
     }
     jsvObjectSetChildAndUnLock($2, 124025, jsvNewFromInteger($1));
     $2 = HEAP32[$0 + 132 >> 2];
     if (HEAPU8[395092] & 4) {
      $1 = 0 - HEAP32[$0 + 124 >> 2] | 0
     } else {
      if (HEAPU8[395092] & 8) {
       $1 = HEAP32[$0 + 124 >> 2]
      } else {
       $1 = 0
      }
     }
     jsvObjectSetChildAndUnLock($2, 123896, jsvNewFromInteger($1));
     $2 = HEAP32[$0 + 132 >> 2];
     if (HEAP8[395092] & 1) {
      $1 = 0 - HEAP32[$0 + 124 >> 2] | 0
     } else {
      if (HEAPU8[395092] & 2) {
       $1 = HEAP32[$0 + 124 >> 2]
      } else {
       $1 = 0
      }
     }
     jsvObjectSetChildAndUnLock($2, 123596, jsvNewFromInteger($1));
     jsiQueueObjectCallbacks(HEAP32[$0 + 140 >> 2], 128769, $0 + 132 | 0, 1);
     jsvUnLock(HEAP32[$0 + 132 >> 2]);
    }
   }
   if (HEAP32[98732] & 16384) {
    block7 : {
     if (!HEAP32[$0 + 140 >> 2]) {
      break block7
     }
     if (!(jsiObjectHasCallbacks(HEAP32[$0 + 140 >> 2], 136833) & 1)) {
      break block7
     }
     HEAP32[$0 + 120 >> 2] = jswrap_banglejs_getCompass();
     if (HEAP32[$0 + 120 >> 2]) {
      jsiQueueObjectCallbacks(HEAP32[$0 + 140 >> 2], 136833, $0 + 120 | 0, 1);
      jsvUnLock(HEAP32[$0 + 120 >> 2]);
     }
    }
   }
   if (HEAP32[98732] & 536870912) {
    HEAP32[$0 + 116 >> 2] = _jswrap_banglejs_getHealthStatusObject(395027);
    if (HEAP32[$0 + 116 >> 2]) {
     jsiQueueObjectCallbacks(HEAP32[$0 + 140 >> 2], 136097, $0 + 116 | 0, 1);
     jsvUnLock(HEAP32[$0 + 116 >> 2]);
    }
   }
   if (HEAP32[98732] & 1073741824) {
    jsiQueueObjectCallbacks(HEAP32[$0 + 140 >> 2], 124889, 0, 0)
   }
   if (HEAP32[98732] & 32768) {
    if (jsiObjectHasCallbacks(HEAP32[$0 + 140 >> 2], 137450) & 1) {
     HEAP32[$0 + 112 >> 2] = jsvNewTypedArray(17, Math_imul(HEAPU8[395093], 3));
     if (HEAP32[$0 + 112 >> 2]) {
      HEAP32[$0 + 108 >> 2] = HEAPU8[395094] - Math_imul(HEAPU8[395093], 3);
      while (1) {
       if (HEAP32[$0 + 108 >> 2] < 0) {
        HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 108 >> 2] + 150;
        continue;
       }
       break;
      };
      jsvArrayBufferIteratorNew($0 + 52 | 0, HEAP32[$0 + 112 >> 2], 0);
      HEAP32[$0 + 48 >> 2] = 0;
      while (1) {
       if (HEAP32[$0 + 48 >> 2] < (Math_imul(HEAPU8[395093], 3) | 0)) {
        $1 = HEAP32[$0 + 108 >> 2];
        HEAP32[$0 + 108 >> 2] = $1 + 1;
        jsvArrayBufferIteratorSetByteValue($0 + 52 | 0, HEAP8[$1 + 395104 | 0] << 24 >> 24);
        jsvArrayBufferIteratorNext($0 + 52 | 0);
        if (HEAP32[$0 + 108 >> 2] >= 150) {
         HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 108 >> 2] - 150
        }
        HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 48 >> 2] + 1;
        continue;
       }
       break;
      };
      jsvArrayBufferIteratorFree($0 + 52 | 0);
      jsiQueueObjectCallbacks(HEAP32[$0 + 140 >> 2], 137450, $0 + 112 | 0, 1);
      jsvUnLock(HEAP32[$0 + 112 >> 2]);
     }
    }
   }
   if (HEAP32[98732] & 131072) {
    HEAP32[$0 + 44 >> 2] = jsvNewFromBool(HEAP8[395254] & 1);
    jsiQueueObjectCallbacks(HEAP32[$0 + 140 >> 2], 136786, $0 + 44 | 0, 1);
    jsvUnLock(HEAP32[$0 + 44 >> 2]);
   }
   if (HEAP32[98732] & 262144) {
    HEAP32[$0 + 40 >> 2] = jsvNewFromInteger(HEAP32[98747]);
    jsiQueueObjectCallbacks(HEAP32[$0 + 140 >> 2], 128756, $0 + 40 | 0, 1);
    jsvUnLock(HEAP32[$0 + 40 >> 2]);
   }
   if (HEAP32[98732] & 16777216) {
    jsiQueueObjectCallbacks(HEAP32[$0 + 140 >> 2], 124544, 0, 0)
   }
   if (HEAP32[98732] & 33554432) {
    HEAP32[$0 + 36 >> 2] = jsvNewFromBool(HEAP8[395255] & 1);
    jsiQueueObjectCallbacks(HEAP32[$0 + 140 >> 2], 128811, $0 + 36 | 0, 1);
    jsvUnLock(HEAP32[$0 + 36 >> 2]);
   }
   if (HEAP32[98732] & 524288) {
    HEAP32[$0 + 28 >> 2] = jsvNewFromInteger(HEAP32[98743] == 1 ? -1 : HEAP32[98743] == 2);
    HEAP32[($0 + 28 | 0) + 4 >> 2] = jsvNewFromInteger(HEAP32[98743] == 3 ? -1 : HEAP32[98743] == 4);
    HEAP32[98743] = 0;
    jsiQueueObjectCallbacks(HEAP32[$0 + 140 >> 2], 137549, $0 + 28 | 0, 2);
    jsvUnLockMany(2, $0 + 28 | 0);
   }
   if (HEAP32[98732] & 3145728) {
    HEAP32[$0 + 20 >> 2] = jsvNewFromInteger(!!(HEAP32[98732] & 1048576) | (HEAP32[98732] & 2097152 ? 2 : 0));
    HEAP32[$0 + 24 >> 2] = jsvNewObject();
    HEAP32[$0 + 16 >> 2] = HEAP16[197481] << 16 >> 16;
    HEAP32[$0 + 12 >> 2] = HEAP16[197482] << 16 >> 16;
    if (HEAP32[$0 + 16 >> 2] < 0) {
     HEAP32[$0 + 16 >> 2] = 0
    }
    if (HEAP32[$0 + 12 >> 2] < 0) {
     HEAP32[$0 + 12 >> 2] = 0
    }
    if (HEAP32[$0 + 16 >> 2] >= 176) {
     HEAP32[$0 + 16 >> 2] = 175
    }
    if (HEAP32[$0 + 12 >> 2] >= 176) {
     HEAP32[$0 + 12 >> 2] = 175
    }
    jsvObjectSetChildAndUnLock(HEAP32[$0 + 24 >> 2], 124025, jsvNewFromInteger(HEAP32[$0 + 16 >> 2]));
    jsvObjectSetChildAndUnLock(HEAP32[$0 + 24 >> 2], 123896, jsvNewFromInteger(HEAP32[$0 + 12 >> 2]));
    jsvObjectSetChildAndUnLock(HEAP32[$0 + 24 >> 2], 137544, jsvNewFromInteger(HEAPU8[394976]));
    jsiQueueObjectCallbacks(HEAP32[$0 + 140 >> 2], 136273, $0 + 20 | 0, 2);
    jsvUnLockMany(2, $0 + 20 | 0);
   }
  }
  if (HEAP32[98732] & 4194304) {
   HEAP32[$0 + 8 >> 2] = jsvNewObject();
   jsvObjectSetChildAndUnLock(HEAP32[$0 + 8 >> 2], 124025, jsvNewFromInteger(HEAP16[197481] << 16 >> 16));
   jsvObjectSetChildAndUnLock(HEAP32[$0 + 8 >> 2], 123896, jsvNewFromInteger(HEAP16[197482] << 16 >> 16));
   jsvObjectSetChildAndUnLock(HEAP32[$0 + 8 >> 2], 140296, jsvNewFromInteger(HEAP8[394966] & 1));
   $2 = HEAP32[$0 + 8 >> 2];
   if (HEAP8[394977] & 1) {
    $1 = (HEAP16[197481] << 16 >> 16) - (HEAP16[197489] << 16 >> 16) | 0
   } else {
    $1 = 0
   }
   jsvObjectSetChildAndUnLock($2, 123965, jsvNewFromInteger($1));
   $2 = HEAP32[$0 + 8 >> 2];
   if (HEAP8[394977] & 1) {
    $1 = (HEAP16[197482] << 16 >> 16) - (HEAP16[197490] << 16 >> 16) | 0
   } else {
    $1 = 0
   }
   jsvObjectSetChildAndUnLock($2, 123723, jsvNewFromInteger($1));
   jsiQueueObjectCallbacks(HEAP32[$0 + 140 >> 2], 136825, $0 + 8 | 0, 1);
   jsvUnLock(HEAP32[$0 + 8 >> 2]);
   HEAP16[197489] = HEAPU16[197481];
   HEAP16[197490] = HEAPU16[197482];
   HEAP8[394977] = HEAP8[394966] & 1;
  }
  jsvUnLock(HEAP32[$0 + 140 >> 2]);
  HEAP32[98732] = 0;
  if ((HEAPU8[370768] | HEAPU8[370769] << 8) << 16 >> 16 >= (HEAPU8[370764] | HEAPU8[370765] << 8) << 16 >> 16) {
   graphicsInternalFlip()
  }
  if (!(HEAPU8[395065] | !HEAP32[98772])) {
   jspromise_resolve(HEAP32[98772], 0);
   jsvUnLock(HEAP32[98772]);
   HEAP32[98772] = 0;
  }
  if (!(HEAPU16[197533] | !HEAP32[98771])) {
   jspromise_resolve(HEAP32[98771], 0);
   jsvUnLock(HEAP32[98771]);
   HEAP32[98771] = 0;
  }
  __stack_pointer = $0 + 144 | 0;
  return 0;
 }
 
 function jswrap_banglejs_gps_character($0) {
  HEAP8[(__stack_pointer - 16 | 0) + 15 | 0] = $0;
  return 1;
 }
 
 function jswrap_banglejs_dbg() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 8 >> 2] = jsvNewObject();
  block : {
   if (!HEAP32[$0 + 8 >> 2]) {
    HEAP32[$0 + 12 >> 2] = 0;
    break block;
   }
   jsvObjectSetChildAndUnLock(HEAP32[$0 + 8 >> 2], 123954, jsvNewFromInteger(HEAPU8[395094]));
   jsvObjectSetChildAndUnLock(HEAP32[$0 + 8 >> 2], 124624, jsvNewFromInteger(HEAPU8[395256]));
   jsvObjectSetChildAndUnLock(HEAP32[$0 + 8 >> 2], 124650, jsvNewFromInteger(HEAPU8[395257]));
   jsvObjectSetChildAndUnLock(HEAP32[$0 + 8 >> 2], 135797, jsvNewFromInteger(HEAPU16[197471]));
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
  }
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function jswrap_banglejs_touchWr($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
 }
 
 function jswrap_banglejs_accelRd($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  return 0;
 }
 
 function jswrap_banglejs_barometerWr($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
 }
 
 function jswrap_banglejs_barometerRd($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  return 0;
 }
 
 function jswrap_banglejs_compassWr($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
 }
 
 function jswrap_banglejs_compassRd($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  return 0;
 }
 
 function jswrap_banglejs_hrmWr($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
 }
 
 function jswrap_banglejs_hrmRd($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  return 0;
 }
 
 function jswrap_banglejs_getPressure() {
  return HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2];
 }
 
 function jswrap_banglejs_project($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer + -64 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 60 >> 2] = $0;
  HEAPF64[$1 + 48 >> 3] = .017453292519943295;
  HEAPF64[$1 + 40 >> 3] = 85.0511287798;
  HEAPF64[$1 + 32 >> 3] = 6378137;
  HEAPF64[$1 + 24 >> 3] = jsvObjectGetFloatChild(HEAP32[$1 + 60 >> 2], 125119);
  HEAPF64[$1 + 16 >> 3] = jsvObjectGetFloatChild(HEAP32[$1 + 60 >> 2], 135096);
  if (HEAPF64[$1 + 24 >> 3] > 85.0511287798) {
   HEAPF64[$1 + 24 >> 3] = 85.0511287798
  }
  if (HEAPF64[$1 + 24 >> 3] < -85.0511287798) {
   HEAPF64[$1 + 24 >> 3] = -85.0511287798
  }
  HEAPF64[$1 + 8 >> 3] = jswrap_math_sin(HEAPF64[$1 + 24 >> 3] * .017453292519943295);
  HEAP32[$1 + 4 >> 2] = jsvNewObject();
  if (HEAP32[$1 + 4 >> 2]) {
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 4 >> 2], 124025, jsvNewFromFloat(HEAPF64[$1 + 16 >> 3] * 6378137.0 * .017453292519943295));
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 4 >> 2], 123896, jsvNewFromFloat(log((HEAPF64[$1 + 8 >> 3] + 1.0) / (1.0 - HEAPF64[$1 + 8 >> 3])) * 6378137.0 * .5));
  }
  __stack_pointer = $1 - -64 | 0;
  return HEAP32[$1 + 4 >> 2];
 }
 
 function _jswrap_banglejs_setVibration() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = 0;
  if (HEAP32[98729] & 128) {
   HEAP32[$0 + 12 >> 2] = HEAPU16[197533]
  }
  block1 : {
   if (!(HEAPU8[395065] | HEAP32[$0 + 12 >> 2])) {
    jshPinOutput(19, 0);
    break block1;
   }
   block2 : {
    if (!HEAP32[$0 + 12 >> 2]) {
     jshPinAnalogOutput(19, +HEAPU8[395065] * .6 / 255.0 + .4, 1.0e3, 0);
     break block2;
    }
    jshPinAnalogOutput(19, +HEAPU8[395065] * .6 / 255.0 + .2, +HEAP32[$0 + 12 >> 2], 0);
   }
  }
  __stack_pointer = $0 + 16 | 0;
 }
 
 function jswrap_banglejs_beep($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  if (HEAP32[$2 + 20 >> 2] <= 0) {
   HEAP32[$2 + 20 >> 2] = 4e3
  }
  if (HEAP32[$2 + 20 >> 2] > 6e4) {
   HEAP32[$2 + 20 >> 2] = 6e4
  }
  if (HEAP32[$2 + 24 >> 2] <= 0) {
   HEAP32[$2 + 24 >> 2] = 200
  }
  if (HEAP32[$2 + 24 >> 2] > 5e3) {
   HEAP32[$2 + 24 >> 2] = 5e3
  }
  block : {
   if (HEAP32[98771]) {
    HEAP32[$2 + 16 >> 2] = jsvNewNativeFunction(136, 289);
    HEAP32[$2 + 12 >> 2] = jsvNewFromInteger(HEAP32[$2 + 24 >> 2]);
    jsvAddFunctionParameter(HEAP32[$2 + 16 >> 2], 0, HEAP32[$2 + 12 >> 2]);
    jsvUnLock(HEAP32[$2 + 12 >> 2]);
    HEAP32[$2 + 12 >> 2] = jsvNewFromInteger(HEAP32[$2 + 20 >> 2]);
    jsvAddFunctionParameter(HEAP32[$2 + 16 >> 2], 0, HEAP32[$2 + 12 >> 2]);
    jsvUnLock(HEAP32[$2 + 12 >> 2]);
    HEAP32[$2 + 8 >> 2] = jswrap_promise_then(HEAP32[98771], HEAP32[$2 + 16 >> 2], 0);
    jsvUnLock(HEAP32[$2 + 16 >> 2]);
    HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 8 >> 2];
    break block;
   }
   HEAP32[98771] = jspromise_create();
   if (!HEAP32[98771]) {
    HEAP32[$2 + 28 >> 2] = 0;
    break block;
   }
   if (HEAP32[98729] & 256) {
    HEAP16[197533] = HEAP32[$2 + 20 >> 2];
    if (HEAP32[98729] & 128) {
     _jswrap_banglejs_setVibration()
    }
   }
   jstExecuteFn(615, 0, jshGetTimeFromMilliseconds(+HEAP32[$2 + 24 >> 2]), i64toi32_i32$HIGH_BITS, 0, 0);
   HEAP32[$2 + 28 >> 2] = jsvLockAgain(HEAP32[98771]);
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jswrap_banglejs_buzz($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 40 >> 2] = $0;
  HEAPF64[$2 + 32 >> 3] = $1;
  __DOUBLE_BITS_1254(HEAPF64[$2 + 32 >> 3]);
  $0 = i64toi32_i32$HIGH_BITS & 2147483647;
  block1 : {
   if (!(($0 | 0) == 2146435072 | $0 >>> 0 > 2146435072)) {
    if (!(HEAPF64[$2 + 32 >> 3] > 1.0)) {
     break block1
    }
   }
   HEAPF64[$2 + 32 >> 3] = 1;
  }
  if (HEAPF64[$2 + 32 >> 3] < 0.0) {
   HEAPF64[$2 + 32 >> 3] = 0
  }
  if (HEAP32[$2 + 40 >> 2] <= 0) {
   HEAP32[$2 + 40 >> 2] = 200
  }
  if (HEAP32[$2 + 40 >> 2] > 5e3) {
   HEAP32[$2 + 40 >> 2] = 5e3
  }
  block2 : {
   if (HEAP32[98772]) {
    HEAP32[$2 + 28 >> 2] = jsvNewNativeFunction(137, 481);
    HEAP32[$2 + 24 >> 2] = jsvNewFromInteger(HEAP32[$2 + 40 >> 2]);
    jsvAddFunctionParameter(HEAP32[$2 + 28 >> 2], 0, HEAP32[$2 + 24 >> 2]);
    jsvUnLock(HEAP32[$2 + 24 >> 2]);
    HEAP32[$2 + 24 >> 2] = jsvNewFromFloat(HEAPF64[$2 + 32 >> 3]);
    jsvAddFunctionParameter(HEAP32[$2 + 28 >> 2], 0, HEAP32[$2 + 24 >> 2]);
    jsvUnLock(HEAP32[$2 + 24 >> 2]);
    HEAP32[$2 + 20 >> 2] = jswrap_promise_then(HEAP32[98772], HEAP32[$2 + 28 >> 2], 0);
    jsvUnLock(HEAP32[$2 + 28 >> 2]);
    HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 20 >> 2];
    break block2;
   }
   HEAP32[98772] = jspromise_create();
   if (!HEAP32[98772]) {
    HEAP32[$2 + 44 >> 2] = 0;
    break block2;
   }
   $1 = HEAPF64[$2 + 32 >> 3] * 255.0;
   if ($1 < 4294967295.0 & $1 >= 0.0) {
    $0 = ~~$1 >>> 0
   } else {
    $0 = 0
   }
   HEAP8[395065] = $0;
   $3 = jshGetTimeFromMilliseconds(+HEAP32[$2 + 40 >> 2]);
   $0 = i64toi32_i32$HIGH_BITS;
   block3 : {
    if (jstExecuteFn(616, 0, $3, $0, 0, 0) & 1) {
     if (HEAP32[98729] & 512) {
      _jswrap_banglejs_setVibration()
     }
     break block3;
    }
    HEAP8[395065] = 0;
   }
   HEAP32[$2 + 44 >> 2] = jsvLockAgain(HEAP32[98772]);
  }
  __stack_pointer = $2 + 48 | 0;
  return HEAP32[$2 + 44 >> 2];
 }
 
 function jswrap_banglejs_off() {
  jsExceptionHere(1, 127880, 0);
 }
 
 function jswrap_banglejs_softOff() {
  jsExceptionHere(1, 127880, 0);
 }
 
 function jswrap_banglejs_factoryReset($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  jsfResetStorage();
  if (!(HEAP8[$1 + 15 | 0] & 1)) {
   HEAP16[184294] = HEAPU16[184294] | 64
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_banglejs_appRect() {
  var $0 = 0;
  $0 = __stack_pointer - 48 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 40 >> 2] = jsvNewObject();
  block : {
   if (!HEAP32[$0 + 40 >> 2]) {
    HEAP32[$0 + 44 >> 2] = 0;
    break block;
   }
   HEAP32[$0 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[92130], 140876);
   HEAP32[$0 + 32 >> 2] = 0;
   HEAP32[$0 + 28 >> 2] = 0;
   if (jsvIsObject(HEAP32[$0 + 36 >> 2]) & 1) {
    jsvObjectIteratorNew($0 + 24 | 0, HEAP32[$0 + 36 >> 2]);
    while (1) {
     if (jsvObjectIteratorHasValue_1311($0 + 24 | 0) & 1) {
      HEAP32[$0 + 20 >> 2] = jsvObjectIteratorGetValue_1312($0 + 24 | 0);
      HEAP32[$0 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 20 >> 2], 140403);
      HEAP32[$0 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 20 >> 2], 136165);
      block1 : {
       if (!(jsvIsString(HEAP32[$0 + 16 >> 2]) & 1)) {
        break block1
       }
       if (!(jsvIsNumeric(HEAP32[$0 + 12 >> 2]) & 1)) {
        break block1
       }
       HEAP8[$0 + 11 | 0] = jsvGetCharInString(HEAP32[$0 + 16 >> 2], 0);
       HEAP32[$0 + 4 >> 2] = jsvGetIntegerAndUnLock(HEAP32[$0 + 12 >> 2]);
       if (!(HEAPU8[$0 + 11 | 0] != 116 | HEAP32[$0 + 4 >> 2] <= 0)) {
        HEAP32[$0 + 32 >> 2] = 24
       }
       if (!(HEAPU8[$0 + 11 | 0] != 98 | HEAP32[$0 + 4 >> 2] <= 0)) {
        HEAP32[$0 + 28 >> 2] = 24
       }
      }
      jsvUnLock2(HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2]);
      jsvObjectIteratorNext($0 + 24 | 0);
      continue;
     }
     break;
    };
    jsvObjectIteratorFree_1313($0 + 24 | 0);
   }
   jsvUnLock(HEAP32[$0 + 36 >> 2]);
   jsvObjectSetChildAndUnLock(HEAP32[$0 + 40 >> 2], 124025, jsvNewFromInteger(0));
   jsvObjectSetChildAndUnLock(HEAP32[$0 + 40 >> 2], 123896, jsvNewFromInteger(HEAP32[$0 + 32 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$0 + 40 >> 2], 124222, jsvNewFromInteger(HEAPU8[370736] | HEAPU8[370737] << 8));
   jsvObjectSetChildAndUnLock(HEAP32[$0 + 40 >> 2], 136443, jsvNewFromInteger((HEAPU8[370738] | HEAPU8[370739] << 8) - (HEAP32[$0 + 32 >> 2] + HEAP32[$0 + 28 >> 2] | 0) | 0));
   jsvObjectSetChildAndUnLock(HEAP32[$0 + 40 >> 2], 142064, jsvNewFromInteger((HEAPU8[370736] | HEAPU8[370737] << 8) - 1 | 0));
   jsvObjectSetChildAndUnLock(HEAP32[$0 + 40 >> 2], 142061, jsvNewFromInteger((HEAPU8[370738] | HEAPU8[370739] << 8) - (HEAP32[$0 + 28 >> 2] + 1 | 0) | 0));
   HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 40 >> 2];
  }
  __stack_pointer = $0 + 48 | 0;
  return HEAP32[$0 + 44 >> 2];
 }
 
 function jsvObjectIteratorHasValue_1311($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
 }
 
 function jsvObjectIteratorGetValue_1312($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvObjectIteratorFree_1313($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsbangle_exec_pending($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  HEAP32[$2 + 20 >> 2] = HEAPU8[HEAP32[$2 + 28 >> 2]];
  $0 = HEAP32[$2 + 28 >> 2];
  HEAP16[$2 + 18 >> 1] = HEAPU8[$0 + 1 | 0] | HEAPU8[$0 + 2 | 0] << 8;
  if (!HEAP32[$2 + 20 >> 2]) {
   HEAP32[$2 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[92130], 137685);
   if (HEAP32[$2 + 12 >> 2]) {
    HEAP32[$2 + 8 >> 2] = jsvNewFromInteger(HEAPU16[$2 + 18 >> 1]);
    jsiQueueObjectCallbacks(HEAP32[$2 + 12 >> 2], 124224, $2 + 8 | 0, 1);
    jsvUnLock(HEAP32[$2 + 8 >> 2]);
   }
   jsvUnLock(HEAP32[$2 + 12 >> 2]);
  }
  __stack_pointer = $2 + 32 | 0;
 }
 
 function jswrap_banglejs_powerusage($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  if (jswrap_banglejs_isBacklightOn()) {
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 12 >> 2], 124914, jsvNewFromInteger(14e3))
  }
  if (!jswrap_banglejs_isLocked()) {
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 12 >> 2], 136282, jsvNewFromInteger(1600))
  }
  if (jswrap_banglejs_isHRMOn()) {
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 12 >> 2], 140966, jsvNewFromInteger(700))
  }
  if (jswrap_banglejs_isGPSOn()) {
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 12 >> 2], 140884, jsvNewFromInteger(2e4))
  }
  if (jswrap_banglejs_isCompassOn()) {
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 12 >> 2], 127018, jsvNewFromInteger(600))
  }
  if (jswrap_banglejs_isBarometerOn()) {
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 12 >> 2], 135027, jsvNewFromInteger(200))
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_graphics_setFont6x15($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  if (HEAP32[$2 + 24 >> 2] <= 0) {
   HEAP32[$2 + 24 >> 2] = 1
  }
  HEAP32[$2 + 20 >> 2] = jsvNewNativeString(182704, 1842);
  HEAP32[$2 + 16 >> 2] = jsvNewNativeString(184560, 224);
  HEAP32[$2 + 12 >> 2] = jswrap_graphics_setFontCustom(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 20 >> 2], 32, HEAP32[$2 + 16 >> 2], (HEAP32[$2 + 24 >> 2] << 8) + 15 | 0);
  jsvUnLock2(HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2]);
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function jswrap_graphics_setFont12x20($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  if (HEAP32[$2 + 24 >> 2] <= 0) {
   HEAP32[$2 + 24 >> 2] = 1
  }
  HEAP32[$2 + 20 >> 2] = jsvNewNativeString(184784, 4723);
  HEAP32[$2 + 16 >> 2] = jsvNewNativeString(189520, 224);
  HEAP32[$2 + 12 >> 2] = jswrap_graphics_setFontCustom(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 20 >> 2], 32, HEAP32[$2 + 16 >> 2], (HEAP32[$2 + 24 >> 2] << 8) + 20 | 0);
  jsvUnLock2(HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2]);
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function jswrap_array_constructor($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 24 >> 2] = $0;
  block1 : {
   if ((jsvGetArrayLength(HEAP32[$1 + 24 >> 2]) | 0) == 1) {
    HEAP32[$1 + 20 >> 2] = jsvSkipNameAndUnLock(jsvGetArrayItem(HEAP32[$1 + 24 >> 2], 0));
    if (jsvIsNumeric(HEAP32[$1 + 20 >> 2]) & 1) {
     HEAPF64[$1 + 8 >> 3] = jsvGetFloat(HEAP32[$1 + 20 >> 2]);
     HEAP32[$1 + 4 >> 2] = jsvGetInteger(HEAP32[$1 + 20 >> 2]);
     jsvUnLock(HEAP32[$1 + 20 >> 2]);
     if (!(HEAP32[$1 + 4 >> 2] >= 0 & HEAPF64[$1 + 8 >> 3] == +HEAP32[$1 + 4 >> 2])) {
      jsExceptionHere(1, 136116, 0);
      HEAP32[$1 + 28 >> 2] = 0;
      break block1;
     }
     HEAP32[$1 >> 2] = jsvNewEmptyArray();
     if (!HEAP32[$1 >> 2]) {
      HEAP32[$1 + 28 >> 2] = 0;
      break block1;
     }
     jsvSetArrayLength(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2], 0);
     HEAP32[$1 + 28 >> 2] = HEAP32[$1 >> 2];
     break block1;
    }
    jsvUnLock(HEAP32[$1 + 20 >> 2]);
   }
   HEAP32[$1 + 28 >> 2] = jsvLockAgain(HEAP32[$1 + 24 >> 2]);
  }
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 28 >> 2];
 }
 
 function jswrap_array_indexOf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP32[$3 + 16 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = jsvGetIndexOfFull(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], 0, 1, HEAP32[$3 + 16 >> 2]);
  block : {
   if (!HEAP32[$3 + 12 >> 2]) {
    HEAP32[$3 + 28 >> 2] = jsvNewFromInteger(-1);
    break block;
   }
   HEAP32[$3 + 28 >> 2] = jsvNewFromInteger(jsvGetIntegerAndUnLock(HEAP32[$3 + 12 >> 2]));
  }
  __stack_pointer = $3 + 32 | 0;
  return HEAP32[$3 + 28 >> 2];
 }
 
 function jswrap_array_includes($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 112 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 104 >> 2] = $0;
  HEAP32[$3 + 100 >> 2] = $1;
  HEAP32[$3 + 96 >> 2] = $2;
  if (HEAP32[$3 + 96 >> 2] < 0) {
   HEAP32[$3 + 96 >> 2] = jsvGetLength(HEAP32[$3 + 104 >> 2]) + HEAP32[$3 + 96 >> 2]
  }
  if (HEAP32[$3 + 96 >> 2] < 0) {
   HEAP32[$3 + 96 >> 2] = 0
  }
  if (jsvIsFloat(HEAP32[$3 + 100 >> 2]) & 1) {
   $0 = __DOUBLE_BITS_1321(jsvGetFloat(HEAP32[$3 + 100 >> 2]));
   $2 = $0;
   $1 = i64toi32_i32$HIGH_BITS;
   $0 = $1 & 2147483647;
   $1 = $2;
   $4 = ($0 | 0) == 2146435072 & ($1 | 0) != 0 | $0 >>> 0 > 2146435072;
  }
  HEAP8[$3 + 95 | 0] = $4;
  block : {
   if (!(jsvIsIterable(HEAP32[$3 + 104 >> 2]) & 1)) {
    HEAP8[$3 + 111 | 0] = 0;
    break block;
   }
   jsvIteratorNew($3 + 32 | 0, HEAP32[$3 + 104 >> 2], jsvIsUndefined(HEAP32[$3 + 100 >> 2]) & 1);
   while (1) {
    if (jsvIteratorHasElement($3 + 32 | 0) & 1) {
     HEAP32[$3 + 28 >> 2] = jsvIteratorGetKey($3 + 32 | 0);
     block1 : {
      if (!(jsvIsInt(HEAP32[$3 + 28 >> 2]) & 1)) {
       break block1
      }
      if ((jsvGetInteger(HEAP32[$3 + 28 >> 2]) | 0) < HEAP32[$3 + 96 >> 2]) {
       break block1
      }
      HEAP32[$3 + 24 >> 2] = jsvIteratorGetValue($3 + 32 | 0);
      block3 : {
       block2 : {
        if (HEAP32[$3 + 24 >> 2] == HEAP32[$3 + 100 >> 2]) {
         break block2
        }
        if (jsvMathsOpTypeEqual(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 100 >> 2]) & 1) {
         break block2
        }
        if (!(HEAP8[$3 + 95 | 0] & 1)) {
         break block3
        }
        if (!(jsvIsFloat(HEAP32[$3 + 24 >> 2]) & 1)) {
         break block3
        }
        $1 = __DOUBLE_BITS_1321(jsvGetFloat(HEAP32[$3 + 24 >> 2]));
        $2 = $1;
        $0 = i64toi32_i32$HIGH_BITS;
        $1 = $0 & 2147483647;
        $0 = $2;
        if (($1 | 0) == 2146435072 & ($0 | 0) != 0 | $1 >>> 0 > 2146435072) {
         break block2
        }
        break block3;
       }
       jsvUnLock2(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2]);
       jsvIteratorFree($3 + 32 | 0);
       HEAP8[$3 + 111 | 0] = 1;
       break block;
      }
      jsvUnLock(HEAP32[$3 + 24 >> 2]);
     }
     jsvUnLock(HEAP32[$3 + 28 >> 2]);
     jsvIteratorNext($3 + 32 | 0);
     continue;
    }
    break;
   };
   jsvIteratorFree($3 + 32 | 0);
   HEAP8[$3 + 111 | 0] = 0;
  }
  __stack_pointer = $3 + 112 | 0;
  return HEAP8[$3 + 111 | 0] & 1;
 }
 
 function __DOUBLE_BITS_1321($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAPF64[$1 + 8 >> 3] = $0;
  HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  return HEAP32[$1 >> 2];
 }
 
 function jswrap_array_join($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  block : {
   if (!(jsvIsIterable(HEAP32[$2 + 8 >> 2]) & 1)) {
    HEAP32[$2 + 12 >> 2] = 0;
    break block;
   }
   block1 : {
    if (jsvIsUndefined(HEAP32[$2 + 4 >> 2]) & 1) {
     HEAP32[$2 + 4 >> 2] = jsvNewFromString(142566);
     break block1;
    }
    HEAP32[$2 + 4 >> 2] = jsvAsString(HEAP32[$2 + 4 >> 2]);
   }
   if (!HEAP32[$2 + 4 >> 2]) {
    HEAP32[$2 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$2 >> 2] = jsvArrayJoin(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2], 1);
   jsvUnLock(HEAP32[$2 + 4 >> 2]);
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function jswrap_array_push($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  block : {
   if (!(jsvIsArray(HEAP32[$2 + 24 >> 2]) & 1)) {
    HEAP32[$2 + 28 >> 2] = -1;
    break block;
   }
   HEAP32[$2 + 16 >> 2] = -1;
   jsvObjectIteratorNew($2 + 12 | 0, HEAP32[$2 + 20 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_1325($2 + 12 | 0) & 1) {
     HEAP32[$2 + 8 >> 2] = jsvObjectIteratorGetValue_1326($2 + 12 | 0);
     HEAP32[$2 + 16 >> 2] = jsvArrayPush(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 8 >> 2]);
     jsvUnLock(HEAP32[$2 + 8 >> 2]);
     jsvObjectIteratorNext($2 + 12 | 0);
     continue;
    }
    break;
   };
   jsvObjectIteratorFree_1327($2 + 12 | 0);
   if (HEAP32[$2 + 16 >> 2] < 0) {
    HEAP32[$2 + 16 >> 2] = jsvGetArrayLength(HEAP32[$2 + 24 >> 2])
   }
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jsvObjectIteratorHasValue_1325($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
 }
 
 function jsvObjectIteratorGetValue_1326($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvObjectIteratorFree_1327($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_array_map($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = _jswrap_array_iterate_with_callback(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 1, 0, 0);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function _jswrap_array_iterate_with_callback($0, $1, $2, $3, $4, $5) {
  var $6 = 0;
  $6 = __stack_pointer - 128 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 120 >> 2] = $0;
  HEAP32[$6 + 116 >> 2] = $1;
  HEAP32[$6 + 112 >> 2] = $2;
  HEAP32[$6 + 108 >> 2] = $3;
  HEAP8[$6 + 107 | 0] = $4;
  HEAP8[$6 + 106 | 0] = $5;
  block : {
   if (!(jsvIsIterable(HEAP32[$6 + 120 >> 2]) & 1)) {
    jsExceptionHere(1, 137728, 0);
    HEAP32[$6 + 124 >> 2] = 0;
    break block;
   }
   if (!(jsvIsFunction(HEAP32[$6 + 116 >> 2]) & 1)) {
    jsExceptionHere(1, 135275, 0);
    HEAP32[$6 + 124 >> 2] = 0;
    break block;
   }
   block1 : {
    if (jsvIsUndefined(HEAP32[$6 + 112 >> 2]) & 1) {
     break block1
    }
    if (jsvIsObject(HEAP32[$6 + 112 >> 2]) & 1) {
     break block1
    }
    jsExceptionHere(1, 138809, 0);
    HEAP32[$6 + 124 >> 2] = 0;
    break block;
   }
   HEAP32[$6 + 100 >> 2] = 0;
   if (HEAP32[$6 + 108 >> 2] == 1) {
    HEAP32[$6 + 100 >> 2] = jsvNewEmptyArray()
   }
   HEAP8[$6 + 99 | 0] = 0;
   if (!(!HEAP32[$6 + 100 >> 2] & HEAP32[$6 + 108 >> 2] == 1)) {
    jsvIteratorNew($6 + 36 | 0, HEAP32[$6 + 120 >> 2], 0);
    while (1) {
     $0 = 0;
     if (jsvIteratorHasElement($6 + 36 | 0) & 1) {
      $0 = HEAPU8[$6 + 99 | 0] ^ -1
     }
     if ($0 & 1) {
      HEAP32[$6 + 32 >> 2] = jsvIteratorGetKey($6 + 36 | 0);
      block7 : {
       if (jsvIsInt(HEAP32[$6 + 32 >> 2]) & 1) {
        HEAP32[$6 + 28 >> 2] = jsvGetInteger(HEAP32[$6 + 32 >> 2]);
        HEAP32[$6 + 24 >> 2] = jsvIteratorGetValue($6 + 36 | 0);
        HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 24 >> 2];
        HEAP32[$6 + 16 >> 2] = jsvNewFromInteger(HEAP32[$6 + 28 >> 2]);
        HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 120 >> 2];
        jsvIteratorNext($6 + 36 | 0);
        HEAP32[$6 + 8 >> 2] = jspeFunctionCall(HEAP32[$6 + 116 >> 2], 0, HEAP32[$6 + 112 >> 2], 0, 3, $6 + 12 | 0);
        jsvUnLock(HEAP32[$6 + 16 >> 2]);
        if (HEAP32[$6 + 8 >> 2]) {
         if (HEAP8[$6 + 107 | 0] & 1) {
          HEAP8[$6 + 7 | 0] = (jsvGetBool(HEAP32[$6 + 8 >> 2]) & 1) == (HEAP8[$6 + 106 | 0] & 1)
         }
         block3 : {
          if (HEAP32[$6 + 108 >> 2] == 1) {
           if (HEAP8[$6 + 107 | 0] & 1) {
            if (HEAP8[$6 + 7 | 0] & 1) {
             jsvArrayPush(HEAP32[$6 + 100 >> 2], HEAP32[$6 + 24 >> 2])
            }
            break block3;
           }
           HEAP32[$6 >> 2] = jsvNewFromInteger(HEAP32[$6 + 28 >> 2]);
           if (HEAP32[$6 >> 2]) {
            HEAP32[$6 >> 2] = jsvMakeIntoVariableName(HEAP32[$6 >> 2], HEAP32[$6 + 8 >> 2]);
            jsvAddName(HEAP32[$6 + 100 >> 2], HEAP32[$6 >> 2]);
            jsvUnLock(HEAP32[$6 >> 2]);
           }
           break block3;
          }
          if (HEAP8[$6 + 107 | 0] & 1) {
           block6 : {
            if (!(HEAP32[$6 + 108 >> 2] != 2 & HEAP32[$6 + 108 >> 2] != 3)) {
             if (HEAP8[$6 + 7 | 0] & 1) {
              block5 : {
               if (HEAP32[$6 + 108 >> 2] == 2) {
                $0 = jsvLockAgain(HEAP32[$6 + 24 >> 2]);
                break block5;
               }
               $0 = jsvNewFromInteger(jsvGetInteger(HEAP32[$6 + 32 >> 2]));
              }
              HEAP32[$6 + 100 >> 2] = $0;
              HEAP8[$6 + 99 | 0] = 1;
             }
             break block6;
            }
            if (!(HEAP8[$6 + 7 | 0] & 1)) {
             HEAP8[$6 + 99 | 0] = 1
            }
           }
          }
         }
         jsvUnLock(HEAP32[$6 + 8 >> 2]);
        }
        jsvUnLock(HEAP32[$6 + 24 >> 2]);
        break block7;
       }
       jsvIteratorNext($6 + 36 | 0);
      }
      jsvUnLock(HEAP32[$6 + 32 >> 2]);
      continue;
     }
     break;
    };
    jsvIteratorFree($6 + 36 | 0);
   }
   if (!(HEAP32[$6 + 108 >> 2] | !(HEAP8[$6 + 107 | 0] & 1))) {
    HEAP32[$6 + 100 >> 2] = jsvNewFromBool((HEAP8[$6 + 99 | 0] & 1) != (HEAP8[$6 + 106 | 0] & 1))
   }
   HEAP32[$6 + 124 >> 2] = HEAP32[$6 + 100 >> 2];
  }
  __stack_pointer = $6 + 128 | 0;
  return HEAP32[$6 + 124 >> 2];
 }
 
 function jswrap_array_forEach($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  _jswrap_array_iterate_with_callback(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0, 0, 0);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jswrap_array_filter($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = _jswrap_array_iterate_with_callback(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 1, 1, 1);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function jswrap_array_find($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $0 = _jswrap_array_iterate_with_callback(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0, 2, 1, 1);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function jswrap_array_findIndex($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 >> 2] = _jswrap_array_iterate_with_callback(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2], 0, 3, 1, 1);
  block : {
   if (HEAP32[$2 >> 2]) {
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
    break block;
   }
   HEAP32[$2 + 12 >> 2] = jsvNewFromInteger(-1);
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function jswrap_array_some($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = _jswrap_array_iterate_with_callback(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0, 1, 0);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function jswrap_array_every($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = _jswrap_array_iterate_with_callback(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0, 1, 1);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function jswrap_array_reduce($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 112 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 104 >> 2] = $0;
  HEAP32[$3 + 100 >> 2] = $1;
  HEAP32[$3 + 96 >> 2] = $2;
  block : {
   if (!(jsvIsIterable(HEAP32[$3 + 104 >> 2]) & 1)) {
    jsExceptionHere(1, 137728, 0);
    HEAP32[$3 + 108 >> 2] = 0;
    break block;
   }
   if (!(jsvIsFunction(HEAP32[$3 + 100 >> 2]) & 1)) {
    jsExceptionHere(1, 135275, 0);
    HEAP32[$3 + 108 >> 2] = 0;
    break block;
   }
   HEAP32[$3 + 92 >> 2] = jsvLockAgainSafe(HEAP32[$3 + 96 >> 2]);
   jsvIteratorNew($3 + 32 | 0, HEAP32[$3 + 104 >> 2], 0);
   if (!HEAP32[$3 + 92 >> 2]) {
    HEAP8[$3 + 31 | 0] = 0;
    while (1) {
     $0 = 0;
     if (!(HEAP8[$3 + 31 | 0] & 1)) {
      $0 = jsvIteratorHasElement($3 + 32 | 0)
     }
     if ($0 & 1) {
      HEAP32[$3 + 24 >> 2] = jsvIteratorGetKey($3 + 32 | 0);
      if (jsvIsInt(HEAP32[$3 + 24 >> 2]) & 1) {
       HEAP32[$3 + 92 >> 2] = jsvIteratorGetValue($3 + 32 | 0);
       HEAP8[$3 + 31 | 0] = 1;
      }
      jsvUnLock(HEAP32[$3 + 24 >> 2]);
      jsvIteratorNext($3 + 32 | 0);
      continue;
     }
     break;
    };
    if (!HEAP32[$3 + 92 >> 2]) {
     jsExceptionHere(1, 137141, 0)
    }
   }
   while (1) {
    if (jsvIteratorHasElement($3 + 32 | 0) & 1) {
     HEAP32[$3 + 20 >> 2] = jsvIteratorGetKey($3 + 32 | 0);
     if (jsvIsInt(HEAP32[$3 + 20 >> 2]) & 1) {
      HEAP32[$3 + 16 >> 2] = jsvGetInteger(HEAP32[$3 + 20 >> 2]);
      HEAP32[$3 >> 2] = HEAP32[$3 + 92 >> 2];
      HEAP32[$3 + 4 >> 2] = jsvIteratorGetValue($3 + 32 | 0);
      HEAP32[$3 + 8 >> 2] = jsvNewFromInteger(HEAP32[$3 + 16 >> 2]);
      HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 104 >> 2];
      HEAP32[$3 + 92 >> 2] = jspeFunctionCall(HEAP32[$3 + 100 >> 2], 0, 0, 0, 4, $3);
      jsvUnLockMany(3, $3);
     }
     jsvUnLock(HEAP32[$3 + 20 >> 2]);
     jsvIteratorNext($3 + 32 | 0);
     continue;
    }
    break;
   };
   jsvIteratorFree($3 + 32 | 0);
   HEAP32[$3 + 108 >> 2] = HEAP32[$3 + 92 >> 2];
  }
  __stack_pointer = $3 + 112 | 0;
  return HEAP32[$3 + 108 >> 2];
 }
 
 function jswrap_array_splice($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 96 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 88 >> 2] = $0;
  HEAP32[$4 + 84 >> 2] = $1;
  HEAP32[$4 + 80 >> 2] = $2;
  HEAP32[$4 + 76 >> 2] = $3;
  block : {
   if (!(jsvIsArray(HEAP32[$4 + 88 >> 2]) & 1)) {
    HEAP32[$4 + 92 >> 2] = 0;
    break block;
   }
   HEAP32[$4 + 72 >> 2] = jsvGetArrayLength(HEAP32[$4 + 88 >> 2]);
   if (HEAP32[$4 + 84 >> 2] < 0) {
    HEAP32[$4 + 84 >> 2] = HEAP32[$4 + 72 >> 2] + HEAP32[$4 + 84 >> 2]
   }
   if (HEAP32[$4 + 84 >> 2] < 0) {
    HEAP32[$4 + 84 >> 2] = 0
   }
   if (HEAP32[$4 + 84 >> 2] > HEAP32[$4 + 72 >> 2]) {
    HEAP32[$4 + 84 >> 2] = HEAP32[$4 + 72 >> 2]
   }
   HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 72 >> 2];
   if (jsvIsNumeric(HEAP32[$4 + 80 >> 2]) & 1) {
    HEAP32[$4 + 68 >> 2] = jsvGetInteger(HEAP32[$4 + 80 >> 2])
   }
   if (HEAP32[$4 + 68 >> 2] > (HEAP32[$4 + 72 >> 2] - HEAP32[$4 + 84 >> 2] | 0)) {
    HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 72 >> 2] - HEAP32[$4 + 84 >> 2]
   }
   HEAP32[$4 + 64 >> 2] = jsvGetArrayLength(HEAP32[$4 + 76 >> 2]);
   HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 64 >> 2] - HEAP32[$4 + 68 >> 2];
   HEAP8[$4 + 59 | 0] = 0;
   HEAP32[$4 + 52 >> 2] = jsvNewEmptyArray();
   jsvObjectIteratorNew($4 + 48 | 0, HEAP32[$4 + 88 >> 2]);
   while (1) {
    $0 = 0;
    if (jsvObjectIteratorHasValue_1325($4 + 48 | 0) & 1) {
     $0 = HEAPU8[$4 + 59 | 0] ^ -1
    }
    if ($0 & 1) {
     HEAP8[$4 + 47 | 0] = 1;
     HEAP32[$4 + 40 >> 2] = jsvObjectIteratorGetKey_1338($4 + 48 | 0);
     block1 : {
      if (!HEAP32[$4 + 40 >> 2]) {
       break block1
      }
      if (!(jsvIsInt(HEAP32[$4 + 40 >> 2]) & 1)) {
       break block1
      }
      HEAP32[$4 + 36 >> 2] = jsvGetInteger(HEAP32[$4 + 40 >> 2]);
      if (HEAP32[$4 + 36 >> 2] >= HEAP32[$4 + 84 >> 2]) {
       block2 : {
        if (HEAP32[$4 + 36 >> 2] < (HEAP32[$4 + 84 >> 2] + HEAP32[$4 + 68 >> 2] | 0)) {
         if (HEAP32[$4 + 52 >> 2]) {
          HEAP32[$4 + 32 >> 2] = jsvObjectIteratorGetValue_1326($4 + 48 | 0);
          jsvArrayPushAndUnLock(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 32 >> 2]);
         }
         HEAP8[$4 + 47 | 0] = 0;
         HEAP32[$4 + 28 >> 2] = jsvObjectIteratorGetKey_1338($4 + 48 | 0);
         jsvObjectIteratorNext($4 + 48 | 0);
         jsvRemoveChildAndUnLock(HEAP32[$4 + 88 >> 2], HEAP32[$4 + 28 >> 2]);
         break block2;
        }
        HEAP8[$4 + 59 | 0] = 1;
        HEAP8[$4 + 47 | 0] = 0;
       }
      }
     }
     jsvUnLock(HEAP32[$4 + 40 >> 2]);
     if (HEAP8[$4 + 47 | 0] & 1) {
      jsvObjectIteratorNext($4 + 48 | 0)
     }
     continue;
    }
    break;
   };
   HEAP32[$4 + 24 >> 2] = jsvObjectIteratorGetKey_1338($4 + 48 | 0);
   jsvObjectIteratorNew($4 + 20 | 0, HEAP32[$4 + 76 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_1325($4 + 20 | 0) & 1) {
     HEAP32[$4 + 16 >> 2] = jsvObjectIteratorGetValue_1326($4 + 20 | 0);
     jsvArrayInsertBefore(HEAP32[$4 + 88 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 16 >> 2]);
     jsvUnLock(HEAP32[$4 + 16 >> 2]);
     jsvObjectIteratorNext($4 + 20 | 0);
     continue;
    }
    break;
   };
   jsvObjectIteratorFree_1327($4 + 20 | 0);
   jsvUnLock(HEAP32[$4 + 24 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_1325($4 + 48 | 0) & 1) {
     HEAP32[$4 + 12 >> 2] = jsvObjectIteratorGetKey_1338($4 + 48 | 0);
     block3 : {
      if (!HEAP32[$4 + 12 >> 2]) {
       break block3
      }
      if (!(jsvIsInt(HEAP32[$4 + 12 >> 2]) & 1)) {
       break block3
      }
      jsvSetInteger(HEAP32[$4 + 12 >> 2], jsvGetInteger(HEAP32[$4 + 12 >> 2]) + HEAP32[$4 + 60 >> 2] | 0);
     }
     jsvUnLock(HEAP32[$4 + 12 >> 2]);
     jsvObjectIteratorNext($4 + 48 | 0);
     continue;
    }
    break;
   };
   jsvObjectIteratorFree_1327($4 + 48 | 0);
   jsvSetArrayLength(HEAP32[$4 + 88 >> 2], HEAP32[$4 + 72 >> 2] + HEAP32[$4 + 60 >> 2] | 0, 0);
   HEAP32[$4 + 92 >> 2] = HEAP32[$4 + 52 >> 2];
  }
  __stack_pointer = $4 + 96 | 0;
  return HEAP32[$4 + 92 >> 2];
 }
 
 function jsvObjectIteratorGetKey_1338($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jswrap_array_splice_i($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  HEAP32[$4 + 12 >> 2] = jsvNewFromInteger(HEAP32[$4 + 20 >> 2]);
  HEAP32[$4 + 8 >> 2] = jswrap_array_splice(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 12 >> 2], HEAP32[$4 + 16 >> 2]);
  jsvUnLock(HEAP32[$4 + 12 >> 2]);
  __stack_pointer = $4 + 32 | 0;
  return HEAP32[$4 + 8 >> 2];
 }
 
 function jswrap_array_shift($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = jswrap_array_splice_i(HEAP32[$1 + 12 >> 2], 0, 1, 0);
  HEAP32[$1 + 4 >> 2] = 0;
  if (jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 4 >> 2] = jsvSkipNameAndUnLock(jsvArrayPop(HEAP32[$1 + 8 >> 2]))
  }
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 4 >> 2];
 }
 
 function jswrap_array_unshift($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  jsvUnLock(jswrap_array_splice_i(HEAP32[$2 + 12 >> 2], 0, 0, HEAP32[$2 + 8 >> 2]));
  $0 = jsvGetLength(HEAP32[$2 + 12 >> 2]);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function jswrap_array_slice($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 112 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 104 >> 2] = $0;
  HEAP32[$3 + 100 >> 2] = $1;
  HEAP32[$3 + 96 >> 2] = $2;
  HEAP32[$3 + 92 >> 2] = jsvGetLength(HEAP32[$3 + 104 >> 2]);
  HEAP32[$3 + 88 >> 2] = HEAP32[$3 + 92 >> 2];
  if (!(jsvIsUndefined(HEAP32[$3 + 96 >> 2]) & 1)) {
   HEAP32[$3 + 88 >> 2] = jsvGetInteger(HEAP32[$3 + 96 >> 2])
  }
  HEAP32[$3 + 84 >> 2] = 0;
  HEAP32[$3 + 80 >> 2] = HEAP32[$3 + 92 >> 2];
  HEAP32[$3 + 76 >> 2] = jsvNewEmptyArray();
  block : {
   if (!HEAP32[$3 + 76 >> 2]) {
    HEAP32[$3 + 108 >> 2] = 0;
    break block;
   }
   block2 : {
    if (HEAP32[$3 + 100 >> 2] < 0) {
     if ((HEAP32[$3 + 92 >> 2] + HEAP32[$3 + 100 >> 2] | 0) > 0) {
      $0 = HEAP32[$3 + 92 >> 2] + HEAP32[$3 + 100 >> 2] | 0
     } else {
      $0 = 0
     }
     HEAP32[$3 + 84 >> 2] = $0;
     break block2;
    }
    if (HEAP32[$3 + 100 >> 2] < HEAP32[$3 + 92 >> 2]) {
     $0 = HEAP32[$3 + 100 >> 2]
    } else {
     $0 = HEAP32[$3 + 92 >> 2]
    }
    HEAP32[$3 + 84 >> 2] = $0;
   }
   block5 : {
    if (HEAP32[$3 + 88 >> 2] < 0) {
     if ((HEAP32[$3 + 92 >> 2] + HEAP32[$3 + 88 >> 2] | 0) > 0) {
      $0 = HEAP32[$3 + 92 >> 2] + HEAP32[$3 + 88 >> 2] | 0
     } else {
      $0 = 0
     }
     HEAP32[$3 + 80 >> 2] = $0;
     break block5;
    }
    if (HEAP32[$3 + 88 >> 2] < HEAP32[$3 + 92 >> 2]) {
     $0 = HEAP32[$3 + 88 >> 2]
    } else {
     $0 = HEAP32[$3 + 92 >> 2]
    }
    HEAP32[$3 + 80 >> 2] = $0;
   }
   HEAP8[$3 + 75 | 0] = 0;
   jsvIteratorNew($3 + 12 | 0, HEAP32[$3 + 104 >> 2], 1);
   while (1) {
    $0 = 0;
    if (jsvIteratorHasElement($3 + 12 | 0) & 1) {
     $0 = HEAPU8[$3 + 75 | 0] ^ -1
    }
    if ($0 & 1) {
     HEAP32[$3 + 8 >> 2] = jsvGetIntegerAndUnLock(jsvIteratorGetKey($3 + 12 | 0));
     block7 : {
      if (HEAP32[$3 + 8 >> 2] < HEAP32[$3 + 84 >> 2]) {
       jsvIteratorNext($3 + 12 | 0);
       break block7;
      }
      block8 : {
       if (HEAP32[$3 + 84 >> 2] < HEAP32[$3 + 80 >> 2]) {
        jsvArrayPushAndUnLock(HEAP32[$3 + 76 >> 2], jsvIteratorGetValue($3 + 12 | 0));
        jsvIteratorNext($3 + 12 | 0);
        HEAP32[$3 + 84 >> 2] = HEAP32[$3 + 84 >> 2] + 1;
        break block8;
       }
       HEAP8[$3 + 75 | 0] = 1;
      }
     }
     continue;
    }
    break;
   };
   jsvIteratorFree($3 + 12 | 0);
   HEAP32[$3 + 108 >> 2] = HEAP32[$3 + 76 >> 2];
  }
  __stack_pointer = $3 + 112 | 0;
  return HEAP32[$3 + 108 >> 2];
 }
 
 function jswrap_array_sort($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 80 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 72 >> 2] = $0;
  HEAP32[$2 + 68 >> 2] = $1;
  block1 : {
   block : {
    if (jsvIsUndefined(HEAP32[$2 + 68 >> 2]) & 1) {
     break block
    }
    if (jsvIsFunction(HEAP32[$2 + 68 >> 2]) & 1) {
     break block
    }
    HEAP32[$2 >> 2] = HEAP32[$2 + 68 >> 2];
    jsExceptionHere(1, 125975, $2);
    HEAP32[$2 + 76 >> 2] = 0;
    break block1;
   }
   HEAP32[$2 + 4 >> 2] = 0;
   block3 : {
    block2 : {
     if (!(jsvIsArray(HEAP32[$2 + 72 >> 2]) & 1)) {
      if (!(jsvIsObject(HEAP32[$2 + 72 >> 2]) & 1)) {
       break block2
      }
     }
     jsvIteratorNew($2 + 8 | 0, HEAP32[$2 + 72 >> 2], 1);
     while (1) {
      if (jsvIteratorHasElement($2 + 8 | 0) & 1) {
       HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
       jsvIteratorNext($2 + 8 | 0);
       continue;
      }
      break;
     };
     jsvIteratorFree($2 + 8 | 0);
     break block3;
    }
    HEAP32[$2 + 4 >> 2] = jsvGetLength(HEAP32[$2 + 72 >> 2]);
   }
   jsvIteratorNew($2 + 8 | 0, HEAP32[$2 + 72 >> 2], 1);
   _jswrap_array_sort($2 + 8 | 0, HEAP32[$2 + 4 >> 2], HEAP32[$2 + 68 >> 2]);
   jsvIteratorFree($2 + 8 | 0);
   HEAP32[$2 + 76 >> 2] = jsvLockAgain(HEAP32[$2 + 72 >> 2]);
  }
  __stack_pointer = $2 + 80 | 0;
  return HEAP32[$2 + 76 >> 2];
 }
 
 function _jswrap_array_sort($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 160 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 156 >> 2] = $0;
  HEAP32[$3 + 152 >> 2] = $1;
  HEAP32[$3 + 148 >> 2] = $2;
  block : {
   if (HEAP32[$3 + 152 >> 2] < 2) {
    break block
   }
   jsvIteratorClone($3 + 88 | 0, HEAP32[$3 + 156 >> 2]);
   HEAP8[$3 + 87 | 0] = 1;
   HEAP32[$3 + 80 >> 2] = jsvIteratorGetValue($3 + 88 | 0);
   HEAP32[$3 + 76 >> 2] = 0;
   HEAP32[$3 + 72 >> 2] = 0;
   jsvIteratorClone($3 + 12 | 0, HEAP32[$3 + 156 >> 2]);
   jsvIteratorNext($3 + 12 | 0);
   while (1) {
    $0 = HEAP32[$3 + 152 >> 2] - 1 | 0;
    HEAP32[$3 + 152 >> 2] = $0;
    $1 = 0;
    if ($0) {
     $1 = jspIsInterrupted() ^ -1
    }
    if ($1 & 1) {
     HEAP32[$3 + 8 >> 2] = jsvIteratorGetValue($3 + 12 | 0);
     HEAP32[$3 + 4 >> 2] = _jswrap_array_sort_compare(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 80 >> 2], HEAP32[$3 + 148 >> 2]);
     block1 : {
      if (HEAP32[$3 + 4 >> 2] <= 0) {
       if (HEAP32[$3 + 4 >> 2] < 0) {
        HEAP8[$3 + 87 | 0] = 0
       }
       HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
       jsvIteratorSetValue($3 + 88 | 0, HEAP32[$3 + 8 >> 2]);
       jsvIteratorNext($3 + 88 | 0);
       jsvUnLock(jsvIteratorSetValue($3 + 12 | 0, jsvIteratorGetValue($3 + 88 | 0)));
       jsvIteratorSetValue($3 + 88 | 0, HEAP32[$3 + 80 >> 2]);
       break block1;
      }
      HEAP32[$3 + 72 >> 2] = HEAP32[$3 + 72 >> 2] + 1;
     }
     jsvUnLock(HEAP32[$3 + 8 >> 2]);
     jsvIteratorNext($3 + 12 | 0);
     continue;
    }
    break;
   };
   jsvIteratorFree($3 + 12 | 0);
   jsvUnLock(HEAP32[$3 + 80 >> 2]);
   if (jspIsInterrupted() & 1) {
    jsvIteratorFree($3 + 88 | 0);
    break block;
   }
   jsvIteratorNext($3 + 88 | 0);
   _jswrap_array_sort($3 + 88 | 0, HEAP32[$3 + 72 >> 2], HEAP32[$3 + 148 >> 2]);
   jsvIteratorFree($3 + 88 | 0);
   if (HEAP8[$3 + 87 | 0] & 1) {
    break block
   }
   _jswrap_array_sort(HEAP32[$3 + 156 >> 2], HEAP32[$3 + 76 >> 2], HEAP32[$3 + 148 >> 2]);
  }
  __stack_pointer = $3 + 160 | 0;
 }
 
 function _jswrap_array_sort_compare($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 40 >> 2] = $0;
  HEAP32[$3 + 36 >> 2] = $1;
  HEAP32[$3 + 32 >> 2] = $2;
  block : {
   if (jsvIsUndefined(HEAP32[$3 + 40 >> 2]) & 1) {
    HEAP32[$3 + 44 >> 2] = 1;
    break block;
   }
   if (jsvIsUndefined(HEAP32[$3 + 36 >> 2]) & 1) {
    HEAP32[$3 + 44 >> 2] = -1;
    break block;
   }
   if (HEAP32[$3 + 32 >> 2]) {
    HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 40 >> 2];
    HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 36 >> 2];
    HEAPF64[$3 + 16 >> 3] = jsvGetFloatAndUnLock(jspeFunctionCall(HEAP32[$3 + 32 >> 2], 0, 0, 0, 2, $3 + 24 | 0));
    if (HEAPF64[$3 + 16 >> 3] == 0.0) {
     HEAP32[$3 + 44 >> 2] = 0;
     break block;
    }
    HEAP32[$3 + 44 >> 2] = HEAPF64[$3 + 16 >> 3] < 0.0 ? -1 : 1;
    break block;
   }
   HEAP32[$3 + 12 >> 2] = jsvAsString(HEAP32[$3 + 40 >> 2]);
   HEAP32[$3 + 8 >> 2] = jsvAsString(HEAP32[$3 + 36 >> 2]);
   HEAP32[$3 + 4 >> 2] = jsvCompareString(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], 0, 0, 0);
   jsvUnLock2(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
   HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 4 >> 2];
  }
  __stack_pointer = $3 + 48 | 0;
  return HEAP32[$3 + 44 >> 2];
 }
 
 function jswrap_array_concat($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  HEAP32[$2 + 20 >> 2] = jsvNewEmptyArray();
  jsvObjectIteratorNew($2 + 16 | 0, HEAP32[$2 + 24 >> 2]);
  HEAP32[$2 + 12 >> 2] = jsvLockAgain(HEAP32[$2 + 28 >> 2]);
  while (1) {
   block : {
    if (jsvIsArray(HEAP32[$2 + 12 >> 2]) & 1) {
     jsvArrayPushAll(HEAP32[$2 + 20 >> 2], HEAP32[$2 + 12 >> 2], 0);
     break block;
    }
    jsvArrayPush(HEAP32[$2 + 20 >> 2], HEAP32[$2 + 12 >> 2]);
   }
   jsvUnLock(HEAP32[$2 + 12 >> 2]);
   block1 : {
    if (jsvObjectIteratorHasValue_1325($2 + 16 | 0) & 1) {
     $0 = jsvObjectIteratorGetValue_1326($2 + 16 | 0);
     break block1;
    }
    $0 = 0;
   }
   HEAP32[$2 + 12 >> 2] = $0;
   jsvObjectIteratorNext($2 + 16 | 0);
   if (HEAP32[$2 + 12 >> 2]) {
    continue
   }
   break;
  };
  jsvObjectIteratorFree_1327($2 + 16 | 0);
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 20 >> 2];
 }
 
 function jswrap_array_fill($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 96 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 88 >> 2] = $0;
  HEAP32[$4 + 84 >> 2] = $1;
  HEAP32[$4 + 80 >> 2] = $2;
  HEAP32[$4 + 76 >> 2] = $3;
  block : {
   if (!(jsvIsIterable(HEAP32[$4 + 88 >> 2]) & 1)) {
    HEAP32[$4 + 92 >> 2] = 0;
    break block;
   }
   HEAP32[$4 + 72 >> 2] = jsvGetLength(HEAP32[$4 + 88 >> 2]);
   if (HEAP32[$4 + 80 >> 2] < 0) {
    HEAP32[$4 + 80 >> 2] = HEAP32[$4 + 80 >> 2] + HEAP32[$4 + 72 >> 2]
   }
   if (HEAP32[$4 + 80 >> 2] < 0) {
    HEAP32[$4 + 92 >> 2] = 0;
    break block;
   }
   block1 : {
    if (jsvIsNumeric(HEAP32[$4 + 76 >> 2]) & 1) {
     $0 = jsvGetInteger(HEAP32[$4 + 76 >> 2]);
     break block1;
    }
    $0 = HEAP32[$4 + 72 >> 2];
   }
   HEAP32[$4 + 68 >> 2] = $0;
   if (HEAP32[$4 + 68 >> 2] < 0) {
    HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 68 >> 2] + HEAP32[$4 + 72 >> 2]
   }
   if (HEAP32[$4 + 68 >> 2] < 0) {
    HEAP32[$4 + 92 >> 2] = 0;
    break block;
   }
   jsvIteratorNew($4 + 8 | 0, HEAP32[$4 + 88 >> 2], 1);
   while (1) {
    $0 = 0;
    if (jsvIteratorHasElement($4 + 8 | 0) & 1) {
     $0 = jspIsInterrupted() ^ -1
    }
    if ($0 & 1) {
     HEAP32[$4 + 4 >> 2] = jsvGetIntegerAndUnLock(jsvIteratorGetKey($4 + 8 | 0));
     if (!(HEAP32[$4 + 4 >> 2] < HEAP32[$4 + 80 >> 2] | HEAP32[$4 + 4 >> 2] >= HEAP32[$4 + 68 >> 2])) {
      jsvIteratorSetValue($4 + 8 | 0, HEAP32[$4 + 84 >> 2])
     }
     jsvIteratorNext($4 + 8 | 0);
     continue;
    }
    break;
   };
   jsvIteratorFree($4 + 8 | 0);
   HEAP32[$4 + 92 >> 2] = jsvLockAgain(HEAP32[$4 + 88 >> 2]);
  }
  __stack_pointer = $4 + 96 | 0;
  return HEAP32[$4 + 92 >> 2];
 }
 
 function _jswrap_array_reverse_block($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 160 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 156 >> 2] = $0;
  HEAP32[$3 + 152 >> 2] = $1;
  HEAP32[$3 + 148 >> 2] = $2;
  jsvIteratorClone($3 + 88 | 0, HEAP32[$3 + 152 >> 2]);
  jsvIteratorClone($3 + 28 | 0, HEAP32[$3 + 152 >> 2]);
  HEAP32[$3 + 24 >> 2] = (HEAP32[$3 + 148 >> 2] + 1 | 0) / 2;
  while (1) {
   if (HEAP32[$3 + 24 >> 2] > 0) {
    jsvIteratorNext($3 + 28 | 0);
    HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] - 1;
    continue;
   }
   break;
  };
  if (HEAP32[$3 + 148 >> 2] > 3) {
   _jswrap_array_reverse_block(HEAP32[$3 + 156 >> 2], $3 + 88 | 0, HEAP32[$3 + 148 >> 2] / 2 | 0);
   _jswrap_array_reverse_block(HEAP32[$3 + 156 >> 2], $3 + 28 | 0, HEAP32[$3 + 148 >> 2] / 2 | 0);
  }
  HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 148 >> 2] / 2;
  while (1) {
   if (HEAP32[$3 + 24 >> 2] > 0) {
    HEAP32[$3 + 20 >> 2] = jsvIteratorGetValue($3 + 88 | 0);
    HEAP32[$3 + 16 >> 2] = jsvIteratorGetValue($3 + 28 | 0);
    jsvIteratorSetValue($3 + 88 | 0, HEAP32[$3 + 16 >> 2]);
    jsvIteratorSetValue($3 + 28 | 0, HEAP32[$3 + 20 >> 2]);
    jsvUnLock2(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2]);
    if (jsvIsArray(HEAP32[$3 + 156 >> 2]) & 1) {
     HEAP32[$3 + 12 >> 2] = jsvIteratorGetKey($3 + 88 | 0);
     HEAP32[$3 + 8 >> 2] = jsvIteratorGetKey($3 + 28 | 0);
     HEAP32[$3 + 4 >> 2] = jsvGetInteger(HEAP32[$3 + 12 >> 2]);
     HEAP32[$3 >> 2] = jsvGetInteger(HEAP32[$3 + 8 >> 2]);
     jsvSetInteger(HEAP32[$3 + 12 >> 2], HEAP32[$3 >> 2]);
     jsvSetInteger(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
     jsvUnLock2(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
    }
    jsvIteratorNext($3 + 88 | 0);
    jsvIteratorNext($3 + 28 | 0);
    HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] - 1;
    continue;
   }
   break;
  };
  jsvIteratorFree($3 + 88 | 0);
  jsvIteratorFree($3 + 28 | 0);
  __stack_pointer = $3 + 160 | 0;
 }
 
 function jswrap_array_reverse($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 144 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 136 >> 2] = $0;
  block1 : {
   block : {
    if (jsvIsIterable(HEAP32[$1 + 136 >> 2]) & 1) {
     if (!(jsvIsObject(HEAP32[$1 + 136 >> 2]) & 1)) {
      break block
     }
    }
    HEAP32[$1 + 140 >> 2] = 0;
    break block1;
   }
   HEAP32[$1 + 132 >> 2] = 0;
   block2 : {
    if (jsvIsArray(HEAP32[$1 + 136 >> 2]) & 1) {
     jsvIteratorNew($1 + 72 | 0, HEAP32[$1 + 136 >> 2], 0);
     while (1) {
      if (jsvIteratorHasElement($1 + 72 | 0) & 1) {
       HEAP32[$1 + 68 >> 2] = jsvIteratorGetKey($1 + 72 | 0);
       if (jsvIsInt(HEAP32[$1 + 68 >> 2]) & 1) {
        HEAP32[$1 + 132 >> 2] = HEAP32[$1 + 132 >> 2] + 1
       }
       jsvUnLock(HEAP32[$1 + 68 >> 2]);
       jsvIteratorNext($1 + 72 | 0);
       continue;
      }
      break;
     };
     jsvIteratorFree($1 + 72 | 0);
     break block2;
    }
    HEAP32[$1 + 132 >> 2] = jsvGetLength(HEAP32[$1 + 136 >> 2]);
   }
   jsvIteratorNew($1 + 8 | 0, HEAP32[$1 + 136 >> 2], 0);
   if (HEAP32[$1 + 132 >> 2] > 1) {
    _jswrap_array_reverse_block(HEAP32[$1 + 136 >> 2], $1 + 8 | 0, HEAP32[$1 + 132 >> 2])
   }
   if (jsvIsArray(HEAP32[$1 + 136 >> 2]) & 1) {
    HEAP32[$1 + 4 >> 2] = jsvGetArrayLength(HEAP32[$1 + 136 >> 2]) - 1;
    while (1) {
     if (jsvIteratorHasElement($1 + 8 | 0) & 1) {
      HEAP32[$1 >> 2] = jsvIteratorGetKey($1 + 8 | 0);
      if (jsvIsInt(HEAP32[$1 >> 2]) & 1) {
       jsvSetInteger(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2] - jsvGetInteger(HEAP32[$1 >> 2]) | 0)
      }
      jsvUnLock(HEAP32[$1 >> 2]);
      jsvIteratorNext($1 + 8 | 0);
      continue;
     }
     break;
    };
   }
   jsvIteratorFree($1 + 8 | 0);
   HEAP32[$1 + 140 >> 2] = jsvLockAgain(HEAP32[$1 + 136 >> 2]);
  }
  __stack_pointer = $1 + 144 | 0;
  return HEAP32[$1 + 140 >> 2];
 }
 
 function jswrap_arraybuffer_constructor($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (HEAP32[$1 + 8 >> 2] < 0) {
    jsExceptionHere(1, 128160, 0);
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   if (HEAP32[$1 + 8 >> 2] > 16777215) {
    jsExceptionHere(1, 136471, 0);
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 4 >> 2] = 0;
   if (HEAP32[$1 + 8 >> 2] > 19) {
    HEAP32[$1 + 4 >> 2] = jsvNewFlatStringOfLength(HEAP32[$1 + 8 >> 2])
   }
   if (!HEAP32[$1 + 4 >> 2]) {
    HEAP32[$1 + 4 >> 2] = jsvNewStringOfLength(HEAP32[$1 + 8 >> 2], 0)
   }
   if (!HEAP32[$1 + 4 >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 >> 2] = jsvNewArrayBufferFromString(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 8 >> 2]);
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jswrap_typedarray_constructor($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 112 | 0;
  __stack_pointer = $4;
  HEAP8[$4 + 107 | 0] = $0;
  HEAP32[$4 + 100 >> 2] = $1;
  HEAP32[$4 + 96 >> 2] = $2;
  HEAP32[$4 + 92 >> 2] = $3;
  HEAP32[$4 + 88 >> 2] = 0;
  HEAP8[$4 + 87 | 0] = 0;
  block1 : {
   if (!(HEAP32[$4 + 96 >> 2] <= 65535 & HEAP32[$4 + 96 >> 2] >= 0)) {
    jsExceptionHere(1, 144439, 0);
    HEAP32[$4 + 108 >> 2] = 0;
    break block1;
   }
   block3 : {
    if (!(!(jsvIsArrayBuffer(HEAP32[$4 + 100 >> 2]) & 1) | HEAPU8[HEAP32[$4 + 100 >> 2] + 5 | 0] != 129)) {
     HEAP32[$4 + 88 >> 2] = jsvLockAgain(HEAP32[$4 + 100 >> 2]);
     break block3;
    }
    block4 : {
     if (jsvIsNumeric(HEAP32[$4 + 100 >> 2]) & 1) {
      HEAP32[$4 + 92 >> 2] = jsvGetInteger(HEAP32[$4 + 100 >> 2]);
      HEAP32[$4 + 96 >> 2] = 0;
      HEAP32[$4 + 88 >> 2] = jswrap_arraybuffer_constructor(Math_imul(HEAP32[$4 + 92 >> 2], HEAPU8[$4 + 107 | 0] & 15));
      break block4;
     }
     block5 : {
      if (!(jsvIsArray(HEAP32[$4 + 100 >> 2]) & 1)) {
       if (!(jsvIsArrayBuffer(HEAP32[$4 + 100 >> 2]) & 1)) {
        break block5
       }
      }
      HEAP32[$4 + 92 >> 2] = jsvGetLength(HEAP32[$4 + 100 >> 2]);
      HEAP32[$4 + 96 >> 2] = 0;
      HEAP32[$4 + 88 >> 2] = jswrap_arraybuffer_constructor(Math_imul(HEAP32[$4 + 92 >> 2], HEAPU8[$4 + 107 | 0] & 15));
      HEAP8[$4 + 87 | 0] = 1;
     }
    }
   }
   if (!HEAP32[$4 + 88 >> 2]) {
    HEAP32[$4 >> 2] = HEAP32[$4 + 100 >> 2];
    jsExceptionHere(1, 126446, $4);
    HEAP32[$4 + 108 >> 2] = 0;
    break block1;
   }
   if (!HEAP32[$4 + 92 >> 2]) {
    HEAP32[$4 + 92 >> 2] = (jsvGetArrayBufferLength(HEAP32[$4 + 88 >> 2]) - HEAP32[$4 + 96 >> 2] | 0) / (HEAPU8[$4 + 107 | 0] & 15);
    if (HEAP32[$4 + 92 >> 2] < 0) {
     HEAP32[$4 + 92 >> 2] = 0
    }
   }
   HEAP32[$4 + 80 >> 2] = jsvNewWithFlags(4);
   if (HEAP32[$4 + 80 >> 2]) {
    HEAP8[HEAP32[$4 + 80 >> 2] + 5 | 0] = HEAPU8[$4 + 107 | 0];
    $0 = HEAP32[$4 + 80 >> 2];
    $1 = HEAP32[$4 + 96 >> 2];
    HEAP8[$0 | 0] = $1;
    HEAP8[$0 + 1 | 0] = $1 >>> 8;
    $0 = HEAP32[$4 + 80 >> 2];
    $1 = HEAP32[$4 + 92 >> 2];
    HEAP8[$0 + 2 | 0] = $1;
    HEAP8[$0 + 3 | 0] = $1 >>> 8;
    HEAP8[$0 + 4 | 0] = $1 >>> 16;
    jsvSetFirstChild(HEAP32[$4 + 80 >> 2], jsvGetRef(jsvRef(HEAP32[$4 + 88 >> 2])) & 65535);
    if (HEAP8[$4 + 87 | 0] & 1) {
     jsvIteratorNew($4 + 20 | 0, HEAP32[$4 + 100 >> 2], 0);
     while (1) {
      if (jsvIteratorHasElement($4 + 20 | 0) & 1) {
       HEAP32[$4 + 16 >> 2] = jsvIteratorGetKey($4 + 20 | 0);
       if (jsvIsInt(HEAP32[$4 + 16 >> 2]) & 1) {
        HEAP32[$4 + 12 >> 2] = jsvIteratorGetValue($4 + 20 | 0);
        jsvArrayBufferSet(HEAP32[$4 + 80 >> 2], jsvGetInteger(HEAP32[$4 + 16 >> 2]), HEAP32[$4 + 12 >> 2]);
        jsvUnLock(HEAP32[$4 + 12 >> 2]);
       }
       jsvUnLock(HEAP32[$4 + 16 >> 2]);
       jsvIteratorNext($4 + 20 | 0);
       continue;
      }
      break;
     };
     jsvIteratorFree($4 + 20 | 0);
    }
   }
   jsvUnLock(HEAP32[$4 + 88 >> 2]);
   HEAP32[$4 + 108 >> 2] = HEAP32[$4 + 80 >> 2];
  }
  __stack_pointer = $4 + 112 | 0;
  return HEAP32[$4 + 108 >> 2];
 }
 
 function jswrap_arraybufferview_set($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 176 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 172 >> 2] = $0;
  HEAP32[$3 + 168 >> 2] = $1;
  HEAP32[$3 + 164 >> 2] = $2;
  block1 : {
   block : {
    if (jsvIsString(HEAP32[$3 + 168 >> 2]) & 1) {
     break block
    }
    if (jsvIsArray(HEAP32[$3 + 168 >> 2]) & 1) {
     break block
    }
    if (jsvIsArrayBuffer(HEAP32[$3 + 168 >> 2]) & 1) {
     break block
    }
    HEAP32[$3 >> 2] = HEAP32[$3 + 168 >> 2];
    jsExceptionHere(1, 125138, $3);
    break block1;
   }
   block2 : {
    if (!(jsvIsArrayBuffer(HEAP32[$3 + 172 >> 2]) & 1)) {
     break block2
    }
    if (!(jsvIsArrayBuffer(HEAP32[$3 + 168 >> 2]) & 1)) {
     break block2
    }
    HEAP32[$3 + 160 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$3 + 172 >> 2], 0);
    HEAP32[$3 + 156 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$3 + 168 >> 2], 0);
    if (HEAP32[$3 + 160 >> 2] == HEAP32[$3 + 156 >> 2]) {
     $0 = HEAP32[$3 + 172 >> 2];
     $1 = HEAP32[$3 + 168 >> 2];
     $4 = (Math_imul(HEAP32[$3 + 164 >> 2], HEAPU8[HEAP32[$3 + 172 >> 2] + 5 | 0] & 15) + (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8) | 0) >= (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8);
    }
    HEAP8[$3 + 155 | 0] = $4;
    jsvUnLock2(HEAP32[$3 + 160 >> 2], HEAP32[$3 + 156 >> 2]);
    if (HEAP8[$3 + 155 | 0] & 1) {
     HEAP32[$3 + 148 >> 2] = jsvGetArrayBufferLength(HEAP32[$3 + 168 >> 2]);
     HEAP32[$3 + 144 >> 2] = HEAP32[$3 + 148 >> 2] - 1;
     while (1) {
      if (HEAP32[$3 + 144 >> 2] >= 0) {
       HEAP32[$3 + 140 >> 2] = jsvArrayBufferGet(HEAP32[$3 + 168 >> 2], HEAP32[$3 + 144 >> 2]);
       jsvArrayBufferSet(HEAP32[$3 + 172 >> 2], HEAP32[$3 + 164 >> 2] + HEAP32[$3 + 144 >> 2] | 0, HEAP32[$3 + 140 >> 2]);
       jsvUnLock(HEAP32[$3 + 140 >> 2]);
       HEAP32[$3 + 144 >> 2] = HEAP32[$3 + 144 >> 2] - 1;
       continue;
      }
      break;
     };
     break block1;
    }
   }
   jsvIteratorNew($3 + 80 | 0, HEAP32[$3 + 168 >> 2], 1);
   jsvArrayBufferIteratorNew($3 + 24 | 0, HEAP32[$3 + 172 >> 2], HEAP32[$3 + 164 >> 2]);
   $0 = 1;
   if (HEAPU8[$3 + 60 | 0] & 32) {
    $0 = jsvIsString(HEAP32[$3 + 168 >> 2])
   }
   HEAP8[$3 + 23 | 0] = $0 & 1;
   while (1) {
    $0 = 0;
    if (jsvIteratorHasElement($3 + 80 | 0) & 1) {
     $0 = jsvArrayBufferIteratorHasElement($3 + 24 | 0)
    }
    if ($0 & 1) {
     block3 : {
      if (HEAP8[$3 + 23 | 0] & 1) {
       jsvArrayBufferIteratorSetIntegerValue($3 + 24 | 0, jsvIteratorGetIntegerValue($3 + 80 | 0));
       break block3;
      }
      HEAP32[$3 + 16 >> 2] = jsvIteratorGetValue($3 + 80 | 0);
      jsvArrayBufferIteratorSetValue($3 + 24 | 0, HEAP32[$3 + 16 >> 2], 0);
      jsvUnLock(HEAP32[$3 + 16 >> 2]);
     }
     jsvArrayBufferIteratorNext($3 + 24 | 0);
     jsvIteratorNext($3 + 80 | 0);
     continue;
    }
    break;
   };
   jsvArrayBufferIteratorFree($3 + 24 | 0);
   jsvIteratorFree($3 + 80 | 0);
  }
  __stack_pointer = $3 + 176 | 0;
 }
 
 function jswrap_arraybufferview_map($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 176 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 168 >> 2] = $0;
  HEAP32[$3 + 164 >> 2] = $1;
  HEAP32[$3 + 160 >> 2] = $2;
  block : {
   if (!(jsvIsArrayBuffer(HEAP32[$3 + 168 >> 2]) & 1)) {
    jsExceptionHere(1, 124174, 0);
    HEAP32[$3 + 172 >> 2] = 0;
    break block;
   }
   if (!(jsvIsFunction(HEAP32[$3 + 164 >> 2]) & 1)) {
    jsExceptionHere(1, 135275, 0);
    HEAP32[$3 + 172 >> 2] = 0;
    break block;
   }
   block1 : {
    if (jsvIsUndefined(HEAP32[$3 + 160 >> 2]) & 1) {
     break block1
    }
    if (jsvIsObject(HEAP32[$3 + 160 >> 2]) & 1) {
     break block1
    }
    jsExceptionHere(1, 138809, 0);
    HEAP32[$3 + 172 >> 2] = 0;
    break block;
   }
   HEAP8[$3 + 159 | 0] = HEAPU8[HEAP32[$3 + 168 >> 2] + 5 | 0];
   HEAP32[$3 + 152 >> 2] = jsvNewTypedArray(HEAPU8[$3 + 159 | 0], jsvGetArrayBufferLength(HEAP32[$3 + 168 >> 2]));
   if (!HEAP32[$3 + 152 >> 2]) {
    HEAP32[$3 + 172 >> 2] = 0;
    break block;
   }
   jsvIteratorNew($3 + 92 | 0, HEAP32[$3 + 168 >> 2], 1);
   jsvArrayBufferIteratorNew($3 + 36 | 0, HEAP32[$3 + 152 >> 2], 0);
   while (1) {
    if (jsvIteratorHasElement($3 + 92 | 0) & 1) {
     HEAP32[$3 + 32 >> 2] = jsvIteratorGetKey($3 + 92 | 0);
     if (jsvIsInt(HEAP32[$3 + 32 >> 2]) & 1) {
      HEAP32[$3 + 28 >> 2] = jsvGetInteger(HEAP32[$3 + 32 >> 2]);
      HEAP32[$3 + 16 >> 2] = jsvIteratorGetValue($3 + 92 | 0);
      HEAP32[$3 + 20 >> 2] = jsvNewFromInteger(HEAP32[$3 + 28 >> 2]);
      HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 168 >> 2];
      HEAP32[$3 + 12 >> 2] = jspeFunctionCall(HEAP32[$3 + 164 >> 2], 0, HEAP32[$3 + 160 >> 2], 0, 3, $3 + 16 | 0);
      jsvUnLockMany(2, $3 + 16 | 0);
      if (HEAP32[$3 + 12 >> 2]) {
       jsvArrayBufferIteratorSetValue($3 + 36 | 0, HEAP32[$3 + 12 >> 2], 0);
       jsvUnLock(HEAP32[$3 + 12 >> 2]);
      }
     }
     jsvUnLock(HEAP32[$3 + 32 >> 2]);
     jsvIteratorNext($3 + 92 | 0);
     jsvArrayBufferIteratorNext($3 + 36 | 0);
     continue;
    }
    break;
   };
   jsvIteratorFree($3 + 92 | 0);
   jsvArrayBufferIteratorFree($3 + 36 | 0);
   HEAP32[$3 + 172 >> 2] = HEAP32[$3 + 152 >> 2];
  }
  __stack_pointer = $3 + 176 | 0;
  return HEAP32[$3 + 172 >> 2];
 }
 
 function jswrap_arraybufferview_subarray($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP32[$3 + 16 >> 2] = $2;
  block : {
   if (!(jsvIsArrayBuffer(HEAP32[$3 + 24 >> 2]) & 1)) {
    jsExceptionHere(1, 124108, 0);
    HEAP32[$3 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$3 + 12 >> 2] = jsvGetInteger(HEAP32[$3 + 16 >> 2]);
   if (!(jsvIsNumeric(HEAP32[$3 + 16 >> 2]) & 1)) {
    HEAP32[$3 + 12 >> 2] = jsvGetArrayBufferLength(HEAP32[$3 + 24 >> 2])
   }
   if (HEAP32[$3 + 20 >> 2] < 0) {
    HEAP32[$3 + 20 >> 2] = jsvGetArrayBufferLength(HEAP32[$3 + 24 >> 2]) + HEAP32[$3 + 20 >> 2]
   }
   if (HEAP32[$3 + 12 >> 2] < 0) {
    HEAP32[$3 + 12 >> 2] = jsvGetArrayBufferLength(HEAP32[$3 + 24 >> 2]) + HEAP32[$3 + 12 >> 2]
   }
   if (HEAP32[$3 + 12 >> 2] < 0) {
    HEAP32[$3 + 12 >> 2] = 0
   }
   if (HEAP32[$3 + 20 >> 2] > HEAP32[$3 + 12 >> 2]) {
    HEAP32[$3 + 20 >> 2] = 0;
    HEAP32[$3 + 12 >> 2] = 0;
   }
   HEAP8[$3 + 11 | 0] = HEAPU8[HEAP32[$3 + 24 >> 2] + 5 | 0];
   if (HEAP32[$3 + 20 >> 2] == HEAP32[$3 + 12 >> 2]) {
    HEAP32[$3 + 28 >> 2] = jsvNewTypedArray(HEAPU8[$3 + 11 | 0], 0);
    break block;
   }
   HEAP32[$3 + 4 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$3 + 24 >> 2]) & 65535);
   $0 = HEAP32[$3 + 24 >> 2];
   HEAP32[$3 >> 2] = jswrap_typedarray_constructor(HEAPU8[$3 + 11 | 0], HEAP32[$3 + 4 >> 2], Math_imul(HEAP32[$3 + 20 >> 2], HEAPU8[$3 + 11 | 0] & 15) + (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8) | 0, HEAP32[$3 + 12 >> 2] - HEAP32[$3 + 20 >> 2] | 0);
   jsvUnLock(HEAP32[$3 + 4 >> 2]);
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 >> 2];
  }
  __stack_pointer = $3 + 32 | 0;
  return HEAP32[$3 + 28 >> 2];
 }
 
 function jswrap_arraybufferview_sort($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  block : {
   if (!(jsvIsArrayBuffer(HEAP32[$2 + 24 >> 2]) & 1)) {
    HEAP32[$2 + 28 >> 2] = 0;
    break block;
   }
   HEAP8[$2 + 19 | 0] = (HEAPU8[HEAP32[$2 + 24 >> 2] + 5 | 0] & 32) != 0;
   if (HEAP32[$2 + 20 >> 2]) {
    HEAP32[$2 + 28 >> 2] = jswrap_array_sort(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2]);
    break block;
   }
   block1 : {
    if (HEAP8[$2 + 19 | 0] & 1) {
     $0 = jsvNewNativeFunction(617, 511);
     break block1;
    }
    $0 = jsvNewNativeFunction(618, 292);
   }
   HEAP32[$2 + 20 >> 2] = $0;
   HEAP32[$2 + 12 >> 2] = jswrap_array_sort(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2]);
   jsvUnLock(HEAP32[$2 + 20 >> 2]);
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function _jswrap_arraybufferview_sort_float($0, $1) {
  $0 = +$0;
  $1 = +$1;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAPF64[$2 + 8 >> 3] = $0;
  HEAPF64[$2 >> 3] = $1;
  return +(HEAPF64[$2 + 8 >> 3] - HEAPF64[$2 >> 3]);
 }
 
 function _jswrap_arraybufferview_sort_int($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  return HEAP32[$2 + 12 >> 2] - HEAP32[$2 + 8 >> 2] | 0;
 }
 
 function jswrap_dataview_constructor($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP32[$3 + 16 >> 2] = $2;
  block1 : {
   if (!(jsvIsArrayBuffer(HEAP32[$3 + 24 >> 2]) & 1 & HEAPU8[HEAP32[$3 + 24 >> 2] + 5 | 0] == 129)) {
    HEAP32[$3 >> 2] = HEAP32[$3 + 24 >> 2];
    jsExceptionHere(3, 125824, $3);
    HEAP32[$3 + 28 >> 2] = 0;
    break block1;
   }
   HEAP32[$3 + 12 >> 2] = jspNewObject(0, 124215);
   if (HEAP32[$3 + 12 >> 2]) {
    jsvObjectSetChild(HEAP32[$3 + 12 >> 2], 128153, HEAP32[$3 + 24 >> 2]);
    jsvObjectSetChildAndUnLock(HEAP32[$3 + 12 >> 2], 125054, jsvNewFromInteger(HEAP32[$3 + 20 >> 2]));
    $1 = HEAP32[$3 + 12 >> 2];
    if (HEAP32[$3 + 16 >> 2]) {
     $0 = HEAP32[$3 + 16 >> 2]
    } else {
     $0 = jsvGetArrayBufferLength(HEAP32[$3 + 24 >> 2])
    }
    jsvObjectSetChildAndUnLock($1, 136154, jsvNewFromInteger($0));
   }
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
  }
  __stack_pointer = $3 + 32 | 0;
  return HEAP32[$3 + 28 >> 2];
 }
 
 function jswrap_dataview_get($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 96 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 88 >> 2] = $0;
  HEAP8[$4 + 87 | 0] = $1;
  HEAP32[$4 + 80 >> 2] = $2;
  HEAP8[$4 + 79 | 0] = $3;
  HEAP32[$4 + 72 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 88 >> 2], 128153);
  block : {
   if (!(jsvIsArrayBuffer(HEAP32[$4 + 72 >> 2]) & 1)) {
    jsvUnLock(HEAP32[$4 + 72 >> 2]);
    HEAP32[$4 + 92 >> 2] = 0;
    break block;
   }
   HEAP32[$4 + 80 >> 2] = jsvObjectGetIntegerChild(HEAP32[$4 + 88 >> 2], 125054) + HEAP32[$4 + 80 >> 2];
   HEAP32[$4 + 68 >> 2] = HEAPU8[$4 + 87 | 0] & 15;
   HEAP32[$4 + 64 >> 2] = jswrap_typedarray_constructor(HEAPU8[$4 + 87 | 0], HEAP32[$4 + 72 >> 2], HEAP32[$4 + 80 >> 2], HEAP32[$4 + 68 >> 2]);
   jsvUnLock(HEAP32[$4 + 72 >> 2]);
   if (!HEAP32[$4 + 64 >> 2]) {
    HEAP32[$4 + 92 >> 2] = 0;
    break block;
   }
   jsvArrayBufferIteratorNew($4 + 8 | 0, HEAP32[$4 + 64 >> 2], 0);
   HEAP32[$4 + 4 >> 2] = jsvArrayBufferIteratorGetValue($4 + 8 | 0, (HEAPU8[$4 + 79 | 0] ^ -1) & 1);
   jsvArrayBufferIteratorFree($4 + 8 | 0);
   jsvUnLock(HEAP32[$4 + 64 >> 2]);
   HEAP32[$4 + 92 >> 2] = HEAP32[$4 + 4 >> 2];
  }
  __stack_pointer = $4 + 96 | 0;
  return HEAP32[$4 + 92 >> 2];
 }
 
 function jswrap_dataview_set($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 96 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 92 >> 2] = $0;
  HEAP8[$5 + 91 | 0] = $1;
  HEAP32[$5 + 84 >> 2] = $2;
  HEAP32[$5 + 80 >> 2] = $3;
  HEAP8[$5 + 79 | 0] = $4;
  HEAP32[$5 + 72 >> 2] = jsvObjectGetChildIfExists(HEAP32[$5 + 92 >> 2], 128153);
  block : {
   if (!(jsvIsArrayBuffer(HEAP32[$5 + 72 >> 2]) & 1)) {
    jsvUnLock(HEAP32[$5 + 72 >> 2]);
    break block;
   }
   HEAP32[$5 + 84 >> 2] = jsvObjectGetIntegerChild(HEAP32[$5 + 92 >> 2], 125054) + HEAP32[$5 + 84 >> 2];
   HEAP32[$5 + 68 >> 2] = HEAPU8[$5 + 91 | 0] & 15;
   HEAP32[$5 + 64 >> 2] = jswrap_typedarray_constructor(HEAPU8[$5 + 91 | 0], HEAP32[$5 + 72 >> 2], HEAP32[$5 + 84 >> 2], HEAP32[$5 + 68 >> 2]);
   jsvUnLock(HEAP32[$5 + 72 >> 2]);
   if (!HEAP32[$5 + 64 >> 2]) {
    break block
   }
   jsvArrayBufferIteratorNew($5 + 8 | 0, HEAP32[$5 + 64 >> 2], 0);
   jsvArrayBufferIteratorSetValue($5 + 8 | 0, HEAP32[$5 + 80 >> 2], (HEAPU8[$5 + 79 | 0] ^ -1) & 1);
   jsvArrayBufferIteratorFree($5 + 8 | 0);
   jsvUnLock(HEAP32[$5 + 64 >> 2]);
  }
  __stack_pointer = $5 + 96 | 0;
 }
 
 function integerDivideFloor($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  if (HEAP32[$2 + 12 >> 2] < 0) {
   $0 = (HEAP32[$2 + 12 >> 2] - HEAP32[$2 + 8 >> 2] | 0) + 1 | 0
  } else {
   $0 = HEAP32[$2 + 12 >> 2]
  }
  return ($0 | 0) / HEAP32[$2 + 8 >> 2] | 0;
 }
 
 function getDayNumberFromDate($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP32[$3 + 16 >> 2] = $2;
  block1 : {
   if (!(HEAP32[$3 + 24 >> 2] < 125e4 & HEAP32[$3 + 24 >> 2] >= -125e4)) {
    jsExceptionHere(1, 127582, 0);
    HEAP32[$3 + 28 >> 2] = 0;
    break block1;
   }
   while (1) {
    if (HEAP32[$3 + 20 >> 2] < 2) {
     HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] - 1;
     HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] + 12;
     continue;
    }
    break;
   };
   HEAP32[$3 + 12 >> 2] = integerDivideFloor(HEAP32[$3 + 24 >> 2], 100);
   HEAP32[$3 + 28 >> 2] = ((((((Math_imul(HEAP32[$3 + 24 >> 2], 365) + integerDivideFloor(HEAP32[$3 + 24 >> 2], 4) | 0) - HEAP32[$3 + 12 >> 2] | 0) + integerDivideFloor(HEAP32[$3 + 12 >> 2], 4) | 0) + Math_imul(HEAP32[$3 + 20 >> 2], 30) | 0) + ((Math_imul(HEAP32[$3 + 20 >> 2], 3) + 6 | 0) / 5 | 0) | 0) + HEAP32[$3 + 16 >> 2] | 0) - 719531;
  }
  __stack_pointer = $3 + 32 | 0;
  return HEAP32[$3 + 28 >> 2];
 }
 
 function getDateFromDayNumber($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 28 >> 2] + 135081;
  HEAP32[$4 + 12 >> 2] = integerDivideFloor((HEAP32[$4 + 12 >> 2] - integerDivideFloor(HEAP32[$4 + 12 >> 2], 146097) | 0) + 146095 | 0, 36524);
  HEAP32[$4 + 12 >> 2] = (HEAP32[$4 + 28 >> 2] + HEAP32[$4 + 12 >> 2] | 0) - integerDivideFloor(HEAP32[$4 + 12 >> 2], 4);
  HEAP32[$4 + 8 >> 2] = integerDivideFloor((HEAP32[$4 + 12 >> 2] << 2) + 2877911 | 0, 1461);
  HEAP32[$4 + 4 >> 2] = ((HEAP32[$4 + 12 >> 2] + 719600 | 0) - Math_imul(HEAP32[$4 + 8 >> 2], 365) | 0) - integerDivideFloor(HEAP32[$4 + 8 >> 2], 4);
  HEAP32[$4 >> 2] = (Math_imul(HEAP32[$4 + 4 >> 2], 5) - 1 | 0) / 153;
  if (HEAP32[$4 + 16 >> 2]) {
   HEAP32[HEAP32[$4 + 16 >> 2] >> 2] = (HEAP32[$4 + 4 >> 2] - Math_imul(HEAP32[$4 >> 2], 30) | 0) - ((Math_imul(HEAP32[$4 >> 2], 3) | 0) / 5 | 0)
  }
  if (HEAP32[$4 + 20 >> 2]) {
   block : {
    if (HEAP32[$4 >> 2] < 14) {
     HEAP32[HEAP32[$4 + 20 >> 2] >> 2] = HEAP32[$4 >> 2] - 2;
     break block;
    }
    HEAP32[HEAP32[$4 + 20 >> 2] >> 2] = HEAP32[$4 >> 2] - 14;
   }
  }
  if (HEAP32[$4 + 24 >> 2]) {
   block1 : {
    if (HEAP32[$4 >> 2] > 13) {
     HEAP32[HEAP32[$4 + 24 >> 2] >> 2] = HEAP32[$4 + 8 >> 2] + 1;
     break block1;
    }
    HEAP32[HEAP32[$4 + 24 >> 2] >> 2] = HEAP32[$4 + 8 >> 2];
   }
  }
  __stack_pointer = $4 + 32 | 0;
 }
 
 function getDstChangeTime($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  var $10 = 0;
  $10 = __stack_pointer - 48 | 0;
  __stack_pointer = $10;
  HEAP32[$10 + 44 >> 2] = $0;
  HEAP32[$10 + 40 >> 2] = $1;
  HEAP32[$10 + 36 >> 2] = $2;
  HEAP32[$10 + 32 >> 2] = $3;
  HEAP32[$10 + 28 >> 2] = $4;
  HEAP32[$10 + 24 >> 2] = $5;
  HEAP8[$10 + 23 | 0] = $6;
  HEAP32[$10 + 16 >> 2] = $7;
  HEAP32[$10 + 12 >> 2] = $8;
  HEAP8[$10 + 11 | 0] = $9;
  if (HEAP32[$10 + 40 >> 2] == 4) {
   $0 = HEAP32[$10 + 32 >> 2] + 1 | 0;
   HEAP32[$10 + 32 >> 2] = $0;
   if (($0 | 0) > 11) {
    HEAP32[$10 + 44 >> 2] = HEAP32[$10 + 44 >> 2] + 1;
    HEAP32[$10 + 32 >> 2] = HEAP32[$10 + 32 >> 2] - 12;
   }
  }
  HEAP32[$10 + 4 >> 2] = getDayNumberFromDate(HEAP32[$10 + 44 >> 2], HEAP32[$10 + 32 >> 2], 1);
  block : {
   if (HEAP32[$10 + 40 >> 2] == 4) {
    HEAP32[$10 + 4 >> 2] = HEAP32[$10 + 4 >> 2] + (((HEAP32[$10 + 36 >> 2] + (14 - ((HEAP32[$10 + 4 >> 2] + 4 | 0) % 7 | 0) | 0) | 0) % 7 | 0) - 7 | 0);
    break block;
   }
   HEAP32[$10 + 4 >> 2] = HEAP32[$10 + 4 >> 2] + (Math_imul(HEAP32[$10 + 40 >> 2], 7) + ((HEAP32[$10 + 36 >> 2] + (14 - ((HEAP32[$10 + 4 >> 2] + 4 | 0) % 7 | 0) | 0) | 0) % 7 | 0) | 0);
  }
  HEAP32[$10 + 4 >> 2] = HEAP32[$10 + 24 >> 2] + Math_imul(HEAP32[$10 + 4 >> 2] + HEAP32[$10 + 28 >> 2] | 0, 1440);
  if (!(HEAP8[$10 + 11 | 0] & 1)) {
   HEAP32[$10 + 4 >> 2] = HEAP32[$10 + 4 >> 2] - HEAP32[$10 + 12 >> 2];
   if (!(HEAP8[$10 + 23 | 0] & 1)) {
    HEAP32[$10 + 4 >> 2] = HEAP32[$10 + 4 >> 2] - HEAP32[$10 + 16 >> 2]
   }
  }
  __stack_pointer = $10 + 48 | 0;
  return +HEAP32[$10 + 4 >> 2] * 60.0;
 }
 
 function jsdGetEffectiveTimeZone($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 176 | 0;
  __stack_pointer = $3;
  HEAPF64[$3 + 160 >> 3] = $0;
  HEAP8[$3 + 159 | 0] = $1;
  HEAP32[$3 + 152 >> 2] = $2;
  HEAP32[$3 + 148 >> 2] = jsvObjectGetChildIfExists(HEAP32[92131], 124565);
  block3 : {
   block4 : {
    block : {
     if (!HEAP32[$3 + 148 >> 2]) {
      break block
     }
     if (!(jsvIsArrayBuffer(HEAP32[$3 + 148 >> 2]) & 1)) {
      break block
     }
     if ((jsvGetLength(HEAP32[$3 + 148 >> 2]) | 0) != 12 | HEAPU8[HEAP32[$3 + 148 >> 2] + 5 | 0] != 18) {
      break block
     }
     jsvArrayBufferIteratorNew($3 + 40 | 0, HEAP32[$3 + 148 >> 2], 0);
     HEAP32[$3 + 144 >> 2] = 0;
     while (1) {
      if (HEAP32[$3 + 144 >> 2] < 12) {
       $2 = jsvArrayBufferIteratorGetIntegerValue($3 + 40 | 0);
       $1 = HEAP32[$3 + 144 >> 2];
       HEAP32[$3 + 144 >> 2] = $1 + 1;
       HEAP32[($3 + 96 | 0) + ($1 << 2) >> 2] = $2;
       jsvArrayBufferIteratorNext($3 + 40 | 0);
       continue;
      }
      break;
     };
     jsvArrayBufferIteratorFree($3 + 40 | 0);
     jsvUnLock(HEAP32[$3 + 148 >> 2]);
     if (HEAP32[$3 + 96 >> 2]) {
      HEAPF64[$3 + 32 >> 3] = HEAPF64[$3 + 160 >> 3] / 1.0e3;
      $0 = HEAPF64[$3 + 32 >> 3] / 86400.0;
      if (Math_abs($0) < 2147483647.0) {
       $1 = ~~$0
      } else {
       $1 = -2147483648
      }
      getDateFromDayNumber($1, $3 + 144 | 0, 0, 0);
      HEAPF64[$3 + 24 >> 3] = getDstChangeTime(HEAP32[$3 + 144 >> 2], HEAP32[$3 + 104 >> 2], HEAP32[$3 + 108 >> 2], HEAP32[$3 + 112 >> 2], HEAP32[$3 + 116 >> 2], HEAP32[$3 + 120 >> 2], 1, HEAP32[$3 + 96 >> 2], HEAP32[$3 + 100 >> 2], HEAP8[$3 + 159 | 0] & 1);
      HEAPF64[$3 + 16 >> 3] = getDstChangeTime(HEAP32[$3 + 144 >> 2], HEAP32[$3 + 124 >> 2], HEAP32[$3 + 128 >> 2], HEAP32[$3 + 132 >> 2], HEAP32[$3 + 136 >> 2], HEAP32[$3 + 140 >> 2], 0, HEAP32[$3 + 96 >> 2], HEAP32[$3 + 100 >> 2], HEAP8[$3 + 159 | 0] & 1);
      block1 : {
       if (HEAPF64[$3 + 24 >> 3] < HEAPF64[$3 + 16 >> 3]) {
        $4 = HEAPF64[$3 + 32 >> 3] >= HEAPF64[$3 + 24 >> 3] ? HEAPF64[$3 + 32 >> 3] < HEAPF64[$3 + 16 >> 3] : $4;
        HEAP8[$3 + 15 | 0] = $4;
        break block1;
       }
       $1 = 1;
       $1 = HEAPF64[$3 + 32 >> 3] < HEAPF64[$3 + 16 >> 3] ? $1 : HEAPF64[$3 + 32 >> 3] >= HEAPF64[$3 + 24 >> 3];
       HEAP8[$3 + 15 | 0] = $1;
      }
      if (HEAP32[$3 + 152 >> 2]) {
       HEAP8[HEAP32[$3 + 152 >> 2]] = HEAP8[$3 + 15 | 0] & 1
      }
      if (HEAP8[$3 + 15 | 0] & 1) {
       $1 = HEAP32[$3 + 96 >> 2] + HEAP32[$3 + 100 >> 2] | 0
      } else {
       $1 = HEAP32[$3 + 100 >> 2]
      }
      HEAP32[$3 + 172 >> 2] = $1;
      break block3;
     }
     break block4;
    }
    jsvUnLock(HEAP32[$3 + 148 >> 2]);
   }
   if (HEAP32[$3 + 152 >> 2]) {
    HEAP8[HEAP32[$3 + 152 >> 2]] = 0
   }
   HEAP32[$3 + 172 >> 2] = jsvObjectGetIntegerChild(HEAP32[92131], 123563);
  }
  __stack_pointer = $3 + 176 | 0;
  return HEAP32[$3 + 172 >> 2];
 }
 
 function setCorrectTimeZone($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[HEAP32[$1 + 12 >> 2] + 20 >> 2] = 0;
  $0 = jsdGetEffectiveTimeZone(fromTimeInDay(HEAP32[$1 + 12 >> 2]), 1, HEAP32[$1 + 12 >> 2] + 24 | 0);
  HEAP32[HEAP32[$1 + 12 >> 2] + 20 >> 2] = $0;
  __stack_pointer = $1 + 16 | 0;
 }
 
 function fromTimeInDay($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return +HEAP32[HEAP32[$1 + 12 >> 2] >> 2] * 864.0e5 + +(HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] + Math_imul(HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + Math_imul((HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2] + Math_imul(HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2], 60) | 0) - HEAP32[HEAP32[$1 + 12 >> 2] + 20 >> 2] | 0, 60) | 0, 1e3) | 0);
 }
 
 function getTimeFromMilliSeconds($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAPF64[$3 + 24 >> 3] = $1;
  HEAP8[$3 + 23 | 0] = $2;
  if (HEAP8[$3 + 23 | 0] & 1) {
   $2 = 0
  } else {
   $2 = jsdGetEffectiveTimeZone(HEAPF64[$3 + 24 >> 3], 0, $0 + 24 | 0)
  }
  HEAP32[$0 + 20 >> 2] = $2;
  HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 24 >> 3] + +(Math_imul(HEAP32[$0 + 20 >> 2], 6e4) | 0);
  $1 = HEAPF64[$3 + 24 >> 3] / 864.0e5;
  if (Math_abs($1) < 2147483647.0) {
   $2 = ~~$1
  } else {
   $2 = -2147483648
  }
  HEAP32[$0 >> 2] = $2;
  if (HEAP8[$3 + 23 | 0] & 1) {
   HEAP8[$0 + 24 | 0] = 0
  }
  $1 = +HEAP32[$0 >> 2] * -864.0e5 + HEAPF64[$3 + 24 >> 3];
  if (Math_abs($1) < 2147483647.0) {
   $2 = ~~$1
  } else {
   $2 = -2147483648
  }
  HEAP32[$3 + 16 >> 2] = $2;
  if (HEAP32[$3 + 16 >> 2] < 0) {
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] + 864e5;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] - 1;
  }
  HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 16 >> 2] / 1e3;
  HEAP32[$0 + 4 >> 2] = HEAP32[$3 + 16 >> 2] % 1e3;
  HEAP32[$0 + 16 >> 2] = HEAP32[$3 + 12 >> 2] / 3600;
  HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] % 3600;
  HEAP32[$0 + 12 >> 2] = HEAP32[$3 + 12 >> 2] / 60;
  HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 12 >> 2] % 60;
  __stack_pointer = $3 + 32 | 0;
 }
 
 function getCalendarDate($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $1;
  getDateFromDayNumber(HEAP32[$2 + 12 >> 2], $0 + 12 | 0, $0 + 8 | 0, $0 + 4 | 0);
  HEAP32[$0 >> 2] = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 16 >> 2] = (HEAP32[$0 >> 2] + 4 | 0) % 7;
  if (HEAP32[$0 + 16 >> 2] < 0) {
   HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] + 7
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function fromCalendarDate($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  while (1) {
   if (HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] < 0) {
    $0 = HEAP32[$1 + 12 >> 2];
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] - 1;
    $0 = HEAP32[$1 + 12 >> 2];
    HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 12;
    continue;
   }
   break;
  };
  while (1) {
   if (HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] > 11) {
    $0 = HEAP32[$1 + 12 >> 2];
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
    $0 = HEAP32[$1 + 12 >> 2];
    HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] - 12;
    continue;
   }
   break;
  };
  $0 = getDayNumberFromDate(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2], HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2], HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return $0;
 }
 
 function jswrap_date_now() {
  return +((+(jshGetSystemTime() >>> 0) + +(i64toi32_i32$HIGH_BITS | 0) * 4294967296.0) * (1.0e3 / (+(jshGetTimeFromMilliseconds(1.0e3) >>> 0) + +(i64toi32_i32$HIGH_BITS | 0) * 4294967296.0)));
 }
 
 function jswrap_date_from_milliseconds($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAPF64[$1 + 8 >> 3] = $0;
  HEAP32[$1 + 4 >> 2] = jspNewObject(0, 137413);
  jswrap_date_setTime(HEAP32[$1 + 4 >> 2], HEAPF64[$1 + 8 >> 3]);
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 4 >> 2];
 }
 
 function jswrap_date_setTime($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 20 >> 2] = $0;
  HEAPF64[$2 + 8 >> 3] = $1;
  block1 : {
   if (HEAPF64[$2 + 8 >> 3] < -395083256832.0e5 | HEAPF64[$2 + 8 >> 3] >= 393840543168.0e5) {
    jsExceptionHere(1, 127582, 0);
    HEAPF64[$2 + 24 >> 3] = 0;
    break block1;
   }
   if (HEAP32[$2 + 20 >> 2]) {
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 20 >> 2], 127277, jsvNewFromFloat(HEAPF64[$2 + 8 >> 3]))
   }
   HEAPF64[$2 + 24 >> 3] = HEAPF64[$2 + 8 >> 3];
  }
  __stack_pointer = $2 + 32 | 0;
  return +HEAPF64[$2 + 24 >> 3];
 }
 
 function jswrap_date_constructor($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 80 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 76 >> 2] = $0;
  HEAPF64[$1 + 64 >> 3] = 0;
  block : {
   if (!jsvGetArrayLength(HEAP32[$1 + 76 >> 2])) {
    HEAPF64[$1 + 64 >> 3] = jswrap_date_now();
    break block;
   }
   block3 : {
    if ((jsvGetArrayLength(HEAP32[$1 + 76 >> 2]) | 0) == 1) {
     HEAP32[$1 + 60 >> 2] = jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 0);
     block1 : {
      if (jsvIsNumeric(HEAP32[$1 + 60 >> 2]) & 1) {
       HEAPF64[$1 + 64 >> 3] = jsvGetFloat(HEAP32[$1 + 60 >> 2]);
       break block1;
      }
      block2 : {
       if (jsvIsString(HEAP32[$1 + 60 >> 2]) & 1) {
        HEAPF64[$1 + 64 >> 3] = jswrap_date_parse(HEAP32[$1 + 60 >> 2]);
        break block2;
       }
       HEAP32[$1 >> 2] = HEAP32[$1 + 60 >> 2];
       jsExceptionHere(3, 127773, $1);
      }
     }
     jsvUnLock(HEAP32[$1 + 60 >> 2]);
     break block3;
    }
    HEAP32[$1 + 52 >> 2] = jsvGetIntegerAndUnLock(jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 0));
    HEAP32[$1 + 48 >> 2] = jsvGetIntegerAndUnLock(jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 1));
    HEAP32[$1 + 44 >> 2] = jsvGetIntegerAndUnLock(jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 2));
    HEAP32[$1 + 12 >> 2] = fromCalendarDate($1 + 40 | 0);
    HEAP32[$1 + 28 >> 2] = jsvGetIntegerAndUnLock(jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 3));
    HEAP32[$1 + 24 >> 2] = jsvGetIntegerAndUnLock(jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 4));
    HEAP32[$1 + 20 >> 2] = jsvGetIntegerAndUnLock(jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 5));
    HEAP32[$1 + 16 >> 2] = jsvGetIntegerAndUnLock(jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 6));
    setCorrectTimeZone($1 + 12 | 0);
    HEAPF64[$1 + 64 >> 3] = fromTimeInDay($1 + 12 | 0);
   }
  }
  $0 = jswrap_date_from_milliseconds(HEAPF64[$1 + 64 >> 3]);
  __stack_pointer = $1 + 80 | 0;
  return $0 | 0;
 }
 
 function jswrap_date_parse($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 208 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 196 >> 2] = $0;
  block : {
   if (!(jsvIsString(HEAP32[$1 + 196 >> 2]) & 1)) {
    HEAPF64[$1 + 200 >> 3] = 0;
    break block;
   }
   HEAP32[$1 + 168 >> 2] = 0;
   HEAP32[$1 + 184 >> 2] = 0;
   HEAP32[$1 + 180 >> 2] = 0;
   HEAP32[$1 + 176 >> 2] = 0;
   HEAP32[$1 + 172 >> 2] = 0;
   HEAP32[$1 + 188 >> 2] = 0;
   HEAP8[$1 + 192 | 0] = 0;
   getCalendarDate($1 + 148 | 0, 0);
   HEAP8[$1 + 147 | 0] = 0;
   HEAP32[$1 + 8 >> 2] = jslSetLex($1 + 12 | 0);
   jslInit(HEAP32[$1 + 196 >> 2]);
   block4 : {
    if (HEAPU16[$1 + 14 >> 1] == 128) {
     HEAP32[$1 + 156 >> 2] = getMonth(jslGetTokenValueAsString());
     HEAP32[$1 + 164 >> 2] = getDay(jslGetTokenValueAsString());
     block1 : {
      if (HEAP32[$1 + 156 >> 2] >= 0) {
       jslGetNextToken();
       if (HEAPU16[$1 + 14 >> 1] == 129) {
        HEAP32[$1 + 152 >> 2] = _parse_int();
        jslGetNextToken();
        if (HEAPU16[$1 + 14 >> 1] == 44) {
         jslGetNextToken();
         if (HEAPU16[$1 + 14 >> 1] == 129) {
          HEAP32[$1 + 160 >> 2] = _parse_int();
          HEAP32[$1 + 168 >> 2] = fromCalendarDate($1 + 148 | 0);
          jslGetNextToken();
          if (HEAPU16[$1 + 14 >> 1] == 129) {
           _parse_time($1 + 168 | 0, 0);
           HEAP8[$1 + 147 | 0] = 1;
          }
         }
        }
       }
       break block1;
      }
      block3 : {
       if (HEAP32[$1 + 164 >> 2] >= 0) {
        HEAP32[$1 + 156 >> 2] = 0;
        jslGetNextToken();
        if (HEAPU16[$1 + 14 >> 1] == 44) {
         jslGetNextToken();
         if (HEAPU16[$1 + 14 >> 1] == 129) {
          HEAP32[$1 + 152 >> 2] = _parse_int();
          jslGetNextToken();
          block2 : {
           if (HEAPU16[$1 + 14 >> 1] != 128) {
            break block2
           }
           if ((getMonth(jslGetTokenValueAsString()) | 0) < 0) {
            break block2
           }
           HEAP32[$1 + 156 >> 2] = getMonth(jslGetTokenValueAsString());
           jslGetNextToken();
           if (HEAPU16[$1 + 14 >> 1] == 129) {
            HEAP32[$1 + 160 >> 2] = _parse_int();
            HEAP32[$1 + 168 >> 2] = fromCalendarDate($1 + 148 | 0);
            jslGetNextToken();
            if (HEAPU16[$1 + 14 >> 1] == 129) {
             _parse_time($1 + 168 | 0, 0);
             HEAP8[$1 + 147 | 0] = 1;
            }
           }
          }
         }
        }
        break block3;
       }
       HEAP32[$1 + 164 >> 2] = 0;
       HEAP32[$1 + 156 >> 2] = 0;
      }
     }
     break block4;
    }
    if (HEAPU16[$1 + 14 >> 1] == 129) {
     HEAP32[$1 + 160 >> 2] = _parse_int();
     jslGetNextToken();
     if (HEAPU16[$1 + 14 >> 1] == 45) {
      jslGetNextToken();
      if (HEAPU16[$1 + 14 >> 1] == 129) {
       HEAP32[$1 + 156 >> 2] = _parse_int() - 1;
       jslGetNextToken();
       if (HEAPU16[$1 + 14 >> 1] == 45) {
        jslGetNextToken();
        if (HEAPU16[$1 + 14 >> 1] == 129) {
         HEAP32[$1 + 152 >> 2] = _parse_int();
         HEAP32[$1 + 168 >> 2] = fromCalendarDate($1 + 148 | 0);
         jslGetNextToken();
         block5 : {
          if (HEAPU16[$1 + 14 >> 1] != 128) {
           break block5
          }
          if (HEAPU8[jslGetTokenValueAsString() | 0] != 84) {
           break block5
          }
          _parse_time($1 + 168 | 0, 1);
          HEAP8[$1 + 147 | 0] = 1;
         }
        }
       }
      }
     }
    }
   }
   if (!(HEAP8[$1 + 147 | 0] & 1)) {
    setCorrectTimeZone($1 + 168 | 0)
   }
   jslKill();
   jslSetLex(HEAP32[$1 + 8 >> 2]);
   HEAPF64[$1 + 200 >> 3] = fromTimeInDay($1 + 168 | 0);
  }
  __stack_pointer = $1 + 208 | 0;
  return +HEAPF64[$1 + 200 >> 3];
 }
 
 function getMonth($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = 0;
  block1 : {
   while (1) {
    if (HEAP32[$1 + 4 >> 2] < 12) {
     if (!(HEAPU8[HEAP32[$1 + 8 >> 2]] != HEAPU8[HEAP32[50011] + (HEAP32[$1 + 4 >> 2] << 2) | 0] | HEAPU8[HEAP32[$1 + 8 >> 2] + 1 | 0] != HEAPU8[HEAP32[50011] + ((HEAP32[$1 + 4 >> 2] << 2) + 1 | 0) | 0] | HEAPU8[HEAP32[$1 + 8 >> 2] + 2 | 0] != HEAPU8[HEAP32[50011] + ((HEAP32[$1 + 4 >> 2] << 2) + 2 | 0) | 0])) {
      HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
      break block1;
     }
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
     continue;
    }
    break;
   };
   HEAP32[$1 + 12 >> 2] = -1;
  }
  return HEAP32[$1 + 12 >> 2];
 }
 
 function getDay($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = 0;
  block : {
   while (1) {
    if (HEAP32[$1 + 4 >> 2] < 7) {
     if (strcmp(HEAP32[$1 + 8 >> 2], HEAP32[50012] + (HEAP32[$1 + 4 >> 2] << 2) | 0)) {
      HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
      continue;
     } else {
      HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
      break block;
     }
    }
    break;
   };
   HEAP32[$1 + 12 >> 2] = -1;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function _parse_int() {
  return stringToIntWithRadix(jslGetTokenValueAsString(), 10, 0, 0);
 }
 
 function _parse_time($0, $1) {
  var $2 = 0, $3 = 0.0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 40 >> 2] = $0;
  HEAP32[$2 + 36 >> 2] = $1;
  $0 = stringToIntWithRadix(jslGetTokenValueAsString() + HEAP32[$2 + 36 >> 2] | 0, 10, 0, 0);
  HEAP32[HEAP32[$2 + 40 >> 2] + 16 >> 2] = $0;
  jslGetNextToken();
  block2 : {
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 58) {
    jslGetNextToken();
    if (HEAPU16[HEAP32[50123] + 2 >> 1] == 129) {
     $0 = _parse_int();
     HEAP32[HEAP32[$2 + 40 >> 2] + 12 >> 2] = $0;
     jslGetNextToken();
     if (HEAPU16[HEAP32[50123] + 2 >> 1] == 58) {
      jslGetNextToken();
      if (!(HEAPU16[HEAP32[50123] + 2 >> 1] != 129 & HEAPU16[HEAP32[50123] + 2 >> 1] != 130)) {
       HEAPF64[$2 + 24 >> 3] = stringToFloat(jslGetTokenValueAsString());
       $1 = HEAP32[$2 + 40 >> 2];
       $3 = HEAPF64[$2 + 24 >> 3];
       if (Math_abs($3) < 2147483647.0) {
        $0 = ~~$3
       } else {
        $0 = -2147483648
       }
       HEAP32[$1 + 8 >> 2] = $0;
       $1 = HEAP32[$2 + 40 >> 2];
       $3 = HEAPF64[$2 + 24 >> 3] * 1.0e3;
       if (Math_abs($3) < 2147483647.0) {
        $0 = ~~$3
       } else {
        $0 = -2147483648
       }
       HEAP32[$1 + 4 >> 2] = ($0 | 0) % 1e3;
       jslGetNextToken();
       if (HEAPU16[HEAP32[50123] + 2 >> 1] == 128) {
        HEAP32[$2 + 20 >> 2] = jslGetTokenValueAsString();
        block3 : {
         block1 : {
          if (strcmp(HEAP32[$2 + 20 >> 2], 140818)) {
           if (strcmp(HEAP32[$2 + 20 >> 2], 140554)) {
            break block1
           }
          }
          HEAP32[HEAP32[$2 + 40 >> 2] + 20 >> 2] = 0;
          jslGetNextToken();
          if (!HEAPU16[HEAP32[50123] + 2 >> 1]) {
           HEAP8[$2 + 47 | 0] = 1;
           break block2;
          }
          break block3;
         }
         setCorrectTimeZone(HEAP32[$2 + 40 >> 2]);
        }
       }
       block6 : {
        if (!(HEAPU16[HEAP32[50123] + 2 >> 1] != 43 & HEAPU16[HEAP32[50123] + 2 >> 1] != 45)) {
         HEAP32[$2 + 16 >> 2] = HEAPU16[HEAP32[50123] + 2 >> 1] == 43 ? 1 : -1;
         jslGetNextToken();
         block5 : {
          if (HEAPU16[HEAP32[50123] + 2 >> 1] == 129) {
           HEAP32[$2 + 12 >> 2] = _parse_int();
           HEAP32[$2 + 12 >> 2] = Math_imul(HEAP32[$2 + 12 >> 2] / 100 | 0, 60) + (HEAP32[$2 + 12 >> 2] % 100 | 0);
           HEAP32[HEAP32[$2 + 40 >> 2] + 20 >> 2] = Math_imul(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 16 >> 2]);
           jslGetNextToken();
           break block5;
          }
          setCorrectTimeZone(HEAP32[$2 + 40 >> 2]);
         }
         break block6;
        }
        setCorrectTimeZone(HEAP32[$2 + 40 >> 2]);
       }
       HEAP8[$2 + 47 | 0] = 1;
       break block2;
      }
     }
    }
   }
   setCorrectTimeZone(HEAP32[$2 + 40 >> 2]);
   HEAP8[$2 + 47 | 0] = 0;
  }
  __stack_pointer = $2 + 48 | 0;
  return HEAP8[$2 + 47 | 0] & 1;
 }
 
 function jswrap_date_getTimezoneOffset($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 28 >> 2] = $0;
  getTimeFromDateVar($1, HEAP32[$1 + 28 >> 2], 0);
  __stack_pointer = $1 + 32 | 0;
  return 0 - HEAP32[$1 + 20 >> 2] | 0;
 }
 
 function getTimeFromDateVar($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $1;
  HEAP8[$3 + 11 | 0] = $2;
  getTimeFromMilliSeconds($0, jswrap_date_getTime(HEAP32[$3 + 12 >> 2]), HEAP8[$3 + 11 | 0] & 1);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jswrap_date_getTime($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0.0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $2 = jsvObjectGetFloatChild(HEAP32[$1 + 12 >> 2], 127277);
  __stack_pointer = $1 + 16 | 0;
  return +$2;
 }
 
 function jswrap_date_getIsDST($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 28 >> 2] = $0;
  getTimeFromDateVar($1, HEAP32[$1 + 28 >> 2], 0);
  __stack_pointer = $1 + 32 | 0;
  return HEAP8[$1 + 24 | 0] & 1;
 }
 
 function jswrap_date_getHours($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 28 >> 2] = $0;
  getTimeFromDateVar($1, HEAP32[$1 + 28 >> 2], 0);
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 16 >> 2];
 }
 
 function jswrap_date_getMinutes($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 28 >> 2] = $0;
  getTimeFromDateVar($1, HEAP32[$1 + 28 >> 2], 0);
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jswrap_date_getSeconds($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 28 >> 2] = $0;
  getTimeFromDateVar($1, HEAP32[$1 + 28 >> 2], 0);
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 8 >> 2];
 }
 
 function jswrap_date_getMilliseconds($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 28 >> 2] = $0;
  getTimeFromDateVar($1, HEAP32[$1 + 28 >> 2], 0);
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 4 >> 2];
 }
 
 function jswrap_date_getDay($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 28 >> 2] = $0;
  getCalendarDateFromDateVar($1 + 8 | 0, HEAP32[$1 + 28 >> 2], 0);
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 24 >> 2];
 }
 
 function getCalendarDateFromDateVar($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 44 >> 2] = $1;
  HEAP8[$3 + 43 | 0] = $2;
  getTimeFromDateVar($3 + 12 | 0, HEAP32[$3 + 44 >> 2], HEAP8[$3 + 43 | 0] & 1);
  getCalendarDate($0, HEAP32[$3 + 12 >> 2]);
  __stack_pointer = $3 + 48 | 0;
 }
 
 function jswrap_date_getDate($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 28 >> 2] = $0;
  getCalendarDateFromDateVar($1 + 8 | 0, HEAP32[$1 + 28 >> 2], 0);
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jswrap_date_getMonth($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 28 >> 2] = $0;
  getCalendarDateFromDateVar($1 + 8 | 0, HEAP32[$1 + 28 >> 2], 0);
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 16 >> 2];
 }
 
 function jswrap_date_getFullYear($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 28 >> 2] = $0;
  getCalendarDateFromDateVar($1 + 8 | 0, HEAP32[$1 + 28 >> 2], 0);
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 20 >> 2];
 }
 
 function jswrap_date_setHours($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0.0;
  $5 = __stack_pointer - 48 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 44 >> 2] = $0;
  HEAP32[$5 + 40 >> 2] = $1;
  HEAP32[$5 + 36 >> 2] = $2;
  HEAP32[$5 + 32 >> 2] = $3;
  HEAP32[$5 + 28 >> 2] = $4;
  getTimeFromDateVar($5, HEAP32[$5 + 44 >> 2], 0);
  HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 40 >> 2];
  if (jsvIsNumeric(HEAP32[$5 + 36 >> 2]) & 1) {
   HEAP32[$5 + 12 >> 2] = jsvGetInteger(HEAP32[$5 + 36 >> 2])
  }
  if (jsvIsNumeric(HEAP32[$5 + 32 >> 2]) & 1) {
   HEAP32[$5 + 8 >> 2] = jsvGetInteger(HEAP32[$5 + 32 >> 2])
  }
  if (jsvIsNumeric(HEAP32[$5 + 28 >> 2]) & 1) {
   HEAP32[$5 + 4 >> 2] = jsvGetInteger(HEAP32[$5 + 28 >> 2])
  }
  setCorrectTimeZone($5);
  $6 = jswrap_date_setTime(HEAP32[$5 + 44 >> 2], fromTimeInDay($5));
  __stack_pointer = $5 + 48 | 0;
  return +$6;
 }
 
 function jswrap_date_setMinutes($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0.0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 44 >> 2] = $0;
  HEAP32[$4 + 40 >> 2] = $1;
  HEAP32[$4 + 36 >> 2] = $2;
  HEAP32[$4 + 32 >> 2] = $3;
  getTimeFromDateVar($4 + 4 | 0, HEAP32[$4 + 44 >> 2], 0);
  HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 40 >> 2];
  if (jsvIsNumeric(HEAP32[$4 + 36 >> 2]) & 1) {
   HEAP32[$4 + 12 >> 2] = jsvGetInteger(HEAP32[$4 + 36 >> 2])
  }
  if (jsvIsNumeric(HEAP32[$4 + 32 >> 2]) & 1) {
   HEAP32[$4 + 8 >> 2] = jsvGetInteger(HEAP32[$4 + 32 >> 2])
  }
  setCorrectTimeZone($4 + 4 | 0);
  $5 = jswrap_date_setTime(HEAP32[$4 + 44 >> 2], fromTimeInDay($4 + 4 | 0));
  __stack_pointer = $4 + 48 | 0;
  return +$5;
 }
 
 function jswrap_date_setSeconds($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0.0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 44 >> 2] = $0;
  HEAP32[$3 + 40 >> 2] = $1;
  HEAP32[$3 + 36 >> 2] = $2;
  getTimeFromDateVar($3 + 8 | 0, HEAP32[$3 + 44 >> 2], 0);
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 40 >> 2];
  if (jsvIsNumeric(HEAP32[$3 + 36 >> 2]) & 1) {
   HEAP32[$3 + 12 >> 2] = jsvGetInteger(HEAP32[$3 + 36 >> 2])
  }
  setCorrectTimeZone($3 + 8 | 0);
  $4 = jswrap_date_setTime(HEAP32[$3 + 44 >> 2], fromTimeInDay($3 + 8 | 0));
  __stack_pointer = $3 + 48 | 0;
  return +$4;
 }
 
 function jswrap_date_setMilliseconds($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0.0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 44 >> 2] = $0;
  HEAP32[$2 + 40 >> 2] = $1;
  getTimeFromDateVar($2 + 12 | 0, HEAP32[$2 + 44 >> 2], 0);
  HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 40 >> 2];
  setCorrectTimeZone($2 + 12 | 0);
  $3 = jswrap_date_setTime(HEAP32[$2 + 44 >> 2], fromTimeInDay($2 + 12 | 0));
  __stack_pointer = $2 + 48 | 0;
  return +$3;
 }
 
 function jswrap_date_setDate($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0.0;
  $2 = __stack_pointer + -64 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 60 >> 2] = $0;
  HEAP32[$2 + 56 >> 2] = $1;
  getTimeFromDateVar($2 + 28 | 0, HEAP32[$2 + 60 >> 2], 0);
  getCalendarDate($2 + 8 | 0, HEAP32[$2 + 28 >> 2]);
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 56 >> 2];
  HEAP32[$2 + 28 >> 2] = fromCalendarDate($2 + 8 | 0);
  setCorrectTimeZone($2 + 28 | 0);
  $3 = jswrap_date_setTime(HEAP32[$2 + 60 >> 2], fromTimeInDay($2 + 28 | 0));
  __stack_pointer = $2 - -64 | 0;
  return +$3;
 }
 
 function jswrap_date_setMonth($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0.0;
  $3 = __stack_pointer + -64 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 60 >> 2] = $0;
  HEAP32[$3 + 56 >> 2] = $1;
  HEAP32[$3 + 52 >> 2] = $2;
  getTimeFromDateVar($3 + 24 | 0, HEAP32[$3 + 60 >> 2], 0);
  getCalendarDate($3 + 4 | 0, HEAP32[$3 + 24 >> 2]);
  HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 56 >> 2];
  if (jsvIsNumeric(HEAP32[$3 + 52 >> 2]) & 1) {
   HEAP32[$3 + 8 >> 2] = jsvGetInteger(HEAP32[$3 + 52 >> 2])
  }
  HEAP32[$3 + 24 >> 2] = fromCalendarDate($3 + 4 | 0);
  setCorrectTimeZone($3 + 24 | 0);
  $4 = jswrap_date_setTime(HEAP32[$3 + 60 >> 2], fromTimeInDay($3 + 24 | 0));
  __stack_pointer = $3 - -64 | 0;
  return +$4;
 }
 
 function jswrap_date_setFullYear($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0.0;
  $4 = __stack_pointer + -64 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 60 >> 2] = $0;
  HEAP32[$4 + 56 >> 2] = $1;
  HEAP32[$4 + 52 >> 2] = $2;
  HEAP32[$4 + 48 >> 2] = $3;
  getTimeFromDateVar($4 + 20 | 0, HEAP32[$4 + 60 >> 2], 0);
  getCalendarDate($4, HEAP32[$4 + 20 >> 2]);
  HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 56 >> 2];
  if (jsvIsNumeric(HEAP32[$4 + 52 >> 2]) & 1) {
   HEAP32[$4 + 8 >> 2] = jsvGetInteger(HEAP32[$4 + 52 >> 2])
  }
  if (jsvIsNumeric(HEAP32[$4 + 48 >> 2]) & 1) {
   HEAP32[$4 + 4 >> 2] = jsvGetInteger(HEAP32[$4 + 48 >> 2])
  }
  HEAP32[$4 + 20 >> 2] = fromCalendarDate($4);
  setCorrectTimeZone($4 + 20 | 0);
  $5 = jswrap_date_setTime(HEAP32[$4 + 60 >> 2], fromTimeInDay($4 + 20 | 0));
  __stack_pointer = $4 - -64 | 0;
  return +$5;
 }
 
 function jswrap_date_toString($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $1 = __stack_pointer - 96 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 92 >> 2] = $0;
  getTimeFromDateVar($1 - -64 | 0, HEAP32[$1 + 92 >> 2], 0);
  getCalendarDate($1 + 44 | 0, HEAP32[$1 + 64 >> 2]);
  block : {
   if (HEAP32[$1 + 84 >> 2] < 0) {
    HEAP32[$1 + 36 >> 2] = 0 - HEAP32[$1 + 84 >> 2];
    HEAP8[$1 + 43 | 0] = 45;
    break block;
   }
   HEAP32[$1 + 36 >> 2] = HEAP32[$1 + 84 >> 2];
   HEAP8[$1 + 43 | 0] = 43;
  }
  $0 = HEAP32[50012];
  $2 = HEAP32[$1 + 60 >> 2] << 2;
  $3 = HEAP32[50011];
  $4 = HEAP32[$1 + 52 >> 2] << 2;
  $5 = HEAP32[$1 + 48 >> 2];
  $6 = HEAP32[$1 + 56 >> 2];
  $7 = HEAP32[$1 + 80 >> 2];
  $8 = HEAP32[$1 + 76 >> 2];
  $9 = HEAP32[$1 + 72 >> 2];
  $10 = HEAP8[$1 + 43 | 0];
  HEAP32[$1 + 32 >> 2] = Math_imul(HEAP32[$1 + 36 >> 2] / 60 | 0, 100) + (HEAP32[$1 + 36 >> 2] % 60 | 0);
  HEAP32[$1 + 28 >> 2] = $10;
  HEAP32[$1 + 24 >> 2] = $9;
  HEAP32[$1 + 20 >> 2] = $8;
  HEAP32[$1 + 16 >> 2] = $7;
  HEAP32[$1 + 12 >> 2] = $6;
  HEAP32[$1 + 8 >> 2] = $5;
  HEAP32[$1 + 4 >> 2] = $3 + $4;
  HEAP32[$1 >> 2] = $0 + $2;
  $0 = jsvVarPrintf(139374, $1);
  __stack_pointer = $1 + 96 | 0;
  return $0 | 0;
 }
 
 function jswrap_date_toUTCString($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $1 = __stack_pointer - 80 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 76 >> 2] = $0;
  getTimeFromDateVar($1 + 48 | 0, HEAP32[$1 + 76 >> 2], 1);
  getCalendarDate($1 + 28 | 0, HEAP32[$1 + 48 >> 2]);
  $0 = HEAP32[50012];
  $2 = HEAP32[$1 + 44 >> 2] << 2;
  $3 = HEAP32[$1 + 32 >> 2];
  $4 = HEAP32[50011];
  $5 = HEAP32[$1 + 36 >> 2] << 2;
  $6 = HEAP32[$1 + 40 >> 2];
  $7 = HEAP32[$1 + 64 >> 2];
  $8 = HEAP32[$1 + 60 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 56 >> 2];
  HEAP32[$1 + 20 >> 2] = $8;
  HEAP32[$1 + 16 >> 2] = $7;
  HEAP32[$1 + 12 >> 2] = $6;
  HEAP32[$1 + 8 >> 2] = $4 + $5;
  HEAP32[$1 + 4 >> 2] = $3;
  HEAP32[$1 >> 2] = $0 + $2;
  $0 = jsvVarPrintf(140790, $1);
  __stack_pointer = $1 + 80 | 0;
  return $0 | 0;
 }
 
 function jswrap_date_toISOString($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $1 = __stack_pointer - 80 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 76 >> 2] = $0;
  getTimeFromDateVar($1 + 48 | 0, HEAP32[$1 + 76 >> 2], 1);
  getCalendarDate($1 + 28 | 0, HEAP32[$1 + 48 >> 2]);
  $0 = HEAP32[$1 + 40 >> 2];
  $2 = HEAP32[$1 + 36 >> 2];
  $3 = HEAP32[$1 + 32 >> 2];
  $4 = HEAP32[$1 + 64 >> 2];
  $5 = HEAP32[$1 + 60 >> 2];
  $6 = HEAP32[$1 + 56 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 52 >> 2];
  HEAP32[$1 + 20 >> 2] = $6;
  HEAP32[$1 + 16 >> 2] = $5;
  HEAP32[$1 + 12 >> 2] = $4;
  HEAP32[$1 + 8 >> 2] = $3;
  HEAP32[$1 + 4 >> 2] = $2 + 1;
  HEAP32[$1 >> 2] = $0;
  $0 = jsvVarPrintf(140522, $1);
  __stack_pointer = $1 + 80 | 0;
  return $0 | 0;
 }
 
 function jswrap_date_toLocalISOString($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $1 = __stack_pointer - 96 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 92 >> 2] = $0;
  getTimeFromDateVar($1 - -64 | 0, HEAP32[$1 + 92 >> 2], 0);
  getCalendarDate($1 + 44 | 0, HEAP32[$1 + 64 >> 2]);
  block : {
   if (HEAP32[$1 + 84 >> 2] < 0) {
    HEAP32[$1 + 36 >> 2] = 0 - HEAP32[$1 + 84 >> 2];
    HEAP8[$1 + 43 | 0] = 45;
    break block;
   }
   HEAP32[$1 + 36 >> 2] = HEAP32[$1 + 84 >> 2];
   HEAP8[$1 + 43 | 0] = 43;
  }
  HEAP32[$1 + 36 >> 2] = Math_imul(HEAP32[$1 + 36 >> 2] / 60 | 0, 100) + (HEAP32[$1 + 36 >> 2] % 60 | 0);
  $0 = HEAP32[$1 + 56 >> 2];
  $2 = HEAP32[$1 + 52 >> 2];
  $3 = HEAP32[$1 + 48 >> 2];
  $4 = HEAP32[$1 + 80 >> 2];
  $5 = HEAP32[$1 + 76 >> 2];
  $6 = HEAP32[$1 + 72 >> 2];
  $7 = HEAP32[$1 + 68 >> 2];
  $8 = HEAP8[$1 + 43 | 0];
  HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 36 >> 2];
  HEAP32[$1 + 28 >> 2] = $8;
  HEAP32[$1 + 24 >> 2] = $7;
  HEAP32[$1 + 20 >> 2] = $6;
  HEAP32[$1 + 16 >> 2] = $5;
  HEAP32[$1 + 12 >> 2] = $4;
  HEAP32[$1 + 8 >> 2] = $3;
  HEAP32[$1 + 4 >> 2] = $2 + 1;
  HEAP32[$1 >> 2] = $0;
  $0 = jsvVarPrintf(139335, $1);
  __stack_pointer = $1 + 96 | 0;
  return $0 | 0;
 }
 
 function _jswrap_error_constructor($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  HEAP32[$2 + 16 >> 2] = jspNewObject(0, HEAP32[$2 + 20 >> 2]);
  block : {
   if (!HEAP32[$2 + 16 >> 2]) {
    HEAP32[$2 + 28 >> 2] = 0;
    break block;
   }
   if (HEAP32[$2 + 24 >> 2]) {
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 16 >> 2], 137849, jsvAsString(HEAP32[$2 + 24 >> 2]))
   }
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 16 >> 2], 137544, jsvNewFromString(HEAP32[$2 + 20 >> 2]));
   if (HEAP32[50123]) {
    HEAP32[$2 + 12 >> 2] = jsvNewFromEmptyString_1405();
    if (HEAP32[$2 + 12 >> 2]) {
     jspAppendStackTrace(HEAP32[$2 + 12 >> 2], HEAP32[50123]);
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 16 >> 2], 135901, HEAP32[$2 + 12 >> 2]);
    }
   }
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jsvNewFromEmptyString_1405() {
  return jsvNewWithFlags(28);
 }
 
 function jswrap_error_constructor($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = _jswrap_error_constructor(HEAP32[$1 + 12 >> 2], 127958);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function jswrap_syntaxerror_constructor($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = _jswrap_error_constructor(HEAP32[$1 + 12 >> 2], 127913);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function jswrap_typeerror_constructor($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = _jswrap_error_constructor(HEAP32[$1 + 12 >> 2], 127939);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function jswrap_internalerror_constructor($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = _jswrap_error_constructor(HEAP32[$1 + 12 >> 2], 127925);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function jswrap_referenceerror_constructor($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = _jswrap_error_constructor(HEAP32[$1 + 12 >> 2], 127949);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function jswrap_error_toString($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 24 >> 2] = $0;
  HEAP32[$1 + 20 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 24 >> 2], 137544);
  if (!HEAP32[$1 + 20 >> 2]) {
   HEAP32[$1 + 20 >> 2] = jsvNewFromString(127958)
  }
  block : {
   if (!HEAP32[$1 + 20 >> 2]) {
    HEAP32[$1 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 24 >> 2], 137849);
   if (HEAP32[$1 + 16 >> 2]) {
    $0 = HEAP32[$1 + 20 >> 2];
    HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 16 >> 2];
    HEAP32[$1 >> 2] = $0;
    HEAP32[$1 + 12 >> 2] = jsvVarPrintf(124314, $1);
    jsvUnLock2(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2]);
    HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 12 >> 2];
   }
   HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
  }
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 28 >> 2];
 }
 
 function jswrap_global() {
  return jsvLockAgain(HEAP32[92130]) | 0;
 }
 
 function jswrap_arguments() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 8 >> 2] = 0;
  if (HEAP32[92133]) {
   HEAP32[$0 + 8 >> 2] = jsvLockAgain(HEAP32[92133])
  }
  block : {
   if (!(jsvIsFunction(HEAP32[$0 + 8 >> 2]) & 1)) {
    jsExceptionHere(1, 135223, 0);
    HEAP32[$0 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$0 + 4 >> 2] = jsvGetFunctionArgumentLength(HEAP32[$0 + 8 >> 2]);
   jsvObjectSetChild(HEAP32[$0 + 8 >> 2], 126881, HEAP32[$0 + 4 >> 2]);
   jsvUnLock(HEAP32[$0 + 8 >> 2]);
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 4 >> 2];
  }
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function jswrap_function_constructor($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 24 >> 2] = $0;
  HEAP32[$1 + 20 >> 2] = jsvNewWithFlags(7);
  block : {
   if (!HEAP32[$1 + 20 >> 2]) {
    HEAP32[$1 + 28 >> 2] = 0;
    break block;
   }
   jsvObjectIteratorNew($1 + 16 | 0, HEAP32[$1 + 24 >> 2]);
   HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetValue_1415($1 + 16 | 0);
   jsvObjectIteratorNext($1 + 16 | 0);
   while (1) {
    if (jsvObjectIteratorHasValue_1416($1 + 16 | 0) & 1) {
     HEAP32[$1 + 8 >> 2] = jsvAsString(HEAP32[$1 + 12 >> 2]);
     if (HEAP32[$1 + 8 >> 2]) {
      HEAP32[$1 + 4 >> 2] = jsvNewFromString(121118);
      if (HEAP32[$1 + 4 >> 2]) {
       jsvAppendStringVarComplete(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 8 >> 2]);
       jsvAddFunctionParameter(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 4 >> 2], 0);
      }
      jsvUnLock(HEAP32[$1 + 8 >> 2]);
     }
     jsvUnLock(HEAP32[$1 + 12 >> 2]);
     HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetValue_1415($1 + 16 | 0);
     jsvObjectIteratorNext($1 + 16 | 0);
     continue;
    }
    break;
   };
   jsvObjectIteratorFree_1417($1 + 16 | 0);
   if (!(jsvIsString(HEAP32[$1 + 12 >> 2]) & 1)) {
    HEAP32[$1 >> 2] = HEAP32[$1 + 12 >> 2];
    jsExceptionHere(3, 146347, $1);
    jsvUnLock2(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 20 >> 2]);
    HEAP32[$1 + 28 >> 2] = 0;
    break block;
   }
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 20 >> 2], 138400, HEAP32[$1 + 12 >> 2]);
   HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
  }
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 28 >> 2];
 }
 
 function jsvObjectIteratorGetValue_1415($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvObjectIteratorHasValue_1416($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
 }
 
 function jsvObjectIteratorFree_1417($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_eval($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 4 >> 2] = jsvAsString(HEAP32[$1 + 8 >> 2]);
   HEAP32[$1 >> 2] = jspEvaluateVar(HEAP32[$1 + 4 >> 2], 0, 135827, 0);
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jswrap_parseInt($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 144 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 136 >> 2] = $0;
  HEAP32[$2 + 132 >> 2] = $1;
  HEAP32[$2 + 128 >> 2] = 0;
  if (jsvIsNumeric(HEAP32[$2 + 132 >> 2]) & 1) {
   HEAP32[$2 + 128 >> 2] = jsvGetInteger(HEAP32[$2 + 132 >> 2])
  }
  block1 : {
   block : {
    if (!(jsvIsFloat(HEAP32[$2 + 136 >> 2]) & 1)) {
     break block
    }
    __DOUBLE_BITS_1421(jsvGetFloat(HEAP32[$2 + 136 >> 2]));
    if ((i64toi32_i32$HIGH_BITS & 2147483647) >>> 0 < 2146435072) {
     break block
    }
    HEAP32[$2 + 140 >> 2] = jsvNewFromFloat(NaN);
    break block1;
   }
   HEAP32[$2 + 44 >> 2] = $2 + 48;
   jsvGetString(HEAP32[$2 + 136 >> 2], $2 + 48 | 0, 70);
   HEAP8[$2 + 43 | 0] = 0;
   if (!(HEAPU8[$2 + 49 | 0] != 120 & HEAPU8[$2 + 49 | 0] != 88 | (HEAPU8[$2 + 48 | 0] != 48 | (HEAP32[$2 + 128 >> 2] != 16 ? HEAP32[$2 + 128 >> 2] : 0)))) {
    HEAP32[$2 + 128 >> 2] = 16;
    HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 44 >> 2] + 2;
   }
   if (!HEAP32[$2 + 128 >> 2]) {
    HEAP32[$2 + 128 >> 2] = 10
   }
   HEAP32[$2 + 24 >> 2] = stringToIntWithRadix(HEAP32[$2 + 44 >> 2], HEAP32[$2 + 128 >> 2], $2 + 43 | 0, $2 + 36 | 0);
   HEAP32[$2 + 28 >> 2] = i64toi32_i32$HIGH_BITS;
   if (HEAP8[$2 + 43 | 0] & 1) {
    HEAP32[$2 + 140 >> 2] = jsvNewFromFloat(NaN);
    break block1;
   }
   if (HEAP32[$2 + 36 >> 2] == ($2 + 117 | 0)) {
    jsExceptionHere(1, 128295, 0);
    HEAP32[$2 + 140 >> 2] = jsvNewFromFloat(NaN);
    break block1;
   }
   HEAP32[$2 + 140 >> 2] = jsvNewFromLongInteger(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 28 >> 2]);
  }
  __stack_pointer = $2 + 144 | 0;
  return HEAP32[$2 + 140 >> 2];
 }
 
 function __DOUBLE_BITS_1421($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAPF64[$1 + 8 >> 3] = $0;
  HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  return HEAP32[$1 >> 2];
 }
 
 function jswrap_parseFloat($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 112 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 100 >> 2] = $0;
  jsvGetString(HEAP32[$1 + 100 >> 2], $1 + 16 | 0, 70);
  block : {
   if (!strcmp($1 + 16 | 0, 123618)) {
    HEAPF64[$1 + 104 >> 3] = Infinity;
    break block;
   }
   if (!strcmp($1 + 16 | 0, 123617)) {
    HEAPF64[$1 + 104 >> 3] = -Infinity;
    break block;
   }
   HEAPF64[$1 >> 3] = stringToFloatWithRadix($1 + 16 | 0, 0, $1 + 12 | 0);
   if (HEAP32[$1 + 12 >> 2] == ($1 + 85 | 0)) {
    jsExceptionHere(1, 128295, 0);
    HEAPF64[$1 + 104 >> 3] = NaN;
    break block;
   }
   HEAPF64[$1 + 104 >> 3] = HEAPF64[$1 >> 3];
  }
  __stack_pointer = $1 + 112 | 0;
  return +HEAPF64[$1 + 104 >> 3];
 }
 
 function jswrap_isFinite($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 28 >> 2] = $0;
  HEAPF64[$1 + 16 >> 3] = jsvGetFloat(HEAP32[$1 + 28 >> 2]);
  $2 = __DOUBLE_BITS_1421(HEAPF64[$1 + 16 >> 3]);
  $0 = $2;
  $3 = i64toi32_i32$HIGH_BITS;
  $2 = $3 & 2147483647;
  $3 = $0;
  $0 = 0;
  block : {
   if (($2 | 0) == 2146435072 & ($3 | 0) != 0 | $2 >>> 0 > 2146435072) {
    break block
   }
   $0 = 0;
   if (HEAPF64[$1 + 16 >> 3] == Infinity) {
    break block
   }
   $0 = HEAPF64[$1 + 16 >> 3] != -Infinity;
  }
  __stack_pointer = $1 + 32 | 0;
  return $0 | 0;
 }
 
 function jswrap_isNaN($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = __stack_pointer + -64 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 56 >> 2] = $0;
  block2 : {
   block1 : {
    block : {
     if (jsvIsUndefined(HEAP32[$1 + 56 >> 2]) & 1) {
      break block
     }
     if (jsvIsObject(HEAP32[$1 + 56 >> 2]) & 1) {
      break block
     }
     if (!(jsvIsFloat(HEAP32[$1 + 56 >> 2]) & 1)) {
      if (!(jsvIsArray(HEAP32[$1 + 56 >> 2]) & 1)) {
       break block1
      }
     }
     $0 = __DOUBLE_BITS_1421(jsvGetFloat(HEAP32[$1 + 56 >> 2]));
     $3 = $0;
     $2 = i64toi32_i32$HIGH_BITS;
     $0 = $2 & 2147483647;
     $2 = $3;
     if (($0 | 0) == 2146435072 & ($2 | 0) != 0 | $0 >>> 0 > 2146435072) {
      break block
     }
     break block1;
    }
    HEAP8[$1 + 63 | 0] = 1;
    break block2;
   }
   if (jsvIsString(HEAP32[$1 + 56 >> 2]) & 1) {
    HEAP8[$1 + 55 | 0] = 1;
    jsvStringIteratorNew($1 + 16 | 0, HEAP32[$1 + 56 >> 2], 0);
    while (1) {
     if (jsvStringIteratorHasChar_1425($1 + 16 | 0) & 1) {
      if (isWhitespace(jsvStringIteratorGetCharAndNext($1 + 16 | 0) << 24 >> 24) & 1) {
       continue
      }
      HEAP8[$1 + 55 | 0] = 0;
     }
     break;
    };
    jsvStringIteratorFree_1426($1 + 16 | 0);
    if (HEAP8[$1 + 55 | 0] & 1) {
     HEAP8[$1 + 63 | 0] = 0;
     break block2;
    }
    $2 = __DOUBLE_BITS_1421(jsvGetFloat(HEAP32[$1 + 56 >> 2]));
    $3 = $2;
    $0 = i64toi32_i32$HIGH_BITS;
    $2 = $0 & 2147483647;
    $0 = $3;
    HEAP8[$1 + 63 | 0] = ($2 | 0) == 2146435072 & ($0 | 0) != 0 | $2 >>> 0 > 2146435072;
    break block2;
   }
   HEAP8[$1 + 63 | 0] = 0;
  }
  __stack_pointer = $1 - -64 | 0;
  return HEAP8[$1 + 63 | 0] & 1;
 }
 
 function jsvStringIteratorHasChar_1425($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
 }
 
 function jsvStringIteratorFree_1426($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_btoa($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 144 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 136 >> 2] = $0;
  block : {
   if (!(jsvIsIterable(HEAP32[$1 + 136 >> 2]) & 1)) {
    HEAP32[$1 >> 2] = HEAP32[$1 + 136 >> 2];
    jsExceptionHere(1, 125526, $1);
    HEAP32[$1 + 140 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 132 >> 2] = jsvGetLength(HEAP32[$1 + 136 >> 2]);
   HEAP32[$1 + 128 >> 2] = (HEAP32[$1 + 132 >> 2] + 2 >>> 0) / 3 << 2;
   HEAP32[$1 + 124 >> 2] = jsvNewStringOfLength(HEAP32[$1 + 128 >> 2], 0);
   if (!HEAP32[$1 + 124 >> 2]) {
    HEAP32[$1 + 140 >> 2] = 0;
    break block;
   }
   jsvIteratorNew($1 - -64 | 0, HEAP32[$1 + 136 >> 2], 1);
   jsvStringIteratorNew($1 + 28 | 0, HEAP32[$1 + 124 >> 2], 0);
   HEAP32[$1 + 24 >> 2] = 0;
   while (1) {
    $0 = 0;
    if (jsvIteratorHasElement($1 - -64 | 0) & 1) {
     $0 = jspIsInterrupted() ^ -1
    }
    if ($0 & 1) {
     HEAP32[$1 + 20 >> 2] = jsvIteratorGetIntegerValue($1 - -64 | 0) & 255;
     jsvIteratorNext($1 - -64 | 0);
     HEAP32[$1 + 16 >> 2] = 0;
     HEAP32[$1 + 12 >> 2] = 0;
     block2 : {
      if (jsvIteratorHasElement($1 - -64 | 0) & 1) {
       HEAP32[$1 + 16 >> 2] = jsvIteratorGetIntegerValue($1 - -64 | 0) & 255;
       jsvIteratorNext($1 - -64 | 0);
       block1 : {
        if (jsvIteratorHasElement($1 - -64 | 0) & 1) {
         HEAP32[$1 + 12 >> 2] = jsvIteratorGetIntegerValue($1 - -64 | 0) & 255;
         jsvIteratorNext($1 - -64 | 0);
         HEAP32[$1 + 24 >> 2] = 0;
         break block1;
        }
        HEAP32[$1 + 24 >> 2] = 1;
       }
       break block2;
      }
      HEAP32[$1 + 24 >> 2] = 2;
     }
     HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 12 >> 2] + ((HEAP32[$1 + 20 >> 2] << 16) + (HEAP32[$1 + 16 >> 2] << 8) | 0);
     jsvStringIteratorSetCharAndNext($1 + 28 | 0, jswrap_btoa_encode(HEAP32[$1 + 8 >> 2] >> 18) << 24 >> 24);
     jsvStringIteratorSetCharAndNext($1 + 28 | 0, jswrap_btoa_encode(HEAP32[$1 + 8 >> 2] >> 12) << 24 >> 24);
     $2 = $1 + 28 | 0;
     if (HEAP32[$1 + 24 >> 2] > 1) {
      $0 = 61
     } else {
      $0 = jswrap_btoa_encode(HEAP32[$1 + 8 >> 2] >> 6)
     }
     jsvStringIteratorSetCharAndNext($2, $0 << 24 >> 24);
     $2 = $1 + 28 | 0;
     if (HEAP32[$1 + 24 >> 2] > 0) {
      $0 = 61
     } else {
      $0 = jswrap_btoa_encode(HEAP32[$1 + 8 >> 2])
     }
     jsvStringIteratorSetCharAndNext($2, $0 << 24 >> 24);
     continue;
    }
    break;
   };
   jsvIteratorFree($1 - -64 | 0);
   jsvStringIteratorFree_1426($1 + 28 | 0);
   HEAP32[$1 + 140 >> 2] = HEAP32[$1 + 124 >> 2];
  }
  __stack_pointer = $1 + 144 | 0;
  return HEAP32[$1 + 140 >> 2];
 }
 
 function jswrap_btoa_encode($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] & 63;
  block : {
   if (HEAP32[$1 + 8 >> 2] < 26) {
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2] + 65;
    break block;
   }
   if (HEAP32[$1 + 8 >> 2] < 52) {
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2] + 71;
    break block;
   }
   if (HEAP32[$1 + 8 >> 2] < 62) {
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2] - 4;
    break block;
   }
   if (HEAP32[$1 + 8 >> 2] == 62) {
    HEAP32[$1 + 12 >> 2] = 43;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = 47;
  }
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jswrap_atob($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 128 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 120 >> 2] = $0;
  block : {
   if (!(jsvIsString(HEAP32[$1 + 120 >> 2]) & 1)) {
    HEAP32[$1 >> 2] = HEAP32[$1 + 120 >> 2];
    jsExceptionHere(1, 126103, $1);
    HEAP32[$1 + 124 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 116 >> 2] = 0;
   jsvStringIteratorNew($1 + 80 | 0, HEAP32[$1 + 120 >> 2], 0);
   HEAP8[$1 + 79 | 0] = 0;
   HEAP8[$1 + 78 | 0] = 0;
   while (1) {
    if (jsvStringIteratorHasChar_1425($1 + 80 | 0) & 1) {
     HEAP8[$1 + 77 | 0] = jsvStringIteratorGetChar_1430($1 + 80 | 0);
     if (!(isWhitespace(HEAP8[$1 + 77 | 0] << 24 >> 24) & 1)) {
      HEAP8[$1 + 78 | 0] = HEAPU8[$1 + 79 | 0];
      HEAP8[$1 + 79 | 0] = HEAPU8[$1 + 77 | 0];
      HEAP32[$1 + 116 >> 2] = HEAP32[$1 + 116 >> 2] + 1;
     }
     jsvStringIteratorNext($1 + 80 | 0);
     continue;
    }
    break;
   };
   jsvStringIteratorFree_1426($1 + 80 | 0);
   HEAP32[$1 + 72 >> 2] = Math_imul(HEAP32[$1 + 116 >> 2], 3) >>> 2;
   if (HEAPU8[$1 + 79 | 0] == 61) {
    HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 72 >> 2] - 1
   }
   if (HEAPU8[$1 + 78 | 0] == 61) {
    HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 72 >> 2] - 1
   }
   HEAP32[$1 + 68 >> 2] = jsvNewStringOfLength(HEAP32[$1 + 72 >> 2], 0);
   if (!HEAP32[$1 + 68 >> 2]) {
    HEAP32[$1 + 124 >> 2] = 0;
    break block;
   }
   jsvStringIteratorNew($1 + 80 | 0, HEAP32[$1 + 120 >> 2], 0);
   jsvStringIteratorNew($1 + 32 | 0, HEAP32[$1 + 68 >> 2], 0);
   while (1) {
    $0 = 0;
    if (jsvStringIteratorHasChar_1425($1 + 80 | 0) & 1) {
     $0 = jspIsInterrupted() ^ -1
    }
    if ($0 & 1) {
     HEAP32[$1 + 28 >> 2] = 0;
     HEAP32[$1 + 20 >> 2] = 0;
     HEAP32[$1 + 24 >> 2] = 0;
     while (1) {
      if (HEAP32[$1 + 24 >> 2] < 4) {
       if (jsvStringIteratorHasChar_1425($1 + 80 | 0) & 1) {
        HEAP8[$1 + 19 | 0] = 32;
        while (1) {
         $0 = 0;
         if (HEAP8[$1 + 19 | 0] << 24 >> 24) {
          $0 = isWhitespace(HEAP8[$1 + 19 | 0] << 24 >> 24)
         }
         if ($0 & 1) {
          HEAP8[$1 + 19 | 0] = jsvStringIteratorGetCharAndNext($1 + 80 | 0);
          continue;
         }
         break;
        };
        HEAP32[$1 + 12 >> 2] = jswrap_atob_decode(HEAP8[$1 + 19 | 0] << 24 >> 24);
        if (HEAP32[$1 + 12 >> 2] >= 0) {
         HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 28 >> 2] | HEAP32[$1 + 12 >> 2] << Math_imul(3 - HEAP32[$1 + 24 >> 2] | 0, 6);
         HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 24 >> 2];
        }
       }
       HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 24 >> 2] + 1;
       continue;
      }
      break;
     };
     if (HEAP32[$1 + 20 >> 2] > 0) {
      jsvStringIteratorSetCharAndNext($1 + 32 | 0, HEAP32[$1 + 28 >> 2] >>> 16 << 24 >> 24)
     }
     if (HEAP32[$1 + 20 >> 2] > 1) {
      jsvStringIteratorSetCharAndNext($1 + 32 | 0, HEAP32[$1 + 28 >> 2] >>> 8 << 24 >> 24)
     }
     if (HEAP32[$1 + 20 >> 2] > 2) {
      jsvStringIteratorSetCharAndNext($1 + 32 | 0, HEAP32[$1 + 28 >> 2] << 24 >> 24)
     }
     continue;
    }
    break;
   };
   jsvStringIteratorFree_1426($1 + 80 | 0);
   jsvStringIteratorFree_1426($1 + 32 | 0);
   HEAP32[$1 + 124 >> 2] = HEAP32[$1 + 68 >> 2];
  }
  __stack_pointer = $1 + 128 | 0;
  return HEAP32[$1 + 124 >> 2];
 }
 
 function jsvStringIteratorGetChar_1430($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   HEAP8[$1 + 15 | 0] = HEAPU8[HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] + HEAP32[HEAP32[$1 + 8 >> 2] >> 2] | 0];
  }
  return HEAP8[$1 + 15 | 0] << 24 >> 24;
 }
 
 function jswrap_atob_decode($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] & 255;
  block1 : {
   if (!(HEAP32[$1 + 8 >> 2] < 65 | HEAP32[$1 + 8 >> 2] > 90)) {
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2] - 65;
    break block1;
   }
   if (!(HEAP32[$1 + 8 >> 2] < 97 | HEAP32[$1 + 8 >> 2] > 122)) {
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2] - 71;
    break block1;
   }
   if (!(HEAP32[$1 + 8 >> 2] < 48 | HEAP32[$1 + 8 >> 2] > 57)) {
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2] + 4;
    break block1;
   }
   if (HEAP32[$1 + 8 >> 2] == 43) {
    HEAP32[$1 + 12 >> 2] = 62;
    break block1;
   }
   if (HEAP32[$1 + 8 >> 2] == 47) {
    HEAP32[$1 + 12 >> 2] = 63;
    break block1;
   }
   HEAP32[$1 + 12 >> 2] = -1;
  }
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jswrap_encodeURIComponent($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 96 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 88 >> 2] = $0;
  HEAP32[$1 + 84 >> 2] = jsvAsString(HEAP32[$1 + 88 >> 2]);
  block : {
   if (!HEAP32[$1 + 84 >> 2]) {
    HEAP32[$1 + 92 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 80 >> 2] = jsvNewFromEmptyString_1433();
   if (HEAP32[$1 + 80 >> 2]) {
    jsvStringIteratorNew($1 + 44 | 0, HEAP32[$1 + 84 >> 2], 0);
    jsvStringIteratorNew($1 + 8 | 0, HEAP32[$1 + 80 >> 2], 0);
    while (1) {
     if (jsvStringIteratorHasChar_1425($1 + 44 | 0) & 1) {
      HEAP8[$1 + 7 | 0] = jsvStringIteratorGetCharAndNext($1 + 44 | 0);
      block3 : {
       block2 : {
        block1 : {
         if (isAlpha(HEAP8[$1 + 7 | 0] << 24 >> 24) & 1) {
          break block1
         }
         if (isNumeric(HEAP8[$1 + 7 | 0] << 24 >> 24) & 1 | HEAPU8[$1 + 7 | 0] == 45 | (HEAPU8[$1 + 7 | 0] == 46 | HEAPU8[$1 + 7 | 0] == 33)) {
          break block1
         }
         if (HEAPU8[$1 + 7 | 0] == 126 | HEAPU8[$1 + 7 | 0] == 42 | (HEAPU8[$1 + 7 | 0] == 39 | HEAPU8[$1 + 7 | 0] == 40)) {
          break block1
         }
         if (HEAPU8[$1 + 7 | 0] != 41) {
          break block2
         }
        }
        jsvStringIteratorAppend($1 + 8 | 0, HEAP8[$1 + 7 | 0] << 24 >> 24);
        break block3;
       }
       jsvStringIteratorAppend($1 + 8 | 0, 37);
       HEAP32[$1 >> 2] = HEAP8[$1 + 7 | 0] << 24 >> 24 >>> 4;
       $2 = $1 + 8 | 0;
       if (HEAPU32[$1 >> 2] > 9) {
        $0 = HEAP32[$1 >> 2] + 55 | 0
       } else {
        $0 = HEAP32[$1 >> 2] + 48 | 0
       }
       jsvStringIteratorAppend($2, $0 << 24 >> 24);
       HEAP32[$1 >> 2] = HEAP8[$1 + 7 | 0] << 24 >> 24 & 15;
       $2 = $1 + 8 | 0;
       if (HEAPU32[$1 >> 2] > 9) {
        $0 = HEAP32[$1 >> 2] + 55 | 0
       } else {
        $0 = HEAP32[$1 >> 2] + 48 | 0
       }
       jsvStringIteratorAppend($2, $0 << 24 >> 24);
      }
      continue;
     }
     break;
    };
    jsvStringIteratorFree_1426($1 + 8 | 0);
    jsvStringIteratorFree_1426($1 + 44 | 0);
   }
   jsvUnLock(HEAP32[$1 + 84 >> 2]);
   HEAP32[$1 + 92 >> 2] = HEAP32[$1 + 80 >> 2];
  }
  __stack_pointer = $1 + 96 | 0;
  return HEAP32[$1 + 92 >> 2];
 }
 
 function jsvNewFromEmptyString_1433() {
  return jsvNewWithFlags(28);
 }
 
 function jswrap_decodeURIComponent($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 96 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 88 >> 2] = $0;
  HEAP32[$1 + 84 >> 2] = jsvAsString(HEAP32[$1 + 88 >> 2]);
  block : {
   if (!HEAP32[$1 + 84 >> 2]) {
    HEAP32[$1 + 92 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 80 >> 2] = jsvNewFromEmptyString_1433();
   if (HEAP32[$1 + 80 >> 2]) {
    jsvStringIteratorNew($1 + 44 | 0, HEAP32[$1 + 84 >> 2], 0);
    jsvStringIteratorNew($1 + 8 | 0, HEAP32[$1 + 80 >> 2], 0);
    while (1) {
     block1 : {
      if (!(jsvStringIteratorHasChar_1425($1 + 44 | 0) & 1)) {
       break block1
      }
      HEAP8[$1 + 7 | 0] = jsvStringIteratorGetCharAndNext($1 + 44 | 0);
      if (HEAP8[$1 + 7 | 0] << 24 >> 24 >> 7) {
       jsExceptionHere(1, 123705, 0);
       break block1;
      }
      if (HEAPU8[$1 + 7 | 0] == 37) {
       HEAP8[$1 + 6 | 0] = jsvStringIteratorGetCharAndNext($1 + 44 | 0);
       HEAP8[$1 + 5 | 0] = jsvStringIteratorGetCharAndNext($1 + 44 | 0);
       HEAP32[$1 >> 2] = hexToByte(HEAP8[$1 + 6 | 0] << 24 >> 24, HEAP8[$1 + 5 | 0] << 24 >> 24) << 24 >> 24;
       if (HEAP32[$1 >> 2] < 0) {
        jsExceptionHere(1, 141108, 0);
        break block1;
       }
       HEAP8[$1 + 7 | 0] = HEAP32[$1 >> 2];
      }
      jsvStringIteratorAppend($1 + 8 | 0, HEAP8[$1 + 7 | 0] << 24 >> 24);
      continue;
     }
     break;
    };
    jsvStringIteratorFree_1426($1 + 8 | 0);
    jsvStringIteratorFree_1426($1 + 44 | 0);
   }
   jsvUnLock(HEAP32[$1 + 84 >> 2]);
   HEAP32[$1 + 92 >> 2] = HEAP32[$1 + 80 >> 2];
  }
  __stack_pointer = $1 + 96 | 0;
  return HEAP32[$1 + 92 >> 2];
 }
 
 function jswrap_trace($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  block : {
   if (jsvIsUndefined(HEAP32[$1 + 12 >> 2]) & 1) {
    jsvTrace(HEAP32[92130], 0);
    break block;
   }
   jsvTrace(HEAP32[$1 + 12 >> 2], 0);
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_print($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsiConsoleRemoveInputLine();
  jsvObjectIteratorNew($1 + 8 | 0, HEAP32[$1 + 12 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_1416($1 + 8 | 0) & 1) {
    HEAP32[$1 + 4 >> 2] = jsvObjectIteratorGetValue_1415($1 + 8 | 0);
    block : {
     if (jsvIsString(HEAP32[$1 + 4 >> 2]) & 1) {
      jsiConsolePrintStringVar(HEAP32[$1 + 4 >> 2]);
      break block;
     }
     jsfPrintJSON(HEAP32[$1 + 4 >> 2], 261);
    }
    jsvUnLock(HEAP32[$1 + 4 >> 2]);
    jsvObjectIteratorNext($1 + 8 | 0);
    if (jsvObjectIteratorHasValue_1416($1 + 8 | 0) & 1) {
     jsiConsolePrintString(147034)
    }
    continue;
   }
   break;
  };
  jsvObjectIteratorFree_1417($1 + 8 | 0);
  jsiConsolePrintString(148265);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_console_trace($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  if (HEAP32[$1 + 12 >> 2]) {
   jswrap_print(HEAP32[$1 + 12 >> 2])
  }
  jslPrintStackTrace(7, 0, HEAP32[50123]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_json_stringify($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 44 >> 2] = $0;
  HEAP32[$3 + 40 >> 2] = $1;
  HEAP32[$3 + 36 >> 2] = $2;
  HEAP32[$3 + 32 >> 2] = 15568;
  HEAP32[$3 + 28 >> 2] = jsvNewFromEmptyString_1439();
  if (HEAP32[$3 + 28 >> 2]) {
   HEAP8[$3 + 23 | 0] = 0;
   HEAP8[$3 + 24 | 0] = 0;
   HEAP8[$3 + 25 | 0] = 0;
   HEAP8[$3 + 26 | 0] = 0;
   HEAP32[$3 + 16 >> 2] = 0;
   HEAP32[$3 + 20 >> 2] = 0;
   block : {
    if (jsvIsUndefined(HEAP32[$3 + 36 >> 2]) & 1) {
     break block
    }
    if (jsvIsNull(HEAP32[$3 + 36 >> 2]) & 1) {
     break block
    }
    block1 : {
     if (jsvIsNumeric(HEAP32[$3 + 36 >> 2]) & 1) {
      HEAP32[$3 + 12 >> 2] = jsvGetInteger(HEAP32[$3 + 36 >> 2]);
      if (HEAP32[$3 + 12 >> 2] < 0) {
       HEAP32[$3 + 12 >> 2] = 0
      }
      if (HEAP32[$3 + 12 >> 2] > 10) {
       HEAP32[$3 + 12 >> 2] = 10
      }
      HEAP8[HEAP32[$3 + 12 >> 2] + ($3 + 16 | 0) | 0] = 0;
      while (1) {
       if (HEAP32[$3 + 12 >> 2]) {
        $0 = HEAP32[$3 + 12 >> 2] - 1 | 0;
        HEAP32[$3 + 12 >> 2] = $0;
        HEAP8[($3 + 16 | 0) + $0 | 0] = 32;
        continue;
       }
       break;
      };
      break block1;
     }
     jsvGetString(HEAP32[$3 + 36 >> 2], $3 + 16 | 0, 10);
    }
   }
   if (strlen($3 + 16 | 0)) {
    HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 32 >> 2] | 6
   }
   jsfGetJSONWhitespace(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 28 >> 2], HEAP32[$3 + 32 >> 2], $3 + 16 | 0);
  }
  __stack_pointer = $3 + 48 | 0;
  return HEAP32[$3 + 28 >> 2];
 }
 
 function jsvNewFromEmptyString_1439() {
  return jsvNewWithFlags(28);
 }
 
 function jsfGetJSONWhitespace($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer + -64 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 60 >> 2] = $0;
  HEAP32[$4 + 56 >> 2] = $1;
  HEAP32[$4 + 52 >> 2] = $2;
  HEAP32[$4 + 48 >> 2] = $3;
  jsvStringIteratorNew($4 + 12 | 0, HEAP32[$4 + 56 >> 2], 0);
  jsvStringIteratorGotoEnd($4 + 12 | 0);
  jsfGetJSONWithCallback(HEAP32[$4 + 60 >> 2], 0, HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2], 2, $4 + 12 | 0);
  jsvStringIteratorFree_1442($4 + 12 | 0);
  __stack_pointer = $4 - -64 | 0;
 }
 
 function jsfGetJSONWithCallback($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0;
  $6 = __stack_pointer - 352 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 348 >> 2] = $0;
  HEAP32[$6 + 344 >> 2] = $1;
  HEAP32[$6 + 340 >> 2] = $2;
  HEAP32[$6 + 336 >> 2] = $3;
  HEAP32[$6 + 332 >> 2] = $4;
  HEAP32[$6 + 328 >> 2] = $5;
  HEAP32[$6 + 324 >> 2] = HEAP32[$6 + 340 >> 2] + 16384;
  if (!HEAP32[$6 + 336 >> 2]) {
   HEAP32[$6 + 336 >> 2] = 147030
  }
  block : {
   if (jsvIsUndefined(HEAP32[$6 + 348 >> 2]) & 1) {
    cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[$6 + 340 >> 2] & 64 ? 135673 : 138928, 0);
    break block;
   }
   block2 : {
    $0 = HEAP32[$6 + 348 >> 2];
    block1 : {
     if ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 512) {
      break block1
     }
     if (jsuGetFreeStack() >>> 0 < 512) {
      break block1
     }
     if (!(jspIsInterrupted() & 1)) {
      break block2
     }
    }
    cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], 147003, 0);
    break block;
   }
   $0 = HEAP32[$6 + 348 >> 2];
   $1 = HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8 | 512;
   HEAP8[$0 + 12 | 0] = $1;
   HEAP8[$0 + 13 | 0] = $1 >>> 8;
   block12 : {
    if (jsvIsArray(HEAP32[$6 + 348 >> 2]) & 1) {
     HEAP32[$6 + 320 >> 2] = jsvGetArrayLength(HEAP32[$6 + 348 >> 2]);
     $7 = HEAP32[$6 + 340 >> 2] & 8 ? HEAP32[$6 + 320 >> 2] > 15 : $7;
     HEAP8[$6 + 319 | 0] = $7;
     HEAP8[$6 + 318 | 0] = 0;
     cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[$6 + 340 >> 2] & 4 ? 146858 : 140520, 0);
     HEAP32[$6 + 312 >> 2] = -1;
     HEAP8[$6 + 311 | 0] = 1;
     HEAP8[$6 + 310 | 0] = 1;
     jsvObjectIteratorNew($6 + 304 | 0, HEAP32[$6 + 348 >> 2]);
     while (1) {
      $0 = 0;
      block3 : {
       if (HEAP32[$6 + 320 >> 2] <= (HEAP32[$6 + 312 >> 2] + 1 | 0)) {
        break block3
       }
       $0 = 0;
       if (!(HEAP8[$6 + 311 | 0] & 1)) {
        break block3
       }
       $0 = jspIsInterrupted() ^ -1;
      }
      if ($0 & 1) {
       HEAP32[$6 + 300 >> 2] = jsvObjectIteratorGetKey_1449($6 + 304 | 0);
       block11 : {
        block4 : {
         if (jsvObjectIteratorHasValue_1448($6 + 304 | 0) & 1) {
          if (!(jsvIsNumeric(HEAP32[$6 + 300 >> 2]) & 1)) {
           break block4
          }
         }
         block5 : {
          if (jsvObjectIteratorHasValue_1448($6 + 304 | 0) & 1) {
           $0 = jsvGetInteger(HEAP32[$6 + 300 >> 2]);
           break block5;
          }
          $0 = HEAP32[$6 + 320 >> 2] - 1 | 0;
         }
         HEAP32[$6 + 296 >> 2] = $0;
         HEAP32[$6 + 292 >> 2] = jsvObjectIteratorGetValue_1450($6 + 304 | 0);
         while (1) {
          if (HEAP32[$6 + 312 >> 2] < HEAP32[$6 + 296 >> 2]) {
           HEAP32[$6 + 312 >> 2] = HEAP32[$6 + 312 >> 2] + 1;
           if (!(!(!(HEAP8[$6 + 319 | 0] & 1) | HEAP32[$6 + 312 >> 2] < 5) & HEAP32[$6 + 312 >> 2] < (HEAP32[$6 + 320 >> 2] - 5 | 0))) {
            if (!(HEAP8[$6 + 310 | 0] & 1)) {
             cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[$6 + 340 >> 2] & 4 ? 147017 : 142566, 0)
            }
            HEAP8[$6 + 310 | 0] = 0;
            if (!(!(HEAP8[$6 + 319 | 0] & 1) | HEAP32[$6 + 312 >> 2] != (HEAP32[$6 + 320 >> 2] - 5 | 0))) {
             cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[50013], 0)
            }
            $0 = 0;
            if (HEAP32[$6 + 340 >> 2] & 1) {
             $0 = jsonNeedsNewLine(HEAP32[$6 + 292 >> 2])
            }
            HEAP8[$6 + 291 | 0] = $0 & 1;
            if (HEAP32[$6 + 340 >> 2] & 2) {
             HEAP8[$6 + 318 | 0] = 1;
             HEAP8[$6 + 291 | 0] = 1;
            }
            if (HEAP8[$6 + 318 | 0] & 1 | HEAP8[$6 + 291 | 0] & 1) {
             jsonNewLine(HEAP32[$6 + 324 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2]);
             HEAP8[$6 + 318 | 0] = 0;
            }
            block10 : {
             if (HEAP32[$6 + 312 >> 2] == HEAP32[$6 + 296 >> 2]) {
              HEAP32[$6 + 284 >> 2] = jsvNewFromInteger(HEAP32[$6 + 296 >> 2]);
              jsfGetJSONWithCallback(HEAP32[$6 + 292 >> 2], HEAP32[$6 + 284 >> 2], HEAP32[$6 + 324 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2]);
              jsvUnLock(HEAP32[$6 + 284 >> 2]);
              break block10;
             }
             cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[$6 + 340 >> 2] & 64 ? 135673 : 138928, 0);
            }
            HEAP8[$6 + 318 | 0] = HEAP8[$6 + 291 | 0] & 1;
           }
           continue;
          }
          break;
         };
         jsvUnLock(HEAP32[$6 + 292 >> 2]);
         jsvObjectIteratorNext($6 + 304 | 0);
         break block11;
        }
        HEAP8[$6 + 311 | 0] = 0;
       }
       jsvUnLock(HEAP32[$6 + 300 >> 2]);
       continue;
      }
      break;
     };
     if (HEAP32[$6 + 340 >> 2] & 4) {
      jsfGetJSONForObjectItWithCallback($6 + 304 | 0, HEAP32[$6 + 340 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 324 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP8[$6 + 310 | 0] & 1)
     }
     jsvObjectIteratorFree_1451($6 + 304 | 0);
     if (HEAP8[$6 + 318 | 0] & 1) {
      jsonNewLine(HEAP32[$6 + 340 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2])
     }
     cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[$6 + 340 >> 2] & 4 ? 140504 : 140505, 0);
     break block12;
    }
    block19 : {
     if (jsvIsArrayBuffer(HEAP32[$6 + 348 >> 2]) & 1) {
      HEAP8[$6 + 227 | 0] = 1;
      jsvArrayBufferIteratorNew($6 + 228 | 0, HEAP32[$6 + 348 >> 2], 0);
      while (1) {
       if (jsvArrayBufferIteratorHasElement($6 + 228 | 0) & 1) {
        if (jsvArrayBufferIteratorGetFloatValue($6 + 228 | 0) != 0.0) {
         HEAP8[$6 + 227 | 0] = 0
        }
        jsvArrayBufferIteratorNext($6 + 228 | 0);
        continue;
       }
       break;
      };
      jsvArrayBufferIteratorFree($6 + 228 | 0);
      HEAP8[$6 + 226 | 0] = (HEAP32[$6 + 340 >> 2] & 128) != 0;
      block14 : {
       if (!(!(HEAP8[$6 + 227 | 0] & 1) | HEAP8[$6 + 226 | 0] & 1)) {
        $0 = HEAP32[$6 + 332 >> 2];
        $1 = HEAP32[$6 + 328 >> 2];
        $2 = jswGetBasicObjectName(HEAP32[$6 + 348 >> 2]);
        HEAP32[$6 + 20 >> 2] = jsvGetArrayBufferLength(HEAP32[$6 + 348 >> 2]);
        HEAP32[$6 + 16 >> 2] = $2;
        cbprintf($0, $1, 144536, $6 + 16 | 0);
        break block14;
       }
       HEAP32[$6 + 220 >> 2] = jswGetBasicObjectName(HEAP32[$6 + 348 >> 2]);
       HEAP8[$6 + 219 | 0] = !strcmp(HEAP32[$6 + 220 >> 2], 128244);
       if (HEAP8[$6 + 219 | 0] & 1) {
        HEAP32[$6 + 220 >> 2] = 123789
       }
       $0 = HEAP32[$6 + 332 >> 2];
       $1 = HEAP32[$6 + 328 >> 2];
       $2 = HEAP8[$6 + 226 | 0] & 1;
       HEAP32[$6 >> 2] = HEAP32[$6 + 220 >> 2];
       cbprintf($0, $1, $2 ? 140520 : 140513, $6);
       if (HEAP32[$6 + 340 >> 2] & 2) {
        jsonNewLine(HEAP32[$6 + 324 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2])
       }
       HEAP32[$6 + 212 >> 2] = jsvGetArrayBufferLength(HEAP32[$6 + 348 >> 2]);
       $7 = HEAP32[$6 + 340 >> 2] & 8 ? HEAPU32[$6 + 212 >> 2] > 15 : $7;
       HEAP8[$6 + 211 | 0] = $7;
       jsvArrayBufferIteratorNew($6 + 228 | 0, HEAP32[$6 + 348 >> 2], 0);
       while (1) {
        $0 = 0;
        if (jsvArrayBufferIteratorHasElement($6 + 228 | 0) & 1) {
         $0 = jspIsInterrupted() ^ -1
        }
        if ($0 & 1) {
         if (!(!(!(HEAP8[$6 + 211 | 0] & 1) | HEAPU32[$6 + 276 >> 2] < 5) & HEAPU32[$6 + 276 >> 2] < HEAP32[$6 + 212 >> 2] - 5 >>> 0)) {
          if (HEAP32[$6 + 276 >> 2]) {
           cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[$6 + 340 >> 2] & 4 ? 147017 : 142566, 0)
          }
          if (HEAP32[$6 + 340 >> 2] & 2) {
           jsonNewLine(HEAP32[$6 + 324 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2])
          }
          if (!(!(HEAP8[$6 + 211 | 0] & 1) | HEAP32[$6 + 276 >> 2] != (HEAP32[$6 + 212 >> 2] - 5 | 0))) {
           cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[50013], 0)
          }
          HEAP32[$6 + 204 >> 2] = jsvArrayBufferIteratorGetValue($6 + 228 | 0, 0);
          jsfGetJSONWithCallback(HEAP32[$6 + 204 >> 2], 0, HEAP32[$6 + 324 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2]);
          jsvUnLock(HEAP32[$6 + 204 >> 2]);
         }
         jsvArrayBufferIteratorNext($6 + 228 | 0);
         continue;
        }
        break;
       };
       if (HEAP32[$6 + 340 >> 2] & 2) {
        jsonNewLine(HEAP32[$6 + 340 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2])
       }
       jsvArrayBufferIteratorFree($6 + 228 | 0);
       cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP8[$6 + 226 | 0] & 1 ? 140505 : 145627, 0);
       if (!(!(HEAP8[$6 + 219 | 0] & 1) | HEAP8[$6 + 226 | 0] & 1)) {
        cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], 128152, 0)
       }
      }
      break block19;
     }
     block25 : {
      if (jsvIsObject(HEAP32[$6 + 348 >> 2]) & 1) {
       block20 : {
        if (HEAP32[$6 + 340 >> 2] & 32) {
         $0 = jsiGetDeviceFromClass(HEAP32[$6 + 348 >> 2]) & 255;
         break block20;
        }
        $0 = 0;
       }
       HEAP8[$6 + 203 | 0] = $0;
       block21 : {
        if (HEAPU8[$6 + 203 | 0]) {
         $0 = HEAP32[$6 + 332 >> 2];
         $1 = HEAP32[$6 + 328 >> 2];
         HEAP32[$6 + 32 >> 2] = jshGetDeviceString(HEAPU8[$6 + 203 | 0]);
         cbprintf($0, $1, 127742, $6 + 32 | 0);
         break block21;
        }
        HEAP8[$6 + 202 | 0] = 1;
        if (HEAP32[$6 + 340 >> 2] & 256) {
         HEAP32[$6 + 196 >> 2] = jsvObjectGetChildIfExists(HEAP32[$6 + 348 >> 2], 140424);
         if (jsvHasChildren(HEAP32[$6 + 196 >> 2]) & 1) {
          HEAP32[$6 + 192 >> 2] = jsvObjectGetChildIfExists(HEAP32[$6 + 196 >> 2], 127861);
          if (HEAP32[$6 + 192 >> 2]) {
           HEAP32[$6 + 188 >> 2] = jsvGetIndexOf(HEAP32[92130], HEAP32[$6 + 192 >> 2], 1);
           if (HEAP32[$6 + 188 >> 2]) {
            $0 = HEAP32[$6 + 332 >> 2];
            $1 = HEAP32[$6 + 328 >> 2];
            HEAP32[$6 + 64 >> 2] = HEAP32[$6 + 188 >> 2];
            cbprintf($0, $1, 146893, $6 - -64 | 0);
           }
           jsvUnLock2(HEAP32[$6 + 188 >> 2], HEAP32[$6 + 192 >> 2]);
           HEAP32[$6 + 184 >> 2] = jspGetNamedField(HEAP32[$6 + 348 >> 2], 136543, 0);
           block22 : {
            if (!(jsvIsFunction(HEAP32[$6 + 184 >> 2]) & 1)) {
             break block22
            }
            $0 = HEAP32[$6 + 184 >> 2];
            if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 1) {
             break block22
            }
            HEAP32[$6 + 180 >> 2] = jspExecuteFunction(HEAP32[$6 + 184 >> 2], HEAP32[$6 + 348 >> 2], 0, 0);
            $0 = HEAP32[$6 + 332 >> 2];
            $1 = HEAP32[$6 + 328 >> 2];
            HEAP32[$6 + 48 >> 2] = HEAP32[$6 + 180 >> 2];
            cbprintf($0, $1, 124350, $6 + 48 | 0);
            jsvUnLock(HEAP32[$6 + 180 >> 2]);
            HEAP8[$6 + 202 | 0] = 0;
           }
           jsvUnLock(HEAP32[$6 + 184 >> 2]);
          }
         }
         jsvUnLock(HEAP32[$6 + 196 >> 2]);
        }
        if (HEAP8[$6 + 202 | 0] & 1) {
         HEAP32[$6 + 176 >> 2] = 0;
         if (HEAP32[$6 + 340 >> 2] & 8192) {
          HEAP32[$6 + 176 >> 2] = jspGetNamedField(HEAP32[$6 + 348 >> 2], 140949, 0)
         }
         block24 : {
          if (jsvIsFunction(HEAP32[$6 + 176 >> 2]) & 1) {
           block23 : {
            if (HEAP32[$6 + 344 >> 2]) {
             $0 = jsvAsString(HEAP32[$6 + 344 >> 2]);
             break block23;
            }
            $0 = 0;
           }
           HEAP32[$6 + 172 >> 2] = $0;
           HEAP32[$6 + 168 >> 2] = jspExecuteFunction(HEAP32[$6 + 176 >> 2], HEAP32[$6 + 348 >> 2], 1, $6 + 172 | 0);
           jsvUnLock(HEAP32[$6 + 172 >> 2]);
           if (HEAP32[$6 + 168 >> 2] == HEAP32[$6 + 348 >> 2]) {
            $0 = HEAP32[$6 + 348 >> 2];
            $1 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & -513;
            HEAP8[$0 + 12 | 0] = $1;
            HEAP8[$0 + 13 | 0] = $1 >>> 8;
           }
           jsfGetJSONWithCallback(HEAP32[$6 + 168 >> 2], 0, HEAP32[$6 + 340 >> 2] & -8193, HEAP32[$6 + 336 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2]);
           jsvUnLock(HEAP32[$6 + 168 >> 2]);
           break block24;
          }
          jsvObjectIteratorNew($6 + 164 | 0, HEAP32[$6 + 348 >> 2]);
          cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[$6 + 340 >> 2] & 4 ? 146768 : 123561, 0);
          HEAP8[$6 + 163 | 0] = jsfGetJSONForObjectItWithCallback($6 + 164 | 0, HEAP32[$6 + 340 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 324 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], 1) & 1;
          jsvObjectIteratorFree_1451($6 + 164 | 0);
          if (HEAP8[$6 + 163 | 0] & 1) {
           jsonNewLine(HEAP32[$6 + 340 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2])
          }
          cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[$6 + 340 >> 2] & 4 ? 123550 : 123554, 0);
         }
         jsvUnLock(HEAP32[$6 + 176 >> 2]);
        }
       }
       break block25;
      }
      block26 : {
       if (jsvIsFunction(HEAP32[$6 + 348 >> 2]) & 1) {
        if (HEAP32[$6 + 340 >> 2] & 16) {
         cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], 138928, 0);
         break block26;
        }
        cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], 146797, 0);
        jsfGetJSONForFunctionWithCallback(HEAP32[$6 + 348 >> 2], HEAP32[$6 + 324 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2]);
        break block26;
       }
       block31 : {
        block28 : {
         block27 : {
          if (jsvIsString(HEAP32[$6 + 348 >> 2]) & 1) {
           if (!(jsvIsName(HEAP32[$6 + 348 >> 2]) & 1)) {
            break block27
           }
          }
          if (!(HEAP32[$6 + 340 >> 2] & 1024)) {
           break block28
          }
          if (!(jsvIsPin(HEAP32[$6 + 348 >> 2]) & 1)) {
           break block28
          }
         }
         block30 : {
          block29 : {
           if (!(HEAP32[$6 + 340 >> 2] & 8)) {
            break block29
           }
           if (jsvGetStringLength(HEAP32[$6 + 348 >> 2]) >>> 0 <= 60) {
            break block29
           }
           HEAP32[$6 + 156 >> 2] = jsvNewFromStringVar(HEAP32[$6 + 348 >> 2], 0, 27);
           HEAP32[$6 + 152 >> 2] = jsvNewFromStringVar(HEAP32[$6 + 348 >> 2], jsvGetStringLength(HEAP32[$6 + 348 >> 2]) - 27 | 0, 27);
           $0 = HEAP32[$6 + 332 >> 2];
           $1 = HEAP32[$6 + 328 >> 2];
           $2 = HEAP32[$6 + 156 >> 2];
           $3 = HEAP32[50013];
           HEAP32[$6 + 88 >> 2] = HEAP32[$6 + 152 >> 2];
           HEAP32[$6 + 84 >> 2] = $3;
           HEAP32[$6 + 80 >> 2] = $2;
           cbprintf($0, $1, 128407, $6 + 80 | 0);
           jsvUnLock2(HEAP32[$6 + 156 >> 2], HEAP32[$6 + 152 >> 2]);
           break block30;
          }
          $0 = HEAP32[$6 + 332 >> 2];
          $1 = HEAP32[$6 + 328 >> 2];
          $2 = HEAP32[$6 + 340 >> 2] & 2048;
          HEAP32[$6 + 96 >> 2] = HEAP32[$6 + 348 >> 2];
          cbprintf($0, $1, $2 ? 140908 : 128601, $6 + 96 | 0);
         }
         break block31;
        }
        block33 : {
         block32 : {
          if (!(HEAP32[$6 + 340 >> 2] & 4096)) {
           break block32
          }
          if (!(jsvIsFloat(HEAP32[$6 + 348 >> 2]) & 1)) {
           break block32
          }
          __DOUBLE_BITS_1456(jsvGetFloat(HEAP32[$6 + 348 >> 2]));
          if ((i64toi32_i32$HIGH_BITS & 2147483647) >>> 0 < 2146435072) {
           break block32
          }
          cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], 135673, 0);
          break block33;
         }
         $0 = HEAP32[$6 + 332 >> 2];
         $1 = HEAP32[$6 + 328 >> 2];
         HEAP32[$6 + 112 >> 2] = HEAP32[$6 + 348 >> 2];
         cbprintf($0, $1, 124350, $6 + 112 | 0);
        }
       }
      }
     }
    }
   }
   $0 = HEAP32[$6 + 348 >> 2];
   $1 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & -513;
   HEAP8[$0 + 12 | 0] = $1;
   HEAP8[$0 + 13 | 0] = $1 >>> 8;
  }
  __stack_pointer = $6 + 352 | 0;
 }
 
 function jsvStringIteratorFree_1442($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_json_parse_internal($0) {
  var $1 = 0;
  $1 = __stack_pointer - 112 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 104 >> 2] = $0;
  block8 : {
   block7 : {
    block1 : {
     block : {
      block4 : {
       block3 : {
        block2 : {
         $0 = HEAP16[HEAP32[50123] + 2 >> 1];
         if (($0 | 0) != 45) {
          if (($0 | 0) == 91) {
           break block
          }
          if (($0 | 0) == 123) {
           break block1
          }
          if (($0 | 0) == 129) {
           break block2
          }
          if (($0 | 0) == 130) {
           break block3
          }
          if (($0 | 0) == 131) {
           break block4
          }
          block6 : {
           block5 : {
            if (($0 | 0) != 180) {
             if (($0 | 0) == 181) {
              break block5
             }
             if (($0 | 0) == 182) {
              break block6
             }
             break block7;
            }
            jslGetNextToken();
            HEAP32[$1 + 108 >> 2] = jsvNewFromBool(1);
            break block8;
           }
           jslGetNextToken();
           HEAP32[$1 + 108 >> 2] = jsvNewFromBool(0);
           break block8;
          }
          jslGetNextToken();
          HEAP32[$1 + 108 >> 2] = jsvNewWithFlags(2);
          break block8;
         }
         jslGetNextToken();
         if (!(HEAPU16[HEAP32[50123] + 2 >> 1] == 129 | HEAPU16[HEAP32[50123] + 2 >> 1] == 130)) {
          HEAP32[$1 + 108 >> 2] = 0;
          break block8;
         }
         HEAP32[$1 + 100 >> 2] = jswrap_json_parse_internal(HEAP32[$1 + 104 >> 2]);
         HEAP32[$1 + 96 >> 2] = jsvNewFromInteger(0);
         HEAP32[$1 + 92 >> 2] = jsvMathsOp(HEAP32[$1 + 96 >> 2], HEAP32[$1 + 100 >> 2], 45);
         jsvUnLock2(HEAP32[$1 + 100 >> 2], HEAP32[$1 + 96 >> 2]);
         HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 92 >> 2];
         break block8;
        }
        HEAP32[$1 + 88 >> 2] = jslGetTokenValueAsVar();
        jslGetNextToken();
        HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 88 >> 2];
        break block8;
       }
       HEAPF64[$1 + 80 >> 3] = stringToFloat(jslGetTokenValueAsString());
       jslGetNextToken();
       HEAP32[$1 + 108 >> 2] = jsvNewFromFloat(HEAPF64[$1 + 80 >> 3]);
       break block8;
      }
      HEAP32[$1 + 76 >> 2] = jslGetTokenValueAsVar();
      jslGetNextToken();
      HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 76 >> 2];
      break block8;
     }
     HEAP32[$1 + 72 >> 2] = jsvNewEmptyArray();
     if (!HEAP32[$1 + 72 >> 2]) {
      HEAP32[$1 + 108 >> 2] = 0;
      break block8;
     }
     jslGetNextToken();
     while (1) {
      $0 = 0;
      if (HEAPU16[HEAP32[50123] + 2 >> 1] != 93) {
       $0 = jspHasError() ^ -1
      }
      if ($0 & 1) {
       HEAP32[$1 + 68 >> 2] = jswrap_json_parse_internal(HEAP32[$1 + 104 >> 2]);
       block10 : {
        if (HEAP32[$1 + 68 >> 2]) {
         if (HEAPU16[HEAP32[50123] + 2 >> 1] == 93) {
          break block10
         }
         if (jslMatch(44) & 1) {
          break block10
         }
        }
        jsvUnLock2(HEAP32[$1 + 68 >> 2], HEAP32[$1 + 72 >> 2]);
        HEAP32[$1 + 108 >> 2] = 0;
        break block8;
       }
       jsvArrayPush(HEAP32[$1 + 72 >> 2], HEAP32[$1 + 68 >> 2]);
       jsvUnLock(HEAP32[$1 + 68 >> 2]);
       continue;
      }
      break;
     };
     if (!(jslMatch(93) & 1)) {
      jsvUnLock(HEAP32[$1 + 72 >> 2]);
      HEAP32[$1 + 108 >> 2] = 0;
      break block8;
     }
     HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 72 >> 2];
     break block8;
    }
    HEAP32[$1 + 64 >> 2] = jsvNewObject();
    if (!HEAP32[$1 + 64 >> 2]) {
     HEAP32[$1 + 108 >> 2] = 0;
     break block8;
    }
    jslGetNextToken();
    while (1) {
     block12 : {
      if (!(HEAPU16[HEAP32[50123] + 2 >> 1] == 131 | HEAPU16[HEAP32[50123] + 2 >> 1] == 129)) {
       $0 = 0;
       if (!(jslIsIDOrReservedWord() & 1)) {
        break block12
       }
      }
      $0 = jspHasError() ^ -1;
     }
     if ($0 & 1) {
      block13 : {
       if (HEAP32[$1 + 104 >> 2] & 512) {
        break block13
       }
       if (!(jslIsIDOrReservedWord() & 1) & HEAPU16[HEAP32[50123] + 2 >> 1] != 129) {
        break block13
       }
       jslMatch(131);
       HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 64 >> 2];
       break block8;
      }
      HEAP32[$1 + 60 >> 2] = jsvAsArrayIndexAndUnLock(jslGetTokenValueAsVar());
      jslGetNextToken();
      HEAP32[$1 + 56 >> 2] = 0;
      block15 : {
       block14 : {
        if (!(jslMatch(58) & 1)) {
         break block14
        }
        $0 = jswrap_json_parse_internal(HEAP32[$1 + 104 >> 2]);
        HEAP32[$1 + 56 >> 2] = $0;
        if (!$0) {
         break block14
        }
        if (HEAPU16[HEAP32[50123] + 2 >> 1] == 125) {
         break block15
        }
        if (jslMatch(44) & 1) {
         break block15
        }
       }
       jsvUnLock3(HEAP32[$1 + 60 >> 2], HEAP32[$1 + 56 >> 2], HEAP32[$1 + 64 >> 2]);
       HEAP32[$1 + 108 >> 2] = 0;
       break block8;
      }
      jsvAddName(HEAP32[$1 + 64 >> 2], jsvMakeIntoVariableName(HEAP32[$1 + 60 >> 2], HEAP32[$1 + 56 >> 2]));
      jsvUnLock2(HEAP32[$1 + 56 >> 2], HEAP32[$1 + 60 >> 2]);
      continue;
     }
     break;
    };
    if (!(jslMatch(125) & 1)) {
     jsvUnLock(HEAP32[$1 + 64 >> 2]);
     HEAP32[$1 + 108 >> 2] = 0;
     break block8;
    }
    HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 64 >> 2];
    break block8;
   }
   jslTokenAsString(HEAP16[HEAP32[50123] + 2 >> 1] << 16 >> 16, $1 + 16 | 0, 32);
   HEAP32[$1 >> 2] = $1 + 16;
   jsExceptionHere(2, 127643, $1);
   HEAP32[$1 + 108 >> 2] = 0;
  }
  __stack_pointer = $1 + 112 | 0;
  return HEAP32[$1 + 108 >> 2];
 }
 
 function jswrap_json_parse_ext($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 160 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 156 >> 2] = $0;
  HEAP32[$2 + 152 >> 2] = $1;
  HEAP32[$2 + 16 >> 2] = jsvAsString(HEAP32[$2 + 156 >> 2]);
  HEAP32[$2 + 12 >> 2] = jslSetLex($2 + 20 | 0);
  jslInit(HEAP32[$2 + 16 >> 2]);
  jsvUnLock(HEAP32[$2 + 16 >> 2]);
  HEAP32[$2 + 8 >> 2] = jswrap_json_parse_internal(HEAP32[$2 + 152 >> 2]);
  jslKill();
  jslSetLex(HEAP32[$2 + 12 >> 2]);
  __stack_pointer = $2 + 160 | 0;
  return HEAP32[$2 + 8 >> 2];
 }
 
 function jswrap_json_parse($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jswrap_json_parse_ext(HEAP32[$1 + 12 >> 2], 0);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function jswrap_json_parse_liberal($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP8[$2 + 11 | 0] = $1;
  HEAP32[$2 + 4 >> 2] = jswrap_json_parse_ext(HEAP32[$2 + 12 >> 2], 512);
  if (HEAP8[$2 + 11 | 0] & 1) {
   jsvUnLock(jspGetException());
   HEAP32[92138] = HEAP32[92138] & -33;
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 4 >> 2];
 }
 
 function jsfGetJSONForFunctionWithCallback($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer + -64 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 60 >> 2] = $0;
  HEAP32[$4 + 56 >> 2] = $1;
  HEAP32[$4 + 52 >> 2] = $2;
  HEAP32[$4 + 48 >> 2] = $3;
  HEAP32[$4 + 44 >> 2] = 0;
  jsvObjectIteratorNew($4 + 40 | 0, HEAP32[$4 + 60 >> 2]);
  HEAP8[$4 + 39 | 0] = 1;
  cbprintf(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2], 146345, 0);
  while (1) {
   if (jsvObjectIteratorHasValue_1448($4 + 40 | 0) & 1) {
    HEAP32[$4 + 32 >> 2] = jsvObjectIteratorGetKey_1449($4 + 40 | 0);
    block1 : {
     if (jsvIsFunctionParameter(HEAP32[$4 + 32 >> 2]) & 1) {
      block : {
       if (HEAP8[$4 + 39 | 0] & 1) {
        HEAP8[$4 + 39 | 0] = 0;
        break block;
       }
       cbprintf(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2], 142566, 0);
      }
      HEAP32[$4 + 28 >> 2] = jsvNewFromStringVar(HEAP32[$4 + 32 >> 2], 1, 2147483647);
      $0 = HEAP32[$4 + 52 >> 2];
      $1 = HEAP32[$4 + 48 >> 2];
      HEAP32[$4 >> 2] = HEAP32[$4 + 28 >> 2];
      cbprintf($0, $1, 124350, $4);
      jsvUnLock(HEAP32[$4 + 28 >> 2]);
      break block1;
     }
     block2 : {
      if (!(jsvIsString(HEAP32[$4 + 32 >> 2]) & 1)) {
       break block2
      }
      if (!(jsvIsStringEqual(HEAP32[$4 + 32 >> 2], 138400) & 1)) {
       break block2
      }
      HEAP32[$4 + 44 >> 2] = jsvObjectIteratorGetValue_1450($4 + 40 | 0);
     }
    }
    jsvUnLock(HEAP32[$4 + 32 >> 2]);
    jsvObjectIteratorNext($4 + 40 | 0);
    continue;
   }
   break;
  };
  jsvObjectIteratorFree_1451($4 + 40 | 0);
  cbprintf(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2], 147020, 0);
  block3 : {
   if (jsvIsNativeFunction(HEAP32[$4 + 60 >> 2]) & 1) {
    cbprintf(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2], 123535, 0);
    break block3;
   }
   block4 : {
    if (HEAP32[$4 + 44 >> 2]) {
     if (HEAP32[$4 + 56 >> 2] & 8) {
      $0 = HEAP32[$4 + 52 >> 2];
      $1 = HEAP32[$4 + 48 >> 2];
      HEAP32[$4 + 16 >> 2] = HEAP32[50013];
      cbprintf($0, $1, 122056, $4 + 16 | 0);
      break block4;
     }
     HEAP8[$4 + 27 | 0] = (jsvGetStringIndexOf(HEAP32[$4 + 44 >> 2], 10) | 0) >= 0;
     FUNCTION_TABLE[HEAP32[$4 + 52 >> 2]](HEAP8[$4 + 27 | 0] & 1 ? 147028 : 123561, HEAP32[$4 + 48 >> 2]);
     if (jsvIsFunctionReturn(HEAP32[$4 + 60 >> 2]) & 1) {
      FUNCTION_TABLE[HEAP32[$4 + 52 >> 2]](146789, HEAP32[$4 + 48 >> 2])
     }
     jslPrintTokenisedString(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2]);
     FUNCTION_TABLE[HEAP32[$4 + 52 >> 2]](HEAP8[$4 + 27 | 0] & 1 ? 123553 : 123554, HEAP32[$4 + 48 >> 2]);
     break block4;
    }
    cbprintf(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2], 122053, 0);
   }
  }
  jsvUnLock(HEAP32[$4 + 44 >> 2]);
  __stack_pointer = $4 - -64 | 0;
 }
 
 function jsvObjectIteratorHasValue_1448($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
 }
 
 function jsvObjectIteratorGetKey_1449($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvObjectIteratorGetValue_1450($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvObjectIteratorFree_1451($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jsonNeedsNewLine($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = 1;
  block : {
   if (jsvIsUndefined(HEAP32[$1 + 12 >> 2]) & 1) {
    break block
   }
   $0 = 1;
   if (jsvIsNull(HEAP32[$1 + 12 >> 2]) & 1) {
    break block
   }
   $0 = jsvIsNumeric(HEAP32[$1 + 12 >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return ($0 ^ -1) & 1;
 }
 
 function jsonNewLine($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  FUNCTION_TABLE[HEAP32[$4 + 20 >> 2]](148265, HEAP32[$4 + 16 >> 2]);
  HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 28 >> 2] >>> 14;
  while (1) {
   $0 = HEAP32[$4 + 12 >> 2];
   HEAP32[$4 + 12 >> 2] = $0 - 1;
   if ($0) {
    FUNCTION_TABLE[HEAP32[$4 + 20 >> 2]](HEAP32[$4 + 24 >> 2], HEAP32[$4 + 16 >> 2]);
    continue;
   }
   break;
  };
  __stack_pointer = $4 + 32 | 0;
 }
 
 function jsfGetJSONForObjectItWithCallback($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0;
  $7 = __stack_pointer - 128 | 0;
  __stack_pointer = $7;
  HEAP32[$7 + 124 >> 2] = $0;
  HEAP32[$7 + 120 >> 2] = $1;
  HEAP32[$7 + 116 >> 2] = $2;
  HEAP32[$7 + 112 >> 2] = $3;
  HEAP32[$7 + 108 >> 2] = $4;
  HEAP32[$7 + 104 >> 2] = $5;
  HEAP8[$7 + 103 | 0] = $6;
  HEAP8[$7 + 102 | 0] = 0;
  HEAP32[$7 + 96 >> 2] = 0;
  while (1) {
   $0 = 0;
   if (jsvObjectIteratorHasValue_1448(HEAP32[$7 + 124 >> 2]) & 1) {
    $0 = jspIsInterrupted() ^ -1
   }
   if ($0 & 1) {
    HEAP32[$7 + 92 >> 2] = jsvObjectIteratorGetKey_1449(HEAP32[$7 + 124 >> 2]);
    HEAP32[$7 + 88 >> 2] = jsvGetValueOfName(HEAP32[$7 + 92 >> 2]);
    $0 = 1;
    block : {
     if (jsvIsInternalObjectKey(HEAP32[$7 + 92 >> 2]) & 1) {
      break block
     }
     if (HEAP32[$7 + 120 >> 2] & 16) {
      $0 = 1;
      if (jsvIsFunction(HEAP32[$7 + 88 >> 2]) & 1) {
       break block
      }
     }
     if (HEAP32[$7 + 120 >> 2] & 64) {
      $0 = 1;
      if (jsvIsUndefined(HEAP32[$7 + 88 >> 2]) & 1) {
       break block
      }
     }
     $0 = jsvIsGetterOrSetter(HEAP32[$7 + 88 >> 2]);
    }
    HEAP8[$7 + 87 | 0] = $0 & 1;
    if (!(HEAP8[$7 + 87 | 0] & 1)) {
     HEAP32[$7 + 96 >> 2] = HEAP32[$7 + 96 >> 2] + 1;
     if (!(HEAP8[$7 + 103 | 0] & 1)) {
      cbprintf(HEAP32[$7 + 108 >> 2], HEAP32[$7 + 104 >> 2], HEAP32[$7 + 120 >> 2] & 4 ? 147017 : 142566, 0)
     }
     $0 = 0;
     if (HEAP32[$7 + 120 >> 2] & 1) {
      $0 = jsonNeedsNewLine(HEAP32[$7 + 88 >> 2])
     }
     HEAP8[$7 + 86 | 0] = $0 & 1;
     if (!(!(HEAP32[$7 + 120 >> 2] & 1) | HEAPU32[$7 + 96 >> 2] <= 4)) {
      HEAP8[$7 + 102 | 0] = 1
     }
     if (HEAP32[$7 + 120 >> 2] & 2) {
      HEAP8[$7 + 102 | 0] = 1;
      HEAP8[$7 + 86 | 0] = 1;
     }
     if (HEAP8[$7 + 102 | 0] & 1 | HEAP8[$7 + 86 | 0] & 1) {
      jsonNewLine(HEAP32[$7 + 112 >> 2], HEAP32[$7 + 116 >> 2], HEAP32[$7 + 108 >> 2], HEAP32[$7 + 104 >> 2]);
      HEAP8[$7 + 102 | 0] = 0;
      HEAP32[$7 + 96 >> 2] = 0;
     }
     HEAP8[$7 + 85 | 0] = 1;
     if (HEAP32[$7 + 120 >> 2] & 512) {
      block3 : {
       if (jsvIsIntegerish(HEAP32[$7 + 92 >> 2]) & 1) {
        HEAP8[$7 + 85 | 0] = 0;
        break block3;
       }
       block4 : {
        if (!(jsvIsString(HEAP32[$7 + 92 >> 2]) & 1)) {
         break block4
        }
        if (jsvGetStringLength(HEAP32[$7 + 92 >> 2]) >>> 0 >= 63) {
         break block4
        }
        jsvGetString(HEAP32[$7 + 92 >> 2], $7 + 16 | 0, 64);
        if (isIDString($7 + 16 | 0) & 1) {
         HEAP8[$7 + 85 | 0] = 0
        }
       }
      }
     }
     $1 = HEAP32[$7 + 108 >> 2];
     $2 = HEAP32[$7 + 104 >> 2];
     if (HEAP8[$7 + 85 | 0] & 1) {
      $0 = HEAP32[$7 + 120 >> 2] & 2048 ? 127632 : 127627
     } else {
      $0 = 127622
     }
     $3 = HEAP32[$7 + 92 >> 2];
     HEAP32[$7 + 4 >> 2] = HEAP32[$7 + 120 >> 2] & 4 ? 146948 : 141978;
     HEAP32[$7 >> 2] = $3;
     cbprintf($1, $2, $0, $7);
     if (HEAP8[$7 + 103 | 0] & 1) {
      HEAP8[$7 + 103 | 0] = 0
     }
     jsfGetJSONWithCallback(HEAP32[$7 + 88 >> 2], HEAP32[$7 + 92 >> 2], HEAP32[$7 + 112 >> 2], HEAP32[$7 + 116 >> 2], HEAP32[$7 + 108 >> 2], HEAP32[$7 + 104 >> 2]);
     HEAP8[$7 + 102 | 0] = HEAP8[$7 + 86 | 0] & 1;
    }
    jsvUnLock2(HEAP32[$7 + 92 >> 2], HEAP32[$7 + 88 >> 2]);
    jsvObjectIteratorNext(HEAP32[$7 + 124 >> 2]);
    continue;
   }
   break;
  };
  __stack_pointer = $7 + 128 | 0;
  return HEAP8[$7 + 102 | 0] & 1;
 }
 
 function __DOUBLE_BITS_1456($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAPF64[$1 + 8 >> 3] = $0;
  HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  return HEAP32[$1 >> 2];
 }
 
 function jsfGetJSON($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  jsfGetJSONWhitespace(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jsfPrintJSON($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  jsfGetJSONWithCallback(HEAP32[$2 + 12 >> 2], 0, HEAP32[$2 + 8 >> 2], 0, 7, 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jswrap_number_constructor($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 24 >> 2] = $0;
  block : {
   if (!jsvGetArrayLength(HEAP32[$1 + 24 >> 2])) {
    HEAP32[$1 + 28 >> 2] = jsvNewFromInteger(0);
    break block;
   }
   HEAP32[$1 + 20 >> 2] = jsvGetArrayItem(HEAP32[$1 + 24 >> 2], 0);
   HEAP32[$1 + 16 >> 2] = 0;
   block4 : {
    if (jsvIsArray(HEAP32[$1 + 20 >> 2]) & 1) {
     HEAP32[$1 + 12 >> 2] = jsvGetArrayLength(HEAP32[$1 + 20 >> 2]);
     block1 : {
      if (!HEAP32[$1 + 12 >> 2]) {
       HEAP32[$1 + 16 >> 2] = jsvNewFromInteger(0);
       break block1;
      }
      if (HEAP32[$1 + 12 >> 2] == 1) {
       HEAP32[$1 + 8 >> 2] = jsvGetArrayItem(HEAP32[$1 + 20 >> 2], 0);
       block3 : {
        block2 : {
         if (!(jsvIsString(HEAP32[$1 + 8 >> 2]) & 1)) {
          break block2
         }
         if (!(jsvIsEmptyString(HEAP32[$1 + 8 >> 2]) & 1)) {
          break block2
         }
         HEAP32[$1 + 16 >> 2] = jsvNewFromInteger(0);
         break block3;
        }
        if (!(jsvIsBoolean(HEAP32[$1 + 8 >> 2]) & 1)) {
         HEAP32[$1 + 16 >> 2] = jsvAsNumber(HEAP32[$1 + 8 >> 2])
        }
       }
       jsvUnLock(HEAP32[$1 + 8 >> 2]);
      }
     }
     break block4;
    }
    block6 : {
     block5 : {
      if (!(jsvIsUndefined(HEAP32[$1 + 20 >> 2]) & 1)) {
       if (!(jsvIsObject(HEAP32[$1 + 20 >> 2]) & 1)) {
        break block5
       }
      }
      HEAP32[$1 + 16 >> 2] = 0;
      break block6;
     }
     block8 : {
      block7 : {
       if (!(jsvIsString(HEAP32[$1 + 20 >> 2]) & 1)) {
        break block7
       }
       if (!(jsvIsEmptyString(HEAP32[$1 + 20 >> 2]) & 1)) {
        break block7
       }
       HEAP32[$1 + 16 >> 2] = jsvNewFromInteger(0);
       break block8;
      }
      HEAP32[$1 + 16 >> 2] = jsvAsNumber(HEAP32[$1 + 20 >> 2]);
     }
    }
   }
   jsvUnLock(HEAP32[$1 + 20 >> 2]);
   if (HEAP32[$1 + 16 >> 2]) {
    HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 16 >> 2];
    break block;
   }
   HEAP32[$1 + 28 >> 2] = jsvNewFromFloat(NaN);
  }
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 28 >> 2];
 }
 
 function jswrap_number_toFixed($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 80 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 76 >> 2] = $0;
  HEAP32[$2 + 72 >> 2] = $1;
  if (HEAP32[$2 + 72 >> 2] < 0) {
   HEAP32[$2 + 72 >> 2] = 0
  }
  if (HEAP32[$2 + 72 >> 2] > 20) {
   HEAP32[$2 + 72 >> 2] = 20
  }
  ftoa_bounded_extra(jsvGetFloat(HEAP32[$2 + 76 >> 2]), $2, 70, 10, HEAP32[$2 + 72 >> 2]);
  $0 = jsvNewFromString($2);
  __stack_pointer = $2 + 80 | 0;
  return $0 | 0;
 }
 
 function jswrap_object_constructor($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 24 >> 2] = $0;
  block2 : {
   block1 : {
    block : {
     if (jsvIsObject(HEAP32[$1 + 24 >> 2]) & 1) {
      break block
     }
     if (jsvIsArray(HEAP32[$1 + 24 >> 2]) & 1) {
      break block
     }
     if (!(jsvIsFunction(HEAP32[$1 + 24 >> 2]) & 1)) {
      break block1
     }
    }
    HEAP32[$1 + 28 >> 2] = jsvLockAgain(HEAP32[$1 + 24 >> 2]);
    break block2;
   }
   HEAP32[$1 + 20 >> 2] = jswGetBasicObjectName(HEAP32[$1 + 24 >> 2]);
   block3 : {
    if (HEAP32[$1 + 20 >> 2]) {
     $0 = jspGetNamedVariable(HEAP32[$1 + 20 >> 2]);
     break block3;
    }
    $0 = 0;
   }
   HEAP32[$1 + 16 >> 2] = $0;
   if (!HEAP32[$1 + 16 >> 2]) {
    HEAP32[$1 + 28 >> 2] = jsvNewObject();
    break block2;
   }
   HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[$1 + 16 >> 2]);
   HEAP32[$1 + 8 >> 2] = jspeFunctionCall(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 16 >> 2], 0, 0, 1, $1 + 24 | 0);
   jsvUnLock2(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 12 >> 2]);
   HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 8 >> 2];
  }
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 28 >> 2];
 }
 
 function jswrap_object_length($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block4 : {
   block : {
    if (jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1) {
     HEAP32[$1 + 4 >> 2] = jsvGetArrayLength(HEAP32[$1 + 8 >> 2]);
     break block;
    }
    block1 : {
     if (jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) {
      HEAP32[$1 + 4 >> 2] = jsvGetArrayBufferLength(HEAP32[$1 + 8 >> 2]);
      break block1;
     }
     block2 : {
      if (jsvIsString(HEAP32[$1 + 8 >> 2]) & 1) {
       HEAP32[$1 + 4 >> 2] = jsvGetStringLength(HEAP32[$1 + 8 >> 2]);
       break block2;
      }
      block3 : {
       if (jsvIsFunction(HEAP32[$1 + 8 >> 2]) & 1) {
        HEAP32[$1 >> 2] = jsvGetFunctionArgumentLength(HEAP32[$1 + 8 >> 2]);
        HEAP32[$1 + 4 >> 2] = jsvGetArrayLength(HEAP32[$1 >> 2]);
        jsvUnLock(HEAP32[$1 >> 2]);
        break block3;
       }
       HEAP32[$1 + 12 >> 2] = 0;
       break block4;
      }
     }
    }
   }
   HEAP32[$1 + 12 >> 2] = jsvNewFromInteger(HEAP32[$1 + 4 >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jswrap_object_valueOf($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP32[$1 >> 2] = HEAP32[$1 + 8 >> 2];
    jsExceptionHere(3, 136918, $1);
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[$1 + 8 >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jswrap_object_toString($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 96 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 88 >> 2] = $0;
  HEAP32[$2 + 84 >> 2] = $1;
  block3 : {
   block : {
    if (!(jsvIsInt(HEAP32[$2 + 84 >> 2]) & 1)) {
     break block
    }
    if (!(jsvIsNumeric(HEAP32[$2 + 88 >> 2]) & 1)) {
     break block
    }
    HEAP32[$2 + 80 >> 2] = jsvGetInteger(HEAP32[$2 + 84 >> 2]);
    if (!(HEAP32[$2 + 80 >> 2] < 2 | HEAP32[$2 + 80 >> 2] > 36)) {
     block2 : {
      if (jsvIsInt(HEAP32[$2 + 88 >> 2]) & 1) {
       itostr_1465(jsvGetInteger(HEAP32[$2 + 88 >> 2]), $2, HEAP32[$2 + 80 >> 2]);
       break block2;
      }
      ftoa_bounded_extra(jsvGetFloat(HEAP32[$2 + 88 >> 2]), $2, 70, HEAP32[$2 + 80 >> 2], -1);
     }
     HEAP32[$2 + 92 >> 2] = jsvNewFromString($2);
     break block3;
    }
   }
   HEAP32[$2 + 92 >> 2] = jsvAsString(HEAP32[$2 + 88 >> 2]);
  }
  __stack_pointer = $2 + 96 | 0;
  return HEAP32[$2 + 92 >> 2];
 }
 
 function itostr_1465($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  itostr_extra(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], 1, HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jswrap_object_clone($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvCopy(HEAP32[$1 + 8 >> 2], 1);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jswrap_object_keys_or_property_names_cb($0, $1, $2, $3) {
  var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $4 = __stack_pointer - 144 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 140 >> 2] = $0;
  HEAP32[$4 + 136 >> 2] = $1;
  HEAP32[$4 + 132 >> 2] = $2;
  HEAP32[$4 + 128 >> 2] = $3;
  block : {
   if (!(jsvIsIterable(HEAP32[$4 + 140 >> 2]) & 1)) {
    break block
   }
   if (wasm2js_i32$0 = jsvIsArrayBuffer(HEAP32[$4 + 140 >> 2]) & 1, wasm2js_i32$1 = 0, wasm2js_i32$2 = HEAP32[$4 + 136 >> 2] & 4, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) {
    break block
   }
   HEAP32[$4 + 124 >> 2] = jsvGetInternalFunctionCheckerFor(HEAP32[$4 + 140 >> 2]);
   jsvIteratorNew($4 - -64 | 0, HEAP32[$4 + 140 >> 2], 0);
   while (1) {
    if (jsvIteratorHasElement($4 - -64 | 0) & 1) {
     HEAP32[$4 + 60 >> 2] = jsvIteratorGetKey($4 - -64 | 0);
     block2 : {
      block1 : {
       if (!HEAP32[$4 + 124 >> 2]) {
        break block1
       }
       if (!(FUNCTION_TABLE[HEAP32[$4 + 124 >> 2]](HEAP32[$4 + 60 >> 2]) & 1)) {
        break block1
       }
       if (!(jsvIsStringEqual(HEAP32[$4 + 60 >> 2], 127861) & 1)) {
        break block2
       }
      }
      HEAP32[$4 + 56 >> 2] = jsvAsStringAndUnLock(jsvCopyNameOnly(HEAP32[$4 + 60 >> 2], 0, 0));
      if (HEAP32[$4 + 56 >> 2]) {
       FUNCTION_TABLE[HEAP32[$4 + 132 >> 2]](HEAP32[$4 + 128 >> 2], HEAP32[$4 + 56 >> 2]);
       jsvUnLock(HEAP32[$4 + 56 >> 2]);
      }
     }
     jsvUnLock(HEAP32[$4 + 60 >> 2]);
     jsvIteratorNext($4 - -64 | 0);
     continue;
    }
    break;
   };
   jsvIteratorFree($4 - -64 | 0);
  }
  if (HEAP32[$4 + 136 >> 2] & 1) {
   HEAP32[$4 + 52 >> 2] = jswGetSymbolListForObjectProto(0);
   HEAP32[$4 + 48 >> 2] = jspGetPrototypeOwner(HEAP32[$4 + 140 >> 2]);
   block3 : {
    if (HEAP32[$4 + 48 >> 2]) {
     HEAP32[$4 + 44 >> 2] = jswGetSymbolListForObjectProto(HEAP32[$4 + 48 >> 2]);
     jsvUnLock(HEAP32[$4 + 48 >> 2]);
     _jswrap_object_keys_or_property_names_iterator(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 132 >> 2], HEAP32[$4 + 128 >> 2]);
     break block3;
    }
    block4 : {
     if (jsvIsObject(HEAP32[$4 + 140 >> 2]) & 1) {
      if (!(jsvIsRoot(HEAP32[$4 + 140 >> 2]) & 1)) {
       break block4
      }
     }
     HEAP32[$4 + 40 >> 2] = jswGetSymbolListForObject(HEAP32[$4 + 140 >> 2]);
     _jswrap_object_keys_or_property_names_iterator(HEAP32[$4 + 40 >> 2], HEAP32[$4 + 132 >> 2], HEAP32[$4 + 128 >> 2]);
    }
   }
   if (HEAP32[$4 + 136 >> 2] & 2) {
    HEAP32[$4 + 36 >> 2] = 0;
    block5 : {
     if (!(jsvIsObject(HEAP32[$4 + 140 >> 2]) & 1)) {
      if (!(jsvIsFunction(HEAP32[$4 + 140 >> 2]) & 1)) {
       break block5
      }
     }
     HEAP32[$4 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 140 >> 2], 140424);
    }
    block6 : {
     if (jsvIsObject(HEAP32[$4 + 36 >> 2]) & 1) {
      jswrap_object_keys_or_property_names_cb(HEAP32[$4 + 36 >> 2], HEAP32[$4 + 136 >> 2], HEAP32[$4 + 132 >> 2], HEAP32[$4 + 128 >> 2]);
      break block6;
     }
     HEAP32[$4 + 32 >> 2] = jswGetSymbolListForObjectProto(HEAP32[$4 + 140 >> 2]);
     _jswrap_object_keys_or_property_names_iterator(HEAP32[$4 + 32 >> 2], HEAP32[$4 + 132 >> 2], HEAP32[$4 + 128 >> 2]);
     if (HEAP32[$4 + 52 >> 2] != HEAP32[$4 + 32 >> 2]) {
      _jswrap_object_keys_or_property_names_iterator(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 132 >> 2], HEAP32[$4 + 128 >> 2])
     }
    }
    jsvUnLock(HEAP32[$4 + 36 >> 2]);
   }
   block7 : {
    if (!(jsvIsArray(HEAP32[$4 + 140 >> 2]) & 1)) {
     if (!(jsvIsString(HEAP32[$4 + 140 >> 2]) & 1)) {
      break block7
     }
    }
    HEAP32[$4 + 28 >> 2] = jsvNewFromString(136130);
    FUNCTION_TABLE[HEAP32[$4 + 132 >> 2]](HEAP32[$4 + 128 >> 2], HEAP32[$4 + 28 >> 2]);
    jsvUnLock(HEAP32[$4 + 28 >> 2]);
   }
  }
  if (jsvIsRoot(HEAP32[$4 + 140 >> 2]) & 1) {
   HEAP32[$4 + 24 >> 2] = 0;
   while (1) {
    if (HEAP32[$4 + 24 >> 2] < 48) {
     jshGetPinString($4 + 14 | 0, HEAP32[$4 + 24 >> 2] & 255);
     HEAP32[$4 + 8 >> 2] = jsvNewFromString($4 + 14 | 0);
     FUNCTION_TABLE[HEAP32[$4 + 132 >> 2]](HEAP32[$4 + 128 >> 2], HEAP32[$4 + 8 >> 2]);
     jsvUnLock(HEAP32[$4 + 8 >> 2]);
     HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 24 >> 2] + 1;
     continue;
    }
    break;
   };
  }
  __stack_pointer = $4 + 144 | 0;
 }
 
 function _jswrap_object_keys_or_property_names_iterator($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  block : {
   if (!HEAP32[$3 + 28 >> 2]) {
    break block
   }
   HEAP8[$3 + 15 | 0] = HEAPU8[HEAP32[$3 + 28 >> 2] + 8 | 0];
   HEAP32[$3 + 16 >> 2] = 0;
   while (1) {
    if (HEAPU32[$3 + 16 >> 2] >= HEAPU8[$3 + 15 | 0]) {
     break block
    }
    $0 = HEAP32[$3 + 28 >> 2];
    $0 = (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) + (HEAP32[$3 + 16 >> 2] << 3) | 0;
    HEAP16[$3 + 12 >> 1] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
    $0 = HEAP32[$3 + 28 >> 2];
    HEAP32[$3 + 8 >> 2] = jsvNewFromString(HEAPU16[$3 + 12 >> 1] + (HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24)) | 0);
    FUNCTION_TABLE[HEAP32[$3 + 24 >> 2]](HEAP32[$3 + 20 >> 2], HEAP32[$3 + 8 >> 2]);
    jsvUnLock(HEAP32[$3 + 8 >> 2]);
    HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] + 1;
    continue;
   };
  }
  __stack_pointer = $3 + 32 | 0;
 }
 
 function jswrap_object_keys_or_property_names($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 >> 2] = jsvNewEmptyArray();
  block : {
   if (!HEAP32[$2 >> 2]) {
    HEAP32[$2 + 12 >> 2] = 0;
    break block;
   }
   jswrap_object_keys_or_property_names_cb(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2], 619, HEAP32[$2 >> 2]);
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function _jswrap_object_values_cb($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
  HEAP32[$2 >> 2] = jsvAsArrayIndex(HEAP32[$2 + 8 >> 2]);
  jsvArrayPushAndUnLock(HEAP32[HEAP32[$2 + 4 >> 2] >> 2], jspGetVarNamedField(HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2], HEAP32[$2 >> 2], 0));
  jsvUnLock(HEAP32[$2 >> 2]);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function _jswrap_object_entries_cb($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 28 >> 2];
  HEAP32[$2 + 16 >> 2] = jsvNewEmptyArray();
  if (HEAP32[$2 + 16 >> 2]) {
   jsvArrayPush(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 24 >> 2]);
   HEAP32[$2 + 12 >> 2] = jsvAsArrayIndex(HEAP32[$2 + 24 >> 2]);
   jsvArrayPushAndUnLock(HEAP32[$2 + 16 >> 2], jspGetVarNamedField(HEAP32[HEAP32[$2 + 20 >> 2] + 4 >> 2], HEAP32[$2 + 12 >> 2], 0));
   jsvUnLock(HEAP32[$2 + 12 >> 2]);
   jsvArrayPushAndUnLock(HEAP32[HEAP32[$2 + 20 >> 2] >> 2], HEAP32[$2 + 16 >> 2]);
  }
  __stack_pointer = $2 + 32 | 0;
 }
 
 function jswrap_object_values_or_entries($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP8[$2 + 23 | 0] = $1;
  HEAP32[$2 + 12 >> 2] = jsvNewEmptyArray();
  HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 24 >> 2];
  block : {
   if (!HEAP32[$2 + 12 >> 2]) {
    HEAP32[$2 + 28 >> 2] = 0;
    break block;
   }
   jswrap_object_keys_or_property_names_cb(HEAP32[$2 + 24 >> 2], 0, HEAP8[$2 + 23 | 0] & 1 ? 620 : 621, $2 + 12 | 0);
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jswrap_object_fromEntries($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 24 >> 2] = $0;
  block : {
   if (!(jsvIsArray(HEAP32[$1 + 24 >> 2]) & 1)) {
    HEAP32[$1 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 20 >> 2] = jsvNewObject();
   if (!HEAP32[$1 + 20 >> 2]) {
    HEAP32[$1 + 28 >> 2] = 0;
    break block;
   }
   jsvObjectIteratorNew($1 + 16 | 0, HEAP32[$1 + 24 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_1474($1 + 16 | 0) & 1) {
     HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetValue_1475($1 + 16 | 0);
     if (jsvIsArray(HEAP32[$1 + 12 >> 2]) & 1) {
      HEAP32[$1 + 8 >> 2] = jsvGetArrayItem(HEAP32[$1 + 12 >> 2], 0);
      HEAP32[$1 + 4 >> 2] = jsvGetArrayItem(HEAP32[$1 + 12 >> 2], 1);
      if (jsvIsString(HEAP32[$1 + 8 >> 2]) & 1) {
       jsvObjectSetChildVar(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 8 >> 2], HEAP32[$1 + 4 >> 2])
      }
      jsvUnLock2(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 4 >> 2]);
     }
     jsvUnLock(HEAP32[$1 + 12 >> 2]);
     jsvObjectIteratorNext($1 + 16 | 0);
     continue;
    }
    break;
   };
   HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
  }
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 28 >> 2];
 }
 
 function jsvObjectIteratorHasValue_1474($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
 }
 
 function jsvObjectIteratorGetValue_1475($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jswrap_object_create($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  block1 : {
   block : {
    if (jsvIsObject(HEAP32[$2 + 24 >> 2]) & 1) {
     break block
    }
    if (jsvIsNull(HEAP32[$2 + 24 >> 2]) & 1) {
     break block
    }
    HEAP32[$2 >> 2] = HEAP32[$2 + 24 >> 2];
    jsExceptionHere(3, 126711, $2);
    HEAP32[$2 + 28 >> 2] = 0;
    break block1;
   }
   if (jsvIsObject(HEAP32[$2 + 20 >> 2]) & 1) {
    jsExceptionHere(1, 124970, 0)
   }
   HEAP32[$2 + 16 >> 2] = jsvNewObject();
   if (!HEAP32[$2 + 16 >> 2]) {
    HEAP32[$2 + 28 >> 2] = 0;
    break block1;
   }
   if (jsvIsObject(HEAP32[$2 + 24 >> 2]) & 1) {
    jsvObjectSetChild(HEAP32[$2 + 16 >> 2], 140424, HEAP32[$2 + 24 >> 2])
   }
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jswrap_object_getOwnPropertyDescriptor($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 40 >> 2] = $0;
  HEAP32[$2 + 36 >> 2] = $1;
  block : {
   if (!(jswrap_object_hasOwnProperty(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]) & 1)) {
    HEAP32[$2 + 44 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 32 >> 2] = jsvAsArrayIndex(HEAP32[$2 + 36 >> 2]);
   HEAP32[$2 + 28 >> 2] = jspGetVarNamedField(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 32 >> 2], 1);
   jsvUnLock(HEAP32[$2 + 32 >> 2]);
   if (!HEAP32[$2 + 28 >> 2]) {
    HEAP32[$2 + 44 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 24 >> 2] = jsvNewObject();
   if (!HEAP32[$2 + 24 >> 2]) {
    jsvUnLock(HEAP32[$2 + 28 >> 2]);
    HEAP32[$2 + 44 >> 2] = 0;
    break block;
   }
   HEAP8[$2 + 23 | 0] = jsvIsNewChild(HEAP32[$2 + 28 >> 2]) & 1;
   HEAP32[$2 + 16 >> 2] = jsvGetInternalFunctionCheckerFor(HEAP32[$2 + 40 >> 2]);
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 137706, jsvNewFromBool((jsvIsConstant(HEAP32[$2 + 28 >> 2]) ^ -1) & 1));
   $0 = 1;
   $1 = HEAP32[$2 + 24 >> 2];
   if (HEAP32[$2 + 16 >> 2]) {
    $0 = FUNCTION_TABLE[HEAP32[$2 + 16 >> 2]](HEAP32[$2 + 28 >> 2]) ^ -1
   }
   jsvObjectSetChildAndUnLock($1, 137765, jsvNewFromBool($0 & 1));
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 137715, jsvNewFromBool((HEAPU8[$2 + 23 | 0] ^ -1) & 1));
   HEAP32[$2 + 12 >> 2] = jsvGetValueOfName(HEAP32[$2 + 28 >> 2]);
   block1 : {
    if (jsvIsGetterOrSetter(HEAP32[$2 + 12 >> 2]) & 1) {
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 125075, jsvObjectGetChildIfExists(HEAP32[$2 + 12 >> 2], 125075));
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 125061, jsvObjectGetChildIfExists(HEAP32[$2 + 12 >> 2], 125061));
     break block1;
    }
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 137177, jsvSkipName(HEAP32[$2 + 28 >> 2]));
   }
   jsvUnLock(HEAP32[$2 + 12 >> 2]);
   jsvUnLock(HEAP32[$2 + 28 >> 2]);
   HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 24 >> 2];
  }
  __stack_pointer = $2 + 48 | 0;
  return HEAP32[$2 + 44 >> 2];
 }
 
 function jswrap_object_hasOwnProperty($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 80 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 76 >> 2] = $0;
  HEAP32[$2 + 72 >> 2] = $1;
  HEAP32[$2 + 68 >> 2] = jsvAsArrayIndex(HEAP32[$2 + 72 >> 2]);
  HEAP8[$2 + 67 | 0] = 0;
  if (jsvHasChildren(HEAP32[$2 + 76 >> 2]) & 1) {
   HEAP32[$2 + 60 >> 2] = jsvFindChildFromVar(HEAP32[$2 + 76 >> 2], HEAP32[$2 + 68 >> 2], 0);
   if (HEAP32[$2 + 60 >> 2]) {
    HEAP8[$2 + 67 | 0] = 1;
    jsvUnLock(HEAP32[$2 + 60 >> 2]);
   }
  }
  block : {
   if (HEAP8[$2 + 67 | 0] & 1) {
    break block
   }
   if (jsvIsObject(HEAP32[$2 + 76 >> 2]) & 1) {
    break block
   }
   HEAP32[$2 + 56 >> 2] = jswGetSymbolListForObject(HEAP32[$2 + 76 >> 2]);
   if (HEAP32[$2 + 56 >> 2]) {
    jsvGetString(HEAP32[$2 + 68 >> 2], $2 + 16 | 0, 32);
    HEAP32[$2 + 12 >> 2] = jswBinarySearch(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 76 >> 2], $2 + 16 | 0);
    if (HEAP32[$2 + 12 >> 2]) {
     HEAP8[$2 + 67 | 0] = 1
    }
    jsvUnLock(HEAP32[$2 + 12 >> 2]);
   }
  }
  jsvUnLock(HEAP32[$2 + 68 >> 2]);
  __stack_pointer = $2 + 80 | 0;
  return HEAP8[$2 + 67 | 0] & 1;
 }
 
 function jswrap_object_getOwnPropertyDescriptors($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 24 >> 2] = $0;
  block : {
   if (!(jsvHasChildren(HEAP32[$1 + 24 >> 2]) & 1)) {
    HEAP32[$1 >> 2] = HEAP32[$1 + 24 >> 2];
    jsExceptionHere(3, 125666, $1);
    HEAP32[$1 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 20 >> 2] = jsvNewObject();
   if (!HEAP32[$1 + 20 >> 2]) {
    HEAP32[$1 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 16 >> 2] = jswrap_object_keys_or_property_names(HEAP32[$1 + 24 >> 2], 1);
   jsvObjectIteratorNew($1 + 12 | 0, HEAP32[$1 + 16 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_1474($1 + 12 | 0) & 1) {
     HEAP32[$1 + 8 >> 2] = jsvObjectIteratorGetValue_1475($1 + 12 | 0);
     HEAP32[$1 + 4 >> 2] = jswrap_object_getOwnPropertyDescriptor(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 8 >> 2]);
     jsvObjectSetChildVar(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 8 >> 2], HEAP32[$1 + 4 >> 2]);
     jsvUnLock2(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 4 >> 2]);
     jsvObjectIteratorNext($1 + 12 | 0);
     continue;
    }
    break;
   };
   jsvObjectIteratorFree_1480($1 + 12 | 0);
   jsvUnLock(HEAP32[$1 + 16 >> 2]);
   HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
  }
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 28 >> 2];
 }
 
 function jsvObjectIteratorFree_1480($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_object_defineProperty($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer + -64 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 56 >> 2] = $0;
  HEAP32[$3 + 52 >> 2] = $1;
  HEAP32[$3 + 48 >> 2] = $2;
  block1 : {
   block : {
    if (jsvIsObject(HEAP32[$3 + 56 >> 2]) & 1) {
     break block
    }
    if (jsvIsFunction(HEAP32[$3 + 56 >> 2]) & 1) {
     break block
    }
    if (jsvIsArray(HEAP32[$3 + 56 >> 2]) & 1) {
     break block
    }
    HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 56 >> 2];
    jsExceptionHere(1, 125469, $3 + 16 | 0);
    HEAP32[$3 + 60 >> 2] = 0;
    break block1;
   }
   if (!(jsvIsObject(HEAP32[$3 + 48 >> 2]) & 1)) {
    HEAP32[$3 >> 2] = HEAP32[$3 + 48 >> 2];
    jsExceptionHere(1, 125743, $3);
    HEAP32[$3 + 60 >> 2] = 0;
    break block1;
   }
   HEAP32[$3 + 44 >> 2] = jsvAsArrayIndex(HEAP32[$3 + 52 >> 2]);
   HEAP32[$3 + 40 >> 2] = 0;
   HEAP32[$3 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 48 >> 2], 125075);
   HEAP32[$3 + 32 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 48 >> 2], 125061);
   if (HEAP32[$3 + 36 >> 2] | HEAP32[$3 + 32 >> 2]) {
    HEAP32[$3 + 40 >> 2] = jsvNewWithFlags(6);
    if (HEAP32[$3 + 40 >> 2]) {
     if (HEAP32[$3 + 36 >> 2]) {
      jsvObjectSetChild(HEAP32[$3 + 40 >> 2], 125075, HEAP32[$3 + 36 >> 2])
     }
     if (HEAP32[$3 + 32 >> 2]) {
      jsvObjectSetChild(HEAP32[$3 + 40 >> 2], 125061, HEAP32[$3 + 32 >> 2])
     }
    }
    jsvUnLock2(HEAP32[$3 + 36 >> 2], HEAP32[$3 + 32 >> 2]);
   }
   if (!HEAP32[$3 + 40 >> 2]) {
    HEAP32[$3 + 40 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 48 >> 2], 137177)
   }
   jsvObjectSetChildVar(HEAP32[$3 + 56 >> 2], HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2]);
   HEAP32[$3 + 28 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 48 >> 2], 137706);
   block3 : {
    if (jsvIsUndefined(HEAP32[$3 + 28 >> 2]) & 1) {
     break block3
    }
    if (jsvGetBoolAndUnLock(HEAP32[$3 + 28 >> 2]) & 1) {
     break block3
    }
    $0 = HEAP32[$3 + 44 >> 2];
    $1 = HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8 | 64;
    HEAP8[$0 + 12 | 0] = $1;
    HEAP8[$0 + 13 | 0] = $1 >>> 8;
   }
   jsvUnLock2(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2]);
   HEAP32[$3 + 60 >> 2] = jsvLockAgain(HEAP32[$3 + 56 >> 2]);
  }
  __stack_pointer = $3 - -64 | 0;
  return HEAP32[$3 + 60 >> 2];
 }
 
 function jswrap_object_defineProperties($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 40 >> 2] = $0;
  HEAP32[$2 + 36 >> 2] = $1;
  block : {
   if (!(jsvIsObject(HEAP32[$2 + 40 >> 2]) & 1)) {
    HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 40 >> 2];
    jsExceptionHere(1, 125666, $2 + 16 | 0);
    HEAP32[$2 + 44 >> 2] = 0;
    break block;
   }
   if (!(jsvIsObject(HEAP32[$2 + 36 >> 2]) & 1)) {
    HEAP32[$2 >> 2] = HEAP32[$2 + 36 >> 2];
    jsExceptionHere(1, 125704, $2);
    HEAP32[$2 + 44 >> 2] = 0;
    break block;
   }
   jsvObjectIteratorNew($2 + 32 | 0, HEAP32[$2 + 36 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_1474($2 + 32 | 0) & 1) {
     HEAP32[$2 + 28 >> 2] = jsvObjectIteratorGetKey_1483($2 + 32 | 0);
     HEAP32[$2 + 24 >> 2] = jsvObjectIteratorGetValue_1475($2 + 32 | 0);
     jsvUnLock3(jswrap_object_defineProperty(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2]), HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2]);
     jsvObjectIteratorNext($2 + 32 | 0);
     continue;
    }
    break;
   };
   jsvObjectIteratorFree_1480($2 + 32 | 0);
   HEAP32[$2 + 44 >> 2] = jsvLockAgain(HEAP32[$2 + 40 >> 2]);
  }
  __stack_pointer = $2 + 48 | 0;
  return HEAP32[$2 + 44 >> 2];
 }
 
 function jsvObjectIteratorGetKey_1483($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jswrap_object_getPrototypeOf($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jspGetNamedField(HEAP32[$1 + 12 >> 2], 140424, 0);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function jswrap_object_setPrototypeOf($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  block1 : {
   block : {
    if (!(jsvIsFunction(HEAP32[$2 + 12 >> 2]) & 1)) {
     if (!(jsvIsObject(HEAP32[$2 + 12 >> 2]) & 1)) {
      break block
     }
    }
    $0 = jsvFindOrAddChildFromString(HEAP32[$2 + 12 >> 2], 140424);
    break block1;
   }
   $0 = 0;
  }
  HEAP32[$2 + 4 >> 2] = $0;
  block2 : {
   if (!(jsvIsName(HEAP32[$2 + 4 >> 2]) & 1)) {
    HEAP32[$2 >> 2] = HEAP32[$2 + 4 >> 2];
    jsExceptionHere(3, 126527, $2);
    break block2;
   }
   jsvSetValueOfName(HEAP32[$2 + 4 >> 2], HEAP32[$2 + 8 >> 2]);
  }
  jsvUnLock(HEAP32[$2 + 4 >> 2]);
  $0 = jsvLockAgainSafe(HEAP32[$2 + 12 >> 2]);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function jswrap_object_assign($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 28 >> 2] = $0;
  HEAP32[$1 + 24 >> 2] = 0;
  jsvObjectIteratorNew($1 + 20 | 0, HEAP32[$1 + 28 >> 2]);
  HEAP8[$1 + 19 | 0] = 0;
  while (1) {
   $0 = 0;
   if (!(HEAP8[$1 + 19 | 0] & 1)) {
    $0 = jsvObjectIteratorHasValue_1474($1 + 20 | 0)
   }
   if ($0 & 1) {
    HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetValue_1475($1 + 20 | 0);
    block : {
     if (jsvIsUndefined(HEAP32[$1 + 12 >> 2]) & 1) {
      break block
     }
     if (jsvIsNull(HEAP32[$1 + 12 >> 2]) & 1) {
      break block
     }
     block1 : {
      if (!(jsvIsObject(HEAP32[$1 + 12 >> 2]) & 1)) {
       HEAP32[$1 >> 2] = HEAP32[$1 + 12 >> 2];
       jsExceptionHere(3, 125641, $1);
       HEAP8[$1 + 19 | 0] = 1;
       break block1;
      }
      block2 : {
       if (!HEAP32[$1 + 24 >> 2]) {
        HEAP32[$1 + 24 >> 2] = jsvLockAgain(HEAP32[$1 + 12 >> 2]);
        break block2;
       }
       jsvObjectAppendAll(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 12 >> 2]);
      }
     }
    }
    jsvUnLock(HEAP32[$1 + 12 >> 2]);
    jsvObjectIteratorNext($1 + 20 | 0);
    continue;
   }
   break;
  };
  jsvObjectIteratorFree_1480($1 + 20 | 0);
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 24 >> 2];
 }
 
 function jswrap_boolean_constructor($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jsvGetBool(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return $0 & 1;
 }
 
 function jswrap_object_addEventListener($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP16[$4 + 18 >> 1] = $3;
  HEAP32[$4 + 12 >> 2] = jsvNewFromString(HEAP32[$4 + 24 >> 2]);
  HEAP32[$4 + 8 >> 2] = jsvNewNativeFunction(HEAP32[$4 + 20 >> 2], HEAPU16[$4 + 18 >> 1]);
  jswrap_object_on(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2]);
  jsvUnLock2(HEAP32[$4 + 8 >> 2], HEAP32[$4 + 12 >> 2]);
  __stack_pointer = $4 + 32 | 0;
 }
 
 function jswrap_object_on($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  jswrap_object_on_X(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jswrap_object_on_X($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 44 >> 2] = $0;
  HEAP32[$4 + 40 >> 2] = $1;
  HEAP32[$4 + 36 >> 2] = $2;
  HEAP8[$4 + 35 | 0] = $3;
  block : {
   if (!(jsvHasChildren(HEAP32[$4 + 44 >> 2]) & 1)) {
    jsExceptionHere(3, 140162, 0);
    break block;
   }
   if (!(jsvIsString(HEAP32[$4 + 40 >> 2]) & 1)) {
    jsExceptionHere(3, 136609, 0);
    break block;
   }
   block1 : {
    if (jsvIsFunction(HEAP32[$4 + 36 >> 2]) & 1) {
     break block1
    }
    if (jsvIsString(HEAP32[$4 + 36 >> 2]) & 1) {
     break block1
    }
    jsExceptionHere(3, 136639, 0);
    break block;
   }
   HEAP32[$4 >> 2] = HEAP32[$4 + 40 >> 2];
   HEAP32[$4 + 28 >> 2] = jsvVarPrintf(124248, $4);
   if (!HEAP32[$4 + 28 >> 2]) {
    break block
   }
   HEAP32[$4 + 24 >> 2] = jsvFindChildFromVar(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 28 >> 2], 1);
   jsvUnLock(HEAP32[$4 + 28 >> 2]);
   HEAP32[$4 + 20 >> 2] = jsvSkipName(HEAP32[$4 + 24 >> 2]);
   HEAP32[$4 + 16 >> 2] = 0;
   block2 : {
    if (HEAP8[$4 + 35 | 0] & 1) {
     HEAP32[$4 + 16 >> 2] = jsvNewArray($4 + 36 | 0, 1);
     if (HEAP32[$4 + 20 >> 2]) {
      jsvArrayPushAll(HEAP32[$4 + 16 >> 2], HEAP32[$4 + 20 >> 2], 0)
     }
     break block2;
    }
    HEAP32[$4 + 16 >> 2] = jsvNewEmptyArray();
    if (HEAP32[$4 + 20 >> 2]) {
     jsvArrayPushAll(HEAP32[$4 + 16 >> 2], HEAP32[$4 + 20 >> 2], 0)
    }
    jsvArrayPush(HEAP32[$4 + 16 >> 2], HEAP32[$4 + 36 >> 2]);
   }
   jsvUnLock(HEAP32[$4 + 20 >> 2]);
   HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 16 >> 2];
   jsvSetValueOfName(HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2]);
   jsvUnLock2(HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2]);
   if (!(jsvIsStringEqual(HEAP32[$4 + 40 >> 2], 140390) & 1)) {
    break block
   }
   HEAP32[$4 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 44 >> 2], 136853);
   if (jsvIsString(HEAP32[$4 + 12 >> 2]) & 1) {
    jsiQueueObjectCallbacks(HEAP32[$4 + 44 >> 2], 140298, $4 + 12 | 0, 1);
    jsvObjectRemoveChild(HEAP32[$4 + 44 >> 2], 136853);
   }
   jsvUnLock(HEAP32[$4 + 12 >> 2]);
  }
  __stack_pointer = $4 + 48 | 0;
 }
 
 function jswrap_object_prependListener($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  jswrap_object_on_X(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 1);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jswrap_object_emit($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $4 = __stack_pointer + -64 | 0;
  $3 = $4;
  __stack_pointer = $3;
  HEAP32[$3 + 60 >> 2] = $0;
  HEAP32[$3 + 56 >> 2] = $1;
  HEAP32[$3 + 52 >> 2] = $2;
  block : {
   if (!(jsvHasChildren(HEAP32[$3 + 60 >> 2]) & 1)) {
    jsExceptionHere(3, 140162, 0);
    break block;
   }
   if (!(jsvIsString(HEAP32[$3 + 56 >> 2]) & 1)) {
    jsExceptionHere(3, 136609, 0);
    break block;
   }
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 56 >> 2];
   HEAP32[$3 + 48 >> 2] = jsvVarPrintf(124248, $3 + 16 | 0);
   if (!HEAP32[$3 + 48 >> 2]) {
    break block
   }
   HEAP32[$3 + 44 >> 2] = 4;
   HEAP32[$3 + 40 >> 2] = $4;
   $4 = $4 - 16 | 0;
   __stack_pointer = $4;
   HEAP32[$3 + 36 >> 2] = 0;
   jsvObjectIteratorNew($3 + 32 | 0, HEAP32[$3 + 52 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_1474($3 + 32 | 0) & 1) {
     if (HEAPU32[$3 + 36 >> 2] >= 4) {
      HEAP32[$3 >> 2] = 4;
      jsExceptionHere(3, 144511, $3);
     } else {
      $0 = jsvObjectIteratorGetValue_1475($3 + 32 | 0);
      $1 = HEAP32[$3 + 36 >> 2];
      HEAP32[$3 + 36 >> 2] = $1 + 1;
      HEAP32[($1 << 2) + $4 >> 2] = $0;
      jsvObjectIteratorNext($3 + 32 | 0);
      continue;
     }
    }
    break;
   };
   jsvObjectIteratorFree_1480($3 + 32 | 0);
   HEAP32[$3 + 28 >> 2] = jsvSkipNameAndUnLock(jsvFindChildFromVar(HEAP32[$3 + 60 >> 2], HEAP32[$3 + 48 >> 2], 0));
   jsvUnLock(HEAP32[$3 + 48 >> 2]);
   if (HEAP32[$3 + 28 >> 2]) {
    jsiQueueEvents(HEAP32[$3 + 60 >> 2], HEAP32[$3 + 28 >> 2], $4, HEAP32[$3 + 36 >> 2])
   }
   jsvUnLock(HEAP32[$3 + 28 >> 2]);
   jsvUnLockMany(HEAP32[$3 + 36 >> 2], $4);
  }
  __stack_pointer = $3 - -64 | 0;
 }
 
 function jswrap_object_removeListener($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  block : {
   if (!(jsvHasChildren(HEAP32[$3 + 28 >> 2]) & 1)) {
    jsExceptionHere(3, 140162, 0);
    break block;
   }
   if (jsvIsString(HEAP32[$3 + 24 >> 2]) & 1) {
    HEAP32[$3 >> 2] = HEAP32[$3 + 24 >> 2];
    HEAP32[$3 + 16 >> 2] = jsvVarPrintf(124248, $3);
    if (!HEAP32[$3 + 16 >> 2]) {
     break block
    }
    HEAP32[$3 + 12 >> 2] = jsvFindChildFromVar(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 16 >> 2], 1);
    jsvUnLock(HEAP32[$3 + 16 >> 2]);
    HEAP32[$3 + 8 >> 2] = jsvSkipName(HEAP32[$3 + 12 >> 2]);
    if (HEAP32[$3 + 8 >> 2]) {
     if (jsvIsArray(HEAP32[$3 + 8 >> 2]) & 1) {
      HEAP32[$3 + 4 >> 2] = jsvGetIndexOf(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 20 >> 2], 1);
      if (HEAP32[$3 + 4 >> 2]) {
       jsvRemoveChildAndUnLock(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2])
      }
     }
     jsvUnLock(HEAP32[$3 + 8 >> 2]);
    }
    jsvUnLock(HEAP32[$3 + 12 >> 2]);
    break block;
   }
   jsExceptionHere(3, 136609, 0);
  }
  __stack_pointer = $3 + 32 | 0;
 }
 
 function jswrap_object_removeAllListeners($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  block : {
   if (!(jsvHasChildren(HEAP32[$2 + 28 >> 2]) & 1)) {
    jsExceptionHere(3, 140162, 0);
    break block;
   }
   if (jsvIsString(HEAP32[$2 + 24 >> 2]) & 1) {
    HEAP32[$2 >> 2] = HEAP32[$2 + 24 >> 2];
    HEAP32[$2 + 20 >> 2] = jsvVarPrintf(124248, $2);
    if (!HEAP32[$2 + 20 >> 2]) {
     break block
    }
    HEAP32[$2 + 16 >> 2] = jsvFindChildFromVar(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 20 >> 2], 1);
    jsvUnLock(HEAP32[$2 + 20 >> 2]);
    if (HEAP32[$2 + 16 >> 2]) {
     jsvRemoveChildAndUnLock(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 16 >> 2])
    }
    break block;
   }
   block1 : {
    if (jsvIsUndefined(HEAP32[$2 + 24 >> 2]) & 1) {
     jsvObjectIteratorNew($2 + 12 | 0, HEAP32[$2 + 28 >> 2]);
     while (1) {
      if (jsvObjectIteratorHasValue_1474($2 + 12 | 0) & 1) {
       HEAP32[$2 + 8 >> 2] = jsvObjectIteratorGetKey_1483($2 + 12 | 0);
       jsvObjectIteratorNext($2 + 12 | 0);
       if (jsvIsStringEqualOrStartsWith(HEAP32[$2 + 8 >> 2], 135410, 1) & 1) {
        jsvRemoveChild(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 8 >> 2])
       }
       jsvUnLock(HEAP32[$2 + 8 >> 2]);
       continue;
      }
      break;
     };
     jsvObjectIteratorFree_1480($2 + 12 | 0);
     break block1;
    }
    jsExceptionHere(3, 138853, 0);
   }
  }
  __stack_pointer = $2 + 32 | 0;
 }
 
 function jswrap_object_removeAllListeners_cstr($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = jsvNewFromString(HEAP32[$2 + 8 >> 2]);
  if (HEAP32[$2 + 4 >> 2]) {
   jswrap_object_removeAllListeners(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2]);
   jsvUnLock(HEAP32[$2 + 4 >> 2]);
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jswrap_function_replaceWith($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  block1 : {
   block : {
    if (jsvIsFunction(HEAP32[$2 + 28 >> 2]) & 1) {
     if (jsvIsFunction(HEAP32[$2 + 24 >> 2]) & 1) {
      break block
     }
    }
    jsExceptionHere(3, 135309, 0);
    break block1;
   }
   if ((jsvIsNativeFunction(HEAP32[$2 + 28 >> 2]) & 1) != (jsvIsNativeFunction(HEAP32[$2 + 24 >> 2]) & 1)) {
    block2 : {
     if (jsvIsNativeFunction(HEAP32[$2 + 24 >> 2]) & 1) {
      $0 = HEAP32[$2 + 28 >> 2];
      $1 = HEAP32[$2 + 28 >> 2];
      $1 = (HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & -64 | 8;
      HEAP8[$0 + 12 | 0] = $1;
      HEAP8[$0 + 13 | 0] = $1 >>> 8;
      $0 = HEAP32[$2 + 28 >> 2];
      $1 = HEAP32[$2 + 24 >> 2];
      $3 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
      HEAP8[$0 | 0] = $3;
      HEAP8[$0 + 1 | 0] = $3 >>> 8;
      HEAP8[$0 + 2 | 0] = $3 >>> 16;
      HEAP8[$0 + 3 | 0] = $3 >>> 24;
      $1 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8;
      HEAP8[$0 + 4 | 0] = $1;
      HEAP8[$0 + 5 | 0] = $1 >>> 8;
      break block2;
     }
     $0 = HEAP32[$2 + 28 >> 2];
     HEAP8[$0 | 0] = 0;
     HEAP8[$0 + 1 | 0] = 0;
     HEAP8[$0 + 2 | 0] = 0;
     HEAP8[$0 + 3 | 0] = 0;
     HEAP8[$0 + 4 | 0] = 0;
     HEAP8[$0 + 5 | 0] = 0;
     $0 = HEAP32[$2 + 28 >> 2];
     $1 = HEAP32[$2 + 28 >> 2];
     $1 = (HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & -64 | 7;
     HEAP8[$0 + 12 | 0] = $1;
     HEAP8[$0 + 13 | 0] = $1 >>> 8;
    }
   }
   if ((jsvIsFunctionReturn(HEAP32[$2 + 28 >> 2]) & 1) != (jsvIsFunctionReturn(HEAP32[$2 + 24 >> 2]) & 1)) {
    block3 : {
     if (jsvIsFunctionReturn(HEAP32[$2 + 24 >> 2]) & 1) {
      $0 = HEAP32[$2 + 28 >> 2];
      $1 = HEAP32[$2 + 28 >> 2];
      $1 = (HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & -64 | 9;
      HEAP8[$0 + 12 | 0] = $1;
      HEAP8[$0 + 13 | 0] = $1 >>> 8;
      break block3;
     }
     $0 = HEAP32[$2 + 28 >> 2];
     $1 = HEAP32[$2 + 28 >> 2];
     $1 = (HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & -64 | 7;
     HEAP8[$0 + 12 | 0] = $1;
     HEAP8[$0 + 13 | 0] = $1 >>> 8;
    }
   }
   HEAP32[$2 + 20 >> 2] = jsvFindChildFromString(HEAP32[$2 + 28 >> 2], 135032);
   HEAP32[$2 + 16 >> 2] = jsvFindChildFromString(HEAP32[$2 + 28 >> 2], 137493);
   jsvRemoveAllChildren(HEAP32[$2 + 28 >> 2]);
   jsvObjectIteratorNew($2 + 12 | 0, HEAP32[$2 + 24 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_1474($2 + 12 | 0) & 1) {
     HEAP32[$2 + 8 >> 2] = jsvObjectIteratorGetKey_1483($2 + 12 | 0);
     jsvObjectIteratorNext($2 + 12 | 0);
     block4 : {
      if (jsvIsStringEqual(HEAP32[$2 + 8 >> 2], 135032) & 1) {
       break block4
      }
      if (jsvIsStringEqual(HEAP32[$2 + 8 >> 2], 137493) & 1) {
       break block4
      }
      block5 : {
       if (jsvIsStringEqual(HEAP32[$2 + 8 >> 2], 138400) & 1) {
        HEAP32[$2 >> 2] = jsvSkipName(HEAP32[$2 + 8 >> 2]);
        HEAP32[$2 + 4 >> 2] = jsvMakeIntoVariableName(jsvNewFromStringVarComplete(HEAP32[$2 + 8 >> 2]), HEAP32[$2 >> 2]);
        jsvUnLock(HEAP32[$2 >> 2]);
        break block5;
       }
       HEAP32[$2 + 4 >> 2] = jsvCopy(HEAP32[$2 + 8 >> 2], 1);
      }
      if (HEAP32[$2 + 4 >> 2]) {
       jsvAddName(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 4 >> 2]);
       jsvUnLock(HEAP32[$2 + 4 >> 2]);
      }
     }
     jsvUnLock(HEAP32[$2 + 8 >> 2]);
     continue;
    }
    break;
   };
   jsvObjectIteratorFree_1480($2 + 12 | 0);
   if (HEAP32[$2 + 20 >> 2]) {
    jsvAddName(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 20 >> 2])
   }
   jsvUnLock(HEAP32[$2 + 20 >> 2]);
   if (HEAP32[$2 + 16 >> 2]) {
    jsvAddName(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 16 >> 2])
   }
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
  }
  __stack_pointer = $2 + 32 | 0;
 }
 
 function jswrap_function_apply_or_call($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $4 = __stack_pointer - 128 | 0;
  $3 = $4;
  __stack_pointer = $3;
  HEAP32[$3 + 120 >> 2] = $0;
  HEAP32[$3 + 116 >> 2] = $1;
  HEAP32[$3 + 112 >> 2] = $2;
  HEAP32[$3 + 104 >> 2] = 0;
  HEAP32[$3 + 100 >> 2] = 0;
  block : {
   block2 : {
    if (jsvIsIterable(HEAP32[$3 + 112 >> 2]) & 1) {
     HEAP32[$3 + 100 >> 2] = jsvGetLength(HEAP32[$3 + 112 >> 2]);
     if (HEAPU32[$3 + 100 >> 2] > 256) {
      HEAP32[$3 >> 2] = HEAP32[$3 + 100 >> 2];
      jsExceptionHere(1, 139465, $3);
      HEAP32[$3 + 124 >> 2] = 0;
      break block;
     }
     $4 = $4 - ((HEAP32[$3 + 100 >> 2] << 2) + 15 & -16) | 0;
     __stack_pointer = $4;
     HEAP32[$3 + 104 >> 2] = $4;
     HEAP32[$3 + 108 >> 2] = 0;
     while (1) {
      if (HEAPU32[$3 + 108 >> 2] < HEAPU32[$3 + 100 >> 2]) {
       HEAP32[HEAP32[$3 + 104 >> 2] + (HEAP32[$3 + 108 >> 2] << 2) >> 2] = 0;
       HEAP32[$3 + 108 >> 2] = HEAP32[$3 + 108 >> 2] + 1;
       continue;
      }
      break;
     };
     jsvIteratorNew($3 + 40 | 0, HEAP32[$3 + 112 >> 2], 1);
     while (1) {
      if (jsvIteratorHasElement($3 + 40 | 0) & 1) {
       HEAP32[$3 + 36 >> 2] = jsvIteratorGetKey($3 + 40 | 0);
       if (jsvIsIntegerish(HEAP32[$3 + 36 >> 2]) & 1) {
        HEAP32[$3 + 32 >> 2] = jsvGetInteger(HEAP32[$3 + 36 >> 2]);
        if (!(HEAP32[$3 + 32 >> 2] < 0 | HEAP32[$3 + 32 >> 2] >= HEAP32[$3 + 100 >> 2])) {
         $0 = jsvIteratorGetValue($3 + 40 | 0);
         HEAP32[HEAP32[$3 + 104 >> 2] + (HEAP32[$3 + 32 >> 2] << 2) >> 2] = $0;
        }
       }
       jsvUnLock(HEAP32[$3 + 36 >> 2]);
       jsvIteratorNext($3 + 40 | 0);
       continue;
      }
      break;
     };
     jsvIteratorFree($3 + 40 | 0);
     break block2;
    }
    if (!(jsvIsUndefined(HEAP32[$3 + 112 >> 2]) & 1)) {
     HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 112 >> 2];
     jsExceptionHere(1, 126202, $3 + 16 | 0);
     HEAP32[$3 + 124 >> 2] = 0;
     break block;
    }
   }
   HEAP32[$3 + 28 >> 2] = jspeFunctionCall(HEAP32[$3 + 120 >> 2], 0, HEAP32[$3 + 116 >> 2], 0, HEAP32[$3 + 100 >> 2], HEAP32[$3 + 104 >> 2]);
   jsvUnLockMany(HEAP32[$3 + 100 >> 2], HEAP32[$3 + 104 >> 2]);
   HEAP32[$3 + 124 >> 2] = HEAP32[$3 + 28 >> 2];
  }
  __stack_pointer = $3 + 128 | 0;
  return HEAP32[$3 + 124 >> 2];
 }
 
 function jswrap_function_bind($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 80 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 72 >> 2] = $0;
  HEAP32[$3 + 68 >> 2] = $1;
  HEAP32[$3 + 64 >> 2] = $2;
  block : {
   if (!(jsvIsFunction(HEAP32[$3 + 72 >> 2]) & 1)) {
    HEAP32[$3 >> 2] = HEAP32[$3 + 72 >> 2];
    jsExceptionHere(3, 125893, $3);
    HEAP32[$3 + 76 >> 2] = 0;
    break block;
   }
   block1 : {
    if (jsvIsNativeFunction(HEAP32[$3 + 72 >> 2]) & 1) {
     $0 = HEAP32[$3 + 72 >> 2];
     $1 = HEAP32[$3 + 72 >> 2];
     HEAP32[$3 + 60 >> 2] = jsvNewNativeFunction(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8);
     break block1;
    }
    HEAP32[$3 + 60 >> 2] = jsvNewWithFlags(jsvIsFunctionReturn(HEAP32[$3 + 72 >> 2]) & 1 ? 9 : 7);
   }
   if (!HEAP32[$3 + 60 >> 2]) {
    HEAP32[$3 + 76 >> 2] = 0;
    break block;
   }
   jsvObjectIteratorNew($3 + 56 | 0, HEAP32[$3 + 72 >> 2]);
   while (1) {
    block2 : {
     if (!(jsvObjectIteratorHasValue_1474($3 + 56 | 0) & 1)) {
      break block2
     }
     HEAP32[$3 + 52 >> 2] = jsvObjectIteratorGetKey_1483($3 + 56 | 0);
     HEAP32[$3 + 48 >> 2] = jsvObjectIteratorGetValue_1475($3 + 56 | 0);
     $0 = 0;
     if (jsvIsFunctionParameter(HEAP32[$3 + 52 >> 2]) & 1) {
      $0 = HEAP32[$3 + 48 >> 2] != 0
     }
     HEAP8[$3 + 47 | 0] = $0;
     if (HEAP8[$3 + 47 | 0] & 1) {
      HEAP32[$3 + 40 >> 2] = jsvCopy(HEAP32[$3 + 52 >> 2], 1);
      if (HEAP32[$3 + 40 >> 2]) {
       jsvAddName(HEAP32[$3 + 60 >> 2], HEAP32[$3 + 40 >> 2]);
       jsvUnLock(HEAP32[$3 + 40 >> 2]);
      }
     }
     jsvUnLock2(HEAP32[$3 + 52 >> 2], HEAP32[$3 + 48 >> 2]);
     if (!(HEAP8[$3 + 47 | 0] & 1)) {
      break block2
     }
     jsvObjectIteratorNext($3 + 56 | 0);
     continue;
    }
    break;
   };
   if (HEAP32[$3 + 64 >> 2]) {
    jsvObjectIteratorNew($3 + 36 | 0, HEAP32[$3 + 64 >> 2]);
    while (1) {
     if (jsvObjectIteratorHasValue_1474($3 + 36 | 0) & 1) {
      HEAP32[$3 + 32 >> 2] = jsvObjectIteratorGetValue_1475($3 + 36 | 0);
      HEAP8[$3 + 31 | 0] = 0;
      while (1) {
       $0 = 0;
       if (!(HEAP8[$3 + 31 | 0] & 1)) {
        $0 = jsvObjectIteratorHasValue_1474($3 + 56 | 0)
       }
       block3 : {
        if (!($0 & 1)) {
         break block3
        }
        HEAP32[$3 + 24 >> 2] = jsvObjectIteratorGetKey_1483($3 + 56 | 0);
        if (!(jsvIsFunctionParameter(HEAP32[$3 + 24 >> 2]) & 1)) {
         jsvUnLock(HEAP32[$3 + 24 >> 2]);
         break block3;
        }
        HEAP32[$3 + 20 >> 2] = jsvCopyNameOnly(HEAP32[$3 + 24 >> 2], 0, 1);
        jsvSetValueOfName(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 32 >> 2]);
        jsvAddName(HEAP32[$3 + 60 >> 2], HEAP32[$3 + 20 >> 2]);
        HEAP8[$3 + 31 | 0] = 1;
        jsvUnLock2(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
        jsvObjectIteratorNext($3 + 56 | 0);
        continue;
       }
       break;
      };
      if (!(HEAP8[$3 + 31 | 0] & 1)) {
       jsvAddFunctionParameter(HEAP32[$3 + 60 >> 2], 0, HEAP32[$3 + 32 >> 2])
      }
      jsvUnLock(HEAP32[$3 + 32 >> 2]);
      jsvObjectIteratorNext($3 + 36 | 0);
      continue;
     }
     break;
    };
    jsvObjectIteratorFree_1480($3 + 36 | 0);
   }
   while (1) {
    if (jsvObjectIteratorHasValue_1474($3 + 56 | 0) & 1) {
     HEAP32[$3 + 16 >> 2] = jsvObjectIteratorGetKey_1483($3 + 56 | 0);
     HEAP32[$3 + 12 >> 2] = jsvCopyNameOnly(HEAP32[$3 + 16 >> 2], 1, 1);
     if (HEAP32[$3 + 12 >> 2]) {
      jsvAddName(HEAP32[$3 + 60 >> 2], HEAP32[$3 + 12 >> 2]);
      jsvUnLock(HEAP32[$3 + 12 >> 2]);
     }
     jsvUnLock(HEAP32[$3 + 16 >> 2]);
     jsvObjectIteratorNext($3 + 56 | 0);
     continue;
    }
    break;
   };
   jsvObjectIteratorFree_1480($3 + 56 | 0);
   jsvObjectSetChild(HEAP32[$3 + 60 >> 2], 127288, HEAP32[$3 + 68 >> 2]);
   HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 60 >> 2];
  }
  __stack_pointer = $3 + 80 | 0;
  return HEAP32[$3 + 76 >> 2];
 }
 
 function matchcharacter($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 40 >> 2] = $0;
  HEAP32[$4 + 36 >> 2] = $1;
  HEAP32[$4 + 32 >> 2] = $2;
  HEAP32[$4 + 28 >> 2] = $3;
  HEAP32[HEAP32[$4 + 32 >> 2] >> 2] = 1;
  HEAP8[$4 + 27 | 0] = jsvStringIteratorGetChar_1500(HEAP32[$4 + 36 >> 2]);
  block : {
   if (HEAPU8[HEAP32[$4 + 40 >> 2]] == 46) {
    HEAP8[$4 + 47 | 0] = 1;
    break block;
   }
   if (HEAPU8[HEAP32[$4 + 40 >> 2]] == 91) {
    HEAP8[HEAP32[$4 + 28 >> 2] + 9 | 0] = 1;
    HEAP8[$4 + 26 | 0] = HEAPU8[HEAP32[$4 + 40 >> 2] + 1 | 0] == 94;
    if (HEAP8[$4 + 26 | 0] & 1) {
     $0 = HEAP32[$4 + 32 >> 2];
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
    }
    HEAP8[$4 + 25 | 0] = 0;
    while (1) {
     $0 = 0;
     $0 = HEAP8[HEAP32[$4 + 40 >> 2] + HEAP32[HEAP32[$4 + 32 >> 2] >> 2] | 0] << 24 >> 24 ? HEAPU8[HEAP32[$4 + 40 >> 2] + HEAP32[HEAP32[$4 + 32 >> 2] >> 2] | 0] != 93 : $0;
     if ($0) {
      if (HEAPU8[HEAP32[$4 + 40 >> 2] + HEAP32[HEAP32[$4 + 32 >> 2] >> 2] | 0] == 46) {
       HEAP8[$4 + 25 | 0] = HEAP8[$4 + 25 | 0] & 1 | HEAPU8[$4 + 27 | 0] == 46;
       $0 = HEAP32[$4 + 32 >> 2];
       HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
       continue;
      }
      HEAP8[$4 + 25 | 0] = matchcharacter(HEAP32[$4 + 40 >> 2] + HEAP32[HEAP32[$4 + 32 >> 2] >> 2] | 0, HEAP32[$4 + 36 >> 2], $4 + 20 | 0, HEAP32[$4 + 28 >> 2]) & 1 | HEAP8[$4 + 25 | 0] & 1;
      $0 = HEAP32[$4 + 32 >> 2];
      HEAP32[$0 >> 2] = HEAP32[$4 + 20 >> 2] + HEAP32[$0 >> 2];
      continue;
     }
     break;
    };
    block1 : {
     if (HEAPU8[HEAP32[$4 + 40 >> 2] + HEAP32[HEAP32[$4 + 32 >> 2] >> 2] | 0] == 93) {
      $0 = HEAP32[$4 + 32 >> 2];
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
      break block1;
     }
     jsExceptionHere(1, 123972, 0);
     HEAP8[$4 + 47 | 0] = 0;
     break block;
    }
    HEAP8[HEAP32[$4 + 28 >> 2] + 9 | 0] = 0;
    HEAP8[$4 + 47 | 0] = (HEAP8[$4 + 25 | 0] & 1) != (HEAP8[$4 + 26 | 0] & 1);
    break block;
   }
   HEAP8[$4 + 19 | 0] = HEAPU8[HEAP32[$4 + 40 >> 2]];
   block2 : {
    if (HEAPU8[$4 + 19 | 0] != 92) {
     break block2
    }
    HEAP32[HEAP32[$4 + 32 >> 2] >> 2] = 2;
    HEAP8[$4 + 19 | 0] = HEAPU8[HEAP32[$4 + 40 >> 2] + 1 | 0];
    if (HEAPU8[$4 + 19 | 0] == 100) {
     HEAP8[$4 + 47 | 0] = isNumeric(HEAP8[$4 + 27 | 0] << 24 >> 24) & 1;
     break block;
    }
    if (HEAPU8[$4 + 19 | 0] == 68) {
     HEAP8[$4 + 47 | 0] = (isNumeric(HEAP8[$4 + 27 | 0] << 24 >> 24) ^ -1) & 1;
     break block;
    }
    if (HEAPU8[$4 + 19 | 0] == 102) {
     HEAP8[$4 + 19 | 0] = 12;
     break block2;
    }
    if (HEAPU8[$4 + 19 | 0] == 98) {
     HEAP8[$4 + 19 | 0] = 8;
     break block2;
    }
    if (HEAPU8[$4 + 19 | 0] == 110) {
     HEAP8[$4 + 19 | 0] = 10;
     break block2;
    }
    if (HEAPU8[$4 + 19 | 0] == 114) {
     HEAP8[$4 + 19 | 0] = 13;
     break block2;
    }
    if (HEAPU8[$4 + 19 | 0] == 115) {
     HEAP8[$4 + 47 | 0] = isWhitespace(HEAP8[$4 + 27 | 0] << 24 >> 24) & 1;
     break block;
    }
    if (HEAPU8[$4 + 19 | 0] == 83) {
     HEAP8[$4 + 47 | 0] = (isWhitespace(HEAP8[$4 + 27 | 0] << 24 >> 24) ^ -1) & 1;
     break block;
    }
    if (HEAPU8[$4 + 19 | 0] == 116) {
     HEAP8[$4 + 19 | 0] = 9;
     break block2;
    }
    if (HEAPU8[$4 + 19 | 0] == 118) {
     HEAP8[$4 + 19 | 0] = 11;
     break block2;
    }
    if (HEAPU8[$4 + 19 | 0] == 119) {
     $0 = 1;
     block3 : {
      if (isNumeric(HEAP8[$4 + 27 | 0] << 24 >> 24) & 1) {
       break block3
      }
      $0 = 1;
      if (isAlpha(HEAP8[$4 + 27 | 0] << 24 >> 24) & 1) {
       break block3
      }
      $0 = HEAPU8[$4 + 27 | 0] == 95;
     }
     HEAP8[$4 + 47 | 0] = $0;
     break block;
    }
    if (HEAPU8[$4 + 19 | 0] == 87) {
     $0 = 1;
     block4 : {
      if (isNumeric(HEAP8[$4 + 27 | 0] << 24 >> 24) & 1) {
       break block4
      }
      $0 = 1;
      if (isAlpha(HEAP8[$4 + 27 | 0] << 24 >> 24) & 1) {
       break block4
      }
      $0 = HEAPU8[$4 + 27 | 0] == 95;
     }
     HEAP8[$4 + 47 | 0] = ($0 ^ -1) & 1;
     break block;
    }
    if (HEAPU8[$4 + 19 | 0] == 48) {
     HEAP8[$4 + 19 | 0] = 0;
     break block2;
    }
    if (!(HEAP8[$4 + 19 | 0] << 24 >> 24 < 49 | HEAP8[$4 + 19 | 0] << 24 >> 24 > 57)) {
     jsExceptionHere(1, 138629, 0);
     HEAP8[$4 + 47 | 0] = 0;
     break block;
    }
    if (!(!HEAPU8[HEAP32[$4 + 40 >> 2] + 3 | 0] | (!HEAPU8[HEAP32[$4 + 40 >> 2] + 2 | 0] | HEAPU8[$4 + 19 | 0] != 120))) {
     HEAP32[HEAP32[$4 + 32 >> 2] >> 2] = 4;
     HEAP8[$4 + 19 | 0] = hexToByte(HEAP8[HEAP32[$4 + 40 >> 2] + 2 | 0] << 24 >> 24, HEAP8[HEAP32[$4 + 40 >> 2] + 3 | 0] << 24 >> 24);
    }
   }
   if (!(!(HEAP8[HEAP32[$4 + 28 >> 2] + 9 | 0] & 1) | HEAPU8[HEAP32[$4 + 40 >> 2] + HEAP32[HEAP32[$4 + 32 >> 2] >> 2] | 0] != 45 | HEAPU8[HEAP32[$4 + 40 >> 2] + (HEAP32[HEAP32[$4 + 32 >> 2] >> 2] + 1 | 0) | 0] == 93)) {
    HEAP16[HEAP32[$4 + 28 >> 2] + 10 >> 1] = HEAP8[$4 + 19 | 0] << 24 >> 24;
    $0 = HEAP32[$4 + 32 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
    HEAP8[$4 + 11 | 0] = matchcharacter(HEAP32[$4 + 40 >> 2] + HEAP32[HEAP32[$4 + 32 >> 2] >> 2] | 0, HEAP32[$4 + 36 >> 2], $4 + 12 | 0, HEAP32[$4 + 28 >> 2]) & 1;
    $0 = HEAP32[$4 + 32 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$4 + 12 >> 2] + HEAP32[$0 >> 2];
    HEAP8[$4 + 47 | 0] = HEAP8[$4 + 11 | 0] & 1;
    break block;
   }
   if (HEAP8[HEAP32[$4 + 28 >> 2] + 8 | 0] & 1) {
    HEAP8[$4 + 27 | 0] = charToLowerCase(HEAP8[$4 + 27 | 0] << 24 >> 24);
    HEAP8[$4 + 19 | 0] = charToLowerCase(HEAP8[$4 + 19 | 0] << 24 >> 24);
   }
   if (HEAPU16[HEAP32[$4 + 28 >> 2] + 10 >> 1] != 256) {
    HEAP8[$4 + 10 | 0] = HEAPU16[HEAP32[$4 + 28 >> 2] + 10 >> 1];
    if (HEAP8[HEAP32[$4 + 28 >> 2] + 8 | 0] & 1) {
     HEAP8[$4 + 10 | 0] = charToLowerCase(HEAP8[$4 + 10 | 0] << 24 >> 24)
    }
    HEAP16[HEAP32[$4 + 28 >> 2] + 10 >> 1] = 256;
    $0 = 0;
    block8 : {
     if (HEAP8[$4 + 27 | 0] << 24 >> 24 < HEAP8[$4 + 10 | 0] << 24 >> 24) {
      break block8
     }
     $0 = 0;
     if (HEAP8[$4 + 27 | 0] << 24 >> 24 > HEAP8[$4 + 19 | 0] << 24 >> 24) {
      break block8
     }
     $0 = HEAP8[$4 + 10 | 0] << 24 >> 24 < HEAP8[$4 + 19 | 0] << 24 >> 24;
    }
    HEAP8[$4 + 47 | 0] = $0;
    break block;
   }
   HEAP8[$4 + 47 | 0] = HEAPU8[$4 + 19 | 0] == HEAPU8[$4 + 27 | 0];
  }
  __stack_pointer = $4 + 48 | 0;
  return HEAP8[$4 + 47 | 0] & 1;
 }
 
 function jsvStringIteratorGetChar_1500($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   HEAP8[$1 + 15 | 0] = HEAPU8[HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] + HEAP32[HEAP32[$1 + 8 >> 2] >> 2] | 0];
  }
  return HEAP8[$1 + 15 | 0] << 24 >> 24;
 }
 
 function jswrap_regexp_constructor($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 128 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 120 >> 2] = $0;
  HEAP32[$2 + 116 >> 2] = $1;
  block : {
   if (!(jsvIsString(HEAP32[$2 + 120 >> 2]) & 1)) {
    HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 120 >> 2];
    jsExceptionHere(3, 125560, $2 + 16 | 0);
    HEAP32[$2 + 124 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 112 >> 2] = jspNewObject(0, 128604);
   jsvObjectSetChild(HEAP32[$2 + 112 >> 2], 137992, HEAP32[$2 + 120 >> 2]);
   if (!(jsvIsUndefined(HEAP32[$2 + 116 >> 2]) & 1)) {
    block1 : {
     if (!(jsvIsString(HEAP32[$2 + 116 >> 2]) & 1)) {
      HEAP32[$2 >> 2] = HEAP32[$2 + 120 >> 2];
      jsExceptionHere(3, 125560, $2);
      break block1;
     }
     jsvObjectSetChild(HEAP32[$2 + 112 >> 2], 127298, HEAP32[$2 + 116 >> 2]);
    }
   }
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 112 >> 2], 123944, jsvNewFromInteger(0));
   jsvStringIteratorNew($2 + 76 | 0, HEAP32[$2 + 120 >> 2], 0);
   HEAP8[$2 + 75 | 0] = 0;
   HEAP8[$2 + 74 | 0] = 1;
   HEAP32[$2 + 28 >> 2] = 0;
   while (1) {
    if (jsvStringIteratorHasChar_1502($2 + 76 | 0) & 1) {
     HEAP8[$2 + 27 | 0] = HEAPU8[$2 + 75 | 0] == 92;
     block2 : {
      if (!HEAPU8[$2 + 75 | 0]) {
       break block2
      }
      if (!strchr(146598, HEAP8[$2 + 75 | 0] << 24 >> 24)) {
       break block2
      }
      HEAP8[$2 + 74 | 0] = 0;
     }
     HEAP8[$2 + 75 | 0] = jsvStringIteratorGetCharAndNext($2 + 76 | 0);
     if (HEAP8[$2 + 27 | 0] & 1) {
      if (!strchr(140510, HEAP8[$2 + 75 | 0] << 24 >> 24)) {
       HEAP8[$2 + 74 | 0] = 0;
       HEAP8[$2 + 75 | 0] = 0;
      }
     }
     if (!(!HEAPU8[$2 + 75 | 0] | !(HEAP8[$2 + 27 | 0] & 1) & HEAPU8[$2 + 75 | 0] == 92 | HEAPU32[$2 + 28 >> 2] >= 32)) {
      $1 = HEAPU8[$2 + 75 | 0];
      $0 = HEAP32[$2 + 28 >> 2];
      HEAP32[$2 + 28 >> 2] = $0 + 1;
      HEAP8[($2 + 32 | 0) + $0 | 0] = $1;
     }
     if (HEAP8[$2 + 27 | 0] & 1) {
      HEAP8[$2 + 75 | 0] = 0
     }
     continue;
    }
    break;
   };
   jsvStringIteratorFree_1503($2 + 76 | 0);
   if (!(!(HEAP8[$2 + 74 | 0] & 1) | HEAPU8[$2 + 75 | 0] != 36 | HEAPU32[$2 + 28 >> 2] >= 32)) {
    HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 28 >> 2] - 1;
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 112 >> 2], 136107, jsvNewStringOfLength(HEAP32[$2 + 28 >> 2], $2 + 32 | 0));
   }
   HEAP32[$2 + 124 >> 2] = HEAP32[$2 + 112 >> 2];
  }
  __stack_pointer = $2 + 128 | 0;
  return HEAP32[$2 + 124 >> 2];
 }
 
 function jsvStringIteratorHasChar_1502($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
 }
 
 function jsvStringIteratorFree_1503($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_regexp_exec($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $3 = __stack_pointer + -64 | 0;
  $2 = $3;
  __stack_pointer = $2;
  HEAP32[$2 + 56 >> 2] = $0;
  HEAP32[$2 + 52 >> 2] = $1;
  HEAP32[$2 + 48 >> 2] = jsvAsString(HEAP32[$2 + 52 >> 2]);
  HEAP32[$2 + 44 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 56 >> 2], 123944);
  HEAP32[$2 + 40 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 56 >> 2], 136107);
  block1 : {
   if (HEAP32[$2 + 40 >> 2]) {
    HEAP32[$2 + 36 >> 2] = jsvGetStringLength(HEAP32[$2 + 52 >> 2]) - jsvGetStringLength(HEAP32[$2 + 40 >> 2]);
    block : {
     if (HEAP32[$2 + 44 >> 2] > HEAP32[$2 + 36 >> 2]) {
      break block
     }
     if (jsvCompareString(HEAP32[$2 + 52 >> 2], HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 0, 1)) {
      break block
     }
     HEAP32[$2 + 32 >> 2] = jsvNewEmptyArray();
     jsvSetArrayItem(HEAP32[$2 + 32 >> 2], 0, HEAP32[$2 + 40 >> 2]);
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 32 >> 2], 123938, jsvNewFromInteger(HEAP32[$2 + 36 >> 2]));
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 32 >> 2], 124373, HEAP32[$2 + 48 >> 2]);
     jsvUnLock(HEAP32[$2 + 40 >> 2]);
     HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 32 >> 2];
     break block1;
    }
    jsvUnLock(HEAP32[$2 + 40 >> 2]);
   }
   HEAP32[$2 + 28 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 56 >> 2], 137992);
   block2 : {
    if (jsvIsString(HEAP32[$2 + 28 >> 2]) & 1) {
     if (HEAP32[$2 + 44 >> 2] <= (jsvGetStringLength(HEAP32[$2 + 48 >> 2]) | 0)) {
      break block2
     }
    }
    jsvUnLock2(HEAP32[$2 + 48 >> 2], HEAP32[$2 + 28 >> 2]);
    HEAP32[$2 + 60 >> 2] = 0;
    break block1;
   }
   HEAP32[$2 + 24 >> 2] = jsvGetStringLength(HEAP32[$2 + 28 >> 2]);
   $3 = $3 - (HEAP32[$2 + 24 >> 2] + 16 & -16) | 0;
   __stack_pointer = $3;
   HEAP32[$2 + 20 >> 2] = $3;
   if (!HEAP32[$2 + 20 >> 2]) {
    jsvUnLock2(HEAP32[$2 + 48 >> 2], HEAP32[$2 + 28 >> 2]);
    HEAP32[$2 + 60 >> 2] = 0;
    break block1;
   }
   jsvGetString(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 24 >> 2] + 1 | 0);
   jsvUnLock(HEAP32[$2 + 28 >> 2]);
   HEAP32[$2 + 16 >> 2] = match(HEAP32[$2 + 20 >> 2], HEAP32[$2 + 48 >> 2], HEAP32[$2 + 44 >> 2], jswrap_regexp_hasFlag(HEAP32[$2 + 56 >> 2], 105) & 1);
   jsvUnLock(HEAP32[$2 + 48 >> 2]);
   block3 : {
    if (!HEAP32[$2 + 16 >> 2]) {
     HEAP32[$2 + 16 >> 2] = jsvNewWithFlags(2);
     HEAP32[$2 + 44 >> 2] = 0;
     break block3;
    }
    block4 : {
     if (jswrap_regexp_hasFlag(HEAP32[$2 + 56 >> 2], 103) & 1) {
      HEAP32[$2 + 12 >> 2] = jsvGetArrayItem(HEAP32[$2 + 16 >> 2], 0);
      HEAP32[$2 + 44 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 16 >> 2], 123938) + jsvGetStringLength(HEAP32[$2 + 12 >> 2]);
      jsvUnLock(HEAP32[$2 + 12 >> 2]);
      break block4;
     }
     HEAP32[$2 + 44 >> 2] = 0;
    }
   }
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 56 >> 2], 123944, jsvNewFromInteger(HEAP32[$2 + 44 >> 2]));
   HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 16 >> 2];
  }
  __stack_pointer = $2 - -64 | 0;
  return HEAP32[$2 + 60 >> 2];
 }
 
 function jswrap_regexp_hasFlag($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer + -64 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 60 >> 2] = $0;
  HEAP8[$2 + 59 | 0] = $1;
  HEAP32[$2 + 52 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 60 >> 2], 127298);
  HEAP8[$2 + 51 | 0] = 0;
  if (jsvIsString(HEAP32[$2 + 52 >> 2]) & 1) {
   jsvStringIteratorNew($2 + 12 | 0, HEAP32[$2 + 52 >> 2], 0);
   while (1) {
    if (jsvStringIteratorHasChar_1502($2 + 12 | 0) & 1) {
     HEAP8[$2 + 51 | 0] = (jsvStringIteratorGetCharAndNext($2 + 12 | 0) & 255) == HEAPU8[$2 + 59 | 0] | HEAP8[$2 + 51 | 0] & 1;
     continue;
    }
    break;
   };
   jsvStringIteratorFree_1503($2 + 12 | 0);
  }
  jsvUnLock(HEAP32[$2 + 52 >> 2]);
  __stack_pointer = $2 - -64 | 0;
  return HEAP8[$2 + 51 | 0] & 1;
 }
 
 function match($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 368 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 364 >> 2] = $0;
  HEAP32[$4 + 360 >> 2] = $1;
  HEAP32[$4 + 356 >> 2] = $2;
  HEAP8[$4 + 355 | 0] = $3;
  HEAP32[$4 + 264 >> 2] = HEAP32[$4 + 360 >> 2];
  HEAP32[$4 + 268 >> 2] = HEAP32[$4 + 356 >> 2];
  HEAP8[$4 + 272 | 0] = HEAP8[$4 + 355 | 0] & 1;
  HEAP8[$4 + 273 | 0] = 0;
  HEAP16[$4 + 274 >> 1] = 256;
  HEAP32[$4 + 276 >> 2] = 0;
  jsvStringIteratorNew($4 + 224 | 0, HEAP32[$4 + 360 >> 2], HEAP32[$4 + 356 >> 2]);
  jsvStringIteratorClone($4 + 188 | 0, $4 + 224 | 0);
  $0 = HEAP32[$4 + 364 >> 2];
  wasm2js_memory_copy($4 + 100 | 0, $4 + 264 | 0, 88);
  HEAP32[$4 + 260 >> 2] = matchhere($0, $4 + 188 | 0, $4 + 100 | 0);
  jsvStringIteratorFree_1503($4 + 188 | 0);
  jsvStringIteratorNext($4 + 224 | 0);
  while (1) {
   $0 = 0;
   if (!HEAP32[$4 + 260 >> 2]) {
    $0 = jsvStringIteratorHasChar_1502($4 + 224 | 0)
   }
   if ($0 & 1) {
    HEAP32[$4 + 268 >> 2] = HEAP32[$4 + 268 >> 2] + 1;
    jsvStringIteratorClone($4 + 188 | 0, $4 + 224 | 0);
    $0 = HEAP32[$4 + 364 >> 2];
    wasm2js_memory_copy($4 + 12 | 0, $4 + 264 | 0, 88);
    HEAP32[$4 + 260 >> 2] = matchhere($0, $4 + 188 | 0, $4 + 12 | 0);
    jsvStringIteratorFree_1503($4 + 188 | 0);
    jsvStringIteratorNext($4 + 224 | 0);
    continue;
   }
   break;
  };
  jsvStringIteratorFree_1503($4 + 224 | 0);
  __stack_pointer = $4 + 368 | 0;
  return HEAP32[$4 + 260 >> 2];
 }
 
 function matchhere($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 1040 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 1032 >> 2] = $0;
  HEAP32[$3 + 1028 >> 2] = $1;
  block : {
   if (jspIsInterrupted() & 1) {
    HEAP32[$3 + 1036 >> 2] = 0;
    break block;
   }
   if (!(HEAPU8[HEAP32[$3 + 1032 >> 2]] != 124 ? HEAP8[HEAP32[$3 + 1032 >> 2]] << 24 >> 24 : 0)) {
    $0 = HEAP32[$3 + 1028 >> 2];
    wasm2js_memory_copy($3 + 4 | 0, $2, 88);
    HEAP32[$3 + 1036 >> 2] = matchfound($0, $3 + 4 | 0);
    break block;
   }
   if (HEAPU8[HEAP32[$3 + 1032 >> 2]] == 94) {
    if (jsvStringIteratorGetIndex_1510(HEAP32[$3 + 1028 >> 2])) {
     HEAP32[$3 + 1036 >> 2] = 0;
     break block;
    }
    if (!(jspCheckStackPosition() & 1)) {
     HEAP32[$3 + 1036 >> 2] = 0;
     break block;
    }
    $0 = HEAP32[$3 + 1032 >> 2];
    $1 = HEAP32[$3 + 1028 >> 2];
    wasm2js_memory_copy($3 + 92 | 0, $2, 88);
    HEAP32[$3 + 1036 >> 2] = matchhere($0 + 1 | 0, $1, $3 + 92 | 0);
    break block;
   }
   if (HEAPU8[HEAP32[$3 + 1032 >> 2]] == 36) {
    if (!(jsvStringIteratorHasChar_1502(HEAP32[$3 + 1028 >> 2]) & 1)) {
     $0 = HEAP32[$3 + 1032 >> 2];
     $1 = HEAP32[$3 + 1028 >> 2];
     wasm2js_memory_copy($3 + 268 | 0, $2, 88);
     HEAP32[$3 + 1036 >> 2] = matchhere($0 + 1 | 0, $1, $3 + 268 | 0);
     break block;
    }
    $0 = HEAP32[$3 + 1032 >> 2];
    wasm2js_memory_copy($3 + 180 | 0, $2, 88);
    HEAP32[$3 + 1036 >> 2] = nomatchfound($0 + 1 | 0, $3 + 180 | 0);
    break block;
   }
   if (HEAPU8[HEAP32[$3 + 1032 >> 2]] == 40) {
    $0 = jsvStringIteratorGetIndex_1510(HEAP32[$3 + 1028 >> 2]);
    HEAP32[($2 + 16 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2] = $0;
    HEAP32[($2 + 52 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2] = HEAP32[($2 + 16 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2];
    if (HEAP32[$2 + 12 >> 2] < 9) {
     HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1
    }
    if (!(jspCheckStackPosition() & 1)) {
     HEAP32[$3 + 1036 >> 2] = 0;
     break block;
    }
    $0 = HEAP32[$3 + 1032 >> 2];
    $1 = HEAP32[$3 + 1028 >> 2];
    wasm2js_memory_copy($3 + 356 | 0, $2, 88);
    HEAP32[$3 + 1036 >> 2] = matchhere($0 + 1 | 0, $1, $3 + 356 | 0);
    break block;
   }
   if (HEAPU8[HEAP32[$3 + 1032 >> 2]] == 41) {
    if (HEAP32[$2 + 12 >> 2] > 0) {
     $0 = jsvStringIteratorGetIndex_1510(HEAP32[$3 + 1028 >> 2]);
     HEAP32[((HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) + 48 >> 2] = $0;
    }
    if (!(jspCheckStackPosition() & 1)) {
     HEAP32[$3 + 1036 >> 2] = 0;
     break block;
    }
    $0 = HEAP32[$3 + 1032 >> 2];
    $1 = HEAP32[$3 + 1028 >> 2];
    wasm2js_memory_copy($3 + 444 | 0, $2, 88);
    HEAP32[$3 + 1036 >> 2] = matchhere($0 + 1 | 0, $1, $3 + 444 | 0);
    break block;
   }
   HEAP8[$3 + 1023 | 0] = matchcharacter(HEAP32[$3 + 1032 >> 2], HEAP32[$3 + 1028 >> 2], $3 + 1024 | 0, $2) & 1;
   if (!(HEAPU8[HEAP32[$3 + 1032 >> 2] + HEAP32[$3 + 1024 >> 2] | 0] != 42 & HEAPU8[HEAP32[$3 + 1032 >> 2] + HEAP32[$3 + 1024 >> 2] | 0] != 43)) {
    HEAP8[$3 + 1022 | 0] = HEAPU8[HEAP32[$3 + 1032 >> 2] + HEAP32[$3 + 1024 >> 2] | 0];
    if (!(HEAP8[$3 + 1023 | 0] & 1 | HEAPU8[$3 + 1022 | 0] != 43)) {
     $0 = HEAP32[$3 + 1032 >> 2];
     $1 = HEAP32[$3 + 1024 >> 2];
     wasm2js_memory_copy($3 + 708 | 0, $2, 88);
     HEAP32[$3 + 1036 >> 2] = nomatchfound(($1 + 1 | 0) + $0 | 0, $3 + 708 | 0);
     break block;
    }
    HEAP32[$3 + 1016 >> 2] = (HEAP32[$3 + 1032 >> 2] + HEAP32[$3 + 1024 >> 2] | 0) + 1;
    jsvStringIteratorClone($3 + 980 | 0, HEAP32[$3 + 1028 >> 2]);
    $0 = HEAP32[$3 + 1016 >> 2];
    wasm2js_memory_copy($3 + 620 | 0, $2, 88);
    HEAP32[$3 + 976 >> 2] = matchhere($0, $3 + 980 | 0, $3 + 620 | 0);
    jsvStringIteratorFree_1503($3 + 980 | 0);
    while (1) {
     $0 = 0;
     if (jsvStringIteratorHasChar_1502(HEAP32[$3 + 1028 >> 2]) & 1) {
      $0 = HEAPU8[$3 + 1023 | 0]
     }
     if ($0 & 1) {
      jsvStringIteratorNext(HEAP32[$3 + 1028 >> 2]);
      HEAP8[$3 + 1023 | 0] = matchcharacter(HEAP32[$3 + 1032 >> 2], HEAP32[$3 + 1028 >> 2], $3 + 1024 | 0, $2) & 1;
      jsvStringIteratorClone($3 + 980 | 0, HEAP32[$3 + 1028 >> 2]);
      $0 = HEAP32[$3 + 1016 >> 2];
      wasm2js_memory_copy($3 + 532 | 0, $2, 88);
      HEAP32[$3 + 972 >> 2] = matchhere($0, $3 + 980 | 0, $3 + 532 | 0);
      jsvStringIteratorFree_1503($3 + 980 | 0);
      if (HEAP32[$3 + 972 >> 2]) {
       jsvUnLock(HEAP32[$3 + 976 >> 2]);
       HEAP32[$3 + 976 >> 2] = HEAP32[$3 + 972 >> 2];
      }
      continue;
     }
     break;
    };
    HEAP32[$3 + 1036 >> 2] = HEAP32[$3 + 976 >> 2];
    break block;
   }
   if (!(!(jsvStringIteratorHasChar_1502(HEAP32[$3 + 1028 >> 2]) & 1) | !(HEAP8[$3 + 1023 | 0] & 1))) {
    jsvStringIteratorNext(HEAP32[$3 + 1028 >> 2]);
    if (!(jspCheckStackPosition() & 1)) {
     HEAP32[$3 + 1036 >> 2] = 0;
     break block;
    }
    $0 = HEAP32[$3 + 1032 >> 2];
    $1 = HEAP32[$3 + 1024 >> 2];
    $4 = HEAP32[$3 + 1028 >> 2];
    wasm2js_memory_copy($3 + 796 | 0, $2, 88);
    HEAP32[$3 + 1036 >> 2] = matchhere($0 + $1 | 0, $4, $3 + 796 | 0);
    break block;
   }
   $0 = HEAP32[$3 + 1032 >> 2];
   $1 = HEAP32[$3 + 1024 >> 2];
   wasm2js_memory_copy($3 + 884 | 0, $2, 88);
   HEAP32[$3 + 1036 >> 2] = nomatchfound($0 + $1 | 0, $3 + 884 | 0);
  }
  __stack_pointer = $3 + 1040 | 0;
  return HEAP32[$3 + 1036 >> 2];
 }
 
 function jswrap_regexp_test($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = jswrap_regexp_exec(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
  if (HEAP32[$2 + 4 >> 2]) {
   $3 = jsvIsNull(HEAP32[$2 + 4 >> 2]) ^ -1
  }
  HEAP8[$2 + 3 | 0] = $3 & 1;
  jsvUnLock(HEAP32[$2 + 4 >> 2]);
  __stack_pointer = $2 + 16 | 0;
  return HEAP8[$2 + 3 | 0] & 1;
 }
 
 function matchfound($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = jsvNewEmptyArray();
  HEAP32[$2 + 20 >> 2] = jsvStringIteratorGetIndex_1510(HEAP32[$2 + 28 >> 2]);
  HEAP32[$2 + 16 >> 2] = jsvNewFromStringVar(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2], HEAP32[$2 + 20 >> 2] - HEAP32[$1 + 4 >> 2] | 0);
  jsvSetArrayItem(HEAP32[$2 + 24 >> 2], 0, HEAP32[$2 + 16 >> 2]);
  jsvUnLock(HEAP32[$2 + 16 >> 2]);
  HEAP32[$2 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 12 >> 2] < HEAP32[$1 + 12 >> 2]) {
    HEAP32[$2 + 16 >> 2] = jsvNewFromStringVar(HEAP32[$1 >> 2], HEAP32[($1 + 16 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2], HEAP32[($1 + 52 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2] - HEAP32[($1 + 16 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2] | 0);
    jsvSetArrayItem(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 12 >> 2] + 1 | 0, HEAP32[$2 + 16 >> 2]);
    jsvUnLock(HEAP32[$2 + 16 >> 2]);
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
    continue;
   }
   break;
  };
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 123938, jsvNewFromInteger(HEAP32[$1 + 4 >> 2]));
  jsvObjectSetChild(HEAP32[$2 + 24 >> 2], 124373, HEAP32[$1 >> 2]);
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 24 >> 2];
 }
 
 function jsvStringIteratorGetIndex_1510($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + HEAP32[HEAP32[$1 + 12 >> 2] >> 2] | 0;
 }
 
 function nomatchfound($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 144 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 136 >> 2] = $0;
  block : {
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$2 + 140 >> 2] = 0;
    break block;
   }
   while (1) {
    $0 = 0;
    $0 = HEAP8[HEAP32[$2 + 136 >> 2]] << 24 >> 24 ? HEAPU8[HEAP32[$2 + 136 >> 2]] != 124 : $0;
    if ($0) {
     if (HEAPU8[HEAP32[$2 + 136 >> 2]] == 92) {
      HEAP32[$2 + 136 >> 2] = HEAP32[$2 + 136 >> 2] + 1;
      if (!HEAPU8[HEAP32[$2 + 136 >> 2]]) {
       HEAP32[$2 + 140 >> 2] = 0;
       break block;
      }
     }
     HEAP32[$2 + 136 >> 2] = HEAP32[$2 + 136 >> 2] + 1;
     continue;
    }
    break;
   };
   if (HEAPU8[HEAP32[$2 + 136 >> 2]] != 124) {
    HEAP32[$2 + 140 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 136 >> 2] = HEAP32[$2 + 136 >> 2] + 1;
   jsvStringIteratorNew($2 + 100 | 0, HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2]);
   $0 = HEAP32[$2 + 136 >> 2];
   wasm2js_memory_copy($2 + 8 | 0, $1, 88);
   HEAP32[$2 + 96 >> 2] = matchhere($0, $2 + 100 | 0, $2 + 8 | 0);
   jsvStringIteratorFree_1503($2 + 100 | 0);
   HEAP32[$2 + 140 >> 2] = HEAP32[$2 + 96 >> 2];
  }
  __stack_pointer = $2 + 144 | 0;
  return HEAP32[$2 + 140 >> 2];
 }
 
 function jswrap_string_constructor($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!jsvGetArrayLength(HEAP32[$1 + 8 >> 2])) {
    HEAP32[$1 + 12 >> 2] = jsvNewFromEmptyString_1513();
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvAsStringAndUnLock(jsvGetArrayItem(HEAP32[$1 + 8 >> 2], 0));
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvNewFromEmptyString_1513() {
  return jsvNewWithFlags(28);
 }
 
 function jswrap_string_fromCharCode($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 24 >> 2] = $0;
  HEAP32[$1 + 20 >> 2] = jsvNewFromEmptyString_1513();
  block : {
   if (!HEAP32[$1 + 20 >> 2]) {
    HEAP32[$1 + 28 >> 2] = 0;
    break block;
   }
   jsvObjectIteratorNew($1 + 16 | 0, HEAP32[$1 + 24 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_1515($1 + 16 | 0) & 1) {
     HEAP8[$1 + 15 | 0] = jsvGetIntegerAndUnLock(jsvObjectIteratorGetValue_1516($1 + 16 | 0));
     jsvAppendStringBuf(HEAP32[$1 + 20 >> 2], $1 + 15 | 0, 1);
     jsvObjectIteratorNext($1 + 16 | 0);
     continue;
    }
    break;
   };
   jsvObjectIteratorFree_1517($1 + 16 | 0);
   HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
  }
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 28 >> 2];
 }
 
 function jsvObjectIteratorHasValue_1515($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
 }
 
 function jsvObjectIteratorGetValue_1516($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvObjectIteratorFree_1517($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function _jswrap_string_charCodeAt($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer + -64 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 56 >> 2] = $0;
  HEAP32[$2 + 52 >> 2] = $1;
  block : {
   if (!(jsvIsString(HEAP32[$2 + 56 >> 2]) & 1)) {
    HEAP32[$2 + 60 >> 2] = -1;
    break block;
   }
   jsvStringIteratorNewUTF8($2 + 16 | 0, HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2]);
   HEAP32[$2 + 12 >> 2] = jsvStringIteratorGetUTF8CharAndNext($2 + 16 | 0);
   jsvStringIteratorFree_1519($2 + 16 | 0);
   HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 12 >> 2];
  }
  __stack_pointer = $2 - -64 | 0;
  return HEAP32[$2 + 60 >> 2];
 }
 
 function jsvStringIteratorFree_1519($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_string_charAt_undefined($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  HEAP32[$2 + 16 >> 2] = _jswrap_string_charCodeAt(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2]);
  block : {
   if (HEAP32[$2 + 16 >> 2] < 0) {
    HEAP32[$2 + 28 >> 2] = 0;
    break block;
   }
   HEAP8[$2 + 15 | 0] = HEAP32[$2 + 16 >> 2];
   HEAP32[$2 + 28 >> 2] = jsvNewStringOfLength(1, $2 + 15 | 0);
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jswrap_string_charAt($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 >> 2] = jswrap_string_charAt_undefined(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
  block : {
   if (HEAP32[$2 >> 2]) {
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
    break block;
   }
   HEAP32[$2 + 12 >> 2] = jsvNewFromEmptyString_1513();
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function jswrap_string_charCodeAt($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 >> 2] = _jswrap_string_charCodeAt(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
  block : {
   if (HEAP32[$2 >> 2] < 0) {
    HEAP32[$2 + 12 >> 2] = jsvNewFromFloat(NaN);
    break block;
   }
   HEAP32[$2 + 12 >> 2] = jsvNewFromInteger(HEAP32[$2 >> 2]);
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function jswrap_string_indexOf($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 40 >> 2] = $0;
  HEAP32[$4 + 36 >> 2] = $1;
  HEAP32[$4 + 32 >> 2] = $2;
  HEAP8[$4 + 31 | 0] = $3;
  block : {
   if (!(jsvIsString(HEAP32[$4 + 40 >> 2]) & 1)) {
    HEAP32[$4 + 44 >> 2] = 0;
    break block;
   }
   HEAP32[$4 + 36 >> 2] = jsvAsString(HEAP32[$4 + 36 >> 2]);
   if (!HEAP32[$4 + 36 >> 2]) {
    HEAP32[$4 + 44 >> 2] = 0;
    break block;
   }
   HEAP32[$4 + 24 >> 2] = jsvGetStringLength(HEAP32[$4 + 40 >> 2]);
   HEAP32[$4 + 20 >> 2] = jsvGetStringLength(HEAP32[$4 + 36 >> 2]);
   if (HEAP32[$4 + 20 >> 2] > HEAP32[$4 + 24 >> 2]) {
    jsvUnLock(HEAP32[$4 + 36 >> 2]);
    HEAP32[$4 + 44 >> 2] = -1;
    break block;
   }
   HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 24 >> 2] - HEAP32[$4 + 20 >> 2];
   block1 : {
    if (!(HEAP8[$4 + 31 | 0] & 1)) {
     HEAP32[$4 + 8 >> 2] = 1;
     HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 16 >> 2] + 1;
     HEAP32[$4 + 12 >> 2] = 0;
     if (jsvIsNumeric(HEAP32[$4 + 32 >> 2]) & 1) {
      HEAP32[$4 + 12 >> 2] = jsvGetInteger(HEAP32[$4 + 32 >> 2]);
      if (HEAP32[$4 + 12 >> 2] < 0) {
       HEAP32[$4 + 12 >> 2] = 0
      }
      if (HEAP32[$4 + 12 >> 2] > HEAP32[$4 + 4 >> 2]) {
       HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 4 >> 2]
      }
     }
     break block1;
    }
    HEAP32[$4 + 8 >> 2] = -1;
    HEAP32[$4 + 4 >> 2] = -1;
    HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 16 >> 2];
    if (jsvIsNumeric(HEAP32[$4 + 32 >> 2]) & 1) {
     HEAP32[$4 + 12 >> 2] = jsvGetInteger(HEAP32[$4 + 32 >> 2]);
     if (HEAP32[$4 + 12 >> 2] < 0) {
      HEAP32[$4 + 12 >> 2] = 0
     }
     if (HEAP32[$4 + 12 >> 2] > HEAP32[$4 + 16 >> 2]) {
      HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 16 >> 2]
     }
    }
   }
   while (1) {
    if (HEAP32[$4 + 12 >> 2] != HEAP32[$4 + 4 >> 2]) {
     if (jsvCompareString(HEAP32[$4 + 40 >> 2], HEAP32[$4 + 36 >> 2], HEAP32[$4 + 12 >> 2], 0, 1)) {
      HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 8 >> 2] + HEAP32[$4 + 12 >> 2];
      continue;
     } else {
      jsvUnLock(HEAP32[$4 + 36 >> 2]);
      HEAP32[$4 + 44 >> 2] = HEAP32[$4 + 12 >> 2];
      break block;
     }
    }
    break;
   };
   jsvUnLock(HEAP32[$4 + 36 >> 2]);
   HEAP32[$4 + 44 >> 2] = -1;
  }
  __stack_pointer = $4 + 48 | 0;
  return HEAP32[$4 + 44 >> 2];
 }
 
 function jswrap_string_match($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 40 >> 2] = $0;
  HEAP32[$2 + 36 >> 2] = $1;
  block : {
   if (!(jsvIsString(HEAP32[$2 + 40 >> 2]) & 1)) {
    HEAP32[$2 + 44 >> 2] = 0;
    break block;
   }
   if (jsvIsUndefined(HEAP32[$2 + 36 >> 2]) & 1) {
    HEAP32[$2 + 44 >> 2] = 0;
    break block;
   }
   if (jsvIsInstanceOf(HEAP32[$2 + 36 >> 2], 128604) & 1) {
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 36 >> 2], 123944, jsvNewFromInteger(0));
    HEAP32[$2 + 32 >> 2] = jswrap_regexp_exec(HEAP32[$2 + 36 >> 2], HEAP32[$2 + 40 >> 2]);
    if (!(jswrap_regexp_hasFlag(HEAP32[$2 + 36 >> 2], 103) & 1)) {
     HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
     break block;
    }
    HEAP32[$2 + 28 >> 2] = jsvNewEmptyArray();
    if (!HEAP32[$2 + 28 >> 2]) {
     HEAP32[$2 + 44 >> 2] = 0;
     break block;
    }
    while (1) {
     $0 = 0;
     if (HEAP32[$2 + 32 >> 2]) {
      $0 = jsvIsNull(HEAP32[$2 + 32 >> 2]) ^ -1
     }
     if ($0 & 1) {
      HEAP32[$2 + 24 >> 2] = jsvGetArrayItem(HEAP32[$2 + 32 >> 2], 0);
      HEAP32[$2 + 20 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 32 >> 2], 123938);
      HEAP32[$2 + 16 >> 2] = jsvGetStringLength(HEAP32[$2 + 24 >> 2]);
      HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 20 >> 2] + HEAP32[$2 + 16 >> 2];
      jsvArrayPushAndUnLock(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2]);
      jsvUnLock(HEAP32[$2 + 32 >> 2]);
      jsvObjectSetChildAndUnLock(HEAP32[$2 + 36 >> 2], 123944, jsvNewFromInteger(HEAP32[$2 + 12 >> 2] + !HEAP32[$2 + 16 >> 2] | 0));
      HEAP32[$2 + 32 >> 2] = jswrap_regexp_exec(HEAP32[$2 + 36 >> 2], HEAP32[$2 + 40 >> 2]);
      continue;
     }
     break;
    };
    jsvUnLock(HEAP32[$2 + 32 >> 2]);
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 36 >> 2], 123944, jsvNewFromInteger(0));
    HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 28 >> 2];
    break block;
   }
   HEAP32[$2 + 36 >> 2] = jsvAsString(HEAP32[$2 + 36 >> 2]);
   HEAP32[$2 + 8 >> 2] = jswrap_string_indexOf(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 0, 0);
   if (HEAP32[$2 + 8 >> 2] >= 0) {
    HEAP32[$2 + 4 >> 2] = jsvNewEmptyArray();
    if (!HEAP32[$2 + 4 >> 2]) {
     jsvUnLock(HEAP32[$2 + 36 >> 2]);
     HEAP32[$2 + 44 >> 2] = 0;
     break block;
    }
    jsvArrayPush(HEAP32[$2 + 4 >> 2], HEAP32[$2 + 36 >> 2]);
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 4 >> 2], 123938, jsvNewFromInteger(HEAP32[$2 + 8 >> 2]));
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 4 >> 2], 124373, HEAP32[$2 + 36 >> 2]);
    HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 4 >> 2];
    break block;
   }
   jsvUnLock(HEAP32[$2 + 36 >> 2]);
   HEAP32[$2 + 44 >> 2] = jsvNewNull();
  }
  __stack_pointer = $2 + 48 | 0;
  return HEAP32[$2 + 44 >> 2];
 }
 
 function jsvNewNull() {
  return jsvNewWithFlags(2);
 }
 
 function jswrap_string_replace($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = _jswrap_string_replace(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function _jswrap_string_replace($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 224 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 216 >> 2] = $0;
  HEAP32[$4 + 212 >> 2] = $1;
  HEAP32[$4 + 208 >> 2] = $2;
  HEAP8[$4 + 207 | 0] = $3;
  HEAP32[$4 + 200 >> 2] = jsvAsString(HEAP32[$4 + 216 >> 2]);
  block7 : {
   if (jsvIsInstanceOf(HEAP32[$4 + 212 >> 2], 128604) & 1) {
    block1 : {
     block : {
      if (!(jsvIsFunction(HEAP32[$4 + 208 >> 2]) & 1)) {
       if (!(jsvIsString(HEAP32[$4 + 208 >> 2]) & 1)) {
        break block
       }
      }
      HEAP32[$4 + 196 >> 2] = jsvLockAgain(HEAP32[$4 + 208 >> 2]);
      break block1;
     }
     HEAP32[$4 + 196 >> 2] = jsvAsString(HEAP32[$4 + 208 >> 2]);
    }
    jsvObjectSetChildAndUnLock(HEAP32[$4 + 212 >> 2], 123944, jsvNewFromInteger(0));
    HEAP8[$4 + 195 | 0] = jswrap_regexp_hasFlag(HEAP32[$4 + 212 >> 2], 103) & 1;
    if (HEAP8[$4 + 207 | 0] & 1) {
     HEAP8[$4 + 195 | 0] = 1
    }
    HEAP32[$4 + 188 >> 2] = jsvNewFromEmptyString_1513();
    jsvStringIteratorNew($4 + 152 | 0, HEAP32[$4 + 188 >> 2], 0);
    HEAP32[$4 + 148 >> 2] = 0;
    HEAP32[$4 + 144 >> 2] = jswrap_regexp_exec(HEAP32[$4 + 212 >> 2], HEAP32[$4 + 200 >> 2]);
    while (1) {
     $0 = 0;
     block2 : {
      if (!HEAP32[$4 + 144 >> 2]) {
       break block2
      }
      $0 = 0;
      if (jsvIsNull(HEAP32[$4 + 144 >> 2]) & 1) {
       break block2
      }
      $0 = jspIsInterrupted() ^ -1;
     }
     if ($0 & 1) {
      HEAP32[$4 + 140 >> 2] = jsvGetArrayItem(HEAP32[$4 + 144 >> 2], 0);
      HEAP32[$4 + 136 >> 2] = jsvObjectGetIntegerChild(HEAP32[$4 + 144 >> 2], 123938);
      HEAP32[$4 + 132 >> 2] = jsvGetStringLength(HEAP32[$4 + 140 >> 2]);
      jsvStringIteratorAppendString($4 + 152 | 0, HEAP32[$4 + 200 >> 2], HEAP32[$4 + 148 >> 2], HEAP32[$4 + 136 >> 2] - HEAP32[$4 + 148 >> 2] | 0);
      block3 : {
       if (jsvIsFunction(HEAP32[$4 + 196 >> 2]) & 1) {
        HEAP32[$4 + 128 >> 2] = 0;
        $1 = jsvLockAgain(HEAP32[$4 + 140 >> 2]);
        $0 = HEAP32[$4 + 128 >> 2];
        HEAP32[$4 + 128 >> 2] = $0 + 1;
        HEAP32[($4 - -64 | 0) + ($0 << 2) >> 2] = $1;
        while (1) {
         $1 = jsvGetArrayItem(HEAP32[$4 + 144 >> 2], HEAP32[$4 + 128 >> 2]);
         HEAP32[$4 + 60 >> 2] = $1;
         $0 = 0;
         $0 = $1 ? HEAPU32[$4 + 128 >> 2] < 11 : $0;
         if ($0) {
          $1 = HEAP32[$4 + 60 >> 2];
          $0 = HEAP32[$4 + 128 >> 2];
          HEAP32[$4 + 128 >> 2] = $0 + 1;
          HEAP32[($4 - -64 | 0) + ($0 << 2) >> 2] = $1;
          continue;
         }
         break;
        };
        $1 = jsvObjectGetChildIfExists(HEAP32[$4 + 144 >> 2], 123938);
        $0 = HEAP32[$4 + 128 >> 2];
        HEAP32[$4 + 128 >> 2] = $0 + 1;
        HEAP32[($4 - -64 | 0) + ($0 << 2) >> 2] = $1;
        $1 = jsvObjectGetChildIfExists(HEAP32[$4 + 144 >> 2], 124373);
        $0 = HEAP32[$4 + 128 >> 2];
        HEAP32[$4 + 128 >> 2] = $0 + 1;
        HEAP32[($4 - -64 | 0) + ($0 << 2) >> 2] = $1;
        HEAP32[$4 + 56 >> 2] = jsvAsStringAndUnLock(jspeFunctionCall(HEAP32[$4 + 196 >> 2], 0, 0, 0, HEAP32[$4 + 128 >> 2], $4 - -64 | 0));
        jsvUnLockMany(HEAP32[$4 + 128 >> 2], $4 - -64 | 0);
        jsvStringIteratorAppendString($4 + 152 | 0, HEAP32[$4 + 56 >> 2], 0, 2147483647);
        jsvUnLock(HEAP32[$4 + 56 >> 2]);
        break block3;
       }
       jsvStringIteratorNew($4 + 20 | 0, HEAP32[$4 + 196 >> 2], 0);
       while (1) {
        if (jsvStringIteratorHasChar_1528($4 + 20 | 0) & 1) {
         HEAP8[$4 + 19 | 0] = jsvStringIteratorGetCharAndNext($4 + 20 | 0);
         block6 : {
          if (HEAPU8[$4 + 19 | 0] == 36) {
           HEAP8[$4 + 19 | 0] = jsvStringIteratorGetCharAndNext($4 + 20 | 0);
           HEAP32[$4 + 12 >> 2] = 0;
           if (!(HEAP8[$4 + 19 | 0] << 24 >> 24 <= 48 | HEAP8[$4 + 19 | 0] << 24 >> 24 > 57)) {
            HEAP32[$4 + 12 >> 2] = jsvGetArrayItem(HEAP32[$4 + 144 >> 2], (HEAP8[$4 + 19 | 0] << 24 >> 24) - 48 | 0)
           }
           block5 : {
            if (HEAP32[$4 + 12 >> 2]) {
             jsvStringIteratorAppendString($4 + 152 | 0, HEAP32[$4 + 12 >> 2], 0, 2147483647);
             jsvUnLock(HEAP32[$4 + 12 >> 2]);
             break block5;
            }
            jsvStringIteratorAppend($4 + 152 | 0, 36);
            jsvStringIteratorAppend($4 + 152 | 0, HEAP8[$4 + 19 | 0] << 24 >> 24);
           }
           break block6;
          }
          jsvStringIteratorAppend($4 + 152 | 0, HEAP8[$4 + 19 | 0] << 24 >> 24);
         }
         continue;
        }
        break;
       };
       jsvStringIteratorFree_1519($4 + 20 | 0);
      }
      HEAP32[$4 + 148 >> 2] = HEAP32[$4 + 136 >> 2] + HEAP32[$4 + 132 >> 2];
      jsvUnLock(HEAP32[$4 + 140 >> 2]);
      jsvUnLock(HEAP32[$4 + 144 >> 2]);
      HEAP32[$4 + 144 >> 2] = 0;
      if (HEAP8[$4 + 195 | 0] & 1) {
       jsvObjectSetChildAndUnLock(HEAP32[$4 + 212 >> 2], 123944, jsvNewFromInteger(HEAP32[$4 + 148 >> 2] + !HEAP32[$4 + 132 >> 2] | 0));
       HEAP32[$4 + 144 >> 2] = jswrap_regexp_exec(HEAP32[$4 + 212 >> 2], HEAP32[$4 + 200 >> 2]);
      }
      continue;
     }
     break;
    };
    jsvStringIteratorAppendString($4 + 152 | 0, HEAP32[$4 + 200 >> 2], HEAP32[$4 + 148 >> 2], 2147483647);
    jsvStringIteratorFree_1519($4 + 152 | 0);
    jsvUnLock3(HEAP32[$4 + 144 >> 2], HEAP32[$4 + 196 >> 2], HEAP32[$4 + 200 >> 2]);
    if (HEAP8[$4 + 195 | 0] & 1) {
     jsvObjectSetChildAndUnLock(HEAP32[$4 + 212 >> 2], 123944, jsvNewFromInteger(0))
    }
    HEAP32[$4 + 220 >> 2] = HEAP32[$4 + 188 >> 2];
    break block7;
   }
   HEAP32[$4 + 208 >> 2] = jsvAsString(HEAP32[$4 + 208 >> 2]);
   HEAP32[$4 + 212 >> 2] = jsvAsString(HEAP32[$4 + 212 >> 2]);
   HEAP32[$4 + 8 >> 2] = jswrap_string_indexOf(HEAP32[$4 + 200 >> 2], HEAP32[$4 + 212 >> 2], 0, 0);
   while (1) {
    $0 = 0;
    if (HEAP32[$4 + 8 >> 2] >= 0) {
     $0 = jspIsInterrupted() ^ -1
    }
    if ($0 & 1) {
     HEAP32[$4 + 4 >> 2] = jsvNewWritableStringFromStringVar(HEAP32[$4 + 200 >> 2], 0, HEAP32[$4 + 8 >> 2]);
     jsvAppendStringVarComplete(HEAP32[$4 + 4 >> 2], HEAP32[$4 + 208 >> 2]);
     jsvAppendStringVar(HEAP32[$4 + 4 >> 2], HEAP32[$4 + 200 >> 2], HEAP32[$4 + 8 >> 2] + jsvGetStringLength(HEAP32[$4 + 212 >> 2]) | 0, 2147483647);
     jsvUnLock(HEAP32[$4 + 200 >> 2]);
     HEAP32[$4 + 200 >> 2] = HEAP32[$4 + 4 >> 2];
     block8 : {
      if (HEAP8[$4 + 207 | 0] & 1) {
       HEAP32[$4 >> 2] = jsvNewFromInteger(HEAP32[$4 + 8 >> 2] + jsvGetStringLength(HEAP32[$4 + 208 >> 2]) | 0);
       HEAP32[$4 + 8 >> 2] = jswrap_string_indexOf(HEAP32[$4 + 200 >> 2], HEAP32[$4 + 212 >> 2], HEAP32[$4 >> 2], 0);
       jsvUnLock(HEAP32[$4 >> 2]);
       break block8;
      }
      HEAP32[$4 + 8 >> 2] = -1;
     }
     continue;
    }
    break;
   };
   jsvUnLock2(HEAP32[$4 + 212 >> 2], HEAP32[$4 + 208 >> 2]);
   HEAP32[$4 + 220 >> 2] = HEAP32[$4 + 200 >> 2];
  }
  __stack_pointer = $4 + 224 | 0;
  return HEAP32[$4 + 220 >> 2];
 }
 
 function jsvStringIteratorHasChar_1528($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
 }
 
 function jswrap_string_replaceAll($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = _jswrap_string_replace(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 1);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function jswrap_string_substring($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  if (jsvIsUndefined(HEAP32[$3 + 20 >> 2]) & 1) {
   $0 = 2147483647
  } else {
   $0 = jsvGetInteger(HEAP32[$3 + 20 >> 2])
  }
  HEAP32[$3 + 16 >> 2] = $0;
  if (HEAP32[$3 + 24 >> 2] < 0) {
   HEAP32[$3 + 24 >> 2] = 0
  }
  if (HEAP32[$3 + 16 >> 2] < 0) {
   HEAP32[$3 + 16 >> 2] = 0
  }
  if (HEAP32[$3 + 16 >> 2] < HEAP32[$3 + 24 >> 2]) {
   HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 24 >> 2];
   HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 16 >> 2];
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 12 >> 2];
  }
  $0 = jsvNewFromStringVar(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 16 >> 2] - HEAP32[$3 + 24 >> 2] | 0);
  __stack_pointer = $3 + 32 | 0;
  return $0 | 0;
 }
 
 function jswrap_string_substr($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  if (jsvIsUndefined(HEAP32[$3 + 4 >> 2]) & 1) {
   $0 = 2147483647
  } else {
   $0 = jsvGetInteger(HEAP32[$3 + 4 >> 2])
  }
  HEAP32[$3 >> 2] = $0;
  if (HEAP32[$3 >> 2] < 0) {
   HEAP32[$3 >> 2] = 0
  }
  if (HEAP32[$3 + 8 >> 2] < 0) {
   HEAP32[$3 + 8 >> 2] = jsvGetStringLength(HEAP32[$3 + 12 >> 2]) + HEAP32[$3 + 8 >> 2]
  }
  if (HEAP32[$3 + 8 >> 2] < 0) {
   HEAP32[$3 + 8 >> 2] = 0
  }
  $0 = jsvNewFromStringVar(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 >> 2]);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function jswrap_string_slice($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP32[$3 + 16 >> 2] = $2;
  if (jsvIsUndefined(HEAP32[$3 + 16 >> 2]) & 1) {
   $0 = 2147483647
  } else {
   $0 = jsvGetInteger(HEAP32[$3 + 16 >> 2])
  }
  HEAP32[$3 + 12 >> 2] = $0;
  if (HEAP32[$3 + 20 >> 2] < 0) {
   HEAP32[$3 + 20 >> 2] = jsvGetStringLength(HEAP32[$3 + 24 >> 2]) + HEAP32[$3 + 20 >> 2]
  }
  if (HEAP32[$3 + 12 >> 2] < 0) {
   HEAP32[$3 + 12 >> 2] = jsvGetStringLength(HEAP32[$3 + 24 >> 2]) + HEAP32[$3 + 12 >> 2]
  }
  if (HEAP32[$3 + 20 >> 2] < 0) {
   HEAP32[$3 + 20 >> 2] = 0
  }
  if (HEAP32[$3 + 12 >> 2] < 0) {
   HEAP32[$3 + 12 >> 2] = 0
  }
  block : {
   if (HEAP32[$3 + 12 >> 2] <= HEAP32[$3 + 20 >> 2]) {
    HEAP32[$3 + 28 >> 2] = jsvNewFromEmptyString_1513();
    break block;
   }
   HEAP32[$3 + 28 >> 2] = jsvNewFromStringVar(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 12 >> 2] - HEAP32[$3 + 20 >> 2] | 0);
  }
  __stack_pointer = $3 + 32 | 0;
  return HEAP32[$3 + 28 >> 2];
 }
 
 function jswrap_string_split($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer + -64 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 56 >> 2] = $0;
  HEAP32[$2 + 52 >> 2] = $1;
  block : {
   if (!(jsvIsString(HEAP32[$2 + 56 >> 2]) & 1)) {
    HEAP32[$2 + 60 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 48 >> 2] = jsvNewEmptyArray();
   if (!HEAP32[$2 + 48 >> 2]) {
    HEAP32[$2 + 60 >> 2] = 0;
    break block;
   }
   if (jsvIsUndefined(HEAP32[$2 + 52 >> 2]) & 1) {
    jsvArrayPush(HEAP32[$2 + 48 >> 2], HEAP32[$2 + 56 >> 2]);
    HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 48 >> 2];
    break block;
   }
   if (jsvIsInstanceOf(HEAP32[$2 + 52 >> 2], 128604) & 1) {
    HEAP32[$2 + 44 >> 2] = 0;
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 52 >> 2], 123944, jsvNewFromInteger(0));
    HEAP32[$2 + 40 >> 2] = jswrap_regexp_exec(HEAP32[$2 + 52 >> 2], HEAP32[$2 + 56 >> 2]);
    while (1) {
     $0 = 0;
     if (HEAP32[$2 + 40 >> 2]) {
      $0 = jsvIsNull(HEAP32[$2 + 40 >> 2]) ^ -1
     }
     if ($0 & 1) {
      HEAP32[$2 + 36 >> 2] = jsvGetArrayItem(HEAP32[$2 + 40 >> 2], 0);
      HEAP32[$2 + 32 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 40 >> 2], 123938);
      HEAP32[$2 + 28 >> 2] = jsvGetStringLength(HEAP32[$2 + 36 >> 2]);
      jsvUnLock(HEAP32[$2 + 36 >> 2]);
      jsvArrayPushAndUnLock(HEAP32[$2 + 48 >> 2], jsvNewFromStringVar(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 44 >> 2], HEAP32[$2 + 32 >> 2] - HEAP32[$2 + 44 >> 2] | 0));
      HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2] + HEAP32[$2 + 28 >> 2];
      jsvUnLock(HEAP32[$2 + 40 >> 2]);
      jsvObjectSetChildAndUnLock(HEAP32[$2 + 52 >> 2], 123944, jsvNewFromInteger(HEAP32[$2 + 44 >> 2]));
      HEAP32[$2 + 40 >> 2] = jswrap_regexp_exec(HEAP32[$2 + 52 >> 2], HEAP32[$2 + 56 >> 2]);
      continue;
     }
     break;
    };
    jsvUnLock(HEAP32[$2 + 40 >> 2]);
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 52 >> 2], 123944, jsvNewFromInteger(0));
    if (HEAP32[$2 + 44 >> 2] <= (jsvGetStringLength(HEAP32[$2 + 56 >> 2]) | 0)) {
     jsvArrayPushAndUnLock(HEAP32[$2 + 48 >> 2], jsvNewFromStringVar(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 44 >> 2], 2147483647))
    }
    HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 48 >> 2];
    break block;
   }
   HEAP32[$2 + 52 >> 2] = jsvAsString(HEAP32[$2 + 52 >> 2]);
   HEAP32[$2 + 20 >> 2] = 0;
   if (jsvIsUndefined(HEAP32[$2 + 52 >> 2]) & 1) {
    $0 = 0
   } else {
    $0 = jsvGetStringLength(HEAP32[$2 + 52 >> 2])
   }
   HEAP32[$2 + 16 >> 2] = $0;
   HEAP32[$2 + 12 >> 2] = (jsvGetStringLength(HEAP32[$2 + 56 >> 2]) + 1 | 0) - HEAP32[$2 + 16 >> 2];
   HEAP32[$2 + 24 >> 2] = 0;
   while (1) {
    block1 : {
     if (HEAP32[$2 + 24 >> 2] > HEAP32[$2 + 12 >> 2]) {
      break block1
     }
     if (HEAP32[$2 + 16 >> 2] | HEAP32[$2 + 24 >> 2]) {
      block5 : {
       if (!(!HEAP32[$2 + 16 >> 2] | HEAP32[$2 + 24 >> 2] == HEAP32[$2 + 12 >> 2])) {
        if (jsvCompareString(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], HEAP32[$2 + 24 >> 2], 0, 1)) {
         break block5
        }
       }
       if (HEAP32[$2 + 24 >> 2] == HEAP32[$2 + 12 >> 2]) {
        HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 12 >> 2] + HEAP32[$2 + 16 >> 2];
        if (!HEAP32[$2 + 16 >> 2]) {
         break block1
        }
       }
       HEAP32[$2 + 8 >> 2] = jsvNewFromStringVar(HEAP32[$2 + 56 >> 2], jsvConvertFromUTF8Index(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 20 >> 2]), jsvConvertFromUTF8Index(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 24 >> 2]) - jsvConvertFromUTF8Index(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 20 >> 2]) | 0);
       if (!HEAP32[$2 + 8 >> 2]) {
        break block1
       }
       jsvArrayPush(HEAP32[$2 + 48 >> 2], HEAP32[$2 + 8 >> 2]);
       jsvUnLock(HEAP32[$2 + 8 >> 2]);
       HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 24 >> 2] + HEAP32[$2 + 16 >> 2];
      }
     }
     HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 24 >> 2] + 1;
     continue;
    }
    break;
   };
   jsvUnLock(HEAP32[$2 + 52 >> 2]);
   HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 48 >> 2];
  }
  __stack_pointer = $2 - -64 | 0;
  return HEAP32[$2 + 60 >> 2];
 }
 
 function jswrap_string_toUpperLowerCase($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 96 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 88 >> 2] = $0;
  HEAP8[$2 + 87 | 0] = $1;
  HEAP32[$2 + 80 >> 2] = jsvNewFromEmptyString_1513();
  block : {
   if (!HEAP32[$2 + 80 >> 2]) {
    HEAP32[$2 + 92 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 76 >> 2] = jsvAsString(HEAP32[$2 + 88 >> 2]);
   jsvStringIteratorNew($2 + 40 | 0, HEAP32[$2 + 76 >> 2], 0);
   jsvStringIteratorNew($2 + 4 | 0, HEAP32[$2 + 80 >> 2], 0);
   while (1) {
    if (jsvStringIteratorHasChar_1528($2 + 40 | 0) & 1) {
     HEAP8[$2 + 3 | 0] = jsvStringIteratorGetCharAndNext($2 + 40 | 0);
     block1 : {
      if (HEAP8[$2 + 87 | 0] & 1) {
       $0 = charToUpperCase(HEAP8[$2 + 3 | 0] << 24 >> 24) << 24 >> 24;
       break block1;
      }
      $0 = charToLowerCase(HEAP8[$2 + 3 | 0] << 24 >> 24) << 24 >> 24;
     }
     HEAP8[$2 + 3 | 0] = $0;
     jsvStringIteratorAppend($2 + 4 | 0, HEAP8[$2 + 3 | 0] << 24 >> 24);
     continue;
    }
    break;
   };
   jsvStringIteratorFree_1519($2 + 40 | 0);
   jsvStringIteratorFree_1519($2 + 4 | 0);
   jsvUnLock(HEAP32[$2 + 76 >> 2]);
   HEAP32[$2 + 92 >> 2] = HEAP32[$2 + 80 >> 2];
  }
  __stack_pointer = $2 + 96 | 0;
  return HEAP32[$2 + 92 >> 2];
 }
 
 function jswrap_string_removeAccents($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 96 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 88 >> 2] = $0;
  HEAP32[$1 + 80 >> 2] = jsvNewFromEmptyString_1513();
  block : {
   if (!HEAP32[$1 + 80 >> 2]) {
    HEAP32[$1 + 92 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 76 >> 2] = jsvAsString(HEAP32[$1 + 88 >> 2]);
   jsvStringIteratorNew($1 + 40 | 0, HEAP32[$1 + 76 >> 2], 0);
   jsvStringIteratorNew($1 + 4 | 0, HEAP32[$1 + 80 >> 2], 0);
   while (1) {
    if (jsvStringIteratorHasChar_1528($1 + 40 | 0) & 1) {
     HEAP8[$1 + 3 | 0] = jsvStringIteratorGetCharAndNext($1 + 40 | 0);
     block1 : {
      if (HEAPU8[$1 + 3 | 0] >= 224) {
       HEAP8[$1 + 87 | 0] = 1;
       HEAP8[$1 + 3 | 0] = HEAPU8[$1 + 3 | 0] - 32;
       break block1;
      }
      HEAP8[$1 + 87 | 0] = 0;
     }
     if (HEAPU8[$1 + 3 | 0] >= 192) {
      block10 : {
       block14 : {
        switch (HEAPU8[$1 + 3 | 0] - 192 | 0) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
         HEAP8[$1 + 3 | 0] = 65;
         break block10;
        case 6:
         jsvStringIteratorAppend($1 + 4 | 0, HEAP8[$1 + 87 | 0] & 1 ? 97 : 65);
         HEAP8[$1 + 3 | 0] = 69;
         break block10;
        case 7:
         HEAP8[$1 + 3 | 0] = 67;
         break block10;
        case 8:
        case 9:
        case 10:
        case 11:
         HEAP8[$1 + 3 | 0] = 69;
         break block10;
        case 12:
        case 13:
        case 14:
        case 15:
         HEAP8[$1 + 3 | 0] = 73;
         break block10;
        case 16:
         HEAP8[$1 + 3 | 0] = 68;
         break block10;
        case 17:
         HEAP8[$1 + 3 | 0] = 78;
         break block10;
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 24:
         HEAP8[$1 + 3 | 0] = 79;
         break block10;
        case 25:
        case 26:
        case 27:
        case 28:
         HEAP8[$1 + 3 | 0] = 85;
         break block10;
        case 29:
         HEAP8[$1 + 3 | 0] = 89;
         break block10;
        case 30:
         HEAP8[$1 + 3 | 0] = 80;
         break block10;
        case 31:
         break block14;
        default:
         break block10;
        };
       }
       block15 : {
        if (HEAP8[$1 + 87 | 0] & 1) {
         HEAP8[$1 + 3 | 0] = 89;
         break block15;
        }
        jsvStringIteratorAppend($1 + 4 | 0, 83);
        HEAP8[$1 + 3 | 0] = 83;
       }
      }
     }
     $2 = $1 + 4 | 0;
     if (HEAP8[$1 + 87 | 0] & 1) {
      $0 = HEAPU8[$1 + 3 | 0] + 32 | 0
     } else {
      $0 = HEAP8[$1 + 3 | 0]
     }
     jsvStringIteratorAppend($2, $0 << 24 >> 24);
     continue;
    }
    break;
   };
   jsvStringIteratorFree_1519($1 + 40 | 0);
   jsvStringIteratorFree_1519($1 + 4 | 0);
   jsvUnLock(HEAP32[$1 + 76 >> 2]);
   HEAP32[$1 + 92 >> 2] = HEAP32[$1 + 80 >> 2];
  }
  __stack_pointer = $1 + 96 | 0;
  return HEAP32[$1 + 92 >> 2];
 }
 
 function jswrap_string_trim($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 80 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 72 >> 2] = $0;
  HEAP32[$1 + 68 >> 2] = jsvAsString(HEAP32[$1 + 72 >> 2]);
  block : {
   if (!HEAP32[$1 + 68 >> 2]) {
    HEAP32[$1 + 76 >> 2] = HEAP32[$1 + 68 >> 2];
    break block;
   }
   HEAP32[$1 + 64 >> 2] = 0;
   HEAP32[$1 + 60 >> 2] = -1;
   jsvStringIteratorNew($1 + 24 | 0, HEAP32[$1 + 68 >> 2], 0);
   while (1) {
    if (jsvStringIteratorHasChar_1528($1 + 24 | 0) & 1) {
     HEAP32[$1 + 20 >> 2] = jsvStringIteratorGetIndex_1537($1 + 24 | 0);
     HEAP8[$1 + 19 | 0] = isWhitespace(jsvStringIteratorGetCharAndNext($1 + 24 | 0) << 24 >> 24) & 1;
     if (!(HEAP8[$1 + 19 | 0] & 1)) {
      if (HEAP32[$1 + 60 >> 2] < 0) {
       HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 20 >> 2]
      }
      HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 20 >> 2];
     }
     continue;
    }
    break;
   };
   jsvStringIteratorFree_1519($1 + 24 | 0);
   HEAP32[$1 + 12 >> 2] = 0;
   if (HEAP32[$1 + 60 >> 2] >= HEAP32[$1 + 64 >> 2]) {
    HEAP32[$1 + 12 >> 2] = (HEAP32[$1 + 60 >> 2] + 1 | 0) - HEAP32[$1 + 64 >> 2]
   }
   HEAP32[$1 + 8 >> 2] = jsvNewFromStringVar(HEAP32[$1 + 68 >> 2], HEAP32[$1 + 64 >> 2], HEAP32[$1 + 12 >> 2]);
   jsvUnLock(HEAP32[$1 + 68 >> 2]);
   HEAP32[$1 + 76 >> 2] = HEAP32[$1 + 8 >> 2];
  }
  __stack_pointer = $1 + 80 | 0;
  return HEAP32[$1 + 76 >> 2];
 }
 
 function jsvStringIteratorGetIndex_1537($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + HEAP32[HEAP32[$1 + 12 >> 2] >> 2] | 0;
 }
 
 function jswrap_string_concat($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  block : {
   if (!(jsvIsString(HEAP32[$2 + 24 >> 2]) & 1)) {
    HEAP32[$2 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 16 >> 2] = jsvNewFromStringVarComplete(HEAP32[$2 + 24 >> 2]);
   HEAP32[$2 + 12 >> 2] = jsvArrayJoin(HEAP32[$2 + 20 >> 2], 0, 0);
   jsvAppendStringVarComplete(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2]);
   jsvUnLock(HEAP32[$2 + 12 >> 2]);
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jswrap_string_startsWith($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP32[$3 + 16 >> 2] = $2;
  block : {
   if (!(jsvIsString(HEAP32[$3 + 24 >> 2]) & 1)) {
    HEAP8[$3 + 31 | 0] = 0;
    break block;
   }
   HEAP32[$3 + 12 >> 2] = jsvAsString(HEAP32[$3 + 20 >> 2]);
   HEAP8[$3 + 11 | 0] = 0;
   block1 : {
    if (HEAP32[$3 + 16 >> 2] < 0) {
     break block1
    }
    if ((jsvGetStringLength(HEAP32[$3 + 12 >> 2]) + HEAP32[$3 + 16 >> 2] | 0) > (jsvGetStringLength(HEAP32[$3 + 24 >> 2]) | 0)) {
     break block1
    }
    HEAP8[$3 + 11 | 0] = !jsvCompareString(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 16 >> 2], 0, 1);
   }
   jsvUnLock(HEAP32[$3 + 12 >> 2]);
   HEAP8[$3 + 31 | 0] = HEAP8[$3 + 11 | 0] & 1;
  }
  __stack_pointer = $3 + 32 | 0;
  return HEAP8[$3 + 31 | 0] & 1;
 }
 
 function jswrap_string_endsWith($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP32[$3 + 16 >> 2] = $2;
  block : {
   if (!(jsvIsString(HEAP32[$3 + 24 >> 2]) & 1)) {
    HEAP8[$3 + 31 | 0] = 0;
    break block;
   }
   block1 : {
    if (jsvIsNumeric(HEAP32[$3 + 16 >> 2]) & 1) {
     $0 = jsvGetInteger(HEAP32[$3 + 16 >> 2]);
     break block1;
    }
    $0 = jsvGetStringLength(HEAP32[$3 + 24 >> 2]);
   }
   HEAP32[$3 + 12 >> 2] = $0;
   HEAP32[$3 + 8 >> 2] = jsvAsString(HEAP32[$3 + 20 >> 2]);
   $0 = jsvGetStringLength(HEAP32[$3 + 8 >> 2]);
   HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] - $0;
   HEAP8[$3 + 7 | 0] = 0;
   block2 : {
    if (HEAP32[$3 + 12 >> 2] < 0) {
     break block2
    }
    if ((jsvGetStringLength(HEAP32[$3 + 8 >> 2]) + HEAP32[$3 + 12 >> 2] | 0) > (jsvGetStringLength(HEAP32[$3 + 24 >> 2]) | 0)) {
     break block2
    }
    HEAP8[$3 + 7 | 0] = !jsvCompareString(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 12 >> 2], 0, 1);
   }
   jsvUnLock(HEAP32[$3 + 8 >> 2]);
   HEAP8[$3 + 31 | 0] = HEAP8[$3 + 7 | 0] & 1;
  }
  __stack_pointer = $3 + 32 | 0;
  return HEAP8[$3 + 31 | 0] & 1;
 }
 
 function jswrap_string_repeat($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  block : {
   if (HEAP32[$2 + 4 >> 2] < 0) {
    jsExceptionHere(1, 137121, 0);
    HEAP32[$2 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$2 >> 2] = jsvNewFromEmptyString_1513();
   while (1) {
    $0 = HEAP32[$2 + 4 >> 2];
    HEAP32[$2 + 4 >> 2] = $0 - 1;
    $1 = 0;
    if ($0) {
     $1 = jspIsInterrupted() ^ -1
    }
    if ($1 & 1) {
     jsvAppendStringVarComplete(HEAP32[$2 >> 2], HEAP32[$2 + 8 >> 2]);
     continue;
    }
    break;
   };
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function jswrap_string_padX($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 24 >> 2] = $0;
  HEAP32[$4 + 20 >> 2] = $1;
  HEAP32[$4 + 16 >> 2] = $2;
  HEAP8[$4 + 15 | 0] = $3;
  block1 : {
   block : {
    if (jsvIsString(HEAP32[$4 + 24 >> 2]) & 1) {
     if ((jsvGetStringLength(HEAP32[$4 + 24 >> 2]) | 0) < HEAP32[$4 + 20 >> 2]) {
      break block
     }
    }
    HEAP32[$4 + 28 >> 2] = jsvLockAgain(HEAP32[$4 + 24 >> 2]);
    break block1;
   }
   HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 20 >> 2] - jsvGetStringLength(HEAP32[$4 + 24 >> 2]);
   block2 : {
    if (HEAP8[$4 + 15 | 0] & 1) {
     $0 = jsvNewFromEmptyString_1513();
     break block2;
    }
    $0 = jsvNewFromStringVarComplete(HEAP32[$4 + 24 >> 2]);
   }
   HEAP32[$4 + 4 >> 2] = $0;
   if (!HEAP32[$4 + 4 >> 2]) {
    HEAP32[$4 + 28 >> 2] = 0;
    break block1;
   }
   block3 : {
    if (HEAP32[$4 + 16 >> 2]) {
     $0 = jsvAsString(HEAP32[$4 + 16 >> 2]);
     break block3;
    }
    $0 = jsvNewFromString(147034);
   }
   HEAP32[$4 + 16 >> 2] = $0;
   HEAP32[$4 >> 2] = jsvGetStringLength(HEAP32[$4 + 16 >> 2]);
   while (1) {
    if (HEAP32[$4 + 8 >> 2] > 0) {
     $1 = HEAP32[$4 + 4 >> 2];
     $2 = HEAP32[$4 + 16 >> 2];
     if (HEAP32[$4 >> 2] > HEAP32[$4 + 8 >> 2]) {
      $0 = HEAP32[$4 + 8 >> 2]
     } else {
      $0 = HEAP32[$4 >> 2]
     }
     jsvAppendStringVar($1, $2, 0, $0);
     HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] - HEAP32[$4 >> 2];
     continue;
    }
    break;
   };
   if (HEAP8[$4 + 15 | 0] & 1) {
    jsvAppendStringVarComplete(HEAP32[$4 + 4 >> 2], HEAP32[$4 + 24 >> 2])
   }
   jsvUnLock(HEAP32[$4 + 16 >> 2]);
   HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 4 >> 2];
  }
  __stack_pointer = $4 + 32 | 0;
  return HEAP32[$4 + 28 >> 2];
 }
 
 function jswrap_require($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 256 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 248 >> 2] = $0;
  block : {
   if (!(jsvIsString(HEAP32[$1 + 248 >> 2]) & 1)) {
    HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 248 >> 2];
    jsExceptionHere(3, 126061, $1 + 48 | 0);
    HEAP32[$1 + 252 >> 2] = 0;
    break block;
   }
   if (jsvGetString(HEAP32[$1 + 248 >> 2], $1 + 112 | 0, 128) >>> 0 >= 128) {
    jsExceptionHere(3, 144273, 0);
    HEAP32[$1 + 252 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 108 >> 2] = jswrap_modules_getModuleList();
   if (!HEAP32[$1 + 108 >> 2]) {
    HEAP32[$1 + 252 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 104 >> 2] = jsvSkipNameAndUnLock(jsvFindChildFromString(HEAP32[$1 + 108 >> 2], $1 + 112 | 0));
   jsvUnLock(HEAP32[$1 + 108 >> 2]);
   if (HEAP32[$1 + 104 >> 2]) {
    HEAP32[$1 + 252 >> 2] = HEAP32[$1 + 104 >> 2];
    break block;
   }
   HEAP32[$1 + 100 >> 2] = jswGetBuiltInLibrary($1 + 112 | 0);
   if (HEAP32[$1 + 100 >> 2]) {
    HEAP32[$1 + 104 >> 2] = jsvNewNativeFunction(HEAP32[$1 + 100 >> 2], 0)
   }
   block1 : {
    if (HEAP32[$1 + 104 >> 2]) {
     break block1
    }
    if (strlen($1 + 112 | 0) >>> 0 > 28) {
     break block1
    }
    jsfNameFromString($1 + 72 | 0, $1 + 112 | 0);
    HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 96 >> 2];
    $2 = HEAP32[$1 + 92 >> 2];
    $0 = HEAP32[$1 + 88 >> 2];
    HEAP32[$1 + 32 >> 2] = $0;
    HEAP32[$1 + 36 >> 2] = $2;
    $0 = HEAP32[$1 + 84 >> 2];
    $2 = HEAP32[$1 + 80 >> 2];
    HEAP32[$1 + 24 >> 2] = $2;
    HEAP32[$1 + 28 >> 2] = $0;
    $2 = HEAP32[$1 + 76 >> 2];
    $0 = HEAP32[$1 + 72 >> 2];
    HEAP32[$1 + 16 >> 2] = $0;
    HEAP32[$1 + 20 >> 2] = $2;
    HEAP32[$1 + 68 >> 2] = jsfReadFile($1 + 16 | 0, 0, 0);
    if (HEAP32[$1 + 68 >> 2]) {
     HEAP32[$1 + 104 >> 2] = jspEvaluateModule(HEAP32[$1 + 68 >> 2]);
     jsvUnLock(HEAP32[$1 + 68 >> 2]);
    }
   }
   if (!HEAP32[$1 + 104 >> 2]) {
    HEAP32[$1 + 64 >> 2] = jswGetBuiltInJSLibrary($1 + 112 | 0);
    if (HEAP32[$1 + 64 >> 2]) {
     HEAP32[$1 + 60 >> 2] = jsvNewNativeString(HEAP32[$1 + 64 >> 2], strlen(HEAP32[$1 + 64 >> 2]));
     if (HEAP32[$1 + 60 >> 2]) {
      HEAP32[$1 + 104 >> 2] = jspEvaluateModule(HEAP32[$1 + 60 >> 2]);
      jsvUnLock(HEAP32[$1 + 60 >> 2]);
     }
    }
   }
   block2 : {
    if (HEAP32[$1 + 104 >> 2]) {
     HEAP32[$1 + 56 >> 2] = jswrap_modules_getModuleList();
     if (HEAP32[$1 + 56 >> 2]) {
      jsvObjectSetChild(HEAP32[$1 + 56 >> 2], $1 + 112 | 0, HEAP32[$1 + 104 >> 2])
     }
     jsvUnLock(HEAP32[$1 + 56 >> 2]);
     break block2;
    }
    HEAP32[$1 >> 2] = HEAP32[$1 + 248 >> 2];
    jsExceptionHere(1, 138405, $1);
   }
   HEAP32[$1 + 252 >> 2] = HEAP32[$1 + 104 >> 2];
  }
  __stack_pointer = $1 + 256 | 0;
  return HEAP32[$1 + 252 >> 2];
 }
 
 function jswrap_modules_getModuleList() {
  return jsvObjectGetChild(HEAP32[92131], 127369, 5);
 }
 
 function jswrap_modules_getCached() {
  var $0 = 0;
  $0 = __stack_pointer - 32 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 24 >> 2] = jsvNewEmptyArray();
  block : {
   if (!HEAP32[$0 + 24 >> 2]) {
    HEAP32[$0 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$0 + 20 >> 2] = jswrap_modules_getModuleList();
   if (!HEAP32[$0 + 20 >> 2]) {
    HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 24 >> 2];
    break block;
   }
   jsvObjectIteratorNew($0 + 16 | 0, HEAP32[$0 + 20 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_1546($0 + 16 | 0) & 1) {
     HEAP32[$0 + 12 >> 2] = jsvObjectIteratorGetKey_1547($0 + 16 | 0);
     HEAP32[$0 + 8 >> 2] = jsvCopyNameOnly(HEAP32[$0 + 12 >> 2], 0, 0);
     jsvArrayPushAndUnLock(HEAP32[$0 + 24 >> 2], HEAP32[$0 + 8 >> 2]);
     jsvUnLock(HEAP32[$0 + 12 >> 2]);
     jsvObjectIteratorNext($0 + 16 | 0);
     continue;
    }
    break;
   };
   jsvObjectIteratorFree_1548($0 + 16 | 0);
   jsvUnLock(HEAP32[$0 + 20 >> 2]);
   HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 24 >> 2];
  }
  __stack_pointer = $0 + 32 | 0;
  return HEAP32[$0 + 28 >> 2];
 }
 
 function jsvObjectIteratorHasValue_1546($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
 }
 
 function jsvObjectIteratorGetKey_1547($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvObjectIteratorFree_1548($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_modules_removeCached($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  block : {
   if (!(jsvIsString(HEAP32[$1 + 12 >> 2]) & 1)) {
    jsExceptionHere(1, 136609, 0);
    break block;
   }
   HEAP32[$1 + 8 >> 2] = jswrap_modules_getModuleList();
   if (!HEAP32[$1 + 8 >> 2]) {
    break block
   }
   HEAP32[$1 + 4 >> 2] = jsvFindChildFromVar(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2], 0);
   block1 : {
    if (!HEAP32[$1 + 4 >> 2]) {
     HEAP32[$1 >> 2] = HEAP32[$1 + 12 >> 2];
     jsExceptionHere(1, 138405, $1);
     break block1;
    }
    jsvRemoveChildAndUnLock(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 4 >> 2]);
   }
   jsvUnLock(HEAP32[$1 + 8 >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_modules_removeAllCached() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = jswrap_modules_getModuleList();
  if (HEAP32[$0 + 12 >> 2]) {
   jsvRemoveAllChildren(HEAP32[$0 + 12 >> 2]);
   jsvUnLock(HEAP32[$0 + 12 >> 2]);
  }
  __stack_pointer = $0 + 16 | 0;
 }
 
 function jswrap_modules_addCached($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  block1 : {
   block : {
    if (jsvIsString(HEAP32[$2 + 28 >> 2]) & 1) {
     if (jsvIsString(HEAP32[$2 + 24 >> 2]) & 1) {
      break block
     }
     if (jsvIsFunction(HEAP32[$2 + 24 >> 2]) & 1) {
      break block
     }
    }
    jsExceptionHere(1, 144391, 0);
    break block1;
   }
   HEAP32[$2 + 20 >> 2] = jswrap_modules_getModuleList();
   if (!HEAP32[$2 + 20 >> 2]) {
    break block1
   }
   HEAP32[$2 + 16 >> 2] = jspEvaluateModule(HEAP32[$2 + 24 >> 2]);
   block2 : {
    if (!HEAP32[$2 + 16 >> 2]) {
     HEAP32[$2 >> 2] = HEAP32[$2 + 28 >> 2];
     jsExceptionHere(1, 128530, $2);
     break block2;
    }
    jsvObjectSetChildVar(HEAP32[$2 + 20 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 16 >> 2]);
    jsvUnLock(HEAP32[$2 + 16 >> 2]);
   }
   jsvUnLock(HEAP32[$2 + 20 >> 2]);
  }
  __stack_pointer = $2 + 32 | 0;
 }
 
 function jswrap_math_sin($0) {
  $0 = +$0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAPF64[$1 + 8 >> 3] = $0;
  $0 = sin(HEAPF64[$1 + 8 >> 3]);
  __stack_pointer = $1 + 16 | 0;
  return +$0;
 }
 
 function jswrap_math_cos($0) {
  $0 = +$0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAPF64[$1 + 8 >> 3] = $0;
  $0 = jswrap_math_sin(HEAPF64[$1 + 8 >> 3] + 1.5707963267948966);
  __stack_pointer = $1 + 16 | 0;
  return +$0;
 }
 
 function jswrap_math_asin($0) {
  $0 = +$0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAPF64[$1 + 8 >> 3] = $0;
  $0 = jswrap_math_atan(HEAPF64[$1 + 8 >> 3] / jswrap_math_sqrt(-HEAPF64[$1 + 8 >> 3] * HEAPF64[$1 + 8 >> 3] + 1.0));
  __stack_pointer = $1 + 16 | 0;
  return +$0;
 }
 
 function jswrap_math_sqrt($0) {
  $0 = +$0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAPF64[$1 + 8 >> 3] = $0;
  block : {
   if (HEAPF64[$1 + 8 >> 3] >= 0.0) {
    $0 = exp(log(HEAPF64[$1 + 8 >> 3]) * .5);
    break block;
   }
   $0 = NaN;
  }
  __stack_pointer = $1 + 16 | 0;
  return +$0;
 }
 
 function jswrap_math_atan($0) {
  $0 = +$0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAPF64[$1 + 8 >> 3] = $0;
  $0 = atan(HEAPF64[$1 + 8 >> 3]);
  __stack_pointer = $1 + 16 | 0;
  return +$0;
 }
 
 function jswrap_math_atan2($0, $1) {
  $0 = +$0;
  $1 = +$1;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAPF64[$2 + 8 >> 3] = $0;
  HEAPF64[$2 >> 3] = $1;
  $0 = atan2(HEAPF64[$2 + 8 >> 3], HEAPF64[$2 >> 3]);
  __stack_pointer = $2 + 16 | 0;
  return +$0;
 }
 
 function jswrap_math_mod($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer - 80 | 0;
  __stack_pointer = $2;
  HEAPF64[$2 + 64 >> 3] = $0;
  HEAPF64[$2 + 56 >> 3] = $1;
  HEAPF64[$2 + 32 >> 3] = HEAPF64[$2 + 64 >> 3];
  $3 = __DOUBLE_BITS_1560(HEAPF64[$2 + 64 >> 3]);
  $5 = $3;
  $4 = i64toi32_i32$HIGH_BITS;
  $3 = $4 & 2147483647;
  block2 : {
   block1 : {
    block : {
     if (($3 | 0) == 2146435072 | $3 >>> 0 > 2146435072) {
      break block
     }
     $4 = __DOUBLE_BITS_1560(HEAPF64[$2 + 56 >> 3]);
     $5 = $4;
     $3 = i64toi32_i32$HIGH_BITS;
     $4 = $3 & 2147483647;
     $3 = $5;
     if (($4 | 0) == 2146435072 & ($3 | 0) != 0 | $4 >>> 0 > 2146435072) {
      break block
     }
     if (HEAPF64[$2 + 56 >> 3] != 0.0) {
      break block1
     }
    }
    HEAPF64[$2 + 72 >> 3] = NaN;
    break block2;
   }
   if (HEAPF64[$2 + 56 >> 3] == Infinity) {
    HEAPF64[$2 + 72 >> 3] = HEAPF64[$2 + 64 >> 3];
    break block2;
   }
   if (HEAPF64[$2 + 32 >> 3] < 0.0) {
    HEAPF64[$2 + 64 >> 3] = -HEAPF64[$2 + 64 >> 3]
   }
   if (HEAPF64[$2 + 56 >> 3] < 0.0) {
    HEAPF64[$2 + 56 >> 3] = -HEAPF64[$2 + 56 >> 3]
   }
   block4 : {
    if (!(!(HEAPF64[$2 + 64 >> 3] <= 1797693134862315708145274.0e284) | (!(HEAPF64[$2 + 56 >> 3] <= 1797693134862315708145274.0e284) | HEAPF64[$2 + 56 >> 3] == 0.0))) {
     while (1) {
      if (HEAPF64[$2 + 64 >> 3] >= HEAPF64[$2 + 56 >> 3]) {
       HEAPF64[$2 + 48 >> 3] = HEAPF64[$2 + 64 >> 3] * .5;
       HEAPF64[$2 + 40 >> 3] = HEAPF64[$2 + 56 >> 3];
       while (1) {
        if (HEAPF64[$2 + 48 >> 3] >= HEAPF64[$2 + 40 >> 3]) {
         $0 = HEAPF64[$2 + 40 >> 3];
         HEAPF64[$2 + 40 >> 3] = $0 + $0;
         continue;
        }
        break;
       };
       HEAPF64[$2 + 64 >> 3] = HEAPF64[$2 + 64 >> 3] - HEAPF64[$2 + 40 >> 3];
       continue;
      }
      break;
     };
     break block4;
    }
    HEAPF64[$2 + 64 >> 3] = 0;
   }
   if (HEAPF64[$2 + 32 >> 3] < 0.0) {
    $0 = -HEAPF64[$2 + 64 >> 3]
   } else {
    $0 = HEAPF64[$2 + 64 >> 3]
   }
   HEAPF64[$2 + 72 >> 3] = $0;
  }
  __stack_pointer = $2 + 80 | 0;
  return HEAPF64[$2 + 72 >> 3];
 }
 
 function __DOUBLE_BITS_1560($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAPF64[$1 + 8 >> 3] = $0;
  HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  return HEAP32[$1 >> 2];
 }
 
 function jswrap_math_pow($0, $1) {
  $0 = +$0;
  $1 = +$1;
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAPF64[$2 + 32 >> 3] = $0;
  HEAPF64[$2 + 24 >> 3] = $1;
  $0 = HEAPF64[$2 + 24 >> 3];
  if (Math_abs($0) < 2147483647.0) {
   $3 = ~~$0
  } else {
   $3 = -2147483648
  }
  HEAP32[$2 + 12 >> 2] = $3;
  block1 : {
   if (!(HEAP32[$2 + 12 >> 2] < 0 | HEAP32[$2 + 12 >> 2] >= 10 | HEAPF64[$2 + 24 >> 3] != +HEAP32[$2 + 12 >> 2])) {
    if (!HEAP32[$2 + 12 >> 2]) {
     HEAPF64[$2 + 40 >> 3] = 1;
     break block1;
    }
    HEAPF64[$2 + 16 >> 3] = HEAPF64[$2 + 32 >> 3];
    while (1) {
     if (HEAP32[$2 + 12 >> 2] > 1) {
      HEAPF64[$2 + 16 >> 3] = HEAPF64[$2 + 16 >> 3] * HEAPF64[$2 + 32 >> 3];
      HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] - 1;
      continue;
     }
     break;
    };
    HEAPF64[$2 + 40 >> 3] = HEAPF64[$2 + 16 >> 3];
    break block1;
   }
   block4 : {
    block2 : {
     if (!(HEAPF64[$2 + 32 >> 3] < 0.0)) {
      break block2
     }
     if (jswrap_math_mod(HEAPF64[$2 + 24 >> 3], 1.0) != 0.0) {
      break block2
     }
     block3 : {
      if (jswrap_math_mod(HEAPF64[$2 + 24 >> 3], 2.0) == 0.0) {
       HEAPF64[$2 + 16 >> 3] = exp(log(-HEAPF64[$2 + 32 >> 3]) * HEAPF64[$2 + 24 >> 3]);
       break block3;
      }
      HEAPF64[$2 + 16 >> 3] = -exp(log(-HEAPF64[$2 + 32 >> 3]) * HEAPF64[$2 + 24 >> 3]);
     }
     break block4;
    }
    block6 : {
     if (!(!(HEAPF64[$2 + 24 >> 3] <= 0.0) & HEAPF64[$2 + 32 >> 3] == 0.0)) {
      HEAPF64[$2 + 16 >> 3] = exp(log(HEAPF64[$2 + 32 >> 3]) * HEAPF64[$2 + 24 >> 3]);
      break block6;
     }
     HEAPF64[$2 + 16 >> 3] = 0;
    }
   }
   HEAPF64[$2 + 40 >> 3] = HEAPF64[$2 + 16 >> 3];
  }
  __stack_pointer = $2 + 48 | 0;
  return +HEAPF64[$2 + 40 >> 3];
 }
 
 function jswrap_math_round($0) {
  $0 = +$0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $1 = __stack_pointer - 48 | 0;
  __stack_pointer = $1;
  HEAPF64[$1 + 32 >> 3] = $0;
  $2 = __DOUBLE_BITS_1560(HEAPF64[$1 + 32 >> 3]);
  $4 = $2;
  $3 = i64toi32_i32$HIGH_BITS;
  $2 = $3 & 2147483647;
  block2 : {
   block1 : {
    if (!(($2 | 0) == 2146435072 | $2 >>> 0 > 2146435072)) {
     if (!(isNegativeZero(HEAPF64[$1 + 32 >> 3]) & 1)) {
      break block1
     }
    }
    HEAP32[$1 + 44 >> 2] = jsvNewFromFloat(HEAPF64[$1 + 32 >> 3]);
    break block2;
   }
   HEAPF64[$1 + 32 >> 3] = HEAPF64[$1 + 32 >> 3] + (HEAPF64[$1 + 32 >> 3] < 0.0 ? -.5 : .5);
   $2 = $1;
   $0 = HEAPF64[$1 + 32 >> 3];
   if (Math_abs($0) < 9223372036854775808.0) {
    if (Math_abs($0) >= 1.0) {
     $3 = ~~($0 > 0.0 ? Math_min(Math_floor($0 * 2.3283064365386963e-10), 4294967295.0) : Math_ceil(($0 - +(~~$0 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0
    } else {
     $3 = 0
    }
    $5 = ~~$0 >>> 0;
   } else {
    $3 = -2147483648
   }
   HEAP32[$2 + 24 >> 2] = $5;
   HEAP32[$2 + 28 >> 2] = $3;
   $3 = HEAP32[$1 + 24 >> 2];
   $2 = HEAP32[$1 + 28 >> 2];
   if (!(!!($3 | $2) | !(HEAPF64[$1 + 32 >> 3] < 0.0))) {
    HEAP32[$1 + 44 >> 2] = jsvNewFromFloat(-0.0);
    break block2;
   }
   $2 = HEAP32[$1 + 24 >> 2];
   $3 = HEAP32[$1 + 28 >> 2];
   HEAP32[$1 + 44 >> 2] = jsvNewFromLongInteger($2, $3);
  }
  __stack_pointer = $1 + 48 | 0;
  return HEAP32[$1 + 44 >> 2];
 }
 
 function isNegativeZero($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $1 = __stack_pointer - 32 | 0;
  HEAPF64[$1 + 24 >> 3] = $0;
  HEAPF64[$1 + 16 >> 3] = -0;
  HEAP32[$1 + 12 >> 2] = $1 + 16;
  HEAP32[$1 + 8 >> 2] = $1 + 24;
  $2 = HEAP32[$1 + 8 >> 2];
  $3 = HEAP32[$2 >> 2];
  $4 = HEAP32[$2 + 4 >> 2];
  $2 = HEAP32[$1 + 12 >> 2];
  $1 = HEAP32[$2 >> 2];
  $5 = HEAP32[$2 + 4 >> 2];
  $2 = $3;
  return ($2 | 0) == ($1 | 0) & ($4 | 0) == ($5 | 0);
 }
 
 function jswrap_math_clip($0, $1, $2) {
  $0 = +$0;
  $1 = +$1;
  $2 = +$2;
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  HEAPF64[$3 + 24 >> 3] = $0;
  HEAPF64[$3 + 16 >> 3] = $1;
  HEAPF64[$3 + 8 >> 3] = $2;
  if (HEAPF64[$3 + 24 >> 3] < HEAPF64[$3 + 16 >> 3]) {
   HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 16 >> 3]
  }
  if (HEAPF64[$3 + 24 >> 3] > HEAPF64[$3 + 8 >> 3]) {
   HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 8 >> 3]
  }
  return +HEAPF64[$3 + 24 >> 3];
 }
 
 function jswrap_math_minmax($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 44 >> 2] = $0;
  HEAP8[$2 + 43 | 0] = $1 & 1;
  HEAPF64[$2 + 32 >> 3] = HEAP8[$2 + 43 | 0] & 1 ? -Infinity : Infinity;
  jsvObjectIteratorNew($2 + 28 | 0, HEAP32[$2 + 44 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_1566($2 + 28 | 0) & 1) {
    HEAPF64[$2 + 16 >> 3] = jsvGetFloatAndUnLock(jsvObjectIteratorGetValue_1567($2 + 28 | 0));
    block1 : {
     block : {
      if (HEAP8[$2 + 43 | 0] & 1 & HEAPF64[$2 + 16 >> 3] > HEAPF64[$2 + 32 >> 3] | !(HEAP8[$2 + 43 | 0] & 1) & HEAPF64[$2 + 16 >> 3] < HEAPF64[$2 + 32 >> 3]) {
       break block
      }
      $1 = __DOUBLE_BITS_1560(HEAPF64[$2 + 16 >> 3]);
      $0 = $1;
      $3 = i64toi32_i32$HIGH_BITS;
      $1 = $3 & 2147483647;
      $3 = $0;
      if (($1 | 0) == 2146435072 & ($3 | 0) != 0 | $1 >>> 0 > 2146435072) {
       break block
      }
      break block1;
     }
     HEAPF64[$2 + 32 >> 3] = HEAPF64[$2 + 16 >> 3];
    }
    jsvObjectIteratorNext($2 + 28 | 0);
    continue;
   }
   break;
  };
  jsvObjectIteratorFree_1568($2 + 28 | 0);
  __stack_pointer = $2 + 48 | 0;
  return HEAPF64[$2 + 32 >> 3];
 }
 
 function jsvObjectIteratorHasValue_1566($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
 }
 
 function jsvObjectIteratorGetValue_1567($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvObjectIteratorFree_1568($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_math_sign($0) {
  $0 = +$0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAPF64[$1 >> 3] = $0;
  block1 : {
   block : {
    if (HEAPF64[$1 >> 3] != 0.0) {
     if (!(isNegativeZero(HEAPF64[$1 >> 3]) & 1)) {
      break block
     }
    }
    HEAP32[$1 + 12 >> 2] = 0;
    break block1;
   }
   HEAP32[$1 + 12 >> 2] = HEAPF64[$1 >> 3] > 0.0 ? 1 : -1;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jswrap_espruino_getTemperature() {
  return +jshReadTemperature();
 }
 
 function nativeCallGetCType() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  block : {
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 192) {
    jslMatch(192);
    HEAP32[$0 + 12 >> 2] = 0;
    break block;
   }
   if (HEAPU16[HEAP32[50123] + 2 >> 1] == 128) {
    HEAP32[$0 + 8 >> 2] = -1;
    HEAP32[$0 + 4 >> 2] = jslGetTokenValueAsString();
    if (!strcmp(HEAP32[$0 + 4 >> 2], 124693)) {
     HEAP32[$0 + 8 >> 2] = 4
    }
    if (!strcmp(HEAP32[$0 + 4 >> 2], 137692)) {
     HEAP32[$0 + 8 >> 2] = 7
    }
    if (!strcmp(HEAP32[$0 + 4 >> 2], 135661)) {
     HEAP32[$0 + 8 >> 2] = 3
    }
    if (!strcmp(HEAP32[$0 + 4 >> 2], 135450)) {
     HEAP32[$0 + 8 >> 2] = 5
    }
    if (!strcmp(HEAP32[$0 + 4 >> 2], 128389)) {
     HEAP32[$0 + 8 >> 2] = 1
    }
    if (!strcmp(HEAP32[$0 + 4 >> 2], 125112)) {
     HEAP32[$0 + 8 >> 2] = 6
    }
    jslMatch(128);
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
    break block;
   }
   HEAP32[$0 + 12 >> 2] = -1;
  }
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function jswrap_espruino_nativeCall($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 192 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 184 >> 2] = $0;
  HEAP32[$3 + 180 >> 2] = $1;
  HEAP32[$3 + 176 >> 2] = $2;
  HEAP32[$3 + 172 >> 2] = 0;
  block3 : {
   if (!(jsvIsUndefined(HEAP32[$3 + 180 >> 2]) & 1)) {
    block4 : {
     if (jsvIsString(HEAP32[$3 + 180 >> 2]) & 1) {
      HEAP32[$3 + 36 >> 2] = jslSetLex($3 + 40 | 0);
      jslInit(HEAP32[$3 + 180 >> 2]);
      HEAP8[$3 + 31 | 0] = 1;
      HEAP32[$3 + 24 >> 2] = 0;
      HEAP32[$3 + 32 >> 2] = nativeCallGetCType();
      block : {
       if (HEAP32[$3 + 32 >> 2] >= 0) {
        $1 = HEAP32[$3 + 32 >> 2];
        $0 = HEAP32[$3 + 24 >> 2];
        HEAP32[$3 + 24 >> 2] = $0 + 1;
        HEAP32[$3 + 172 >> 2] = HEAP32[$3 + 172 >> 2] | $1 << Math_imul($0, 3);
        break block;
       }
       HEAP8[$3 + 31 | 0] = 0;
      }
      if (HEAP8[$3 + 31 | 0] & 1) {
       HEAP8[$3 + 31 | 0] = jslMatch(40) & 1
      }
      while (1) {
       $0 = 0;
       block1 : {
        if (!(HEAP8[$3 + 31 | 0] & 1)) {
         break block1
        }
        $0 = 0;
        if (!HEAPU16[$3 + 42 >> 1]) {
         break block1
        }
        $0 = HEAPU16[$3 + 42 >> 1] != 41;
       }
       if ($0) {
        HEAP32[$3 + 32 >> 2] = nativeCallGetCType();
        block2 : {
         if (HEAP32[$3 + 32 >> 2] >= 0) {
          $1 = HEAP32[$3 + 32 >> 2];
          $0 = HEAP32[$3 + 24 >> 2];
          HEAP32[$3 + 24 >> 2] = $0 + 1;
          HEAP32[$3 + 172 >> 2] = HEAP32[$3 + 172 >> 2] | $1 << Math_imul($0, 3);
          if (HEAPU16[$3 + 42 >> 1] != 41) {
           HEAP8[$3 + 31 | 0] = jslMatch(44) & 1
          }
          break block2;
         }
         HEAP8[$3 + 31 | 0] = 0;
        }
        continue;
       }
       break;
      };
      if (HEAP8[$3 + 31 | 0] & 1) {
       HEAP8[$3 + 31 | 0] = jslMatch(41) & 1
      }
      jslKill();
      jslSetLex(HEAP32[$3 + 36 >> 2]);
      if (HEAP32[$3 + 172 >> 2] & -65536) {
       HEAP8[$3 + 31 | 0] = 0
      }
      if (!(HEAP8[$3 + 31 | 0] & 1)) {
       HEAP32[$3 >> 2] = HEAP32[$3 + 24 >> 2];
       jsExceptionHere(1, 139549, $3);
       HEAP32[$3 + 188 >> 2] = 0;
       break block3;
      }
      break block4;
     }
     jsExceptionHere(1, 137461, 0);
     HEAP32[$3 + 188 >> 2] = 0;
     break block3;
    }
   }
   HEAP32[$3 + 20 >> 2] = jsvNewNativeFunction(HEAP32[$3 + 184 >> 2], HEAP32[$3 + 172 >> 2] & 65535);
   if (HEAP32[$3 + 176 >> 2]) {
    HEAP32[$3 + 16 >> 2] = jsvAsFlatString(HEAP32[$3 + 176 >> 2]);
    if (!HEAP32[$3 + 16 >> 2]) {
     jsvUnLock(HEAP32[$3 + 20 >> 2]);
     HEAP32[$3 + 188 >> 2] = 0;
     break block3;
    }
    jsvAddNamedChildAndUnLock(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2], 138400);
   }
   HEAP32[$3 + 188 >> 2] = HEAP32[$3 + 20 >> 2];
  }
  __stack_pointer = $3 + 192 | 0;
  return HEAP32[$3 + 188 >> 2];
 }
 
 function jswrap_espruino_clip($0, $1, $2) {
  $0 = +$0;
  $1 = +$1;
  $2 = +$2;
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  HEAPF64[$3 + 24 >> 3] = $0;
  HEAPF64[$3 + 16 >> 3] = $1;
  HEAPF64[$3 + 8 >> 3] = $2;
  if (HEAPF64[$3 + 24 >> 3] < HEAPF64[$3 + 16 >> 3]) {
   HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 16 >> 3]
  }
  if (HEAPF64[$3 + 24 >> 3] > HEAPF64[$3 + 8 >> 3]) {
   HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 8 >> 3]
  }
  return +HEAPF64[$3 + 24 >> 3];
 }
 
 function jswrap_espruino_sum($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0.0;
  $1 = __stack_pointer - 96 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 84 >> 2] = $0;
  block1 : {
   block : {
    if (jsvIsString(HEAP32[$1 + 84 >> 2]) & 1) {
     break block
    }
    if (jsvIsArray(HEAP32[$1 + 84 >> 2]) & 1) {
     break block
    }
    if (jsvIsArrayBuffer(HEAP32[$1 + 84 >> 2]) & 1) {
     break block
    }
    HEAP32[$1 >> 2] = HEAP32[$1 + 84 >> 2];
    jsExceptionHere(1, 125138, $1);
    HEAPF64[$1 + 88 >> 3] = NaN;
    break block1;
   }
   HEAPF64[$1 + 72 >> 3] = 0;
   jsvIteratorNew($1 + 12 | 0, HEAP32[$1 + 84 >> 2], 0);
   while (1) {
    if (jsvIteratorHasElement($1 + 12 | 0) & 1) {
     $2 = jsvIteratorGetFloatValue($1 + 12 | 0);
     HEAPF64[$1 + 72 >> 3] = HEAPF64[$1 + 72 >> 3] + $2;
     jsvIteratorNext($1 + 12 | 0);
     continue;
    }
    break;
   };
   jsvIteratorFree($1 + 12 | 0);
   HEAPF64[$1 + 88 >> 3] = HEAPF64[$1 + 72 >> 3];
  }
  __stack_pointer = $1 + 96 | 0;
  return +HEAPF64[$1 + 88 >> 3];
 }
 
 function jswrap_espruino_variance($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0;
  $2 = __stack_pointer - 112 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 100 >> 2] = $0;
  HEAPF64[$2 + 88 >> 3] = $1;
  block : {
   if (!(jsvIsIterable(HEAP32[$2 + 100 >> 2]) & 1)) {
    HEAP32[$2 >> 2] = HEAP32[$2 + 100 >> 2];
    jsExceptionHere(1, 125346, $2);
    HEAPF64[$2 + 104 >> 3] = NaN;
    break block;
   }
   HEAPF64[$2 + 80 >> 3] = 0;
   jsvIteratorNew($2 + 20 | 0, HEAP32[$2 + 100 >> 2], 1);
   while (1) {
    if (jsvIteratorHasElement($2 + 20 | 0) & 1) {
     HEAPF64[$2 + 8 >> 3] = jsvIteratorGetFloatValue($2 + 20 | 0);
     HEAPF64[$2 + 8 >> 3] = HEAPF64[$2 + 8 >> 3] - HEAPF64[$2 + 88 >> 3];
     HEAPF64[$2 + 80 >> 3] = HEAPF64[$2 + 8 >> 3] * HEAPF64[$2 + 8 >> 3] + HEAPF64[$2 + 80 >> 3];
     jsvIteratorNext($2 + 20 | 0);
     continue;
    }
    break;
   };
   jsvIteratorFree($2 + 20 | 0);
   HEAPF64[$2 + 104 >> 3] = HEAPF64[$2 + 80 >> 3];
  }
  __stack_pointer = $2 + 112 | 0;
  return +HEAPF64[$2 + 104 >> 3];
 }
 
 function jswrap_espruino_convolve($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 176 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 164 >> 2] = $0;
  HEAP32[$3 + 160 >> 2] = $1;
  HEAP32[$3 + 156 >> 2] = $2;
  block1 : {
   block : {
    if (jsvIsIterable(HEAP32[$3 + 164 >> 2]) & 1) {
     if (jsvIsIterable(HEAP32[$3 + 160 >> 2]) & 1) {
      break block
     }
    }
    $0 = HEAP32[$3 + 164 >> 2];
    HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 160 >> 2];
    HEAP32[$3 >> 2] = $0;
    jsExceptionHere(1, 126543, $3);
    HEAPF64[$3 + 168 >> 3] = NaN;
    break block1;
   }
   HEAPF64[$3 + 144 >> 3] = 0;
   jsvIteratorNew($3 + 84 | 0, HEAP32[$3 + 164 >> 2], 1);
   jsvIteratorNew($3 + 24 | 0, HEAP32[$3 + 160 >> 2], 1);
   HEAP32[$3 + 20 >> 2] = jsvGetLength(HEAP32[$3 + 160 >> 2]);
   HEAP32[$3 + 156 >> 2] = HEAP32[$3 + 156 >> 2] % HEAP32[$3 + 20 >> 2];
   if (HEAP32[$3 + 156 >> 2] < 0) {
    HEAP32[$3 + 156 >> 2] = HEAP32[$3 + 20 >> 2] + HEAP32[$3 + 156 >> 2]
   }
   while (1) {
    $0 = HEAP32[$3 + 156 >> 2];
    HEAP32[$3 + 156 >> 2] = $0 - 1;
    if (($0 | 0) > 0) {
     jsvIteratorNext($3 + 24 | 0);
     continue;
    }
    break;
   };
   while (1) {
    if (jsvIteratorHasElement($3 + 84 | 0) & 1) {
     HEAPF64[$3 + 144 >> 3] = jsvIteratorGetFloatValue($3 + 84 | 0) * jsvIteratorGetFloatValue($3 + 24 | 0) + HEAPF64[$3 + 144 >> 3];
     jsvIteratorNext($3 + 84 | 0);
     jsvIteratorNext($3 + 24 | 0);
     if (!(jsvIteratorHasElement($3 + 24 | 0) & 1)) {
      jsvIteratorFree($3 + 24 | 0);
      jsvIteratorNew($3 + 24 | 0, HEAP32[$3 + 160 >> 2], 1);
     }
     continue;
    }
    break;
   };
   jsvIteratorFree($3 + 84 | 0);
   jsvIteratorFree($3 + 24 | 0);
   HEAPF64[$3 + 168 >> 3] = HEAPF64[$3 + 144 >> 3];
  }
  __stack_pointer = $3 + 176 | 0;
  return +HEAPF64[$3 + 168 >> 3];
 }
 
 function FFT($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 128 | 0;
  __stack_pointer = $4;
  HEAP16[$4 + 126 >> 1] = $0;
  HEAP32[$4 + 120 >> 2] = $1;
  HEAP32[$4 + 116 >> 2] = $2;
  HEAP32[$4 + 112 >> 2] = $3;
  HEAP32[$4 + 108 >> 2] = 1;
  HEAP32[$4 + 104 >> 2] = 0;
  while (1) {
   if (HEAP32[$4 + 104 >> 2] < HEAP32[$4 + 120 >> 2]) {
    HEAP32[$4 + 108 >> 2] = HEAP32[$4 + 108 >> 2] << 1;
    HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 104 >> 2] + 1;
    continue;
   }
   break;
  };
  HEAP32[$4 + 88 >> 2] = HEAP32[$4 + 108 >> 2] >> 1;
  HEAP32[$4 + 96 >> 2] = 0;
  HEAP32[$4 + 104 >> 2] = 0;
  while (1) {
   if (HEAP32[$4 + 104 >> 2] < (HEAP32[$4 + 108 >> 2] - 1 | 0)) {
    if (HEAP32[$4 + 104 >> 2] < HEAP32[$4 + 96 >> 2]) {
     HEAPF64[$4 + 48 >> 3] = HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) >> 3];
     HEAPF64[$4 + 40 >> 3] = HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) >> 3];
     HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) >> 3] = HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 96 >> 2] << 3) >> 3];
     HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) >> 3] = HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 96 >> 2] << 3) >> 3];
     HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 96 >> 2] << 3) >> 3] = HEAPF64[$4 + 48 >> 3];
     HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 96 >> 2] << 3) >> 3] = HEAPF64[$4 + 40 >> 3];
    }
    HEAP32[$4 + 92 >> 2] = HEAP32[$4 + 88 >> 2];
    while (1) {
     if (HEAP32[$4 + 92 >> 2] <= HEAP32[$4 + 96 >> 2]) {
      HEAP32[$4 + 96 >> 2] = HEAP32[$4 + 96 >> 2] - HEAP32[$4 + 92 >> 2];
      HEAP32[$4 + 92 >> 2] = HEAP32[$4 + 92 >> 2] >> 1;
      continue;
     }
     break;
    };
    HEAP32[$4 + 96 >> 2] = HEAP32[$4 + 92 >> 2] + HEAP32[$4 + 96 >> 2];
    HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 104 >> 2] + 1;
    continue;
   }
   break;
  };
  HEAPF64[$4 + 64 >> 3] = -1;
  HEAPF64[$4 + 56 >> 3] = 0;
  HEAP32[$4 + 76 >> 2] = 1;
  HEAP32[$4 + 84 >> 2] = 0;
  while (1) {
   if (HEAP32[$4 + 84 >> 2] < HEAP32[$4 + 120 >> 2]) {
    HEAP32[$4 + 80 >> 2] = HEAP32[$4 + 76 >> 2];
    HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 76 >> 2] << 1;
    HEAPF64[$4 + 16 >> 3] = 1;
    HEAPF64[$4 + 8 >> 3] = 0;
    HEAP32[$4 + 96 >> 2] = 0;
    while (1) {
     if (HEAP32[$4 + 96 >> 2] < HEAP32[$4 + 80 >> 2]) {
      HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 96 >> 2];
      while (1) {
       if (HEAP32[$4 + 104 >> 2] < HEAP32[$4 + 108 >> 2]) {
        HEAP32[$4 + 100 >> 2] = HEAP32[$4 + 104 >> 2] + HEAP32[$4 + 80 >> 2];
        HEAPF64[$4 + 32 >> 3] = HEAPF64[$4 + 16 >> 3] * HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 100 >> 2] << 3) >> 3] - HEAPF64[$4 + 8 >> 3] * HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 100 >> 2] << 3) >> 3];
        HEAPF64[$4 + 24 >> 3] = HEAPF64[$4 + 16 >> 3] * HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 100 >> 2] << 3) >> 3] + HEAPF64[$4 + 8 >> 3] * HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 100 >> 2] << 3) >> 3];
        HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 100 >> 2] << 3) >> 3] = HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) >> 3] - HEAPF64[$4 + 32 >> 3];
        HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 100 >> 2] << 3) >> 3] = HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) >> 3] - HEAPF64[$4 + 24 >> 3];
        $0 = HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) | 0;
        HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] + HEAPF64[$4 + 32 >> 3];
        $0 = HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) | 0;
        HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] + HEAPF64[$4 + 24 >> 3];
        HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 76 >> 2] + HEAP32[$4 + 104 >> 2];
        continue;
       }
       break;
      };
      HEAPF64[$4 >> 3] = HEAPF64[$4 + 16 >> 3] * HEAPF64[$4 + 64 >> 3] - HEAPF64[$4 + 8 >> 3] * HEAPF64[$4 + 56 >> 3];
      HEAPF64[$4 + 8 >> 3] = HEAPF64[$4 + 16 >> 3] * HEAPF64[$4 + 56 >> 3] + HEAPF64[$4 + 8 >> 3] * HEAPF64[$4 + 64 >> 3];
      HEAPF64[$4 + 16 >> 3] = HEAPF64[$4 >> 3];
      HEAP32[$4 + 96 >> 2] = HEAP32[$4 + 96 >> 2] + 1;
      continue;
     }
     break;
    };
    HEAPF64[$4 + 56 >> 3] = jswrap_math_sqrt((1.0 - HEAPF64[$4 + 64 >> 3]) * .5);
    if (HEAPU16[$4 + 126 >> 1] == 1) {
     HEAPF64[$4 + 56 >> 3] = -HEAPF64[$4 + 56 >> 3]
    }
    HEAPF64[$4 + 64 >> 3] = jswrap_math_sqrt((HEAPF64[$4 + 64 >> 3] + 1.0) * .5);
    HEAP32[$4 + 84 >> 2] = HEAP32[$4 + 84 >> 2] + 1;
    continue;
   }
   break;
  };
  if (HEAPU16[$4 + 126 >> 1] == 1) {
   HEAP32[$4 + 104 >> 2] = 0;
   while (1) {
    if (HEAP32[$4 + 104 >> 2] < HEAP32[$4 + 108 >> 2]) {
     $0 = HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) | 0;
     HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] / +HEAP32[$4 + 108 >> 2];
     $0 = HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) | 0;
     HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] / +HEAP32[$4 + 108 >> 2];
     HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 104 >> 2] + 1;
     continue;
    }
    break;
   };
  }
  __stack_pointer = $4 + 128 | 0;
  return 1;
 }
 
 function _jswrap_espruino_FFT_getData($0, $1, $2) {
  var $3 = 0, $4 = 0.0;
  $3 = __stack_pointer - 80 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 76 >> 2] = $0;
  HEAP32[$3 + 72 >> 2] = $1;
  HEAP32[$3 + 68 >> 2] = $2;
  HEAP32[$3 + 4 >> 2] = 0;
  if (jsvIsIterable(HEAP32[$3 + 72 >> 2]) & 1) {
   jsvIteratorNew($3 + 8 | 0, HEAP32[$3 + 72 >> 2], 1);
   while (1) {
    $0 = 0;
    if (HEAPU32[$3 + 4 >> 2] < HEAPU32[$3 + 68 >> 2]) {
     $0 = jsvIteratorHasElement($3 + 8 | 0)
    }
    if ($0 & 1) {
     $4 = jsvIteratorGetFloatValue($3 + 8 | 0);
     $1 = HEAP32[$3 + 76 >> 2];
     $0 = HEAP32[$3 + 4 >> 2];
     HEAP32[$3 + 4 >> 2] = $0 + 1;
     HEAPF64[($0 << 3) + $1 >> 3] = $4;
     jsvIteratorNext($3 + 8 | 0);
     continue;
    }
    break;
   };
   jsvIteratorFree($3 + 8 | 0);
  }
  while (1) {
   if (HEAPU32[$3 + 4 >> 2] < HEAPU32[$3 + 68 >> 2]) {
    $1 = HEAP32[$3 + 76 >> 2];
    $0 = HEAP32[$3 + 4 >> 2];
    HEAP32[$3 + 4 >> 2] = $0 + 1;
    HEAPF64[($0 << 3) + $1 >> 3] = 0;
    continue;
   }
   break;
  };
  __stack_pointer = $3 + 80 | 0;
 }
 
 function _jswrap_espruino_FFT_setData($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 96 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 92 >> 2] = $0;
  HEAP32[$4 + 88 >> 2] = $1;
  HEAP32[$4 + 84 >> 2] = $2;
  HEAP32[$4 + 80 >> 2] = $3;
  jsvIteratorNew($4 + 20 | 0, HEAP32[$4 + 92 >> 2], 1);
  HEAP32[$4 + 16 >> 2] = 0;
  while (1) {
   $0 = 0;
   if (HEAPU32[$4 + 16 >> 2] < HEAPU32[$4 + 80 >> 2]) {
    $0 = jsvIteratorHasElement($4 + 20 | 0)
   }
   if ($0 & 1) {
    block : {
     if (HEAP32[$4 + 84 >> 2]) {
      HEAPF64[$4 + 8 >> 3] = jswrap_math_sqrt(HEAPF64[HEAP32[$4 + 88 >> 2] + (HEAP32[$4 + 16 >> 2] << 3) >> 3] * HEAPF64[HEAP32[$4 + 88 >> 2] + (HEAP32[$4 + 16 >> 2] << 3) >> 3] + HEAPF64[HEAP32[$4 + 84 >> 2] + (HEAP32[$4 + 16 >> 2] << 3) >> 3] * HEAPF64[HEAP32[$4 + 84 >> 2] + (HEAP32[$4 + 16 >> 2] << 3) >> 3]);
      break block;
     }
     HEAPF64[$4 + 8 >> 3] = HEAPF64[HEAP32[$4 + 88 >> 2] + (HEAP32[$4 + 16 >> 2] << 3) >> 3];
    }
    jsvUnLock(jsvIteratorSetValue($4 + 20 | 0, jsvNewFromFloat(HEAPF64[$4 + 8 >> 3])));
    HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 16 >> 2] + 1;
    jsvIteratorNext($4 + 20 | 0);
    continue;
   }
   break;
  };
  jsvIteratorFree($4 + 20 | 0);
  __stack_pointer = $4 + 96 | 0;
 }
 
 function jswrap_espruino_FFT($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $4 = __stack_pointer - 48 | 0;
  $3 = $4;
  __stack_pointer = $3;
  HEAP32[$3 + 44 >> 2] = $0;
  HEAP32[$3 + 40 >> 2] = $1;
  HEAP8[$3 + 39 | 0] = $2;
  block1 : {
   block : {
    if (jsvIsIterable(HEAP32[$3 + 44 >> 2]) & 1) {
     if (jsvIsUndefined(HEAP32[$3 + 40 >> 2]) & 1) {
      break block
     }
     if (jsvIsIterable(HEAP32[$3 + 40 >> 2]) & 1) {
      break block
     }
    }
    $0 = HEAP32[$3 + 44 >> 2];
    HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 40 >> 2];
    HEAP32[$3 >> 2] = $0;
    jsExceptionHere(1, 126601, $3);
    break block1;
   }
   HEAP32[$3 + 32 >> 2] = jsvGetLength(HEAP32[$3 + 44 >> 2]);
   HEAP32[$3 + 28 >> 2] = 1;
   HEAP32[$3 + 24 >> 2] = 0;
   while (1) {
    if (HEAPU32[$3 + 28 >> 2] < HEAPU32[$3 + 32 >> 2]) {
     HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 28 >> 2] << 1;
     HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] + 1;
     continue;
    }
    break;
   };
   if (jsuGetFreeStack() >>> 0 < (HEAP32[$3 + 28 >> 2] << 4) + 256 >>> 0) {
    jsExceptionHere(1, 140833, 0);
    break block1;
   }
   $4 = $4 - (HEAP32[$3 + 28 >> 2] << 4) | 0;
   __stack_pointer = $4;
   HEAP32[$3 + 20 >> 2] = $4;
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 20 >> 2] + (HEAP32[$3 + 28 >> 2] << 3);
   _jswrap_espruino_FFT_getData(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 44 >> 2], HEAP32[$3 + 28 >> 2]);
   _jswrap_espruino_FFT_getData(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 40 >> 2], HEAP32[$3 + 28 >> 2]);
   FFT(HEAP8[$3 + 39 | 0] & 1 ? -1 : 1, HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2]);
   HEAP8[$3 + 15 | 0] = jsvIsIterable(HEAP32[$3 + 40 >> 2]) & 1;
   _jswrap_espruino_FFT_setData(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 20 >> 2], HEAP8[$3 + 15 | 0] & 1 ? 0 : HEAP32[$3 + 16 >> 2], HEAP32[$3 + 28 >> 2]);
   if (!(HEAP8[$3 + 15 | 0] & 1)) {
    break block1
   }
   _jswrap_espruino_FFT_setData(HEAP32[$3 + 40 >> 2], HEAP32[$3 + 16 >> 2], 0, HEAP32[$3 + 28 >> 2]);
  }
  __stack_pointer = $3 + 48 | 0;
 }
 
 function jswrap_espruino_enableWatchdog($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAPF64[$2 + 24 >> 3] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  block1 : {
   block : {
    if (HEAPF64[$2 + 24 >> 3] < 0.0) {
     break block
    }
    $3 = __DOUBLE_BITS_1583(HEAPF64[$2 + 24 >> 3]);
    $1 = $3;
    $4 = i64toi32_i32$HIGH_BITS;
    $3 = $4 & 2147483647;
    $4 = $1;
    if (($3 | 0) == 2146435072 & ($4 | 0) != 0 | $3 >>> 0 > 2146435072) {
     break block
    }
    break block1;
   }
   HEAPF64[$2 + 24 >> 3] = 1;
  }
  block3 : {
   block2 : {
    if (!(jsvIsUndefined(HEAP32[$2 + 20 >> 2]) & 1)) {
     if (!(jsvGetBool(HEAP32[$2 + 20 >> 2]) & 1)) {
      break block2
     }
    }
    HEAP16[184294] = HEAPU16[184294] | 512;
    break block3;
   }
   HEAP16[184294] = HEAPU16[184294] & -513;
  }
  jshEnableWatchDog(HEAPF64[$2 + 24 >> 3]);
  __stack_pointer = $2 + 32 | 0;
 }
 
 function __DOUBLE_BITS_1583($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAPF64[$1 + 8 >> 3] = $0;
  HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  return HEAP32[$1 >> 2];
 }
 
 function jswrap_espruino_kickWatchdog() {
  jshKickWatchDog();
 }
 
 function jswrap_espruino_getErrorFlagArray($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 11 | 0] = $0;
  HEAP32[$1 + 4 >> 2] = jsvNewEmptyArray();
  block : {
   if (!HEAP32[$1 + 4 >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   if (HEAP8[$1 + 11 | 0] & 1) {
    jsvArrayPushString(HEAP32[$1 + 4 >> 2], 141031)
   }
   if (HEAPU8[$1 + 11 | 0] & 2) {
    jsvArrayPushString(HEAP32[$1 + 4 >> 2], 141019)
   }
   if (HEAPU8[$1 + 11 | 0] & 4) {
    jsvArrayPushString(HEAP32[$1 + 4 >> 2], 141090)
   }
   if (HEAPU8[$1 + 11 | 0] & 8) {
    jsvArrayPushString(HEAP32[$1 + 4 >> 2], 140578)
   }
   if (HEAPU8[$1 + 11 | 0] & 16) {
    jsvArrayPushString(HEAP32[$1 + 4 >> 2], 140596)
   }
   if (HEAPU8[$1 + 11 | 0] & 32) {
    jsvArrayPushString(HEAP32[$1 + 4 >> 2], 140566)
   }
   if (HEAPU8[$1 + 11 | 0] & 64) {
    jsvArrayPushString(HEAP32[$1 + 4 >> 2], 140719)
   }
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jswrap_espruino_getErrorFlags() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP8[$0 + 15 | 0] = HEAPU8[368518];
  HEAP8[368518] = 0;
  $1 = jswrap_espruino_getErrorFlagArray(HEAPU8[$0 + 15 | 0]);
  __stack_pointer = $0 + 16 | 0;
  return $1 | 0;
 }
 
 function jswrap_espruino_toArrayBuffer($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!(jsvIsString(HEAP32[$1 + 8 >> 2]) & 1)) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvNewArrayBufferFromString(HEAP32[$1 + 8 >> 2], 0);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function _jswrap_espruino_toString_char($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  jsvStringIteratorSetCharAndNext(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2] << 24 >> 24);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jswrap_espruino_toStringX($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer + -64 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 56 >> 2] = $0;
  HEAP8[$2 + 55 | 0] = $1;
  block2 : {
   if ((jsvGetArrayLength(HEAP32[$2 + 56 >> 2]) | 0) == 1) {
    HEAP32[$2 + 48 >> 2] = jsvGetArrayItem(HEAP32[$2 + 56 >> 2], 0);
    block1 : {
     if (!(jsvIsString(HEAP32[$2 + 48 >> 2]) & 1 & !(HEAP8[$2 + 55 | 0] & 1))) {
      if (!(jsvIsFlatString(HEAP32[$2 + 48 >> 2]) & 1)) {
       break block1
      }
     }
     HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 48 >> 2];
     break block2;
    }
    block3 : {
     if (!(jsvIsArrayBuffer(HEAP32[$2 + 48 >> 2]) & 1) | (HEAPU8[HEAP32[$2 + 48 >> 2] + 5 | 0] & 15) != 1) {
      break block3
     }
     $0 = HEAP32[$2 + 48 >> 2];
     if (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8) {
      break block3
     }
     HEAP32[$2 + 44 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$2 + 48 >> 2], 0);
     block5 : {
      if (!(HEAP8[$2 + 55 | 0] & 1 ? 0 : HEAP32[$2 + 44 >> 2])) {
       if (!(jsvIsFlatString(HEAP32[$2 + 44 >> 2]) & 1)) {
        break block5
       }
      }
      $1 = jsvGetLength(HEAP32[$2 + 44 >> 2]);
      $0 = HEAP32[$2 + 48 >> 2];
      if (($1 | 0) != (HEAPU8[$0 + 4 | 0] << 16 | (HEAPU8[$0 + 2 | 0] | HEAPU8[$0 + 3 | 0] << 8))) {
       break block5
      }
      jsvUnLock(HEAP32[$2 + 48 >> 2]);
      HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 44 >> 2];
      break block2;
     }
     jsvUnLock(HEAP32[$2 + 44 >> 2]);
    }
    jsvUnLock(HEAP32[$2 + 48 >> 2]);
   }
   HEAP32[$2 + 40 >> 2] = jsvIterateCallbackCount(HEAP32[$2 + 56 >> 2]);
   block6 : {
    if (HEAP8[$2 + 55 | 0] & 1) {
     $0 = jsvNewFlatStringOfLength(HEAP32[$2 + 40 >> 2]);
     break block6;
    }
    $0 = jsvNewStringOfLength(HEAP32[$2 + 40 >> 2], 0);
   }
   HEAP32[$2 + 36 >> 2] = $0;
   if (!(HEAP32[$2 + 36 >> 2] | !(HEAP8[$2 + 55 | 0] & 1))) {
    jsvDefragment();
    HEAP32[$2 + 36 >> 2] = jsvNewFlatStringOfLength(HEAP32[$2 + 40 >> 2]);
   }
   if (!HEAP32[$2 + 36 >> 2]) {
    HEAP32[$2 + 60 >> 2] = 0;
    break block2;
   }
   jsvStringIteratorNew($2, HEAP32[$2 + 36 >> 2], 0);
   jsvIterateCallback(HEAP32[$2 + 56 >> 2], 622, $2);
   jsvStringIteratorFree_1590($2);
   HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 36 >> 2];
  }
  __stack_pointer = $2 - -64 | 0;
  return HEAP32[$2 + 60 >> 2];
 }
 
 function jsvStringIteratorFree_1590($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_espruino_toString($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jswrap_espruino_toStringX(HEAP32[$1 + 12 >> 2], 0);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function jswrap_espruino_toFlatString($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jswrap_espruino_toStringX(HEAP32[$1 + 12 >> 2], 1);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function jswrap_espruino_asUTF8($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsExceptionHere(1, 138444, 0);
  __stack_pointer = $1 + 16 | 0;
  return 0;
 }
 
 function jswrap_espruino_fromUTF8($0) {
  $0 = $0 | 0;
  HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
  return 0;
 }
 
 function jswrap_espruino_isUTF8($0) {
  $0 = $0 | 0;
  HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
  return 0;
 }
 
 function _jswrap_espruino_toUint8Array_char($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  jsvArrayBufferIteratorSetByteValue(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2] << 24 >> 24);
  jsvArrayBufferIteratorNext(HEAP32[$2 + 8 >> 2]);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jswrap_espruino_toUint8Array($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 80 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 72 >> 2] = $0;
  HEAP32[$1 + 68 >> 2] = jsvNewTypedArray(1, jsvIterateCallbackCount(HEAP32[$1 + 72 >> 2]));
  block : {
   if (!HEAP32[$1 + 68 >> 2]) {
    HEAP32[$1 + 76 >> 2] = 0;
    break block;
   }
   jsvArrayBufferIteratorNew($1 + 12 | 0, HEAP32[$1 + 68 >> 2], 0);
   jsvIterateCallback(HEAP32[$1 + 72 >> 2], 623, $1 + 12 | 0);
   jsvArrayBufferIteratorFree($1 + 12 | 0);
   HEAP32[$1 + 76 >> 2] = HEAP32[$1 + 68 >> 2];
  }
  __stack_pointer = $1 + 80 | 0;
  return HEAP32[$1 + 76 >> 2];
 }
 
 function jswrap_espruino_toJS($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = 8896;
  HEAP32[$1 + 4 >> 2] = jsvNewFromEmptyString_1599();
  if (HEAP32[$1 + 4 >> 2]) {
   jsfGetJSON(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 4 >> 2], HEAP32[$1 + 8 >> 2])
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 4 >> 2];
 }
 
 function jsvNewFromEmptyString_1599() {
  return jsvNewWithFlags(28);
 }
 
 function jswrap_espruino_memoryArea($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  block1 : {
   if (!(HEAP32[$2 + 4 >> 2] >= 0 ? HEAP32[$2 + 8 >> 2] : 0)) {
    HEAP32[$2 + 12 >> 2] = 0;
    break block1;
   }
   HEAP32[$2 >> 2] = jshFlashGetMemMapAddress(HEAP32[$2 + 8 >> 2]);
   HEAP32[$2 + 12 >> 2] = jsvNewNativeString(HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]);
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function jswrap_espruino_setBootCode($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP8[$2 + 11 | 0] = $1;
  block : {
   if (jsvIsString(HEAP32[$2 + 12 >> 2]) & 1) {
    HEAP32[$2 + 12 >> 2] = jsvLockAgain(HEAP32[$2 + 12 >> 2]);
    break block;
   }
   HEAP32[$2 + 12 >> 2] = jsvNewFromEmptyString_1599();
  }
  jsfSaveBootCodeToFlash(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 11 | 0] & 1);
  jsvUnLock(HEAP32[$2 + 12 >> 2]);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jswrap_espruino_setClock($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jshSetSystemClock(HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function jswrap_espruino_getClock() {
  return jshGetSystemClock() | 0;
 }
 
 function jswrap_espruino_setConsole($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 112 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 108 >> 2] = $0;
  HEAP32[$2 + 104 >> 2] = $1;
  HEAP8[$2 + 103 | 0] = 0;
  HEAP32[$2 + 88 >> 2] = 137999;
  HEAP16[$2 + 92 >> 1] = 12;
  HEAP16[($2 + 88 | 0) + 6 >> 1] = 0;
  HEAP32[$2 + 96 >> 2] = $2 + 103;
  block : {
   if (!(jsvReadConfigObject(HEAP32[$2 + 104 >> 2], $2 + 88 | 0, 1) & 1)) {
    break block
   }
   HEAP8[$2 + 87 | 0] = 0;
   block1 : {
    if (jsvIsObject(HEAP32[$2 + 108 >> 2]) & 1) {
     HEAP8[$2 + 87 | 0] = jsiGetDeviceFromClass(HEAP32[$2 + 108 >> 2]);
     break block1;
    }
    if (jsvIsString(HEAP32[$2 + 108 >> 2]) & 1) {
     jsvGetString(HEAP32[$2 + 108 >> 2], $2 + 16 | 0, 64);
     HEAP8[$2 + 87 | 0] = jshFromDeviceString($2 + 16 | 0);
    }
   }
   block2 : {
    if (HEAPU8[$2 + 87 | 0]) {
     break block2
    }
    if (jsvIsNull(HEAP32[$2 + 108 >> 2]) & 1) {
     break block2
    }
    HEAP32[$2 >> 2] = HEAPU8[$2 + 87 | 0];
    jsExceptionHere(1, 128485, $2);
    break block;
   }
   if (!(!HEAPU8[$2 + 87 | 0] | HEAPU8[$2 + 87 | 0] <= 22 & HEAPU8[$2 + 87 | 0] >= 17)) {
    jsExceptionHere(1, 127473, 0);
    break block;
   }
   jsiSetConsoleDevice(HEAPU8[$2 + 87 | 0], HEAP8[$2 + 103 | 0] & 1);
  }
  __stack_pointer = $2 + 112 | 0;
 }
 
 function jswrap_espruino_getConsole() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP8[$0 + 11 | 0] = jsiGetConsoleDevice();
  block : {
   if (!HEAPU8[$0 + 11 | 0]) {
    HEAP32[$0 + 12 >> 2] = jsvNewNull_1606();
    break block;
   }
   HEAP32[$0 + 12 >> 2] = jsvNewFromString(jshGetDeviceString(HEAPU8[$0 + 11 | 0]));
  }
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function jsvNewNull_1606() {
  return jsvNewWithFlags(2);
 }
 
 function jswrap_espruino_reverseByte($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 12 >> 2] & 255;
  return Math_imul(Math_imul(HEAP32[$1 + 8 >> 2], 2050) & 139536 | Math_imul(HEAP32[$1 + 8 >> 2], 32800) & 558144, 65793) >>> 16 & 255;
 }
 
 function jswrap_espruino_dumpTimers() {
  jstDumpUtilityTimers();
 }
 
 function jswrap_e_dumpFragmentation() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  while (1) {
   if (HEAPU32[$0 + 8 >> 2] < jsvGetMemoryTotal() >>> 0) {
    HEAP32[$0 + 4 >> 2] = _jsvGetAddressOf(HEAP32[$0 + 8 >> 2] + 1 & 65535);
    $1 = HEAP32[$0 + 4 >> 2];
    block : {
     if (!((HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & 63)) {
      jsiConsolePrintString(147034);
      $1 = HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 12 >> 2] = $1 + 1;
      if (($1 | 0) > 80) {
       jsiConsolePrintString(148265);
       HEAP32[$0 + 12 >> 2] = 0;
      }
      break block;
     }
     block1 : {
      if (jsvGetLocks(HEAP32[$0 + 4 >> 2]) & 255) {
       jsiConsolePrintString(141084);
       break block1;
      }
      jsiConsolePrintString(146609);
     }
     $1 = HEAP32[$0 + 12 >> 2];
     HEAP32[$0 + 12 >> 2] = $1 + 1;
     if (($1 | 0) > 80) {
      jsiConsolePrintString(148265);
      HEAP32[$0 + 12 >> 2] = 0;
     }
     if (jsvIsFlatString(HEAP32[$0 + 4 >> 2]) & 1) {
      HEAP32[$0 >> 2] = jsvGetFlatStringBlocks(HEAP32[$0 + 4 >> 2]);
      HEAP32[$0 + 8 >> 2] = HEAP32[$0 >> 2] + HEAP32[$0 + 8 >> 2];
      while (1) {
       $1 = HEAP32[$0 >> 2];
       HEAP32[$0 >> 2] = $1 - 1;
       if ($1) {
        jsiConsolePrintString(141478);
        $1 = HEAP32[$0 + 12 >> 2];
        HEAP32[$0 + 12 >> 2] = $1 + 1;
        if (($1 | 0) > 80) {
         jsiConsolePrintString(148265);
         HEAP32[$0 + 12 >> 2] = 0;
        }
        continue;
       }
       break;
      };
     }
    }
    HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
    continue;
   }
   break;
  };
  jsiConsolePrintString(148265);
  __stack_pointer = $0 + 16 | 0;
 }
 
 function jswrap_e_dumpVariables() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0;
  $0 = __stack_pointer - 128 | 0;
  __stack_pointer = $0;
  jsiConsolePrintf(148107, 0);
  HEAP32[$0 + 124 >> 2] = 0;
  while (1) {
   if (HEAPU32[$0 + 124 >> 2] < jsvGetMemoryTotal() >>> 0) {
    HEAP16[$0 + 122 >> 1] = HEAP32[$0 + 124 >> 2] + 1;
    HEAP32[$0 + 116 >> 2] = _jsvGetAddressOf(HEAPU16[$0 + 122 >> 1]);
    $1 = HEAP32[$0 + 116 >> 2];
    block : {
     if (!((HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & 63)) {
      break block
     }
     if (jsvIsStringExt(HEAP32[$0 + 116 >> 2]) & 1) {
      break block
     }
     HEAP32[$0 + 112 >> 2] = 1;
     block1 : {
      if (jsvIsFlatString(HEAP32[$0 + 116 >> 2]) & 1) {
       HEAP32[$0 + 108 >> 2] = jsvGetFlatStringBlocks(HEAP32[$0 + 116 >> 2]);
       HEAP32[$0 + 124 >> 2] = HEAP32[$0 + 108 >> 2] + HEAP32[$0 + 124 >> 2];
       HEAP32[$0 + 112 >> 2] = HEAP32[$0 + 108 >> 2] + HEAP32[$0 + 112 >> 2];
       break block1;
      }
      if (jsvHasCharacterData(HEAP32[$0 + 116 >> 2]) & 1) {
       HEAP16[$0 + 106 >> 1] = jsvGetLastChild(HEAP32[$0 + 116 >> 2]);
       while (1) {
        if (HEAPU16[$0 + 106 >> 1]) {
         HEAP32[$0 + 100 >> 2] = jsvLock(HEAPU16[$0 + 106 >> 1]);
         HEAP32[$0 + 112 >> 2] = HEAP32[$0 + 112 >> 2] + 1;
         HEAP16[$0 + 106 >> 1] = jsvGetLastChild(HEAP32[$0 + 100 >> 2]);
         jsvUnLock(HEAP32[$0 + 100 >> 2]);
         continue;
        }
        break;
       };
      }
     }
     $2 = HEAPU16[$0 + 122 >> 1];
     $3 = HEAP32[$0 + 112 >> 2];
     $1 = HEAP32[$0 + 116 >> 2];
     HEAP32[$0 + 72 >> 2] = (HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & 63;
     HEAP32[$0 + 68 >> 2] = $3;
     HEAP32[$0 + 64 >> 2] = $2;
     jsiConsolePrintf(142535, $0 - -64 | 0);
     block2 : {
      if (jsvIsName(HEAP32[$0 + 116 >> 2]) & 1) {
       HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 116 >> 2];
       jsiConsolePrintf(142502, $0 + 16 | 0);
       break block2;
      }
      block3 : {
       if (jsvIsNumeric(HEAP32[$0 + 116 >> 2]) & 1) {
        HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 116 >> 2];
        jsiConsolePrintf(142506, $0 + 32 | 0);
        break block3;
       }
       block5 : {
        if (jsvIsString(HEAP32[$0 + 116 >> 2]) & 1) {
         block4 : {
          if (jsvGetStringLength(HEAP32[$0 + 116 >> 2]) >>> 0 > 20) {
           HEAP32[$0 + 96 >> 2] = jsvNewWritableStringFromStringVar(HEAP32[$0 + 116 >> 2], 0, 17);
           jsvAppendString(HEAP32[$0 + 96 >> 2], 142481);
           break block4;
          }
          HEAP32[$0 + 96 >> 2] = jsvLockAgain(HEAP32[$0 + 116 >> 2]);
         }
         HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 96 >> 2];
         jsiConsolePrintf(142517, $0 + 48 | 0);
         jsvUnLock(HEAP32[$0 + 96 >> 2]);
         break block5;
        }
        block6 : {
         if (jsvIsObject(HEAP32[$0 + 116 >> 2]) & 1) {
          jsiConsolePrintf(142494, 0);
          break block6;
         }
         block7 : {
          if (jsvIsArray(HEAP32[$0 + 116 >> 2]) & 1) {
           jsiConsolePrintf(142487, 0);
           break block7;
          }
          jsiConsolePrintf(142566, 0);
         }
        }
       }
      }
     }
     block8 : {
      if (!(jsvHasSingleChild(HEAP32[$0 + 116 >> 2]) & 1)) {
       if (!(jsvHasChildren(HEAP32[$0 + 116 >> 2]) & 1)) {
        break block8
       }
      }
      HEAP16[$0 + 94 >> 1] = jsvGetFirstChild(HEAP32[$0 + 116 >> 2]);
      while (1) {
       if (HEAPU16[$0 + 94 >> 1]) {
        HEAP32[$0 + 88 >> 2] = jsvLock(HEAPU16[$0 + 94 >> 1]);
        HEAP32[$0 >> 2] = HEAPU16[$0 + 94 >> 1];
        jsiConsolePrintf(142541, $0);
        block9 : {
         if (jsvHasChildren(HEAP32[$0 + 116 >> 2]) & 1) {
          HEAP16[$0 + 94 >> 1] = jsvGetNextSibling(HEAP32[$0 + 88 >> 2]);
          break block9;
         }
         HEAP16[$0 + 94 >> 1] = 0;
        }
        jsvUnLock(HEAP32[$0 + 88 >> 2]);
        continue;
       }
       break;
      };
     }
     jsiConsolePrintString(148265);
    }
    HEAP32[$0 + 124 >> 2] = HEAP32[$0 + 124 >> 2] + 1;
    continue;
   }
   break;
  };
  __stack_pointer = $0 + 128 | 0;
 }
 
 function jswrap_espruino_getSizeOf($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  block1 : {
   block : {
    if (HEAP32[$2 + 20 >> 2] <= 0) {
     break block
    }
    if (!(jsvHasChildren(HEAP32[$2 + 24 >> 2]) & 1)) {
     break block
    }
    HEAP32[$2 + 16 >> 2] = jsvNewEmptyArray();
    if (!HEAP32[$2 + 16 >> 2]) {
     HEAP32[$2 + 28 >> 2] = 0;
     break block1;
    }
    jsvObjectIteratorNew($2 + 12 | 0, HEAP32[$2 + 24 >> 2]);
    while (1) {
     if (jsvObjectIteratorHasValue_1612($2 + 12 | 0) & 1) {
      HEAP32[$2 + 8 >> 2] = jsvObjectIteratorGetKey_1613($2 + 12 | 0);
      HEAP32[$2 + 4 >> 2] = jsvSkipName(HEAP32[$2 + 8 >> 2]);
      HEAP32[$2 >> 2] = jsvNewObject();
      if (HEAP32[$2 >> 2]) {
       jsvObjectSetChildAndUnLock(HEAP32[$2 >> 2], 137596, jsvAsString(HEAP32[$2 + 8 >> 2]));
       jsvObjectSetChildAndUnLock(HEAP32[$2 >> 2], 137014, jswrap_espruino_getSizeOf(HEAP32[$2 + 8 >> 2], 0));
       block2 : {
        if (HEAP32[$2 + 20 >> 2] <= 1) {
         break block2
        }
        if (!(jsvHasChildren(HEAP32[$2 + 4 >> 2]) & 1)) {
         break block2
        }
        jsvObjectSetChildAndUnLock(HEAP32[$2 >> 2], 137479, jswrap_espruino_getSizeOf(HEAP32[$2 + 4 >> 2], HEAP32[$2 + 20 >> 2] - 1 | 0));
       }
       jsvArrayPushAndUnLock(HEAP32[$2 + 16 >> 2], HEAP32[$2 >> 2]);
      }
      jsvUnLock2(HEAP32[$2 + 4 >> 2], HEAP32[$2 + 8 >> 2]);
      jsvObjectIteratorNext($2 + 12 | 0);
      continue;
     }
     break;
    };
    jsvObjectIteratorFree_1614($2 + 12 | 0);
    HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
    break block1;
   }
   HEAP32[$2 + 28 >> 2] = jsvNewFromInteger(jsvCountJsVarsUsed(HEAP32[$2 + 24 >> 2]));
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jsvObjectIteratorHasValue_1612($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
 }
 
 function jsvObjectIteratorGetKey_1613($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvObjectIteratorFree_1614($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_espruino_getAddressOf($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP8[$2 + 7 | 0] = $1;
  block : {
   if (HEAP8[$2 + 7 | 0] & 1) {
    HEAP32[$2 >> 2] = 0;
    HEAP32[$2 + 12 >> 2] = jsvGetDataPointer(HEAP32[$2 + 8 >> 2], $2);
    break block;
   }
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 8 >> 2];
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function jswrap_espruino_mapInPlace($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 176 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 172 >> 2] = $0;
  HEAP32[$4 + 168 >> 2] = $1;
  HEAP32[$4 + 164 >> 2] = $2;
  HEAP32[$4 + 160 >> 2] = $3;
  block1 : {
   block : {
    if (jsvIsArrayBuffer(HEAP32[$4 + 172 >> 2]) & 1) {
     if (jsvIsArrayBuffer(HEAP32[$4 + 168 >> 2]) & 1) {
      break block
     }
    }
    jsExceptionHere(1, 127106, 0);
    break block1;
   }
   block2 : {
    if (!HEAP32[$4 + 164 >> 2]) {
     break block2
    }
    if (jsvIsArray(HEAP32[$4 + 164 >> 2]) & 1) {
     break block2
    }
    if (jsvIsArrayBuffer(HEAP32[$4 + 164 >> 2]) & 1) {
     break block2
    }
    if (jsvIsFunction(HEAP32[$4 + 164 >> 2]) & 1) {
     break block2
    }
    jsExceptionHere(1, 123726, 0);
    break block1;
   }
   HEAP8[$4 + 159 | 0] = jsvIsFunction(HEAP32[$4 + 164 >> 2]) & 1;
   HEAP32[$4 + 152 >> 2] = (HEAPU8[HEAP32[$4 + 172 >> 2] + 5 | 0] & 15) << 3;
   HEAP8[$4 + 151 | 0] = 1;
   if (HEAP32[$4 + 160 >> 2] < 0) {
    HEAP32[$4 + 160 >> 2] = 0 - HEAP32[$4 + 160 >> 2];
    HEAP8[$4 + 151 | 0] = 0;
   }
   if (!HEAP32[$4 + 160 >> 2]) {
    HEAP32[$4 + 160 >> 2] = HEAP32[$4 + 152 >> 2]
   }
   jsvArrayBufferIteratorNew($4 + 92 | 0, HEAP32[$4 + 172 >> 2], 0);
   HEAP32[$4 + 32 >> 2] = 0;
   HEAP32[$4 + 28 >> 2] = 0;
   jsvArrayBufferIteratorNew($4 + 36 | 0, HEAP32[$4 + 168 >> 2], 0);
   while (1) {
    block3 : {
     if (!(jsvArrayBufferIteratorHasElement($4 + 92 | 0) & 1)) {
      $0 = 0;
      if (HEAP32[$4 + 28 >> 2] < HEAP32[$4 + 160 >> 2]) {
       break block3
      }
     }
     $0 = jsvArrayBufferIteratorHasElement($4 + 36 | 0);
    }
    if ($0 & 1) {
     block4 : {
      if (HEAP8[$4 + 159 | 0] & 1) {
       $0 = jsvArrayBufferIteratorGetIndex($4 + 92 | 0);
       break block4;
      }
      $0 = 0;
     }
     HEAP32[$4 + 24 >> 2] = $0;
     while (1) {
      if (HEAP32[$4 + 28 >> 2] < HEAP32[$4 + 160 >> 2]) {
       block5 : {
        if (HEAP8[$4 + 151 | 0] & 1) {
         HEAP32[$4 + 32 >> 2] = HEAP32[$4 + 32 >> 2] << HEAP32[$4 + 152 >> 2] | jsvArrayBufferIteratorGetIntegerValue($4 + 92 | 0);
         break block5;
        }
        HEAP32[$4 + 32 >> 2] = jsvArrayBufferIteratorGetIntegerValue($4 + 92 | 0) << HEAP32[$4 + 28 >> 2] | HEAP32[$4 + 32 >> 2];
       }
       jsvArrayBufferIteratorNext($4 + 92 | 0);
       HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 152 >> 2] + HEAP32[$4 + 28 >> 2];
       continue;
      }
      break;
     };
     block6 : {
      if (HEAP8[$4 + 151 | 0] & 1) {
       HEAP32[$4 + 20 >> 2] = (1 << HEAP32[$4 + 160 >> 2]) - 1 & HEAP32[$4 + 32 >> 2] >> HEAP32[$4 + 28 >> 2] - HEAP32[$4 + 160 >> 2];
       break block6;
      }
      HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 32 >> 2] & (1 << HEAP32[$4 + 160 >> 2]) - 1;
      HEAP32[$4 + 32 >> 2] = HEAP32[$4 + 32 >> 2] >> HEAP32[$4 + 160 >> 2];
     }
     HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 28 >> 2] - HEAP32[$4 + 160 >> 2];
     block9 : {
      if (HEAP32[$4 + 164 >> 2]) {
       HEAP32[$4 + 16 >> 2] = 0;
       block7 : {
        if (HEAP8[$4 + 159 | 0] & 1) {
         HEAP32[$4 + 8 >> 2] = jsvNewFromInteger(HEAP32[$4 + 20 >> 2]);
         HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 24 >> 2];
         HEAP32[$4 + 16 >> 2] = jspeFunctionCall(HEAP32[$4 + 164 >> 2], 0, 0, 0, 2, $4 + 8 | 0);
         jsvUnLock(HEAP32[$4 + 8 >> 2]);
         break block7;
        }
        block8 : {
         if (jsvIsArray(HEAP32[$4 + 164 >> 2]) & 1) {
          HEAP32[$4 + 16 >> 2] = jsvGetArrayItem(HEAP32[$4 + 164 >> 2], HEAP32[$4 + 20 >> 2]);
          break block8;
         }
         HEAP32[$4 + 16 >> 2] = jsvArrayBufferGet(HEAP32[$4 + 164 >> 2], HEAP32[$4 + 20 >> 2]);
        }
       }
       jsvArrayBufferIteratorSetValue($4 + 36 | 0, HEAP32[$4 + 16 >> 2], 0);
       jsvUnLock(HEAP32[$4 + 16 >> 2]);
       break block9;
      }
      jsvArrayBufferIteratorSetIntegerValue($4 + 36 | 0, HEAP32[$4 + 20 >> 2]);
     }
     jsvUnLock(HEAP32[$4 + 24 >> 2]);
     jsvArrayBufferIteratorNext($4 + 36 | 0);
     continue;
    }
    break;
   };
   jsvArrayBufferIteratorFree($4 + 92 | 0);
   jsvArrayBufferIteratorFree($4 + 36 | 0);
  }
  __stack_pointer = $4 + 176 | 0;
 }
 
 function jswrap_espruino_lookupNoCase($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 96 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 88 >> 2] = $0;
  HEAP32[$3 + 84 >> 2] = $1;
  HEAP8[$3 + 83 | 0] = $2;
  block : {
   if (!(jsvHasChildren(HEAP32[$3 + 88 >> 2]) & 1)) {
    HEAP32[$3 + 92 >> 2] = 0;
    break block;
   }
   if ((jsvGetString(HEAP32[$3 + 84 >> 2], $3 + 16 | 0, 64) | 0) == 64) {
    HEAP32[$3 >> 2] = 64;
    jsExceptionHere(1, 144234, $3);
   }
   if (HEAP8[$3 + 83 | 0] & 1) {
    HEAP32[$3 + 12 >> 2] = jsvFindChildFromStringI(HEAP32[$3 + 88 >> 2], $3 + 16 | 0);
    if (HEAP32[$3 + 12 >> 2]) {
     HEAP32[$3 + 92 >> 2] = jsvAsStringAndUnLock(HEAP32[$3 + 12 >> 2]);
     break block;
    }
    HEAP32[$3 + 92 >> 2] = 0;
    break block;
   }
   HEAP32[$3 + 92 >> 2] = jsvObjectGetChildI(HEAP32[$3 + 88 >> 2], $3 + 16 | 0);
  }
  __stack_pointer = $3 + 96 | 0;
  return HEAP32[$3 + 92 >> 2];
 }
 
 function jswrap_e_dumpStr() {
  var $0 = 0;
  $0 = __stack_pointer - 48 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 40 >> 2] = jsvNewFromEmptyString_1599();
  block : {
   if (!HEAP32[$0 + 40 >> 2]) {
    HEAP32[$0 + 44 >> 2] = 0;
    break block;
   }
   jsvStringIteratorNew($0 + 4 | 0, HEAP32[$0 + 40 >> 2], 0);
   jsiDumpState(2, $0 + 4 | 0);
   jsvStringIteratorFree_1590($0 + 4 | 0);
   HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 40 >> 2];
  }
  __stack_pointer = $0 + 48 | 0;
  return HEAP32[$0 + 44 >> 2];
 }
 
 function jswrap_espruino_CRC32($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 80 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 76 >> 2] = $0;
  jsvIteratorNew($1 + 16 | 0, HEAP32[$1 + 76 >> 2], 1);
  HEAP32[$1 + 12 >> 2] = -1;
  while (1) {
   if (jsvIteratorHasElement($1 + 16 | 0) & 1) {
    HEAP32[$1 + 12 >> 2] = jsvIteratorGetIntegerValue($1 + 16 | 0) & 255 ^ HEAP32[$1 + 12 >> 2];
    HEAP32[$1 + 8 >> 2] = 0;
    while (1) {
     if (HEAP32[$1 + 8 >> 2] < 8) {
      HEAP32[$1 + 12 >> 2] = 0 - (HEAP32[$1 + 12 >> 2] & 1) & -306674912 ^ HEAP32[$1 + 12 >> 2] >>> 1;
      HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
      continue;
     }
     break;
    };
    jsvIteratorNext($1 + 16 | 0);
    continue;
   }
   break;
  };
  jsvIteratorFree($1 + 16 | 0);
  $0 = jsvNewFromLongInteger(HEAP32[$1 + 12 >> 2] ^ -1, 0);
  __stack_pointer = $1 + 80 | 0;
  return $0 | 0;
 }
 
 function jswrap_espruino_HSBtoRGB_int($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 80 | 0;
  HEAPF64[$3 + 64 >> 3] = $0;
  HEAPF64[$3 + 56 >> 3] = $1;
  HEAPF64[$3 + 48 >> 3] = $2;
  block : {
   if (HEAPF64[$3 + 48 >> 3] == 0.0) {
    HEAP32[$3 + 76 >> 2] = 0;
    break block;
   }
   if (HEAPF64[$3 + 56 >> 3] == 0.0) {
    $0 = HEAPF64[$3 + 48 >> 3] * 255.0;
    if (Math_abs($0) < 2147483647.0) {
     $4 = ~~$0
    } else {
     $4 = -2147483648
    }
    HEAP32[$3 + 44 >> 2] = $4;
    HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 44 >> 2] | (HEAP32[$3 + 44 >> 2] << 16 | HEAP32[$3 + 44 >> 2] << 8);
    break block;
   }
   HEAPF64[$3 + 64 >> 3] = (HEAPF64[$3 + 64 >> 3] - Math_floor(HEAPF64[$3 + 64 >> 3])) * 6.0;
   $0 = HEAPF64[$3 + 64 >> 3];
   if (Math_abs($0) < 2147483647.0) {
    $4 = ~~$0
   } else {
    $4 = -2147483648
   }
   HEAP32[$3 + 32 >> 2] = $4;
   HEAPF64[$3 + 8 >> 3] = HEAPF64[$3 + 64 >> 3] - +HEAP32[$3 + 32 >> 2];
   HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 32 >> 2] % 6;
   HEAPF64[$3 + 48 >> 3] = HEAPF64[$3 + 48 >> 3] * 255.0;
   $0 = HEAPF64[$3 + 48 >> 3];
   if (Math_abs($0) < 2147483647.0) {
    $4 = ~~$0
   } else {
    $4 = -2147483648
   }
   HEAP32[$3 + 28 >> 2] = $4;
   $0 = (1.0 - HEAPF64[$3 + 56 >> 3]) * HEAPF64[$3 + 48 >> 3];
   if (Math_abs($0) < 2147483647.0) {
    $4 = ~~$0
   } else {
    $4 = -2147483648
   }
   HEAP32[$3 + 24 >> 2] = $4;
   $0 = (-HEAPF64[$3 + 56 >> 3] * HEAPF64[$3 + 8 >> 3] + 1.0) * HEAPF64[$3 + 48 >> 3];
   if (Math_abs($0) < 2147483647.0) {
    $4 = ~~$0
   } else {
    $4 = -2147483648
   }
   HEAP32[$3 + 20 >> 2] = $4;
   $0 = (-HEAPF64[$3 + 56 >> 3] * (1.0 - HEAPF64[$3 + 8 >> 3]) + 1.0) * HEAPF64[$3 + 48 >> 3];
   if (Math_abs($0) < 2147483647.0) {
    $4 = ~~$0
   } else {
    $4 = -2147483648
   }
   HEAP32[$3 + 16 >> 2] = $4;
   block1 : {
    if (!HEAP32[$3 + 32 >> 2]) {
     HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 28 >> 2];
     HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 16 >> 2];
     HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 24 >> 2];
     break block1;
    }
    block2 : {
     if (HEAP32[$3 + 32 >> 2] == 1) {
      HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 20 >> 2];
      HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 28 >> 2];
      HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 24 >> 2];
      break block2;
     }
     block3 : {
      if (HEAP32[$3 + 32 >> 2] == 2) {
       HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 24 >> 2];
       HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 28 >> 2];
       HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 16 >> 2];
       break block3;
      }
      block4 : {
       if (HEAP32[$3 + 32 >> 2] == 3) {
        HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 24 >> 2];
        HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 20 >> 2];
        HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 28 >> 2];
        break block4;
       }
       block5 : {
        if (HEAP32[$3 + 32 >> 2] == 4) {
         HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 16 >> 2];
         HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 24 >> 2];
         HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 28 >> 2];
         break block5;
        }
        block6 : {
         if (HEAP32[$3 + 32 >> 2] == 5) {
          HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 28 >> 2];
          HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 24 >> 2];
          HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 20 >> 2];
          break block6;
         }
         HEAP32[$3 + 44 >> 2] = 0;
         HEAP32[$3 + 40 >> 2] = 0;
         HEAP32[$3 + 36 >> 2] = 0;
        }
       }
      }
     }
    }
   }
   HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 44 >> 2] | (HEAP32[$3 + 36 >> 2] << 16 | HEAP32[$3 + 40 >> 2] << 8);
  }
  return HEAP32[$3 + 76 >> 2];
 }
 
 function jswrap_espruino_HSBtoRGB($0, $1, $2, $3) {
  $0 = +$0;
  $1 = +$1;
  $2 = +$2;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 80 | 0;
  __stack_pointer = $4;
  HEAPF64[$4 + 64 >> 3] = $0;
  HEAPF64[$4 + 56 >> 3] = $1;
  HEAPF64[$4 + 48 >> 3] = $2;
  HEAP32[$4 + 44 >> 2] = $3;
  HEAP32[$4 + 40 >> 2] = jswrap_espruino_HSBtoRGB_int(HEAPF64[$4 + 64 >> 3], HEAPF64[$4 + 56 >> 3], HEAPF64[$4 + 48 >> 3]);
  block1 : {
   if (!(HEAP32[$4 + 44 >> 2] != 24 ? HEAP32[$4 + 44 >> 2] : 0)) {
    HEAP32[$4 + 76 >> 2] = jsvNewFromInteger(HEAP32[$4 + 40 >> 2]);
    break block1;
   }
   HEAP32[$4 + 36 >> 2] = HEAP32[$4 + 40 >> 2] & 255;
   HEAP32[$4 + 32 >> 2] = HEAP32[$4 + 40 >> 2] >> 8 & 255;
   HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 40 >> 2] >> 16 & 255;
   if (HEAP32[$4 + 44 >> 2] == 16) {
    HEAP32[$4 + 76 >> 2] = jsvNewFromInteger(HEAP32[$4 + 32 >> 2] >> 2 << 5 | HEAP32[$4 + 28 >> 2] >> 3 | HEAP32[$4 + 36 >> 2] >> 3 << 11);
    break block1;
   }
   if (HEAP32[$4 + 44 >> 2] != 1) {
    jsExceptionHere(1, 141996, 0);
    HEAP32[$4 + 76 >> 2] = 0;
    break block1;
   }
   HEAP32[$4 + 16 >> 2] = jsvNewFromInteger(HEAP32[$4 + 36 >> 2]);
   HEAP32[$4 + 20 >> 2] = jsvNewFromInteger(HEAP32[$4 + 32 >> 2]);
   HEAP32[$4 + 24 >> 2] = jsvNewFromInteger(HEAP32[$4 + 28 >> 2]);
   HEAP32[$4 + 12 >> 2] = jsvNewArray($4 + 16 | 0, 3);
   jsvUnLockMany(3, $4 + 16 | 0);
   HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 12 >> 2];
  }
  __stack_pointer = $4 + 80 | 0;
  return HEAP32[$4 + 76 >> 2];
 }
 
 function jswrap_espruino_setPassword($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  if (HEAP32[$1 + 12 >> 2]) {
   HEAP32[$1 + 12 >> 2] = jsvAsString(HEAP32[$1 + 12 >> 2])
  }
  jsvUnLock(jsvObjectSetChild(HEAP32[92131], 138090, HEAP32[$1 + 12 >> 2]));
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_espruino_lockConsole() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[92131], 138090);
  if (HEAP32[$0 + 12 >> 2]) {
   HEAP16[184294] = HEAPU16[184294] | 1024
  }
  jsvUnLock(HEAP32[$0 + 12 >> 2]);
  __stack_pointer = $0 + 16 | 0;
 }
 
 function jswrap_espruino_setTimeZone($0) {
  $0 = +$0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAPF64[$1 + 8 >> 3] = $0;
  jswrap_espruino_setDST(0);
  $3 = HEAP32[92131];
  $0 = HEAPF64[$1 + 8 >> 3] * 60.0;
  if (Math_abs($0) < 2147483647.0) {
   $2 = ~~$0
  } else {
   $2 = -2147483648
  }
  jsvObjectSetChildAndUnLock($3, 123563, jsvNewFromInteger($2));
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_espruino_setDST($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  block : {
   if (jsvIsUndefined(HEAP32[$1 + 12 >> 2]) & 1) {
    jsvObjectRemoveChild(HEAP32[92131], 124565);
    break block;
   }
   block1 : {
    if (jsvIsArray(HEAP32[$1 + 12 >> 2]) & 1) {
     if ((jsvGetLength(HEAP32[$1 + 12 >> 2]) | 0) == 12) {
      break block1
     }
    }
    jsExceptionHere(1, 126870, 0);
    break block;
   }
   jsvObjectRemoveChild(HEAP32[92131], 123563);
   HEAP32[$1 + 8 >> 2] = jswrap_typedarray_constructor(18, HEAP32[$1 + 12 >> 2], 0, 0);
   jsvObjectSetChildAndUnLock(HEAP32[92131], 124565, HEAP32[$1 + 8 >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_espruino_memoryMap($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 >> 2] = HEAP32[$2 + 12 >> 2];
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
  $0 = jspExecuteJSFunctionCode(135921, 141480, 0, 0, 2, $2);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function jswrap_espruino_asm($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  jsExceptionHere(1, 139049, 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jswrap_espruino_compiledC($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsExceptionHere(1, 139125, 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_espruino_reboot() {
  jswrap_interface_reset(0);
 }
 
 function jswrap_espruino_getBattery() {
  return 0;
 }
 
 function jswrap_espruino_getPowerUsage() {
  var $0 = 0, $1 = 0.0;
  $0 = __stack_pointer - 32 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 24 >> 2] = jsvNewObject();
  block : {
   if (!HEAP32[$0 + 24 >> 2]) {
    HEAP32[$0 + 28 >> 2] = 0;
    break block;
   }
   jsvGetProcessorPowerUsage(HEAP32[$0 + 24 >> 2]);
   if (jshPinGetState(8) & 16) {
    jsvObjectSetChildAndUnLock(HEAP32[$0 + 24 >> 2], 142194, jsvNewFromInteger(8e3))
   }
   jswGetPowerUsage(HEAP32[$0 + 24 >> 2]);
   HEAPF64[$0 + 16 >> 3] = 0;
   jsvObjectIteratorNew($0 + 12 | 0, HEAP32[$0 + 24 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_1612($0 + 12 | 0) & 1) {
     $1 = jsvGetFloatAndUnLock(jsvObjectIteratorGetValue_1632($0 + 12 | 0));
     HEAPF64[$0 + 16 >> 3] = HEAPF64[$0 + 16 >> 3] + $1;
     jsvObjectIteratorNext($0 + 12 | 0);
     continue;
    }
    break;
   };
   jsvObjectIteratorFree_1614($0 + 12 | 0);
   HEAP32[$0 + 8 >> 2] = jsvNewObject();
   jsvObjectSetChildAndUnLock(HEAP32[$0 + 8 >> 2], 138072, HEAP32[$0 + 24 >> 2]);
   jsvObjectSetChildAndUnLock(HEAP32[$0 + 8 >> 2], 135832, jsvNewFromFloat(HEAPF64[$0 + 16 >> 3]));
   HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 8 >> 2];
  }
  __stack_pointer = $0 + 32 | 0;
  return HEAP32[$0 + 28 >> 2];
 }
 
 function jsvObjectIteratorGetValue_1632($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jswrap_espruino_decodeUTF8($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 128 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 120 >> 2] = $0;
  HEAP32[$3 + 116 >> 2] = $1;
  HEAP32[$3 + 112 >> 2] = $2;
  block : {
   if (!(jsvIsString(HEAP32[$3 + 120 >> 2]) & 1)) {
    jsExceptionHere(1, 136609, 0);
    HEAP32[$3 + 124 >> 2] = 0;
    break block;
   }
   HEAP32[$3 + 36 >> 2] = jsvNewFromEmptyString_1599();
   jsvStringIteratorNew($3 + 76 | 0, HEAP32[$3 + 120 >> 2], 0);
   jsvStringIteratorNew($3 + 40 | 0, HEAP32[$3 + 36 >> 2], 0);
   while (1) {
    if (jsvStringIteratorHasChar_1634($3 + 76 | 0) & 1) {
     HEAP8[$3 + 35 | 0] = jsvStringIteratorGetCharAndNext($3 + 76 | 0);
     HEAP32[$3 + 28 >> 2] = HEAPU8[$3 + 35 | 0];
     HEAP32[$3 + 24 >> 2] = 0;
     if (HEAPU8[$3 + 35 | 0] > 127) {
      block1 : {
       if ((HEAPU8[$3 + 35 | 0] & 224) == 192) {
        HEAP32[$3 + 28 >> 2] = HEAPU8[$3 + 35 | 0] & 31;
        HEAP32[$3 + 24 >> 2] = 1;
        break block1;
       }
       block2 : {
        if ((HEAPU8[$3 + 35 | 0] & 240) == 224) {
         HEAP32[$3 + 28 >> 2] = HEAPU8[$3 + 35 | 0] & 15;
         HEAP32[$3 + 24 >> 2] = 2;
         break block2;
        }
        if ((HEAPU8[$3 + 35 | 0] & 248) == 240) {
         HEAP32[$3 + 28 >> 2] = HEAPU8[$3 + 35 | 0] & 7;
         HEAP32[$3 + 24 >> 2] = 3;
        }
       }
      }
      while (1) {
       $0 = HEAP32[$3 + 24 >> 2];
       HEAP32[$3 + 24 >> 2] = $0 - 1;
       if ($0) {
        HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 28 >> 2] << 6 | jsvStringIteratorGetCharAndNext($3 + 76 | 0) & 63;
        continue;
       }
       break;
      };
     }
     block3 : {
      if (HEAP32[$3 + 28 >> 2] <= 255) {
       jsvStringIteratorAppend($3 + 40 | 0, HEAP32[$3 + 28 >> 2] << 24 >> 24);
       break block3;
      }
      HEAP32[$3 + 20 >> 2] = 0;
      block4 : {
       if (jsvIsArray(HEAP32[$3 + 116 >> 2]) & 1) {
        HEAP32[$3 + 20 >> 2] = jsvGetArrayItem(HEAP32[$3 + 116 >> 2], HEAP32[$3 + 28 >> 2]);
        break block4;
       }
       if (jsvIsObject(HEAP32[$3 + 116 >> 2]) & 1) {
        HEAP32[$3 + 16 >> 2] = jsvNewFromInteger(HEAP32[$3 + 28 >> 2]);
        HEAP32[$3 + 20 >> 2] = jsvSkipNameAndUnLock(jsvFindChildFromVar(HEAP32[$3 + 116 >> 2], HEAP32[$3 + 16 >> 2], 0));
        jsvUnLock(HEAP32[$3 + 16 >> 2]);
       }
      }
      block5 : {
       if (HEAP32[$3 + 20 >> 2]) {
        break block5
       }
       if (!(jsvIsFunction(HEAP32[$3 + 112 >> 2]) & 1)) {
        break block5
       }
       HEAP32[$3 + 12 >> 2] = jsvNewFromInteger(HEAP32[$3 + 28 >> 2]);
       HEAP32[$3 + 20 >> 2] = jspExecuteFunction(HEAP32[$3 + 112 >> 2], 0, 1, $3 + 12 | 0);
       jsvUnLock(HEAP32[$3 + 12 >> 2]);
      }
      block6 : {
       if (HEAP32[$3 + 20 >> 2]) {
        break block6
       }
       if (!(jsvIsString(HEAP32[$3 + 112 >> 2]) & 1)) {
        break block6
       }
       HEAP32[$3 + 20 >> 2] = jsvLockAgain(HEAP32[$3 + 112 >> 2]);
      }
      if (HEAP32[$3 + 20 >> 2]) {
       HEAP32[$3 + 20 >> 2] = jsvAsStringAndUnLock(HEAP32[$3 + 20 >> 2]);
       jsvStringIteratorAppendString($3 + 40 | 0, HEAP32[$3 + 20 >> 2], 0, 2147483647);
       jsvUnLock(HEAP32[$3 + 20 >> 2]);
      }
     }
     continue;
    }
    break;
   };
   jsvStringIteratorFree_1590($3 + 76 | 0);
   jsvStringIteratorFree_1590($3 + 40 | 0);
   HEAP32[$3 + 124 >> 2] = HEAP32[$3 + 36 >> 2];
  }
  __stack_pointer = $3 + 128 | 0;
  return HEAP32[$3 + 124 >> 2];
 }
 
 function jsvStringIteratorHasChar_1634($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
 }
 
 function jswrap_espruino_stopEventPropagation() {
  block : {
   if (HEAPU16[184294] & 8192) {
    HEAP16[184294] = HEAPU16[184294] | 16384;
    break block;
   }
   jsExceptionHere(1, 126770, 0);
  }
 }
 
 function jswrap_flash_getPage($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 24 >> 2] = $0;
  block : {
   if (!(jshFlashGetPage(HEAP32[$1 + 24 >> 2], $1 + 20 | 0, $1 + 16 | 0) & 1)) {
    HEAP32[$1 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvNewObject();
   if (!HEAP32[$1 + 12 >> 2]) {
    HEAP32[$1 + 28 >> 2] = 0;
    break block;
   }
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 12 >> 2], 128380, jsvNewFromInteger(HEAP32[$1 + 20 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 12 >> 2], 136130, jsvNewFromInteger(HEAP32[$1 + 16 >> 2]));
   HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 12 >> 2];
  }
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 28 >> 2];
 }
 
 function jswrap_flash_getFree() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = jshFlashGetFree();
  if (!HEAP32[$0 + 12 >> 2]) {
   HEAP32[$0 + 12 >> 2] = jsvNewEmptyArray()
  }
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function jswrap_flash_erasePage($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  block : {
   if (!(jsvIsInt(HEAP32[$1 + 12 >> 2]) & 1)) {
    HEAP32[$1 >> 2] = HEAP32[$1 + 12 >> 2];
    jsExceptionHere(1, 125787, $1);
    break block;
   }
   jshFlashErasePage(jsvGetInteger(HEAP32[$1 + 12 >> 2]));
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_flash_write($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  $2 = $3;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  block : {
   if (jsvIsUndefined(HEAP32[$2 + 12 >> 2]) & 1) {
    jsExceptionHere(1, 138956, 0);
    break block;
   }
   HEAP32[$2 + 4 >> 2] = 0;
   HEAP32[$2 >> 2] = jsvGetDataPointer(HEAP32[$2 + 12 >> 2], $2 + 4 | 0);
   if (!(HEAP32[$2 >> 2] | !HEAP32[$2 + 12 >> 2])) {
    HEAP32[$2 + 4 >> 2] = jsvIterateCallbackCount(HEAP32[$2 + 12 >> 2]);
    block2 : {
     if (HEAP32[$2 + 4 >> 2] + 256 >>> 0 > jsuGetFreeStack() >>> 0) {
      jsExceptionHere(1, 140362, 0);
      break block2;
     }
     $3 = $3 - (HEAP32[$2 + 4 >> 2] + 15 & -16) | 0;
     __stack_pointer = $3;
     HEAP32[$2 >> 2] = $3;
     jsvIterateCallbackToBytes(HEAP32[$2 + 12 >> 2], HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]);
    }
   }
   if (!HEAP32[$2 >> 2] | !HEAP32[$2 + 4 >> 2]) {
    break block
   }
   jshFlashWriteAligned(HEAP32[$2 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jswrap_flash_read($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 80 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 72 >> 2] = $0;
  HEAP32[$2 + 68 >> 2] = $1;
  block : {
   if (HEAP32[$2 + 72 >> 2] <= 0) {
    HEAP32[$2 + 76 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 64 >> 2] = jsvNewTypedArray(1, HEAP32[$2 + 72 >> 2]);
   if (!HEAP32[$2 + 64 >> 2]) {
    HEAP32[$2 + 76 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 56 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$2 + 64 >> 2], $2 + 60 | 0);
   if (HEAP32[$2 + 56 >> 2]) {
    jsvStringIteratorNew($2 + 20 | 0, HEAP32[$2 + 56 >> 2], HEAP32[$2 + 60 >> 2]);
    while (1) {
     $0 = 0;
     if (HEAP32[$2 + 72 >> 2] > 0) {
      $0 = jsvStringIteratorHasChar_1641($2 + 20 | 0)
     }
     if ($0 & 1) {
      HEAP32[$2 + 12 >> 2] = 0;
      jsvStringIteratorGetPtrAndNext($2 + 20 | 0, $2 + 16 | 0, $2 + 12 | 0);
      jshFlashRead(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 68 >> 2], HEAP32[$2 + 12 >> 2]);
      HEAP32[$2 + 68 >> 2] = HEAP32[$2 + 12 >> 2] + HEAP32[$2 + 68 >> 2];
      HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 72 >> 2] - HEAP32[$2 + 12 >> 2];
      continue;
     }
     break;
    };
    jsvStringIteratorFree_1642($2 + 20 | 0);
    jsvUnLock(HEAP32[$2 + 56 >> 2]);
   }
   HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 64 >> 2];
  }
  __stack_pointer = $2 + 80 | 0;
  return HEAP32[$2 + 76 >> 2];
 }
 
 function jsvStringIteratorHasChar_1641($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
 }
 
 function jsvStringIteratorFree_1642($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_interface_setBusyIndicator($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP8[$1 + 11 | 0] = HEAPU8[200001];
  HEAP8[200001] = jshGetPinFromVar(HEAP32[$1 + 12 >> 2]);
  if (HEAPU8[200001] != HEAPU8[$1 + 11 | 0]) {
   if (HEAPU8[$1 + 11 | 0] != 255) {
    jshPinOutput(HEAPU8[$1 + 11 | 0], 0)
   }
   if (HEAPU8[200001] != 255) {
    jshPinOutput(HEAPU8[200001], 1)
   }
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_interface_setSleepIndicator($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP8[$1 + 11 | 0] = HEAPU8[200002];
  HEAP8[200002] = jshGetPinFromVar(HEAP32[$1 + 12 >> 2]);
  if (HEAPU8[200002] != HEAPU8[$1 + 11 | 0]) {
   if (HEAPU8[$1 + 11 | 0] != 255) {
    jshPinOutput(HEAPU8[$1 + 11 | 0], 0)
   }
   if (HEAPU8[200002] != 255) {
    jshPinOutput(HEAPU8[200002], 1)
   }
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_interface_load($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP16[184294] = HEAPU16[184294] | 64;
  jsvObjectSetChild(HEAP32[92131], 139202, HEAP32[$1 + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_interface_reset($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  HEAP16[184294] = HEAPU16[184294] | 128;
  if (HEAP8[$1 + 15 | 0] & 1) {
   jsfRemoveCodeFromFlash()
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_interface_edit($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 28 >> 2] = $0;
  HEAP32[$1 + 24 >> 2] = 0;
  block : {
   if (jsvIsString(HEAP32[$1 + 28 >> 2]) & 1) {
    HEAP32[$1 + 28 >> 2] = jsvLockAgain(HEAP32[$1 + 28 >> 2]);
    HEAP32[$1 + 24 >> 2] = jsvSkipNameAndUnLock(jsvFindChildFromVar(HEAP32[92130], HEAP32[$1 + 28 >> 2], 0));
    break block;
   }
   HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 28 >> 2];
   HEAP32[$1 + 28 >> 2] = jsvGetPathTo(HEAP32[92130], HEAP32[$1 + 24 >> 2], 4, 0);
  }
  block2 : {
   if (jsvIsString(HEAP32[$1 + 28 >> 2]) & 1) {
    if (jsvIsFunction(HEAP32[$1 + 24 >> 2]) & 1) {
     HEAP32[$1 + 20 >> 2] = jsvFindChildFromString(HEAP32[$1 + 24 >> 2], 135032);
     HEAP32[$1 + 16 >> 2] = jsvGetIndexOf(HEAP32[92130], HEAP32[$1 + 24 >> 2], 1);
     $2 = HEAP32[$1 + 20 >> 2] ? $2 : HEAP32[$1 + 16 >> 2] != 0;
     HEAP8[$1 + 15 | 0] = $2;
     jsvUnLock2(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2]);
     HEAP32[$1 + 8 >> 2] = jsvNewFromEmptyString_1648();
     if (HEAP32[$1 + 8 >> 2]) {
      HEAP32[$1 + 4 >> 2] = jsvAsString(HEAP32[$1 + 24 >> 2]);
      block1 : {
       if (HEAP8[$1 + 15 | 0] & 1) {
        jsvAppendString(HEAP32[$1 + 8 >> 2], 146797);
        jsvAppendStringVarComplete(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 28 >> 2]);
        jsvAppendStringVar(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 4 >> 2], 9, 2147483647);
        break block1;
       }
       jsvAppendStringVarComplete(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 28 >> 2]);
       jsvAppendString(HEAP32[$1 + 8 >> 2], 146320);
       jsvAppendStringVarComplete(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 4 >> 2]);
       jsvAppendString(HEAP32[$1 + 8 >> 2], 141957);
      }
      jsvUnLock(HEAP32[$1 + 4 >> 2]);
      jsiReplaceInputLine(HEAP32[$1 + 8 >> 2]);
      jsvUnLock(HEAP32[$1 + 8 >> 2]);
     }
     break block2;
    }
    jsExceptionHere(1, 135173, 0);
    break block2;
   }
   jsExceptionHere(1, 145670, 0);
  }
  jsvUnLock2(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 28 >> 2]);
  __stack_pointer = $1 + 32 | 0;
 }
 
 function jsvNewFromEmptyString_1648() {
  return jsvNewWithFlags(28);
 }
 
 function jswrap_interface_echo($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP8[$1 + 15 | 0] = $0;
  block : {
   if (HEAP8[$1 + 15 | 0] & 1) {
    HEAP16[184294] = HEAPU16[184294] & -2;
    break block;
   }
   HEAP16[184294] = HEAPU16[184294] | 1;
  }
 }
 
 function jswrap_interactive_setTime($0) {
  $0 = +$0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAPF64[$1 + 24 >> 3] = $0;
  jshInterruptOff();
  $2 = jshGetTimeFromMilliseconds(HEAPF64[$1 + 24 >> 3] * 1.0e3);
  HEAP32[$1 + 16 >> 2] = $2;
  HEAP32[$1 + 20 >> 2] = i64toi32_i32$HIGH_BITS;
  $2 = HEAP32[$1 + 20 >> 2];
  HEAP32[92162] = HEAP32[$1 + 16 >> 2];
  HEAP32[92163] = $2;
  $2 = jshGetSystemTime();
  HEAP32[$1 + 8 >> 2] = $2;
  HEAP32[$1 + 12 >> 2] = i64toi32_i32$HIGH_BITS;
  $2 = HEAP32[$1 + 20 >> 2];
  jshSetSystemTime(HEAP32[$1 + 16 >> 2], $2);
  $2 = HEAP32[$1 + 16 >> 2];
  $3 = $2;
  $2 = HEAP32[$1 + 12 >> 2];
  $5 = $2;
  $4 = HEAP32[$1 + 8 >> 2];
  $2 = HEAP32[$1 + 20 >> 2];
  jstSystemTimeChanged($3 - $4 | 0, $2 - (($3 >>> 0 < $4 >>> 0) + $5 | 0) | 0);
  jshInterruptOn();
  __stack_pointer = $1 + 32 | 0;
 }
 
 function jswrap_interface_getSerial() {
  var $0 = 0;
  $0 = __stack_pointer + -64 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 8 >> 2] = jshGetSerialNumber($0 + 16 | 0, 32);
  HEAP32[$0 + 4 >> 2] = jsvNewFromEmptyString_1648();
  block : {
   if (!HEAP32[$0 + 4 >> 2]) {
    HEAP32[$0 + 60 >> 2] = 0;
    break block;
   }
   HEAP32[$0 + 12 >> 2] = 0;
   while (1) {
    if (HEAP32[$0 + 12 >> 2] < HEAP32[$0 + 8 >> 2]) {
     if (!(!HEAP32[$0 + 12 >> 2] | HEAP32[$0 + 12 >> 2] & 3)) {
      jsvAppendString(HEAP32[$0 + 4 >> 2], 142485)
     }
     itostr_1652(HEAPU8[HEAP32[$0 + 12 >> 2] + ($0 + 16 | 0) | 0] | 256, $0 + 52 | 0, 16);
     jsvAppendString(HEAP32[$0 + 4 >> 2], $0 + 53 | 0);
     HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
     continue;
    }
    break;
   };
   HEAP32[$0 + 60 >> 2] = HEAP32[$0 + 4 >> 2];
  }
  __stack_pointer = $0 - -64 | 0;
  return HEAP32[$0 + 60 >> 2];
 }
 
 function itostr_1652($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  itostr_extra(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], 1, HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function _jswrap_interface_setTimeoutOrInterval($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $4 = __stack_pointer + -64 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 56 >> 2] = $0;
  HEAPF64[$4 + 48 >> 3] = $1;
  HEAP32[$4 + 44 >> 2] = $2;
  HEAP8[$4 + 43 | 0] = $3;
  block1 : {
   block : {
    if (jsvIsFunction(HEAP32[$4 + 56 >> 2]) & 1) {
     break block
    }
    if (jsvIsString(HEAP32[$4 + 56 >> 2]) & 1) {
     break block
    }
    jsExceptionHere(1, 146671, 0);
    HEAP32[$4 + 60 >> 2] = 0;
    break block1;
   }
   $0 = __DOUBLE_BITS_1655(HEAPF64[$4 + 48 >> 3]);
   $3 = $0;
   $2 = i64toi32_i32$HIGH_BITS;
   $0 = $2 & 2147483647;
   $2 = $3;
   if (!(!(HEAPF64[$4 + 48 >> 3] < .1) & (!$2 & ($0 | 0) == 2146435072 | $0 >>> 0 < 2146435072))) {
    HEAPF64[$4 + 48 >> 3] = .1
   }
   if (HEAPF64[$4 + 48 >> 3] > 31536000001.0e3) {
    jsExceptionHere(1, 144310, 0);
    HEAP32[$4 + 60 >> 2] = 0;
    break block1;
   }
   HEAP32[$4 + 36 >> 2] = jsvNewObject();
   if (!HEAP32[$4 + 36 >> 2]) {
    HEAP32[$4 + 60 >> 2] = 0;
    break block1;
   }
   $2 = jshGetTimeFromMilliseconds(HEAPF64[$4 + 48 >> 3]);
   HEAP32[$4 + 24 >> 2] = $2;
   $0 = i64toi32_i32$HIGH_BITS;
   HEAP32[$4 + 28 >> 2] = $0;
   $8 = HEAP32[$4 + 36 >> 2];
   $0 = jshGetSystemTime();
   $7 = $0;
   $2 = i64toi32_i32$HIGH_BITS;
   $6 = $2;
   $0 = HEAP32[92163];
   $9 = $0;
   $2 = HEAP32[92162];
   $3 = $2;
   $5 = $7 - $2 | 0;
   $0 = $6;
   $2 = $9;
   $6 = $0 - ($2 + ($3 >>> 0 > $7 >>> 0) | 0) | 0;
   $0 = $5;
   $3 = HEAP32[$4 + 24 >> 2];
   $2 = $0 + $3 | 0;
   $5 = HEAP32[$4 + 28 >> 2] + $6 | 0;
   $5 = $2 >>> 0 < $3 >>> 0 ? $5 + 1 | 0 : $5;
   jsvObjectSetChildAndUnLock($8, 137570, jsvNewFromLongInteger($2, $5));
   if (!(HEAP8[$4 + 43 | 0] & 1)) {
    $5 = HEAP32[$4 + 24 >> 2];
    $0 = HEAP32[$4 + 28 >> 2];
    jsvObjectSetChildAndUnLock(HEAP32[$4 + 36 >> 2], 127751, jsvNewFromLongInteger($5, $0));
   }
   jsvObjectSetChild(HEAP32[$4 + 36 >> 2], 140265, HEAP32[$4 + 56 >> 2]);
   if (jsvGetArrayLength(HEAP32[$4 + 44 >> 2])) {
    jsvObjectSetChild(HEAP32[$4 + 36 >> 2], 127293, HEAP32[$4 + 44 >> 2])
   }
   HEAP32[$4 + 20 >> 2] = jsvNewFromInteger(jsiTimerAdd(HEAP32[$4 + 36 >> 2]));
   jsvUnLock(HEAP32[$4 + 36 >> 2]);
   jsiTimersChanged();
   HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 20 >> 2];
  }
  __stack_pointer = $4 - -64 | 0;
  return HEAP32[$4 + 60 >> 2];
 }
 
 function __DOUBLE_BITS_1655($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAPF64[$1 + 8 >> 3] = $0;
  HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  return HEAP32[$1 >> 2];
 }
 
 function jswrap_interface_setInterval($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAPF64[$3 + 16 >> 3] = $1;
  HEAP32[$3 + 12 >> 2] = $2;
  $0 = _jswrap_interface_setTimeoutOrInterval(HEAP32[$3 + 28 >> 2], HEAPF64[$3 + 16 >> 3], HEAP32[$3 + 12 >> 2], 0);
  __stack_pointer = $3 + 32 | 0;
  return $0 | 0;
 }
 
 function jswrap_interface_setTimeout($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAPF64[$3 + 16 >> 3] = $1;
  HEAP32[$3 + 12 >> 2] = $2;
  $0 = _jswrap_interface_setTimeoutOrInterval(HEAP32[$3 + 28 >> 2], HEAPF64[$3 + 16 >> 3], HEAP32[$3 + 12 >> 2], 1);
  __stack_pointer = $3 + 32 | 0;
  return $0 | 0;
 }
 
 function _jswrap_interface_clearTimeoutOrInterval($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 44 >> 2] = $0;
  HEAP8[$2 + 43 | 0] = $1;
  HEAP32[$2 + 36 >> 2] = jsvLock(HEAPU16[184292]);
  block2 : {
   block : {
    if (!(jsvIsUndefined(HEAP32[$2 + 44 >> 2]) & 1)) {
     if (jsvGetArrayLength(HEAP32[$2 + 44 >> 2])) {
      break block
     }
    }
    jsvObjectIteratorNew($2 + 32 | 0, HEAP32[$2 + 36 >> 2]);
    while (1) {
     if (jsvObjectIteratorHasValue_1659($2 + 32 | 0) & 1) {
      HEAP32[$2 + 28 >> 2] = jsvObjectIteratorGetValue_1660($2 + 32 | 0);
      HEAP32[$2 + 24 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 28 >> 2], 136439);
      block1 : {
       if (!HEAP32[$2 + 24 >> 2]) {
        jsvObjectIteratorRemoveAndGotoNext($2 + 32 | 0, HEAP32[$2 + 36 >> 2]);
        break block1;
       }
       jsvObjectIteratorNext($2 + 32 | 0);
      }
      jsvUnLock2(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 28 >> 2]);
      continue;
     }
     break;
    };
    jsvObjectIteratorFree_1661($2 + 32 | 0);
    break block2;
   }
   HEAP32[$2 + 20 >> 2] = jsvGetArrayItem(HEAP32[$2 + 44 >> 2], 0);
   block3 : {
    if (jsvIsUndefined(HEAP32[$2 + 20 >> 2]) & 1) {
     HEAP32[$2 + 16 >> 2] = HEAP8[$2 + 43 | 0] & 1 ? 124522 : 135818;
     $0 = HEAP32[$2 + 16 >> 2];
     HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 16 >> 2];
     HEAP32[$2 >> 2] = $0;
     jsExceptionHere(1, 139207, $2);
     break block3;
    }
    block4 : {
     if (jsvIsBasic(HEAP32[$2 + 20 >> 2]) & 1) {
      $0 = jsvFindChildFromVar(HEAP32[$2 + 36 >> 2], HEAP32[$2 + 20 >> 2], 0);
      break block4;
     }
     $0 = 0;
    }
    HEAP32[$2 + 12 >> 2] = $0;
    if (HEAP32[$2 + 12 >> 2]) {
     jsvRemoveChildAndUnLock(HEAP32[$2 + 36 >> 2], HEAP32[$2 + 12 >> 2])
    }
    jsvUnLock(HEAP32[$2 + 20 >> 2]);
   }
  }
  jsvUnLock(HEAP32[$2 + 36 >> 2]);
  jsiTimersChanged();
  __stack_pointer = $2 + 48 | 0;
 }
 
 function jsvObjectIteratorHasValue_1659($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
 }
 
 function jsvObjectIteratorGetValue_1660($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvObjectIteratorFree_1661($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_interface_clearInterval($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  _jswrap_interface_clearTimeoutOrInterval(HEAP32[$1 + 12 >> 2], 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_interface_clearTimeout($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  _jswrap_interface_clearTimeoutOrInterval(HEAP32[$1 + 12 >> 2], 1);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_interface_changeInterval($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 44 >> 2] = $0;
  HEAPF64[$2 + 32 >> 3] = $1;
  HEAP32[$2 + 28 >> 2] = jsvLock(HEAPU16[184292]);
  if (HEAPF64[$2 + 32 >> 3] < .1) {
   HEAPF64[$2 + 32 >> 3] = .1
  }
  block : {
   if (jsvIsBasic(HEAP32[$2 + 44 >> 2]) & 1) {
    $0 = jsvFindChildFromVar(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 44 >> 2], 0);
    break block;
   }
   $0 = 0;
  }
  HEAP32[$2 + 24 >> 2] = $0;
  block1 : {
   if (HEAP32[$2 + 24 >> 2]) {
    HEAP32[$2 + 20 >> 2] = jsvSkipNameAndUnLock(HEAP32[$2 + 24 >> 2]);
    HEAP32[$2 + 8 >> 2] = jshGetTimeFromMilliseconds(HEAPF64[$2 + 32 >> 3]);
    $0 = i64toi32_i32$HIGH_BITS;
    HEAP32[$2 + 12 >> 2] = $0;
    $0 = HEAP32[$2 + 8 >> 2];
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 20 >> 2], 127751, jsvNewFromLongInteger($0, HEAP32[$2 + 12 >> 2]));
    $7 = HEAP32[$2 + 20 >> 2];
    $6 = jshGetSystemTime();
    $0 = i64toi32_i32$HIGH_BITS;
    $5 = $0;
    $0 = HEAP32[92162];
    $4 = $0;
    $3 = $6 - $0 | 0;
    $0 = HEAP32[92163];
    $5 = $5 - ($0 + ($4 >>> 0 > $6 >>> 0) | 0) | 0;
    $4 = HEAP32[$2 + 8 >> 2];
    $0 = $4 + $3 | 0;
    $3 = HEAP32[$2 + 12 >> 2] + $5 | 0;
    $3 = $0 >>> 0 < $4 >>> 0 ? $3 + 1 | 0 : $3;
    jsvObjectSetChildAndUnLock($7, 137570, jsvNewFromLongInteger($0, $3));
    jsvUnLock(HEAP32[$2 + 20 >> 2]);
    jsiTimersChanged();
    break block1;
   }
   jsExceptionHere(1, 135810, 0);
  }
  jsvUnLock(HEAP32[$2 + 28 >> 2]);
  __stack_pointer = $2 + 48 | 0;
 }
 
 function _jswrap_io_peek($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  block : {
   if (HEAP32[$2 + 4 >> 2] == 1) {
    HEAP32[$2 + 12 >> 2] = HEAPU8[HEAP32[$2 + 8 >> 2]];
    break block;
   }
   if (HEAP32[$2 + 4 >> 2] == 2) {
    HEAP32[$2 + 12 >> 2] = HEAPU8[HEAP32[$2 + 8 >> 2]] | HEAPU8[HEAP32[$2 + 8 >> 2] + 1 | 0] << 8;
    break block;
   }
   if (HEAP32[$2 + 4 >> 2] == 4) {
    HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
    break block;
   }
   HEAP32[$2 + 12 >> 2] = 0;
  }
  return HEAP32[$2 + 12 >> 2];
 }
 
 function jswrap_io_peek($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 96 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 88 >> 2] = $0;
  HEAP32[$3 + 84 >> 2] = $1;
  HEAP32[$3 + 80 >> 2] = $2;
  HEAP32[$3 + 76 >> 2] = jshFlashGetMemMapAddress(HEAP32[$3 + 88 >> 2]);
  block : {
   if (HEAP32[$3 + 84 >> 2] <= 1) {
    HEAP32[$3 + 92 >> 2] = jsvNewFromLongInteger(_jswrap_io_peek(HEAP32[$3 + 76 >> 2], HEAP32[$3 + 80 >> 2]), 0);
    break block;
   }
   if (HEAP32[$3 + 80 >> 2] == 1) {
    HEAP8[$3 + 75 | 0] = 1
   }
   if (HEAP32[$3 + 80 >> 2] == 2) {
    HEAP8[$3 + 75 | 0] = 2
   }
   if (HEAP32[$3 + 80 >> 2] == 4) {
    HEAP8[$3 + 75 | 0] = 4
   }
   HEAP32[$3 + 68 >> 2] = jsvNewTypedArray(HEAPU8[$3 + 75 | 0], HEAP32[$3 + 84 >> 2]);
   if (!HEAP32[$3 + 68 >> 2]) {
    HEAP32[$3 + 92 >> 2] = 0;
    break block;
   }
   jsvArrayBufferIteratorNew($3 + 12 | 0, HEAP32[$3 + 68 >> 2], 0);
   while (1) {
    if (jsvArrayBufferIteratorHasElement($3 + 12 | 0) & 1) {
     jsvArrayBufferIteratorSetIntegerValue($3 + 12 | 0, _jswrap_io_peek(HEAP32[$3 + 76 >> 2], HEAP32[$3 + 80 >> 2]));
     HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 80 >> 2] + HEAP32[$3 + 76 >> 2];
     jsvArrayBufferIteratorNext($3 + 12 | 0);
     continue;
    }
    break;
   };
   jsvArrayBufferIteratorFree($3 + 12 | 0);
   HEAP32[$3 + 92 >> 2] = HEAP32[$3 + 68 >> 2];
  }
  __stack_pointer = $3 + 96 | 0;
  return HEAP32[$3 + 92 >> 2];
 }
 
 function _jswrap_io_poke($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  block : {
   if (HEAP32[$3 + 4 >> 2] == 1) {
    HEAP8[HEAP32[$3 + 12 >> 2]] = HEAP32[$3 + 8 >> 2];
    break block;
   }
   block1 : {
    if (HEAP32[$3 + 4 >> 2] == 2) {
     HEAP16[HEAP32[$3 + 12 >> 2] >> 1] = HEAP32[$3 + 8 >> 2];
     break block1;
    }
    if (HEAP32[$3 + 4 >> 2] == 4) {
     HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = HEAP32[$3 + 8 >> 2]
    }
   }
  }
 }
 
 function jswrap_io_poke($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 80 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 76 >> 2] = $0;
  HEAP32[$3 + 72 >> 2] = $1;
  HEAP32[$3 + 68 >> 2] = $2;
  block : {
   if (jsvIsNumeric(HEAP32[$3 + 72 >> 2]) & 1) {
    _jswrap_io_poke(HEAP32[$3 + 76 >> 2], jsvGetInteger(HEAP32[$3 + 72 >> 2]), HEAP32[$3 + 68 >> 2]);
    break block;
   }
   if (jsvIsIterable(HEAP32[$3 + 72 >> 2]) & 1) {
    jsvIteratorNew($3 + 8 | 0, HEAP32[$3 + 72 >> 2], 1);
    while (1) {
     if (jsvIteratorHasElement($3 + 8 | 0) & 1) {
      _jswrap_io_poke(HEAP32[$3 + 76 >> 2], jsvIteratorGetIntegerValue($3 + 8 | 0), HEAP32[$3 + 68 >> 2]);
      HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 68 >> 2] + HEAP32[$3 + 76 >> 2];
      jsvIteratorNext($3 + 8 | 0);
      continue;
     }
     break;
    };
    jsvIteratorFree($3 + 8 | 0);
   }
  }
  __stack_pointer = $3 + 80 | 0;
 }
 
 function jswrap_io_analogWrite($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP8[$3 + 47 | 0] = $0;
  HEAPF64[$3 + 32 >> 3] = $1;
  HEAP32[$3 + 28 >> 2] = $2;
  HEAPF64[$3 + 16 >> 3] = 0;
  HEAP32[$3 + 12 >> 2] = 0;
  if (jsvIsObject(HEAP32[$3 + 28 >> 2]) & 1) {
   HEAPF64[$3 + 16 >> 3] = jsvObjectGetFloatChild(HEAP32[$3 + 28 >> 2], 128402);
   block : {
    if (jsvObjectGetBoolChild(HEAP32[$3 + 28 >> 2], 124955) & 1) {
     HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] | 2;
     break block;
    }
    if (jsvObjectGetBoolChild(HEAP32[$3 + 28 >> 2], 124950) & 1) {
     HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] | 1
    }
   }
  }
  jshPinAnalogOutput(HEAPU8[$3 + 47 | 0], HEAPF64[$3 + 32 >> 3], HEAPF64[$3 + 16 >> 3], HEAP32[$3 + 12 >> 2]);
  __stack_pointer = $3 + 48 | 0;
 }
 
 function jswrap_io_digitalPulse($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = __stack_pointer - 176 | 0;
  __stack_pointer = $3;
  HEAP8[$3 + 175 | 0] = $0;
  HEAP8[$3 + 174 | 0] = $1;
  HEAP32[$3 + 168 >> 2] = $2;
  block : {
   if (!(jshIsPinValid(HEAPU8[$3 + 175 | 0]) & 1)) {
    jsExceptionHere(1, 135419, 0);
    break block;
   }
   HEAP32[$3 + 136 >> 2] = jstGetUtilTimerOffset();
   HEAP8[$3 + 135 | 0] = jstGetLastPinTimerTask(HEAPU8[$3 + 175 | 0], $3 + 143 | 0) & 1;
   if (!(HEAP8[$3 + 135 | 0] & 1)) {
    HEAP8[$3 + 143 | 0] = 0;
    HEAP8[$3 + 144 | 0] = 0;
    HEAP8[$3 + 145 | 0] = 0;
    HEAP8[$3 + 146 | 0] = 0;
   }
   if (jsvIsNumeric(HEAP32[$3 + 168 >> 2]) & 1) {
    HEAPF64[$3 + 120 >> 3] = jsvGetFloat(HEAP32[$3 + 168 >> 2]);
    block3 : {
     block2 : {
      block1 : {
       if (HEAPF64[$3 + 120 >> 3] < 0.0) {
        break block1
       }
       $4 = __DOUBLE_BITS_1672(HEAPF64[$3 + 120 >> 3]);
       $1 = $4;
       $0 = i64toi32_i32$HIGH_BITS;
       $4 = $0 & 2147483647;
       $0 = $1;
       if (($4 | 0) == 2146435072 & ($0 | 0) != 0 | $4 >>> 0 > 2146435072) {
        break block1
       }
       break block2;
      }
      jsExceptionHere(1, 128331, 0);
      break block3;
     }
     block4 : {
      if (HEAPF64[$3 + 120 >> 3] > 0.0) {
       if (!(HEAP8[$3 + 135 | 0] & 1)) {
        jshPinOutput(HEAPU8[$3 + 175 | 0], HEAP8[$3 + 174 | 0] & 1)
       }
       $0 = jshGetTimeFromMilliseconds(HEAPF64[$3 + 120 >> 3]);
       $2 = $0;
       $4 = i64toi32_i32$HIGH_BITS;
       $1 = $4;
       $4 = HEAPU8[$3 + 143 | 0] | HEAPU8[$3 + 144 | 0] << 8 | (HEAPU8[$3 + 145 | 0] << 16 | HEAPU8[$3 + 146 | 0] << 24);
       $0 = $4 >> 31;
       $2 = $4 + $2 | 0;
       $4 = $0;
       $0 = $1;
       HEAP8[$3 + 143 | 0] = $2;
       HEAP8[$3 + 144 | 0] = $2 >>> 8;
       HEAP8[$3 + 145 | 0] = $2 >>> 16;
       HEAP8[$3 + 146 | 0] = $2 >>> 24;
       $1 = HEAPU8[$3 + 143 | 0] | HEAPU8[$3 + 144 | 0] << 8 | (HEAPU8[$3 + 145 | 0] << 16 | HEAPU8[$3 + 146 | 0] << 24);
       $2 = $1 >> 31;
       jstPinOutputAtTime($1, $2, $3 + 136 | 0, $3 + 175 | 0, 1, (HEAPU8[$3 + 174 | 0] ^ -1) & 1);
       break block4;
      }
      jstUtilTimerWaitEmpty();
     }
    }
    break block;
   }
   block5 : {
    if (jsvIsIterable(HEAP32[$3 + 168 >> 2]) & 1) {
     if (!(HEAP8[$3 + 135 | 0] & 1)) {
      jshPinOutput(HEAPU8[$3 + 175 | 0], HEAP8[$3 + 174 | 0] & 1)
     }
     jsvIteratorNew($3 + 60 | 0, HEAP32[$3 + 168 >> 2], 1);
     while (1) {
      if (jsvIteratorHasElement($3 + 60 | 0) & 1) {
       HEAPF64[$3 + 48 >> 3] = jsvIteratorGetFloatValue($3 + 60 | 0);
       $2 = __DOUBLE_BITS_1672(HEAPF64[$3 + 48 >> 3]);
       $0 = $2;
       $1 = i64toi32_i32$HIGH_BITS;
       $2 = $1 & 2147483647;
       $1 = $0;
       if ((!$1 & ($2 | 0) == 2146435072 | $2 >>> 0 < 2146435072) & HEAPF64[$3 + 48 >> 3] > 0.0) {
        $1 = jshGetTimeFromMilliseconds(HEAPF64[$3 + 48 >> 3]);
        $5 = $1;
        $2 = i64toi32_i32$HIGH_BITS;
        $4 = $2;
        $2 = HEAPU8[$3 + 143 | 0] | HEAPU8[$3 + 144 | 0] << 8 | (HEAPU8[$3 + 145 | 0] << 16 | HEAPU8[$3 + 146 | 0] << 24);
        $1 = $2 >> 31;
        $0 = $2;
        $2 = $1;
        $1 = $4;
        $2 = $2 + $1 | 0;
        $1 = $5;
        $4 = $0 + $1 | 0;
        HEAP8[$3 + 143 | 0] = $4;
        HEAP8[$3 + 144 | 0] = $4 >>> 8;
        HEAP8[$3 + 145 | 0] = $4 >>> 16;
        HEAP8[$3 + 146 | 0] = $4 >>> 24;
        $2 = HEAPU8[$3 + 143 | 0] | HEAPU8[$3 + 144 | 0] << 8 | (HEAPU8[$3 + 145 | 0] << 16 | HEAPU8[$3 + 146 | 0] << 24);
        $1 = $2 >> 31;
        jstPinOutputAtTime($2, $1, $3 + 136 | 0, $3 + 175 | 0, 1, (HEAPU8[$3 + 174 | 0] ^ -1) & 1);
       }
       HEAP8[$3 + 174 | 0] = (HEAPU8[$3 + 174 | 0] ^ -1) & 1;
       jsvIteratorNext($3 + 60 | 0);
       continue;
      }
      break;
     };
     jsvIteratorFree($3 + 60 | 0);
     break block5;
    }
    HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 168 >> 2];
    jsExceptionHere(1, 125435, $3 + 32 | 0);
   }
  }
  __stack_pointer = $3 + 176 | 0;
 }
 
 function __DOUBLE_BITS_1672($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAPF64[$1 + 8 >> 3] = $0;
  HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  return HEAP32[$1 >> 2];
 }
 
 function jswrap_io_digitalWrite($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 44 >> 2] = $0;
  HEAP32[$2 + 40 >> 2] = $1;
  block : {
   if (jsvIsBoolean(HEAP32[$2 + 40 >> 2]) & 1) {
    HEAP32[$2 + 36 >> 2] = jsvGetBool(HEAP32[$2 + 40 >> 2]) & 1 ? -1 : 0;
    break block;
   }
   HEAP32[$2 + 36 >> 2] = jsvGetInteger(HEAP32[$2 + 40 >> 2]);
  }
  block1 : {
   if (jsvIsArray(HEAP32[$2 + 44 >> 2]) & 1) {
    HEAP16[$2 + 34 >> 1] = jsvGetLastChild(HEAP32[$2 + 44 >> 2]);
    while (1) {
     if (HEAPU16[$2 + 34 >> 1]) {
      HEAP32[$2 + 28 >> 2] = jsvLock(HEAPU16[$2 + 34 >> 1]);
      HEAP32[$2 + 24 >> 2] = jsvSkipName(HEAP32[$2 + 28 >> 2]);
      jshPinOutput(jshGetPinFromVar(HEAP32[$2 + 24 >> 2]) & 255, HEAP32[$2 + 36 >> 2] & 1);
      jsvUnLock(HEAP32[$2 + 24 >> 2]);
      HEAP16[$2 + 34 >> 1] = jsvGetPrevSibling(HEAP32[$2 + 28 >> 2]);
      jsvUnLock(HEAP32[$2 + 28 >> 2]);
      HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 36 >> 2] >> 1;
      continue;
     }
     break;
    };
    break block1;
   }
   block3 : {
    if (jsvIsObject(HEAP32[$2 + 44 >> 2]) & 1) {
     HEAP32[$2 + 20 >> 2] = jspGetNamedField(HEAP32[$2 + 44 >> 2], 137316, 0);
     block2 : {
      if (jsvIsFunction(HEAP32[$2 + 20 >> 2]) & 1) {
       HEAP32[$2 + 16 >> 2] = jsvNewFromInteger(HEAP32[$2 + 36 >> 2]);
       jsvUnLock2(jspeFunctionCall(HEAP32[$2 + 20 >> 2], 0, HEAP32[$2 + 44 >> 2], 0, 1, $2 + 16 | 0), HEAP32[$2 + 16 >> 2]);
       break block2;
      }
      jsExceptionHere(1, 135419, 0);
     }
     jsvUnLock(HEAP32[$2 + 20 >> 2]);
     break block3;
    }
    HEAP8[$2 + 15 | 0] = jshGetPinFromVar(HEAP32[$2 + 44 >> 2]);
    jshPinOutput(HEAPU8[$2 + 15 | 0], HEAP32[$2 + 36 >> 2] != 0);
   }
  }
  __stack_pointer = $2 + 48 | 0;
 }
 
 function jswrap_io_digitalRead($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 48 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 40 >> 2] = $0;
  block : {
   if (jsvIsArray(HEAP32[$1 + 40 >> 2]) & 1) {
    HEAP32[$1 + 36 >> 2] = 0;
    HEAP32[$1 + 32 >> 2] = 0;
    jsvObjectIteratorNew($1 + 28 | 0, HEAP32[$1 + 40 >> 2]);
    while (1) {
     if (jsvObjectIteratorHasValue_1675($1 + 28 | 0) & 1) {
      HEAP32[$1 + 24 >> 2] = jsvObjectIteratorGetValue_1676($1 + 28 | 0);
      HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 32 >> 2] << 1 | jshPinInput(jshGetPinFromVar(HEAP32[$1 + 24 >> 2]) & 255) & 1;
      jsvUnLock(HEAP32[$1 + 24 >> 2]);
      jsvObjectIteratorNext($1 + 28 | 0);
      HEAP32[$1 + 36 >> 2] = HEAP32[$1 + 36 >> 2] + 1;
      continue;
     }
     break;
    };
    jsvObjectIteratorFree_1677($1 + 28 | 0);
    if (!HEAP32[$1 + 36 >> 2]) {
     HEAP32[$1 + 44 >> 2] = 0;
     break block;
    }
    HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 32 >> 2];
    break block;
   }
   if (jsvIsObject(HEAP32[$1 + 40 >> 2]) & 1) {
    HEAP32[$1 + 20 >> 2] = 0;
    HEAP32[$1 + 16 >> 2] = jspGetNamedField(HEAP32[$1 + 40 >> 2], 139321, 0);
    block1 : {
     if (jsvIsFunction(HEAP32[$1 + 16 >> 2]) & 1) {
      HEAP32[$1 + 20 >> 2] = jsvGetIntegerAndUnLock(jspeFunctionCall(HEAP32[$1 + 16 >> 2], 0, HEAP32[$1 + 40 >> 2], 0, 0, 0));
      break block1;
     }
     jsExceptionHere(1, 135419, 0);
    }
    jsvUnLock(HEAP32[$1 + 16 >> 2]);
    HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 20 >> 2];
    break block;
   }
   HEAP8[$1 + 15 | 0] = jshGetPinFromVar(HEAP32[$1 + 40 >> 2]);
   HEAP32[$1 + 44 >> 2] = jshPinInput(HEAPU8[$1 + 15 | 0]) & 1;
  }
  __stack_pointer = $1 + 48 | 0;
  return HEAP32[$1 + 44 >> 2];
 }
 
 function jsvObjectIteratorHasValue_1675($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
 }
 
 function jsvObjectIteratorGetValue_1676($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jsvObjectIteratorFree_1677($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_io_pinMode($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP8[$3 + 15 | 0] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP8[$3 + 7 | 0] = $2;
  block : {
   if (!(jshIsPinValid(HEAPU8[$3 + 15 | 0]) & 1)) {
    jsExceptionHere(1, 135419, 0);
    break block;
   }
   HEAP8[$3 + 6 | 0] = 0;
   if (jsvIsString(HEAP32[$3 + 8 >> 2]) & 1) {
    block1 : {
     if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 136449) & 1) {
      HEAP8[$3 + 6 | 0] = 7;
      break block1;
     }
     block2 : {
      if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 124373) & 1) {
       HEAP8[$3 + 6 | 0] = 4;
       break block2;
      }
      block3 : {
       if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 128611) & 1) {
        HEAP8[$3 + 6 | 0] = 5;
        break block3;
       }
       block4 : {
        if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 135046) & 1) {
         HEAP8[$3 + 6 | 0] = 6;
         break block4;
        }
        block5 : {
         if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 124366) & 1) {
          HEAP8[$3 + 6 | 0] = 1;
          break block5;
         }
         block6 : {
          if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 135440) & 1) {
           HEAP8[$3 + 6 | 0] = 2;
           break block6;
          }
          block7 : {
           if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 128624) & 1) {
            HEAP8[$3 + 6 | 0] = 3;
            break block7;
           }
           block8 : {
            if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 124363) & 1) {
             HEAP8[$3 + 6 | 0] = 8;
             break block8;
            }
            if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 135437) & 1) {
             HEAP8[$3 + 6 | 0] = 9
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
   if (HEAPU8[$3 + 6 | 0]) {
    jshSetPinStateIsManual(HEAPU8[$3 + 15 | 0], (HEAPU8[$3 + 7 | 0] ^ -1) & 1);
    jshPinSetState(HEAPU8[$3 + 15 | 0], HEAPU8[$3 + 6 | 0]);
    break block;
   }
   jshSetPinStateIsManual(HEAPU8[$3 + 15 | 0], 0);
   block9 : {
    if (jsvIsUndefined(HEAP32[$3 + 8 >> 2]) & 1) {
     break block9
    }
    if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 135010) & 1) {
     break block9
    }
    jsExceptionHere(1, 137947, 0);
   }
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jswrap_io_getPinMode($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 11 | 0] = $0;
  block : {
   if (!(jshIsPinValid(HEAPU8[$1 + 11 | 0]) & 1)) {
    jsExceptionHere(1, 135419, 0);
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jshGetPinStateString(jshPinGetState(HEAPU8[$1 + 11 | 0]) & 255);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jswrap_io_shiftOutCallback($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 24 >> 2];
  HEAP32[$2 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 12 >> 2] < HEAP32[HEAP32[$2 + 20 >> 2] + 16 >> 2]) {
    HEAP32[$2 + 16 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 12 >> 2] - 1;
    while (1) {
     if (HEAP32[$2 + 16 >> 2] >= 0) {
      if (jshIsPinValid(HEAPU8[HEAP32[$2 + 20 >> 2] + HEAP32[$2 + 16 >> 2] | 0]) & 1) {
       jshPinSetValue(HEAPU8[HEAP32[$2 + 20 >> 2] + HEAP32[$2 + 16 >> 2] | 0], HEAP32[$2 + 28 >> 2] & 1)
      }
      HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 28 >> 2] >> 1;
      HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 16 >> 2] - 1;
      continue;
     }
     break;
    };
    if (jshIsPinValid(HEAPU8[HEAP32[$2 + 20 >> 2] + 8 | 0]) & 1) {
     jshPinSetValue(HEAPU8[HEAP32[$2 + 20 >> 2] + 8 | 0], HEAP8[HEAP32[$2 + 20 >> 2] + 9 | 0] & 1);
     jshPinSetValue(HEAPU8[HEAP32[$2 + 20 >> 2] + 8 | 0], (HEAPU8[HEAP32[$2 + 20 >> 2] + 9 | 0] ^ -1) & 1);
    }
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
    continue;
   }
   break;
  };
  __stack_pointer = $2 + 32 | 0;
 }
 
 function jswrap_io_shiftOut($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 96 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 92 >> 2] = $0;
  HEAP32[$3 + 88 >> 2] = $1;
  HEAP32[$3 + 84 >> 2] = $2;
  HEAP32[$3 + 76 >> 2] = 0;
  HEAP8[$3 + 72 | 0] = 255;
  HEAP8[$3 + 73 | 0] = 0;
  HEAP32[$3 + 80 >> 2] = 1;
  HEAP32[$3 + 16 >> 2] = 135885;
  HEAP16[$3 + 20 >> 1] = 13;
  HEAP16[($3 + 16 | 0) + 6 >> 1] = 0;
  HEAP32[$3 + 24 >> 2] = $3 + 72;
  HEAP32[$3 + 28 >> 2] = 135666;
  HEAP16[$3 + 32 >> 1] = 12;
  HEAP16[($3 + 16 | 0) + 18 >> 1] = 0;
  HEAP32[$3 + 36 >> 2] = $3 + 73;
  HEAP32[$3 + 40 >> 2] = 125123;
  HEAP16[$3 + 44 >> 1] = 10;
  HEAP16[($3 + 16 | 0) + 30 >> 1] = 0;
  HEAP32[$3 + 48 >> 2] = $3 + 80;
  block : {
   if (!(jsvReadConfigObject(HEAP32[$3 + 88 >> 2], $3 + 16 | 0, 3) & 1)) {
    break block
   }
   HEAP8[$3 + 73 | 0] = HEAP8[$3 + 73 | 0] & 1;
   if (HEAP32[$3 + 80 >> 2] <= 0) {
    HEAP32[$3 + 80 >> 2] = 1
   }
   block1 : {
    if (jsvIsArray(HEAP32[$3 + 92 >> 2]) & 1) {
     jsvObjectIteratorNew($3 + 12 | 0, HEAP32[$3 + 92 >> 2]);
     while (1) {
      if (jsvObjectIteratorHasValue_1675($3 + 12 | 0) & 1) {
       if (HEAP32[$3 + 76 >> 2] >= 8) {
        HEAP32[$3 >> 2] = 8;
        jsExceptionHere(1, 135513, $3);
        break block;
       } else {
        $0 = jshGetPinFromVarAndUnLock(jsvObjectIteratorGetValue_1676($3 + 12 | 0));
        HEAP8[HEAP32[$3 + 76 >> 2] + ($3 - -64 | 0) | 0] = $0;
        HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
        jsvObjectIteratorNext($3 + 12 | 0);
        continue;
       }
      }
      break;
     };
     jsvObjectIteratorFree_1677($3 + 12 | 0);
     break block1;
    }
    $1 = jshGetPinFromVar(HEAP32[$3 + 92 >> 2]);
    $0 = HEAP32[$3 + 76 >> 2];
    HEAP32[$3 + 76 >> 2] = $0 + 1;
    HEAP8[($3 - -64 | 0) + $0 | 0] = $1;
   }
   HEAP32[$3 + 8 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 8 >> 2] < HEAP32[$3 + 76 >> 2]) {
     if (jshIsPinValid(HEAPU8[HEAP32[$3 + 8 >> 2] + ($3 - -64 | 0) | 0]) & 1) {
      if (!(jshGetPinStateIsManual(HEAPU8[HEAP32[$3 + 8 >> 2] + ($3 - -64 | 0) | 0]) & 1)) {
       jshPinSetState(HEAPU8[HEAP32[$3 + 8 >> 2] + ($3 - -64 | 0) | 0], 1)
      }
     }
     HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + 1;
     continue;
    }
    break;
   };
   if (jshIsPinValid(HEAPU8[$3 + 72 | 0]) & 1) {
    jshPinSetState(HEAPU8[$3 + 72 | 0], 1)
   }
   jsvIterateCallback(HEAP32[$3 + 84 >> 2], 624, $3 - -64 | 0);
  }
  __stack_pointer = $3 + 96 | 0;
 }
 
 function jswrap_interface_setWatch($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 80 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 72 >> 2] = $0;
  HEAP8[$3 + 71 | 0] = $1;
  HEAP32[$3 + 64 >> 2] = $2;
  block : {
   if (!(jshIsPinValid(HEAPU8[$3 + 71 | 0]) & 1)) {
    jsError(135419, 0);
    HEAP32[$3 + 76 >> 2] = 0;
    break block;
   }
   block1 : {
    if (jsiIsWatchingPin(HEAPU8[$3 + 71 | 0]) & 1) {
     break block1
    }
    if (jshCanWatch(HEAPU8[$3 + 71 | 0]) & 1) {
     break block1
    }
    jsWarn(136310, 0);
    HEAP32[$3 + 76 >> 2] = 0;
    break block;
   }
   HEAP8[$3 + 63 | 0] = 0;
   HEAPF64[$3 + 48 >> 3] = 0;
   HEAP32[$3 + 44 >> 2] = 0;
   HEAP8[$3 + 43 | 0] = 0;
   HEAP8[$3 + 42 | 0] = 0;
   HEAP8[$3 + 41 | 0] = 255;
   if (HEAPU8[$3 + 71 | 0] == 17) {
    HEAP32[$3 + 44 >> 2] = 1;
    HEAPF64[$3 + 48 >> 3] = 25;
   }
   block7 : {
    if (jsvIsObject(HEAP32[$3 + 64 >> 2]) & 1) {
     HEAP32[$3 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 64 >> 2], 125123);
     if (HEAP32[$3 + 36 >> 2]) {
      HEAP8[$3 + 63 | 0] = jsvGetBoolAndUnLock(HEAP32[$3 + 36 >> 2]) & 1
     }
     HEAP32[$3 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 64 >> 2], 138005);
     if (HEAP32[$3 + 36 >> 2]) {
      HEAPF64[$3 + 48 >> 3] = jsvGetFloatAndUnLock(HEAP32[$3 + 36 >> 2])
     }
     $1 = __DOUBLE_BITS_1672(HEAPF64[$3 + 48 >> 3]);
     $0 = $1;
     $2 = i64toi32_i32$HIGH_BITS;
     $1 = $2 & 2147483647;
     $2 = $0;
     if (!(!(HEAPF64[$3 + 48 >> 3] < 0.0) & (!$2 & ($1 | 0) == 2146435072 | $1 >>> 0 < 2146435072))) {
      HEAPF64[$3 + 48 >> 3] = 0
     }
     HEAP32[$3 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 64 >> 2], 137838);
     if (!(jsvIsUndefined(HEAP32[$3 + 36 >> 2]) & 1)) {
      block3 : {
       if (jsvIsNumeric(HEAP32[$3 + 36 >> 2]) & 1) {
        HEAP32[$3 + 32 >> 2] = jsvGetInteger(HEAP32[$3 + 36 >> 2]);
        HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 32 >> 2] > 0 ? 1 : HEAP32[$3 + 32 >> 2] < 0 ? -1 : 0;
        break block3;
       }
       HEAP32[$3 + 44 >> 2] = -1e3;
       if (jsvIsString(HEAP32[$3 + 36 >> 2]) & 1) {
        block4 : {
         if (jsvIsStringEqual(HEAP32[$3 + 36 >> 2], 136492) & 1) {
          HEAP32[$3 + 44 >> 2] = 1;
          break block4;
         }
         block5 : {
          if (jsvIsStringEqual(HEAP32[$3 + 36 >> 2], 136778) & 1) {
           HEAP32[$3 + 44 >> 2] = -1;
           break block5;
          }
          if (jsvIsStringEqual(HEAP32[$3 + 36 >> 2], 136092) & 1) {
           HEAP32[$3 + 44 >> 2] = 0
          }
         }
        }
       }
      }
     }
     jsvUnLock(HEAP32[$3 + 36 >> 2]);
     if (!(HEAP32[$3 + 44 >> 2] <= 1 & HEAP32[$3 + 44 >> 2] >= -1)) {
      jsExceptionHere(3, 146429, 0);
      HEAP32[$3 + 76 >> 2] = 0;
      break block;
     }
     HEAP8[$3 + 43 | 0] = jsvObjectGetBoolChild(HEAP32[$3 + 64 >> 2], 128398) & 1;
     HEAP8[$3 + 41 | 0] = jshGetPinFromVarAndUnLock(jsvObjectGetChildIfExists(HEAP32[$3 + 64 >> 2], 140390));
     break block7;
    }
    HEAP8[$3 + 63 | 0] = jsvGetBool(HEAP32[$3 + 64 >> 2]) & 1;
   }
   HEAP32[$3 + 28 >> 2] = -1;
   block9 : {
    block8 : {
     if (jsvIsFunction(HEAP32[$3 + 72 >> 2]) & 1) {
      break block8
     }
     if (jsvIsString(HEAP32[$3 + 72 >> 2]) & 1) {
      break block8
     }
     jsExceptionHere(1, 146671, 0);
     break block9;
    }
    HEAP32[$3 + 24 >> 2] = jsvNewObject();
    if (HEAP32[$3 + 24 >> 2]) {
     jsvObjectSetChildAndUnLock(HEAP32[$3 + 24 >> 2], 135427, jsvNewFromPin(HEAPU8[$3 + 71 | 0]));
     if (HEAP8[$3 + 63 | 0] & 1) {
      jsvObjectSetChildAndUnLock(HEAP32[$3 + 24 >> 2], 127745, jsvNewFromBool(HEAP8[$3 + 63 | 0] & 1))
     }
     if (HEAPF64[$3 + 48 >> 3] > 0.0) {
      $0 = HEAP32[$3 + 24 >> 2];
      $2 = jshGetTimeFromMilliseconds(HEAPF64[$3 + 48 >> 3]);
      jsvObjectSetChildAndUnLock($0, 138005, jsvNewFromInteger($2));
     }
     if (HEAP32[$3 + 44 >> 2]) {
      jsvObjectSetChildAndUnLock(HEAP32[$3 + 24 >> 2], 137838, jsvNewFromInteger(HEAP32[$3 + 44 >> 2]))
     }
     jsvObjectSetChild(HEAP32[$3 + 24 >> 2], 140265, HEAP32[$3 + 72 >> 2]);
     jsvObjectSetChildAndUnLock(HEAP32[$3 + 24 >> 2], 137340, jsvNewFromBool(jshPinInput(HEAPU8[$3 + 71 | 0]) & 1));
     if (HEAP8[$3 + 42 | 0] & 1) {
      jsvObjectSetChildAndUnLock(HEAP32[$3 + 24 >> 2], 139029, jsvNewFromBool(1))
     }
    }
    HEAP8[$3 + 23 | 0] = 0;
    if (!(jsiIsWatchingPin(HEAPU8[$3 + 71 | 0]) & 1)) {
     HEAP8[$3 + 23 | 0] = jshPinWatch(HEAPU8[$3 + 71 | 0], 1, HEAP8[$3 + 42 | 0] & 1)
    }
    block12 : {
     if (HEAPU8[$3 + 23 | 0]) {
      jshSetEventCallback(HEAPU8[$3 + 23 | 0], 0);
      if (jshIsPinValid(HEAPU8[$3 + 41 | 0]) & 1) {
       jshSetEventDataPin(HEAPU8[$3 + 23 | 0], HEAPU8[$3 + 41 | 0])
      }
      if (HEAP8[$3 + 43 | 0] & 1) {
       block10 : {
        if (jsvIsNativeFunction(HEAP32[$3 + 72 >> 2]) & 1) {
         jshSetEventCallback(HEAPU8[$3 + 23 | 0], jsvGetNativeFunctionPtr(HEAP32[$3 + 72 >> 2]));
         break block10;
        }
        block11 : {
         if (jshIsPinValid(HEAPU8[$3 + 41 | 0]) & 1) {
          jsExceptionHere(1, 137071, 0);
          break block11;
         }
         jsExceptionHere(1, 135121, 0);
        }
       }
      }
      break block12;
     }
     if (HEAP8[$3 + 43 | 0] & 1) {
      jsExceptionHere(1, 138740, 0)
     }
    }
    HEAP32[$3 + 16 >> 2] = jsvLock(HEAPU16[184293]);
    HEAP32[$3 + 28 >> 2] = jsvArrayAddToEnd(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 24 >> 2], 1) - 1;
    jsvUnLock2(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 24 >> 2]);
   }
   block13 : {
    if (HEAP32[$3 + 28 >> 2] >= 0) {
     $0 = jsvNewFromInteger(HEAP32[$3 + 28 >> 2]);
     break block13;
    }
    $0 = 0;
   }
   HEAP32[$3 + 76 >> 2] = $0;
  }
  __stack_pointer = $3 + 80 | 0;
  return HEAP32[$3 + 76 >> 2];
 }
 
 function jswrap_interface_clearWatch($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer + -64 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 60 >> 2] = $0;
  block1 : {
   block : {
    if (!(jsvIsUndefined(HEAP32[$1 + 60 >> 2]) & 1)) {
     if (jsvGetArrayLength(HEAP32[$1 + 60 >> 2])) {
      break block
     }
    }
    HEAP32[$1 + 56 >> 2] = jsvLock(HEAPU16[184293]);
    jsvObjectIteratorNew($1 + 52 | 0, HEAP32[$1 + 56 >> 2]);
    while (1) {
     if (jsvObjectIteratorHasValue_1675($1 + 52 | 0) & 1) {
      HEAP32[$1 + 48 >> 2] = jsvObjectIteratorGetValue_1676($1 + 52 | 0);
      HEAP32[$1 + 44 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 48 >> 2], 135427);
      HEAP8[$1 + 43 | 0] = jshGetPinFromVar(HEAP32[$1 + 44 >> 2]);
      if (!(jshGetPinShouldStayWatched(HEAPU8[$1 + 43 | 0]) & 1)) {
       jshPinWatch(HEAPU8[$1 + 43 | 0], 0, 0)
      }
      jsvUnLock2(HEAP32[$1 + 44 >> 2], HEAP32[$1 + 48 >> 2]);
      jsvObjectIteratorNext($1 + 52 | 0);
      continue;
     }
     break;
    };
    jsvObjectIteratorFree_1677($1 + 52 | 0);
    jsvRemoveAllChildren(HEAP32[$1 + 56 >> 2]);
    jsvUnLock(HEAP32[$1 + 56 >> 2]);
    break block1;
   }
   HEAP32[$1 + 36 >> 2] = jsvGetArrayItem(HEAP32[$1 + 60 >> 2], 0);
   if (jsvIsUndefined(HEAP32[$1 + 36 >> 2]) & 1) {
    jsExceptionHere(1, 139261, 0);
    break block1;
   }
   HEAP32[$1 + 32 >> 2] = jsvLock(HEAPU16[184293]);
   HEAP32[$1 + 28 >> 2] = jsvFindChildFromVar(HEAP32[$1 + 32 >> 2], HEAP32[$1 + 36 >> 2], 0);
   jsvUnLock(HEAP32[$1 + 32 >> 2]);
   block2 : {
    if (HEAP32[$1 + 28 >> 2]) {
     HEAP32[$1 + 24 >> 2] = jsvSkipName(HEAP32[$1 + 28 >> 2]);
     HEAP8[$1 + 23 | 0] = jshGetPinFromVarAndUnLock(jsvObjectGetChildIfExists(HEAP32[$1 + 24 >> 2], 135427));
     jsvUnLock(HEAP32[$1 + 24 >> 2]);
     HEAP32[$1 + 16 >> 2] = jsvLock(HEAPU16[184293]);
     jsvRemoveChildAndUnLock(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 28 >> 2]);
     jsvUnLock(HEAP32[$1 + 16 >> 2]);
     if (!(jsiIsWatchingPin(HEAPU8[$1 + 23 | 0]) & 1)) {
      jshPinWatch(HEAPU8[$1 + 23 | 0], 0, 0)
     }
     break block2;
    }
    HEAP32[$1 >> 2] = HEAP32[$1 + 36 >> 2];
    jsExceptionHere(1, 124297, $1);
   }
   jsvUnLock(HEAP32[$1 + 36 >> 2]);
  }
  __stack_pointer = $1 - -64 | 0;
 }
 
 function jswrap_pin_constructor($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP8[$1 + 7 | 0] = jshGetPinFromVar(HEAP32[$1 + 8 >> 2]);
  block : {
   if (!(jshIsPinValid(HEAPU8[$1 + 7 | 0]) & 1)) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvNewFromPin(HEAPU8[$1 + 7 | 0]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jswrap_pin_read($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP8[$1 + 11 | 0] = jshGetPinFromVar(HEAP32[$1 + 12 >> 2]);
  $0 = jshPinInput(HEAPU8[$1 + 11 | 0]);
  __stack_pointer = $1 + 16 | 0;
  return $0 & 1;
 }
 
 function jswrap_pin_set($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP8[$1 + 11 | 0] = jshGetPinFromVar(HEAP32[$1 + 12 >> 2]);
  jshPinOutput(HEAPU8[$1 + 11 | 0], 1);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_pin_reset($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP8[$1 + 11 | 0] = jshGetPinFromVar(HEAP32[$1 + 12 >> 2]);
  jshPinOutput(HEAPU8[$1 + 11 | 0], 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_pin_write($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP8[$2 + 11 | 0] = $1;
  HEAP8[$2 + 10 | 0] = jshGetPinFromVar(HEAP32[$2 + 12 >> 2]);
  jshPinOutput(HEAPU8[$2 + 10 | 0], HEAP8[$2 + 11 | 0] & 1);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jswrap_pin_writeAtTime($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP8[$3 + 27 | 0] = $1;
  HEAPF64[$3 + 16 >> 3] = $2;
  HEAP8[$3 + 15 | 0] = jshGetPinFromVar(HEAP32[$3 + 28 >> 2]);
  $0 = jshGetTimeFromMilliseconds(HEAPF64[$3 + 16 >> 3] * 1.0e3);
  $4 = i64toi32_i32$HIGH_BITS;
  $1 = jshGetSystemTime();
  HEAP32[$3 >> 2] = $0 - $1;
  HEAP32[$3 + 4 >> 2] = $4 - (i64toi32_i32$HIGH_BITS + ($0 >>> 0 < $1 >>> 0) | 0);
  jstPinOutputAtTime(HEAP32[$3 >> 2], HEAP32[$3 + 4 >> 2], 0, $3 + 15 | 0, 1, HEAP8[$3 + 27 | 0] & 1);
  __stack_pointer = $3 + 32 | 0;
 }
 
 function jswrap_pin_getMode($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jswrap_io_getPinMode(jshGetPinFromVar(HEAP32[$1 + 12 >> 2]) & 255);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function jswrap_pin_mode($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  jswrap_io_pinMode(jshGetPinFromVar(HEAP32[$2 + 12 >> 2]) & 255, HEAP32[$2 + 8 >> 2], 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jswrap_pin_toggle($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP8[$1 + 7 | 0] = jshGetPinFromVar(HEAP32[$1 + 8 >> 2]);
  block : {
   if (!(jshIsPinValid(HEAPU8[$1 + 7 | 0]) & 1)) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   HEAP8[$1 + 6 | 0] = ((jshPinGetState(HEAPU8[$1 + 7 | 0]) & 16) != 0 ^ -1) & 1;
   jshPinOutput(HEAPU8[$1 + 7 | 0], HEAP8[$1 + 6 | 0] & 1);
   HEAP8[$1 + 15 | 0] = HEAP8[$1 + 6 | 0] & 1;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jswrap_pin_pulse($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP8[$3 + 11 | 0] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  jswrap_io_digitalPulse(jshGetPinFromVar(HEAP32[$3 + 12 >> 2]) & 255, HEAP8[$3 + 11 | 0] & 1, HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jswrap_pin_analog($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0.0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $2 = jshPinAnalog(jshGetPinFromVar(HEAP32[$1 + 12 >> 2]) & 255);
  __stack_pointer = $1 + 16 | 0;
  return +$2;
 }
 
 function jswrap_pin_pwm($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAPF64[$3 + 16 >> 3] = $1;
  HEAP32[$3 + 12 >> 2] = $2;
  jswrap_io_analogWrite(jshGetPinFromVar(HEAP32[$3 + 28 >> 2]) & 255, HEAPF64[$3 + 16 >> 3], HEAP32[$3 + 12 >> 2]);
  __stack_pointer = $3 + 32 | 0;
 }
 
 function jswrap_pin_getInfo($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer + -64 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 56 >> 2] = $0;
  HEAP8[$1 + 55 | 0] = jshGetPinFromVar(HEAP32[$1 + 56 >> 2]);
  block : {
   if (!(jshIsPinValid(HEAPU8[$1 + 55 | 0]) & 1)) {
    HEAP32[$1 + 60 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 48 >> 2] = Math_imul(HEAPU8[$1 + 55 | 0], 3) + 182064;
   HEAP32[$1 + 44 >> 2] = jsvNewObject();
   if (!HEAP32[$1 + 44 >> 2]) {
    HEAP32[$1 + 60 >> 2] = 0;
    break block;
   }
   HEAP8[$1 + 42 | 0] = HEAPU8[HEAP32[$1 + 48 >> 2]] - -64;
   HEAP8[$1 + 43 | 0] = 0;
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 44 >> 2], 124574, jsvNewFromString($1 + 42 | 0));
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 44 >> 2], 135509, jsvNewFromInteger(HEAPU8[HEAP32[$1 + 48 >> 2] + 1 | 0]));
   HEAP8[$1 + 41 | 0] = jshPinGetState(HEAPU8[$1 + 55 | 0]);
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 44 >> 2], 137959, jshGetPinStateString(HEAPU8[$1 + 41 | 0]));
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 44 >> 2], 124366, jsvNewFromInteger(!!(HEAPU8[$1 + 41 | 0] & 16)));
   if (HEAPU8[HEAP32[$1 + 48 >> 2] + 2 | 0]) {
    HEAP32[$1 + 36 >> 2] = jsvNewObject();
    if (HEAP32[$1 + 36 >> 2]) {
     HEAP32[$1 + 32 >> 2] = jsvNewEmptyArray();
     if (HEAP32[$1 + 32 >> 2]) {
      HEAP32[$1 + 28 >> 2] = 0;
      while (1) {
       if (HEAP32[$1 + 28 >> 2] < 0) {
        if (HEAPU8[HEAP32[$1 + 48 >> 2] + 2 | 0] & 32 << HEAP32[$1 + 28 >> 2]) {
         jsvArrayPushAndUnLock(HEAP32[$1 + 32 >> 2], jsvNewFromInteger(HEAP32[$1 + 28 >> 2] + 1 | 0))
        }
        HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 28 >> 2] + 1;
        continue;
       }
       break;
      };
      jsvObjectSetChildAndUnLock(HEAP32[$1 + 36 >> 2], 127617, HEAP32[$1 + 32 >> 2]);
     }
     jsvObjectSetChildAndUnLock(HEAP32[$1 + 36 >> 2], 135754, jsvNewFromInteger(HEAPU8[HEAP32[$1 + 48 >> 2] + 2 | 0] & 31));
     jsvObjectSetChildAndUnLock(HEAP32[$1 + 44 >> 2], 135754, jsvNewFromInteger(HEAPU8[HEAP32[$1 + 48 >> 2] + 2 | 0] & 31));
     jsvObjectSetChildAndUnLock(HEAP32[$1 + 44 >> 2], 136449, HEAP32[$1 + 36 >> 2]);
    }
   }
   HEAP32[$1 + 24 >> 2] = jsvNewObject();
   if (HEAP32[$1 + 24 >> 2]) {
    HEAP32[$1 + 20 >> 2] = 0;
    while (1) {
     if (HEAP32[$1 + 20 >> 2] < 0) {
      $0 = (HEAP32[$1 + 48 >> 2] + 3 | 0) + (HEAP32[$1 + 20 >> 2] << 1) | 0;
      if (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8) {
       HEAP32[$1 + 16 >> 2] = jsvNewObject();
       if (HEAP32[$1 + 16 >> 2]) {
        $0 = (HEAP32[$1 + 48 >> 2] + 3 | 0) + (HEAP32[$1 + 20 >> 2] << 1) | 0;
        jshPinFunctionToString(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8, 8, $1, 16);
        jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 137544, jsvNewFromString($1));
        $0 = (HEAP32[$1 + 48 >> 2] + 3 | 0) + (HEAP32[$1 + 20 >> 2] << 1) | 0;
        jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 136912, jsvNewFromInteger((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8) & 15));
        $0 = (HEAP32[$1 + 48 >> 2] + 3 | 0) + (HEAP32[$1 + 20 >> 2] << 1) | 0;
        jshPinFunctionToString(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8, 3, $1, 16);
        jsvObjectSetChildAndUnLock(HEAP32[$1 + 24 >> 2], $1, HEAP32[$1 + 16 >> 2]);
       }
      }
      HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 20 >> 2] + 1;
      continue;
     }
     break;
    };
    jsvObjectSetChildAndUnLock(HEAP32[$1 + 44 >> 2], 127244, HEAP32[$1 + 24 >> 2]);
   }
   HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 44 >> 2];
  }
  __stack_pointer = $1 - -64 | 0;
  return HEAP32[$1 + 60 >> 2];
 }
 
 function jswrap_pipe_idle() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP8[$0 + 15 | 0] = 0;
  HEAP32[$0 + 8 >> 2] = pipeGetArray(0);
  if (HEAP32[$0 + 8 >> 2]) {
   jsvObjectIteratorNew($0 + 4 | 0, HEAP32[$0 + 8 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_1699($0 + 4 | 0) & 1) {
     HEAP32[$0 >> 2] = jsvObjectIteratorGetValue_1700($0 + 4 | 0);
     HEAP8[$0 + 15 | 0] = handlePipe(HEAP32[$0 + 8 >> 2], $0 + 4 | 0, HEAP32[$0 >> 2]) & 1 | HEAP8[$0 + 15 | 0] & 1;
     jsvUnLock(HEAP32[$0 >> 2]);
     jsvObjectIteratorNext($0 + 4 | 0);
     continue;
    }
    break;
   };
   jsvObjectIteratorFree_1702($0 + 4 | 0);
   jsvUnLock(HEAP32[$0 + 8 >> 2]);
  }
  __stack_pointer = $0 + 16 | 0;
  return HEAP8[$0 + 15 | 0] & 1;
 }
 
 function pipeGetArray($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  $0 = jsvObjectGetChild(HEAP32[92131], 127356, HEAP8[$1 + 15 | 0] & 1 ? 3 : 0);
  __stack_pointer = $1 + 16 | 0;
  return $0;
 }
 
 function jsvObjectIteratorHasValue_1699($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
 }
 
 function jsvObjectIteratorGetValue_1700($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function handlePipe($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer + -64 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 56 >> 2] = $0;
  HEAP32[$3 + 52 >> 2] = $1;
  HEAP32[$3 + 48 >> 2] = $2;
  HEAP8[$3 + 47 | 0] = jsvObjectGetBoolChild(HEAP32[$3 + 48 >> 2], 124873) & 1;
  block : {
   if (HEAP8[$3 + 47 | 0] & 1) {
    HEAP8[$3 + 63 | 0] = 0;
    break block;
   }
   HEAP32[$3 + 40 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 48 >> 2], 137019);
   HEAP32[$3 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 48 >> 2], 137992);
   HEAP32[$3 + 32 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 48 >> 2], 135398);
   HEAP8[$3 + 31 | 0] = 0;
   if (!(!HEAP32[$3 + 40 >> 2] | (!HEAP32[$3 + 36 >> 2] | !HEAP32[$3 + 32 >> 2]))) {
    HEAP32[$3 + 24 >> 2] = jspGetNamedField(HEAP32[$3 + 36 >> 2], 139321, 0);
    HEAP32[$3 + 20 >> 2] = jspGetNamedField(HEAP32[$3 + 32 >> 2], 137316, 0);
    block4 : {
     block2 : {
      if (!(jsvIsFunction(HEAP32[$3 + 24 >> 2]) & 1)) {
       break block2
      }
      if (!(jsvIsFunction(HEAP32[$3 + 20 >> 2]) & 1)) {
       break block2
      }
      HEAP32[$3 + 16 >> 2] = jspExecuteFunction(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 36 >> 2], 1, $3 + 40 | 0);
      if (HEAP32[$3 + 16 >> 2]) {
       HEAP32[$3 + 12 >> 2] = jsvGetLength(HEAP32[$3 + 16 >> 2]);
       if (HEAP32[$3 + 12 >> 2] > 0) {
        HEAP32[$3 + 8 >> 2] = jspExecuteFunction(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 32 >> 2], 1, $3 + 16 | 0);
        block3 : {
         if (!(jsvIsBoolean(HEAP32[$3 + 8 >> 2]) & 1)) {
          break block3
         }
         if (jsvGetBool(HEAP32[$3 + 8 >> 2]) & 1) {
          break block3
         }
         jsvObjectSetChildAndUnLock(HEAP32[$3 + 48 >> 2], 124873, jsvNewFromBool(1));
        }
        jsvUnLock(HEAP32[$3 + 8 >> 2]);
       }
       jsvUnLock(HEAP32[$3 + 16 >> 2]);
       HEAP8[$3 + 31 | 0] = 1;
      }
      break block4;
     }
     if (!(jsvIsFunction(HEAP32[$3 + 24 >> 2]) & 1)) {
      jsExceptionHere(1, 138180, 0)
     }
     if (!(jsvIsFunction(HEAP32[$3 + 20 >> 2]) & 1)) {
      jsExceptionHere(1, 138108, 0)
     }
    }
    jsvUnLock2(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
   }
   if (!(HEAP8[$3 + 31 | 0] & 1)) {
    handlePipeClose(HEAP32[$3 + 56 >> 2], HEAP32[$3 + 52 >> 2], HEAP32[$3 + 48 >> 2])
   }
   jsvUnLock3(HEAP32[$3 + 36 >> 2], HEAP32[$3 + 32 >> 2], HEAP32[$3 + 40 >> 2]);
   HEAP8[$3 + 63 | 0] = HEAP8[$3 + 31 | 0] & 1;
  }
  __stack_pointer = $3 - -64 | 0;
  return HEAP8[$3 + 63 | 0] & 1;
 }
 
 function jsvObjectIteratorFree_1702($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function handlePipeClose($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 44 >> 2] = $0;
  HEAP32[$3 + 40 >> 2] = $1;
  HEAP32[$3 + 36 >> 2] = $2;
  jsiQueueObjectCallbacks(HEAP32[$3 + 36 >> 2], 137322, $3 + 36 | 0, 1);
  HEAP32[$3 + 32 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 36 >> 2], 137992);
  HEAP32[$3 + 28 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 36 >> 2], 135398);
  if (!(!HEAP32[$3 + 32 >> 2] | !HEAP32[$3 + 28 >> 2])) {
   HEAP32[$3 + 24 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 32 >> 2], 136853);
   block1 : {
    if (!HEAP32[$3 + 24 >> 2]) {
     break block1
    }
    if (!jsvGetStringLength(HEAP32[$3 + 24 >> 2])) {
     break block1
    }
    jsvObjectRemoveChild(HEAP32[$3 + 32 >> 2], 136853);
    HEAP32[$3 + 20 >> 2] = jspGetNamedField(HEAP32[$3 + 28 >> 2], 137316, 0);
    if (jsvIsFunction(HEAP32[$3 + 20 >> 2]) & 1) {
     jsvUnLock(jspExecuteFunction(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 28 >> 2], 1, $3 + 24 | 0))
    }
    jsvUnLock(HEAP32[$3 + 20 >> 2]);
   }
   jsvUnLock(HEAP32[$3 + 24 >> 2]);
  }
  if (jsvObjectGetBoolChild(HEAP32[$3 + 36 >> 2], 138425) & 1) {
   if (HEAP32[$3 + 28 >> 2]) {
    jswrap_object_removeAllListeners_cstr(HEAP32[$3 + 28 >> 2], 135444);
    jswrap_object_removeAllListeners_cstr(HEAP32[$3 + 28 >> 2], 137426);
    HEAP32[$3 + 16 >> 2] = jspGetNamedField(HEAP32[$3 + 28 >> 2], 138425, 0);
    if (jsvIsFunction(HEAP32[$3 + 16 >> 2]) & 1) {
     jsvUnLock(jspExecuteFunction(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 28 >> 2], 0, 0))
    }
    jsvUnLock(HEAP32[$3 + 16 >> 2]);
    HEAP32[$3 + 12 >> 2] = jspGetNamedField(HEAP32[$3 + 28 >> 2], 137426, 0);
    if (jsvIsFunction(HEAP32[$3 + 12 >> 2]) & 1) {
     jsvUnLock(jspExecuteFunction(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 28 >> 2], 0, 0))
    }
    jsvUnLock(HEAP32[$3 + 12 >> 2]);
   }
   if (HEAP32[$3 + 32 >> 2]) {
    jswrap_object_removeAllListeners_cstr(HEAP32[$3 + 32 >> 2], 137426);
    HEAP32[$3 + 8 >> 2] = jspGetNamedField(HEAP32[$3 + 32 >> 2], 137426, 0);
    if (jsvIsFunction(HEAP32[$3 + 8 >> 2]) & 1) {
     jsvUnLock(jspExecuteFunction(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 32 >> 2], 0, 0))
    }
    jsvUnLock(HEAP32[$3 + 8 >> 2]);
   }
  }
  jsvUnLock2(HEAP32[$3 + 32 >> 2], HEAP32[$3 + 28 >> 2]);
  HEAP32[$3 + 4 >> 2] = jsvObjectIteratorGetKey_1710(HEAP32[$3 + 40 >> 2]);
  jsvRemoveChildAndUnLock(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 4 >> 2]);
  __stack_pointer = $3 + 48 | 0;
 }
 
 function jswrap_pipe_kill() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = pipeGetArray(0);
  if (HEAP32[$0 + 12 >> 2]) {
   jsvRemoveAllChildren(HEAP32[$0 + 12 >> 2]);
   jsvUnLock(HEAP32[$0 + 12 >> 2]);
  }
  __stack_pointer = $0 + 16 | 0;
 }
 
 function jswrap_pipe($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 44 >> 2] = $0;
  HEAP32[$3 + 40 >> 2] = $1;
  HEAP32[$3 + 36 >> 2] = $2;
  if (!(!HEAP32[$3 + 44 >> 2] | !HEAP32[$3 + 40 >> 2])) {
   jsvLockAgain(HEAP32[$3 + 44 >> 2]);
   HEAP32[$3 + 32 >> 2] = jspNewObject(0, 137558);
   HEAP32[$3 + 28 >> 2] = pipeGetArray(1);
   if (!(!HEAP32[$3 + 32 >> 2] | !HEAP32[$3 + 28 >> 2])) {
    if (jsvIsString(HEAP32[$3 + 44 >> 2]) & 1) {
     HEAP32[$3 + 24 >> 2] = jspExecuteJSFunctionCode(127743, 121120, 0, 0, 1, $3 + 44 | 0);
     jsvUnLock(HEAP32[$3 + 44 >> 2]);
     HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 24 >> 2];
    }
    HEAP32[$3 + 20 >> 2] = jspGetNamedField(HEAP32[$3 + 44 >> 2], 139321, 0);
    HEAP32[$3 + 16 >> 2] = jspGetNamedField(HEAP32[$3 + 40 >> 2], 137316, 0);
    block5 : {
     if (jsvIsFunction(HEAP32[$3 + 20 >> 2]) & 1) {
      if (jsvIsFunction(HEAP32[$3 + 16 >> 2]) & 1) {
       HEAP32[$3 + 12 >> 2] = 64;
       HEAP8[$3 + 11 | 0] = 1;
       block4 : {
        if (jsvIsObject(HEAP32[$3 + 36 >> 2]) & 1) {
         HEAP32[$3 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 36 >> 2], 137325);
         if (HEAP32[$3 + 4 >> 2]) {
          jsvObjectSetChild(HEAP32[$3 + 32 >> 2], 137322, HEAP32[$3 + 4 >> 2]);
          jsvUnLock(HEAP32[$3 + 4 >> 2]);
         }
         HEAP32[$3 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 36 >> 2], 138425);
         if (HEAP32[$3 + 4 >> 2]) {
          HEAP8[$3 + 11 | 0] = jsvGetBoolAndUnLock(HEAP32[$3 + 4 >> 2]) & 1
         }
         HEAP32[$3 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 36 >> 2], 137019);
         if (HEAP32[$3 + 4 >> 2]) {
          block3 : {
           block2 : {
            if (!(jsvIsNumeric(HEAP32[$3 + 4 >> 2]) & 1)) {
             break block2
            }
            if ((jsvGetInteger(HEAP32[$3 + 4 >> 2]) | 0) <= 0) {
             break block2
            }
            HEAP32[$3 + 12 >> 2] = jsvGetInteger(HEAP32[$3 + 4 >> 2]);
            break block3;
           }
           jsExceptionHere(3, 142235, 0);
          }
          jsvUnLock(HEAP32[$3 + 4 >> 2]);
         }
         break block4;
        }
        if (!(jsvIsUndefined(HEAP32[$3 + 36 >> 2]) & 1)) {
         jsExceptionHere(3, 138896, 0)
        }
       }
       jswrap_object_addEventListener(HEAP32[$3 + 44 >> 2], 137426, 625, 32768);
       jswrap_object_addEventListener(HEAP32[$3 + 40 >> 2], 135444, 626, 8);
       jswrap_object_addEventListener(HEAP32[$3 + 40 >> 2], 137426, 627, 32768);
       jsvObjectSetChildAndUnLock(HEAP32[$3 + 32 >> 2], 137019, jsvNewFromInteger(HEAP32[$3 + 12 >> 2]));
       jsvObjectSetChildAndUnLock(HEAP32[$3 + 32 >> 2], 138425, jsvNewFromBool(HEAP8[$3 + 11 | 0] & 1));
       jsvUnLock2(jsvAddNamedChild(HEAP32[$3 + 32 >> 2], HEAP32[$3 + 44 >> 2], 137992), jsvAddNamedChild(HEAP32[$3 + 32 >> 2], HEAP32[$3 + 40 >> 2], 135398));
       jsvArrayPush(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 32 >> 2]);
       break block5;
      }
      jsExceptionHere(1, 138246, 0);
      break block5;
     }
     jsExceptionHere(1, 138326, 0);
    }
    jsvUnLock2(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2]);
   }
   jsvUnLock3(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 32 >> 2], HEAP32[$3 + 44 >> 2]);
  }
  __stack_pointer = $3 + 48 | 0;
 }
 
 function jswrap_pipe_src_close_listener($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jswrap_pipe_close_listener(HEAP32[$1 + 12 >> 2], 137992);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_pipe_drain_listener($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 28 >> 2] = $0;
  block : {
   if (!(jsvIsObject(HEAP32[$1 + 28 >> 2]) & 1)) {
    break block
   }
   HEAP32[$1 + 24 >> 2] = pipeGetArray(0);
   if (!HEAP32[$1 + 24 >> 2]) {
    break block
   }
   jsvObjectIteratorNew($1 + 20 | 0, HEAP32[$1 + 24 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_1699($1 + 20 | 0) & 1) {
     HEAP32[$1 + 16 >> 2] = jsvObjectIteratorGetValue_1700($1 + 20 | 0);
     HEAP32[$1 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 16 >> 2], 135398);
     if (HEAP32[$1 + 12 >> 2] == HEAP32[$1 + 28 >> 2]) {
      jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 124873, jsvNewFromBool(0))
     }
     jsvUnLock2(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 16 >> 2]);
     jsvObjectIteratorNext($1 + 20 | 0);
     continue;
    }
    break;
   };
   jsvObjectIteratorFree_1702($1 + 20 | 0);
   jsvUnLock(HEAP32[$1 + 24 >> 2]);
  }
  __stack_pointer = $1 + 32 | 0;
 }
 
 function jswrap_pipe_dst_close_listener($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jswrap_pipe_close_listener(HEAP32[$1 + 12 >> 2], 135398);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_pipe_close_listener($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  block : {
   if (!(jsvIsObject(HEAP32[$2 + 28 >> 2]) & 1)) {
    break block
   }
   HEAP32[$2 + 20 >> 2] = pipeGetArray(0);
   if (!HEAP32[$2 + 20 >> 2]) {
    break block
   }
   jsvObjectIteratorNew($2 + 16 | 0, HEAP32[$2 + 20 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_1699($2 + 16 | 0) & 1) {
     HEAP32[$2 + 12 >> 2] = jsvObjectIteratorGetValue_1700($2 + 16 | 0);
     HEAP32[$2 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 24 >> 2]);
     if (HEAP32[$2 + 8 >> 2] == HEAP32[$2 + 28 >> 2]) {
      handlePipeClose(HEAP32[$2 + 20 >> 2], $2 + 16 | 0, HEAP32[$2 + 12 >> 2])
     }
     jsvUnLock2(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2]);
     jsvObjectIteratorNext($2 + 16 | 0);
     continue;
    }
    break;
   };
   jsvObjectIteratorFree_1702($2 + 16 | 0);
   jsvUnLock(HEAP32[$2 + 20 >> 2]);
  }
  __stack_pointer = $2 + 32 | 0;
 }
 
 function jsvObjectIteratorGetKey_1710($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jswrap_process_env() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = jsvNewObject();
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 140958, jsvNewFromString(141988));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 140822, jsvNewFromString(140255));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 141300, jsvNewFromString(142110));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 141010, jsvNewFromInteger(0));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 141216, jsvNewFromInteger(8388608));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 141213, jsvNewFromInteger(8388608));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 140956, jsvNewFromInteger(2));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 141288, jsvNewFromInteger(8388608));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 141079, jswrap_interface_getSerial());
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 141272, jswrap_espruino_getConsole());
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 140888, jsvNewFromString(jswGetBuiltInLibraryNames()));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 140896, jsvNewFromInteger(189824));
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function jswrap_process_memory($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 48 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 44 >> 2] = $0;
  HEAP32[$1 + 20 >> 2] = -1;
  block : {
   if (!(jsvIsUndefined(HEAP32[$1 + 44 >> 2]) & 1)) {
    if (!(jsvGetBool(HEAP32[$1 + 44 >> 2]) & 1)) {
     break block
    }
   }
   HEAP32[$1 + 32 >> 2] = jshGetSystemTime();
   HEAP32[$1 + 36 >> 2] = i64toi32_i32$HIGH_BITS;
   HEAP32[$1 + 20 >> 2] = jsvGarbageCollect();
   HEAP32[$1 + 24 >> 2] = jshGetSystemTime();
   HEAP32[$1 + 28 >> 2] = i64toi32_i32$HIGH_BITS;
  }
  HEAP32[$1 + 16 >> 2] = jsvNewObject();
  if (HEAP32[$1 + 16 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[92131], 123627);
   if (HEAP32[$1 + 8 >> 2]) {
    HEAP32[$1 + 12 >> 2] = jsvCountJsVarsUsed(HEAP32[$1 + 8 >> 2]);
    jsvUnLock(HEAP32[$1 + 8 >> 2]);
   }
   HEAP32[$1 + 4 >> 2] = jsvGetMemoryUsage() - HEAP32[$1 + 12 >> 2];
   HEAP32[$1 >> 2] = jsvGetMemoryTotal();
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 137893, jsvNewFromInteger(HEAP32[$1 >> 2] - HEAP32[$1 + 4 >> 2] | 0));
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 137843, jsvNewFromInteger(HEAP32[$1 + 4 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 135832, jsvNewFromInteger(HEAP32[$1 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 123627, jsvNewFromInteger(HEAP32[$1 + 12 >> 2]));
   if (HEAP32[$1 + 20 >> 2] >= 0) {
    jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 140227, jsvNewFromInteger(HEAP32[$1 + 20 >> 2]));
    $0 = HEAP32[$1 + 24 >> 2];
    $2 = HEAP32[$1 + 32 >> 2];
    jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 137568, jsvNewFromFloat(jshGetMillisecondsFromTime($0 - $2 | 0, HEAP32[$1 + 28 >> 2] - (HEAP32[$1 + 36 >> 2] + ($0 >>> 0 < $2 >>> 0) | 0) | 0)));
   }
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 136972, jsvNewFromInteger(14));
  }
  __stack_pointer = $1 + 48 | 0;
  return HEAP32[$1 + 16 >> 2];
 }
 
 function jswrap_onewire_constructor($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 11 | 0] = $0;
  HEAP32[$1 + 4 >> 2] = jspNewObject(0, 137484);
  block : {
   if (!HEAP32[$1 + 4 >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 4 >> 2], 135427, jsvNewFromPin(HEAPU8[$1 + 11 | 0]));
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jswrap_onewire_reset($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP8[$1 + 7 | 0] = onewire_getpin(HEAP32[$1 + 8 >> 2]);
  block : {
   if (!(jshIsPinValid(HEAPU8[$1 + 7 | 0]) & 1)) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   HEAP8[$1 + 15 | 0] = OneWireReset(HEAPU8[$1 + 7 | 0]) & 1;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function onewire_getpin($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jshGetPinFromVarAndUnLock(jsvObjectGetChildIfExists(HEAP32[$1 + 12 >> 2], 135427));
  __stack_pointer = $1 + 16 | 0;
  return $0 & 255;
 }
 
 function OneWireReset($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  jshPinSetState(HEAPU8[$1 + 15 | 0], 3);
  jshPinSetValue(HEAPU8[$1 + 15 | 0], 0);
  jshDelayMicroseconds(500);
  jshPinSetValue(HEAPU8[$1 + 15 | 0], 1);
  jshDelayMicroseconds(80);
  HEAP8[$1 + 14 | 0] = (jshPinGetValue(HEAPU8[$1 + 15 | 0]) ^ -1) & 1;
  jshDelayMicroseconds(420);
  __stack_pointer = $1 + 16 | 0;
  return HEAP8[$1 + 14 | 0] & 1;
 }
 
 function jswrap_onewire_select($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = __stack_pointer - 80 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 76 >> 2] = $0;
  HEAP32[$2 + 72 >> 2] = $1;
  HEAP8[$2 + 71 | 0] = onewire_getpin(HEAP32[$2 + 76 >> 2]);
  block : {
   if (!(jshIsPinValid(HEAPU8[$2 + 71 | 0]) & 1)) {
    break block
   }
   block1 : {
    if (jsvIsString(HEAP32[$2 + 72 >> 2]) & 1) {
     if ((jsvGetStringLength(HEAP32[$2 + 72 >> 2]) | 0) == 16) {
      break block1
     }
    }
    HEAP32[$2 >> 2] = HEAP32[$2 + 72 >> 2];
    jsExceptionHere(3, 128414, $2);
    break block;
   }
   OneWireReset(HEAPU8[$2 + 71 | 0]);
   HEAP32[$2 + 56 >> 2] = 0;
   HEAP32[$2 + 60 >> 2] = 0;
   jsvStringIteratorNew($2 + 20 | 0, HEAP32[$2 + 72 >> 2], 0);
   HEAP32[$2 + 16 >> 2] = 0;
   while (1) {
    if (HEAP32[$2 + 16 >> 2] < 8) {
     HEAP8[$2 + 13 | 0] = jsvStringIteratorGetCharAndNext($2 + 20 | 0);
     HEAP8[$2 + 14 | 0] = jsvStringIteratorGetCharAndNext($2 + 20 | 0);
     HEAP8[$2 + 15 | 0] = 0;
     $1 = HEAP32[$2 + 56 >> 2];
     $5 = $1;
     $0 = HEAP32[$2 + 60 >> 2];
     $6 = $0;
     $0 = stringToIntWithRadix($2 + 13 | 0, 16, 0, 0);
     $1 = i64toi32_i32$HIGH_BITS;
     $3 = $0;
     $0 = HEAP32[$2 + 16 >> 2] << 3;
     $4 = $0 & 31;
     if (($0 & 63) >>> 0 >= 32) {
      $0 = $3 << $4;
      $4 = 0;
     } else {
      $0 = (1 << $4) - 1 & $3 >>> 32 - $4 | $1 << $4;
      $4 = $3 << $4;
     }
     $3 = $0;
     $1 = $5;
     $0 = $4 | $1;
     $1 = $2;
     HEAP32[$1 + 56 >> 2] = $0;
     $0 = $6;
     $3 = $0 | $3;
     HEAP32[$1 + 60 >> 2] = $3;
     HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 16 >> 2] + 1;
     continue;
    }
    break;
   };
   jsvStringIteratorFree_1718($2 + 20 | 0);
   OneWireWrite(HEAPU8[$2 + 71 | 0], 8, 85, 0);
   $3 = HEAP32[$2 + 56 >> 2];
   $1 = HEAP32[$2 + 60 >> 2];
   OneWireWrite(HEAPU8[$2 + 71 | 0], 64, $3, $1);
  }
  __stack_pointer = $2 + 80 | 0;
 }
 
 function jsvStringIteratorFree_1718($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function OneWireWrite($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP8[$4 + 31 | 0] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 16 >> 2] = $2;
  HEAP32[$4 + 20 >> 2] = $3;
  jshPinSetState(HEAPU8[$4 + 31 | 0], 3);
  HEAP32[$4 + 8 >> 2] = 1;
  HEAP32[$4 + 12 >> 2] = 0;
  while (1) {
   $0 = HEAP32[$4 + 24 >> 2];
   HEAP32[$4 + 24 >> 2] = $0 - 1;
   if (($0 | 0) > 0) {
    $3 = HEAP32[$4 + 16 >> 2];
    $5 = $3;
    $0 = HEAP32[$4 + 20 >> 2];
    $2 = $0;
    $3 = HEAP32[$4 + 12 >> 2];
    $6 = $3;
    $0 = HEAP32[$4 + 8 >> 2];
    $1 = $0;
    $3 = $2;
    $0 = $6;
    $0 = $3 & $0;
    $3 = $1 & $5;
    block : {
     if ($3 | $0) {
      jshInterruptOff();
      jshPinSetValue(HEAPU8[$4 + 31 | 0], 0);
      jshDelayMicroseconds(10);
      jshPinSetValue(HEAPU8[$4 + 31 | 0], 1);
      jshInterruptOn();
      jshDelayMicroseconds(55);
      break block;
     }
     jshInterruptOff();
     jshPinSetValue(HEAPU8[$4 + 31 | 0], 0);
     jshDelayMicroseconds(65);
     jshPinSetValue(HEAPU8[$4 + 31 | 0], 1);
     jshInterruptOn();
     jshDelayMicroseconds(5);
    }
    $3 = HEAP32[$4 + 8 >> 2];
    $0 = HEAP32[$4 + 12 >> 2];
    $1 = $3;
    $3 = $0 << 1 | $3 >>> 31;
    $0 = $1 << 1;
    HEAP32[$4 + 8 >> 2] = $0;
    HEAP32[$4 + 12 >> 2] = $3;
    continue;
   }
   break;
  };
  __stack_pointer = $4 + 32 | 0;
 }
 
 function jswrap_onewire_skip($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP8[$1 + 11 | 0] = onewire_getpin(HEAP32[$1 + 12 >> 2]);
  if (jshIsPinValid(HEAPU8[$1 + 11 | 0]) & 1) {
   OneWireWrite(HEAPU8[$1 + 11 | 0], 8, 204, 0)
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function _jswrap_onewire_write_cb($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  OneWireWrite(HEAPU8[HEAP32[$2 + 8 >> 2]], 8, HEAP32[$2 + 12 >> 2], 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jswrap_onewire_write($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP8[$3 + 7 | 0] = $2;
  HEAP8[$3 + 6 | 0] = onewire_getpin(HEAP32[$3 + 12 >> 2]);
  block : {
   if (!(jshIsPinValid(HEAPU8[$3 + 6 | 0]) & 1)) {
    break block
   }
   jsvIterateCallback(HEAP32[$3 + 8 >> 2], 645, $3 + 6 | 0);
   if (HEAP8[$3 + 7 | 0] & 1) {
    jshPinSetValue(HEAPU8[$3 + 6 | 0], 1);
    jshPinSetState(HEAPU8[$3 + 6 | 0], 1);
    break block;
   }
   jshPinSetState(HEAPU8[$3 + 6 | 0], 4);
   jshPinSetValue(HEAPU8[$3 + 6 | 0], 1);
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jswrap_onewire_read($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 80 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 72 >> 2] = $0;
  HEAP32[$2 + 68 >> 2] = $1;
  HEAP8[$2 + 67 | 0] = onewire_getpin(HEAP32[$2 + 72 >> 2]);
  block : {
   if (!(jshIsPinValid(HEAPU8[$2 + 67 | 0]) & 1)) {
    HEAP32[$2 + 76 >> 2] = 0;
    break block;
   }
   if (jsvIsNumeric(HEAP32[$2 + 68 >> 2]) & 1) {
    HEAP32[$2 + 60 >> 2] = jsvGetInteger(HEAP32[$2 + 68 >> 2]);
    HEAP32[$2 + 56 >> 2] = jsvNewTypedArray(1, HEAP32[$2 + 60 >> 2]);
    if (!HEAP32[$2 + 56 >> 2]) {
     HEAP32[$2 + 76 >> 2] = 0;
     break block;
    }
    jsvArrayBufferIteratorNew($2, HEAP32[$2 + 56 >> 2], 0);
    while (1) {
     $0 = HEAP32[$2 + 60 >> 2];
     HEAP32[$2 + 60 >> 2] = $0 - 1;
     if ($0) {
      jsvArrayBufferIteratorSetByteValue($2, OneWireRead(HEAPU8[$2 + 67 | 0], 8) << 24 >> 24);
      jsvArrayBufferIteratorNext($2);
      continue;
     }
     break;
    };
    jsvArrayBufferIteratorFree($2);
    HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 56 >> 2];
    break block;
   }
   HEAP32[$2 + 76 >> 2] = jsvNewFromInteger(OneWireRead(HEAPU8[$2 + 67 | 0], 8));
  }
  __stack_pointer = $2 + 80 | 0;
  return HEAP32[$2 + 76 >> 2];
 }
 
 function OneWireRead($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP8[$2 + 15 | 0] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  jshPinSetState(HEAPU8[$2 + 15 | 0], 3);
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$2 >> 2] = 1;
  while (1) {
   $0 = HEAP32[$2 + 8 >> 2];
   HEAP32[$2 + 8 >> 2] = $0 - 1;
   if (($0 | 0) > 0) {
    jshInterruptOff();
    jshPinSetValue(HEAPU8[$2 + 15 | 0], 0);
    jshDelayMicroseconds(3);
    jshPinSetValue(HEAPU8[$2 + 15 | 0], 1);
    jshDelayMicroseconds(10);
    if (jshPinGetValue(HEAPU8[$2 + 15 | 0]) & 1) {
     HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | HEAP32[$2 >> 2]
    }
    jshInterruptOn();
    jshDelayMicroseconds(53);
    HEAP32[$2 >> 2] = HEAP32[$2 >> 2] << 1;
    continue;
   }
   break;
  };
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 4 >> 2];
 }
 
 function jswrap_onewire_search($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 96 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 88 >> 2] = $0;
  HEAP32[$2 + 84 >> 2] = $1;
  HEAP8[$2 + 83 | 0] = onewire_getpin(HEAP32[$2 + 88 >> 2]);
  block : {
   if (!(jshIsPinValid(HEAPU8[$2 + 83 | 0]) & 1)) {
    HEAP32[$2 + 92 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 76 >> 2] = jsvNewEmptyArray();
   if (!HEAP32[$2 + 76 >> 2]) {
    HEAP32[$2 + 92 >> 2] = 0;
    break block;
   }
   if (!(HEAP32[$2 + 84 >> 2] <= 255 & HEAP32[$2 + 84 >> 2] > 0)) {
    HEAP32[$2 + 84 >> 2] = 240
   }
   HEAP32[$2 + 64 >> 2] = 0;
   HEAP32[$2 + 56 >> 2] = 0;
   HEAP32[$2 + 60 >> 2] = 0;
   HEAP32[$2 + 52 >> 2] = 1;
   while (1) {
    if (HEAP32[$2 + 52 >> 2]) {
     HEAP32[$2 + 48 >> 2] = 1;
     HEAP32[$2 + 44 >> 2] = 0;
     HEAP32[$2 + 40 >> 2] = 0;
     HEAP8[$2 + 37 | 0] = 1;
     HEAP32[$2 + 52 >> 2] = 0;
     if (!HEAP32[$2 + 56 >> 2]) {
      if (!(OneWireReset(HEAPU8[$2 + 83 | 0]) & 1)) {
       HEAP32[$2 + 64 >> 2] = 0;
       HEAP32[$2 + 56 >> 2] = 0;
       HEAP32[$2 + 60 >> 2] = 0;
       HEAP32[$2 + 92 >> 2] = HEAP32[$2 + 76 >> 2];
       break block;
      }
      $0 = HEAP32[$2 + 84 >> 2];
      $1 = $0 >> 31;
      OneWireWrite(HEAPU8[$2 + 83 | 0], 8, $0, $1);
      while (1) {
       block3 : {
        HEAP8[$2 + 39 | 0] = OneWireRead(HEAPU8[$2 + 83 | 0], 1);
        HEAP8[$2 + 38 | 0] = OneWireRead(HEAPU8[$2 + 83 | 0], 1);
        if (!(HEAPU8[$2 + 39 | 0] != 1 | HEAPU8[$2 + 38 | 0] != 1)) {
         break block3
        }
        block4 : {
         if (HEAPU8[$2 + 39 | 0] != HEAPU8[$2 + 38 | 0]) {
          HEAP8[$2 + 36 | 0] = HEAPU8[$2 + 39 | 0];
          break block4;
         }
         block5 : {
          if (HEAP32[$2 + 48 >> 2] < HEAP32[$2 + 64 >> 2]) {
           HEAP8[$2 + 36 | 0] = (HEAPU8[HEAP32[$2 + 40 >> 2] + ($2 + 68 | 0) | 0] & HEAPU8[$2 + 37 | 0]) != 0;
           break block5;
          }
          HEAP8[$2 + 36 | 0] = HEAP32[$2 + 48 >> 2] == HEAP32[$2 + 64 >> 2];
         }
         if (!HEAPU8[$2 + 36 | 0]) {
          HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 48 >> 2];
          if (HEAP32[$2 + 44 >> 2] < 9) {
           HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 44 >> 2]
          }
         }
        }
        block6 : {
         if (HEAPU8[$2 + 36 | 0] == 1) {
          $0 = HEAP32[$2 + 40 >> 2] + ($2 + 68 | 0) | 0;
          HEAP8[$0 | 0] = HEAPU8[$2 + 37 | 0] | HEAPU8[$0 | 0];
          break block6;
         }
         $0 = HEAP32[$2 + 40 >> 2] + ($2 + 68 | 0) | 0;
         HEAP8[$0 | 0] = HEAPU8[$0 | 0] & ((HEAPU8[$2 + 37 | 0] ^ -1) & 255);
        }
        $1 = HEAPU8[$2 + 36 | 0];
        OneWireWrite(HEAPU8[$2 + 83 | 0], 1, $1, 0);
        HEAP32[$2 + 48 >> 2] = HEAP32[$2 + 48 >> 2] + 1;
        HEAP8[$2 + 37 | 0] = HEAPU8[$2 + 37 | 0] << 1;
        if (!HEAPU8[$2 + 37 | 0]) {
         HEAP32[$2 + 40 >> 2] = HEAP32[$2 + 40 >> 2] + 1;
         HEAP8[$2 + 37 | 0] = 1;
        }
        if (HEAP32[$2 + 40 >> 2] < 8) {
         continue
        }
       }
       break;
      };
      if (HEAP32[$2 + 48 >> 2] >= 65) {
       HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 44 >> 2];
       if (!HEAP32[$2 + 64 >> 2]) {
        HEAP32[$2 + 56 >> 2] = 1
       }
       HEAP32[$2 + 52 >> 2] = 1;
      }
     }
     if (!(HEAPU8[$2 + 68 | 0] ? HEAP32[$2 + 52 >> 2] : 0)) {
      HEAP32[$2 + 64 >> 2] = 0;
      HEAP32[$2 + 56 >> 2] = 0;
      HEAP32[$2 + 60 >> 2] = 0;
      HEAP32[$2 + 52 >> 2] = 0;
     }
     if (HEAP32[$2 + 52 >> 2]) {
      HEAP32[$2 + 32 >> 2] = 0;
      while (1) {
       if (HEAP32[$2 + 32 >> 2] < 8) {
        $0 = itoch(HEAPU8[HEAP32[$2 + 32 >> 2] + ($2 + 68 | 0) | 0] >>> 4 | 0);
        HEAP8[(HEAP32[$2 + 32 >> 2] << 1) + $2 | 0] = $0;
        $0 = itoch(HEAPU8[HEAP32[$2 + 32 >> 2] + ($2 + 68 | 0) | 0] & 15);
        HEAP8[((HEAP32[$2 + 32 >> 2] << 1) + 1 | 0) + $2 | 0] = $0;
        HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 32 >> 2] + 1;
        continue;
       }
       break;
      };
      HEAP8[$2 + 16 | 0] = 0;
      jsvArrayPushString(HEAP32[$2 + 76 >> 2], $2);
     }
     continue;
    }
    break;
   };
   HEAP32[$2 + 92 >> 2] = HEAP32[$2 + 76 >> 2];
  }
  __stack_pointer = $2 + 96 | 0;
  return HEAP32[$2 + 92 >> 2];
 }
 
 function jspromise_resolve($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  jspromise_resolve_or_reject(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jspromise_resolve_or_reject($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP8[$3 + 7 | 0] = $2;
  HEAP32[$3 >> 2] = jsvNewObject();
  if (HEAP32[$3 >> 2]) {
   jsvObjectSetChild(HEAP32[$3 >> 2], 135625, HEAP32[$3 + 12 >> 2]);
   _jswrap_prombox_queueresolve_or_reject(HEAP32[$3 >> 2], HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
   jsvUnLock(HEAP32[$3 >> 2]);
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function _jswrap_prombox_queueresolve_or_reject($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP8[$3 + 7 | 0] = $2;
  HEAP32[$3 >> 2] = _jswrap_promise_native_with_prombox(HEAP8[$3 + 7 | 0] & 1 ? 646 : 647, HEAP32[$3 + 12 >> 2]);
  if (HEAP32[$3 >> 2]) {
   jsiQueueEvents(HEAP32[$3 + 12 >> 2], HEAP32[$3 >> 2], $3 + 8 | 0, 1);
   jsvUnLock(HEAP32[$3 >> 2]);
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jspromise_create() {
  return jspNewObject(0, 137438);
 }
 
 function jswrap_promise_constructor($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 48 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 40 >> 2] = $0;
  block : {
   if (!HEAP32[$1 + 40 >> 2]) {
    jsExceptionHere(1, 127832, 0);
    HEAP32[$1 + 44 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 32 >> 2] = jspromise_create_prombox($1 + 36 | 0);
   if (!HEAP32[$1 + 32 >> 2]) {
    HEAP32[$1 + 44 >> 2] = 0;
    break block;
   }
   if (HEAP32[$1 + 36 >> 2]) {
    HEAP32[$1 + 28 >> 2] = _jswrap_promise_native_with_prombox(648, HEAP32[$1 + 32 >> 2]);
    HEAP32[$1 + 24 >> 2] = _jswrap_promise_native_with_prombox(649, HEAP32[$1 + 32 >> 2]);
    HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 28 >> 2];
    HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 24 >> 2];
    HEAP32[$1 + 12 >> 2] = HEAP32[92138];
    jsvUnLock(jspeFunctionCall(HEAP32[$1 + 40 >> 2], 0, HEAP32[$1 + 36 >> 2], 0, 2, $1 + 16 | 0));
    HEAP32[92138] = HEAP32[$1 + 12 >> 2];
    HEAP32[$1 + 8 >> 2] = jspGetException();
    if (HEAP32[$1 + 8 >> 2]) {
     _jswrap_prombox_queuereject(HEAP32[$1 + 32 >> 2], HEAP32[$1 + 8 >> 2]);
     jsvUnLock(HEAP32[$1 + 8 >> 2]);
    }
    jsvUnLock2(HEAP32[$1 + 28 >> 2], HEAP32[$1 + 24 >> 2]);
   }
   jsvUnLock(HEAP32[$1 + 32 >> 2]);
   HEAP32[$1 + 44 >> 2] = jsvLockAgain(HEAP32[$1 + 36 >> 2]);
  }
  __stack_pointer = $1 + 48 | 0;
  return HEAP32[$1 + 44 >> 2];
 }
 
 function jspromise_create_prombox($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = jspromise_create();
  block : {
   if (!HEAP32[$1 + 4 >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 >> 2] = jsvNewObject();
   if (!HEAP32[$1 >> 2]) {
    jsvUnLock(HEAP32[$1 + 4 >> 2]);
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 4 >> 2], 137340, jsvNewFromInteger(0));
   jsvObjectSetChildAndUnLock(HEAP32[$1 >> 2], 135625, HEAP32[$1 + 4 >> 2]);
   HEAP32[HEAP32[$1 + 8 >> 2] >> 2] = HEAP32[$1 + 4 >> 2];
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function _jswrap_prombox_queueresolve($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  _jswrap_prombox_queueresolve_or_reject(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function _jswrap_promise_native_with_prombox($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = jsvNewNativeFunction(HEAP32[$2 + 12 >> 2], 32776);
  jsvObjectSetChild(HEAP32[$2 + 4 >> 2], 127288, HEAP32[$2 + 8 >> 2]);
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 4 >> 2];
 }
 
 function _jswrap_prombox_queuereject($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  _jswrap_prombox_queueresolve_or_reject(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jswrap_promise_all($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer + -64 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 56 >> 2] = $0;
  block : {
   if (!(jsvIsIterable(HEAP32[$1 + 56 >> 2]) & 1)) {
    HEAP32[$1 >> 2] = HEAP32[$1 + 56 >> 2];
    jsExceptionHere(3, 126165, $1);
    HEAP32[$1 + 60 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 48 >> 2] = jspromise_create_prombox($1 + 52 | 0);
   if (!HEAP32[$1 + 48 >> 2]) {
    HEAP32[$1 + 60 >> 2] = 0;
    break block;
   }
   if (HEAP32[$1 + 52 >> 2]) {
    HEAP32[$1 + 44 >> 2] = _jswrap_promise_native_with_prombox(650, HEAP32[$1 + 48 >> 2]);
    if (!HEAP32[$1 + 44 >> 2]) {
     HEAP32[$1 + 60 >> 2] = jsvLockAgainSafe(HEAP32[$1 + 52 >> 2]);
     break block;
    }
    HEAP32[$1 + 40 >> 2] = jsvNewEmptyArray();
    HEAP32[$1 + 36 >> 2] = 0;
    HEAP32[$1 + 32 >> 2] = 0;
    jsvObjectIteratorNew($1 + 28 | 0, HEAP32[$1 + 56 >> 2]);
    while (1) {
     if (jsvObjectIteratorHasValue_1737($1 + 28 | 0) & 1) {
      HEAP32[$1 + 24 >> 2] = jsvObjectIteratorGetValue_1738($1 + 28 | 0);
      block1 : {
       if (_jswrap_promise_is_promise(HEAP32[$1 + 24 >> 2]) & 1) {
        HEAP32[$1 + 20 >> 2] = jsvNewNativeFunction(651, 32840);
        HEAP32[$1 + 16 >> 2] = jsvNewFromInteger(HEAP32[$1 + 36 >> 2]);
        jsvAddFunctionParameter(HEAP32[$1 + 20 >> 2], 0, HEAP32[$1 + 16 >> 2]);
        jsvObjectSetChild(HEAP32[$1 + 20 >> 2], 127288, HEAP32[$1 + 48 >> 2]);
        jsvUnLock3(jswrap_promise_then(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 20 >> 2], HEAP32[$1 + 44 >> 2]), HEAP32[$1 + 20 >> 2], HEAP32[$1 + 16 >> 2]);
        break block1;
       }
       jsvSetArrayItem(HEAP32[$1 + 40 >> 2], HEAP32[$1 + 36 >> 2], HEAP32[$1 + 24 >> 2]);
       HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 32 >> 2] + 1;
      }
      jsvUnLock(HEAP32[$1 + 24 >> 2]);
      HEAP32[$1 + 36 >> 2] = HEAP32[$1 + 36 >> 2] + 1;
      jsvObjectIteratorNext($1 + 28 | 0);
      continue;
     }
     break;
    };
    jsvObjectIteratorFree_1742($1 + 28 | 0);
    block2 : {
     if (HEAP32[$1 + 32 >> 2] == HEAP32[$1 + 36 >> 2]) {
      HEAP32[$1 + 52 >> 2] = jswrap_promise_resolve(HEAP32[$1 + 40 >> 2]);
      jsvUnLock2(HEAP32[$1 + 52 >> 2], HEAP32[$1 + 40 >> 2]);
      break block2;
     }
     jsvObjectSetChildAndUnLock(HEAP32[$1 + 52 >> 2], 135043, jsvNewFromInteger(HEAP32[$1 + 36 >> 2] - HEAP32[$1 + 32 >> 2] | 0));
     jsvObjectSetChildAndUnLock(HEAP32[$1 + 52 >> 2], 127351, HEAP32[$1 + 40 >> 2]);
    }
    jsvUnLock2(HEAP32[$1 + 44 >> 2], HEAP32[$1 + 48 >> 2]);
   }
   HEAP32[$1 + 60 >> 2] = jsvLockAgainSafe(HEAP32[$1 + 52 >> 2]);
  }
  __stack_pointer = $1 - -64 | 0;
  return HEAP32[$1 + 60 >> 2];
 }
 
 function _jswrap_prombox_all_reject($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 12 >> 2], 135625);
  if (HEAP32[$2 + 4 >> 2]) {
   HEAP32[$2 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 4 >> 2], 127351);
   if (HEAP32[$2 >> 2]) {
    jsvUnLock(HEAP32[$2 >> 2]);
    jsvObjectRemoveChild(HEAP32[$2 + 4 >> 2], 127351);
    _jswrap_prombox_queuereject(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
   }
   jsvUnLock(HEAP32[$2 + 4 >> 2]);
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jsvObjectIteratorHasValue_1737($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
 }
 
 function jsvObjectIteratorGetValue_1738($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function _jswrap_promise_is_promise($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = jspGetConstructor(HEAP32[$1 + 12 >> 2]);
  if (HEAP32[$1 + 8 >> 2]) {
   $0 = HEAP32[$1 + 8 >> 2];
   $2 = (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 20;
  }
  HEAP8[$1 + 7 | 0] = $2;
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
  __stack_pointer = $1 + 16 | 0;
  return HEAP8[$1 + 7 | 0] & 1;
 }
 
 function _jswrap_prombox_all_resolve($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  HEAP32[$3 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 28 >> 2], 135625);
  if (HEAP32[$3 + 16 >> 2]) {
   HEAP32[$3 + 12 >> 2] = jsvObjectGetIntegerChild(HEAP32[$3 + 16 >> 2], 135043);
   HEAP32[$3 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 16 >> 2], 127351);
   if (HEAP32[$3 + 8 >> 2]) {
    jsvSetArrayItem(HEAP32[$3 + 8 >> 2], jsvGetInteger(HEAP32[$3 + 24 >> 2]), HEAP32[$3 + 20 >> 2]);
    HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] - 1;
    jsvObjectSetChildAndUnLock(HEAP32[$3 + 16 >> 2], 135043, jsvNewFromInteger(HEAP32[$3 + 12 >> 2]));
    if (!HEAP32[$3 + 12 >> 2]) {
     _jswrap_prombox_queueresolve(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 8 >> 2])
    }
    jsvUnLock(HEAP32[$3 + 8 >> 2]);
   }
   jsvUnLock(HEAP32[$3 + 16 >> 2]);
  }
  __stack_pointer = $3 + 32 | 0;
 }
 
 function jswrap_promise_then($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 40 >> 2] = $0;
  HEAP32[$3 + 36 >> 2] = $1;
  HEAP32[$3 + 32 >> 2] = $2;
  HEAP32[$3 + 24 >> 2] = jspromise_create_prombox($3 + 28 | 0);
  block : {
   if (!HEAP32[$3 + 24 >> 2]) {
    HEAP32[$3 + 44 >> 2] = 0;
    break block;
   }
   if (HEAP32[$3 + 28 >> 2]) {
    if (!(jsvIsFunction(HEAP32[$3 + 36 >> 2]) & 1)) {
     HEAP32[$3 + 36 >> 2] = 0
    }
    if (!(jsvIsFunction(HEAP32[$3 + 32 >> 2]) & 1)) {
     HEAP32[$3 + 32 >> 2] = 0
    }
    HEAP32[$3 + 20 >> 2] = jsvObjectGetIntegerChild(HEAP32[$3 + 40 >> 2], 137340);
    block1 : {
     if (!HEAP32[$3 + 20 >> 2]) {
      _jswrap_promise_add_reaction(HEAP32[$3 + 40 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 36 >> 2], 1);
      _jswrap_promise_add_reaction(HEAP32[$3 + 40 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 32 >> 2], 0);
      break block1;
     }
     if (HEAP32[$3 + 20 >> 2] == 2) {
      $0 = HEAP32[$3 + 36 >> 2]
     } else {
      $0 = HEAP32[$3 + 32 >> 2]
     }
     HEAP32[$3 + 16 >> 2] = $0;
     HEAP32[$3 + 12 >> 2] = _jswrap_promise_new_reaction(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 16 >> 2]);
     if (HEAP32[$3 + 12 >> 2]) {
      HEAP32[$3 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 40 >> 2], 135775);
      _jswrap_promise_queue_reaction(HEAP32[$3 + 40 >> 2], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], 0);
      jsvUnLock2(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 12 >> 2]);
     }
    }
   }
   jsvUnLock(HEAP32[$3 + 24 >> 2]);
   HEAP32[$3 + 44 >> 2] = jsvLockAgainSafe(HEAP32[$3 + 28 >> 2]);
  }
  __stack_pointer = $3 + 48 | 0;
  return HEAP32[$3 + 44 >> 2];
 }
 
 function jsvObjectIteratorFree_1742($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_promise_resolve($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 24 >> 2] = $0;
  HEAP32[$1 + 20 >> 2] = 0;
  block : {
   if (_jswrap_promise_is_promise(HEAP32[$1 + 24 >> 2]) & 1) {
    HEAP32[$1 + 28 >> 2] = jsvLockAgain(HEAP32[$1 + 24 >> 2]);
    break block;
   }
   if (jsvIsObject(HEAP32[$1 + 24 >> 2]) & 1) {
    HEAP32[$1 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 24 >> 2], 135480);
    if (jsvIsFunction(HEAP32[$1 + 16 >> 2]) & 1) {
     HEAP32[$1 + 20 >> 2] = jswrap_promise_constructor(HEAP32[$1 + 16 >> 2])
    }
    jsvUnLock(HEAP32[$1 + 16 >> 2]);
    if (HEAP32[$1 + 20 >> 2]) {
     HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
     break block;
    }
   }
   HEAP32[$1 + 12 >> 2] = jspromise_create_prombox($1 + 20 | 0);
   if (!HEAP32[$1 + 12 >> 2]) {
    HEAP32[$1 + 28 >> 2] = 0;
    break block;
   }
   if (HEAP32[$1 + 20 >> 2]) {
    _jswrap_prombox_queueresolve(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 24 >> 2])
   }
   jsvUnLock(HEAP32[$1 + 12 >> 2]);
   HEAP32[$1 + 28 >> 2] = jsvLockAgainSafe(HEAP32[$1 + 20 >> 2]);
  }
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 28 >> 2];
 }
 
 function _jswrap_promise_add_reaction($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP8[$4 + 19 | 0] = $3;
  HEAP32[$4 + 12 >> 2] = _jswrap_promise_new_reaction(HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2]);
  if (HEAP32[$4 + 12 >> 2]) {
   HEAP32[$4 + 8 >> 2] = HEAP8[$4 + 19 | 0] & 1 ? 135454 : 125130;
   HEAP32[$4 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 8 >> 2]);
   block : {
    if (jsvIsArray(HEAP32[$4 + 4 >> 2]) & 1) {
     jsvArrayPush(HEAP32[$4 + 4 >> 2], HEAP32[$4 + 12 >> 2]);
     break block;
    }
    jsvUnLock(HEAP32[$4 + 4 >> 2]);
    jsvObjectSetChildAndUnLock(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 8 >> 2], jsvNewArray($4 + 12 | 0, 1));
   }
   jsvUnLock2(HEAP32[$4 + 4 >> 2], HEAP32[$4 + 12 >> 2]);
  }
  __stack_pointer = $4 + 32 | 0;
 }
 
 function _jswrap_promise_new_reaction($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 >> 2] = jsvNewObject();
  block : {
   if (!HEAP32[$2 >> 2]) {
    HEAP32[$2 + 12 >> 2] = 0;
    break block;
   }
   jsvObjectSetChild(HEAP32[$2 >> 2], 140265, HEAP32[$2 + 4 >> 2]);
   jsvObjectSetChild(HEAP32[$2 >> 2], 124358, HEAP32[$2 + 8 >> 2]);
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function _jswrap_promise_queue_reaction($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 44 >> 2] = $0;
  HEAP32[$4 + 40 >> 2] = $1;
  HEAP32[$4 + 36 >> 2] = $2;
  HEAP8[$4 + 35 | 0] = $3;
  HEAP32[$4 + 28 >> 2] = jsvNewNativeFunction(652, 33352);
  if (HEAP32[$4 + 28 >> 2]) {
   jsvObjectSetChild(HEAP32[$4 + 28 >> 2], 127288, HEAP32[$4 + 44 >> 2]);
   HEAP32[$4 + 24 >> 2] = jsvNewFromBool(HEAP8[$4 + 35 | 0] & 1);
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 40 >> 2];
   HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 36 >> 2];
   HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 24 >> 2];
   jsiQueueEvents(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 28 >> 2], $4 + 12 | 0, 3);
   jsvUnLock2(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2]);
  }
  __stack_pointer = $4 + 48 | 0;
 }
 
 function jswrap_promise_reject($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP32[$1 >> 2] = jspromise_create_prombox($1 + 4 | 0);
  block : {
   if (!HEAP32[$1 >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   if (HEAP32[$1 + 4 >> 2]) {
    _jswrap_prombox_queuereject(HEAP32[$1 >> 2], HEAP32[$1 + 8 >> 2])
   }
   jsvUnLock(HEAP32[$1 >> 2]);
   HEAP32[$1 + 12 >> 2] = jsvLockAgainSafe(HEAP32[$1 + 4 >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function _jswrap_promise_reaction_call($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 44 >> 2] = $0;
  HEAP32[$4 + 40 >> 2] = $1;
  HEAP32[$4 + 36 >> 2] = $2;
  HEAP32[$4 + 32 >> 2] = $3;
  HEAP32[$4 + 28 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 40 >> 2], 124358);
  HEAP32[$4 + 24 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 28 >> 2], 135625);
  if (HEAP32[$4 + 28 >> 2]) {
   if (HEAP32[$4 + 24 >> 2]) {
    HEAP8[$4 + 23 | 0] = 0;
    HEAP32[$4 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 40 >> 2], 140265);
    block : {
     if (HEAP32[$4 + 12 >> 2]) {
      HEAP32[$4 + 8 >> 2] = HEAP32[92138];
      HEAP32[$4 + 16 >> 2] = jspeFunctionCall(HEAP32[$4 + 12 >> 2], 0, HEAP32[$4 + 44 >> 2], 0, 1, $4 + 36 | 0);
      HEAP32[92138] = HEAP32[$4 + 8 >> 2];
      HEAP32[$4 + 4 >> 2] = jspGetException();
      if (HEAP32[$4 + 4 >> 2]) {
       HEAP8[$4 + 23 | 0] = 1;
       jsvUnLock(HEAP32[$4 + 16 >> 2]);
       HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 4 >> 2];
      }
      jsvUnLock(HEAP32[$4 + 12 >> 2]);
      break block;
     }
     if (!(jsvGetBool(HEAP32[$4 + 32 >> 2]) & 1)) {
      HEAP8[$4 + 23 | 0] = 1
     }
     HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 36 >> 2];
    }
    _jswrap_prombox_resolve_or_reject(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 16 >> 2], (HEAPU8[$4 + 23 | 0] ^ -1) & 1);
    if (HEAP32[$4 + 12 >> 2]) {
     jsvUnLock(HEAP32[$4 + 16 >> 2])
    }
    jsvUnLock(HEAP32[$4 + 24 >> 2]);
   }
   jsvUnLock(HEAP32[$4 + 28 >> 2]);
  }
  __stack_pointer = $4 + 48 | 0;
 }
 
 function jswrap_promise_catch($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $0 = jswrap_promise_then(HEAP32[$2 + 12 >> 2], 0, HEAP32[$2 + 8 >> 2]);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function _jswrap_prombox_resolve($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  _jswrap_prombox_resolve_or_reject(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function _jswrap_prombox_reject($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  _jswrap_prombox_resolve_or_reject(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function _jswrap_prombox_resolve_or_reject($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer + -64 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 60 >> 2] = $0;
  HEAP32[$3 + 56 >> 2] = $1;
  HEAP8[$3 + 55 | 0] = $2;
  HEAP8[$3 + 54 | 0] = jsvObjectGetBoolChild(HEAP32[$3 + 60 >> 2], 135656) & 1;
  block : {
   if (HEAP8[$3 + 54 | 0] & 1) {
    break block
   }
   jsvObjectSetChildAndUnLock(HEAP32[$3 + 60 >> 2], 135656, jsvNewFromBool(1));
   HEAP32[$3 + 48 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 60 >> 2], 135625);
   if (!HEAP32[$3 + 48 >> 2]) {
    break block
   }
   if (jsvIsEqual(HEAP32[$3 + 56 >> 2], HEAP32[$3 + 48 >> 2]) & 1) {
    jsExceptionHere(1, 136877, 0);
    jsvUnLock(HEAP32[$3 + 48 >> 2]);
    break block;
   }
   jsvObjectSetChild(HEAP32[$3 + 48 >> 2], 135775, HEAP32[$3 + 56 >> 2]);
   block1 : {
    if (HEAP8[$3 + 55 | 0] & 1) {
     if (jsvIsObject(HEAP32[$3 + 56 >> 2]) & 1) {
      break block1
     }
    }
    _jswrap_promise_seal(HEAP32[$3 + 48 >> 2], HEAP32[$3 + 56 >> 2], HEAP8[$3 + 55 | 0] & 1);
    jsvUnLock(HEAP32[$3 + 48 >> 2]);
    break block;
   }
   HEAP8[$3 + 47 | 0] = _jswrap_promise_is_promise(HEAP32[$3 + 56 >> 2]) & 1;
   HEAP8[$3 + 46 | 0] = 0;
   HEAP32[$3 + 40 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 56 >> 2], 135480);
   if (jsvIsFunction(HEAP32[$3 + 40 >> 2]) & 1) {
    HEAP8[$3 + 46 | 0] = 1
   }
   if (!(HEAP8[$3 + 46 | 0] & 1 | HEAP8[$3 + 47 | 0] & 1)) {
    _jswrap_promise_seal(HEAP32[$3 + 48 >> 2], HEAP32[$3 + 56 >> 2], HEAP8[$3 + 55 | 0] & 1);
    jsvUnLock2(HEAP32[$3 + 48 >> 2], HEAP32[$3 + 40 >> 2]);
    break block;
   }
   HEAP32[$3 + 36 >> 2] = jsvNewObject();
   HEAP32[$3 + 32 >> 2] = _jswrap_promise_native_with_prombox(646, HEAP32[$3 + 36 >> 2]);
   HEAP32[$3 + 28 >> 2] = _jswrap_promise_native_with_prombox(647, HEAP32[$3 + 36 >> 2]);
   if (HEAP32[$3 + 36 >> 2]) {
    jsvObjectSetChild(HEAP32[$3 + 36 >> 2], 135625, HEAP32[$3 + 48 >> 2]);
    jsvObjectSetChildAndUnLock(HEAP32[$3 + 36 >> 2], 135656, jsvNewFromBool(0));
    block3 : {
     if (HEAP8[$3 + 46 | 0] & 1) {
      HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 32 >> 2];
      HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 28 >> 2];
      HEAP32[$3 + 16 >> 2] = HEAP32[92138];
      jsvUnLock(jspeFunctionCall(HEAP32[$3 + 40 >> 2], 0, HEAP32[$3 + 56 >> 2], 0, 2, $3 + 20 | 0));
      HEAP32[92138] = HEAP32[$3 + 16 >> 2];
      HEAP32[$3 + 12 >> 2] = jspGetException();
      if (HEAP32[$3 + 12 >> 2]) {
       _jswrap_prombox_reject(HEAP32[$3 + 36 >> 2], HEAP32[$3 + 12 >> 2]);
       jsvUnLock(HEAP32[$3 + 12 >> 2]);
      }
      break block3;
     }
     jsvUnLock(jswrap_promise_then(HEAP32[$3 + 56 >> 2], HEAP32[$3 + 32 >> 2], HEAP32[$3 + 28 >> 2]));
    }
    jsvUnLock3(HEAP32[$3 + 32 >> 2], HEAP32[$3 + 28 >> 2], HEAP32[$3 + 36 >> 2]);
   }
   jsvUnLock2(HEAP32[$3 + 48 >> 2], HEAP32[$3 + 40 >> 2]);
  }
  __stack_pointer = $3 - -64 | 0;
 }
 
 function _jswrap_promise_seal($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 44 >> 2] = $0;
  HEAP32[$3 + 40 >> 2] = $1;
  HEAP8[$3 + 39 | 0] = $2;
  jsvObjectSetChildAndUnLock(HEAP32[$3 + 44 >> 2], 137340, jsvNewFromInteger(HEAP8[$3 + 39 | 0] & 1 ? 2 : 1));
  HEAP32[$3 + 32 >> 2] = HEAP8[$3 + 39 | 0] & 1 ? 135454 : 125130;
  HEAP32[$3 + 28 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 32 >> 2]);
  block1 : {
   if (!HEAP32[$3 + 28 >> 2]) {
    if (!(HEAP8[$3 + 39 | 0] & 1)) {
     HEAP32[$3 >> 2] = HEAP32[$3 + 40 >> 2];
     jsExceptionHere(1, 124321, $3);
     HEAP32[$3 + 24 >> 2] = 0;
     block : {
      if (!(jsvIsObject(HEAP32[$3 + 40 >> 2]) & 1)) {
       break block
      }
      $0 = jsvObjectGetChildIfExists(HEAP32[$3 + 40 >> 2], 135901);
      HEAP32[$3 + 24 >> 2] = $0;
      if (!$0) {
       break block
      }
      jsvObjectSetChildAndUnLock(HEAP32[92131], 138079, HEAP32[$3 + 24 >> 2]);
     }
    }
    break block1;
   }
   if (jsvIsArray(HEAP32[$3 + 28 >> 2]) & 1) {
    jsvObjectIteratorNew($3 + 20 | 0, HEAP32[$3 + 28 >> 2]);
    while (1) {
     if (jsvObjectIteratorHasValue_1737($3 + 20 | 0) & 1) {
      HEAP32[$3 + 16 >> 2] = jsvObjectIteratorGetValue_1738($3 + 20 | 0);
      _jswrap_promise_queue_reaction(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 16 >> 2], HEAP32[$3 + 40 >> 2], HEAP8[$3 + 39 | 0] & 1);
      jsvUnLock(HEAP32[$3 + 16 >> 2]);
      jsvObjectIteratorNext($3 + 20 | 0);
      continue;
     }
     break;
    };
    jsvObjectIteratorFree_1742($3 + 20 | 0);
   }
   jsvUnLock(HEAP32[$3 + 28 >> 2]);
  }
  __stack_pointer = $3 + 48 | 0;
 }
 
 function jswrap_serial_constructor() {
  return jspNewObject(0, 135856) | 0;
 }
 
 function jswrap_serial_setConsole($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP8[$2 + 11 | 0] = $1;
  HEAP8[$2 + 10 | 0] = jsiGetDeviceFromClass(HEAP32[$2 + 12 >> 2]);
  block1 : {
   if (!(HEAPU8[$2 + 10 | 0] < 17 | HEAPU8[$2 + 10 | 0] > 22)) {
    jsiSetConsoleDevice(HEAPU8[$2 + 10 | 0], HEAP8[$2 + 11 | 0] & 1);
    break block1;
   }
   jsExceptionHere(1, 127530, 0);
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jswrap_serial_setup($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  block : {
   if (!(jsvIsObject(HEAP32[$3 + 28 >> 2]) & 1)) {
    break block
   }
   HEAP8[$3 + 19 | 0] = jsiGetDeviceFromClass(HEAP32[$3 + 28 >> 2]);
   block1 : {
    if (jsvIsUndefined(HEAP32[$3 + 20 >> 2]) & 1) {
     HEAP32[$3 + 20 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 28 >> 2], 127219);
     break block1;
    }
    jsvLockAgain(HEAP32[$3 + 20 >> 2]);
   }
   HEAP8[$3 + 5 | 0] = jsserialPopulateUSARTInfo($3 + 6 | 0, HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]) & 1;
   if (!(HEAP8[$3 + 5 | 0] & 1)) {
    jsvUnLock(HEAP32[$3 + 20 >> 2]);
    break block;
   }
   jsvObjectSetChildAndUnLock(HEAP32[$3 + 28 >> 2], 137373, jsvNewFromInteger(HEAPU8[$3 + 6 | 0] | HEAPU8[$3 + 7 | 0] << 8 | (HEAPU8[$3 + 8 | 0] << 16 | HEAPU8[$3 + 9 | 0] << 24)));
   block2 : {
    if (HEAP32[$3 + 20 >> 2]) {
     jsvObjectSetChildAndUnLock(HEAP32[$3 + 28 >> 2], 127219, HEAP32[$3 + 20 >> 2]);
     break block2;
    }
    jsvObjectRemoveChild(HEAP32[$3 + 28 >> 2], 127219);
   }
   if (!(HEAPU8[$3 + 19 | 0] < 17 | HEAPU8[$3 + 19 | 0] > 22)) {
    if (!(HEAPU8[$3 + 19 | 0] < 22 | HEAPU8[$3 + 19 | 0] > 22)) {
     jshUSARTSetup(HEAPU8[$3 + 19 | 0], $3 + 6 | 0)
    }
    break block;
   }
   if (!HEAPU8[$3 + 19 | 0]) {
    if (HEAPU8[$3 + 11 | 0] != 255) {
     jshPinSetState(HEAPU8[$3 + 11 | 0], 1);
     jshPinOutput(HEAPU8[$3 + 11 | 0], 1);
    }
    if (HEAPU8[$3 + 10 | 0] != 255) {
     jshPinSetState(HEAPU8[$3 + 10 | 0], 5);
     jsserialEventCallbackInit(HEAP32[$3 + 28 >> 2], $3 + 6 | 0);
    }
    if (HEAPU8[$3 + 12 | 0] != 255) {
     jsExceptionHere(1, 125008, 0)
    }
   }
  }
  __stack_pointer = $3 + 32 | 0;
 }
 
 function jswrap_serial_unsetup($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 28 >> 2] = $0;
  block : {
   if (!(jsvIsObject(HEAP32[$1 + 28 >> 2]) & 1)) {
    break block
   }
   HEAP8[$1 + 27 | 0] = jsiGetDeviceFromClass(HEAP32[$1 + 28 >> 2]);
   HEAP32[$1 + 20 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 28 >> 2], 127219);
   HEAP32[$1 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 28 >> 2], 137373);
   if (HEAP32[$1 + 20 >> 2]) {
    jsserialPopulateUSARTInfo($1 + 3 | 0, HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2]);
    if (HEAPU8[$1 + 9 | 0] != 255) {
     jshPinSetState(HEAPU8[$1 + 9 | 0], 0)
    }
    if (HEAPU8[$1 + 10 | 0] != 255) {
     jshPinSetState(HEAPU8[$1 + 10 | 0], 0)
    }
    if (HEAPU8[$1 + 7 | 0] != 255) {
     jshPinSetState(HEAPU8[$1 + 7 | 0], 0)
    }
    if (HEAPU8[$1 + 8 | 0] != 255) {
     jshPinSetState(HEAPU8[$1 + 8 | 0], 0)
    }
    if (!(HEAPU8[$1 + 27 | 0] <= 22 & HEAPU8[$1 + 27 | 0] >= 17)) {
     jsserialEventCallbackKill(HEAP32[$1 + 28 >> 2], $1 + 3 | 0)
    }
   }
   jsvUnLock2(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 16 >> 2]);
   jsvObjectRemoveChild(HEAP32[$1 + 28 >> 2], 137373);
   jsvObjectRemoveChild(HEAP32[$1 + 28 >> 2], 127219);
   if (HEAPU8[$1 + 27 | 0] < 17 | HEAPU8[$1 + 27 | 0] > 22) {
    break block
   }
   jshUSARTUnSetup(HEAPU8[$1 + 27 | 0]);
   jshSetFlowControlEnabled(HEAPU8[$1 + 27 | 0], 0, 255);
  }
  __stack_pointer = $1 + 32 | 0;
 }
 
 function jswrap_serial_idle() {
  return jsserialEventCallbackIdle() & 1;
 }
 
 function _jswrap_serial_print($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP8[$4 + 23 | 0] = $2;
  HEAP8[$4 + 22 | 0] = $3;
  block : {
   if (!(jsserialGetSendFunction(HEAP32[$4 + 28 >> 2], $4 + 16 | 0, $4 + 3 | 0) & 1)) {
    break block
   }
   if (HEAP8[$4 + 23 | 0] & 1) {
    HEAP32[$4 + 24 >> 2] = jsvAsString(HEAP32[$4 + 24 >> 2])
   }
   jsvIterateCallback(HEAP32[$4 + 24 >> 2], HEAP32[$4 + 16 >> 2], $4 + 3 | 0);
   if (HEAP8[$4 + 23 | 0] & 1) {
    jsvUnLock(HEAP32[$4 + 24 >> 2])
   }
   if (!(HEAP8[$4 + 22 | 0] & 1)) {
    break block
   }
   FUNCTION_TABLE[HEAP32[$4 + 16 >> 2]](13, $4 + 3 | 0);
   FUNCTION_TABLE[HEAP32[$4 + 16 >> 2]](10, $4 + 3 | 0);
  }
  __stack_pointer = $4 + 32 | 0;
 }
 
 function jswrap_serial_print($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  _jswrap_serial_print(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1, 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jswrap_serial_println($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  _jswrap_serial_print(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1, 1);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jswrap_serial_write($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  _jswrap_serial_print(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0, 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jswrap_serial_inject($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP8[$2 + 7 | 0] = jsiGetDeviceFromClass(HEAP32[$2 + 12 >> 2]);
  if (!(HEAPU8[$2 + 7 | 0] < 17 | HEAPU8[$2 + 7 | 0] > 22)) {
   jsvIterateBufferCallback(HEAP32[$2 + 8 >> 2], 653, $2 + 7 | 0)
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function _jswrap_serial_inject_cb($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  HEAP8[$3 + 3 | 0] = HEAPU8[HEAP32[$3 + 4 >> 2]];
  jshPushIOCharEvents(HEAPU8[$3 + 3 | 0], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jswrap_serial_flush($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP8[$1 + 11 | 0] = jsiGetDeviceFromClass(HEAP32[$1 + 12 >> 2]);
  if (HEAPU8[$1 + 11 | 0]) {
   jshTransmitFlushDevice(HEAPU8[$1 + 11 | 0])
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_serial_isConnected($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP8[$1 + 7 | 0] = jsiGetDeviceFromClass(HEAP32[$1 + 8 >> 2]);
  block1 : {
   if (!(HEAPU8[$1 + 7 | 0] != 17 & HEAPU8[$1 + 7 | 0] != 18)) {
    HEAP8[$1 + 15 | 0] = 1;
    break block1;
   }
   if (HEAPU8[$1 + 7 | 0] == 20) {
    HEAP8[$1 + 15 | 0] = 1;
    break block1;
   }
   if (HEAPU8[$1 + 7 | 0] == 21) {
    HEAP8[$1 + 15 | 0] = jshIsUSBSERIALConnected() & 1;
    break block1;
   }
   if (!(HEAPU8[$1 + 7 | 0] < 22 | HEAPU8[$1 + 7 | 0] > 22)) {
    HEAP8[$1 + 15 | 0] = jshIsDeviceInitialised(HEAPU8[$1 + 7 | 0]) & 1;
    break block1;
   }
   HEAP8[$1 + 15 | 0] = 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function jswrap_storage_eraseAll() {
  jsfEraseAll();
 }
 
 function jswrap_storage_erase($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer + -64 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 60 >> 2] = $0;
  jsfNameFromVar($1 + 32 | 0, HEAP32[$1 + 60 >> 2]);
  HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 56 >> 2];
  $2 = HEAP32[$1 + 52 >> 2];
  $0 = HEAP32[$1 + 48 >> 2];
  HEAP32[$1 + 16 >> 2] = $0;
  HEAP32[$1 + 20 >> 2] = $2;
  $0 = HEAP32[$1 + 44 >> 2];
  $2 = HEAP32[$1 + 40 >> 2];
  HEAP32[$1 + 8 >> 2] = $2;
  HEAP32[$1 + 12 >> 2] = $0;
  $2 = HEAP32[$1 + 36 >> 2];
  $0 = HEAP32[$1 + 32 >> 2];
  HEAP32[$1 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = $2;
  jsfEraseFile($1);
  __stack_pointer = $1 - -64 | 0;
 }
 
 function jswrap_storage_read($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 80 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 76 >> 2] = $0;
  HEAP32[$3 + 72 >> 2] = $1;
  HEAP32[$3 + 68 >> 2] = $2;
  jsfNameFromVar($3 + 40 | 0, HEAP32[$3 + 76 >> 2]);
  $2 = HEAP32[$3 + 72 >> 2];
  $4 = HEAP32[$3 + 68 >> 2];
  HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 64 >> 2];
  $1 = HEAP32[$3 + 60 >> 2];
  $0 = HEAP32[$3 + 56 >> 2];
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 28 >> 2] = $1;
  $0 = HEAP32[$3 + 52 >> 2];
  $1 = HEAP32[$3 + 48 >> 2];
  HEAP32[$3 + 16 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $0;
  $1 = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$3 + 40 >> 2];
  HEAP32[$3 + 8 >> 2] = $0;
  HEAP32[$3 + 12 >> 2] = $1;
  $0 = jsfReadFile($3 + 8 | 0, $2, $4);
  __stack_pointer = $3 + 80 | 0;
  return $0 | 0;
 }
 
 function jswrap_storage_readJSON($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 80 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 72 >> 2] = $0;
  HEAP8[$2 + 71 | 0] = $1;
  jsfNameFromVar($2 + 36 | 0, HEAP32[$2 + 72 >> 2]);
  HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 60 >> 2];
  $1 = HEAP32[$2 + 56 >> 2];
  $0 = HEAP32[$2 + 52 >> 2];
  HEAP32[$2 + 16 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  $0 = HEAP32[$2 + 48 >> 2];
  $1 = HEAP32[$2 + 44 >> 2];
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 12 >> 2] = $0;
  $1 = HEAP32[$2 + 40 >> 2];
  $0 = HEAP32[$2 + 36 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 + 64 >> 2] = jsfReadFile($2, 0, 0);
  block : {
   if (!HEAP32[$2 + 64 >> 2]) {
    HEAP32[$2 + 76 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 32 >> 2] = jswrap_json_parse_liberal(HEAP32[$2 + 64 >> 2], HEAP8[$2 + 71 | 0] & 1);
   jsvUnLock(HEAP32[$2 + 64 >> 2]);
   HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 32 >> 2];
  }
  __stack_pointer = $2 + 80 | 0;
  return HEAP32[$2 + 76 >> 2];
 }
 
 function jswrap_storage_readArrayBuffer($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 80 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 72 >> 2] = $0;
  jsfNameFromVar($1 + 40 | 0, HEAP32[$1 + 72 >> 2]);
  HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 64 >> 2];
  $2 = HEAP32[$1 + 60 >> 2];
  $0 = HEAP32[$1 + 56 >> 2];
  HEAP32[$1 + 24 >> 2] = $0;
  HEAP32[$1 + 28 >> 2] = $2;
  $0 = HEAP32[$1 + 52 >> 2];
  $2 = HEAP32[$1 + 48 >> 2];
  HEAP32[$1 + 16 >> 2] = $2;
  HEAP32[$1 + 20 >> 2] = $0;
  $2 = HEAP32[$1 + 44 >> 2];
  $0 = HEAP32[$1 + 40 >> 2];
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP32[$1 + 12 >> 2] = $2;
  HEAP32[$1 + 68 >> 2] = jsfReadFile($1 + 8 | 0, 0, 0);
  block : {
   if (!HEAP32[$1 + 68 >> 2]) {
    HEAP32[$1 + 76 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 36 >> 2] = jsvNewArrayBufferFromString(HEAP32[$1 + 68 >> 2], 0);
   jsvUnLock(HEAP32[$1 + 68 >> 2]);
   HEAP32[$1 + 76 >> 2] = HEAP32[$1 + 36 >> 2];
  }
  __stack_pointer = $1 + 80 | 0;
  return HEAP32[$1 + 76 >> 2];
 }
 
 function jswrap_storage_write($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 80 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 76 >> 2] = $0;
  HEAP32[$4 + 72 >> 2] = $1;
  HEAP32[$4 + 68 >> 2] = $2;
  HEAP32[$4 + 64 >> 2] = $3;
  block : {
   if (jsvIsObject(HEAP32[$4 + 72 >> 2]) & 1) {
    HEAP32[$4 + 60 >> 2] = jswrap_json_stringify(HEAP32[$4 + 72 >> 2], 0, 0);
    HEAP32[$4 + 68 >> 2] = 0;
    HEAP32[$4 + 64 >> 2] = 0;
    break block;
   }
   HEAP32[$4 + 60 >> 2] = jsvLockAgainSafe(HEAP32[$4 + 72 >> 2]);
  }
  jsfNameFromVar($4 + 28 | 0, HEAP32[$4 + 76 >> 2]);
  $2 = HEAP32[$4 + 60 >> 2];
  $3 = HEAP32[$4 + 68 >> 2];
  $5 = HEAP32[$4 + 64 >> 2];
  HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 52 >> 2];
  $1 = HEAP32[$4 + 48 >> 2];
  $0 = HEAP32[$4 + 44 >> 2];
  HEAP32[$4 + 16 >> 2] = $0;
  HEAP32[$4 + 20 >> 2] = $1;
  $0 = HEAP32[$4 + 40 >> 2];
  $1 = HEAP32[$4 + 36 >> 2];
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 12 >> 2] = $0;
  $1 = HEAP32[$4 + 32 >> 2];
  $0 = HEAP32[$4 + 28 >> 2];
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP8[$4 + 59 | 0] = jsfWriteFile($4, $2, 0, $3, $5) & 1;
  jsvUnLock(HEAP32[$4 + 60 >> 2]);
  __stack_pointer = $4 + 80 | 0;
  return HEAP8[$4 + 59 | 0] & 1;
 }
 
 function jswrap_storage_writeJSON($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 80 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 72 >> 2] = $0;
  HEAP32[$2 + 68 >> 2] = $1;
  HEAP32[$2 + 64 >> 2] = jsvNewFromEmptyString_1774();
  block : {
   if (!HEAP32[$2 + 64 >> 2]) {
    HEAP8[$2 + 79 | 0] = 0;
    break block;
   }
   jsfGetJSON(HEAP32[$2 + 68 >> 2], HEAP32[$2 + 64 >> 2], 14032);
   jsfNameFromVar($2 + 32 | 0, HEAP32[$2 + 72 >> 2]);
   $3 = HEAP32[$2 + 64 >> 2];
   HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 56 >> 2];
   $1 = HEAP32[$2 + 52 >> 2];
   $0 = HEAP32[$2 + 48 >> 2];
   HEAP32[$2 + 16 >> 2] = $0;
   HEAP32[$2 + 20 >> 2] = $1;
   $0 = HEAP32[$2 + 44 >> 2];
   $1 = HEAP32[$2 + 40 >> 2];
   HEAP32[$2 + 8 >> 2] = $1;
   HEAP32[$2 + 12 >> 2] = $0;
   $1 = HEAP32[$2 + 36 >> 2];
   $0 = HEAP32[$2 + 32 >> 2];
   HEAP32[$2 >> 2] = $0;
   HEAP32[$2 + 4 >> 2] = $1;
   HEAP8[$2 + 63 | 0] = jsfWriteFile($2, $3, 0, 0, 0) & 1;
   jsvUnLock(HEAP32[$2 + 64 >> 2]);
   HEAP8[$2 + 79 | 0] = HEAP8[$2 + 63 | 0] & 1;
  }
  __stack_pointer = $2 + 80 | 0;
  return HEAP8[$2 + 79 | 0] & 1;
 }
 
 function jsvNewFromEmptyString_1774() {
  return jsvNewWithFlags(28);
 }
 
 function jswrap_storage_list($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  HEAP32[$2 + 20 >> 2] = 0;
  HEAP32[$2 + 16 >> 2] = 0;
  if (jsvIsObject(HEAP32[$2 + 24 >> 2]) & 1) {
   HEAP32[$2 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 24 >> 2], 136858);
   if (HEAP32[$2 + 12 >> 2]) {
    block : {
     if (jsvGetBoolAndUnLock(HEAP32[$2 + 12 >> 2]) & 1) {
      HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] | 64;
      break block;
     }
     HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 16 >> 2] | 64;
    }
   }
  }
  $0 = jsfListFiles(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2]);
  __stack_pointer = $2 + 32 | 0;
  return $0 | 0;
 }
 
 function jswrap_storage_hash($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jsfHashFiles(HEAP32[$1 + 12 >> 2], 0, 64);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function jswrap_storage_compact($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 15 | 0] = $0;
  jsfCompact(HEAP8[$1 + 15 | 0] & 1);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_storage_getFree($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 48 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 47 | 0] = $0;
  HEAP32[$1 + 40 >> 2] = 0;
  jsfGetStorageStats($1 + 12 | 0, HEAP32[$1 + 40 >> 2], 1);
  __stack_pointer = $1 + 48 | 0;
  return HEAP32[$1 + 32 >> 2];
 }
 
 function jswrap_storage_getStats($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 48 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 40 >> 2] = $0;
  HEAP32[$1 + 36 >> 2] = jsvNewObject();
  block : {
   if (!HEAP32[$1 + 36 >> 2]) {
    HEAP32[$1 + 44 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 32 >> 2] = 134217728;
   jsfGetStorageStats($1 + 4 | 0, HEAP32[$1 + 32 >> 2], 1);
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 36 >> 2], 127309, jsvNewFromInteger(HEAP32[$1 + 20 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 36 >> 2], 127341, jsvNewFromInteger(HEAP32[$1 + 24 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 36 >> 2], 127331, jsvNewFromInteger(HEAP32[$1 + 4 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 36 >> 2], 124640, jsvNewFromInteger(HEAP32[$1 + 8 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 36 >> 2], 127320, jsvNewFromInteger(HEAP32[$1 + 12 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 36 >> 2], 124592, jsvNewFromInteger(HEAP32[$1 + 16 >> 2]));
   HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 36 >> 2];
  }
  __stack_pointer = $1 + 48 | 0;
  return HEAP32[$1 + 44 >> 2];
 }
 
 function jswrap_storage_optimise() {
  jsfCreateFileTable();
 }
 
 function jswrap_storage_open($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 256 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 248 >> 2] = $0;
  HEAP32[$2 + 244 >> 2] = $1;
  HEAP8[$2 + 243 | 0] = 0;
  block3 : {
   block : {
    if (jsvIsStringEqual(HEAP32[$2 + 244 >> 2], 128396) & 1) {
     HEAP8[$2 + 243 | 0] = 114;
     break block;
    }
    block1 : {
     if (jsvIsStringEqual(HEAP32[$2 + 244 >> 2], 124222) & 1) {
      HEAP8[$2 + 243 | 0] = 119;
      break block1;
     }
     block2 : {
      if (jsvIsStringEqual(HEAP32[$2 + 244 >> 2], 140422) & 1) {
       HEAP8[$2 + 243 | 0] = 97;
       break block2;
      }
      HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 244 >> 2];
      jsExceptionHere(1, 136066, $2 - -64 | 0);
      HEAP32[$2 + 252 >> 2] = 0;
      break block3;
     }
    }
   }
   HEAP32[$2 + 236 >> 2] = jspNewObject(0, 137673);
   if (!HEAP32[$2 + 236 >> 2]) {
    HEAP32[$2 + 252 >> 2] = 0;
    break block3;
   }
   HEAP32[$2 + 232 >> 2] = 1;
   HEAP32[$2 + 228 >> 2] = jsvNewFromStringVar(HEAP32[$2 + 248 >> 2], 0, 28);
   jsfNameFromVar($2 + 200 | 0, HEAP32[$2 + 228 >> 2]);
   HEAP32[$2 + 196 >> 2] = 27;
   while (1) {
    $0 = 0;
    $0 = HEAP32[$2 + 196 >> 2] ? !HEAPU8[(HEAP32[$2 + 196 >> 2] + $2 | 0) + 199 | 0] : $0;
    if ($0) {
     HEAP32[$2 + 196 >> 2] = HEAP32[$2 + 196 >> 2] - 1;
     continue;
    }
    break;
   };
   HEAP8[HEAP32[$2 + 196 >> 2] + ($2 + 200 | 0) | 0] = HEAP32[$2 + 232 >> 2];
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 137596, HEAP32[$2 + 228 >> 2]);
   HEAP32[$2 + 192 >> 2] = 0;
   HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 224 >> 2];
   $0 = HEAP32[$2 + 220 >> 2];
   $1 = HEAP32[$2 + 216 >> 2];
   HEAP32[$2 + 48 >> 2] = $1;
   HEAP32[$2 + 52 >> 2] = $0;
   $1 = HEAP32[$2 + 212 >> 2];
   $0 = HEAP32[$2 + 208 >> 2];
   HEAP32[$2 + 40 >> 2] = $0;
   HEAP32[$2 + 44 >> 2] = $1;
   $0 = HEAP32[$2 + 204 >> 2];
   $1 = HEAP32[$2 + 200 >> 2];
   HEAP32[$2 + 32 >> 2] = $1;
   HEAP32[$2 + 36 >> 2] = $0;
   HEAP32[$2 + 156 >> 2] = jsfFindFile($2 + 32 | 0, $2 + 160 | 0);
   if (HEAP32[$2 + 156 >> 2] ? HEAPU8[$2 + 243 | 0] == 119 : 0) {
    jswrap_storagefile_erase(HEAP32[$2 + 236 >> 2]);
    HEAP32[$2 + 156 >> 2] = 0;
   }
   block4 : {
    if (HEAP32[$2 + 156 >> 2]) {
     $0 = jsfGetFileSize($2 + 160 | 0);
     break block4;
    }
    $0 = 0;
   }
   HEAP32[$2 + 152 >> 2] = $0;
   if (HEAPU8[$2 + 243 | 0] == 97) {
    HEAP8[$2 + 151 | 0] = 255;
    if (HEAP32[$2 + 156 >> 2]) {
     jshFlashRead($2 + 151 | 0, (HEAP32[$2 + 156 >> 2] + jsfGetFileSize($2 + 160 | 0) | 0) - 1 | 0, 1)
    }
    while (1) {
     $0 = 0;
     block5 : {
      if (!HEAP32[$2 + 156 >> 2]) {
       break block5
      }
      $0 = 0;
      if (HEAPU8[$2 + 151 | 0] == 255) {
       break block5
      }
      $0 = HEAP32[$2 + 232 >> 2] < 255;
     }
     if ($0) {
      HEAP32[$2 + 232 >> 2] = HEAP32[$2 + 232 >> 2] + 1;
      HEAP8[HEAP32[$2 + 196 >> 2] + ($2 + 200 | 0) | 0] = HEAP32[$2 + 232 >> 2];
      HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 224 >> 2];
      $1 = HEAP32[$2 + 220 >> 2];
      $0 = HEAP32[$2 + 216 >> 2];
      HEAP32[$2 + 16 >> 2] = $0;
      HEAP32[$2 + 20 >> 2] = $1;
      $0 = HEAP32[$2 + 212 >> 2];
      $1 = HEAP32[$2 + 208 >> 2];
      HEAP32[$2 + 8 >> 2] = $1;
      HEAP32[$2 + 12 >> 2] = $0;
      $1 = HEAP32[$2 + 204 >> 2];
      $0 = HEAP32[$2 + 200 >> 2];
      HEAP32[$2 >> 2] = $0;
      HEAP32[$2 + 4 >> 2] = $1;
      HEAP32[$2 + 156 >> 2] = jsfFindFile($2, $2 + 160 | 0);
      block6 : {
       if (HEAP32[$2 + 156 >> 2]) {
        HEAP32[$2 + 152 >> 2] = jsfGetFileSize($2 + 160 | 0);
        jshFlashRead($2 + 151 | 0, (HEAP32[$2 + 156 >> 2] + HEAP32[$2 + 152 >> 2] | 0) - 1 | 0, 1);
        break block6;
       }
       HEAP32[$2 + 152 >> 2] = 0;
      }
      continue;
     }
     break;
    };
    if (HEAP32[$2 + 156 >> 2]) {
     HEAP8[$2 + 79 | 0] = 0;
     while (1) {
      block7 : {
       if (!((HEAPU8[$2 + 79 | 0] ^ -1) & 1)) {
        break block7
       }
       HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 152 >> 2] - HEAP32[$2 + 192 >> 2];
       if (HEAP32[$2 + 72 >> 2] <= 0) {
        HEAP8[$2 + 79 | 0] = 1;
        break block7;
       }
       if (HEAP32[$2 + 72 >> 2] > 64) {
        HEAP32[$2 + 72 >> 2] = 64
       }
       jshFlashRead($2 + 80 | 0, HEAP32[$2 + 156 >> 2] + HEAP32[$2 + 192 >> 2] | 0, HEAP32[$2 + 72 >> 2]);
       HEAP32[$2 + 68 >> 2] = 0;
       while (1) {
        if (HEAP32[$2 + 68 >> 2] < HEAP32[$2 + 72 >> 2]) {
         if (HEAPU8[HEAP32[$2 + 68 >> 2] + ($2 + 80 | 0) | 0] == 255) {
          HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 68 >> 2];
          HEAP8[$2 + 79 | 0] = 1;
         } else {
          HEAP32[$2 + 68 >> 2] = HEAP32[$2 + 68 >> 2] + 1;
          continue;
         }
        }
        break;
       };
       HEAP32[$2 + 192 >> 2] = HEAP32[$2 + 72 >> 2] + HEAP32[$2 + 192 >> 2];
       continue;
      }
      break;
     };
    }
   }
   block8 : {
    if (HEAPU8[$2 + 243 | 0] != 114) {
     break block8
    }
   }
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 135868, jsvNewFromInteger(HEAP32[$2 + 232 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 125047, jsvNewFromInteger(HEAP32[$2 + 192 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 137959, jsvNewFromInteger(HEAP8[$2 + 243 | 0] << 24 >> 24));
   HEAP32[$2 + 252 >> 2] = HEAP32[$2 + 236 >> 2];
  }
  __stack_pointer = $2 + 256 | 0;
  return HEAP32[$2 + 252 >> 2];
 }
 
 function jswrap_storagefile_erase($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 80 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 76 >> 2] = $0;
  jsfNameFromVarAndUnLock($1 + 48 | 0, jsvObjectGetChildIfExists(HEAP32[$1 + 76 >> 2], 137596));
  HEAP32[$1 + 44 >> 2] = 27;
  while (1) {
   $0 = 0;
   $0 = HEAP32[$1 + 44 >> 2] ? !HEAPU8[(HEAP32[$1 + 44 >> 2] + $1 | 0) + 47 | 0] : $0;
   if ($0) {
    HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 44 >> 2] - 1;
    continue;
   }
   break;
  };
  HEAP32[$1 + 40 >> 2] = 1;
  HEAP8[$1 + 39 | 0] = 1;
  while (1) {
   if (HEAP8[$1 + 39 | 0] & 1) {
    HEAP8[HEAP32[$1 + 44 >> 2] + ($1 + 48 | 0) | 0] = HEAP32[$1 + 40 >> 2];
    HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 72 >> 2];
    $2 = HEAP32[$1 + 68 >> 2];
    $0 = HEAP32[$1 + 64 >> 2];
    HEAP32[$1 + 24 >> 2] = $0;
    HEAP32[$1 + 28 >> 2] = $2;
    $0 = HEAP32[$1 + 60 >> 2];
    $2 = HEAP32[$1 + 56 >> 2];
    HEAP32[$1 + 16 >> 2] = $2;
    HEAP32[$1 + 20 >> 2] = $0;
    $2 = HEAP32[$1 + 52 >> 2];
    $0 = HEAP32[$1 + 48 >> 2];
    HEAP32[$1 + 8 >> 2] = $0;
    HEAP32[$1 + 12 >> 2] = $2;
    HEAP8[$1 + 39 | 0] = jsfEraseFile($1 + 8 | 0) & 1;
    HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
    continue;
   }
   break;
  };
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 76 >> 2], 135868, jsvNewFromInteger(1));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 76 >> 2], 125047, jsvNewFromInteger(0));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 76 >> 2], 137959, jsvNewFromInteger(0));
  __stack_pointer = $1 + 80 | 0;
 }
 
 function jswrap_storagefile_read_internal($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 224 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 216 >> 2] = $0;
  HEAP32[$2 + 212 >> 2] = $1;
  HEAP8[$2 + 211 | 0] = HEAP32[$2 + 212 >> 2] < 0;
  HEAP8[$2 + 210 | 0] = jsvObjectGetIntegerChild(HEAP32[$2 + 216 >> 2], 137959);
  block : {
   if (HEAPU8[$2 + 210 | 0] != 114) {
    jsExceptionHere(1, 137923, 0);
    HEAP32[$2 + 220 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 204 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 216 >> 2], 135868);
   jsfNameFromVarAndUnLock($2 + 176 | 0, jsvObjectGetChildIfExists(HEAP32[$2 + 216 >> 2], 137596));
   HEAP32[$2 + 172 >> 2] = 27;
   while (1) {
    $0 = 0;
    $0 = HEAP32[$2 + 172 >> 2] ? !HEAPU8[(HEAP32[$2 + 172 >> 2] + $2 | 0) + 175 | 0] : $0;
    if ($0) {
     HEAP32[$2 + 172 >> 2] = HEAP32[$2 + 172 >> 2] - 1;
     continue;
    }
    break;
   };
   HEAP8[HEAP32[$2 + 172 >> 2] + ($2 + 176 | 0) | 0] = HEAP32[$2 + 204 >> 2];
   HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 200 >> 2];
   $0 = HEAP32[$2 + 196 >> 2];
   $1 = HEAP32[$2 + 192 >> 2];
   HEAP32[$2 + 56 >> 2] = $1;
   HEAP32[$2 + 60 >> 2] = $0;
   $1 = HEAP32[$2 + 188 >> 2];
   $0 = HEAP32[$2 + 184 >> 2];
   HEAP32[$2 + 48 >> 2] = $0;
   HEAP32[$2 + 52 >> 2] = $1;
   $0 = HEAP32[$2 + 180 >> 2];
   $1 = HEAP32[$2 + 176 >> 2];
   HEAP32[$2 + 40 >> 2] = $1;
   HEAP32[$2 + 44 >> 2] = $0;
   HEAP32[$2 + 136 >> 2] = jsfFindFile($2 + 40 | 0, $2 + 140 | 0);
   if (!HEAP32[$2 + 136 >> 2]) {
    HEAP32[$2 + 220 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 132 >> 2] = jsfGetFileSize($2 + 140 | 0);
   HEAP32[$2 + 128 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 216 >> 2], 125047);
   HEAP32[$2 + 124 >> 2] = 0;
   if (HEAP8[$2 + 211 | 0] & 1) {
    HEAP32[$2 + 212 >> 2] = 32
   }
   while (1) {
    block1 : {
     if (!HEAP32[$2 + 212 >> 2]) {
      break block1
     }
     HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 132 >> 2] - HEAP32[$2 + 128 >> 2];
     if (HEAP32[$2 + 76 >> 2] <= 0) {
      HEAP32[$2 + 128 >> 2] = 0;
      block2 : {
       if (HEAP32[$2 + 204 >> 2] == 255) {
        HEAP32[$2 + 136 >> 2] = 0;
        break block2;
       }
       HEAP32[$2 + 204 >> 2] = HEAP32[$2 + 204 >> 2] + 1;
       HEAP8[HEAP32[$2 + 172 >> 2] + ($2 + 176 | 0) | 0] = HEAP32[$2 + 204 >> 2];
       HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 200 >> 2];
       $1 = HEAP32[$2 + 196 >> 2];
       $0 = HEAP32[$2 + 192 >> 2];
       HEAP32[$2 + 24 >> 2] = $0;
       HEAP32[$2 + 28 >> 2] = $1;
       $0 = HEAP32[$2 + 188 >> 2];
       $1 = HEAP32[$2 + 184 >> 2];
       HEAP32[$2 + 16 >> 2] = $1;
       HEAP32[$2 + 20 >> 2] = $0;
       $1 = HEAP32[$2 + 180 >> 2];
       $0 = HEAP32[$2 + 176 >> 2];
       HEAP32[$2 + 8 >> 2] = $0;
       HEAP32[$2 + 12 >> 2] = $1;
       HEAP32[$2 + 136 >> 2] = jsfFindFile($2 + 8 | 0, $2 + 140 | 0);
       HEAP32[$2 + 132 >> 2] = jsfGetFileSize($2 + 140 | 0);
      }
      jsvObjectSetChildAndUnLock(HEAP32[$2 + 216 >> 2], 125047, jsvNewFromInteger(HEAP32[$2 + 128 >> 2]));
      jsvObjectSetChildAndUnLock(HEAP32[$2 + 216 >> 2], 135868, jsvNewFromInteger(HEAP32[$2 + 204 >> 2]));
      HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 132 >> 2];
      if (!HEAP32[$2 + 136 >> 2]) {
       HEAP32[$2 + 220 >> 2] = HEAP32[$2 + 124 >> 2];
       break block;
      }
     }
     HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 212 >> 2];
     if (HEAP32[$2 + 72 >> 2] > 32) {
      HEAP32[$2 + 72 >> 2] = 32
     }
     if (HEAP32[$2 + 72 >> 2] > HEAP32[$2 + 76 >> 2]) {
      HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 76 >> 2]
     }
     jshFlashRead($2 + 80 | 0, HEAP32[$2 + 136 >> 2] + HEAP32[$2 + 128 >> 2] | 0, HEAP32[$2 + 72 >> 2]);
     HEAP32[$2 + 68 >> 2] = 0;
     while (1) {
      block3 : {
       if (HEAP32[$2 + 68 >> 2] >= HEAP32[$2 + 72 >> 2]) {
        break block3
       }
       if (HEAPU8[HEAP32[$2 + 68 >> 2] + ($2 + 80 | 0) | 0] == 255) {
        HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 68 >> 2];
        HEAP32[$2 + 212 >> 2] = HEAP32[$2 + 72 >> 2];
        break block3;
       }
       if (!(HEAP8[$2 + 211 | 0] & 1) | HEAPU8[HEAP32[$2 + 68 >> 2] + ($2 + 80 | 0) | 0] != 10) {
        HEAP32[$2 + 68 >> 2] = HEAP32[$2 + 68 >> 2] + 1;
        continue;
       } else {
        HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 68 >> 2] + 1;
        HEAP32[$2 + 212 >> 2] = HEAP32[$2 + 72 >> 2];
        HEAP8[$2 + 211 | 0] = 0;
       }
      }
      break;
     };
     if (!HEAP32[$2 + 72 >> 2]) {
      break block1
     }
     if (!HEAP32[$2 + 124 >> 2]) {
      HEAP32[$2 + 124 >> 2] = jsvNewFromEmptyString_1774()
     }
     if (HEAP32[$2 + 124 >> 2]) {
      jsvAppendStringBuf(HEAP32[$2 + 124 >> 2], $2 + 80 | 0, HEAP32[$2 + 72 >> 2])
     }
     HEAP32[$2 + 212 >> 2] = HEAP32[$2 + 212 >> 2] - HEAP32[$2 + 72 >> 2];
     HEAP32[$2 + 128 >> 2] = HEAP32[$2 + 72 >> 2] + HEAP32[$2 + 128 >> 2];
     if (HEAP8[$2 + 211 | 0] & 1) {
      HEAP32[$2 + 212 >> 2] = 32
     }
     continue;
    }
    break;
   };
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 216 >> 2], 125047, jsvNewFromInteger(HEAP32[$2 + 128 >> 2]));
   HEAP32[$2 + 220 >> 2] = HEAP32[$2 + 124 >> 2];
  }
  __stack_pointer = $2 + 224 | 0;
  return HEAP32[$2 + 220 >> 2];
 }
 
 function jswrap_storagefile_read($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  if (HEAP32[$2 + 8 >> 2] < 0) {
   HEAP32[$2 + 8 >> 2] = 0
  }
  $0 = jswrap_storagefile_read_internal(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function jswrap_storagefile_readLine($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jswrap_storagefile_read_internal(HEAP32[$1 + 12 >> 2], -1);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function jswrap_storagefile_getLength($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 240 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 236 >> 2] = $0;
  HEAP32[$1 + 232 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 236 >> 2], 137596);
  jsfNameFromVar($1 + 204 | 0, HEAP32[$1 + 232 >> 2]);
  jsvUnLock(HEAP32[$1 + 232 >> 2]);
  HEAP32[$1 + 200 >> 2] = 27;
  while (1) {
   $0 = 0;
   $0 = HEAP32[$1 + 200 >> 2] ? !HEAPU8[(HEAP32[$1 + 200 >> 2] + $1 | 0) + 203 | 0] : $0;
   if ($0) {
    HEAP32[$1 + 200 >> 2] = HEAP32[$1 + 200 >> 2] - 1;
    continue;
   }
   break;
  };
  HEAP32[$1 + 196 >> 2] = 1;
  HEAP8[HEAP32[$1 + 200 >> 2] + ($1 + 204 | 0) | 0] = HEAP32[$1 + 196 >> 2];
  HEAP32[$1 + 192 >> 2] = 0;
  HEAP32[$1 + 188 >> 2] = 0;
  HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 228 >> 2];
  $2 = HEAP32[$1 + 224 >> 2];
  $0 = HEAP32[$1 + 220 >> 2];
  HEAP32[$1 + 56 >> 2] = $0;
  HEAP32[$1 + 60 >> 2] = $2;
  $0 = HEAP32[$1 + 216 >> 2];
  $2 = HEAP32[$1 + 212 >> 2];
  HEAP32[$1 + 48 >> 2] = $2;
  HEAP32[$1 + 52 >> 2] = $0;
  $2 = HEAP32[$1 + 208 >> 2];
  $0 = HEAP32[$1 + 204 >> 2];
  HEAP32[$1 + 40 >> 2] = $0;
  HEAP32[$1 + 44 >> 2] = $2;
  HEAP32[$1 + 152 >> 2] = jsfFindFile($1 + 40 | 0, $1 + 156 | 0);
  HEAP8[$1 + 151 | 0] = 255;
  if (HEAP32[$1 + 152 >> 2]) {
   jshFlashRead($1 + 151 | 0, (HEAP32[$1 + 152 >> 2] + jsfGetFileSize($1 + 156 | 0) | 0) - 1 | 0, 1)
  }
  while (1) {
   $0 = 0;
   block : {
    if (!HEAP32[$1 + 152 >> 2]) {
     break block
    }
    $0 = 0;
    if (HEAPU8[$1 + 151 | 0] == 255) {
     break block
    }
    $0 = HEAP32[$1 + 196 >> 2] < 255;
   }
   if ($0) {
    HEAP32[$1 + 192 >> 2] = jsfGetFileSize($1 + 156 | 0) + HEAP32[$1 + 192 >> 2];
    HEAP32[$1 + 196 >> 2] = HEAP32[$1 + 196 >> 2] + 1;
    HEAP8[HEAP32[$1 + 200 >> 2] + ($1 + 204 | 0) | 0] = HEAP32[$1 + 196 >> 2];
    HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 228 >> 2];
    $0 = HEAP32[$1 + 224 >> 2];
    $2 = HEAP32[$1 + 220 >> 2];
    HEAP32[$1 + 24 >> 2] = $2;
    HEAP32[$1 + 28 >> 2] = $0;
    $2 = HEAP32[$1 + 216 >> 2];
    $0 = HEAP32[$1 + 212 >> 2];
    HEAP32[$1 + 16 >> 2] = $0;
    HEAP32[$1 + 20 >> 2] = $2;
    $0 = HEAP32[$1 + 208 >> 2];
    $2 = HEAP32[$1 + 204 >> 2];
    HEAP32[$1 + 8 >> 2] = $2;
    HEAP32[$1 + 12 >> 2] = $0;
    HEAP32[$1 + 152 >> 2] = jsfFindFile($1 + 8 | 0, $1 + 156 | 0);
    if (HEAP32[$1 + 152 >> 2]) {
     jshFlashRead($1 + 151 | 0, (HEAP32[$1 + 152 >> 2] + jsfGetFileSize($1 + 156 | 0) | 0) - 1 | 0, 1)
    }
    continue;
   }
   break;
  };
  if (HEAP32[$1 + 152 >> 2]) {
   HEAP8[$1 + 79 | 0] = 0;
   while (1) {
    block1 : {
     if (!((HEAPU8[$1 + 79 | 0] ^ -1) & 1)) {
      break block1
     }
     HEAP32[$1 + 72 >> 2] = jsfGetFileSize($1 + 156 | 0) - HEAP32[$1 + 188 >> 2];
     if (HEAP32[$1 + 72 >> 2] <= 0) {
      HEAP8[$1 + 79 | 0] = 1;
      break block1;
     }
     if (HEAP32[$1 + 72 >> 2] > 64) {
      HEAP32[$1 + 72 >> 2] = 64
     }
     jshFlashRead($1 + 80 | 0, HEAP32[$1 + 152 >> 2] + HEAP32[$1 + 188 >> 2] | 0, HEAP32[$1 + 72 >> 2]);
     HEAP32[$1 + 68 >> 2] = 0;
     while (1) {
      if (HEAP32[$1 + 68 >> 2] < HEAP32[$1 + 72 >> 2]) {
       if (HEAPU8[HEAP32[$1 + 68 >> 2] + ($1 + 80 | 0) | 0] == 255) {
        HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 68 >> 2];
        HEAP8[$1 + 79 | 0] = 1;
       } else {
        HEAP32[$1 + 68 >> 2] = HEAP32[$1 + 68 >> 2] + 1;
        continue;
       }
      }
      break;
     };
     HEAP32[$1 + 188 >> 2] = HEAP32[$1 + 72 >> 2] + HEAP32[$1 + 188 >> 2];
     continue;
    }
    break;
   };
  }
  HEAP32[$1 + 192 >> 2] = HEAP32[$1 + 188 >> 2] + HEAP32[$1 + 192 >> 2];
  __stack_pointer = $1 + 240 | 0;
  return HEAP32[$1 + 192 >> 2];
 }
 
 function jswrap_storagefile_write($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 240 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 236 >> 2] = $0;
  HEAP32[$2 + 232 >> 2] = $1;
  HEAP8[$2 + 231 | 0] = jsvObjectGetIntegerChild(HEAP32[$2 + 236 >> 2], 137959);
  block1 : {
   if (!(HEAPU8[$2 + 231 | 0] == 119 | HEAPU8[$2 + 231 | 0] == 97)) {
    jsExceptionHere(1, 137898, 0);
    break block1;
   }
   HEAP32[$2 + 224 >> 2] = jsvAsString(HEAP32[$2 + 232 >> 2]);
   if (!HEAP32[$2 + 224 >> 2]) {
    break block1
   }
   HEAP32[$2 + 220 >> 2] = jsvGetStringLength(HEAP32[$2 + 224 >> 2]);
   if (!HEAP32[$2 + 220 >> 2]) {
    jsvUnLock(HEAP32[$2 + 224 >> 2]);
    break block1;
   }
   HEAP32[$2 + 216 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 236 >> 2], 125047);
   HEAP32[$2 + 212 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 236 >> 2], 135868);
   jsfNameFromVarAndUnLock($2 + 184 | 0, jsvObjectGetChildIfExists(HEAP32[$2 + 236 >> 2], 137596));
   HEAP32[$2 + 180 >> 2] = 27;
   while (1) {
    $0 = 0;
    $0 = HEAP32[$2 + 180 >> 2] ? !HEAPU8[(HEAP32[$2 + 180 >> 2] + $2 | 0) + 183 | 0] : $0;
    if ($0) {
     HEAP32[$2 + 180 >> 2] = HEAP32[$2 + 180 >> 2] - 1;
     continue;
    }
    break;
   };
   HEAP8[HEAP32[$2 + 180 >> 2] + ($2 + 184 | 0) | 0] = HEAP32[$2 + 212 >> 2];
   HEAP32[$2 + 128 >> 2] = HEAP32[$2 + 208 >> 2];
   $0 = HEAP32[$2 + 204 >> 2];
   $1 = HEAP32[$2 + 200 >> 2];
   HEAP32[$2 + 120 >> 2] = $1;
   HEAP32[$2 + 124 >> 2] = $0;
   $1 = HEAP32[$2 + 196 >> 2];
   $0 = HEAP32[$2 + 192 >> 2];
   HEAP32[$2 + 112 >> 2] = $0;
   HEAP32[$2 + 116 >> 2] = $1;
   $0 = HEAP32[$2 + 188 >> 2];
   $1 = HEAP32[$2 + 184 >> 2];
   HEAP32[$2 + 104 >> 2] = $1;
   HEAP32[$2 + 108 >> 2] = $0;
   HEAP32[$2 + 144 >> 2] = jsfFindFile($2 + 104 | 0, $2 + 148 | 0);
   block2 : {
    if (HEAP32[$2 + 144 >> 2]) {
     $0 = jsfGetFileSize($2 + 148 | 0);
     break block2;
    }
    $0 = 0;
   }
   HEAP32[$2 + 140 >> 2] = $0;
   if (!HEAP32[$2 + 144 >> 2]) {
    $3 = HEAP32[$2 + 224 >> 2];
    HEAP32[$2 + 96 >> 2] = HEAP32[$2 + 208 >> 2];
    $1 = HEAP32[$2 + 204 >> 2];
    $0 = HEAP32[$2 + 200 >> 2];
    HEAP32[$2 + 88 >> 2] = $0;
    HEAP32[$2 + 92 >> 2] = $1;
    $0 = HEAP32[$2 + 196 >> 2];
    $1 = HEAP32[$2 + 192 >> 2];
    HEAP32[$2 + 80 >> 2] = $1;
    HEAP32[$2 + 84 >> 2] = $0;
    $1 = HEAP32[$2 + 188 >> 2];
    $0 = HEAP32[$2 + 184 >> 2];
    HEAP32[$2 + 72 >> 2] = $0;
    HEAP32[$2 + 76 >> 2] = $1;
    block3 : {
     if (jsfWriteFile($2 + 72 | 0, $3, 64, 0, 40928) & 1) {
      HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 208 >> 2];
      $0 = HEAP32[$2 + 204 >> 2];
      $1 = HEAP32[$2 + 200 >> 2];
      HEAP32[$2 + 56 >> 2] = $1;
      HEAP32[$2 + 60 >> 2] = $0;
      $1 = HEAP32[$2 + 196 >> 2];
      $0 = HEAP32[$2 + 192 >> 2];
      HEAP32[$2 + 48 >> 2] = $0;
      HEAP32[$2 + 52 >> 2] = $1;
      $0 = HEAP32[$2 + 188 >> 2];
      $1 = HEAP32[$2 + 184 >> 2];
      HEAP32[$2 + 40 >> 2] = $1;
      HEAP32[$2 + 44 >> 2] = $0;
      HEAP32[$2 + 144 >> 2] = jsfFindFile($2 + 40 | 0, $2 + 148 | 0);
      HEAP32[$2 + 140 >> 2] = jsfGetFileSize($2 + 148 | 0);
      HEAP32[$2 + 216 >> 2] = HEAP32[$2 + 220 >> 2];
      jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 125047, jsvNewFromInteger(HEAP32[$2 + 216 >> 2]));
      break block3;
     }
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 137959, jsvNewFromInteger(0));
    }
    jsvUnLock(HEAP32[$2 + 224 >> 2]);
    break block1;
   }
   HEAP32[$2 + 136 >> 2] = HEAP32[$2 + 140 >> 2] - HEAP32[$2 + 216 >> 2];
   block4 : {
    if (HEAP32[$2 + 220 >> 2] < HEAP32[$2 + 136 >> 2]) {
     jswrap_flash_write(HEAP32[$2 + 224 >> 2], HEAP32[$2 + 144 >> 2] + HEAP32[$2 + 216 >> 2] | 0);
     HEAP32[$2 + 216 >> 2] = HEAP32[$2 + 220 >> 2] + HEAP32[$2 + 216 >> 2];
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 125047, jsvNewFromInteger(HEAP32[$2 + 216 >> 2]));
     break block4;
    }
    HEAP32[$2 + 132 >> 2] = jsvNewFromStringVar(HEAP32[$2 + 224 >> 2], 0, HEAP32[$2 + 136 >> 2]);
    jswrap_flash_write(HEAP32[$2 + 132 >> 2], HEAP32[$2 + 144 >> 2] + HEAP32[$2 + 216 >> 2] | 0);
    HEAP32[$2 + 216 >> 2] = HEAP32[$2 + 136 >> 2] + HEAP32[$2 + 216 >> 2];
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 125047, jsvNewFromInteger(HEAP32[$2 + 216 >> 2]));
    jsvUnLock(HEAP32[$2 + 132 >> 2]);
    if (HEAP32[$2 + 212 >> 2] == 255) {
     jsExceptionHere(1, 146614, 0);
     jsvUnLock(HEAP32[$2 + 224 >> 2]);
     break block1;
    }
    HEAP32[$2 + 212 >> 2] = HEAP32[$2 + 212 >> 2] + 1;
    HEAP8[HEAP32[$2 + 180 >> 2] + ($2 + 184 | 0) | 0] = HEAP32[$2 + 212 >> 2];
    HEAP32[$2 + 132 >> 2] = jsvNewFromStringVar(HEAP32[$2 + 224 >> 2], HEAP32[$2 + 136 >> 2], 2147483647);
    $3 = HEAP32[$2 + 132 >> 2];
    HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 208 >> 2];
    $1 = HEAP32[$2 + 204 >> 2];
    $0 = HEAP32[$2 + 200 >> 2];
    HEAP32[$2 + 24 >> 2] = $0;
    HEAP32[$2 + 28 >> 2] = $1;
    $0 = HEAP32[$2 + 196 >> 2];
    $1 = HEAP32[$2 + 192 >> 2];
    HEAP32[$2 + 16 >> 2] = $1;
    HEAP32[$2 + 20 >> 2] = $0;
    $1 = HEAP32[$2 + 188 >> 2];
    $0 = HEAP32[$2 + 184 >> 2];
    HEAP32[$2 + 8 >> 2] = $0;
    HEAP32[$2 + 12 >> 2] = $1;
    block5 : {
     if (jsfWriteFile($2 + 8 | 0, $3, 64, 0, 40928) & 1) {
      HEAP32[$2 + 216 >> 2] = jsvGetStringLength(HEAP32[$2 + 132 >> 2]);
      jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 135868, jsvNewFromInteger(HEAP32[$2 + 212 >> 2]));
      jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 125047, jsvNewFromInteger(HEAP32[$2 + 216 >> 2]));
      break block5;
     }
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 137959, jsvNewFromInteger(0));
    }
    jsvUnLock(HEAP32[$2 + 132 >> 2]);
   }
   jsvUnLock(HEAP32[$2 + 224 >> 2]);
  }
  __stack_pointer = $2 + 240 | 0;
 }
 
 function jswrap_spi_constructor() {
  return jspNewObject(0, 141196) | 0;
 }
 
 function jswrap_spi_setup($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  block : {
   if (!(jsvIsObject(HEAP32[$2 + 28 >> 2]) & 1)) {
    break block
   }
   HEAP8[$2 + 23 | 0] = jsiGetDeviceFromClass(HEAP32[$2 + 28 >> 2]);
   if (!(jsspiPopulateSPIInfo($2 + 9 | 0, HEAP32[$2 + 24 >> 2]) & 1)) {
    break block
   }
   block2 : {
    if (!(HEAPU8[$2 + 23 | 0] < 26 | HEAPU8[$2 + 23 | 0] > 26)) {
     jshSPISetup(HEAPU8[$2 + 23 | 0], $2 + 9 | 0);
     break block2;
    }
    if (HEAPU8[$2 + 23 | 0]) {
     break block
    }
    if (HEAPU8[$2 + 14 | 0] != 255) {
     jshPinSetState(HEAPU8[$2 + 14 | 0], 1)
    }
    if (HEAPU8[$2 + 15 | 0] != 255) {
     jshPinSetState(HEAPU8[$2 + 15 | 0], 4)
    }
    if (HEAPU8[$2 + 16 | 0] != 255) {
     jshPinSetState(HEAPU8[$2 + 16 | 0], 1)
    }
   }
   jsvObjectSetOrRemoveChild(HEAP32[$2 + 28 >> 2], 127219, HEAP32[$2 + 24 >> 2]);
  }
  __stack_pointer = $2 + 32 | 0;
 }
 
 function jswrap_spi_send_cb($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = $3 - (HEAP32[$3 + 8 >> 2] + 15 & -16) | 0;
  __stack_pointer = $0;
  HEAP32[$3 >> 2] = $0;
  FUNCTION_TABLE[HEAP32[HEAP32[$3 + 4 >> 2] >> 2]](HEAP32[$3 + 12 >> 2], HEAP32[$3 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2] + 4 | 0);
  $0 = HEAP32[$3 + 4 >> 2];
  HEAP32[$0 + 24 >> 2] = HEAP32[$3 + 8 >> 2] + HEAP32[$0 + 24 >> 2];
  $0 = HEAP32[$3 + 4 >> 2];
  HEAP32[$0 + 20 >> 2] = HEAP32[$3 + 8 >> 2] + HEAP32[$0 + 20 >> 2];
  while (1) {
   $0 = HEAP32[$3 + 8 >> 2];
   HEAP32[$3 + 8 >> 2] = $0 - 1;
   if ($0) {
    $1 = HEAP32[$3 + 4 >> 2];
    $0 = HEAP32[$3 >> 2];
    HEAP32[$3 >> 2] = $0 + 1;
    jsvArrayBufferIteratorSetByteValue($1 + 28 | 0, HEAP8[$0 | 0] << 24 >> 24);
    jsvArrayBufferIteratorNext(HEAP32[$3 + 4 >> 2] + 28 | 0);
    continue;
   }
   break;
  };
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jswrap_spi_send($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 304 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 296 >> 2] = $0;
  HEAP32[$3 + 292 >> 2] = $1;
  HEAP8[$3 + 291 | 0] = $2;
  block : {
   if (!(jsvIsObject(HEAP32[$3 + 296 >> 2]) & 1)) {
    HEAP32[$3 + 300 >> 2] = 0;
    break block;
   }
   HEAP8[$3 + 290 | 0] = jsiGetDeviceFromClass(HEAP32[$3 + 296 >> 2]);
   if (!(jsspiGetSendFunction(HEAP32[$3 + 296 >> 2], $3 + 204 | 0, $3 + 208 | 0) & 1)) {
    HEAP32[$3 + 300 >> 2] = 0;
    break block;
   }
   HEAP32[$3 + 200 >> 2] = 0;
   if (!(HEAPU8[$3 + 290 | 0] < 26 | HEAPU8[$3 + 290 | 0] > 26)) {
    jshSPISetReceive(HEAPU8[$3 + 290 | 0], 1)
   }
   if (HEAPU8[$3 + 291 | 0] != 255) {
    jshPinOutput(HEAPU8[$3 + 291 | 0], 0)
   }
   block2 : {
    if (jsvIsNumeric(HEAP32[$3 + 292 >> 2]) & 1) {
     HEAP8[$3 + 199 | 0] = jsvGetInteger(HEAP32[$3 + 292 >> 2]);
     $0 = $3 + 199 | 0;
     FUNCTION_TABLE[HEAP32[$3 + 204 >> 2]]($0, $0, 1, $3 + 208 | 0);
     HEAP32[$3 + 200 >> 2] = jsvNewFromInteger(HEAPU8[$3 + 199 | 0]);
     break block2;
    }
    block3 : {
     if (jsvIsString(HEAP32[$3 + 292 >> 2]) & 1) {
      HEAP32[$3 + 200 >> 2] = jsvNewFromEmptyString_1792();
      jsvStringIteratorNew($3 + 28 | 0, HEAP32[$3 + 292 >> 2], 0);
      while (1) {
       $0 = 0;
       if (jsvStringIteratorHasChar_1793($3 + 28 | 0) & 1) {
        $0 = jspIsInterrupted() ^ -1
       }
       if ($0 & 1) {
        jsvStringIteratorGetPtrAndNext($3 + 28 | 0, $3 + 24 | 0, $3 + 20 | 0);
        while (1) {
         if (HEAP32[$3 + 20 >> 2]) {
          HEAP32[$3 + 16 >> 2] = HEAPU32[$3 + 20 >> 2] > 128 ? 128 : HEAP32[$3 + 20 >> 2];
          FUNCTION_TABLE[HEAP32[$3 + 204 >> 2]](HEAP32[$3 + 24 >> 2], $3 - -64 | 0, HEAP32[$3 + 16 >> 2], $3 + 208 | 0);
          jsvAppendStringBuf(HEAP32[$3 + 200 >> 2], $3 - -64 | 0, HEAP32[$3 + 16 >> 2]);
          HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] - HEAP32[$3 + 16 >> 2];
          HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 16 >> 2] + HEAP32[$3 + 24 >> 2];
          continue;
         }
         break;
        };
        continue;
       }
       break;
      };
      jsvStringIteratorFree_1794($3 + 28 | 0);
      break block3;
     }
     HEAP32[$3 + 12 >> 2] = jsvIterateCallbackCount(HEAP32[$3 + 292 >> 2]);
     HEAP32[$3 + 200 >> 2] = jsvNewTypedArray(1, HEAP32[$3 + 12 >> 2]);
     if (HEAP32[$3 + 200 >> 2]) {
      HEAP32[$3 + 228 >> 2] = 0;
      HEAP32[$3 + 224 >> 2] = 0;
      jsvArrayBufferIteratorNew($3 + 232 | 0, HEAP32[$3 + 200 >> 2], 0);
      jsvIterateBufferCallback(HEAP32[$3 + 292 >> 2], 654, $3 + 204 | 0);
      jsvArrayBufferIteratorFree($3 + 232 | 0);
     }
    }
   }
   if (HEAPU8[$3 + 291 | 0] != 255) {
    jshPinOutput(HEAPU8[$3 + 291 | 0], 1)
   }
   HEAP32[$3 + 300 >> 2] = HEAP32[$3 + 200 >> 2];
  }
  __stack_pointer = $3 + 304 | 0;
  return HEAP32[$3 + 300 >> 2];
 }
 
 function jsvNewFromEmptyString_1792() {
  return jsvNewWithFlags(28);
 }
 
 function jsvStringIteratorHasChar_1793($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
 }
 
 function jsvStringIteratorFree_1794($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_spi_write_cb($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  FUNCTION_TABLE[HEAP32[HEAP32[$3 + 4 >> 2] >> 2]](HEAP32[$3 + 12 >> 2], 0, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2] + 4 | 0);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function jswrap_spi_write($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer + -64 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 60 >> 2] = $0;
  HEAP32[$2 + 56 >> 2] = $1;
  block : {
   if (!(jsvIsObject(HEAP32[$2 + 60 >> 2]) & 1)) {
    break block
   }
   HEAP8[$2 + 55 | 0] = jsiGetDeviceFromClass(HEAP32[$2 + 60 >> 2]);
   if (!(jsspiGetSendFunction(HEAP32[$2 + 60 >> 2], $2 + 48 | 0, $2 + 34 | 0) & 1)) {
    break block
   }
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 48 >> 2];
   $0 = HEAPU8[$2 + 38 | 0] | HEAPU8[$2 + 39 | 0] << 8 | (HEAPU8[$2 + 40 | 0] << 16 | HEAPU8[$2 + 41 | 0] << 24);
   $1 = HEAPU8[$2 + 34 | 0] | HEAPU8[$2 + 35 | 0] << 8 | (HEAPU8[$2 + 36 | 0] << 16 | HEAPU8[$2 + 37 | 0] << 24);
   $3 = $1;
   $4 = $2 + 12 | 0;
   $1 = $4;
   HEAP8[$1 + 4 | 0] = $3;
   HEAP8[$1 + 5 | 0] = $3 >>> 8;
   HEAP8[$1 + 6 | 0] = $3 >>> 16;
   HEAP8[$1 + 7 | 0] = $3 >>> 24;
   HEAP8[$1 + 8 | 0] = $0;
   HEAP8[$1 + 9 | 0] = $0 >>> 8;
   HEAP8[$1 + 10 | 0] = $0 >>> 16;
   HEAP8[$1 + 11 | 0] = $0 >>> 24;
   $1 = HEAPU8[$2 + 44 | 0] | HEAPU8[$2 + 45 | 0] << 8 | (HEAPU8[$2 + 46 | 0] << 16 | HEAPU8[$2 + 47 | 0] << 24);
   $0 = HEAPU8[$2 + 40 | 0] | HEAPU8[$2 + 41 | 0] << 8 | (HEAPU8[$2 + 42 | 0] << 16 | HEAPU8[$2 + 43 | 0] << 24);
   $3 = $0;
   $0 = $4;
   HEAP8[$0 + 10 | 0] = $3;
   HEAP8[$0 + 11 | 0] = $3 >>> 8;
   HEAP8[$0 + 12 | 0] = $3 >>> 16;
   HEAP8[$0 + 13 | 0] = $3 >>> 24;
   HEAP8[$0 + 14 | 0] = $1;
   HEAP8[$0 + 15 | 0] = $1 >>> 8;
   HEAP8[$0 + 16 | 0] = $1 >>> 16;
   HEAP8[$0 + 17 | 0] = $1 >>> 24;
   HEAP8[$2 + 11 | 0] = 255;
   HEAP32[$2 + 4 >> 2] = jsvGetArrayLength(HEAP32[$2 + 56 >> 2]);
   if (HEAP32[$2 + 4 >> 2] > 0) {
    HEAP32[$2 >> 2] = jsvGetArrayItem(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 4 >> 2] - 1 | 0);
    if (jsvIsPin(HEAP32[$2 >> 2]) & 1) {
     HEAP8[$2 + 11 | 0] = jshGetPinFromVar(HEAP32[$2 >> 2]);
     jsvUnLock(jsvArrayPop(HEAP32[$2 + 56 >> 2]));
    }
    jsvUnLock(HEAP32[$2 >> 2]);
   }
   if (!(HEAPU8[$2 + 55 | 0] < 26 | HEAPU8[$2 + 55 | 0] > 26)) {
    jshSPISetReceive(HEAPU8[$2 + 55 | 0], 0)
   }
   if (HEAPU8[$2 + 11 | 0] != 255) {
    jshPinOutput(HEAPU8[$2 + 11 | 0], 0)
   }
   jsvIterateBufferCallback(HEAP32[$2 + 56 >> 2], 655, $2 + 12 | 0);
   if (!(HEAPU8[$2 + 55 | 0] < 26 | HEAPU8[$2 + 55 | 0] > 26)) {
    jshSPIWait(HEAPU8[$2 + 55 | 0])
   }
   if (HEAPU8[$2 + 11 | 0] == 255) {
    break block
   }
   jshPinOutput(HEAPU8[$2 + 11 | 0], 1);
  }
  __stack_pointer = $2 - -64 | 0;
 }
 
 function jswrap_spi_send4bit($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 112 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 108 >> 2] = $0;
  HEAP32[$5 + 104 >> 2] = $1;
  HEAP32[$5 + 100 >> 2] = $2;
  HEAP32[$5 + 96 >> 2] = $3;
  HEAP8[$5 + 95 | 0] = $4;
  block : {
   if (!(jsvIsObject(HEAP32[$5 + 108 >> 2]) & 1)) {
    break block
   }
   HEAP8[$5 + 94 | 0] = jsiGetDeviceFromClass(HEAP32[$5 + 108 >> 2]);
   if (!(HEAPU8[$5 + 94 | 0] <= 26 & HEAPU8[$5 + 94 | 0] >= 26)) {
    jsExceptionHere(1, 141160, 0);
    break block;
   }
   jshSPISet16(HEAPU8[$5 + 94 | 0], 1);
   if (!(HEAP32[$5 + 100 >> 2] | HEAP32[$5 + 96 >> 2])) {
    HEAP32[$5 + 100 >> 2] = 1;
    HEAP32[$5 + 96 >> 2] = 3;
   }
   HEAP32[$5 + 100 >> 2] = HEAP32[$5 + 100 >> 2] & 15;
   HEAP32[$5 + 96 >> 2] = HEAP32[$5 + 96 >> 2] & 15;
   if (!(jshIsDeviceInitialised(HEAPU8[$5 + 94 | 0]) & 1)) {
    jshSPIInitInfo($5 + 80 | 0);
    jshSPISetup(HEAPU8[$5 + 94 | 0], $5 + 80 | 0);
   }
   jshSPISetReceive(HEAPU8[$5 + 94 | 0], 0);
   if (HEAPU8[$5 + 95 | 0] != 255) {
    jshPinOutput(HEAPU8[$5 + 95 | 0], 0)
   }
   block3 : {
    if (jsvIsNumeric(HEAP32[$5 + 104 >> 2]) & 1) {
     jsspiSend4bit(HEAPU8[$5 + 94 | 0], jsvGetInteger(HEAP32[$5 + 104 >> 2]) & 255, HEAP32[$5 + 100 >> 2], HEAP32[$5 + 96 >> 2]);
     break block3;
    }
    block4 : {
     if (jsvIsIterable(HEAP32[$5 + 104 >> 2]) & 1) {
      jshInterruptOff();
      jsvIteratorNew($5 + 20 | 0, HEAP32[$5 + 104 >> 2], 1);
      while (1) {
       if (jsvIteratorHasElement($5 + 20 | 0) & 1) {
        HEAP8[$5 + 19 | 0] = jsvIteratorGetIntegerValue($5 + 20 | 0);
        jsspiSend4bit(HEAPU8[$5 + 94 | 0], HEAPU8[$5 + 19 | 0], HEAP32[$5 + 100 >> 2], HEAP32[$5 + 96 >> 2]);
        jsvIteratorNext($5 + 20 | 0);
        continue;
       }
       break;
      };
      jsvIteratorFree($5 + 20 | 0);
      jshInterruptOn();
      break block4;
     }
     HEAP32[$5 >> 2] = HEAP32[$5 + 104 >> 2];
     jsExceptionHere(1, 135348, $5);
    }
   }
   jshSPIWait(HEAPU8[$5 + 94 | 0]);
   if (HEAPU8[$5 + 95 | 0] != 255) {
    jshPinOutput(HEAPU8[$5 + 95 | 0], 1)
   }
   jshSPISet16(HEAPU8[$5 + 94 | 0], 0);
  }
  __stack_pointer = $5 + 112 | 0;
 }
 
 function jswrap_spi_send8bit($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 112 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 108 >> 2] = $0;
  HEAP32[$5 + 104 >> 2] = $1;
  HEAP32[$5 + 100 >> 2] = $2;
  HEAP32[$5 + 96 >> 2] = $3;
  HEAP8[$5 + 95 | 0] = $4;
  block : {
   if (!(jsvIsObject(HEAP32[$5 + 108 >> 2]) & 1)) {
    break block
   }
   HEAP8[$5 + 94 | 0] = jsiGetDeviceFromClass(HEAP32[$5 + 108 >> 2]);
   if (!(HEAPU8[$5 + 94 | 0] <= 26 & HEAPU8[$5 + 94 | 0] >= 26)) {
    jsExceptionHere(1, 141120, 0);
    break block;
   }
   jshSPISet16(HEAPU8[$5 + 94 | 0], 1);
   if (!(HEAP32[$5 + 100 >> 2] | HEAP32[$5 + 96 >> 2])) {
    HEAP32[$5 + 100 >> 2] = 3;
    HEAP32[$5 + 96 >> 2] = 15;
   }
   HEAP32[$5 + 100 >> 2] = HEAP32[$5 + 100 >> 2] & 255;
   HEAP32[$5 + 96 >> 2] = HEAP32[$5 + 96 >> 2] & 255;
   if (!(jshIsDeviceInitialised(HEAPU8[$5 + 94 | 0]) & 1)) {
    jshSPIInitInfo($5 + 80 | 0);
    jshSPISetup(HEAPU8[$5 + 94 | 0], $5 + 80 | 0);
   }
   jshSPISetReceive(HEAPU8[$5 + 94 | 0], 0);
   if (HEAPU8[$5 + 95 | 0] != 255) {
    jshPinOutput(HEAPU8[$5 + 95 | 0], 0)
   }
   block3 : {
    if (jsvIsNumeric(HEAP32[$5 + 104 >> 2]) & 1) {
     jsspiSend8bit(HEAPU8[$5 + 94 | 0], jsvGetInteger(HEAP32[$5 + 104 >> 2]) & 255, HEAP32[$5 + 100 >> 2], HEAP32[$5 + 96 >> 2]);
     break block3;
    }
    block4 : {
     if (jsvIsIterable(HEAP32[$5 + 104 >> 2]) & 1) {
      jshInterruptOff();
      jsvIteratorNew($5 + 20 | 0, HEAP32[$5 + 104 >> 2], 1);
      while (1) {
       if (jsvIteratorHasElement($5 + 20 | 0) & 1) {
        HEAP8[$5 + 19 | 0] = jsvIteratorGetIntegerValue($5 + 20 | 0);
        jsspiSend8bit(HEAPU8[$5 + 94 | 0], HEAPU8[$5 + 19 | 0], HEAP32[$5 + 100 >> 2], HEAP32[$5 + 96 >> 2]);
        jsvIteratorNext($5 + 20 | 0);
        continue;
       }
       break;
      };
      jsvIteratorFree($5 + 20 | 0);
      jshInterruptOn();
      break block4;
     }
     HEAP32[$5 >> 2] = HEAP32[$5 + 104 >> 2];
     jsExceptionHere(1, 135348, $5);
    }
   }
   jshSPIWait(HEAPU8[$5 + 94 | 0]);
   if (HEAPU8[$5 + 95 | 0] != 255) {
    jshPinOutput(HEAPU8[$5 + 95 | 0], 1)
   }
   jshSPISet16(HEAPU8[$5 + 94 | 0], 0);
  }
  __stack_pointer = $5 + 112 | 0;
 }
 
 function jswrap_i2c_constructor() {
  return jspNewObject(0, 141317) | 0;
 }
 
 function jswrap_i2c_setup($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 24 >> 2] = $1;
  block : {
   if (!(jsvIsObject(HEAP32[$2 + 28 >> 2]) & 1)) {
    break block
   }
   HEAP8[$2 + 23 | 0] = jsiGetDeviceFromClass(HEAP32[$2 + 28 >> 2]);
   if (!(jsi2cPopulateI2CInfo($2 + 15 | 0, HEAP32[$2 + 24 >> 2]) & 1)) {
    break block
   }
   block2 : {
    if (!(HEAPU8[$2 + 23 | 0] < 27 | HEAPU8[$2 + 23 | 0] > 27)) {
     jshI2CSetup(HEAPU8[$2 + 23 | 0], $2 + 15 | 0);
     break block2;
    }
    if (!HEAPU8[$2 + 23 | 0]) {
     if (HEAPU8[$2 + 19 | 0] != 255) {
      jshPinSetValue(HEAPU8[$2 + 19 | 0], 1);
      jshPinSetState(HEAPU8[$2 + 19 | 0], 3);
     }
     if (HEAPU8[$2 + 20 | 0] != 255) {
      jshPinSetValue(HEAPU8[$2 + 20 | 0], 1);
      jshPinSetState(HEAPU8[$2 + 20 | 0], 3);
     }
    }
   }
   jsvObjectSetOrRemoveChild(HEAP32[$2 + 28 >> 2], 127219, HEAP32[$2 + 24 >> 2]);
  }
  __stack_pointer = $2 + 32 | 0;
 }
 
 function _jswrap_i2c_writeTo($0, $1, $2, $3, $4, $5) {
  var $6 = 0;
  $6 = __stack_pointer - 48 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 44 >> 2] = $0;
  HEAP8[$6 + 43 | 0] = $1;
  HEAP32[$6 + 36 >> 2] = $2;
  HEAP8[$6 + 35 | 0] = $3;
  HEAP32[$6 + 28 >> 2] = $4;
  HEAP32[$6 + 24 >> 2] = $5;
  block1 : {
   if (!(HEAPU8[$6 + 43 | 0] < 27 | HEAPU8[$6 + 43 | 0] > 27)) {
    jshI2CWrite(HEAPU8[$6 + 43 | 0], HEAP32[$6 + 36 >> 2] & 255, HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP8[$6 + 35 | 0] & 1);
    break block1;
   }
   if (!HEAPU8[$6 + 43 | 0]) {
    HEAP32[$6 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$6 + 44 >> 2], 127219);
    if (jsi2cPopulateI2CInfo($6 + 16 | 0, HEAP32[$6 + 12 >> 2]) & 1) {
     HEAP8[$6 + 22 | 0] = jsvObjectGetBoolChild(HEAP32[$6 + 44 >> 2], 138723) & 1;
     jsi2cWrite($6 + 16 | 0, HEAP32[$6 + 36 >> 2] & 255, HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP8[$6 + 35 | 0] & 1);
    }
    jsvUnLock2(jsvObjectSetChild(HEAP32[$6 + 44 >> 2], 138723, jsvNewFromBool(HEAP8[$6 + 22 | 0] & 1)), HEAP32[$6 + 12 >> 2]);
   }
  }
  __stack_pointer = $6 + 48 | 0;
 }
 
 function jswrap_i2c_writeTo($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  $3 = $4;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  block : {
   if (!(jsvIsObject(HEAP32[$3 + 28 >> 2]) & 1)) {
    break block
   }
   HEAP8[$3 + 19 | 0] = jsiGetDeviceFromClass(HEAP32[$3 + 28 >> 2]);
   HEAP8[$3 + 18 | 0] = 1;
   HEAP32[$3 + 12 >> 2] = i2c_get_address(HEAP32[$3 + 24 >> 2], $3 + 18 | 0);
   HEAP32[$3 + 8 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = jsvGetDataPointer(HEAP32[$3 + 20 >> 2], $3 + 8 | 0);
   if (!(HEAP32[$3 + 4 >> 2] | !HEAP32[$3 + 20 >> 2])) {
    HEAP32[$3 + 8 >> 2] = jsvIterateCallbackCount(HEAP32[$3 + 20 >> 2]);
    block2 : {
     if (HEAP32[$3 + 8 >> 2] + 256 >>> 0 > jsuGetFreeStack() >>> 0) {
      jsExceptionHere(1, 140362, 0);
      break block2;
     }
     $4 = $4 - (HEAP32[$3 + 8 >> 2] + 15 & -16) | 0;
     __stack_pointer = $4;
     HEAP32[$3 + 4 >> 2] = $4;
     jsvIterateCallbackToBytes(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 4 >> 2], HEAP32[$3 + 8 >> 2]);
    }
   }
   if (!HEAP32[$3 + 4 >> 2] | !HEAP32[$3 + 8 >> 2]) {
    break block
   }
   _jswrap_i2c_writeTo(HEAP32[$3 + 28 >> 2], HEAPU8[$3 + 19 | 0], HEAP32[$3 + 12 >> 2], HEAP8[$3 + 18 | 0] & 1, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
  }
  __stack_pointer = $3 + 32 | 0;
 }
 
 function i2c_get_address($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP8[HEAP32[$2 + 4 >> 2]] = 1;
  block : {
   if (jsvIsObject(HEAP32[$2 + 8 >> 2]) & 1) {
    HEAP32[$2 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 8 >> 2], 128645);
    if (HEAP32[$2 >> 2]) {
     $0 = jsvGetBoolAndUnLock(HEAP32[$2 >> 2]);
     HEAP8[HEAP32[$2 + 4 >> 2]] = $0 & 1;
    }
    HEAP32[$2 + 12 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 8 >> 2], 127002);
    break block;
   }
   HEAP32[$2 + 12 >> 2] = jsvGetInteger(HEAP32[$2 + 8 >> 2]);
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function _jswrap_i2c_readFrom($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0;
  $6 = __stack_pointer - 112 | 0;
  $5 = $6;
  __stack_pointer = $5;
  HEAP32[$5 + 104 >> 2] = $0;
  HEAP8[$5 + 103 | 0] = $1;
  HEAP32[$5 + 96 >> 2] = $2;
  HEAP8[$5 + 95 | 0] = $3;
  HEAP32[$5 + 88 >> 2] = $4;
  block : {
   if (HEAP32[$5 + 88 >> 2] <= 0) {
    HEAP32[$5 + 108 >> 2] = 0;
    break block;
   }
   if (HEAP32[$5 + 88 >> 2] + 256 >>> 0 > jsuGetFreeStack() >>> 0) {
    jsExceptionHere(1, 140362, 0);
    HEAP32[$5 + 108 >> 2] = 0;
    break block;
   }
   $6 = $6 - (HEAP32[$5 + 88 >> 2] + 15 & -16) | 0;
   __stack_pointer = $6;
   HEAP32[$5 + 84 >> 2] = $6;
   block2 : {
    if (!(HEAPU8[$5 + 103 | 0] < 27 | HEAPU8[$5 + 103 | 0] > 27)) {
     jshI2CRead(HEAPU8[$5 + 103 | 0], HEAP32[$5 + 96 >> 2] & 255, HEAP32[$5 + 88 >> 2], HEAP32[$5 + 84 >> 2], HEAP8[$5 + 95 | 0] & 1);
     break block2;
    }
    block3 : {
     if (!HEAPU8[$5 + 103 | 0]) {
      HEAP32[$5 + 72 >> 2] = jsvObjectGetChildIfExists(HEAP32[$5 + 104 >> 2], 127219);
      if (jsi2cPopulateI2CInfo($5 + 76 | 0, HEAP32[$5 + 72 >> 2]) & 1) {
       HEAP8[$5 + 82 | 0] = jsvObjectGetBoolChild(HEAP32[$5 + 104 >> 2], 138723) & 1;
       jsi2cRead($5 + 76 | 0, HEAP32[$5 + 96 >> 2] & 255, HEAP32[$5 + 88 >> 2], HEAP32[$5 + 84 >> 2], HEAP8[$5 + 95 | 0] & 1);
      }
      jsvUnLock2(jsvObjectSetChild(HEAP32[$5 + 104 >> 2], 138723, jsvNewFromBool(HEAP8[$5 + 82 | 0] & 1)), HEAP32[$5 + 72 >> 2]);
      break block3;
     }
     HEAP32[$5 + 108 >> 2] = 0;
     break block;
    }
   }
   HEAP32[$5 + 68 >> 2] = jsvNewTypedArray(1, HEAP32[$5 + 88 >> 2]);
   if (HEAP32[$5 + 68 >> 2]) {
    jsvArrayBufferIteratorNew($5 + 12 | 0, HEAP32[$5 + 68 >> 2], 0);
    HEAP32[$5 + 8 >> 2] = 0;
    while (1) {
     if (HEAPU32[$5 + 8 >> 2] < HEAPU32[$5 + 88 >> 2]) {
      jsvArrayBufferIteratorSetByteValue($5 + 12 | 0, HEAP8[HEAP32[$5 + 84 >> 2] + HEAP32[$5 + 8 >> 2] | 0] << 24 >> 24);
      jsvArrayBufferIteratorNext($5 + 12 | 0);
      HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] + 1;
      continue;
     }
     break;
    };
    jsvArrayBufferIteratorFree($5 + 12 | 0);
   }
   HEAP32[$5 + 108 >> 2] = HEAP32[$5 + 68 >> 2];
  }
  __stack_pointer = $5 + 112 | 0;
  return HEAP32[$5 + 108 >> 2];
 }
 
 function jswrap_i2c_readFrom($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP32[$3 + 16 >> 2] = $2;
  block : {
   if (!(jsvIsObject(HEAP32[$3 + 24 >> 2]) & 1)) {
    HEAP32[$3 + 28 >> 2] = 0;
    break block;
   }
   HEAP8[$3 + 15 | 0] = jsiGetDeviceFromClass(HEAP32[$3 + 24 >> 2]);
   HEAP8[$3 + 14 | 0] = 1;
   HEAP32[$3 + 8 >> 2] = i2c_get_address(HEAP32[$3 + 20 >> 2], $3 + 14 | 0);
   HEAP32[$3 + 28 >> 2] = _jswrap_i2c_readFrom(HEAP32[$3 + 24 >> 2], HEAPU8[$3 + 15 | 0], HEAP32[$3 + 8 >> 2], HEAP8[$3 + 14 | 0] & 1, HEAP32[$3 + 16 >> 2]);
  }
  __stack_pointer = $3 + 32 | 0;
  return HEAP32[$3 + 28 >> 2];
 }
 
 function jswrap_i2c_readReg($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 24 >> 2] = $0;
  HEAP32[$4 + 20 >> 2] = $1;
  HEAP32[$4 + 16 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  block : {
   if (!(jsvIsObject(HEAP32[$4 + 24 >> 2]) & 1)) {
    HEAP32[$4 + 28 >> 2] = 0;
    break block;
   }
   HEAP8[$4 + 11 | 0] = jsiGetDeviceFromClass(HEAP32[$4 + 24 >> 2]);
   HEAP8[$4 + 10 | 0] = 0;
   HEAP8[$4 + 9 | 0] = HEAP32[$4 + 16 >> 2];
   _jswrap_i2c_writeTo(HEAP32[$4 + 24 >> 2], HEAPU8[$4 + 11 | 0], HEAP32[$4 + 20 >> 2], HEAP8[$4 + 10 | 0] & 1, 1, $4 + 9 | 0);
   HEAP32[$4 + 28 >> 2] = _jswrap_i2c_readFrom(HEAP32[$4 + 24 >> 2], HEAPU8[$4 + 11 | 0], HEAP32[$4 + 20 >> 2], HEAP8[$4 + 10 | 0] & 1, HEAP32[$4 + 12 >> 2]);
  }
  __stack_pointer = $4 + 32 | 0;
  return HEAP32[$4 + 28 >> 2];
 }
 
 function jswrap_stream_available($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!(jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1)) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 8 >> 2], 136853);
   HEAP32[$1 >> 2] = 0;
   if (jsvIsString(HEAP32[$1 + 4 >> 2]) & 1) {
    HEAP32[$1 >> 2] = jsvGetStringLength(HEAP32[$1 + 4 >> 2])
   }
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jswrap_stream_read($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  block : {
   if (!(jsvIsObject(HEAP32[$2 + 24 >> 2]) & 1)) {
    HEAP32[$2 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 24 >> 2], 136853);
   HEAP32[$2 + 12 >> 2] = 0;
   block3 : {
    if (jsvIsString(HEAP32[$2 + 16 >> 2]) & 1) {
     HEAP32[$2 + 8 >> 2] = jsvGetStringLength(HEAP32[$2 + 16 >> 2]);
     block2 : {
      if (!(HEAPU32[$2 + 20 >> 2] < HEAPU32[$2 + 8 >> 2] & HEAP32[$2 + 20 >> 2] > 0)) {
       HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 16 >> 2];
       HEAP32[$2 + 16 >> 2] = 0;
       jsvObjectRemoveChild(HEAP32[$2 + 24 >> 2], 136853);
       break block2;
      }
      HEAP32[$2 + 12 >> 2] = jsvNewFromStringVar(HEAP32[$2 + 16 >> 2], 0, HEAP32[$2 + 20 >> 2]);
      HEAP32[$2 + 4 >> 2] = jsvNewFromStringVar(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 20 >> 2], 2147483647);
      jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 136853, HEAP32[$2 + 4 >> 2]);
     }
     break block3;
    }
    HEAP32[$2 + 12 >> 2] = jsvNewFromEmptyString_1809();
   }
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jsvNewFromEmptyString_1809() {
  return jsvNewWithFlags(28);
 }
 
 function jswrap_stream_pushData($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP8[$3 + 23 | 0] = $2;
  HEAP8[$3 + 22 | 0] = 1;
  HEAP32[$3 + 16 >> 2] = jsvFindChildFromString(HEAP32[$3 + 28 >> 2], 140298);
  block : {
   if (HEAP32[$3 + 16 >> 2]) {
    if (!(jsiExecuteEventCallback(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 16 >> 2], 1, $3 + 24 | 0) & 1)) {
     jsError(142268, 0);
     HEAP8[368518] = HEAPU8[368518] | 4;
     jsvObjectRemoveChild(HEAP32[$3 + 28 >> 2], 140298);
    }
    jsvUnLock(HEAP32[$3 + 16 >> 2]);
    break block;
   }
   HEAP32[$3 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 28 >> 2], 136853);
   block1 : {
    if (!(jsvIsString(HEAP32[$3 + 12 >> 2]) & 1)) {
     jsvObjectSetChild(HEAP32[$3 + 28 >> 2], 136853, HEAP32[$3 + 24 >> 2]);
     break block1;
    }
    HEAP32[$3 + 8 >> 2] = jsvGetStringLength(HEAP32[$3 + 12 >> 2]);
    HEAP32[$3 + 4 >> 2] = jsvGetStringLength(HEAP32[$3 + 24 >> 2]);
    if (HEAP32[$3 + 8 >> 2] + HEAP32[$3 + 4 >> 2] >>> 0 > 512) {
     if (HEAP8[$3 + 23 | 0] & 1) {
      HEAP8[368518] = HEAPU8[368518] | 2
     }
     HEAP8[$3 + 22 | 0] = 0;
    }
    if (!(!(HEAP8[$3 + 22 | 0] & 1 | HEAP8[$3 + 23 | 0] & 1) | HEAPU32[$3 + 8 >> 2] >= 512)) {
     jsvAppendStringVar(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 24 >> 2], 0, 512 - HEAP32[$3 + 8 >> 2] | 0)
    }
    jsvUnLock(HEAP32[$3 + 12 >> 2]);
   }
  }
  __stack_pointer = $3 + 32 | 0;
  return HEAP8[$3 + 22 | 0] & 1;
 }
 
 function jswrap_waveform_idle() {
  var $0 = 0;
  $0 = __stack_pointer + -64 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 60 >> 2] = jsvObjectGetChildIfExists(HEAP32[92131], 137056);
  if (HEAP32[$0 + 60 >> 2]) {
   jsvObjectIteratorNew($0 + 56 | 0, HEAP32[$0 + 60 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_1812($0 + 56 | 0) & 1) {
     HEAP32[$0 + 52 >> 2] = jsvObjectIteratorGetValue_1813($0 + 56 | 0);
     HEAP8[$0 + 51 | 0] = jsvObjectGetBoolChild(HEAP32[$0 + 52 >> 2], 136759) & 1;
     if (HEAP8[$0 + 51 | 0] & 1) {
      HEAP32[$0 + 44 >> 2] = jswrap_waveform_getBuffer(HEAP32[$0 + 52 >> 2], 0, 0);
      block : {
       if (!(jstGetLastBufferTimerTask(HEAP32[$0 + 44 >> 2], $0 + 19 | 0) & 1)) {
        HEAP32[$0 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 52 >> 2], 128153);
        jsiQueueObjectCallbacks(HEAP32[$0 + 52 >> 2], 136171, $0 + 12 | 0, 1);
        jsvUnLock(HEAP32[$0 + 12 >> 2]);
        HEAP8[$0 + 51 | 0] = 0;
        jsvObjectSetChildAndUnLock(HEAP32[$0 + 52 >> 2], 136759, jsvNewFromBool(HEAP8[$0 + 51 | 0] & 1));
        break block;
       }
       if (!(!(HEAPU8[$0 + 33 | 0] | HEAPU8[$0 + 34 | 0] << 8) | (HEAPU8[$0 + 33 | 0] | HEAPU8[$0 + 34 | 0] << 8) == (HEAPU8[$0 + 31 | 0] | HEAPU8[$0 + 32 | 0] << 8))) {
        HEAP32[$0 + 8 >> 2] = (jsvGetRef(HEAP32[$0 + 44 >> 2]) & 65535) != (HEAPU8[$0 + 31 | 0] | HEAPU8[$0 + 32 | 0] << 8);
        HEAP32[$0 + 4 >> 2] = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$0 + 52 >> 2], 128256, 10));
        if (HEAP32[$0 + 4 >> 2] != HEAP32[$0 + 8 >> 2]) {
         jsvObjectSetChildAndUnLock(HEAP32[$0 + 52 >> 2], 128256, jsvNewFromInteger(HEAP32[$0 + 8 >> 2]));
         HEAP32[$0 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 52 >> 2], HEAP32[$0 + 8 >> 2] ? 128153 : 142067);
         jsiQueueObjectCallbacks(HEAP32[$0 + 52 >> 2], 128142, $0, 1);
         jsvUnLock(HEAP32[$0 >> 2]);
        }
       }
      }
      jsvUnLock(HEAP32[$0 + 44 >> 2]);
     }
     jsvUnLock(HEAP32[$0 + 52 >> 2]);
     block2 : {
      if (!(HEAP8[$0 + 51 | 0] & 1)) {
       jsvObjectIteratorRemoveAndGotoNext($0 + 56 | 0, HEAP32[$0 + 60 >> 2]);
       break block2;
      }
      jsvObjectIteratorNext($0 + 56 | 0);
     }
     continue;
    }
    break;
   };
   jsvObjectIteratorFree_1815($0 + 56 | 0);
   jsvUnLock(HEAP32[$0 + 60 >> 2]);
  }
  __stack_pointer = $0 - -64 | 0;
  return 0;
 }
 
 function jsvObjectIteratorHasValue_1812($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
 }
 
 function jsvObjectIteratorGetValue_1813($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
    HEAP32[$1 + 12 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jswrap_waveform_getBuffer($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP32[$3 + 16 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2] ? 142067 : 128153);
  block : {
   if (!HEAP32[$3 + 12 >> 2]) {
    HEAP32[$3 + 28 >> 2] = 0;
    break block;
   }
   if (HEAP32[$3 + 16 >> 2]) {
    HEAP8[HEAP32[$3 + 16 >> 2]] = 0;
    if (!(!(jsvIsArrayBuffer(HEAP32[$3 + 12 >> 2]) & 1) | (HEAPU8[HEAP32[$3 + 12 >> 2] + 5 | 0] & 15) != 2)) {
     HEAP8[HEAP32[$3 + 16 >> 2]] = 1
    }
   }
   HEAP32[$3 + 8 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$3 + 12 >> 2], 0);
   jsvUnLock(HEAP32[$3 + 12 >> 2]);
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 8 >> 2];
  }
  __stack_pointer = $3 + 32 | 0;
  return HEAP32[$3 + 28 >> 2];
 }
 
 function jsvObjectIteratorFree_1815($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_waveform_kill() {
  var $0 = 0;
  $0 = __stack_pointer - 32 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 28 >> 2] = jsvObjectGetChildIfExists(HEAP32[92131], 137056);
  if (HEAP32[$0 + 28 >> 2]) {
   jsvObjectIteratorNew($0 + 24 | 0, HEAP32[$0 + 28 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_1812($0 + 24 | 0) & 1) {
     HEAP32[$0 + 20 >> 2] = jsvObjectIteratorGetValue_1813($0 + 24 | 0);
     HEAP8[$0 + 19 | 0] = jsvObjectGetBoolChild(HEAP32[$0 + 20 >> 2], 136759) & 1;
     if (HEAP8[$0 + 19 | 0] & 1) {
      HEAP32[$0 + 12 >> 2] = jswrap_waveform_getBuffer(HEAP32[$0 + 20 >> 2], 0, 0);
      if (!(jstStopBufferTimerTask(HEAP32[$0 + 12 >> 2]) & 1)) {
       jsExceptionHere(1, 138780, 0)
      }
      jsvUnLock(HEAP32[$0 + 12 >> 2]);
     }
     jsvUnLock(HEAP32[$0 + 20 >> 2]);
     jsvObjectIteratorRemoveAndGotoNext($0 + 24 | 0, HEAP32[$0 + 28 >> 2]);
     continue;
    }
    break;
   };
   jsvObjectIteratorFree_1815($0 + 24 | 0);
   jsvUnLock(HEAP32[$0 + 28 >> 2]);
  }
  __stack_pointer = $0 + 32 | 0;
 }
 
 function jswrap_waveform_constructor($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 40 >> 2] = $0;
  HEAP32[$2 + 36 >> 2] = $1;
  HEAP32[$2 + 32 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = 0;
  block : {
   block1 : {
    if (jsvIsIntegerish(HEAP32[$2 + 40 >> 2]) & 1) {
     HEAP32[$2 + 32 >> 2] = jsvGetInteger(HEAP32[$2 + 40 >> 2]);
     if (HEAP32[$2 + 32 >> 2] <= 0) {
      jsExceptionHere(1, 142204, 0);
      HEAP32[$2 + 44 >> 2] = 0;
      break block;
     }
     break block1;
    }
    block2 : {
     if (jsvIsArrayBuffer(HEAP32[$2 + 40 >> 2]) & 1) {
      HEAP32[$2 + 28 >> 2] = jsvLockAgain(HEAP32[$2 + 40 >> 2]);
      HEAP32[$2 + 32 >> 2] = jsvGetLength(HEAP32[$2 + 28 >> 2]);
      break block2;
     }
     jsExceptionHere(1, 128191, 0);
     HEAP32[$2 + 44 >> 2] = 0;
     break block;
    }
   }
   HEAP8[$2 + 27 | 0] = 0;
   HEAP8[$2 + 26 | 0] = 0;
   block4 : {
    if (jsvIsObject(HEAP32[$2 + 36 >> 2]) & 1) {
     HEAP8[$2 + 27 | 0] = jsvObjectGetBoolChild(HEAP32[$2 + 36 >> 2], 128270) & 1;
     HEAP32[$2 + 20 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 36 >> 2], 126993);
     if (!(!HEAP32[$2 + 20 >> 2] | HEAP32[$2 + 20 >> 2] == 8 | HEAP32[$2 + 20 >> 2] == 16)) {
      jsExceptionHere(1, 126975, 0);
      HEAP32[$2 + 44 >> 2] = 0;
      break block;
     }
     if (HEAP32[$2 + 20 >> 2] == 16) {
      HEAP8[$2 + 26 | 0] = 1
     }
     break block4;
    }
    if (!(jsvIsUndefined(HEAP32[$2 + 36 >> 2]) & 1)) {
     HEAP32[$2 >> 2] = HEAP32[$2 + 36 >> 2];
     jsExceptionHere(1, 125175, $2);
    }
   }
   HEAP8[$2 + 19 | 0] = HEAP8[$2 + 26 | 0] & 1 ? 2 : 1;
   if (!HEAP32[$2 + 28 >> 2]) {
    HEAP32[$2 + 28 >> 2] = jsvNewTypedArray(HEAPU8[$2 + 19 | 0], HEAP32[$2 + 32 >> 2])
   }
   HEAP32[$2 + 12 >> 2] = 0;
   if (HEAP8[$2 + 27 | 0] & 1) {
    HEAP32[$2 + 12 >> 2] = jsvNewTypedArray(HEAPU8[$2 + 19 | 0], HEAP32[$2 + 32 >> 2])
   }
   HEAP32[$2 + 8 >> 2] = jspNewObject(0, 135539);
   if (HEAP32[$2 + 12 >> 2] | !(HEAP8[$2 + 27 | 0] & 1) ? !HEAP32[$2 + 8 >> 2] | !HEAP32[$2 + 28 >> 2] : 1) {
    jsvUnLock3(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 12 >> 2]);
    HEAP32[$2 + 44 >> 2] = 0;
    break block;
   }
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 8 >> 2], 128153, HEAP32[$2 + 28 >> 2]);
   if (HEAP32[$2 + 12 >> 2]) {
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 8 >> 2], 142067, HEAP32[$2 + 12 >> 2])
   }
   HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 8 >> 2];
  }
  __stack_pointer = $2 + 48 | 0;
  return HEAP32[$2 + 44 >> 2];
 }
 
 function jswrap_waveform_startOutput($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP8[$4 + 27 | 0] = $1;
  HEAPF64[$4 + 16 >> 3] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  jswrap_waveform_start(HEAP32[$4 + 28 >> 2], HEAPU8[$4 + 27 | 0], HEAPF64[$4 + 16 >> 3], HEAP32[$4 + 12 >> 2], 1);
  __stack_pointer = $4 + 32 | 0;
 }
 
 function jswrap_waveform_start($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $5 = __stack_pointer - 128 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 124 >> 2] = $0;
  HEAP8[$5 + 123 | 0] = $1;
  HEAPF64[$5 + 112 >> 3] = $2;
  HEAP32[$5 + 108 >> 2] = $3;
  HEAP8[$5 + 107 | 0] = $4;
  HEAP8[$5 + 106 | 0] = jsvObjectGetBoolChild(HEAP32[$5 + 124 >> 2], 136759) & 1;
  block : {
   if (HEAP8[$5 + 106 | 0] & 1) {
    jsExceptionHere(1, 136715, 0);
    break block;
   }
   if (!(jshIsPinValid(HEAPU8[$5 + 123 | 0]) & 1)) {
    jsExceptionHere(1, 135419, 0);
    break block;
   }
   $1 = __DOUBLE_BITS_1821(HEAPF64[$5 + 112 >> 3]);
   $0 = $1;
   $3 = i64toi32_i32$HIGH_BITS;
   $1 = $3 & 2147483647;
   block2 : {
    if (!(($1 | 0) == 2146435072 | $1 >>> 0 > 2146435072)) {
     if (!(HEAPF64[$5 + 112 >> 3] < .001)) {
      break block2
     }
    }
    jsExceptionHere(1, 123566, 0);
    break block;
   }
   HEAP32[$5 + 96 >> 2] = 0;
   HEAP32[$5 + 100 >> 2] = 0;
   HEAP8[$5 + 95 | 0] = 0;
   HEAP8[$5 + 94 | 0] = 255;
   block4 : {
    if (jsvIsObject(HEAP32[$5 + 108 >> 2]) & 1) {
     HEAPF64[$5 + 80 >> 3] = jsvObjectGetFloatChild(HEAP32[$5 + 108 >> 2], 137570);
     $3 = __DOUBLE_BITS_1821(HEAPF64[$5 + 80 >> 3]);
     $4 = $3;
     $1 = i64toi32_i32$HIGH_BITS;
     $3 = $1 & 2147483647;
     if (!(!(HEAPF64[$5 + 80 >> 3] > 0.0) | (($3 | 0) == 2146435072 | $3 >>> 0 > 2146435072))) {
      $1 = jshGetTimeFromMilliseconds(HEAPF64[$5 + 80 >> 3] * 1.0e3);
      $0 = $1;
      $3 = i64toi32_i32$HIGH_BITS;
      $6 = $3;
      $3 = jshGetSystemTime();
      $1 = i64toi32_i32$HIGH_BITS;
      $7 = $1;
      $4 = $3;
      $8 = $0 - $3 | 0;
      $1 = $6;
      $3 = $7;
      $3 = $3 + ($0 >>> 0 < $4 >>> 0) | 0;
      $3 = $1 - $3 | 0;
      HEAP32[$5 + 96 >> 2] = $8;
      HEAP32[$5 + 100 >> 2] = $3;
     }
     HEAP8[$5 + 95 | 0] = jsvObjectGetBoolChild(HEAP32[$5 + 108 >> 2], 125123) & 1;
     HEAP8[$5 + 94 | 0] = jshGetPinFromVarAndUnLock(jsvObjectGetChildIfExists(HEAP32[$5 + 108 >> 2], 135414));
     break block4;
    }
    if (!(jsvIsUndefined(HEAP32[$5 + 108 >> 2]) & 1)) {
     HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 108 >> 2];
     jsExceptionHere(1, 125175, $5 + 16 | 0);
    }
   }
   HEAP8[$5 + 79 | 0] = 0;
   HEAP32[$5 + 72 >> 2] = jswrap_waveform_getBuffer(HEAP32[$5 + 124 >> 2], 0, $5 + 79 | 0);
   HEAP32[$5 + 68 >> 2] = jswrap_waveform_getBuffer(HEAP32[$5 + 124 >> 2], 1, 0);
   block5 : {
    if (HEAP8[$5 + 79 | 0] & 1) {
     HEAP8[$5 + 67 | 0] = HEAP8[$5 + 107 | 0] & 1 ? 6 : 7;
     break block5;
    }
    HEAP8[$5 + 67 | 0] = HEAP8[$5 + 107 | 0] & 1 ? 4 : 5;
   }
   $3 = HEAP32[$5 + 96 >> 2];
   $1 = $3;
   $0 = HEAP32[$5 + 100 >> 2];
   $4 = $0;
   $0 = jshGetTimeFromMilliseconds(1.0e3 / HEAPF64[$5 + 112 >> 3]);
   $3 = i64toi32_i32$HIGH_BITS;
   $6 = $3;
   $3 = $4;
   $4 = $0;
   $0 = $6;
   $6 = $0;
   $7 = HEAPU8[$5 + 123 | 0];
   $8 = HEAPU8[$5 + 94 | 0];
   $9 = HEAP32[$5 + 72 >> 2];
   if (HEAP8[$5 + 95 | 0] & 1) {
    if (HEAP32[$5 + 68 >> 2]) {
     $0 = HEAP32[$5 + 68 >> 2]
    } else {
     $0 = HEAP32[$5 + 72 >> 2]
    }
   } else {
    $0 = 0
   }
   if (!(jstStartSignal($1, $3, $4, $6, $7, $8, $9, $0, HEAPU8[$5 + 67 | 0]) & 1)) {
    jsWarn(128003, 0)
   }
   jsvUnLock2(HEAP32[$5 + 72 >> 2], HEAP32[$5 + 68 >> 2]);
   jsvObjectSetChildAndUnLock(HEAP32[$5 + 124 >> 2], 136759, jsvNewFromBool(1));
   jsvObjectSetChildAndUnLock(HEAP32[$5 + 124 >> 2], 128402, jsvNewFromFloat(HEAPF64[$5 + 112 >> 3]));
   HEAP32[$5 + 60 >> 2] = jsvObjectGetChild(HEAP32[92131], 137056, 3);
   if (!HEAP32[$5 + 60 >> 2]) {
    break block
   }
   jsvArrayPush(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 124 >> 2]);
   jsvUnLock(HEAP32[$5 + 60 >> 2]);
  }
  __stack_pointer = $5 + 128 | 0;
 }
 
 function __DOUBLE_BITS_1821($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAPF64[$1 + 8 >> 3] = $0;
  HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  return HEAP32[$1 >> 2];
 }
 
 function jswrap_waveform_startInput($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP8[$4 + 27 | 0] = $1;
  HEAPF64[$4 + 16 >> 3] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  if (!(jshPinAnalog(HEAPU8[$4 + 27 | 0]) < 0.0)) {
   jswrap_waveform_start(HEAP32[$4 + 28 >> 2], HEAPU8[$4 + 27 | 0], HEAPF64[$4 + 16 >> 3], HEAP32[$4 + 12 >> 2], 0)
  }
  __stack_pointer = $4 + 32 | 0;
 }
 
 function jswrap_waveform_stop($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP8[$1 + 11 | 0] = jsvObjectGetBoolChild(HEAP32[$1 + 12 >> 2], 136759) & 1;
  block : {
   if (!(HEAP8[$1 + 11 | 0] & 1)) {
    jsExceptionHere(1, 136743, 0);
    break block;
   }
   HEAP32[$1 + 4 >> 2] = jswrap_waveform_getBuffer(HEAP32[$1 + 12 >> 2], 0, 0);
   if (!(jstStopBufferTimerTask(HEAP32[$1 + 4 >> 2]) & 1)) {
    jsExceptionHere(1, 138780, 0)
   }
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
   jswrap_waveform_idle();
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_heatshrink_compress($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 128 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 120 >> 2] = $0;
  block : {
   if (!(jsvIsIterable(HEAP32[$1 + 120 >> 2]) & 1)) {
    HEAP32[$1 >> 2] = HEAP32[$1 + 120 >> 2];
    jsExceptionHere(3, 126165, $1);
    HEAP32[$1 + 124 >> 2] = 0;
    break block;
   }
   jsvIteratorNew($1 + 60 | 0, HEAP32[$1 + 120 >> 2], 1);
   HEAP32[$1 + 20 >> 2] = heatshrink_encode_cb(656, $1 + 60 | 0, 0, 0);
   jsvIteratorFree($1 + 60 | 0);
   HEAP32[$1 + 16 >> 2] = jsvNewStringOfLength(HEAP32[$1 + 20 >> 2], 0);
   if (!HEAP32[$1 + 16 >> 2]) {
    jsError(124822, 0);
    HEAP32[$1 + 124 >> 2] = 0;
    break block;
   }
   jsvIteratorNew($1 + 60 | 0, HEAP32[$1 + 120 >> 2], 1);
   jsvStringIteratorNew($1 + 24 | 0, HEAP32[$1 + 16 >> 2], 0);
   heatshrink_encode_cb(656, $1 + 60 | 0, 657, $1 + 24 | 0);
   jsvStringIteratorFree_1825($1 + 24 | 0);
   jsvIteratorFree($1 + 60 | 0);
   HEAP32[$1 + 12 >> 2] = jsvNewArrayBufferFromString(HEAP32[$1 + 16 >> 2], 0);
   jsvUnLock(HEAP32[$1 + 16 >> 2]);
   HEAP32[$1 + 124 >> 2] = HEAP32[$1 + 12 >> 2];
  }
  __stack_pointer = $1 + 128 | 0;
  return HEAP32[$1 + 124 >> 2];
 }
 
 function jsvStringIteratorFree_1825($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_heatshrink_decompress($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 128 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 120 >> 2] = $0;
  block : {
   if (!(jsvIsIterable(HEAP32[$1 + 120 >> 2]) & 1)) {
    HEAP32[$1 >> 2] = HEAP32[$1 + 120 >> 2];
    jsExceptionHere(3, 126165, $1);
    HEAP32[$1 + 124 >> 2] = 0;
    break block;
   }
   jsvIteratorNew($1 + 60 | 0, HEAP32[$1 + 120 >> 2], 1);
   HEAP32[$1 + 20 >> 2] = heatshrink_decode(656, $1 + 60 | 0, 0);
   jsvIteratorFree($1 + 60 | 0);
   HEAP32[$1 + 16 >> 2] = jsvNewStringOfLength(HEAP32[$1 + 20 >> 2], 0);
   if (!HEAP32[$1 + 16 >> 2]) {
    jsError(124822, 0);
    HEAP32[$1 + 124 >> 2] = 0;
    break block;
   }
   jsvIteratorNew($1 + 60 | 0, HEAP32[$1 + 120 >> 2], 1);
   jsvStringIteratorNew($1 + 24 | 0, HEAP32[$1 + 16 >> 2], 0);
   heatshrink_decode_cb(656, $1 + 60 | 0, 657, $1 + 24 | 0);
   jsvStringIteratorFree_1825($1 + 24 | 0);
   jsvIteratorFree($1 + 60 | 0);
   HEAP32[$1 + 12 >> 2] = jsvNewArrayBufferFromString(HEAP32[$1 + 16 >> 2], 0);
   jsvUnLock(HEAP32[$1 + 16 >> 2]);
   HEAP32[$1 + 124 >> 2] = HEAP32[$1 + 12 >> 2];
  }
  __stack_pointer = $1 + 128 | 0;
  return HEAP32[$1 + 124 >> 2];
 }
 
 function _jswrap_graphics_freeImageInfo($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 20 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function _jswrap_graphics_parseImage_palette($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[HEAP32[$2 + 12 >> 2] + 28 >> 2] = 0;
  if (!(!(jsvIsArrayBuffer(HEAP32[$2 + 8 >> 2]) & 1) | HEAPU8[HEAP32[$2 + 8 >> 2] + 5 | 0] != 2)) {
   HEAP32[$2 + 4 >> 2] = 0;
   $0 = jsvGetDataPointer(HEAP32[$2 + 8 >> 2], $2 + 4 | 0);
   HEAP32[HEAP32[$2 + 12 >> 2] + 28 >> 2] = $0;
   block2 : {
    if (!(HEAP32[$2 + 4 >> 2] == 2 | HEAP32[$2 + 4 >> 2] == 4 | (HEAP32[$2 + 4 >> 2] == 8 | HEAP32[$2 + 4 >> 2] == 16))) {
     if (HEAP32[$2 + 4 >> 2] != 256) {
      break block2
     }
    }
    HEAP32[HEAP32[$2 + 12 >> 2] + 32 >> 2] = HEAP32[$2 + 4 >> 2] - 1;
   }
  }
  if (!HEAP32[HEAP32[$2 + 12 >> 2] + 28 >> 2]) {
   jsExceptionHere(1, 126891, 0)
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 8 >> 2];
 }
 
 function _jswrap_graphics_parseImage($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 160 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 152 >> 2] = $0;
  HEAP32[$4 + 148 >> 2] = $1;
  HEAP32[$4 + 144 >> 2] = $2;
  HEAP32[$4 + 140 >> 2] = $3;
  wasm2js_memory_fill(HEAP32[$4 + 140 >> 2], 0, 84);
  block : {
   block2 : {
    if (jsvIsObject(HEAP32[$4 + 148 >> 2]) & 1) {
     block1 : {
      if (jsvIsInstanceOf(HEAP32[$4 + 148 >> 2], 127608) & 1) {
       if (!(graphicsGetFromVar($4 + 68 | 0, HEAP32[$4 + 148 >> 2]) & 1)) {
        HEAP8[$4 + 159 | 0] = 0;
        break block;
       }
       if (HEAPU8[$4 + 72 | 0] | HEAPU8[$4 + 73 | 0] << 8 | (HEAPU8[$4 + 74 | 0] << 16 | HEAPU8[$4 + 75 | 0] << 24)) {
        HEAP8[$4 + 159 | 0] = 0;
        break block;
       }
       HEAP32[HEAP32[$4 + 140 >> 2] >> 2] = HEAPU8[$4 + 80 | 0] | HEAPU8[$4 + 81 | 0] << 8;
       HEAP32[HEAP32[$4 + 140 >> 2] + 4 >> 2] = HEAPU8[$4 + 82 | 0] | HEAPU8[$4 + 83 | 0] << 8;
       HEAP32[HEAP32[$4 + 140 >> 2] + 8 >> 2] = HEAPU8[$4 + 84 | 0];
       break block1;
      }
      $0 = jsvObjectGetIntegerChild(HEAP32[$4 + 148 >> 2], 136165);
      HEAP32[HEAP32[$4 + 140 >> 2] >> 2] = $0;
      $0 = jsvObjectGetIntegerChild(HEAP32[$4 + 148 >> 2], 124928);
      HEAP32[HEAP32[$4 + 140 >> 2] + 4 >> 2] = $0;
      $0 = jsvObjectGetIntegerChild(HEAP32[$4 + 148 >> 2], 128641);
      HEAP32[HEAP32[$4 + 140 >> 2] + 8 >> 2] = $0;
      if (HEAP32[HEAP32[$4 + 140 >> 2] + 8 >> 2] <= 0) {
       HEAP32[HEAP32[$4 + 140 >> 2] + 8 >> 2] = 1
      }
     }
     HEAP32[$4 + 64 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 148 >> 2], 128153);
     $0 = jsvGetArrayBufferBackingString(HEAP32[$4 + 64 >> 2], HEAP32[$4 + 140 >> 2] + 24 | 0);
     HEAP32[HEAP32[$4 + 140 >> 2] + 20 >> 2] = $0;
     jsvUnLock(HEAP32[$4 + 64 >> 2]);
     $0 = HEAP32[$4 + 140 >> 2];
     HEAP32[$0 + 24 >> 2] = HEAP32[$4 + 144 >> 2] + HEAP32[$0 + 24 >> 2];
     HEAP32[$4 + 60 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 148 >> 2], 124703);
     HEAP8[HEAP32[$4 + 140 >> 2] + 12 | 0] = HEAP32[$4 + 60 >> 2] != 0;
     $0 = jsvGetIntegerAndUnLock(HEAP32[$4 + 60 >> 2]);
     HEAP32[HEAP32[$4 + 140 >> 2] + 16 >> 2] = $0;
     HEAP32[$4 + 60 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 148 >> 2], 137279);
     if (HEAP32[$4 + 60 >> 2]) {
      jsvUnLock(_jswrap_graphics_parseImage_palette(HEAP32[$4 + 140 >> 2], HEAP32[$4 + 60 >> 2]));
      if (!HEAP32[HEAP32[$4 + 140 >> 2] + 28 >> 2]) {
       HEAP8[$4 + 159 | 0] = 0;
       break block;
      }
     }
     break block2;
    }
    block8 : {
     block3 : {
      if (!(jsvIsString(HEAP32[$4 + 148 >> 2]) & 1)) {
       if (!(jsvIsArrayBuffer(HEAP32[$4 + 148 >> 2]) & 1)) {
        break block3
       }
      }
      block4 : {
       if (jsvIsArrayBuffer(HEAP32[$4 + 148 >> 2]) & 1) {
        $0 = jsvGetArrayBufferBackingString(HEAP32[$4 + 148 >> 2], HEAP32[$4 + 140 >> 2] + 24 | 0);
        HEAP32[HEAP32[$4 + 140 >> 2] + 20 >> 2] = $0;
        break block4;
       }
       $0 = jsvLockAgain(HEAP32[$4 + 148 >> 2]);
       HEAP32[HEAP32[$4 + 140 >> 2] + 20 >> 2] = $0;
      }
      jsvStringIteratorNewUTF8($4 + 24 | 0, HEAP32[HEAP32[$4 + 140 >> 2] + 20 >> 2], HEAP32[$4 + 144 >> 2]);
      $0 = jsvStringIteratorGetUTF8CharAndNext($4 + 24 | 0);
      HEAP32[HEAP32[$4 + 140 >> 2] >> 2] = $0;
      $0 = jsvStringIteratorGetUTF8CharAndNext($4 + 24 | 0);
      HEAP32[HEAP32[$4 + 140 >> 2] + 4 >> 2] = $0;
      $0 = jsvStringIteratorGetUTF8CharAndNext($4 + 24 | 0);
      HEAP32[HEAP32[$4 + 140 >> 2] + 8 >> 2] = $0;
      $0 = HEAP32[$4 + 140 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAP32[$4 + 144 >> 2] + HEAP32[$0 + 24 >> 2];
      block5 : {
       if (HEAP32[HEAP32[$4 + 140 >> 2] + 8 >> 2] & 128) {
        HEAP32[HEAP32[$4 + 140 >> 2] + 8 >> 2] = HEAP32[HEAP32[$4 + 140 >> 2] + 8 >> 2] & 127;
        HEAP8[HEAP32[$4 + 140 >> 2] + 12 | 0] = 1;
        $0 = jsvStringIteratorGetUTF8CharAndNext($4 + 24 | 0);
        HEAP32[HEAP32[$4 + 140 >> 2] + 16 >> 2] = $0;
        HEAP16[HEAP32[$4 + 140 >> 2] + 48 >> 1] = 4;
        break block5;
       }
       HEAP16[HEAP32[$4 + 140 >> 2] + 48 >> 1] = 3;
      }
      $0 = HEAP32[$4 + 140 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU16[HEAP32[$4 + 140 >> 2] + 48 >> 1] + HEAP32[$0 + 24 >> 2];
      if (HEAP32[HEAP32[$4 + 140 >> 2] + 8 >> 2] & 64) {
       HEAP32[HEAP32[$4 + 140 >> 2] + 8 >> 2] = HEAP32[HEAP32[$4 + 140 >> 2] + 8 >> 2] & 63;
       if (HEAP32[HEAP32[$4 + 140 >> 2] + 8 >> 2] > 8) {
        jsExceptionHere(1, 127437, 0);
        _jswrap_graphics_freeImageInfo(HEAP32[$4 + 140 >> 2]);
        jsvStringIteratorFree_1830($4 + 24 | 0);
        HEAP8[$4 + 159 | 0] = 0;
        break block;
       }
       HEAP32[$4 + 20 >> 2] = 1 << HEAP32[HEAP32[$4 + 140 >> 2] + 8 >> 2];
       HEAP32[HEAP32[$4 + 140 >> 2] + 32 >> 2] = HEAP32[$4 + 20 >> 2] - 1;
       block6 : {
        if (HEAP32[$4 + 20 >> 2] << 1 >>> 0 <= 32) {
         HEAP32[$4 + 16 >> 2] = HEAP32[HEAP32[$4 + 140 >> 2] + 24 >> 2];
         HEAP32[$4 + 12 >> 2] = 0;
         while (1) {
          if (HEAPU32[$4 + 12 >> 2] < HEAPU32[$4 + 20 >> 2]) {
           $0 = jsvStringIteratorGetUTF8CharAndNext($4 + 24 | 0) & 255;
           $1 = (jsvStringIteratorGetUTF8CharAndNext($4 + 24 | 0) & 255) << 8;
           HEAP16[(HEAP32[$4 + 140 >> 2] + 52 | 0) + (HEAP32[$4 + 12 >> 2] << 1) >> 1] = $0 | $1;
           HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 16 >> 2] + 2;
           HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] + 1;
           continue;
          }
          break;
         };
         HEAP32[HEAP32[$4 + 140 >> 2] + 28 >> 2] = HEAP32[$4 + 140 >> 2] + 52;
         break block6;
        }
        if (HEAP32[HEAP32[$4 + 140 >> 2] + 8 >> 2] <= 8) {
         HEAP32[$4 + 8 >> 2] = HEAP32[HEAP32[$4 + 140 >> 2] + 24 >> 2] + (HEAP32[$4 + 20 >> 2] << 1);
         HEAP32[$4 + 4 >> 2] = 0;
         HEAP32[$4 >> 2] = jsvGetDataPointer(HEAP32[HEAP32[$4 + 140 >> 2] + 20 >> 2], $4 + 4 | 0);
         if (!(!HEAP32[$4 >> 2] | HEAP32[HEAP32[$4 + 140 >> 2] + 8 >> 2] > 8 | HEAPU32[$4 + 8 >> 2] >= HEAPU32[$4 + 4 >> 2])) {
          HEAP32[HEAP32[$4 + 140 >> 2] + 32 >> 2] = HEAP32[$4 + 20 >> 2] - 1;
          HEAP32[HEAP32[$4 + 140 >> 2] + 28 >> 2] = HEAP32[$4 >> 2] + (HEAP32[HEAP32[$4 + 140 >> 2] + 24 >> 2] + HEAPU16[HEAP32[$4 + 140 >> 2] + 48 >> 1] | 0);
         }
        }
       }
       if (!HEAP32[HEAP32[$4 + 140 >> 2] + 28 >> 2]) {
        jsExceptionHere(1, 141398, 0);
        _jswrap_graphics_freeImageInfo(HEAP32[$4 + 140 >> 2]);
        jsvStringIteratorFree_1830($4 + 24 | 0);
        HEAP8[$4 + 159 | 0] = 0;
        break block;
       }
       $0 = HEAP32[$4 + 140 >> 2];
       HEAP16[$0 + 48 >> 1] = HEAPU16[$0 + 48 >> 1] + (HEAP32[$4 + 20 >> 2] << 1 & 65535);
       $0 = HEAP32[$4 + 140 >> 2];
       HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + (HEAP32[$4 + 20 >> 2] << 1 & 65535);
      }
      jsvStringIteratorFree_1830($4 + 24 | 0);
      break block8;
     }
     jsExceptionHere(1, 136552, 0);
     HEAP8[$4 + 159 | 0] = 0;
     break block;
    }
   }
   if (!(HEAP8[HEAP32[$4 + 140 >> 2] + 12 | 0] & 1)) {
    HEAP32[HEAP32[$4 + 140 >> 2] + 16 >> 2] = -1
   }
   if (!HEAP32[HEAP32[$4 + 140 >> 2] + 28 >> 2]) {
    block9 : {
     if (HEAP32[HEAP32[$4 + 140 >> 2] + 8 >> 2] == 1) {
      $0 = HEAP32[$4 + 152 >> 2];
      HEAP16[HEAP32[$4 + 140 >> 2] + 52 >> 1] = HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
      $0 = HEAP32[$4 + 152 >> 2];
      HEAP16[HEAP32[$4 + 140 >> 2] + 54 >> 1] = HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24);
      HEAP32[HEAP32[$4 + 140 >> 2] + 28 >> 2] = HEAP32[$4 + 140 >> 2] + 52;
      HEAP32[HEAP32[$4 + 140 >> 2] + 32 >> 2] = 1;
      break block9;
     }
     block10 : {
      if (HEAP32[HEAP32[$4 + 140 >> 2] + 8 >> 2] == 2) {
       $0 = HEAP32[$4 + 152 >> 2];
       HEAP16[HEAP32[$4 + 140 >> 2] + 52 >> 1] = HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
       $0 = graphicsBlendGfxColor(HEAP32[$4 + 152 >> 2], 85);
       HEAP16[HEAP32[$4 + 140 >> 2] + 54 >> 1] = $0;
       $0 = graphicsBlendGfxColor(HEAP32[$4 + 152 >> 2], 171);
       HEAP16[HEAP32[$4 + 140 >> 2] + 56 >> 1] = $0;
       $0 = HEAP32[$4 + 152 >> 2];
       HEAP16[HEAP32[$4 + 140 >> 2] + 58 >> 1] = HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24);
       HEAP32[HEAP32[$4 + 140 >> 2] + 28 >> 2] = HEAP32[$4 + 140 >> 2] + 52;
       HEAP32[HEAP32[$4 + 140 >> 2] + 32 >> 2] = 3;
       break block10;
      }
      block12 : {
       if (!(HEAPU8[HEAP32[$4 + 152 >> 2] + 16 | 0] != 16 | HEAP32[HEAP32[$4 + 140 >> 2] + 8 >> 2] != 3)) {
        HEAP32[HEAP32[$4 + 140 >> 2] + 28 >> 2] = 189904;
        HEAP32[HEAP32[$4 + 140 >> 2] + 32 >> 2] = 7;
        break block12;
       }
       block14 : {
        if (!(HEAPU8[HEAP32[$4 + 152 >> 2] + 16 | 0] != 16 | HEAP32[HEAP32[$4 + 140 >> 2] + 8 >> 2] != 4)) {
         HEAP32[HEAP32[$4 + 140 >> 2] + 28 >> 2] = 189936;
         HEAP32[HEAP32[$4 + 140 >> 2] + 32 >> 2] = 15;
         break block14;
        }
        block16 : {
         if (!(HEAPU8[HEAP32[$4 + 152 >> 2] + 16 | 0] != 16 | HEAP32[HEAP32[$4 + 140 >> 2] + 8 >> 2] != 8)) {
          HEAP32[HEAP32[$4 + 140 >> 2] + 28 >> 2] = 189968;
          HEAP32[HEAP32[$4 + 140 >> 2] + 32 >> 2] = 255;
          break block16;
         }
         block18 : {
          if (!(HEAPU8[HEAP32[$4 + 152 >> 2] + 16 | 0] != 8 | HEAP32[HEAP32[$4 + 140 >> 2] + 8 >> 2] != 4)) {
           HEAP32[HEAP32[$4 + 140 >> 2] + 28 >> 2] = 190480;
           HEAP32[HEAP32[$4 + 140 >> 2] + 32 >> 2] = 15;
           break block18;
          }
          block20 : {
           if (!(HEAPU8[HEAP32[$4 + 152 >> 2] + 16 | 0] != 8 | HEAP32[HEAP32[$4 + 140 >> 2] + 8 >> 2] != 3)) {
            HEAP32[HEAP32[$4 + 140 >> 2] + 28 >> 2] = 190512;
            HEAP32[HEAP32[$4 + 140 >> 2] + 32 >> 2] = 7;
            break block20;
           }
           if (!(HEAPU8[HEAP32[$4 + 152 >> 2] + 16 | 0] != 4 | HEAP32[HEAP32[$4 + 140 >> 2] + 8 >> 2] != 3)) {
            HEAP32[HEAP32[$4 + 140 >> 2] + 28 >> 2] = 190528;
            HEAP32[HEAP32[$4 + 140 >> 2] + 32 >> 2] = 7;
           }
          }
         }
        }
       }
      }
     }
    }
   }
   block23 : {
    if (!(!(jsvIsString(HEAP32[HEAP32[$4 + 140 >> 2] + 20 >> 2]) & 1) | HEAP32[HEAP32[$4 + 140 >> 2] >> 2] <= 0 | HEAP32[HEAP32[$4 + 140 >> 2] + 4 >> 2] <= 0)) {
     if (HEAP32[HEAP32[$4 + 140 >> 2] + 8 >> 2] <= 32) {
      break block23
     }
    }
    jsExceptionHere(1, 137871, 0);
    _jswrap_graphics_freeImageInfo(HEAP32[$4 + 140 >> 2]);
    HEAP8[$4 + 159 | 0] = 0;
    break block;
   }
   HEAP32[HEAP32[$4 + 140 >> 2] + 36 >> 2] = (1 << HEAP32[HEAP32[$4 + 140 >> 2] + 8 >> 2]) - 1;
   $1 = HEAP32[$4 + 140 >> 2];
   if (HEAP32[HEAP32[$4 + 140 >> 2] + 8 >> 2] < 8) {
    $0 = (8 / HEAP32[HEAP32[$4 + 140 >> 2] + 8 >> 2] | 0) - 1 | 0
   } else {
    $0 = 0
   }
   HEAP32[$1 + 40 >> 2] = $0;
   HEAP32[HEAP32[$4 + 140 >> 2] + 44 >> 2] = Math_imul(HEAP32[HEAP32[$4 + 140 >> 2] >> 2], HEAP32[HEAP32[$4 + 140 >> 2] + 8 >> 2]) + 7 >> 3;
   HEAP16[HEAP32[$4 + 140 >> 2] + 50 >> 1] = Math_imul(HEAP32[HEAP32[$4 + 140 >> 2] + 8 >> 2], Math_imul(HEAP32[HEAP32[$4 + 140 >> 2] >> 2], HEAP32[HEAP32[$4 + 140 >> 2] + 4 >> 2])) + 7 >> 3;
   HEAP8[$4 + 159 | 0] = 1;
  }
  __stack_pointer = $4 + 160 | 0;
  return HEAP8[$4 + 159 | 0] & 1;
 }
 
 function jsvStringIteratorFree_1830($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function _jswrap_drawImageLayerGetPixel($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 40 >> 2] = $0;
  HEAP32[$2 + 36 >> 2] = $1;
  HEAP32[$2 + 32 >> 2] = HEAP32[HEAP32[$2 + 40 >> 2] + 180 >> 2];
  HEAP32[$2 + 28 >> 2] = HEAP32[HEAP32[$2 + 40 >> 2] + 184 >> 2];
  block2 : {
   if (!(HEAP32[HEAP32[$2 + 40 >> 2] + 156 >> 2] <= (HEAP32[$2 + 32 >> 2] & -256) | HEAP32[HEAP32[$2 + 40 >> 2] + 160 >> 2] <= (HEAP32[$2 + 28 >> 2] & -256) | (HEAP32[$2 + 32 >> 2] | HEAP32[$2 + 28 >> 2]) < 0)) {
    HEAP32[$2 + 24 >> 2] = 0;
    HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 32 >> 2] >> 8;
    HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 28 >> 2] >> 8;
    block1 : {
     if (HEAP32[HEAP32[$2 + 40 >> 2] + 44 >> 2] == 8) {
      jsvStringIteratorGoto(HEAP32[$2 + 40 >> 2] + 120 | 0, HEAP32[HEAP32[$2 + 40 >> 2] + 56 >> 2], (HEAP32[HEAP32[$2 + 40 >> 2] + 60 >> 2] + HEAP32[$2 + 20 >> 2] | 0) + Math_imul(HEAP32[$2 + 16 >> 2], HEAP32[HEAP32[$2 + 40 >> 2] + 80 >> 2]) | 0);
      HEAP32[$2 + 24 >> 2] = jsvStringIteratorGetChar_1832(HEAP32[$2 + 40 >> 2] + 120 | 0) & 255;
      break block1;
     }
     HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 20 >> 2] + Math_imul(HEAP32[$2 + 16 >> 2], HEAP32[HEAP32[$2 + 40 >> 2] + 36 >> 2]);
     HEAP32[$2 + 8 >> 2] = Math_imul(HEAP32[$2 + 12 >> 2], HEAP32[HEAP32[$2 + 40 >> 2] + 44 >> 2]);
     jsvStringIteratorGoto(HEAP32[$2 + 40 >> 2] + 120 | 0, HEAP32[HEAP32[$2 + 40 >> 2] + 56 >> 2], HEAP32[HEAP32[$2 + 40 >> 2] + 60 >> 2] + (HEAP32[$2 + 8 >> 2] >> 3) | 0);
     HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] & 7;
     HEAP32[$2 + 24 >> 2] = jsvStringIteratorGetChar_1832(HEAP32[$2 + 40 >> 2] + 120 | 0) & 255;
     HEAP32[$2 + 4 >> 2] = 8 - (HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 40 >> 2] + 44 >> 2] | 0);
     while (1) {
      if (HEAP32[$2 + 4 >> 2] < 0) {
       jsvStringIteratorNext(HEAP32[$2 + 40 >> 2] + 120 | 0);
       HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 24 >> 2] << 8 | jsvStringIteratorGetChar_1832(HEAP32[$2 + 40 >> 2] + 120 | 0) & 255;
       HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 8;
       continue;
      }
      break;
     };
     HEAP32[$2 + 24 >> 2] = HEAP32[HEAP32[$2 + 40 >> 2] + 72 >> 2] & HEAP32[$2 + 24 >> 2] >>> HEAP32[$2 + 4 >> 2];
    }
    if (HEAP32[HEAP32[$2 + 40 >> 2] + 52 >> 2] != HEAP32[$2 + 24 >> 2]) {
     if (HEAP32[HEAP32[$2 + 40 >> 2] + 64 >> 2]) {
      HEAP32[$2 + 24 >> 2] = HEAPU16[HEAP32[HEAP32[$2 + 40 >> 2] + 64 >> 2] + ((HEAP32[$2 + 24 >> 2] & HEAP32[HEAP32[$2 + 40 >> 2] + 68 >> 2]) << 1) >> 1]
     }
     HEAP32[HEAP32[$2 + 36 >> 2] >> 2] = HEAP32[$2 + 24 >> 2];
     HEAP8[$2 + 47 | 0] = 1;
     break block2;
    }
   }
   HEAP8[$2 + 47 | 0] = 0;
  }
  __stack_pointer = $2 + 48 | 0;
  return HEAP8[$2 + 47 | 0] & 1;
 }
 
 function jsvStringIteratorGetChar_1832($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2]) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   HEAP8[$1 + 15 | 0] = HEAPU8[HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] + HEAP32[HEAP32[$1 + 8 >> 2] >> 2] | 0];
  }
  return HEAP8[$1 + 15 | 0] << 24 >> 24;
 }
 
 function _jswrap_drawImageLayerInit($0) {
  var $1 = 0, $2 = 0.0, $3 = 0;
  $1 = __stack_pointer - 48 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 44 >> 2] = $0;
  HEAP32[HEAP32[$1 + 44 >> 2] + 156 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] + 36 >> 2] << 8;
  HEAP32[HEAP32[$1 + 44 >> 2] + 160 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] + 40 >> 2] << 8;
  HEAPF64[$1 + 32 >> 3] = jswrap_math_cos(HEAPF64[HEAP32[$1 + 44 >> 2] + 16 >> 3]);
  HEAPF64[$1 + 24 >> 3] = jswrap_math_sin(HEAPF64[HEAP32[$1 + 44 >> 2] + 16 >> 3]);
  $3 = HEAP32[$1 + 44 >> 2];
  $2 = HEAPF64[$1 + 32 >> 3] / HEAPF64[HEAP32[$1 + 44 >> 2] + 24 >> 3] * 256.0;
  if (Math_abs($2) < 2147483647.0) {
   $0 = ~~$2
  } else {
   $0 = -2147483648
  }
  HEAP32[$3 + 164 >> 2] = $0;
  $3 = HEAP32[$1 + 44 >> 2];
  $2 = HEAPF64[$1 + 24 >> 3] / HEAPF64[HEAP32[$1 + 44 >> 2] + 24 >> 3] * 256.0;
  if (Math_abs($2) < 2147483647.0) {
   $0 = ~~$2
  } else {
   $0 = -2147483648
  }
  HEAP32[$3 + 168 >> 2] = $0;
  $2 = HEAPF64[HEAP32[$1 + 44 >> 2] + 24 >> 3] * (+HEAP32[HEAP32[$1 + 44 >> 2] + 36 >> 2] * Math_abs(HEAPF64[$1 + 32 >> 3]) + +HEAP32[HEAP32[$1 + 44 >> 2] + 40 >> 2] * Math_abs(HEAPF64[$1 + 24 >> 3])) + .5;
  if (Math_abs($2) < 2147483647.0) {
   $0 = ~~$2
  } else {
   $0 = -2147483648
  }
  HEAP32[$1 + 20 >> 2] = $0;
  $2 = HEAPF64[HEAP32[$1 + 44 >> 2] + 24 >> 3] * (+HEAP32[HEAP32[$1 + 44 >> 2] + 36 >> 2] * Math_abs(HEAPF64[$1 + 24 >> 3]) + +HEAP32[HEAP32[$1 + 44 >> 2] + 40 >> 2] * Math_abs(HEAPF64[$1 + 32 >> 3])) + .5;
  if (Math_abs($2) < 2147483647.0) {
   $0 = ~~$2
  } else {
   $0 = -2147483648
  }
  HEAP32[$1 + 16 >> 2] = $0;
  if (HEAP8[HEAP32[$1 + 44 >> 2] + 32 | 0] & 1) {
   $0 = HEAP32[$1 + 44 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] - (HEAP32[$1 + 20 >> 2] << 7);
   $0 = HEAP32[$1 + 44 >> 2];
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] - (HEAP32[$1 + 16 >> 2] << 7);
  }
  HEAP32[HEAP32[$1 + 44 >> 2] + 8 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] >> 2] + (HEAP32[$1 + 20 >> 2] << 8);
  HEAP32[HEAP32[$1 + 44 >> 2] + 12 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] + 4 >> 2] + (HEAP32[$1 + 16 >> 2] << 8);
  HEAP32[$1 + 12 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] + 36 >> 2] << 7;
  HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] + 40 >> 2] << 7;
  HEAP32[HEAP32[$1 + 44 >> 2] + 172 >> 2] = HEAP32[$1 + 12 >> 2] - (((Math_imul(HEAP32[HEAP32[$1 + 44 >> 2] + 164 >> 2], HEAP32[$1 + 20 >> 2]) + 1 | 0) + Math_imul(HEAP32[HEAP32[$1 + 44 >> 2] + 168 >> 2], HEAP32[$1 + 16 >> 2]) | 0) / 2 | 0);
  HEAP32[HEAP32[$1 + 44 >> 2] + 176 >> 2] = HEAP32[$1 + 8 >> 2] - (((Math_imul(HEAP32[HEAP32[$1 + 44 >> 2] + 164 >> 2], HEAP32[$1 + 16 >> 2]) + 1 | 0) - Math_imul(HEAP32[HEAP32[$1 + 44 >> 2] + 168 >> 2], HEAP32[$1 + 20 >> 2]) | 0) / 2 | 0);
  if (HEAP8[HEAP32[$1 + 44 >> 2] + 33 | 0] & 1) {
   while (1) {
    if (HEAP32[HEAP32[$1 + 44 >> 2] + 172 >> 2] < 0) {
     $0 = HEAP32[$1 + 44 >> 2];
     HEAP32[$0 + 172 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] + 156 >> 2] + HEAP32[$0 + 172 >> 2];
     continue;
    }
    break;
   };
   while (1) {
    if (HEAP32[HEAP32[$1 + 44 >> 2] + 172 >> 2] >= HEAP32[HEAP32[$1 + 44 >> 2] + 156 >> 2]) {
     $0 = HEAP32[$1 + 44 >> 2];
     HEAP32[$0 + 172 >> 2] = HEAP32[$0 + 172 >> 2] - HEAP32[HEAP32[$1 + 44 >> 2] + 156 >> 2];
     continue;
    }
    break;
   };
   while (1) {
    if (HEAP32[HEAP32[$1 + 44 >> 2] + 176 >> 2] < 0) {
     $0 = HEAP32[$1 + 44 >> 2];
     HEAP32[$0 + 176 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] + 160 >> 2] + HEAP32[$0 + 176 >> 2];
     continue;
    }
    break;
   };
   while (1) {
    if (HEAP32[HEAP32[$1 + 44 >> 2] + 176 >> 2] >= HEAP32[HEAP32[$1 + 44 >> 2] + 160 >> 2]) {
     $0 = HEAP32[$1 + 44 >> 2];
     HEAP32[$0 + 176 >> 2] = HEAP32[$0 + 176 >> 2] - HEAP32[HEAP32[$1 + 44 >> 2] + 160 >> 2];
     continue;
    }
    break;
   };
  }
  __stack_pointer = $1 + 48 | 0;
 }
 
 function _jswrap_drawImageLayerSetStart($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  HEAP32[$3 + 16 >> 2] = (HEAP32[$3 + 24 >> 2] << 8) - HEAP32[HEAP32[$3 + 28 >> 2] >> 2];
  HEAP32[$3 + 12 >> 2] = (HEAP32[$3 + 20 >> 2] << 8) - HEAP32[HEAP32[$3 + 28 >> 2] + 4 >> 2];
  $0 = HEAP32[$3 + 28 >> 2];
  HEAP32[$0 + 172 >> 2] = HEAP32[$0 + 172 >> 2] + (Math_imul(HEAP32[HEAP32[$3 + 28 >> 2] + 164 >> 2], HEAP32[$3 + 16 >> 2]) + Math_imul(HEAP32[HEAP32[$3 + 28 >> 2] + 168 >> 2], HEAP32[$3 + 12 >> 2]) >> 8);
  $0 = HEAP32[$3 + 28 >> 2];
  HEAP32[$0 + 176 >> 2] = HEAP32[$0 + 176 >> 2] + (Math_imul(HEAP32[HEAP32[$3 + 28 >> 2] + 164 >> 2], HEAP32[$3 + 12 >> 2]) - Math_imul(HEAP32[HEAP32[$3 + 28 >> 2] + 168 >> 2], HEAP32[$3 + 16 >> 2]) >> 8);
 }
 
 function _jswrap_drawImageLayerStartX($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[HEAP32[$1 + 12 >> 2] + 180 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 172 >> 2];
  HEAP32[HEAP32[$1 + 12 >> 2] + 184 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 176 >> 2];
 }
 
 function _jswrap_drawImageLayerNextX($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 + 180 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 164 >> 2] + HEAP32[$0 + 180 >> 2];
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 + 184 >> 2] = HEAP32[$0 + 184 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 168 >> 2];
 }
 
 function _jswrap_drawImageLayerNextXRepeat($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  if (HEAP8[HEAP32[$1 + 12 >> 2] + 33 | 0] & 1) {
   if (HEAP32[HEAP32[$1 + 12 >> 2] + 180 >> 2] < 0) {
    $0 = HEAP32[$1 + 12 >> 2];
    HEAP32[$0 + 180 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 156 >> 2] + HEAP32[$0 + 180 >> 2];
   }
   if (HEAP32[HEAP32[$1 + 12 >> 2] + 180 >> 2] >= HEAP32[HEAP32[$1 + 12 >> 2] + 156 >> 2]) {
    $0 = HEAP32[$1 + 12 >> 2];
    HEAP32[$0 + 180 >> 2] = HEAP32[$0 + 180 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 156 >> 2];
   }
   if (HEAP32[HEAP32[$1 + 12 >> 2] + 184 >> 2] < 0) {
    $0 = HEAP32[$1 + 12 >> 2];
    HEAP32[$0 + 184 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 160 >> 2] + HEAP32[$0 + 184 >> 2];
   }
   if (HEAP32[HEAP32[$1 + 12 >> 2] + 184 >> 2] >= HEAP32[HEAP32[$1 + 12 >> 2] + 160 >> 2]) {
    $0 = HEAP32[$1 + 12 >> 2];
    HEAP32[$0 + 184 >> 2] = HEAP32[$0 + 184 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 160 >> 2];
   }
  }
 }
 
 function _jswrap_drawImageLayerNextY($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 + 172 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 168 >> 2] + HEAP32[$0 + 172 >> 2];
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 + 176 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 164 >> 2] + HEAP32[$0 + 176 >> 2];
  if (HEAP8[HEAP32[$1 + 12 >> 2] + 33 | 0] & 1) {
   if (HEAP32[HEAP32[$1 + 12 >> 2] + 172 >> 2] < 0) {
    $0 = HEAP32[$1 + 12 >> 2];
    HEAP32[$0 + 172 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 156 >> 2] + HEAP32[$0 + 172 >> 2];
   }
   if (HEAP32[HEAP32[$1 + 12 >> 2] + 172 >> 2] >= HEAP32[HEAP32[$1 + 12 >> 2] + 156 >> 2]) {
    $0 = HEAP32[$1 + 12 >> 2];
    HEAP32[$0 + 172 >> 2] = HEAP32[$0 + 172 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 156 >> 2];
   }
   if (HEAP32[HEAP32[$1 + 12 >> 2] + 176 >> 2] < 0) {
    $0 = HEAP32[$1 + 12 >> 2];
    HEAP32[$0 + 176 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 160 >> 2] + HEAP32[$0 + 176 >> 2];
   }
   if (HEAP32[HEAP32[$1 + 12 >> 2] + 176 >> 2] >= HEAP32[HEAP32[$1 + 12 >> 2] + 160 >> 2]) {
    $0 = HEAP32[$1 + 12 >> 2];
    HEAP32[$0 + 176 >> 2] = HEAP32[$0 + 176 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 160 >> 2];
   }
  }
 }
 
 function _jswrap_drawImageSimple($0, $1, $2, $3, $4, $5) {
  var $6 = 0;
  $6 = __stack_pointer + -64 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 60 >> 2] = $0;
  HEAP32[$6 + 56 >> 2] = $1;
  HEAP32[$6 + 52 >> 2] = $2;
  HEAP32[$6 + 48 >> 2] = $3;
  HEAP32[$6 + 44 >> 2] = $4;
  HEAP8[$6 + 43 | 0] = $5;
  HEAP32[$6 + 36 >> 2] = 0;
  HEAP32[$6 + 32 >> 2] = 0;
  HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 56 >> 2];
  HEAP32[$6 + 24 >> 2] = HEAP32[$6 + 52 >> 2];
  HEAP32[$6 + 20 >> 2] = (HEAP32[$6 + 56 >> 2] + HEAP32[HEAP32[$6 + 48 >> 2] >> 2] | 0) - 1;
  HEAP32[$6 + 16 >> 2] = (HEAP32[$6 + 52 >> 2] + HEAP32[HEAP32[$6 + 48 >> 2] + 4 >> 2] | 0) - 1;
  block : {
   if (!(jsvStringIteratorHasChar_1840(HEAP32[$6 + 44 >> 2]) & 1)) {
    break block
   }
   graphicsSetModifiedAndClip(HEAP32[$6 + 60 >> 2], $6 + 28 | 0, $6 + 24 | 0, $6 + 20 | 0, $6 + 16 | 0, 1);
   if (!(HEAP32[$6 + 16 >> 2] >= HEAP32[$6 + 24 >> 2] & HEAP32[$6 + 20 >> 2] >= HEAP32[$6 + 28 >> 2])) {
    if (HEAP8[$6 + 43 | 0] & 1) {
     HEAP32[$6 + 36 >> 2] = 0 - Math_imul(HEAP32[HEAP32[$6 + 48 >> 2] + 4 >> 2], Math_imul(HEAP32[HEAP32[$6 + 48 >> 2] >> 2], HEAP32[HEAP32[$6 + 48 >> 2] + 8 >> 2]));
     while (1) {
      if (HEAP32[$6 + 36 >> 2] < 0) {
       jsvStringIteratorNextUTF8(HEAP32[$6 + 44 >> 2]);
       HEAP32[$6 + 36 >> 2] = HEAP32[$6 + 36 >> 2] + 8;
       continue;
      }
      break;
     };
    }
    break block;
   }
   HEAP32[$6 + 36 >> 2] = 0 - Math_imul(HEAP32[HEAP32[$6 + 48 >> 2] >> 2], Math_imul(HEAP32[HEAP32[$6 + 48 >> 2] + 8 >> 2], HEAP32[$6 + 24 >> 2] - HEAP32[$6 + 52 >> 2] | 0));
   HEAP32[$6 + 12 >> 2] = graphicsGetSetPixelUnclippedFn(HEAP32[$6 + 60 >> 2], HEAP32[$6 + 56 >> 2], HEAP32[$6 + 24 >> 2], (HEAP32[$6 + 56 >> 2] + HEAP32[HEAP32[$6 + 48 >> 2] >> 2] | 0) - 1 | 0, HEAP32[$6 + 16 >> 2], 1);
   HEAP32[$6 + 8 >> 2] = HEAP32[$6 + 24 >> 2];
   while (1) {
    if (HEAP32[$6 + 8 >> 2] <= HEAP32[$6 + 16 >> 2]) {
     HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 56 >> 2];
     while (1) {
      if (HEAP32[$6 + 4 >> 2] < (HEAP32[$6 + 56 >> 2] + HEAP32[HEAP32[$6 + 48 >> 2] >> 2] | 0)) {
       while (1) {
        if (HEAP32[$6 + 36 >> 2] < HEAP32[HEAP32[$6 + 48 >> 2] + 8 >> 2]) {
         HEAP32[$6 + 32 >> 2] = HEAP32[$6 + 32 >> 2] << 8 | jsvStringIteratorGetUTF8CharAndNext(HEAP32[$6 + 44 >> 2]) & 255;
         HEAP32[$6 + 36 >> 2] = HEAP32[$6 + 36 >> 2] + 8;
         continue;
        }
        break;
       };
       HEAP32[$6 >> 2] = HEAP32[HEAP32[$6 + 48 >> 2] + 36 >> 2] & HEAP32[$6 + 32 >> 2] >>> HEAP32[$6 + 36 >> 2] - HEAP32[HEAP32[$6 + 48 >> 2] + 8 >> 2];
       HEAP32[$6 + 36 >> 2] = HEAP32[$6 + 36 >> 2] - HEAP32[HEAP32[$6 + 48 >> 2] + 8 >> 2];
       if (HEAP32[HEAP32[$6 + 48 >> 2] + 16 >> 2] != HEAP32[$6 >> 2]) {
        if (HEAP32[HEAP32[$6 + 48 >> 2] + 28 >> 2]) {
         HEAP32[$6 >> 2] = HEAPU16[HEAP32[HEAP32[$6 + 48 >> 2] + 28 >> 2] + ((HEAP32[$6 >> 2] & HEAP32[HEAP32[$6 + 48 >> 2] + 32 >> 2]) << 1) >> 1]
        }
        FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]](HEAP32[$6 + 60 >> 2], HEAP32[$6 + 4 >> 2], HEAP32[$6 + 8 >> 2], HEAP32[$6 >> 2]);
       }
       HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] + 1;
       continue;
      }
      break;
     };
     HEAP32[$6 + 8 >> 2] = HEAP32[$6 + 8 >> 2] + 1;
     continue;
    }
    break;
   };
   if (!(HEAP8[$6 + 43 | 0] & 1)) {
    break block
   }
   HEAP32[$6 + 36 >> 2] = HEAP32[$6 + 36 >> 2] + (HEAP32[HEAP32[$6 + 48 >> 2] + 8 >> 2] - Math_imul(HEAP32[HEAP32[$6 + 48 >> 2] >> 2], Math_imul(HEAP32[HEAP32[$6 + 48 >> 2] + 8 >> 2], HEAP32[$6 + 52 >> 2] + HEAP32[HEAP32[$6 + 48 >> 2] + 4 >> 2] - (HEAP32[$6 + 16 >> 2] + 1) | 0)) | 0);
   while (1) {
    if (HEAP32[$6 + 36 >> 2] < 0) {
     jsvStringIteratorNextUTF8(HEAP32[$6 + 44 >> 2]);
     HEAP32[$6 + 36 >> 2] = HEAP32[$6 + 36 >> 2] + 8;
     continue;
    }
    break;
   };
  }
  __stack_pointer = $6 - -64 | 0;
 }
 
 function jsvStringIteratorHasChar_1840($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
 }
 
 function jswrap_graphics_idle() {
  graphicsIdle();
  return 0;
 }
 
 function jswrap_graphics_init() {
  HEAP8[370709] = 255;
  HEAP8[370710] = 255;
  HEAP8[370711] = 0;
  HEAP8[370712] = 0;
  HEAP8[370713] = 255;
  HEAP8[370714] = 255;
  HEAP8[370715] = 0;
  HEAP8[370716] = 0;
  HEAP8[370717] = 255;
  HEAP8[370718] = 255;
  HEAP8[370719] = 0;
  HEAP8[370720] = 0;
  HEAP8[370721] = 1;
 }
 
 function jswrap_graphics_getInstance() {
  return jsvObjectGetChildIfExists(HEAP32[92131], 123922) | 0;
 }
 
 function jswrap_graphics_createArrayBuffer($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 112 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 104 >> 2] = $0;
  HEAP32[$4 + 100 >> 2] = $1;
  HEAP32[$4 + 96 >> 2] = $2;
  HEAP32[$4 + 92 >> 2] = $3;
  block2 : {
   block1 : {
    if (!(HEAP32[$4 + 104 >> 2] <= 0 | HEAP32[$4 + 100 >> 2] <= 0 | HEAP32[$4 + 104 >> 2] > 32767)) {
     if (HEAP32[$4 + 100 >> 2] <= 32767) {
      break block1
     }
    }
    jsExceptionHere(1, 137029, 0);
    HEAP32[$4 + 108 >> 2] = 0;
    break block2;
   }
   if (!(isValidBPP(HEAP32[$4 + 96 >> 2]) & 1)) {
    jsExceptionHere(1, 140911, 0);
    HEAP32[$4 + 108 >> 2] = 0;
    break block2;
   }
   HEAP32[$4 + 88 >> 2] = jspNewObject(0, 127608);
   if (!HEAP32[$4 + 88 >> 2]) {
    HEAP32[$4 + 108 >> 2] = 0;
    break block2;
   }
   HEAP8[$4 + 20 | 0] = 0;
   HEAP8[$4 + 21 | 0] = 0;
   HEAP8[$4 + 22 | 0] = 0;
   HEAP8[$4 + 23 | 0] = 0;
   graphicsStructInit($4 + 16 | 0, HEAP32[$4 + 104 >> 2], HEAP32[$4 + 100 >> 2], HEAP32[$4 + 96 >> 2]);
   HEAP8[$4 + 24 | 0] = 4;
   HEAP8[$4 + 25 | 0] = 0;
   HEAP8[$4 + 26 | 0] = 0;
   HEAP8[$4 + 27 | 0] = 0;
   $0 = HEAP32[$4 + 88 >> 2];
   HEAP8[$4 + 16 | 0] = $0;
   HEAP8[$4 + 17 | 0] = $0 >>> 8;
   HEAP8[$4 + 18 | 0] = $0 >>> 16;
   HEAP8[$4 + 19 | 0] = $0 >>> 24;
   HEAP32[$4 + 12 >> 2] = 0;
   if (jsvIsObject(HEAP32[$4 + 92 >> 2]) & 1) {
    if (jsvObjectGetBoolChild(HEAP32[$4 + 92 >> 2], 136814) & 1) {
     $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 1;
     HEAP8[$4 + 24 | 0] = $0;
     HEAP8[$4 + 25 | 0] = $0 >>> 8;
     HEAP8[$4 + 26 | 0] = $0 >>> 16;
     HEAP8[$4 + 27 | 0] = $0 >>> 24;
    }
    $0 = jsvObjectGetChildIfExists(HEAP32[$4 + 92 >> 2], 140234);
    HEAP32[$4 + 8 >> 2] = $0;
    if ($0) {
     if (!(jsvGetBoolAndUnLock(HEAP32[$4 + 8 >> 2]) & 1)) {
      $0 = (HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24)) & -5;
      HEAP8[$4 + 24 | 0] = $0;
      HEAP8[$4 + 25 | 0] = $0 >>> 8;
      HEAP8[$4 + 26 | 0] = $0 >>> 16;
      HEAP8[$4 + 27 | 0] = $0 >>> 24;
     }
    }
    if (jsvObjectGetBoolChild(HEAP32[$4 + 92 >> 2], 123926) & 1) {
     $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 8;
     HEAP8[$4 + 24 | 0] = $0;
     HEAP8[$4 + 25 | 0] = $0 >>> 8;
     HEAP8[$4 + 26 | 0] = $0 >>> 16;
     HEAP8[$4 + 27 | 0] = $0 >>> 24;
    }
    if (jsvObjectGetBoolChild(HEAP32[$4 + 92 >> 2], 137265) & 1) {
     block3 : {
      if (HEAPU8[$4 + 32 | 0] == 1) {
       $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 2;
       HEAP8[$4 + 24 | 0] = $0;
       HEAP8[$4 + 25 | 0] = $0 >>> 8;
       HEAP8[$4 + 26 | 0] = $0 >>> 16;
       HEAP8[$4 + 27 | 0] = $0 >>> 24;
       break block3;
      }
      jsExceptionHere(1, 127148, 0);
      HEAP32[$4 + 108 >> 2] = 0;
      break block2;
     }
     if ((HEAPU8[$4 + 30 | 0] | HEAPU8[$4 + 31 | 0] << 8) & 7) {
      jsExceptionHere(1, 137223, 0);
      HEAP32[$4 + 108 >> 2] = 0;
      break block2;
     }
    }
    HEAP32[$4 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 92 >> 2], 128283);
    if (HEAP32[$4 + 4 >> 2]) {
     if (!(jsvIsStringEqual(HEAP32[$4 + 4 >> 2], 140251) & 1)) {
      block4 : {
       if (!(jsvIsStringEqual(HEAP32[$4 + 4 >> 2], 136445) & 1)) {
        $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 128;
        HEAP8[$4 + 24 | 0] = $0;
        HEAP8[$4 + 25 | 0] = $0 >>> 8;
        HEAP8[$4 + 26 | 0] = $0 >>> 16;
        HEAP8[$4 + 27 | 0] = $0 >>> 24;
        break block4;
       }
       block5 : {
        if (!(jsvIsStringEqual(HEAP32[$4 + 4 >> 2], 127968) & 1)) {
         $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 256;
         HEAP8[$4 + 24 | 0] = $0;
         HEAP8[$4 + 25 | 0] = $0 >>> 8;
         HEAP8[$4 + 26 | 0] = $0 >>> 16;
         HEAP8[$4 + 27 | 0] = $0 >>> 24;
         break block5;
        }
        block6 : {
         if (!(jsvIsStringEqual(HEAP32[$4 + 4 >> 2], 128385) & 1)) {
          $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 384;
          HEAP8[$4 + 24 | 0] = $0;
          HEAP8[$4 + 25 | 0] = $0 >>> 8;
          HEAP8[$4 + 26 | 0] = $0 >>> 16;
          HEAP8[$4 + 27 | 0] = $0 >>> 24;
          break block6;
         }
         block7 : {
          if (!(jsvIsStringEqual(HEAP32[$4 + 4 >> 2], 140242) & 1)) {
           $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 512;
           HEAP8[$4 + 24 | 0] = $0;
           HEAP8[$4 + 25 | 0] = $0 >>> 8;
           HEAP8[$4 + 26 | 0] = $0 >>> 16;
           HEAP8[$4 + 27 | 0] = $0 >>> 24;
           break block7;
          }
          block8 : {
           if (!(jsvIsStringEqual(HEAP32[$4 + 4 >> 2], 136810) & 1)) {
            $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 640;
            HEAP8[$4 + 24 | 0] = $0;
            HEAP8[$4 + 25 | 0] = $0 >>> 8;
            HEAP8[$4 + 26 | 0] = $0 >>> 16;
            HEAP8[$4 + 27 | 0] = $0 >>> 24;
            break block8;
           }
           jsWarn(127066, 0);
          }
         }
        }
       }
      }
     }
     jsvUnLock(HEAP32[$4 + 4 >> 2]);
    }
    HEAP32[$4 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 92 >> 2], 128153);
    block9 : {
     if (!HEAP32[$4 + 12 >> 2]) {
      break block9
     }
     if (jsvIsArrayBuffer(HEAP32[$4 + 12 >> 2]) & 1) {
      break block9
     }
     HEAP32[$4 >> 2] = HEAP32[$4 + 12 >> 2];
     jsExceptionHere(1, 125854, $4);
     jsvUnLock(HEAP32[$4 + 12 >> 2]);
     HEAP32[$4 + 108 >> 2] = 0;
     break block2;
    }
   }
   lcdInit_ArrayBuffer($4 + 16 | 0, HEAP32[$4 + 12 >> 2]);
   jsvUnLock(HEAP32[$4 + 12 >> 2]);
   graphicsSetVarInitial($4 + 16 | 0);
   HEAP32[$4 + 108 >> 2] = HEAP32[$4 + 88 >> 2];
  }
  __stack_pointer = $4 + 112 | 0;
  return HEAP32[$4 + 108 >> 2];
 }
 
 function isValidBPP($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = 1;
  block : {
   if (HEAP32[$1 + 12 >> 2] == 1) {
    break block
   }
   $0 = 1;
   if (HEAP32[$1 + 12 >> 2] == 2) {
    break block
   }
   $0 = 1;
   if (HEAP32[$1 + 12 >> 2] == 4) {
    break block
   }
   $0 = 1;
   if (HEAP32[$1 + 12 >> 2] == 8) {
    break block
   }
   $0 = 1;
   if (HEAP32[$1 + 12 >> 2] == 16) {
    break block
   }
   $0 = 1;
   if (HEAP32[$1 + 12 >> 2] == 24) {
    break block
   }
   $0 = HEAP32[$1 + 12 >> 2] == 32;
  }
  return $0;
 }
 
 function jswrap_graphics_createCallback($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 128 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 120 >> 2] = $0;
  HEAP32[$4 + 116 >> 2] = $1;
  HEAP32[$4 + 112 >> 2] = $2;
  HEAP32[$4 + 108 >> 2] = $3;
  block2 : {
   block1 : {
    if (!(HEAP32[$4 + 120 >> 2] <= 0 | HEAP32[$4 + 116 >> 2] <= 0 | HEAP32[$4 + 120 >> 2] > 32767)) {
     if (HEAP32[$4 + 116 >> 2] <= 32767) {
      break block1
     }
    }
    jsExceptionHere(1, 137029, 0);
    HEAP32[$4 + 124 >> 2] = 0;
    break block2;
   }
   if (!(isValidBPP(HEAP32[$4 + 112 >> 2]) & 1)) {
    jsExceptionHere(1, 140911, 0);
    HEAP32[$4 + 124 >> 2] = 0;
    break block2;
   }
   HEAP32[$4 + 104 >> 2] = 0;
   HEAP32[$4 + 100 >> 2] = 0;
   block3 : {
    if (jsvIsObject(HEAP32[$4 + 108 >> 2]) & 1) {
     jsvUnLock(HEAP32[$4 + 104 >> 2]);
     HEAP32[$4 + 104 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 108 >> 2], 135686);
     HEAP32[$4 + 100 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 108 >> 2], 125093);
     break block3;
    }
    HEAP32[$4 + 104 >> 2] = jsvLockAgain(HEAP32[$4 + 108 >> 2]);
   }
   if (!(jsvIsFunction(HEAP32[$4 + 104 >> 2]) & 1)) {
    HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 104 >> 2];
    jsExceptionHere(1, 125383, $4 + 16 | 0);
    jsvUnLock2(HEAP32[$4 + 104 >> 2], HEAP32[$4 + 100 >> 2]);
    HEAP32[$4 + 124 >> 2] = 0;
    break block2;
   }
   block4 : {
    if (jsvIsUndefined(HEAP32[$4 + 100 >> 2]) & 1) {
     break block4
    }
    if (jsvIsFunction(HEAP32[$4 + 100 >> 2]) & 1) {
     break block4
    }
    HEAP32[$4 >> 2] = HEAP32[$4 + 100 >> 2];
    jsExceptionHere(1, 125383, $4);
    jsvUnLock2(HEAP32[$4 + 104 >> 2], HEAP32[$4 + 100 >> 2]);
    HEAP32[$4 + 124 >> 2] = 0;
    break block2;
   }
   HEAP32[$4 + 96 >> 2] = jspNewObject(0, 127608);
   if (!HEAP32[$4 + 96 >> 2]) {
    HEAP32[$4 + 124 >> 2] = 0;
    break block2;
   }
   HEAP8[$4 + 28 | 0] = 1;
   HEAP8[$4 + 29 | 0] = 0;
   HEAP8[$4 + 30 | 0] = 0;
   HEAP8[$4 + 31 | 0] = 0;
   graphicsStructInit($4 + 24 | 0, HEAP32[$4 + 120 >> 2], HEAP32[$4 + 116 >> 2], HEAP32[$4 + 112 >> 2]);
   $0 = HEAP32[$4 + 96 >> 2];
   HEAP8[$4 + 24 | 0] = $0;
   HEAP8[$4 + 25 | 0] = $0 >>> 8;
   HEAP8[$4 + 26 | 0] = $0 >>> 16;
   HEAP8[$4 + 27 | 0] = $0 >>> 24;
   lcdInit_JS($4 + 24 | 0, HEAP32[$4 + 104 >> 2], HEAP32[$4 + 100 >> 2]);
   graphicsSetVarInitial($4 + 24 | 0);
   jsvUnLock2(HEAP32[$4 + 104 >> 2], HEAP32[$4 + 100 >> 2]);
   HEAP32[$4 + 124 >> 2] = HEAP32[$4 + 96 >> 2];
  }
  __stack_pointer = $4 + 128 | 0;
  return HEAP32[$4 + 124 >> 2];
 }
 
 function jswrap_graphics_createImage($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 96 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 88 >> 2] = $0;
  block : {
   if (!(jsvIsString(HEAP32[$1 + 88 >> 2]) & 1)) {
    jsExceptionHere(3, 136592, 0);
    HEAP32[$1 + 92 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 84 >> 2] = 0;
   HEAP32[$1 + 80 >> 2] = 0;
   HEAP32[$1 + 76 >> 2] = 0;
   HEAP32[$1 + 72 >> 2] = 0;
   HEAP32[$1 + 68 >> 2] = 0;
   jsvStringIteratorNew($1 + 32 | 0, HEAP32[$1 + 88 >> 2], 0);
   while (1) {
    if (jsvStringIteratorHasChar_1840($1 + 32 | 0) & 1) {
     HEAP8[$1 + 31 | 0] = jsvStringIteratorGetCharAndNext($1 + 32 | 0);
     block2 : {
      if (HEAPU8[$1 + 31 | 0] == 10) {
       if (!(HEAP32[$1 + 68 >> 2] | (HEAP32[$1 + 84 >> 2] | HEAP32[$1 + 80 >> 2]))) {
        HEAP32[$1 + 68 >> 2] = 1;
        break block2;
       }
       HEAP32[$1 + 84 >> 2] = 0;
       HEAP32[$1 + 80 >> 2] = HEAP32[$1 + 80 >> 2] + 1;
       if (HEAP32[$1 + 72 >> 2] < (HEAP32[$1 + 80 >> 2] + 1 | 0)) {
        HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 80 >> 2] + 1
       }
       break block2;
      }
      HEAP32[$1 + 84 >> 2] = HEAP32[$1 + 84 >> 2] + 1;
      if (HEAP32[$1 + 84 >> 2] > HEAP32[$1 + 76 >> 2]) {
       HEAP32[$1 + 76 >> 2] = HEAP32[$1 + 84 >> 2]
      }
     }
     continue;
    }
    break;
   };
   if (!(!HEAP32[$1 + 72 >> 2] | HEAPU8[$1 + 31 | 0] != 10)) {
    HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 72 >> 2] - 1
   }
   jsvStringIteratorFree_1830($1 + 32 | 0);
   HEAP32[$1 + 24 >> 2] = jsvNewObject();
   if (!HEAP32[$1 + 24 >> 2]) {
    HEAP32[$1 + 92 >> 2] = 0;
    break block;
   }
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 24 >> 2], 136165, jsvNewFromInteger(HEAP32[$1 + 76 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 24 >> 2], 124928, jsvNewFromInteger(HEAP32[$1 + 72 >> 2]));
   HEAP32[$1 + 20 >> 2] = Math_imul(HEAP32[$1 + 76 >> 2], HEAP32[$1 + 72 >> 2]) + 7 >> 3;
   HEAP32[$1 + 16 >> 2] = jsvNewStringOfLength(HEAP32[$1 + 20 >> 2], 0);
   if (!HEAP32[$1 + 16 >> 2]) {
    jsvUnLock(HEAP32[$1 + 24 >> 2]);
    HEAP32[$1 + 92 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 84 >> 2] = 0;
   HEAP32[$1 + 80 >> 2] = 0;
   jsvStringIteratorNew($1 + 32 | 0, HEAP32[$1 + 88 >> 2], HEAP32[$1 + 68 >> 2]);
   while (1) {
    if (jsvStringIteratorHasChar_1840($1 + 32 | 0) & 1) {
     HEAP8[$1 + 15 | 0] = jsvStringIteratorGetCharAndNext($1 + 32 | 0);
     block4 : {
      if (HEAPU8[$1 + 15 | 0] == 10) {
       HEAP32[$1 + 84 >> 2] = 0;
       HEAP32[$1 + 80 >> 2] = HEAP32[$1 + 80 >> 2] + 1;
       break block4;
      }
      if (!(HEAPU8[$1 + 15 | 0] == 32 | HEAPU8[$1 + 15 | 0] == 46)) {
       HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 84 >> 2] + Math_imul(HEAP32[$1 + 80 >> 2], HEAP32[$1 + 76 >> 2]);
       jsvSetCharInString(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 8 >> 2] >>> 3 | 0, 128 >> (HEAP32[$1 + 8 >> 2] & 7) << 24 >> 24, 1);
      }
      HEAP32[$1 + 84 >> 2] = HEAP32[$1 + 84 >> 2] + 1;
     }
     continue;
    }
    break;
   };
   jsvStringIteratorFree_1830($1 + 32 | 0);
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 24 >> 2], 128153, HEAP32[$1 + 16 >> 2]);
   HEAP32[$1 + 92 >> 2] = HEAP32[$1 + 24 >> 2];
  }
  __stack_pointer = $1 + 96 | 0;
  return HEAP32[$1 + 92 >> 2];
 }
 
 function jswrap_graphics_getWidthOrHeight($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 96 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 88 >> 2] = $0;
  HEAP8[$2 + 87 | 0] = $1;
  block : {
   if (!(graphicsGetFromVar($2 + 15 | 0, HEAP32[$2 + 88 >> 2]) & 1)) {
    HEAP32[$2 + 92 >> 2] = 0;
    break block;
   }
   block1 : {
    if (HEAP8[$2 + 87 | 0] & 1) {
     $0 = graphicsGetHeight($2 + 15 | 0) & 65535;
     break block1;
    }
    $0 = graphicsGetWidth($2 + 15 | 0) & 65535;
   }
   HEAP32[$2 + 92 >> 2] = $0;
  }
  __stack_pointer = $2 + 96 | 0;
  return HEAP32[$2 + 92 >> 2];
 }
 
 function jswrap_graphics_getBPP($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 80 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 72 >> 2] = $0;
  block : {
   if (!(graphicsGetFromVar($1, HEAP32[$1 + 72 >> 2]) & 1)) {
    HEAP32[$1 + 76 >> 2] = 0;
    break block;
   }
   if ((HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24)) == 6) {
    HEAP32[$1 + 76 >> 2] = 3;
    break block;
   }
   HEAP32[$1 + 76 >> 2] = HEAPU8[$1 + 16 | 0];
  }
  __stack_pointer = $1 + 80 | 0;
  return HEAP32[$1 + 76 >> 2];
 }
 
 function jswrap_graphics_reset($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 80 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 72 >> 2] = $0;
  block : {
   if (!(graphicsGetFromVar($1, HEAP32[$1 + 72 >> 2]) & 1)) {
    HEAP32[$1 + 76 >> 2] = 0;
    break block;
   }
   jsvUnLock(jswrap_graphics_setFontSizeX(HEAP32[$1 + 72 >> 2], 8193, 0));
   graphicsStructResetState($1);
   graphicsSetVar($1);
   HEAP32[$1 + 76 >> 2] = jswrap_graphics_setFontSizeX(HEAP32[$1 + 72 >> 2], 8193, 0);
  }
  __stack_pointer = $1 + 80 | 0;
  return HEAP32[$1 + 76 >> 2];
 }
 
 function jswrap_graphics_setFontSizeX($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 96 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 88 >> 2] = $0;
  HEAP32[$3 + 84 >> 2] = $1;
  HEAP8[$3 + 83 | 0] = $2;
  block : {
   if (!(graphicsGetFromVar($3 + 11 | 0, HEAP32[$3 + 88 >> 2]) & 1)) {
    HEAP32[$3 + 92 >> 2] = 0;
    break block;
   }
   if (HEAP8[$3 + 83 | 0] & 1) {
    if (HEAP32[$3 + 84 >> 2] <= 0) {
     HEAP32[$3 + 84 >> 2] = 1
    }
    if (HEAP32[$3 + 84 >> 2] > 8191) {
     HEAP32[$3 + 84 >> 2] = 8191
    }
   }
   if (!(!((HEAPU8[$3 + 36 | 0] | HEAPU8[$3 + 37 | 0] << 8) & 32768) | HEAP32[$3 + 84 >> 2] & 32768)) {
    jsvObjectRemoveChild(HEAP32[$3 + 88 >> 2], 141321);
    jsvObjectRemoveChild(HEAP32[$3 + 88 >> 2], 140714);
    jsvObjectRemoveChild(HEAP32[$3 + 88 >> 2], 141200);
    jsvObjectRemoveChild(HEAP32[$3 + 88 >> 2], 142145);
   }
   $0 = HEAP32[$3 + 84 >> 2];
   HEAP8[$3 + 36 | 0] = $0;
   HEAP8[$3 + 37 | 0] = $0 >>> 8;
   graphicsSetVar($3 + 11 | 0);
   HEAP32[$3 + 92 >> 2] = jsvLockAgain(HEAP32[$3 + 88 >> 2]);
  }
  __stack_pointer = $3 + 96 | 0;
  return HEAP32[$3 + 92 >> 2];
 }
 
 function jswrap_graphics_clear($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 96 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 88 >> 2] = $0;
  HEAP8[$2 + 87 | 0] = $1;
  if (HEAP8[$2 + 87 | 0] & 1) {
   jsvUnLock(jswrap_graphics_reset(HEAP32[$2 + 88 >> 2]))
  }
  block : {
   if (!(graphicsGetFromVar($2 + 15 | 0, HEAP32[$2 + 88 >> 2]) & 1)) {
    HEAP32[$2 + 92 >> 2] = 0;
    break block;
   }
   graphicsClear($2 + 15 | 0);
   graphicsSetVar($2 + 15 | 0);
   HEAP32[$2 + 92 >> 2] = jsvLockAgain(HEAP32[$2 + 88 >> 2]);
  }
  __stack_pointer = $2 + 96 | 0;
  return HEAP32[$2 + 92 >> 2];
 }
 
 function _jswrap_graphics_getRect($0, $1, $2, $3, $4, $5) {
  var $6 = 0;
  $6 = __stack_pointer - 144 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 140 >> 2] = $0;
  HEAP32[$6 + 136 >> 2] = $1;
  HEAP32[$6 + 132 >> 2] = $2;
  HEAP32[$6 + 128 >> 2] = $3;
  HEAP32[$6 + 124 >> 2] = $4;
  HEAP32[$6 + 120 >> 2] = $5;
  HEAP32[HEAP32[$6 + 120 >> 2] >> 2] = 0;
  block : {
   if (jsvIsObject(HEAP32[$6 + 140 >> 2]) & 1) {
    HEAP32[$6 + 116 >> 2] = -1;
    HEAP32[$6 + 112 >> 2] = -1;
    HEAP32[$6 >> 2] = 124025;
    HEAP16[$6 + 4 >> 1] = 10;
    HEAP16[$6 + 6 >> 1] = 0;
    HEAP32[$6 + 8 >> 2] = HEAP32[$6 + 136 >> 2];
    HEAP32[$6 + 12 >> 2] = 123896;
    HEAP16[$6 + 16 >> 1] = 10;
    HEAP16[$6 + 18 >> 1] = 0;
    HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 132 >> 2];
    HEAP32[$6 + 24 >> 2] = 142142;
    HEAP16[$6 + 28 >> 1] = 10;
    HEAP16[$6 + 30 >> 1] = 0;
    HEAP32[$6 + 32 >> 2] = HEAP32[$6 + 136 >> 2];
    HEAP32[$6 + 36 >> 2] = 142139;
    HEAP16[$6 + 40 >> 1] = 10;
    HEAP16[$6 + 42 >> 1] = 0;
    HEAP32[$6 + 44 >> 2] = HEAP32[$6 + 132 >> 2];
    HEAP32[$6 + 48 >> 2] = 142064;
    HEAP16[$6 + 52 >> 1] = 10;
    HEAP16[$6 + 54 >> 1] = 0;
    HEAP32[$6 + 56 >> 2] = HEAP32[$6 + 128 >> 2];
    HEAP32[$6 + 60 >> 2] = 142061;
    HEAP16[$6 + 64 >> 1] = 10;
    HEAP16[$6 + 66 >> 1] = 0;
    HEAP32[$6 + 68 >> 2] = HEAP32[$6 + 124 >> 2];
    HEAP32[$6 + 72 >> 2] = 124222;
    HEAP16[$6 + 76 >> 1] = 10;
    HEAP16[$6 + 78 >> 1] = 0;
    HEAP32[$6 + 80 >> 2] = $6 + 116;
    HEAP32[$6 + 84 >> 2] = 136443;
    HEAP16[$6 + 88 >> 1] = 10;
    HEAP16[$6 + 90 >> 1] = 0;
    HEAP32[$6 + 92 >> 2] = $6 + 112;
    HEAP32[$6 + 96 >> 2] = 128396;
    HEAP16[$6 + 100 >> 1] = 10;
    HEAP16[$6 + 102 >> 1] = 0;
    HEAP32[$6 + 104 >> 2] = HEAP32[$6 + 120 >> 2];
    jsvReadConfigObject(HEAP32[$6 + 140 >> 2], $6, 9);
    if (HEAP32[$6 + 116 >> 2] >= 0) {
     HEAP32[HEAP32[$6 + 128 >> 2] >> 2] = HEAP32[HEAP32[$6 + 136 >> 2] >> 2] + HEAP32[$6 + 116 >> 2]
    }
    if (HEAP32[$6 + 112 >> 2] >= 0) {
     HEAP32[HEAP32[$6 + 124 >> 2] >> 2] = HEAP32[HEAP32[$6 + 132 >> 2] >> 2] + HEAP32[$6 + 112 >> 2]
    }
    break block;
   }
   $0 = jsvGetInteger(HEAP32[$6 + 140 >> 2]);
   HEAP32[HEAP32[$6 + 136 >> 2] >> 2] = $0;
  }
  __stack_pointer = $6 + 144 | 0;
 }
 
 function _jswrap_graphics_fillRect_col($0, $1, $2, $3, $4, $5) {
  var $6 = 0;
  $6 = __stack_pointer - 160 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 152 >> 2] = $0;
  HEAP32[$6 + 148 >> 2] = $1;
  HEAP32[$6 + 144 >> 2] = $2;
  HEAP32[$6 + 140 >> 2] = $3;
  HEAP32[$6 + 136 >> 2] = $4;
  HEAP8[$6 + 135 | 0] = $5;
  _jswrap_graphics_getRect(HEAP32[$6 + 148 >> 2], $6 + 128 | 0, $6 + 144 | 0, $6 + 140 | 0, $6 + 136 | 0, $6 + 124 | 0);
  block : {
   if (!(graphicsGetFromVar($6 + 52 | 0, HEAP32[$6 + 152 >> 2]) & 1)) {
    HEAP32[$6 + 156 >> 2] = 0;
    break block;
   }
   if (HEAP8[$6 + 135 | 0] & 1) {
    $0 = HEAPU8[$6 + 69 | 0] | HEAPU8[$6 + 70 | 0] << 8 | (HEAPU8[$6 + 71 | 0] << 16 | HEAPU8[$6 + 72 | 0] << 24)
   } else {
    $0 = HEAPU8[$6 + 73 | 0] | HEAPU8[$6 + 74 | 0] << 8 | (HEAPU8[$6 + 75 | 0] << 16 | HEAPU8[$6 + 76 | 0] << 24)
   }
   HEAP32[$6 + 48 >> 2] = $0;
   block2 : {
    if (HEAP32[$6 + 124 >> 2] > 0) {
     graphicsToDeviceCoordinates($6 + 52 | 0, $6 + 128 | 0, $6 + 144 | 0);
     graphicsToDeviceCoordinates($6 + 52 | 0, $6 + 140 | 0, $6 + 136 | 0);
     if (HEAP32[$6 + 128 >> 2] > HEAP32[$6 + 140 >> 2]) {
      HEAP32[$6 + 44 >> 2] = HEAP32[$6 + 128 >> 2];
      HEAP32[$6 + 128 >> 2] = HEAP32[$6 + 140 >> 2];
      HEAP32[$6 + 140 >> 2] = HEAP32[$6 + 44 >> 2];
     }
     if (HEAP32[$6 + 144 >> 2] > HEAP32[$6 + 136 >> 2]) {
      HEAP32[$6 + 40 >> 2] = HEAP32[$6 + 144 >> 2];
      HEAP32[$6 + 144 >> 2] = HEAP32[$6 + 136 >> 2];
      HEAP32[$6 + 136 >> 2] = HEAP32[$6 + 40 >> 2];
     }
     HEAP32[$6 + 44 >> 2] = (HEAP32[$6 + 140 >> 2] - HEAP32[$6 + 128 >> 2] | 0) / 2;
     HEAP32[$6 + 40 >> 2] = (HEAP32[$6 + 136 >> 2] - HEAP32[$6 + 144 >> 2] | 0) / 2;
     if (HEAP32[$6 + 44 >> 2] < HEAP32[$6 + 124 >> 2]) {
      HEAP32[$6 + 124 >> 2] = HEAP32[$6 + 44 >> 2]
     }
     if (HEAP32[$6 + 40 >> 2] < HEAP32[$6 + 124 >> 2]) {
      HEAP32[$6 + 124 >> 2] = HEAP32[$6 + 40 >> 2]
     }
     HEAP32[$6 + 36 >> 2] = HEAP32[$6 + 128 >> 2] + HEAP32[$6 + 124 >> 2];
     HEAP32[$6 + 32 >> 2] = HEAP32[$6 + 140 >> 2] - HEAP32[$6 + 124 >> 2];
     HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 144 >> 2] + HEAP32[$6 + 124 >> 2];
     HEAP32[$6 + 24 >> 2] = HEAP32[$6 + 136 >> 2] - HEAP32[$6 + 124 >> 2];
     graphicsFillRectDevice($6 + 52 | 0, HEAP32[$6 + 128 >> 2], HEAP32[$6 + 28 >> 2], HEAP32[$6 + 140 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 48 >> 2]);
     HEAP32[$6 + 20 >> 2] = 0;
     HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 124 >> 2];
     HEAP32[$6 + 12 >> 2] = Math_imul(HEAP32[$6 + 124 >> 2], HEAP32[$6 + 124 >> 2]);
     HEAP32[$6 + 8 >> 2] = HEAP32[$6 + 12 >> 2] - Math_imul(HEAP32[$6 + 12 >> 2], (HEAP32[$6 + 124 >> 2] << 1) - 1 | 0);
     HEAP8[$6 + 3 | 0] = 0;
     while (1) {
      HEAP8[$6 + 3 | 0] = 0;
      HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 8 >> 2] << 1;
      if (HEAP32[$6 + 4 >> 2] < (Math_imul(HEAP32[$6 + 12 >> 2], (HEAP32[$6 + 20 >> 2] << 1) + 1 | 0) | 0)) {
       HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 20 >> 2] + 1;
       HEAP32[$6 + 8 >> 2] = HEAP32[$6 + 8 >> 2] + Math_imul(HEAP32[$6 + 12 >> 2], (HEAP32[$6 + 20 >> 2] << 1) + 1 | 0);
       HEAP8[$6 + 3 | 0] = 1;
      }
      if (HEAP32[$6 + 4 >> 2] > (Math_imul(HEAP32[$6 + 12 >> 2], 1 - (HEAP32[$6 + 16 >> 2] << 1) | 0) | 0)) {
       graphicsFillRectDevice($6 + 52 | 0, HEAP32[$6 + 36 >> 2] - HEAP32[$6 + 20 >> 2] | 0, HEAP32[$6 + 24 >> 2] + HEAP32[$6 + 16 >> 2] | 0, HEAP32[$6 + 32 >> 2] + HEAP32[$6 + 20 >> 2] | 0, HEAP32[$6 + 24 >> 2] + HEAP32[$6 + 16 >> 2] | 0, HEAP32[$6 + 48 >> 2]);
       graphicsFillRectDevice($6 + 52 | 0, HEAP32[$6 + 36 >> 2] - HEAP32[$6 + 20 >> 2] | 0, HEAP32[$6 + 28 >> 2] - HEAP32[$6 + 16 >> 2] | 0, HEAP32[$6 + 32 >> 2] + HEAP32[$6 + 20 >> 2] | 0, HEAP32[$6 + 28 >> 2] - HEAP32[$6 + 16 >> 2] | 0, HEAP32[$6 + 48 >> 2]);
       HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 16 >> 2] - 1;
       HEAP32[$6 + 8 >> 2] = HEAP32[$6 + 8 >> 2] - Math_imul(HEAP32[$6 + 12 >> 2], (HEAP32[$6 + 16 >> 2] << 1) - 1 | 0);
       HEAP8[$6 + 3 | 0] = 1;
      }
      $0 = 0;
      $0 = HEAP8[$6 + 3 | 0] & 1 ? HEAP32[$6 + 16 >> 2] >= 0 : $0;
      if ($0) {
       continue
      }
      break;
     };
     break block2;
    }
    graphicsFillRect($6 + 52 | 0, HEAP32[$6 + 128 >> 2], HEAP32[$6 + 144 >> 2], HEAP32[$6 + 140 >> 2], HEAP32[$6 + 136 >> 2], HEAP32[$6 + 48 >> 2]);
   }
   graphicsSetVar($6 + 52 | 0);
   HEAP32[$6 + 156 >> 2] = jsvLockAgain(HEAP32[$6 + 152 >> 2]);
  }
  __stack_pointer = $6 + 160 | 0;
  return HEAP32[$6 + 156 >> 2];
 }
 
 function jswrap_graphics_fillRect($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 28 >> 2] = $0;
  HEAP32[$5 + 24 >> 2] = $1;
  HEAP32[$5 + 20 >> 2] = $2;
  HEAP32[$5 + 16 >> 2] = $3;
  HEAP32[$5 + 12 >> 2] = $4;
  $0 = _jswrap_graphics_fillRect_col(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2], 1);
  __stack_pointer = $5 + 32 | 0;
  return $0 | 0;
 }
 
 function jswrap_graphics_clearRect($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 28 >> 2] = $0;
  HEAP32[$5 + 24 >> 2] = $1;
  HEAP32[$5 + 20 >> 2] = $2;
  HEAP32[$5 + 16 >> 2] = $3;
  HEAP32[$5 + 12 >> 2] = $4;
  $0 = _jswrap_graphics_fillRect_col(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2], 0);
  __stack_pointer = $5 + 32 | 0;
  return $0 | 0;
 }
 
 function jswrap_graphics_drawRect($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 112 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 104 >> 2] = $0;
  HEAP32[$5 + 100 >> 2] = $1;
  HEAP32[$5 + 96 >> 2] = $2;
  HEAP32[$5 + 92 >> 2] = $3;
  HEAP32[$5 + 88 >> 2] = $4;
  _jswrap_graphics_getRect(HEAP32[$5 + 100 >> 2], $5 + 84 | 0, $5 + 96 | 0, $5 + 92 | 0, $5 + 88 | 0, $5 + 80 | 0);
  block : {
   if (!(graphicsGetFromVar($5 + 8 | 0, HEAP32[$5 + 104 >> 2]) & 1)) {
    HEAP32[$5 + 108 >> 2] = 0;
    break block;
   }
   graphicsDrawRect($5 + 8 | 0, HEAP32[$5 + 84 >> 2], HEAP32[$5 + 96 >> 2], HEAP32[$5 + 92 >> 2], HEAP32[$5 + 88 >> 2]);
   graphicsSetVar($5 + 8 | 0);
   HEAP32[$5 + 108 >> 2] = jsvLockAgain(HEAP32[$5 + 104 >> 2]);
  }
  __stack_pointer = $5 + 112 | 0;
  return HEAP32[$5 + 108 >> 2];
 }
 
 function jswrap_graphics_fillCircle($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
  $0 = jswrap_graphics_fillEllipse(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2] - HEAP32[$4 >> 2] | 0, HEAP32[$4 + 4 >> 2] - HEAP32[$4 >> 2] | 0, HEAP32[$4 + 8 >> 2] + HEAP32[$4 >> 2] | 0, HEAP32[$4 + 4 >> 2] + HEAP32[$4 >> 2] | 0);
  __stack_pointer = $4 + 16 | 0;
  return $0 | 0;
 }
 
 function jswrap_graphics_fillEllipse($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 96 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 88 >> 2] = $0;
  HEAP32[$5 + 84 >> 2] = $1;
  HEAP32[$5 + 80 >> 2] = $2;
  HEAP32[$5 + 76 >> 2] = $3;
  HEAP32[$5 + 72 >> 2] = $4;
  block : {
   if (!(graphicsGetFromVar($5, HEAP32[$5 + 88 >> 2]) & 1)) {
    HEAP32[$5 + 92 >> 2] = 0;
    break block;
   }
   graphicsFillEllipse($5, HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2], HEAP32[$5 + 72 >> 2]);
   graphicsSetVar($5);
   HEAP32[$5 + 92 >> 2] = jsvLockAgain(HEAP32[$5 + 88 >> 2]);
  }
  __stack_pointer = $5 + 96 | 0;
  return HEAP32[$5 + 92 >> 2];
 }
 
 function jswrap_graphics_drawCircle($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
  $0 = jswrap_graphics_drawEllipse(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2] - HEAP32[$4 >> 2] | 0, HEAP32[$4 + 4 >> 2] - HEAP32[$4 >> 2] | 0, HEAP32[$4 + 8 >> 2] + HEAP32[$4 >> 2] | 0, HEAP32[$4 + 4 >> 2] + HEAP32[$4 >> 2] | 0);
  __stack_pointer = $4 + 16 | 0;
  return $0 | 0;
 }
 
 function jswrap_graphics_drawEllipse($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 96 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 88 >> 2] = $0;
  HEAP32[$5 + 84 >> 2] = $1;
  HEAP32[$5 + 80 >> 2] = $2;
  HEAP32[$5 + 76 >> 2] = $3;
  HEAP32[$5 + 72 >> 2] = $4;
  block : {
   if (!(graphicsGetFromVar($5, HEAP32[$5 + 88 >> 2]) & 1)) {
    HEAP32[$5 + 92 >> 2] = 0;
    break block;
   }
   graphicsDrawEllipse($5, HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2], HEAP32[$5 + 72 >> 2]);
   graphicsSetVar($5);
   HEAP32[$5 + 92 >> 2] = jsvLockAgain(HEAP32[$5 + 88 >> 2]);
  }
  __stack_pointer = $5 + 96 | 0;
  return HEAP32[$5 + 92 >> 2];
 }
 
 function jswrap_graphics_drawCircleAA($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 96 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 88 >> 2] = $0;
  HEAP32[$4 + 84 >> 2] = $1;
  HEAP32[$4 + 80 >> 2] = $2;
  HEAP32[$4 + 76 >> 2] = $3;
  block : {
   if (!(graphicsGetFromVar($4 + 4 | 0, HEAP32[$4 + 88 >> 2]) & 1)) {
    HEAP32[$4 + 92 >> 2] = 0;
    break block;
   }
   graphicsDrawCircleAA($4 + 4 | 0, HEAP32[$4 + 84 >> 2], HEAP32[$4 + 80 >> 2], HEAP32[$4 + 76 >> 2]);
   graphicsSetVar($4 + 4 | 0);
   HEAP32[$4 + 92 >> 2] = jsvLockAgain(HEAP32[$4 + 88 >> 2]);
  }
  __stack_pointer = $4 + 96 | 0;
  return HEAP32[$4 + 92 >> 2];
 }
 
 function jswrap_graphics_getPixel($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 96 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 88 >> 2] = $0;
  HEAP32[$3 + 84 >> 2] = $1;
  HEAP32[$3 + 80 >> 2] = $2;
  block : {
   if (!(graphicsGetFromVar($3 + 8 | 0, HEAP32[$3 + 88 >> 2]) & 1)) {
    HEAP32[$3 + 92 >> 2] = 0;
    break block;
   }
   HEAP32[$3 + 92 >> 2] = graphicsGetPixel($3 + 8 | 0, HEAP32[$3 + 84 >> 2], HEAP32[$3 + 80 >> 2]);
  }
  __stack_pointer = $3 + 96 | 0;
  return HEAP32[$3 + 92 >> 2];
 }
 
 function jswrap_graphics_setPixel($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 96 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 88 >> 2] = $0;
  HEAP32[$4 + 84 >> 2] = $1;
  HEAP32[$4 + 80 >> 2] = $2;
  HEAP32[$4 + 76 >> 2] = $3;
  block : {
   if (!(graphicsGetFromVar($4 + 4 | 0, HEAP32[$4 + 88 >> 2]) & 1)) {
    HEAP32[$4 + 92 >> 2] = 0;
    break block;
   }
   HEAP32[$4 >> 2] = HEAPU8[$4 + 21 | 0] | HEAPU8[$4 + 22 | 0] << 8 | (HEAPU8[$4 + 23 | 0] << 16 | HEAPU8[$4 + 24 | 0] << 24);
   if (!(jsvIsUndefined(HEAP32[$4 + 76 >> 2]) & 1)) {
    HEAP32[$4 >> 2] = jswrap_graphics_toColor(HEAP32[$4 + 88 >> 2], HEAP32[$4 + 76 >> 2], 0, 0)
   }
   graphicsSetPixel($4 + 4 | 0, HEAP32[$4 + 84 >> 2], HEAP32[$4 + 80 >> 2], HEAP32[$4 >> 2]);
   $0 = HEAP32[$4 + 84 >> 2];
   HEAP8[$4 + 31 | 0] = $0;
   HEAP8[$4 + 32 | 0] = $0 >>> 8;
   $0 = HEAP32[$4 + 80 >> 2];
   HEAP8[$4 + 33 | 0] = $0;
   HEAP8[$4 + 34 | 0] = $0 >>> 8;
   graphicsSetVar($4 + 4 | 0);
   HEAP32[$4 + 92 >> 2] = jsvLockAgain(HEAP32[$4 + 88 >> 2]);
  }
  __stack_pointer = $4 + 96 | 0;
  return HEAP32[$4 + 92 >> 2];
 }
 
 function jswrap_graphics_toColor($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0.0;
  $4 = __stack_pointer - 288 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 280 >> 2] = $0;
  HEAP32[$4 + 276 >> 2] = $1;
  HEAP32[$4 + 272 >> 2] = $2;
  HEAP32[$4 + 268 >> 2] = $3;
  block : {
   if (!(graphicsGetFromVar($4 + 196 | 0, HEAP32[$4 + 280 >> 2]) & 1)) {
    HEAP32[$4 + 284 >> 2] = 0;
    break block;
   }
   HEAP32[$4 + 192 >> 2] = 0;
   block4 : {
    if (jsvIsString(HEAP32[$4 + 276 >> 2]) & 1) {
     $1 = $4 + 159 | 0;
     HEAP8[$1 | 0] = 0;
     HEAP8[$1 + 1 | 0] = 0;
     HEAP8[$1 + 2 | 0] = 0;
     HEAP8[$1 + 3 | 0] = 0;
     HEAP8[$1 + 4 | 0] = 0;
     HEAP8[$1 + 5 | 0] = 0;
     HEAP8[$1 + 6 | 0] = 0;
     HEAP8[$1 + 7 | 0] = 0;
     HEAP8[$1 + 8 | 0] = 0;
     jsvGetString(HEAP32[$4 + 276 >> 2], $4 + 159 | 0, 9);
     block1 : {
      if (!HEAPU8[$4 + 163 | 0]) {
       HEAPF64[$4 + 184 >> 3] = +(chtod(HEAP8[$4 + 160 | 0] << 24 >> 24) | 0) / 15.0;
       HEAPF64[$4 + 176 >> 3] = +(chtod(HEAP8[$4 + 161 | 0] << 24 >> 24) | 0) / 15.0;
       HEAPF64[$4 + 168 >> 3] = +(chtod(HEAP8[$4 + 162 | 0] << 24 >> 24) | 0) / 15.0;
       break block1;
      }
      HEAPF64[$4 + 184 >> 3] = +(hexToByte(HEAP8[$4 + 160 | 0] << 24 >> 24, HEAP8[$4 + 161 | 0] << 24 >> 24) | 0) / 255.0;
      HEAPF64[$4 + 176 >> 3] = +(hexToByte(HEAP8[$4 + 162 | 0] << 24 >> 24, HEAP8[$4 + 163 | 0] << 24 >> 24) | 0) / 255.0;
      HEAPF64[$4 + 168 >> 3] = +(hexToByte(HEAP8[$4 + 164 | 0] << 24 >> 24, HEAP8[$4 + 165 | 0] << 24 >> 24) | 0) / 255.0;
     }
     block3 : {
      if (!(HEAPF64[$4 + 184 >> 3] < 0.0 | HEAPF64[$4 + 176 >> 3] < 0.0 | HEAPF64[$4 + 168 >> 3] < 0.0)) {
       if (!HEAPU8[$4 + 166 | 0]) {
        break block3
       }
      }
      jsExceptionHere(1, 146533, 0);
      HEAP32[$4 + 284 >> 2] = 0;
      break block;
     }
     break block4;
    }
    HEAPF64[$4 + 184 >> 3] = jsvGetFloat(HEAP32[$4 + 276 >> 2]);
    HEAPF64[$4 + 176 >> 3] = jsvGetFloat(HEAP32[$4 + 272 >> 2]);
    HEAPF64[$4 + 168 >> 3] = jsvGetFloat(HEAP32[$4 + 268 >> 2]);
   }
   $1 = __DOUBLE_BITS_1867(HEAPF64[$4 + 184 >> 3]);
   $0 = $1;
   $1 = i64toi32_i32$HIGH_BITS;
   $1 = $1 & 2147483647;
   block16 : {
    block5 : {
     if (($1 | 0) == 2146435072 | $1 >>> 0 > 2146435072) {
      break block5
     }
     $1 = __DOUBLE_BITS_1867(HEAPF64[$4 + 176 >> 3]);
     $0 = $1;
     $1 = i64toi32_i32$HIGH_BITS;
     $1 = $1 & 2147483647;
     if (($1 | 0) == 2146435072 | $1 >>> 0 > 2146435072) {
      break block5
     }
     $1 = __DOUBLE_BITS_1867(HEAPF64[$4 + 168 >> 3]);
     $0 = $1;
     $1 = i64toi32_i32$HIGH_BITS;
     $1 = $1 & 2147483647;
     if (($1 | 0) == 2146435072 | $1 >>> 0 > 2146435072) {
      break block5
     }
     $5 = HEAPF64[$4 + 184 >> 3] * 256.0;
     if (Math_abs($5) < 2147483647.0) {
      $0 = ~~$5
     } else {
      $0 = -2147483648
     }
     HEAP32[$4 + 152 >> 2] = $0;
     $5 = HEAPF64[$4 + 176 >> 3] * 256.0;
     if (Math_abs($5) < 2147483647.0) {
      $0 = ~~$5
     } else {
      $0 = -2147483648
     }
     HEAP32[$4 + 148 >> 2] = $0;
     $5 = HEAPF64[$4 + 168 >> 3] * 256.0;
     if (Math_abs($5) < 2147483647.0) {
      $0 = ~~$5
     } else {
      $0 = -2147483648
     }
     HEAP32[$4 + 144 >> 2] = $0;
     if (HEAP32[$4 + 152 >> 2] > 255) {
      HEAP32[$4 + 152 >> 2] = 255
     }
     if (HEAP32[$4 + 148 >> 2] > 255) {
      HEAP32[$4 + 148 >> 2] = 255
     }
     if (HEAP32[$4 + 144 >> 2] > 255) {
      HEAP32[$4 + 144 >> 2] = 255
     }
     if (HEAP32[$4 + 152 >> 2] < 0) {
      HEAP32[$4 + 152 >> 2] = 0
     }
     if (HEAP32[$4 + 148 >> 2] < 0) {
      HEAP32[$4 + 148 >> 2] = 0
     }
     if (HEAP32[$4 + 144 >> 2] < 0) {
      HEAP32[$4 + 144 >> 2] = 0
     }
     HEAP32[$4 + 140 >> 2] = (HEAPU8[$4 + 204 | 0] | HEAPU8[$4 + 205 | 0] << 8 | (HEAPU8[$4 + 206 | 0] << 16 | HEAPU8[$4 + 207 | 0] << 24)) & 896;
     if (HEAP32[$4 + 140 >> 2]) {
      HEAP32[$4 + 136 >> 2] = HEAP32[$4 + 152 >> 2];
      HEAP32[$4 + 132 >> 2] = HEAP32[$4 + 148 >> 2];
      HEAP32[$4 + 128 >> 2] = HEAP32[$4 + 144 >> 2];
      block10 : {
       block9 : {
        block8 : {
         block7 : {
          block6 : {
           $0 = HEAP32[$4 + 140 >> 2];
           if (($0 | 0) != 128) {
            if (($0 | 0) == 256) {
             break block6
            }
            if (($0 | 0) == 384) {
             break block7
            }
            if (($0 | 0) == 512) {
             break block8
            }
            if (($0 | 0) == 640) {
             break block9
            }
            break block10;
           }
           HEAP32[$4 + 152 >> 2] = HEAP32[$4 + 128 >> 2];
           HEAP32[$4 + 148 >> 2] = HEAP32[$4 + 136 >> 2];
           HEAP32[$4 + 144 >> 2] = HEAP32[$4 + 132 >> 2];
           break block10;
          }
          HEAP32[$4 + 152 >> 2] = HEAP32[$4 + 128 >> 2];
          HEAP32[$4 + 144 >> 2] = HEAP32[$4 + 136 >> 2];
          break block10;
         }
         HEAP32[$4 + 152 >> 2] = HEAP32[$4 + 132 >> 2];
         HEAP32[$4 + 148 >> 2] = HEAP32[$4 + 128 >> 2];
         HEAP32[$4 + 144 >> 2] = HEAP32[$4 + 136 >> 2];
         break block10;
        }
        HEAP32[$4 + 152 >> 2] = HEAP32[$4 + 132 >> 2];
        HEAP32[$4 + 148 >> 2] = HEAP32[$4 + 136 >> 2];
        break block10;
       }
       HEAP32[$4 + 148 >> 2] = HEAP32[$4 + 128 >> 2];
       HEAP32[$4 + 144 >> 2] = HEAP32[$4 + 132 >> 2];
      }
     }
     block11 : {
      if (HEAPU8[$4 + 212 | 0] == 16) {
       HEAP32[$4 + 192 >> 2] = HEAP32[$4 + 148 >> 2] >> 2 << 5 | HEAP32[$4 + 144 >> 2] >> 3 | HEAP32[$4 + 152 >> 2] >> 3 << 11;
       break block11;
      }
      block12 : {
       if (HEAPU8[$4 + 212 | 0] == 32) {
        HEAP32[$4 + 192 >> 2] = HEAP32[$4 + 144 >> 2] | HEAP32[$4 + 148 >> 2] << 8 | HEAP32[$4 + 152 >> 2] << 16 | -16777216;
        break block12;
       }
       block13 : {
        if (HEAPU8[$4 + 212 | 0] == 24) {
         HEAP32[$4 + 192 >> 2] = HEAP32[$4 + 144 >> 2] | HEAP32[$4 + 148 >> 2] << 8 | HEAP32[$4 + 152 >> 2] << 16;
         break block13;
        }
        block14 : {
         if (HEAPU8[$4 + 212 | 0] == 4) {
          HEAP32[$4 + 124 >> 2] = 2147483647;
          HEAP32[$4 + 192 >> 2] = 0;
          HEAP32[$4 + 120 >> 2] = 0;
          while (1) {
           if (HEAPU32[$4 + 120 >> 2] < 16) {
            HEAP32[$4 + 116 >> 2] = HEAPU16[(HEAP32[$4 + 120 >> 2] << 1) + 189936 >> 1];
            HEAP32[$4 + 112 >> 2] = HEAP32[$4 + 116 >> 2] >> 8 & 248;
            HEAP32[$4 + 108 >> 2] = HEAP32[$4 + 116 >> 2] >> 3 & 252;
            HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 116 >> 2] << 3 & 248;
            HEAP32[$4 + 112 >> 2] = HEAP32[$4 + 112 >> 2] | HEAP32[$4 + 112 >> 2] >> 5;
            HEAP32[$4 + 108 >> 2] = HEAP32[$4 + 108 >> 2] | HEAP32[$4 + 104 >> 2] >> 6;
            HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 104 >> 2] | HEAP32[$4 + 104 >> 2] >> 5;
            HEAP32[$4 + 100 >> 2] = HEAP32[$4 + 112 >> 2] - HEAP32[$4 + 152 >> 2];
            HEAP32[$4 + 96 >> 2] = HEAP32[$4 + 108 >> 2] - HEAP32[$4 + 148 >> 2];
            HEAP32[$4 + 92 >> 2] = HEAP32[$4 + 104 >> 2] - HEAP32[$4 + 144 >> 2];
            HEAP32[$4 + 88 >> 2] = (Math_imul(HEAP32[$4 + 100 >> 2], HEAP32[$4 + 100 >> 2]) + Math_imul(HEAP32[$4 + 96 >> 2], HEAP32[$4 + 96 >> 2]) | 0) + Math_imul(HEAP32[$4 + 92 >> 2], HEAP32[$4 + 92 >> 2]);
            if (HEAP32[$4 + 88 >> 2] < HEAP32[$4 + 124 >> 2]) {
             HEAP32[$4 + 124 >> 2] = HEAP32[$4 + 88 >> 2];
             HEAP32[$4 + 192 >> 2] = HEAP32[$4 + 120 >> 2];
            }
            HEAP32[$4 + 120 >> 2] = HEAP32[$4 + 120 >> 2] + 1;
            continue;
           }
           break;
          };
          break block14;
         }
         block15 : {
          if (HEAPU8[$4 + 212 | 0] == 8) {
           HEAP32[$4 + 84 >> 2] = 2147483647;
           HEAP32[$4 + 192 >> 2] = 0;
           HEAP32[$4 + 80 >> 2] = 0;
           while (1) {
            if (HEAP32[$4 + 80 >> 2] < 255) {
             HEAP32[$4 + 76 >> 2] = HEAPU16[(HEAP32[$4 + 80 >> 2] << 1) + 189968 >> 1];
             HEAP32[$4 + 72 >> 2] = HEAP32[$4 + 76 >> 2] >> 8 & 248;
             HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 76 >> 2] >> 3 & 252;
             HEAP32[$4 + 64 >> 2] = HEAP32[$4 + 76 >> 2] << 3 & 248;
             HEAP32[$4 + 72 >> 2] = HEAP32[$4 + 72 >> 2] | HEAP32[$4 + 72 >> 2] >> 5;
             HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 68 >> 2] | HEAP32[$4 + 64 >> 2] >> 6;
             HEAP32[$4 + 64 >> 2] = HEAP32[$4 + 64 >> 2] | HEAP32[$4 + 64 >> 2] >> 5;
             HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 72 >> 2] - HEAP32[$4 + 152 >> 2];
             HEAP32[$4 + 56 >> 2] = HEAP32[$4 + 68 >> 2] - HEAP32[$4 + 148 >> 2];
             HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 64 >> 2] - HEAP32[$4 + 144 >> 2];
             HEAP32[$4 + 48 >> 2] = (Math_imul(HEAP32[$4 + 60 >> 2], HEAP32[$4 + 60 >> 2]) + Math_imul(HEAP32[$4 + 56 >> 2], HEAP32[$4 + 56 >> 2]) | 0) + Math_imul(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 52 >> 2]);
             if (HEAP32[$4 + 48 >> 2] < HEAP32[$4 + 84 >> 2]) {
              HEAP32[$4 + 84 >> 2] = HEAP32[$4 + 48 >> 2];
              HEAP32[$4 + 192 >> 2] = HEAP32[$4 + 80 >> 2];
             }
             HEAP32[$4 + 80 >> 2] = HEAP32[$4 + 80 >> 2] + 1;
             continue;
            }
            break;
           };
           break block15;
          }
          HEAP32[$4 + 192 >> 2] = (HEAP32[$4 + 144 >> 2] + (HEAP32[$4 + 152 >> 2] + HEAP32[$4 + 148 >> 2] | 0) | 0) >= 384 ? -1 : 0;
         }
        }
       }
      }
     }
     break block16;
    }
    HEAP32[$4 + 192 >> 2] = jsvGetInteger(HEAP32[$4 + 276 >> 2]) & (1 << HEAPU8[$4 + 212 | 0]) - 1;
   }
   HEAP32[$4 + 284 >> 2] = HEAP32[$4 + 192 >> 2];
  }
  __stack_pointer = $4 + 288 | 0;
  return HEAP32[$4 + 284 >> 2];
 }
 
 function __DOUBLE_BITS_1867($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAPF64[$1 + 8 >> 3] = $0;
  HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
  i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
  return HEAP32[$1 >> 2];
 }
 
 function jswrap_graphics_blendColor($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0.0;
  $4 = __stack_pointer - 112 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 104 >> 2] = $0;
  HEAP32[$4 + 100 >> 2] = $1;
  HEAP32[$4 + 96 >> 2] = $2;
  HEAP32[$4 + 92 >> 2] = $3;
  block : {
   if (!(graphicsGetFromVar($4 + 20 | 0, HEAP32[$4 + 104 >> 2]) & 1)) {
    HEAP32[$4 + 108 >> 2] = 0;
    break block;
   }
   HEAP32[$4 + 16 >> 2] = jswrap_graphics_toColor(HEAP32[$4 + 104 >> 2], HEAP32[$4 + 100 >> 2], 0, 0);
   HEAP32[$4 + 12 >> 2] = jswrap_graphics_toColor(HEAP32[$4 + 104 >> 2], HEAP32[$4 + 96 >> 2], 0, 0);
   $1 = $4 + 20 | 0;
   $2 = HEAP32[$4 + 12 >> 2];
   $3 = HEAP32[$4 + 16 >> 2];
   $5 = jsvGetFloat(HEAP32[$4 + 92 >> 2]) * 256.0;
   if (Math_abs($5) < 2147483647.0) {
    $0 = ~~$5
   } else {
    $0 = -2147483648
   }
   HEAP32[$4 + 108 >> 2] = graphicsBlendColor($1, $2, $3, $0);
  }
  __stack_pointer = $4 + 112 | 0;
  return HEAP32[$4 + 108 >> 2];
 }
 
 function jswrap_graphics_setColorX($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 112 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 104 >> 2] = $0;
  HEAP32[$5 + 100 >> 2] = $1;
  HEAP32[$5 + 96 >> 2] = $2;
  HEAP32[$5 + 92 >> 2] = $3;
  HEAP8[$5 + 91 | 0] = $4;
  block : {
   if (!(graphicsGetFromVar($5 + 19 | 0, HEAP32[$5 + 104 >> 2]) & 1)) {
    HEAP32[$5 + 108 >> 2] = 0;
    break block;
   }
   HEAP32[$5 + 12 >> 2] = jswrap_graphics_toColor(HEAP32[$5 + 104 >> 2], HEAP32[$5 + 100 >> 2], HEAP32[$5 + 96 >> 2], HEAP32[$5 + 92 >> 2]);
   block1 : {
    if (HEAP8[$5 + 91 | 0] & 1) {
     $0 = HEAP32[$5 + 12 >> 2];
     HEAP8[$5 + 36 | 0] = $0;
     HEAP8[$5 + 37 | 0] = $0 >>> 8;
     HEAP8[$5 + 38 | 0] = $0 >>> 16;
     HEAP8[$5 + 39 | 0] = $0 >>> 24;
     break block1;
    }
    $0 = HEAP32[$5 + 12 >> 2];
    HEAP8[$5 + 40 | 0] = $0;
    HEAP8[$5 + 41 | 0] = $0 >>> 8;
    HEAP8[$5 + 42 | 0] = $0 >>> 16;
    HEAP8[$5 + 43 | 0] = $0 >>> 24;
   }
   graphicsSetVar($5 + 19 | 0);
   HEAP32[$5 + 108 >> 2] = jsvLockAgain(HEAP32[$5 + 104 >> 2]);
  }
  __stack_pointer = $5 + 112 | 0;
  return HEAP32[$5 + 108 >> 2];
 }
 
 function jswrap_graphics_getColorX($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 96 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 88 >> 2] = $0;
  HEAP8[$2 + 87 | 0] = $1;
  block : {
   if (!(graphicsGetFromVar($2 + 15 | 0, HEAP32[$2 + 88 >> 2]) & 1)) {
    HEAP32[$2 + 92 >> 2] = 0;
    break block;
   }
   if (HEAP8[$2 + 87 | 0] & 1) {
    $0 = HEAPU8[$2 + 32 | 0] | HEAPU8[$2 + 33 | 0] << 8 | (HEAPU8[$2 + 34 | 0] << 16 | HEAPU8[$2 + 35 | 0] << 24)
   } else {
    $0 = HEAPU8[$2 + 36 | 0] | HEAPU8[$2 + 37 | 0] << 8 | (HEAPU8[$2 + 38 | 0] << 16 | HEAPU8[$2 + 39 | 0] << 24)
   }
   HEAP32[$2 + 92 >> 2] = $0 & (1 << HEAPU8[$2 + 31 | 0]) - 1;
  }
  __stack_pointer = $2 + 96 | 0;
  return HEAP32[$2 + 92 >> 2];
 }
 
 function jswrap_graphics_setClipRect($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 112 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 104 >> 2] = $0;
  HEAP32[$5 + 100 >> 2] = $1;
  HEAP32[$5 + 96 >> 2] = $2;
  HEAP32[$5 + 92 >> 2] = $3;
  HEAP32[$5 + 88 >> 2] = $4;
  block : {
   if (!(graphicsGetFromVar($5 + 16 | 0, HEAP32[$5 + 104 >> 2]) & 1)) {
    HEAP32[$5 + 108 >> 2] = 0;
    break block;
   }
   graphicsToDeviceCoordinates($5 + 16 | 0, $5 + 100 | 0, $5 + 96 | 0);
   graphicsToDeviceCoordinates($5 + 16 | 0, $5 + 92 | 0, $5 + 88 | 0);
   if (HEAP32[$5 + 100 >> 2] < 0) {
    HEAP32[$5 + 100 >> 2] = 0
   }
   if (HEAP32[$5 + 96 >> 2] < 0) {
    HEAP32[$5 + 96 >> 2] = 0
   }
   if (HEAP32[$5 + 92 >> 2] < 0) {
    HEAP32[$5 + 92 >> 2] = 0
   }
   if (HEAP32[$5 + 88 >> 2] < 0) {
    HEAP32[$5 + 88 >> 2] = 0
   }
   if (HEAP32[$5 + 100 >> 2] >= (HEAPU8[$5 + 28 | 0] | HEAPU8[$5 + 29 | 0] << 8)) {
    HEAP32[$5 + 100 >> 2] = (HEAPU8[$5 + 28 | 0] | HEAPU8[$5 + 29 | 0] << 8) - 1
   }
   if (HEAP32[$5 + 96 >> 2] >= (HEAPU8[$5 + 30 | 0] | HEAPU8[$5 + 31 | 0] << 8)) {
    HEAP32[$5 + 96 >> 2] = (HEAPU8[$5 + 30 | 0] | HEAPU8[$5 + 31 | 0] << 8) - 1
   }
   if (HEAP32[$5 + 92 >> 2] >= (HEAPU8[$5 + 28 | 0] | HEAPU8[$5 + 29 | 0] << 8)) {
    HEAP32[$5 + 92 >> 2] = (HEAPU8[$5 + 28 | 0] | HEAPU8[$5 + 29 | 0] << 8) - 1
   }
   if (HEAP32[$5 + 88 >> 2] >= (HEAPU8[$5 + 30 | 0] | HEAPU8[$5 + 31 | 0] << 8)) {
    HEAP32[$5 + 88 >> 2] = (HEAPU8[$5 + 30 | 0] | HEAPU8[$5 + 31 | 0] << 8) - 1
   }
   if (HEAP32[$5 + 100 >> 2] > HEAP32[$5 + 92 >> 2]) {
    HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 100 >> 2];
    HEAP32[$5 + 100 >> 2] = HEAP32[$5 + 92 >> 2];
    HEAP32[$5 + 92 >> 2] = HEAP32[$5 + 12 >> 2];
   }
   if (HEAP32[$5 + 96 >> 2] > HEAP32[$5 + 88 >> 2]) {
    HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 96 >> 2];
    HEAP32[$5 + 96 >> 2] = HEAP32[$5 + 88 >> 2];
    HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 8 >> 2];
   }
   $0 = HEAP32[$5 + 100 >> 2];
   HEAP8[$5 + 48 | 0] = $0;
   HEAP8[$5 + 49 | 0] = $0 >>> 8;
   $0 = HEAP32[$5 + 96 >> 2];
   HEAP8[$5 + 50 | 0] = $0;
   HEAP8[$5 + 51 | 0] = $0 >>> 8;
   $0 = HEAP32[$5 + 92 >> 2];
   HEAP8[$5 + 52 | 0] = $0;
   HEAP8[$5 + 53 | 0] = $0 >>> 8;
   $0 = HEAP32[$5 + 88 >> 2];
   HEAP8[$5 + 54 | 0] = $0;
   HEAP8[$5 + 55 | 0] = $0 >>> 8;
   graphicsSetVar($5 + 16 | 0);
   HEAP32[$5 + 108 >> 2] = jsvLockAgain(HEAP32[$5 + 104 >> 2]);
  }
  __stack_pointer = $5 + 112 | 0;
  return HEAP32[$5 + 108 >> 2];
 }
 
 function jswrap_graphics_setFontCustom($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 112 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 104 >> 2] = $0;
  HEAP32[$5 + 100 >> 2] = $1;
  HEAP32[$5 + 96 >> 2] = $2;
  HEAP32[$5 + 92 >> 2] = $3;
  HEAP32[$5 + 88 >> 2] = $4;
  block : {
   if (!(graphicsGetFromVar($5 + 16 | 0, HEAP32[$5 + 104 >> 2]) & 1)) {
    HEAP32[$5 + 108 >> 2] = 0;
    break block;
   }
   if (!(jsvIsString(HEAP32[$5 + 100 >> 2]) & 1)) {
    jsExceptionHere(1, 136686, 0);
    HEAP32[$5 + 108 >> 2] = 0;
    break block;
   }
   if (!(HEAP32[$5 + 96 >> 2] <= 255 & HEAP32[$5 + 96 >> 2] >= 0)) {
    jsExceptionHere(1, 137809, 0);
    HEAP32[$5 + 108 >> 2] = 0;
    break block;
   }
   block2 : {
    if (jsvIsString(HEAP32[$5 + 92 >> 2]) & 1) {
     break block2
    }
    if (jsvIsInt(HEAP32[$5 + 92 >> 2]) & 1) {
     break block2
    }
    jsExceptionHere(1, 128092, 0);
    HEAP32[$5 + 108 >> 2] = 0;
    break block;
   }
   HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 88 >> 2] >> 8 & 255;
   if (HEAP32[$5 + 12 >> 2] <= 0) {
    HEAP32[$5 + 12 >> 2] = 1
   }
   HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 88 >> 2] >> 16;
   if (HEAP32[$5 + 8 >> 2] <= 0) {
    HEAP32[$5 + 8 >> 2] = 1
   }
   block3 : {
    if (HEAP32[$5 + 8 >> 2] == 1) {
     HEAP32[$5 + 4 >> 2] = 32768;
     break block3;
    }
    block4 : {
     if (HEAP32[$5 + 8 >> 2] == 2) {
      HEAP32[$5 + 4 >> 2] = 40960;
      break block4;
     }
     block5 : {
      if (HEAP32[$5 + 8 >> 2] == 4) {
       HEAP32[$5 + 4 >> 2] = 49152;
       break block5;
      }
      jsExceptionHere(1, 138693, 0);
      HEAP32[$5 + 108 >> 2] = 0;
      break block;
     }
    }
   }
   HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 88 >> 2] & 255;
   jsvObjectSetChild(HEAP32[$5 + 104 >> 2], 141321, HEAP32[$5 + 100 >> 2]);
   jsvObjectSetChild(HEAP32[$5 + 104 >> 2], 140714, HEAP32[$5 + 92 >> 2]);
   jsvObjectSetChildAndUnLock(HEAP32[$5 + 104 >> 2], 141200, jsvNewFromInteger(HEAP32[$5 + 88 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$5 + 104 >> 2], 142145, jsvNewFromInteger(HEAP32[$5 + 96 >> 2]));
   $0 = HEAP32[$5 + 12 >> 2] + HEAP32[$5 + 4 >> 2] | 0;
   HEAP8[$5 + 41 | 0] = $0;
   HEAP8[$5 + 42 | 0] = $0 >>> 8;
   graphicsSetVar($5 + 16 | 0);
   HEAP32[$5 + 108 >> 2] = jsvLockAgain(HEAP32[$5 + 104 >> 2]);
  }
  __stack_pointer = $5 + 112 | 0;
  return HEAP32[$5 + 108 >> 2];
 }
 
 function jswrap_graphics_setFontPBF($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  jsExceptionHere(1, 138480, 0);
  __stack_pointer = $3 + 16 | 0;
  return 0;
 }
 
 function jswrap_graphics_setFontAlign($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 96 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 88 >> 2] = $0;
  HEAP32[$4 + 84 >> 2] = $1;
  HEAP32[$4 + 80 >> 2] = $2;
  HEAP32[$4 + 76 >> 2] = $3;
  block : {
   if (!(graphicsGetFromVar($4 + 4 | 0, HEAP32[$4 + 88 >> 2]) & 1)) {
    HEAP32[$4 + 92 >> 2] = 0;
    break block;
   }
   if (HEAP32[$4 + 84 >> 2] < -1) {
    HEAP32[$4 + 84 >> 2] = -1
   }
   if (HEAP32[$4 + 84 >> 2] > 1) {
    HEAP32[$4 + 84 >> 2] = 1
   }
   if (HEAP32[$4 + 80 >> 2] < -1) {
    HEAP32[$4 + 80 >> 2] = -1
   }
   if (HEAP32[$4 + 80 >> 2] > 1) {
    HEAP32[$4 + 80 >> 2] = 1
   }
   if (HEAP32[$4 + 76 >> 2] < 0) {
    HEAP32[$4 + 76 >> 2] = 0
   }
   if (HEAP32[$4 + 76 >> 2] > 3) {
    HEAP32[$4 + 76 >> 2] = 3
   }
   HEAP8[$4 + 35 | 0] = HEAPU8[$4 + 84 | 0] & 3 | HEAPU8[$4 + 35 | 0] & 252;
   HEAP8[$4 + 35 | 0] = HEAPU8[$4 + 35 | 0] & 243 | (HEAPU8[$4 + 80 | 0] & 3) << 2;
   HEAP8[$4 + 35 | 0] = HEAPU8[$4 + 35 | 0] & -49 | (HEAPU8[$4 + 76 | 0] & 3) << 4;
   graphicsSetVar($4 + 4 | 0);
   HEAP32[$4 + 92 >> 2] = jsvLockAgain(HEAP32[$4 + 88 >> 2]);
  }
  __stack_pointer = $4 + 96 | 0;
  return HEAP32[$4 + 92 >> 2];
 }
 
 function jswrap_graphics_setFont($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 160 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 152 >> 2] = $0;
  HEAP32[$3 + 148 >> 2] = $1;
  HEAP32[$3 + 144 >> 2] = $2;
  block : {
   if (!(jsvIsString(HEAP32[$3 + 148 >> 2]) & 1)) {
    HEAP32[$3 + 156 >> 2] = 0;
    break block;
   }
   HEAP8[$3 + 143 | 0] = 0;
   HEAP32[$3 + 136 >> 2] = -1;
   if (jsvIsStringEqualOrStartsWith(HEAP32[$3 + 148 >> 2], 127873, 1) & 1) {
    if (jsvGetStringLength(HEAP32[$3 + 148 >> 2]) >>> 0 > 6) {
     HEAP32[$3 + 136 >> 2] = 6
    }
    HEAP8[$3 + 143 | 0] = 1;
   }
   HEAP32[$3 + 132 >> 2] = jsvGetStringIndexOf(HEAP32[$3 + 148 >> 2], 58);
   if (HEAP32[$3 + 132 >> 2] >= 0) {
    HEAP32[$3 + 136 >> 2] = HEAP32[$3 + 132 >> 2] + 1
   }
   block3 : {
    if (HEAP32[$3 + 136 >> 2] >= 0) {
     HEAP32[$3 + 124 >> 2] = jsvNewFromStringVar(HEAP32[$3 + 148 >> 2], HEAP32[$3 + 136 >> 2], 2147483647);
     HEAP32[$3 + 120 >> 2] = jsvGetStringIndexOf(HEAP32[$3 + 124 >> 2], 120);
     block1 : {
      if (HEAP32[$3 + 120 >> 2] >= 0) {
       HEAP32[$3 + 116 >> 2] = jsvGetIntegerAndUnLock(jsvNewFromStringVar(HEAP32[$3 + 124 >> 2], 0, HEAP32[$3 + 120 >> 2]));
       HEAP32[$3 + 112 >> 2] = jsvGetIntegerAndUnLock(jsvNewFromStringVar(HEAP32[$3 + 124 >> 2], HEAP32[$3 + 120 >> 2] + 1 | 0, 2147483647));
       if (HEAP32[$3 + 116 >> 2] < 0) {
        HEAP32[$3 + 116 >> 2] = 0
       }
       if (HEAP32[$3 + 112 >> 2] < 0) {
        HEAP32[$3 + 112 >> 2] = 0
       }
       if (HEAP32[$3 + 116 >> 2] > 63) {
        HEAP32[$3 + 116 >> 2] = 63
       }
       if (HEAP32[$3 + 112 >> 2] > 63) {
        HEAP32[$3 + 112 >> 2] = 63
       }
       HEAP32[$3 + 144 >> 2] = HEAP32[$3 + 116 >> 2] | HEAP32[$3 + 112 >> 2] << 6 | 4096;
       break block1;
      }
      HEAP32[$3 + 144 >> 2] = jsvGetInteger(HEAP32[$3 + 124 >> 2]);
     }
     jsvUnLock(HEAP32[$3 + 124 >> 2]);
     $1 = HEAP32[$3 + 148 >> 2];
     if (HEAP32[$3 + 136 >> 2] > 0) {
      $0 = HEAP32[$3 + 136 >> 2] - 1 | 0
     } else {
      $0 = 0
     }
     HEAP32[$3 + 128 >> 2] = jsvNewFromStringVar($1, 0, $0);
     break block3;
    }
    HEAP32[$3 + 128 >> 2] = jsvLockAgain(HEAP32[$3 + 148 >> 2]);
   }
   if (HEAP32[$3 + 144 >> 2] <= 0) {
    HEAP32[$3 + 144 >> 2] = 1
   }
   if (HEAP32[$3 + 144 >> 2] > 8191) {
    HEAP32[$3 + 144 >> 2] = 8191
   }
   HEAP16[$3 + 110 >> 1] = 65535;
   block4 : {
    if (HEAP8[$3 + 143 | 0] & 1) {
     HEAP16[$3 + 110 >> 1] = HEAP32[$3 + 144 >> 2];
     break block4;
    }
    block6 : {
     block5 : {
      if (jsvIsUndefined(HEAP32[$3 + 128 >> 2]) & 1) {
       break block5
      }
      if (!jsvGetStringLength(HEAP32[$3 + 128 >> 2])) {
       break block5
      }
      if (!(jsvIsStringEqual(HEAP32[$3 + 128 >> 2], 141984) & 1)) {
       break block6
      }
     }
     HEAP16[$3 + 110 >> 1] = HEAP32[$3 + 144 >> 2] - -8192;
    }
   }
   if (jsvIsStringEqual(HEAP32[$3 + 128 >> 2], 141980) & 1) {
    HEAP16[$3 + 110 >> 1] = HEAP32[$3 + 144 >> 2] + 16384
   }
   if (HEAPU16[$3 + 110 >> 1] == 65535) {
    HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 128 >> 2];
    HEAP32[$3 + 104 >> 2] = jsvVarPrintf(124238, $3 + 16 | 0);
    HEAP32[$3 + 100 >> 2] = jspGetVarNamedField(HEAP32[$3 + 152 >> 2], HEAP32[$3 + 104 >> 2], 0);
    if (HEAP32[$3 + 100 >> 2]) {
     jsvUnLock(jspExecuteFunction(HEAP32[$3 + 100 >> 2], HEAP32[$3 + 152 >> 2], 0, 0));
     graphicsGetFromVar($3 + 28 | 0, HEAP32[$3 + 152 >> 2]);
     HEAP16[$3 + 110 >> 1] = HEAP32[$3 + 144 >> 2] | (HEAPU8[$3 + 53 | 0] | HEAPU8[$3 + 54 | 0] << 8) & 57344;
    }
    jsvUnLock2(HEAP32[$3 + 100 >> 2], HEAP32[$3 + 104 >> 2]);
   }
   if (HEAPU16[$3 + 110 >> 1] == 65535) {
    HEAP32[$3 >> 2] = HEAP32[$3 + 128 >> 2];
    jsExceptionHere(1, 136028, $3);
   }
   jsvUnLock(HEAP32[$3 + 128 >> 2]);
   HEAP32[$3 + 156 >> 2] = jswrap_graphics_setFontSizeX(HEAP32[$3 + 152 >> 2], HEAPU16[$3 + 110 >> 1], HEAP8[$3 + 143 | 0] & 1);
  }
  __stack_pointer = $3 + 160 | 0;
  return HEAP32[$3 + 156 >> 2];
 }
 
 function jswrap_graphics_getFont($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 128 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 120 >> 2] = $0;
  block : {
   if (!(graphicsGetFromVar($1 + 48 | 0, HEAP32[$1 + 120 >> 2]) & 1)) {
    HEAP32[$1 + 124 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 44 >> 2] = (HEAPU8[$1 + 73 | 0] | HEAPU8[$1 + 74 | 0] << 8) & 57344;
   HEAP32[$1 + 40 >> 2] = 0;
   if (!HEAP32[$1 + 44 >> 2]) {
    HEAP32[$1 + 40 >> 2] = 127873
   }
   if (HEAP32[$1 + 44 >> 2] == 8192) {
    HEAP32[$1 + 40 >> 2] = 141984
   }
   if (HEAP32[$1 + 44 >> 2] == 16384) {
    HEAP32[$1 + 40 >> 2] = 141980
   }
   if (HEAP32[$1 + 44 >> 2] & 32768) {
    HEAP32[$1 + 40 >> 2] = 135618
   }
   if (HEAP32[$1 + 40 >> 2]) {
    HEAP32[$1 + 36 >> 2] = (HEAPU8[$1 + 73 | 0] | HEAPU8[$1 + 74 | 0] << 8) & 8191;
    if (HEAP32[$1 + 36 >> 2] & 4096) {
     $0 = HEAP32[$1 + 40 >> 2];
     $2 = HEAP32[$1 + 36 >> 2];
     HEAP32[$1 + 8 >> 2] = (HEAP32[$1 + 36 >> 2] & 4032) >>> 6;
     HEAP32[$1 + 4 >> 2] = $2 & 63;
     HEAP32[$1 >> 2] = $0;
     HEAP32[$1 + 124 >> 2] = jsvVarPrintf(139411, $1);
     break block;
    }
    if (HEAP32[$1 + 36 >> 2] > 1) {
     $0 = HEAP32[$1 + 40 >> 2];
     HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 36 >> 2];
     HEAP32[$1 + 16 >> 2] = $0;
     HEAP32[$1 + 124 >> 2] = jsvVarPrintf(139420, $1 + 16 | 0);
     break block;
    }
    HEAP32[$1 + 124 >> 2] = jsvNewFromString(HEAP32[$1 + 40 >> 2]);
    break block;
   }
   HEAP32[$1 + 124 >> 2] = jsvNewFromInteger(HEAPU8[$1 + 73 | 0] | HEAPU8[$1 + 74 | 0] << 8);
  }
  __stack_pointer = $1 + 128 | 0;
  return HEAP32[$1 + 124 >> 2];
 }
 
 function jswrap_graphics_getFonts_callback($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
  block : {
   if (jsvGetStringLength(HEAP32[$2 + 8 >> 2]) >>> 0 <= 7) {
    break block
   }
   if (!(jsvIsStringEqualOrStartsWith(HEAP32[$2 + 8 >> 2], 124685, 1) & 1)) {
    break block
   }
   if (jsvIsStringEqual(HEAP32[$2 + 8 >> 2], 128781) & 1) {
    break block
   }
   if (jsvIsStringEqual(HEAP32[$2 + 8 >> 2], 135459) & 1) {
    break block
   }
   if (jsvIsStringEqual(HEAP32[$2 + 8 >> 2], 141252) & 1) {
    break block
   }
   if (jsvIsStringEqual(HEAP32[$2 + 8 >> 2], 135611) & 1) {
    break block
   }
   HEAP32[$2 >> 2] = jsvNewFromStringVar(HEAP32[$2 + 8 >> 2], 7, 2147483647);
   jsvArrayPush(HEAP32[$2 + 4 >> 2], HEAP32[$2 >> 2]);
   jsvUnLock(HEAP32[$2 >> 2]);
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jswrap_graphics_getFonts($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 96 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 88 >> 2] = $0;
  block : {
   if (!(graphicsGetFromVar($1 + 16 | 0, HEAP32[$1 + 88 >> 2]) & 1)) {
    HEAP32[$1 + 92 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = jsvNewEmptyArray();
   if (!HEAP32[$1 + 12 >> 2]) {
    HEAP32[$1 + 92 >> 2] = 0;
    break block;
   }
   jsvArrayPushString(HEAP32[$1 + 12 >> 2], 141984);
   jsvArrayPushString(HEAP32[$1 + 12 >> 2], 141980);
   jswrap_object_keys_or_property_names_cb(HEAP32[$1 + 88 >> 2], 3, 658, HEAP32[$1 + 12 >> 2]);
   HEAP32[$1 + 92 >> 2] = HEAP32[$1 + 12 >> 2];
  }
  __stack_pointer = $1 + 96 | 0;
  return HEAP32[$1 + 92 >> 2];
 }
 
 function jswrap_graphics_getFontHeight($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 112 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 104 >> 2] = $0;
  block : {
   if (!(graphicsGetFromVar($1 + 32 | 0, HEAP32[$1 + 104 >> 2]) & 1)) {
    HEAP32[$1 + 108 >> 2] = 0;
    break block;
   }
   _jswrap_graphics_getFontInfo($1 + 32 | 0, $1 + 12 | 0);
   HEAP32[$1 + 8 >> 2] = _jswrap_graphics_getFontHeightInternal($1 + 32 | 0, $1 + 12 | 0);
   _jswrap_graphics_freeFontInfo($1 + 12 | 0);
   HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 8 >> 2];
  }
  __stack_pointer = $1 + 112 | 0;
  return HEAP32[$1 + 108 >> 2];
 }
 
 function _jswrap_graphics_getFontInfo($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[HEAP32[$2 + 8 >> 2] >> 2] = (HEAPU8[$0 + 25 | 0] | HEAPU8[$0 + 26 | 0] << 8) & 57344;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP16[HEAP32[$2 + 8 >> 2] + 4 >> 1] = (HEAPU8[$0 + 25 | 0] | HEAPU8[$0 + 26 | 0] << 8) & 8191;
  HEAP16[HEAP32[$2 + 8 >> 2] + 6 >> 1] = HEAPU16[HEAP32[$2 + 8 >> 2] + 4 >> 1];
  HEAP16[HEAP32[$2 + 8 >> 2] + 8 >> 1] = HEAPU16[HEAP32[$2 + 8 >> 2] + 4 >> 1];
  if (HEAPU16[HEAP32[$2 + 8 >> 2] + 4 >> 1] & 4096) {
   HEAP16[HEAP32[$2 + 8 >> 2] + 6 >> 1] = HEAPU16[HEAP32[$2 + 8 >> 2] + 4 >> 1] & 63;
   HEAP16[HEAP32[$2 + 8 >> 2] + 8 >> 1] = (HEAPU16[HEAP32[$2 + 8 >> 2] + 4 >> 1] & 4032) >>> 6;
  }
  block : {
   if (HEAP32[HEAP32[$2 + 8 >> 2] >> 2] & 32768) {
    $0 = HEAP32[$2 + 12 >> 2];
    $0 = jsvGetIntegerAndUnLock(jsvObjectGetChildIfExists(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 142145));
    HEAP8[HEAP32[$2 + 8 >> 2] + 10 | 0] = $0;
    $0 = HEAP32[$2 + 12 >> 2];
    $0 = jsvObjectGetChildIfExists(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 140714);
    HEAP32[HEAP32[$2 + 8 >> 2] + 12 >> 2] = $0;
    $0 = HEAP32[$2 + 12 >> 2];
    $0 = jsvObjectGetChildIfExists(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 141321);
    HEAP32[HEAP32[$2 + 8 >> 2] + 16 >> 2] = $0;
    break block;
   }
   HEAP8[HEAP32[$2 + 8 >> 2] + 10 | 0] = 0;
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function _jswrap_graphics_getFontHeightInternal($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  block : {
   if (!HEAP32[HEAP32[$2 + 4 >> 2] >> 2]) {
    HEAP32[$2 + 12 >> 2] = HEAPU16[HEAP32[$2 + 4 >> 2] + 8 >> 1];
    break block;
   }
   if (HEAP32[HEAP32[$2 + 4 >> 2] >> 2] == 8192) {
    HEAP32[$2 + 12 >> 2] = Math_imul(HEAPU16[HEAP32[$2 + 4 >> 2] + 8 >> 1], 6);
    break block;
   }
   if (HEAP32[HEAP32[$2 + 4 >> 2] >> 2] == 16384) {
    HEAP32[$2 + 12 >> 2] = HEAPU16[HEAP32[$2 + 4 >> 2] + 8 >> 1] << 3;
    break block;
   }
   if (HEAP32[HEAP32[$2 + 4 >> 2] >> 2] & 32768) {
    $0 = HEAP32[$2 + 8 >> 2];
    HEAP32[$2 + 12 >> 2] = Math_imul(HEAPU16[HEAP32[$2 + 4 >> 2] + 8 >> 1], jsvGetIntegerAndUnLock(jsvObjectGetChildIfExists(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 141200)));
    break block;
   }
   HEAP32[$2 + 12 >> 2] = 0;
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function _jswrap_graphics_freeFontInfo($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  if (HEAP32[HEAP32[$1 + 12 >> 2] >> 2] & 32768) {
   jsvUnLock2(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2], HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2])
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function _jswrap_graphics_stringMetrics($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 192 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 188 >> 2] = $0;
  HEAP32[$4 + 184 >> 2] = $1;
  HEAP32[$4 + 180 >> 2] = $2;
  HEAP32[$4 + 176 >> 2] = $3;
  _jswrap_graphics_getFontInfo(HEAP32[$4 + 188 >> 2], $4 + 156 | 0);
  $0 = HEAP32[$4 + 176 >> 2];
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$4 + 152 >> 2] = _jswrap_graphics_getFontHeightInternal(HEAP32[$4 + 188 >> 2], $4 + 156 | 0);
  HEAP32[HEAP32[$4 + 176 >> 2] + 8 >> 2] = HEAP32[$4 + 152 >> 2];
  HEAP32[$4 + 148 >> 2] = jsvAsString(HEAP32[$4 + 184 >> 2]);
  jsvStringIteratorNewUTF8($4 + 112 | 0, HEAP32[$4 + 148 >> 2], HEAP32[$4 + 180 >> 2] >= 0 ? HEAP32[$4 + 180 >> 2] : 0);
  HEAP32[$4 + 108 >> 2] = 0;
  HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 152 >> 2];
  HEAP32[$4 + 100 >> 2] = 0;
  while (1) {
   block : {
    if (!(jsvStringIteratorHasChar_1840($4 + 112 | 0) & 1)) {
     break block
    }
    HEAP32[$4 + 96 >> 2] = jsvStringIteratorGetUTF8CharAndNext($4 + 112 | 0);
    block1 : {
     if (HEAP32[$4 + 96 >> 2] == 10) {
      if (HEAP32[$4 + 108 >> 2] > HEAP32[$4 + 100 >> 2]) {
       HEAP32[$4 + 100 >> 2] = HEAP32[$4 + 108 >> 2]
      }
      HEAP32[$4 + 108 >> 2] = 0;
      HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 152 >> 2] + HEAP32[$4 + 104 >> 2];
      if (HEAP32[$4 + 180 >> 2] >= 0) {
       break block
      }
      break block1;
     }
     block2 : {
      if (!HEAP32[$4 + 96 >> 2]) {
       $0 = HEAP32[$4 + 176 >> 2];
       HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] + 1;
       HEAP32[$4 + 8 >> 2] = jsvConvertToUTF8Index(HEAP32[$4 + 148 >> 2], jsvStringIteratorGetIndex_1884($4 + 112 | 0));
       if (_jswrap_graphics_parseImage(HEAP32[$4 + 188 >> 2], HEAP32[$4 + 148 >> 2], HEAP32[$4 + 8 >> 2], $4 + 12 | 0) & 1) {
        jsvStringIteratorGotoUTF8($4 + 112 | 0, HEAP32[$4 + 148 >> 2], HEAPU16[$4 + 62 >> 1] + (HEAP32[$4 + 8 >> 2] + HEAPU16[$4 + 60 >> 1] | 0) | 0);
        _jswrap_graphics_freeImageInfo($4 + 12 | 0);
        HEAP32[$4 + 108 >> 2] = HEAP32[$4 + 12 >> 2] + HEAP32[$4 + 108 >> 2];
        if (HEAP32[$4 + 16 >> 2] > HEAP32[HEAP32[$4 + 176 >> 2] + 20 >> 2]) {
         HEAP32[HEAP32[$4 + 176 >> 2] + 20 >> 2] = HEAP32[$4 + 16 >> 2]
        }
       }
       break block2;
      }
      HEAP32[$4 + 4 >> 2] = _jswrap_graphics_getCharWidth($4 + 156 | 0, HEAP32[$4 + 96 >> 2]);
      HEAP32[$4 + 108 >> 2] = HEAP32[$4 + 4 >> 2] + HEAP32[$4 + 108 >> 2];
      if (!HEAP32[$4 + 4 >> 2]) {
       HEAP8[HEAP32[$4 + 176 >> 2] + 12 | 0] = 1
      }
     }
    }
    continue;
   }
   break;
  };
  jsvStringIteratorFree_1830($4 + 112 | 0);
  jsvUnLock(HEAP32[$4 + 148 >> 2]);
  $1 = HEAP32[$4 + 176 >> 2];
  if (HEAP32[$4 + 108 >> 2] > HEAP32[$4 + 100 >> 2]) {
   $0 = HEAP32[$4 + 108 >> 2]
  } else {
   $0 = HEAP32[$4 + 100 >> 2]
  }
  HEAP32[$1 >> 2] = $0;
  HEAP32[HEAP32[$4 + 176 >> 2] + 4 >> 2] = HEAP32[$4 + 104 >> 2];
  _jswrap_graphics_freeFontInfo($4 + 156 | 0);
  __stack_pointer = $4 + 192 | 0;
 }
 
 function jsvStringIteratorGetIndex_1884($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + HEAP32[HEAP32[$1 + 12 >> 2] >> 2] | 0;
 }
 
 function _jswrap_graphics_getCharWidth($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  block1 : {
   if (!(HEAP32[HEAP32[$2 + 8 >> 2] >> 2] | HEAP32[$2 + 4 >> 2] >= 256)) {
    HEAP32[$2 + 12 >> 2] = graphicsVectorCharWidth(HEAPU16[HEAP32[$2 + 8 >> 2] + 6 >> 1], HEAP32[$2 + 4 >> 2] << 24 >> 24);
    break block1;
   }
   if (!(HEAP32[HEAP32[$2 + 8 >> 2] >> 2] != 8192 | HEAP32[$2 + 4 >> 2] >= 256)) {
    HEAP32[$2 + 12 >> 2] = HEAPU16[HEAP32[$2 + 8 >> 2] + 6 >> 1] << 2;
    break block1;
   }
   if (!(HEAP32[HEAP32[$2 + 8 >> 2] >> 2] != 16384 | HEAP32[$2 + 4 >> 2] >= 256)) {
    HEAP32[$2 + 12 >> 2] = Math_imul(HEAPU16[HEAP32[$2 + 8 >> 2] + 6 >> 1], 6);
    break block1;
   }
   if (HEAP32[HEAP32[$2 + 8 >> 2] >> 2] & 32768) {
    HEAP32[$2 >> 2] = 0;
    if (HEAP32[$2 + 4 >> 2] < 256) {
     block4 : {
      if (jsvIsString(HEAP32[HEAP32[$2 + 8 >> 2] + 12 >> 2]) & 1) {
       if (HEAP32[$2 + 4 >> 2] >= HEAPU8[HEAP32[$2 + 8 >> 2] + 10 | 0]) {
        HEAP32[$2 >> 2] = Math_imul(HEAPU16[HEAP32[$2 + 8 >> 2] + 6 >> 1], jsvGetCharInString(HEAP32[HEAP32[$2 + 8 >> 2] + 12 >> 2], HEAP32[$2 + 4 >> 2] - HEAPU8[HEAP32[$2 + 8 >> 2] + 10 | 0] | 0) & 255)
       }
       break block4;
      }
      HEAP32[$2 >> 2] = Math_imul(HEAPU16[HEAP32[$2 + 8 >> 2] + 6 >> 1], jsvGetInteger(HEAP32[HEAP32[$2 + 8 >> 2] + 12 >> 2]));
     }
    }
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
    break block1;
   }
   HEAP32[$2 + 12 >> 2] = 0;
  }
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function _jswrap_graphics_stringWidth($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 44 >> 2] = $0;
  HEAP32[$3 + 40 >> 2] = $1;
  HEAP32[$3 + 36 >> 2] = $2;
  _jswrap_graphics_stringMetrics(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2], HEAP32[$3 + 36 >> 2], $3 + 12 | 0);
  __stack_pointer = $3 + 48 | 0;
  return HEAP32[$3 + 12 >> 2];
 }
 
 function jswrap_graphics_stringWidth($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 96 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 88 >> 2] = $0;
  HEAP32[$2 + 84 >> 2] = $1;
  block : {
   if (!(graphicsGetFromVar($2 + 12 | 0, HEAP32[$2 + 88 >> 2]) & 1)) {
    HEAP32[$2 + 92 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 92 >> 2] = _jswrap_graphics_stringWidth($2 + 12 | 0, HEAP32[$2 + 84 >> 2], -1);
  }
  __stack_pointer = $2 + 96 | 0;
  return HEAP32[$2 + 92 >> 2];
 }
 
 function jswrap_graphics_stringMetrics($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 112 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 104 >> 2] = $0;
  HEAP32[$2 + 100 >> 2] = $1;
  block : {
   if (!(graphicsGetFromVar($2 + 28 | 0, HEAP32[$2 + 104 >> 2]) & 1)) {
    HEAP32[$2 + 108 >> 2] = 0;
    break block;
   }
   HEAP32[$2 >> 2] = jsvNewObject();
   if (HEAP32[$2 >> 2]) {
    _jswrap_graphics_stringMetrics($2 + 28 | 0, HEAP32[$2 + 100 >> 2], -1, $2 + 4 | 0);
    jsvObjectSetChildAndUnLock(HEAP32[$2 >> 2], 136165, jsvNewFromInteger(HEAP32[$2 + 4 >> 2]));
    jsvObjectSetChildAndUnLock(HEAP32[$2 >> 2], 124928, jsvNewFromInteger(HEAP32[$2 + 8 >> 2]));
    jsvObjectSetChildAndUnLock(HEAP32[$2 >> 2], 127195, jsvNewFromBool(HEAP8[$2 + 16 | 0] & 1));
    jsvObjectSetChildAndUnLock(HEAP32[$2 >> 2], 124663, jsvNewFromInteger(HEAP32[$2 + 20 >> 2]));
    jsvObjectSetChildAndUnLock(HEAP32[$2 >> 2], 124935, jsvNewFromInteger(HEAP32[$2 + 24 >> 2]));
   }
   HEAP32[$2 + 108 >> 2] = HEAP32[$2 >> 2];
  }
  __stack_pointer = $2 + 112 | 0;
  return HEAP32[$2 + 108 >> 2];
 }
 
 function jswrap_graphics_wrapString($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 336 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 328 >> 2] = $0;
  HEAP32[$3 + 324 >> 2] = $1;
  HEAP32[$3 + 320 >> 2] = $2;
  block : {
   if (!HEAP32[$3 + 324 >> 2]) {
    HEAP32[$3 + 332 >> 2] = jsvNewEmptyArray();
    break block;
   }
   if (HEAP32[$3 + 320 >> 2] <= 0) {
    HEAP32[$3 + 332 >> 2] = 0;
    break block;
   }
   if (!(graphicsGetFromVar($3 + 248 | 0, HEAP32[$3 + 328 >> 2]) & 1)) {
    HEAP32[$3 + 332 >> 2] = 0;
    break block;
   }
   _jswrap_graphics_getFontInfo($3 + 248 | 0, $3 + 228 | 0);
   HEAP32[$3 + 324 >> 2] = jsvAsString(HEAP32[$3 + 324 >> 2]);
   HEAP32[$3 + 224 >> 2] = jsvNewEmptyArray();
   HEAP32[$3 + 220 >> 2] = jsvNewFromEmptyString_1890();
   HEAP32[$3 + 216 >> 2] = _jswrap_graphics_getCharWidth($3 + 228 | 0, 32);
   HEAP32[$3 + 212 >> 2] = 0;
   HEAP32[$3 + 208 >> 2] = 0;
   HEAP8[$3 + 207 | 0] = 0;
   HEAP8[$3 + 206 | 0] = 0;
   HEAP32[$3 + 200 >> 2] = 0;
   HEAP8[$3 + 199 | 0] = 0;
   HEAP8[$3 + 198 | 0] = 0;
   jsvStringIteratorNewUTF8($3 + 160 | 0, HEAP32[$3 + 324 >> 2], 0);
   while (1) {
    block2 : {
     block1 : {
      if (!(jsvStringIteratorHasChar_1840($3 + 160 | 0) & 1)) {
       $0 = 0;
       if (!(HEAP8[$3 + 199 | 0] & 1)) {
        break block1
       }
      }
      $0 = jspIsInterrupted() ^ -1;
     }
     if (!($0 & 1)) {
      break block2
     }
     HEAP32[$3 + 156 >> 2] = jsvStringIteratorGetUTF8CharAndNext($3 + 160 | 0);
     $0 = 1;
     block3 : {
      if (HEAP8[$3 + 199 | 0] & 1) {
       break block3
      }
      $0 = 1;
      if (HEAP32[$3 + 156 >> 2] == 10) {
       break block3
      }
      $0 = HEAP32[$3 + 156 >> 2] == 32;
     }
     HEAP8[$3 + 155 | 0] = $0;
     if (HEAP8[$3 + 155 | 0] & 1 | HEAP8[$3 + 207 | 0] & 1) {
      HEAP32[$3 + 148 >> 2] = jsvStringIteratorGetIndex_1884($3 + 160 | 0);
      block7 : {
       if (!(HEAP8[$3 + 198 | 0] & 1 | HEAP32[$3 + 320 >> 2] < (HEAP32[$3 + 212 >> 2] + (HEAP32[$3 + 208 >> 2] + HEAP32[$3 + 216 >> 2] | 0) | 0))) {
        if (!(!HEAPU8[$3 + 206 | 0] | !HEAP32[$3 + 208 >> 2] & HEAPU8[$3 + 206 | 0] == 32)) {
         jsvAppendCharacter_1891(HEAP32[$3 + 220 >> 2], HEAP8[$3 + 206 | 0] << 24 >> 24);
         HEAP32[$3 + 208 >> 2] = HEAP32[$3 + 216 >> 2] + HEAP32[$3 + 208 >> 2];
        }
        jsvAppendStringVar(HEAP32[$3 + 220 >> 2], HEAP32[$3 + 324 >> 2], HEAP32[$3 + 200 >> 2], HEAP32[$3 + 148 >> 2] - (HEAP32[$3 + 200 >> 2] + 1 | 0) | 0);
        HEAP32[$3 + 208 >> 2] = HEAP32[$3 + 212 >> 2] + HEAP32[$3 + 208 >> 2];
        break block7;
       }
       HEAP32[$3 + 208 >> 2] = HEAP32[$3 + 212 >> 2];
       if (jsvGetStringLength(HEAP32[$3 + 220 >> 2]) | HEAP8[$3 + 198 | 0] & 1) {
        jsvArrayPush(HEAP32[$3 + 224 >> 2], HEAP32[$3 + 220 >> 2])
       }
       jsvUnLock(HEAP32[$3 + 220 >> 2]);
       HEAP32[$3 + 220 >> 2] = 0;
       while (1) {
        if (HEAP32[$3 + 212 >> 2] > HEAP32[$3 + 320 >> 2]) {
         HEAP32[$3 + 144 >> 2] = 0;
         HEAP32[$3 + 220 >> 2] = jsvNewFromEmptyString_1890();
         jsvStringIteratorNew($3 + 108 | 0, HEAP32[$3 + 324 >> 2], HEAP32[$3 + 200 >> 2]);
         while (1) {
          block9 : {
           if (jsvStringIteratorGetIndex_1884($3 + 108 | 0) >>> 0 >= HEAPU32[$3 + 148 >> 2]) {
            break block9
           }
           HEAP32[$3 + 104 >> 2] = jsvStringIteratorGetUTF8CharAndNext($3 + 108 | 0);
           if (!HEAP32[$3 + 104 >> 2]) {
            jsvAppendStringVar(HEAP32[$3 + 220 >> 2], HEAP32[$3 + 324 >> 2], HEAP32[$3 + 200 >> 2], HEAP32[$3 + 148 >> 2] - (HEAP32[$3 + 200 >> 2] + 1 | 0) | 0);
            HEAP32[$3 + 208 >> 2] = HEAP32[$3 + 212 >> 2] + HEAP32[$3 + 208 >> 2];
            HEAP32[$3 + 212 >> 2] = 0;
            HEAP32[$3 + 200 >> 2] = HEAP32[$3 + 148 >> 2] - 1;
            break block9;
           }
           HEAP32[$3 + 100 >> 2] = _jswrap_graphics_getCharWidth($3 + 228 | 0, HEAP32[$3 + 104 >> 2]);
           if (HEAP32[$3 + 144 >> 2] ? HEAP32[$3 + 320 >> 2] <= (HEAP32[$3 + 144 >> 2] + HEAP32[$3 + 100 >> 2] | 0) : 0) {
            break block9
           }
           HEAP32[$3 + 212 >> 2] = HEAP32[$3 + 212 >> 2] - HEAP32[$3 + 100 >> 2];
           HEAP32[$3 + 208 >> 2] = HEAP32[$3 + 208 >> 2] - HEAP32[$3 + 100 >> 2];
           HEAP32[$3 + 144 >> 2] = HEAP32[$3 + 100 >> 2] + HEAP32[$3 + 144 >> 2];
           HEAP32[$3 + 200 >> 2] = jsvStringIteratorGetIndex_1884($3 + 108 | 0);
           jsvAppendCharacter_1891(HEAP32[$3 + 220 >> 2], HEAP32[$3 + 104 >> 2] << 24 >> 24);
           continue;
          }
          break;
         };
         jsvStringIteratorFree_1830($3 + 108 | 0);
         jsvArrayPush(HEAP32[$3 + 224 >> 2], HEAP32[$3 + 220 >> 2]);
         jsvUnLock(HEAP32[$3 + 220 >> 2]);
         continue;
        }
        break;
       };
       HEAP32[$3 + 220 >> 2] = jsvNewWritableStringFromStringVar(HEAP32[$3 + 324 >> 2], HEAP32[$3 + 200 >> 2], HEAP32[$3 + 148 >> 2] - (HEAP32[$3 + 200 >> 2] + 1 | 0) | 0);
       if (HEAP8[$3 + 198 | 0] & 1) {
        HEAP8[$3 + 206 | 0] = 32
       }
      }
      HEAP8[$3 + 206 | 0] = 0;
      if (!(!(HEAP8[$3 + 207 | 0] & 1) | HEAP8[$3 + 155 | 0] & 1)) {
       HEAP32[$3 + 148 >> 2] = HEAP32[$3 + 148 >> 2] - 1
      }
      if (!(!(HEAP8[$3 + 155 | 0] & 1) | HEAP32[$3 + 156 >> 2] <= 0)) {
       HEAP8[$3 + 206 | 0] = HEAP32[$3 + 156 >> 2]
      }
      HEAP32[$3 + 212 >> 2] = 0;
      HEAP32[$3 + 200 >> 2] = HEAP32[$3 + 148 >> 2];
      HEAP8[$3 + 198 | 0] = HEAP32[$3 + 156 >> 2] == 10;
      HEAP8[$3 + 207 | 0] = !HEAP32[$3 + 156 >> 2];
      if (HEAP8[$3 + 199 | 0] & 1) {
       break block2
      }
      if (HEAP32[$3 + 156 >> 2]) {
       if (!(jsvStringIteratorHasChar_1840($3 + 160 | 0) & 1)) {
        HEAP8[$3 + 199 | 0] = 1
       }
       continue;
      }
     }
     HEAP8[$3 + 207 | 0] = 0;
     if (!HEAP32[$3 + 156 >> 2]) {
      HEAP32[$3 + 12 >> 2] = jsvConvertToUTF8Index(HEAP32[$3 + 324 >> 2], jsvStringIteratorGetIndex_1884($3 + 160 | 0));
      if (_jswrap_graphics_parseImage($3 + 248 | 0, HEAP32[$3 + 324 >> 2], HEAP32[$3 + 12 >> 2], $3 + 16 | 0) & 1) {
       jsvStringIteratorGotoUTF8($3 + 160 | 0, HEAP32[$3 + 324 >> 2], HEAPU16[$3 + 66 >> 1] + (HEAP32[$3 + 12 >> 2] + HEAPU16[$3 + 64 >> 1] | 0) | 0);
       _jswrap_graphics_freeImageInfo($3 + 16 | 0);
       HEAP32[$3 + 212 >> 2] = HEAP32[$3 + 16 >> 2] + HEAP32[$3 + 212 >> 2];
       HEAP8[$3 + 207 | 0] = 1;
       if (!(jsvStringIteratorHasChar_1840($3 + 160 | 0) & 1)) {
        HEAP8[$3 + 199 | 0] = 1
       }
      }
      continue;
     }
     HEAP32[$3 + 212 >> 2] = _jswrap_graphics_getCharWidth($3 + 228 | 0, HEAP32[$3 + 156 >> 2]) + HEAP32[$3 + 212 >> 2];
     block13 : {
      block12 : {
       if (HEAP32[$3 + 156 >> 2] == 44 | HEAP32[$3 + 156 >> 2] == 46 | (HEAP32[$3 + 156 >> 2] == 45 | HEAP32[$3 + 156 >> 2] == 47)) {
        break block12
       }
       if (HEAP32[$3 + 156 >> 2] == 92) {
        break block12
       }
       if (HEAP32[$3 + 156 >> 2] != 58) {
        break block13
       }
      }
      HEAP8[$3 + 207 | 0] = 1;
     }
     if (!(jsvStringIteratorHasChar_1840($3 + 160 | 0) & 1)) {
      HEAP8[$3 + 199 | 0] = 1
     }
     continue;
    }
    break;
   };
   jsvStringIteratorFree_1830($3 + 160 | 0);
   if (jsvGetStringLength(HEAP32[$3 + 220 >> 2])) {
    jsvArrayPush(HEAP32[$3 + 224 >> 2], HEAP32[$3 + 220 >> 2])
   }
   jsvUnLock2(HEAP32[$3 + 324 >> 2], HEAP32[$3 + 220 >> 2]);
   _jswrap_graphics_freeFontInfo($3 + 228 | 0);
   HEAP32[$3 + 332 >> 2] = HEAP32[$3 + 224 >> 2];
  }
  __stack_pointer = $3 + 336 | 0;
  return HEAP32[$3 + 332 >> 2];
 }
 
 function jsvNewFromEmptyString_1890() {
  return jsvNewWithFlags(28);
 }
 
 function jsvAppendCharacter_1891($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP8[$2 + 11 | 0] = $1;
  jsvAppendStringBuf(HEAP32[$2 + 12 >> 2], $2 + 11 | 0, 1);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function jswrap_graphics_setFont6x8($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $0 = jswrap_graphics_setFontSizeX(HEAP32[$2 + 12 >> 2], 16385, 0);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function jswrap_graphics_setFont4x6($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $0 = jswrap_graphics_setFontSizeX(HEAP32[$2 + 12 >> 2], 8193, 0);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function jswrap_graphics_findFont($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 320 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 312 >> 2] = $0;
  HEAP32[$3 + 308 >> 2] = $1;
  HEAP32[$3 + 304 >> 2] = $2;
  block : {
   if (!(graphicsGetFromVar($3 + 232 | 0, HEAP32[$3 + 312 >> 2]) & 1)) {
    HEAP32[$3 + 316 >> 2] = 0;
    break block;
   }
   HEAP32[$3 + 228 >> 2] = HEAPU8[$3 + 244 | 0] | HEAPU8[$3 + 245 | 0] << 8;
   HEAP32[$3 + 224 >> 2] = HEAPU8[$3 + 246 | 0] | HEAPU8[$3 + 247 | 0] << 8;
   HEAP32[$3 + 220 >> 2] = 4;
   HEAP32[$3 + 216 >> 2] = 100;
   HEAP8[$3 + 215 | 0] = 0;
   HEAP8[$3 + 214 | 0] = 0;
   HEAP32[$3 + 208 >> 2] = jsvNewObject();
   HEAP32[$3 + 308 >> 2] = jsvAsString(HEAP32[$3 + 308 >> 2]);
   if (!(HEAP32[$3 + 308 >> 2] ? HEAP32[$3 + 208 >> 2] : 0)) {
    HEAP32[$3 + 316 >> 2] = 0;
    break block;
   }
   HEAP32[$3 + 128 >> 2] = 124222;
   HEAP16[$3 + 132 >> 1] = 10;
   HEAP16[($3 + 128 | 0) + 6 >> 1] = 0;
   HEAP32[$3 + 136 >> 2] = $3 + 228;
   HEAP32[$3 + 140 >> 2] = 136443;
   HEAP16[$3 + 144 >> 1] = 10;
   HEAP16[($3 + 128 | 0) + 18 >> 1] = 0;
   HEAP32[$3 + 148 >> 2] = $3 + 224;
   HEAP32[$3 + 152 >> 2] = 135433;
   HEAP16[$3 + 156 >> 1] = 10;
   HEAP16[($3 + 128 | 0) + 30 >> 1] = 0;
   HEAP32[$3 + 160 >> 2] = $3 + 220;
   HEAP32[$3 + 164 >> 2] = 123968;
   HEAP16[$3 + 168 >> 1] = 10;
   HEAP16[($3 + 128 | 0) + 42 >> 1] = 0;
   HEAP32[$3 + 172 >> 2] = $3 + 216;
   HEAP32[$3 + 176 >> 2] = 128776;
   HEAP16[$3 + 180 >> 1] = 12;
   HEAP16[($3 + 128 | 0) + 54 >> 1] = 0;
   HEAP32[$3 + 184 >> 2] = $3 + 215;
   HEAP32[$3 + 188 >> 2] = 135630;
   HEAP16[$3 + 192 >> 1] = 12;
   HEAP16[($3 + 128 | 0) + 66 >> 1] = 0;
   HEAP32[$3 + 196 >> 2] = $3 + 214;
   if (!(jsvReadConfigObject(HEAP32[$3 + 304 >> 2], $3 + 128 | 0, 6) & 1)) {
    jsvUnLock2(HEAP32[$3 + 208 >> 2], HEAP32[$3 + 308 >> 2]);
    HEAP32[$3 + 316 >> 2] = 0;
    break block;
   }
   HEAP32[$3 + 124 >> 2] = 5;
   HEAP32[$3 + 120 >> 2] = HEAP32[47650];
   $1 = HEAP32[47649];
   $0 = HEAP32[47648];
   HEAP32[$3 + 112 >> 2] = $0;
   HEAP32[$3 + 116 >> 2] = $1;
   $0 = HEAP32[47647];
   $1 = HEAP32[47646];
   HEAP32[$3 + 104 >> 2] = $1;
   HEAP32[$3 + 108 >> 2] = $0;
   $1 = HEAP32[47645];
   $0 = HEAP32[47644];
   HEAP32[$3 + 96 >> 2] = $0;
   HEAP32[$3 + 100 >> 2] = $1;
   $0 = HEAP32[47643];
   $1 = HEAP32[47642];
   HEAP32[$3 + 88 >> 2] = $1;
   HEAP32[$3 + 92 >> 2] = $0;
   $1 = HEAP32[47641];
   $0 = HEAP32[47640];
   HEAP32[$3 + 80 >> 2] = $0;
   HEAP32[$3 + 84 >> 2] = $1;
   $0 = HEAP32[47639];
   $1 = HEAP32[47638];
   HEAP32[$3 + 72 >> 2] = $1;
   HEAP32[$3 + 76 >> 2] = $0;
   $1 = HEAP32[47637];
   $0 = HEAP32[47636];
   HEAP32[$3 + 64 >> 2] = $0;
   HEAP32[$3 + 68 >> 2] = $1;
   HEAP32[$3 + 60 >> 2] = 0;
   while (1) {
    $0 = 0;
    if (HEAP32[$3 + 60 >> 2] < 4) {
     $0 = HEAPU8[(($3 - -64 | 0) + Math_imul(HEAP32[$3 + 60 >> 2], 12) | 0) + 4 | 0] > HEAP32[$3 + 216 >> 2]
    }
    if ($0) {
     HEAP32[$3 + 60 >> 2] = HEAP32[$3 + 60 >> 2] + 1;
     continue;
    }
    break;
   };
   HEAP32[$3 + 32 >> 2] = jsvLockAgain(HEAP32[$3 + 308 >> 2]);
   HEAP32[$3 + 28 >> 2] = 0;
   HEAP32[$3 + 24 >> 2] = jsvNewFromString(148265);
   while (1) {
    block2 : {
     if (HEAP32[$3 + 60 >> 2] >= 4) {
      break block2
     }
     jsvUnLock(FUNCTION_TABLE[HEAP32[(($3 - -64 | 0) + Math_imul(HEAP32[$3 + 60 >> 2], 12) | 0) + 8 >> 2]](HEAP32[$3 + 312 >> 2], HEAPU8[(($3 - -64 | 0) + Math_imul(HEAP32[$3 + 60 >> 2], 12) | 0) + 5 | 0]) | 0);
     graphicsGetFromVar($3 + 232 | 0, HEAP32[$3 + 312 >> 2]);
     if (HEAP8[$3 + 215 | 0] & 1) {
      jsvUnLock2(HEAP32[$3 + 32 >> 2], HEAP32[$3 + 28 >> 2]);
      HEAP32[$3 + 28 >> 2] = jswrap_graphics_wrapString(HEAP32[$3 + 312 >> 2], HEAP32[$3 + 308 >> 2], HEAP32[$3 + 228 >> 2]);
      HEAP32[$3 + 32 >> 2] = jsvArrayJoin(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], 1);
     }
     _jswrap_graphics_stringMetrics($3 + 232 | 0, HEAP32[$3 + 32 >> 2], -1, $3 + 36 | 0);
     if (HEAP32[$3 + 36 >> 2] <= HEAP32[$3 + 228 >> 2] & HEAP32[$3 + 40 >> 2] <= HEAP32[$3 + 224 >> 2] | HEAP32[$3 + 60 >> 2] == 4 | HEAPU8[((Math_imul(HEAP32[$3 + 60 >> 2], 12) + $3 | 0) + 76 | 0) + 4 | 0] < HEAP32[$3 + 220 >> 2]) {
      break block2
     }
     HEAP32[$3 + 60 >> 2] = HEAP32[$3 + 60 >> 2] + 1;
     continue;
    }
    break;
   };
   HEAP32[$3 + 20 >> 2] = HEAP32[($3 - -64 | 0) + Math_imul(HEAP32[$3 + 60 >> 2], 12) >> 2];
   if (HEAP8[$3 + 48 | 0] & 1) {
    HEAP32[$3 + 16 >> 2] = jspGetNamedField(HEAP32[$3 + 312 >> 2], 135644, 0);
    if (HEAP32[$3 + 16 >> 2]) {
     HEAP32[$3 + 20 >> 2] = 142126;
     jsvUnLock(jspExecuteFunction(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 312 >> 2], 0, 0));
     graphicsGetFromVar($3 + 232 | 0, HEAP32[$3 + 312 >> 2]);
     $0 = (HEAPU8[$3 + 257 | 0] | HEAPU8[$3 + 258 | 0] << 8) & -8192 | 2;
     HEAP8[$3 + 257 | 0] = $0;
     HEAP8[$3 + 258 | 0] = $0 >>> 8;
     if (HEAP8[$3 + 215 | 0] & 1) {
      jsvUnLock2(HEAP32[$3 + 32 >> 2], HEAP32[$3 + 28 >> 2]);
      HEAP32[$3 + 28 >> 2] = jswrap_graphics_wrapString(HEAP32[$3 + 312 >> 2], HEAP32[$3 + 308 >> 2], HEAP32[$3 + 228 >> 2]);
      HEAP32[$3 + 32 >> 2] = jsvArrayJoin(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], 1);
     }
     _jswrap_graphics_stringMetrics($3 + 232 | 0, HEAP32[$3 + 32 >> 2], -1, $3 + 36 | 0);
     if (!(HEAP32[$3 + 36 >> 2] <= HEAP32[$3 + 228 >> 2] & HEAP32[$3 + 40 >> 2] <= HEAP32[$3 + 224 >> 2] | HEAP32[$3 + 44 >> 2] < HEAP32[$3 + 220 >> 2] << 1)) {
      HEAP32[$3 + 20 >> 2] = 135651;
      $0 = (HEAPU8[$3 + 257 | 0] | HEAPU8[$3 + 258 | 0] << 8) & -8192 | 1;
      HEAP8[$3 + 257 | 0] = $0;
      HEAP8[$3 + 258 | 0] = $0 >>> 8;
      if (HEAP8[$3 + 215 | 0] & 1) {
       jsvUnLock2(HEAP32[$3 + 32 >> 2], HEAP32[$3 + 28 >> 2]);
       HEAP32[$3 + 28 >> 2] = jswrap_graphics_wrapString(HEAP32[$3 + 312 >> 2], HEAP32[$3 + 308 >> 2], HEAP32[$3 + 228 >> 2]);
       HEAP32[$3 + 32 >> 2] = jsvArrayJoin(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], 1);
      }
      _jswrap_graphics_stringMetrics($3 + 232 | 0, HEAP32[$3 + 32 >> 2], -1, $3 + 36 | 0);
     }
     graphicsSetVar($3 + 232 | 0);
     jsvUnLock(HEAP32[$3 + 16 >> 2]);
    }
   }
   if (!(!(HEAP8[$3 + 214 | 0] & 1) | HEAP32[$3 + 40 >> 2] <= HEAP32[$3 + 224 >> 2])) {
    HEAP32[$3 + 12 >> 2] = jsvNewFromInteger(HEAP32[$3 + 224 >> 2] / HEAP32[$3 + 44 >> 2] | 0);
    if (!HEAP32[$3 + 28 >> 2]) {
     HEAP32[$3 + 28 >> 2] = jswrap_string_split(HEAP32[$3 + 32 >> 2], HEAP32[$3 + 24 >> 2])
    }
    HEAP32[$3 + 8 >> 2] = jswrap_array_slice(HEAP32[$3 + 28 >> 2], 0, HEAP32[$3 + 12 >> 2]);
    jsvUnLock2(HEAP32[$3 + 32 >> 2], HEAP32[$3 + 12 >> 2]);
    HEAP32[$3 + 32 >> 2] = jsvArrayJoin(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 24 >> 2], 1);
    jsvUnLock(HEAP32[$3 + 8 >> 2]);
    jsvAppendString(HEAP32[$3 + 32 >> 2], 142481);
    _jswrap_graphics_stringMetrics($3 + 232 | 0, HEAP32[$3 + 32 >> 2], -1, $3 + 36 | 0);
   }
   jsvUnLock3(HEAP32[$3 + 308 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 28 >> 2]);
   jsvObjectSetChildAndUnLock(HEAP32[$3 + 208 >> 2], 124353, HEAP32[$3 + 32 >> 2]);
   jsvObjectSetChildAndUnLock(HEAP32[$3 + 208 >> 2], 124680, jsvNewFromString(HEAP32[$3 + 20 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$3 + 208 >> 2], 124222, jsvNewFromInteger(HEAP32[$3 + 36 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$3 + 208 >> 2], 136443, jsvNewFromInteger(HEAP32[$3 + 40 >> 2]));
   HEAP32[$3 + 316 >> 2] = HEAP32[$3 + 208 >> 2];
  }
  __stack_pointer = $3 + 320 | 0;
  return HEAP32[$3 + 316 >> 2];
 }
 
 function jswrap_graphics_drawString($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 432 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 424 >> 2] = $0;
  HEAP32[$5 + 420 >> 2] = $1;
  HEAP32[$5 + 416 >> 2] = $2;
  HEAP32[$5 + 412 >> 2] = $3;
  HEAP8[$5 + 411 | 0] = $4;
  block : {
   if (!(graphicsGetFromVar($5 + 339 | 0, HEAP32[$5 + 424 >> 2]) & 1)) {
    HEAP32[$5 + 428 >> 2] = 0;
    break block;
   }
   _jswrap_graphics_getFontInfo($5 + 339 | 0, $5 + 316 | 0);
   HEAP32[$5 + 312 >> 2] = _jswrap_graphics_getFontHeightInternal($5 + 339 | 0, $5 + 316 | 0);
   HEAP32[$5 + 308 >> 2] = 1;
   if (HEAP32[$5 + 316 >> 2] & 32768) {
    if ((HEAP32[$5 + 316 >> 2] & 57344) == 40960) {
     HEAP32[$5 + 308 >> 2] = 2
    }
    if ((HEAP32[$5 + 316 >> 2] & 57344) == 49152) {
     HEAP32[$5 + 308 >> 2] = 4
    }
   }
   HEAP32[$5 + 304 >> 2] = HEAPU8[$5 + 347 | 0] | HEAPU8[$5 + 348 | 0] << 8 | (HEAPU8[$5 + 349 | 0] << 16 | HEAPU8[$5 + 350 | 0] << 24);
   block1 : {
    if ((HEAPU8[$5 + 370 | 0] >>> 4 & 3) == 1) {
     $0 = (HEAPU8[$5 + 347 | 0] | HEAPU8[$5 + 348 | 0] << 8 | (HEAPU8[$5 + 349 | 0] << 16 | HEAPU8[$5 + 350 | 0] << 24)) ^ 48;
     HEAP8[$5 + 347 | 0] = $0;
     HEAP8[$5 + 348 | 0] = $0 >>> 8;
     HEAP8[$5 + 349 | 0] = $0 >>> 16;
     HEAP8[$5 + 350 | 0] = $0 >>> 24;
     HEAP32[$5 + 300 >> 2] = (HEAPU8[$5 + 351 | 0] | HEAPU8[$5 + 352 | 0] << 8) - (HEAP32[$5 + 416 >> 2] + 1 | 0);
     HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 412 >> 2];
     HEAP32[$5 + 412 >> 2] = HEAP32[$5 + 300 >> 2];
     break block1;
    }
    block2 : {
     if ((HEAPU8[$5 + 370 | 0] >>> 4 & 3) == 2) {
      $0 = (HEAPU8[$5 + 347 | 0] | HEAPU8[$5 + 348 | 0] << 8 | (HEAPU8[$5 + 349 | 0] << 16 | HEAPU8[$5 + 350 | 0] << 24)) ^ 96;
      HEAP8[$5 + 347 | 0] = $0;
      HEAP8[$5 + 348 | 0] = $0 >>> 8;
      HEAP8[$5 + 349 | 0] = $0 >>> 16;
      HEAP8[$5 + 350 | 0] = $0 >>> 24;
      HEAP32[$5 + 416 >> 2] = (HEAPU8[$5 + 351 | 0] | HEAPU8[$5 + 352 | 0] << 8) - (HEAP32[$5 + 416 >> 2] + 1 | 0);
      HEAP32[$5 + 412 >> 2] = (HEAPU8[$5 + 353 | 0] | HEAPU8[$5 + 354 | 0] << 8) - (HEAP32[$5 + 412 >> 2] + 1 | 0);
      break block2;
     }
     if ((HEAPU8[$5 + 370 | 0] >>> 4 & 3) == 3) {
      $0 = (HEAPU8[$5 + 347 | 0] | HEAPU8[$5 + 348 | 0] << 8 | (HEAPU8[$5 + 349 | 0] << 16 | HEAPU8[$5 + 350 | 0] << 24)) ^ 80;
      HEAP8[$5 + 347 | 0] = $0;
      HEAP8[$5 + 348 | 0] = $0 >>> 8;
      HEAP8[$5 + 349 | 0] = $0 >>> 16;
      HEAP8[$5 + 350 | 0] = $0 >>> 24;
      HEAP32[$5 + 296 >> 2] = (HEAPU8[$5 + 353 | 0] | HEAPU8[$5 + 354 | 0] << 8) - (HEAP32[$5 + 412 >> 2] + 1 | 0);
      HEAP32[$5 + 412 >> 2] = HEAP32[$5 + 416 >> 2];
      HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 296 >> 2];
     }
    }
   }
   HEAP32[$5 + 292 >> 2] = jsvAsString(HEAP32[$5 + 420 >> 2]);
   HEAP32[$5 + 288 >> 2] = HEAP32[$5 + 416 >> 2];
   if ((HEAPU8[$5 + 370 | 0] & 3) >>> 0 < 2) {
    HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 288 >> 2] - ((Math_imul(_jswrap_graphics_stringWidth($5 + 339 | 0, HEAP32[$5 + 292 >> 2], 0), (HEAPU8[$5 + 370 | 0] & 3) + 1 | 0) | 0) / 2 | 0)
   }
   if ((HEAPU8[$5 + 370 | 0] >>> 2 & 3) >>> 0 < 2) {
    _jswrap_graphics_stringMetrics($5 + 339 | 0, HEAP32[$5 + 292 >> 2], -1, $5 + 264 | 0);
    HEAP32[$5 + 412 >> 2] = HEAP32[$5 + 412 >> 2] - ((Math_imul(HEAP32[$5 + 268 >> 2], (HEAPU8[$5 + 370 | 0] >>> 2 & 3) + 1 | 0) | 0) / 2 | 0);
   }
   HEAP32[$5 + 260 >> 2] = HEAPU8[$5 + 371 | 0] | HEAPU8[$5 + 372 | 0] << 8;
   HEAP32[$5 + 256 >> 2] = HEAPU8[$5 + 373 | 0] | HEAPU8[$5 + 374 | 0] << 8;
   HEAP32[$5 + 252 >> 2] = HEAPU8[$5 + 375 | 0] | HEAPU8[$5 + 376 | 0] << 8;
   HEAP32[$5 + 248 >> 2] = HEAPU8[$5 + 377 | 0] | HEAPU8[$5 + 378 | 0] << 8;
   deviceToGraphicsCoordinates($5 + 339 | 0, $5 + 260 | 0, $5 + 256 | 0);
   deviceToGraphicsCoordinates($5 + 339 | 0, $5 + 252 | 0, $5 + 248 | 0);
   if (HEAP32[$5 + 252 >> 2] < HEAP32[$5 + 260 >> 2]) {
    HEAP32[$5 + 244 >> 2] = HEAP32[$5 + 260 >> 2];
    HEAP32[$5 + 260 >> 2] = HEAP32[$5 + 252 >> 2];
    HEAP32[$5 + 252 >> 2] = HEAP32[$5 + 244 >> 2];
   }
   if (HEAP32[$5 + 248 >> 2] < HEAP32[$5 + 256 >> 2]) {
    HEAP32[$5 + 240 >> 2] = HEAP32[$5 + 256 >> 2];
    HEAP32[$5 + 256 >> 2] = HEAP32[$5 + 248 >> 2];
    HEAP32[$5 + 248 >> 2] = HEAP32[$5 + 240 >> 2];
   }
   jsvStringIteratorNewUTF8($5 + 204 | 0, HEAP32[$5 + 292 >> 2], 0);
   while (1) {
    if (jsvStringIteratorHasChar_1840($5 + 204 | 0) & 1) {
     HEAP32[$5 + 200 >> 2] = jsvStringIteratorGetUTF8CharAndNext($5 + 204 | 0);
     if (HEAP32[$5 + 200 >> 2] == 10) {
      HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 288 >> 2];
      if ((HEAPU8[$5 + 370 | 0] & 3) >>> 0 < 2) {
       $0 = HEAP32[$5 + 292 >> 2];
       HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 288 >> 2] - ((Math_imul(_jswrap_graphics_stringWidth($5 + 339 | 0, $0, jsvConvertToUTF8Index($0, jsvStringIteratorGetIndex_1884($5 + 204 | 0))), (HEAPU8[$5 + 370 | 0] & 3) + 1 | 0) | 0) / 2 | 0);
      }
      HEAP32[$5 + 412 >> 2] = HEAP32[$5 + 312 >> 2] + HEAP32[$5 + 412 >> 2];
      continue;
     }
     if (!HEAP32[$5 + 200 >> 2]) {
      HEAP32[$5 + 112 >> 2] = jsvConvertToUTF8Index(HEAP32[$5 + 292 >> 2], jsvStringIteratorGetIndex_1884($5 + 204 | 0));
      if (_jswrap_graphics_parseImage($5 + 339 | 0, HEAP32[$5 + 292 >> 2], HEAP32[$5 + 112 >> 2], $5 + 116 | 0) & 1) {
       jsvStringIteratorGotoUTF8($5 + 204 | 0, HEAP32[$5 + 292 >> 2], HEAP32[$5 + 112 >> 2] + HEAPU16[$5 + 164 >> 1] | 0);
       _jswrap_drawImageSimple($5 + 339 | 0, HEAP32[$5 + 416 >> 2], HEAP32[$5 + 412 >> 2] + ((HEAP32[$5 + 312 >> 2] - HEAP32[$5 + 120 >> 2] | 0) / 2 | 0) | 0, $5 + 116 | 0, $5 + 204 | 0, 1);
       _jswrap_graphics_freeImageInfo($5 + 116 | 0);
       HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 116 >> 2] + HEAP32[$5 + 416 >> 2];
      }
      continue;
     }
     block5 : {
      if (!(HEAP32[$5 + 316 >> 2] | HEAP32[$5 + 200 >> 2] >= 256)) {
       HEAP32[$5 + 108 >> 2] = graphicsVectorCharWidth(HEAPU16[$5 + 322 >> 1], HEAP32[$5 + 200 >> 2] << 24 >> 24);
       if (!(HEAP32[$5 + 416 >> 2] <= (HEAP32[$5 + 260 >> 2] - HEAP32[$5 + 108 >> 2] | 0) | HEAP32[$5 + 416 >> 2] >= HEAP32[$5 + 252 >> 2] | (HEAP32[$5 + 412 >> 2] <= (HEAP32[$5 + 256 >> 2] - HEAP32[$5 + 312 >> 2] | 0) | HEAP32[$5 + 412 >> 2] > HEAP32[$5 + 248 >> 2]))) {
        if (HEAP8[$5 + 411 | 0] & 1) {
         graphicsFillRect($5 + 339 | 0, HEAP32[$5 + 416 >> 2], HEAP32[$5 + 412 >> 2], (HEAP32[$5 + 416 >> 2] + HEAP32[$5 + 108 >> 2] | 0) - 1 | 0, (HEAP32[$5 + 412 >> 2] + HEAP32[$5 + 312 >> 2] | 0) - 1 | 0, HEAPU8[$5 + 360 | 0] | HEAPU8[$5 + 361 | 0] << 8 | (HEAPU8[$5 + 362 | 0] << 16 | HEAPU8[$5 + 363 | 0] << 24))
        }
        graphicsGetVectorChar(659, $5 + 339 | 0, HEAP32[$5 + 416 >> 2], HEAP32[$5 + 412 >> 2], HEAPU16[$5 + 322 >> 1], HEAPU16[$5 + 324 >> 1], HEAP32[$5 + 200 >> 2] << 24 >> 24);
       }
       HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 108 >> 2] + HEAP32[$5 + 416 >> 2];
       break block5;
      }
      block8 : {
       if (!(HEAP32[$5 + 316 >> 2] != 8192 | HEAP32[$5 + 200 >> 2] >= 256)) {
        if (!(HEAP32[$5 + 416 >> 2] <= (HEAP32[$5 + 260 >> 2] - (HEAPU16[$5 + 322 >> 1] << 2) | 0) | HEAP32[$5 + 416 >> 2] >= HEAP32[$5 + 252 >> 2] | (HEAP32[$5 + 412 >> 2] <= (HEAP32[$5 + 256 >> 2] - HEAP32[$5 + 312 >> 2] | 0) | HEAP32[$5 + 412 >> 2] > HEAP32[$5 + 248 >> 2]))) {
         graphicsDrawChar4x6($5 + 339 | 0, HEAP32[$5 + 416 >> 2], HEAP32[$5 + 412 >> 2], HEAP32[$5 + 200 >> 2] << 24 >> 24, HEAPU16[$5 + 322 >> 1], HEAPU16[$5 + 324 >> 1], HEAP8[$5 + 411 | 0] & 1)
        }
        HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 416 >> 2] + (HEAPU16[$5 + 322 >> 1] << 2);
        break block8;
       }
       block10 : {
        if (HEAP32[$5 + 316 >> 2] == 16384) {
         if (!(HEAP32[$5 + 416 >> 2] <= (HEAP32[$5 + 260 >> 2] - Math_imul(HEAPU16[$5 + 322 >> 1], 6) | 0) | HEAP32[$5 + 416 >> 2] >= HEAP32[$5 + 252 >> 2] | (HEAP32[$5 + 412 >> 2] <= (HEAP32[$5 + 256 >> 2] - HEAP32[$5 + 312 >> 2] | 0) | HEAP32[$5 + 412 >> 2] > HEAP32[$5 + 248 >> 2]))) {
          graphicsDrawChar6x8($5 + 339 | 0, HEAP32[$5 + 416 >> 2], HEAP32[$5 + 412 >> 2], HEAP32[$5 + 200 >> 2] << 24 >> 24, HEAPU16[$5 + 322 >> 1], HEAPU16[$5 + 324 >> 1], HEAP8[$5 + 411 | 0] & 1)
         }
         HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 416 >> 2] + Math_imul(HEAPU16[$5 + 322 >> 1], 6);
         break block10;
        }
        if (!(!(HEAP32[$5 + 316 >> 2] & 32768) | HEAP32[$5 + 200 >> 2] >= 256)) {
         HEAP32[$5 + 104 >> 2] = (1 << HEAP32[$5 + 308 >> 2]) - 1;
         HEAP32[$5 + 100 >> 2] = 0;
         HEAP32[$5 + 96 >> 2] = 0;
         block12 : {
          if (jsvIsString(HEAP32[$5 + 328 >> 2]) & 1) {
           if (HEAP32[$5 + 200 >> 2] >= HEAPU8[$5 + 326 | 0]) {
            jsvStringIteratorNew($5 + 60 | 0, HEAP32[$5 + 328 >> 2], 0);
            while (1) {
             $0 = 0;
             if (jsvStringIteratorHasChar_1840($5 + 60 | 0) & 1) {
              $0 = (jsvStringIteratorGetIndex_1884($5 + 60 | 0) | 0) < (HEAP32[$5 + 200 >> 2] - HEAPU8[$5 + 326 | 0] | 0)
             }
             if ($0) {
              HEAP32[$5 + 96 >> 2] = (jsvStringIteratorGetCharAndNext($5 + 60 | 0) & 255) + HEAP32[$5 + 96 >> 2];
              continue;
             }
             break;
            };
            HEAP32[$5 + 100 >> 2] = jsvStringIteratorGetChar_1832($5 + 60 | 0) & 255;
            jsvStringIteratorFree_1830($5 + 60 | 0);
           }
           break block12;
          }
          HEAP32[$5 + 100 >> 2] = jsvGetInteger(HEAP32[$5 + 328 >> 2]);
          HEAP32[$5 + 96 >> 2] = Math_imul(HEAP32[$5 + 100 >> 2], HEAP32[$5 + 200 >> 2] - HEAPU8[$5 + 326 | 0] | 0);
         }
         block13 : {
          if (HEAP32[$5 + 200 >> 2] < HEAPU8[$5 + 326 | 0] | HEAP32[$5 + 416 >> 2] <= (HEAP32[$5 + 260 >> 2] - Math_imul(HEAP32[$5 + 100 >> 2], HEAPU16[$5 + 322 >> 1]) | 0) | (HEAP32[$5 + 412 >> 2] <= (HEAP32[$5 + 256 >> 2] - HEAP32[$5 + 312 >> 2] | 0) | HEAP32[$5 + 416 >> 2] >= HEAP32[$5 + 252 >> 2])) {
           break block13
          }
          if (HEAP32[$5 + 412 >> 2] > HEAP32[$5 + 248 >> 2]) {
           break block13
          }
          HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 312 >> 2] / HEAPU16[$5 + 324 >> 1];
          HEAP32[$5 + 96 >> 2] = Math_imul(HEAP32[$5 + 96 >> 2], Math_imul(HEAP32[$5 + 56 >> 2], HEAP32[$5 + 308 >> 2]));
          jsvStringIteratorNew($5 + 20 | 0, HEAP32[$5 + 332 >> 2], HEAP32[$5 + 96 >> 2] >> 3);
          HEAP32[$5 + 96 >> 2] = HEAP32[$5 + 96 >> 2] & 7;
          HEAP32[$5 + 8 >> 2] = jsvStringIteratorGetChar_1832($5 + 20 | 0) << 24 >> 24;
          HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] << Math_imul(HEAP32[$5 + 308 >> 2], HEAP32[$5 + 96 >> 2]);
          HEAP32[$5 + 16 >> 2] = 0;
          while (1) {
           if (HEAP32[$5 + 16 >> 2] < HEAP32[$5 + 100 >> 2]) {
            HEAP32[$5 + 12 >> 2] = 0;
            while (1) {
             if (HEAP32[$5 + 12 >> 2] < HEAP32[$5 + 56 >> 2]) {
              HEAP32[$5 + 4 >> 2] = (HEAP32[$5 + 8 >> 2] & 255) >> 8 - HEAP32[$5 + 308 >> 2];
              if (HEAP8[$5 + 411 | 0] & 1 | HEAP32[$5 + 4 >> 2]) {
               graphicsFillRect($5 + 339 | 0, HEAP32[$5 + 416 >> 2] + Math_imul(HEAP32[$5 + 16 >> 2], HEAPU16[$5 + 322 >> 1]) | 0, HEAP32[$5 + 412 >> 2] + Math_imul(HEAP32[$5 + 12 >> 2], HEAPU16[$5 + 324 >> 1]) | 0, (HEAPU16[$5 + 322 >> 1] + (HEAP32[$5 + 416 >> 2] + Math_imul(HEAP32[$5 + 16 >> 2], HEAPU16[$5 + 322 >> 1]) | 0) | 0) - 1 | 0, (HEAPU16[$5 + 324 >> 1] + (HEAP32[$5 + 412 >> 2] + Math_imul(HEAP32[$5 + 12 >> 2], HEAPU16[$5 + 324 >> 1]) | 0) | 0) - 1 | 0, graphicsBlendGfxColor($5 + 339 | 0, (HEAP32[$5 + 4 >> 2] << 8) / HEAP32[$5 + 104 >> 2] | 0))
              }
              HEAP32[$5 + 96 >> 2] = HEAP32[$5 + 308 >> 2] + HEAP32[$5 + 96 >> 2];
              HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] << HEAP32[$5 + 308 >> 2];
              if (HEAP32[$5 + 96 >> 2] >= 8) {
               HEAP32[$5 + 96 >> 2] = 0;
               jsvStringIteratorNext($5 + 20 | 0);
               HEAP32[$5 + 8 >> 2] = jsvStringIteratorGetChar_1832($5 + 20 | 0) << 24 >> 24;
              }
              HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 12 >> 2] + 1;
              continue;
             }
             break;
            };
            HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
            continue;
           }
           break;
          };
          jsvStringIteratorFree_1830($5 + 20 | 0);
         }
         HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 416 >> 2] + Math_imul(HEAP32[$5 + 100 >> 2], HEAPU16[$5 + 322 >> 1]);
        }
       }
      }
     }
     if (!(jspIsInterrupted() & 1)) {
      continue
     }
    }
    break;
   };
   jsvStringIteratorFree_1830($5 + 204 | 0);
   jsvUnLock(HEAP32[$5 + 292 >> 2]);
   $0 = HEAP32[$5 + 304 >> 2];
   HEAP8[$5 + 347 | 0] = $0;
   HEAP8[$5 + 348 | 0] = $0 >>> 8;
   HEAP8[$5 + 349 | 0] = $0 >>> 16;
   HEAP8[$5 + 350 | 0] = $0 >>> 24;
   graphicsSetVar($5 + 339 | 0);
   _jswrap_graphics_freeFontInfo($5 + 316 | 0);
   HEAP32[$5 + 428 >> 2] = jsvLockAgain(HEAP32[$5 + 424 >> 2]);
  }
  __stack_pointer = $5 + 432 | 0;
  return HEAP32[$5 + 428 >> 2];
 }
 
 function jswrap_graphics_drawCString($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  HEAP32[$4 + 12 >> 2] = jsvNewFromString(HEAP32[$4 + 16 >> 2]);
  $0 = HEAP32[$4 + 28 >> 2];
  jsvUnLock2(jswrap_graphics_drawString(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), HEAP32[$4 + 12 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], 0), HEAP32[$4 + 12 >> 2]);
  __stack_pointer = $4 + 32 | 0;
 }
 
 function _jswrap_graphics_getVectorFontPolys_cb($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $0;
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $2;
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 28 >> 2];
  block : {
   if (!HEAP32[$3 + 16 >> 2]) {
    break block
   }
   HEAP32[$3 + 12 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 12 >> 2] < HEAP32[$3 + 24 >> 2] << 1) {
     HEAP16[HEAP32[$3 + 20 >> 2] + (HEAP32[$3 + 12 >> 2] << 1) >> 1] = (HEAP16[HEAP32[$3 + 20 >> 2] + (HEAP32[$3 + 12 >> 2] << 1) >> 1] << 16 >> 16) + 8 << 16 >> 16 >> 4;
     HEAP16[HEAP32[$3 + 20 >> 2] + (HEAP32[$3 + 12 >> 2] + 1 << 1) >> 1] = (HEAP16[HEAP32[$3 + 20 >> 2] + (HEAP32[$3 + 12 >> 2] + 1 << 1) >> 1] << 16 >> 16) + 8 << 16 >> 16 >> 4;
     HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 2;
     continue;
    }
    break;
   };
   HEAP32[$3 + 8 >> 2] = jsvNewTypedArray(18, HEAP32[$3 + 24 >> 2] << 1);
   if (!HEAP32[$3 + 8 >> 2]) {
    break block
   }
   HEAP32[$3 + 4 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$3 + 8 >> 2], 0);
   if (HEAP32[$3 + 4 >> 2]) {
    jsvSetString(HEAP32[$3 + 4 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 24 >> 2] << 2);
    jsvUnLock(HEAP32[$3 + 4 >> 2]);
   }
   jsvArrayPushAndUnLock(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 8 >> 2]);
  }
  __stack_pointer = $3 + 32 | 0;
 }
 
 function jswrap_graphics_getVectorFontPolys($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 128 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 124 >> 2] = $0;
  HEAP32[$3 + 120 >> 2] = $1;
  HEAP32[$3 + 116 >> 2] = $2;
  HEAP32[$3 + 112 >> 2] = 0;
  HEAP32[$3 + 108 >> 2] = 0;
  HEAP32[$3 + 104 >> 2] = 256;
  HEAP32[$3 + 100 >> 2] = 256;
  HEAP32[$3 + 48 >> 2] = 124025;
  HEAP16[$3 + 52 >> 1] = 10;
  HEAP16[($3 + 48 | 0) + 6 >> 1] = 0;
  HEAP32[$3 + 56 >> 2] = $3 + 112;
  HEAP32[$3 + 60 >> 2] = 123896;
  HEAP16[$3 + 64 >> 1] = 10;
  HEAP16[($3 + 48 | 0) + 18 >> 1] = 0;
  HEAP32[$3 + 68 >> 2] = $3 + 108;
  HEAP32[$3 + 72 >> 2] = 124222;
  HEAP16[$3 + 76 >> 1] = 10;
  HEAP16[($3 + 48 | 0) + 30 >> 1] = 0;
  HEAP32[$3 + 80 >> 2] = $3 + 104;
  HEAP32[$3 + 84 >> 2] = 136443;
  HEAP16[$3 + 88 >> 1] = 10;
  HEAP16[($3 + 48 | 0) + 42 >> 1] = 0;
  HEAP32[$3 + 92 >> 2] = $3 + 100;
  jsvReadConfigObject(HEAP32[$3 + 116 >> 2], $3 + 48 | 0, 4);
  HEAP32[$3 + 120 >> 2] = jsvAsString(HEAP32[$3 + 120 >> 2]);
  HEAP32[$3 + 44 >> 2] = jsvNewEmptyArray();
  jsvStringIteratorNew($3 + 8 | 0, HEAP32[$3 + 120 >> 2], 0);
  while (1) {
   if (jsvStringIteratorHasChar_1840($3 + 8 | 0) & 1) {
    HEAP8[$3 + 7 | 0] = jsvStringIteratorGetCharAndNext($3 + 8 | 0);
    HEAP32[$3 + 112 >> 2] = graphicsGetVectorChar(660, HEAP32[$3 + 44 >> 2], HEAP32[$3 + 112 >> 2], HEAP32[$3 + 108 >> 2], HEAP32[$3 + 104 >> 2], HEAP32[$3 + 100 >> 2], HEAP8[$3 + 7 | 0] << 24 >> 24) + HEAP32[$3 + 112 >> 2];
    continue;
   }
   break;
  };
  jsvStringIteratorFree_1830($3 + 8 | 0);
  jsvUnLock(HEAP32[$3 + 120 >> 2]);
  __stack_pointer = $3 + 128 | 0;
  return HEAP32[$3 + 44 >> 2];
 }
 
 function jswrap_graphics_drawLine($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 96 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 88 >> 2] = $0;
  HEAP32[$5 + 84 >> 2] = $1;
  HEAP32[$5 + 80 >> 2] = $2;
  HEAP32[$5 + 76 >> 2] = $3;
  HEAP32[$5 + 72 >> 2] = $4;
  block : {
   if (!(graphicsGetFromVar($5, HEAP32[$5 + 88 >> 2]) & 1)) {
    HEAP32[$5 + 92 >> 2] = 0;
    break block;
   }
   graphicsDrawLine($5, HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2], HEAP32[$5 + 72 >> 2]);
   graphicsSetVar($5);
   HEAP32[$5 + 92 >> 2] = jsvLockAgain(HEAP32[$5 + 88 >> 2]);
  }
  __stack_pointer = $5 + 96 | 0;
  return HEAP32[$5 + 92 >> 2];
 }
 
 function jswrap_graphics_drawLineAA($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = __stack_pointer - 112 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 104 >> 2] = $0;
  HEAPF64[$5 + 96 >> 3] = $1;
  HEAPF64[$5 + 88 >> 3] = $2;
  HEAPF64[$5 + 80 >> 3] = $3;
  HEAPF64[$5 + 72 >> 3] = $4;
  block : {
   if (!(graphicsGetFromVar($5, HEAP32[$5 + 104 >> 2]) & 1)) {
    HEAP32[$5 + 108 >> 2] = 0;
    break block;
   }
   $1 = HEAPF64[$5 + 96 >> 3] * 16.0 + .5;
   if (Math_abs($1) < 2147483647.0) {
    $6 = ~~$1
   } else {
    $6 = -2147483648
   }
   $1 = HEAPF64[$5 + 88 >> 3] * 16.0 + .5;
   if (Math_abs($1) < 2147483647.0) {
    $7 = ~~$1
   } else {
    $7 = -2147483648
   }
   $1 = HEAPF64[$5 + 80 >> 3] * 16.0 + .5;
   if (Math_abs($1) < 2147483647.0) {
    $0 = ~~$1
   } else {
    $0 = -2147483648
   }
   $1 = HEAPF64[$5 + 72 >> 3] * 16.0 + .5;
   if (Math_abs($1) < 2147483647.0) {
    $8 = ~~$1
   } else {
    $8 = -2147483648
   }
   graphicsDrawLineAA($5, $6, $7, $0, $8);
   graphicsSetVar($5);
   HEAP32[$5 + 108 >> 2] = jsvLockAgain(HEAP32[$5 + 104 >> 2]);
  }
  __stack_pointer = $5 + 112 | 0;
  return HEAP32[$5 + 108 >> 2];
 }
 
 function jswrap_graphics_lineTo($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 96 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 88 >> 2] = $0;
  HEAP32[$3 + 84 >> 2] = $1;
  HEAP32[$3 + 80 >> 2] = $2;
  block : {
   if (!(graphicsGetFromVar($3 + 8 | 0, HEAP32[$3 + 88 >> 2]) & 1)) {
    HEAP32[$3 + 92 >> 2] = 0;
    break block;
   }
   graphicsDrawLine($3 + 8 | 0, (HEAPU8[$3 + 35 | 0] | HEAPU8[$3 + 36 | 0] << 8) << 16 >> 16, (HEAPU8[$3 + 37 | 0] | HEAPU8[$3 + 38 | 0] << 8) << 16 >> 16, HEAP32[$3 + 84 >> 2], HEAP32[$3 + 80 >> 2]);
   $0 = HEAP32[$3 + 84 >> 2];
   HEAP8[$3 + 35 | 0] = $0;
   HEAP8[$3 + 36 | 0] = $0 >>> 8;
   $0 = HEAP32[$3 + 80 >> 2];
   HEAP8[$3 + 37 | 0] = $0;
   HEAP8[$3 + 38 | 0] = $0 >>> 8;
   graphicsSetVar($3 + 8 | 0);
   HEAP32[$3 + 92 >> 2] = jsvLockAgain(HEAP32[$3 + 88 >> 2]);
  }
  __stack_pointer = $3 + 96 | 0;
  return HEAP32[$3 + 92 >> 2];
 }
 
 function jswrap_graphics_moveTo($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 96 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 88 >> 2] = $0;
  HEAP32[$3 + 84 >> 2] = $1;
  HEAP32[$3 + 80 >> 2] = $2;
  block : {
   if (!(graphicsGetFromVar($3 + 8 | 0, HEAP32[$3 + 88 >> 2]) & 1)) {
    HEAP32[$3 + 92 >> 2] = 0;
    break block;
   }
   $0 = HEAP32[$3 + 84 >> 2];
   HEAP8[$3 + 35 | 0] = $0;
   HEAP8[$3 + 36 | 0] = $0 >>> 8;
   $0 = HEAP32[$3 + 80 >> 2];
   HEAP8[$3 + 37 | 0] = $0;
   HEAP8[$3 + 38 | 0] = $0 >>> 8;
   graphicsSetVar($3 + 8 | 0);
   HEAP32[$3 + 92 >> 2] = jsvLockAgain(HEAP32[$3 + 88 >> 2]);
  }
  __stack_pointer = $3 + 96 | 0;
  return HEAP32[$3 + 92 >> 2];
 }
 
 function jswrap_graphics_drawPoly_X($0, $1, $2, $3) {
  var $4 = 0, $5 = 0.0;
  $4 = __stack_pointer - 192 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 184 >> 2] = $0;
  HEAP32[$4 + 180 >> 2] = $1;
  HEAP8[$4 + 179 | 0] = $2;
  HEAP8[$4 + 178 | 0] = $3;
  block : {
   if (!(graphicsGetFromVar($4 + 106 | 0, HEAP32[$4 + 184 >> 2]) & 1)) {
    HEAP32[$4 + 188 >> 2] = 0;
    break block;
   }
   if (!(jsvIsIterable(HEAP32[$4 + 180 >> 2]) & 1)) {
    HEAP32[$4 + 188 >> 2] = 0;
    break block;
   }
   block1 : {
    if (HEAP8[$4 + 178 | 0] & 1) {
     HEAP32[$4 + 100 >> 2] = 16;
     HEAP32[$4 + 96 >> 2] = 661;
     break block1;
    }
    HEAP32[$4 + 100 >> 2] = 1;
    HEAP32[$4 + 96 >> 2] = 662;
   }
   HEAP32[$4 + 76 >> 2] = 0;
   jsvIteratorNew($4 + 16 | 0, HEAP32[$4 + 180 >> 2], 1);
   while (1) {
    block2 : {
     if (!(jsvIteratorHasElement($4 + 16 | 0) & 1)) {
      break block2
     }
     $5 = jsvIteratorGetFloatValue($4 + 16 | 0) * +HEAP32[$4 + 100 >> 2] + .5;
     if (Math_abs($5) < 2147483647.0) {
      $0 = ~~$5
     } else {
      $0 = -2147483648
     }
     HEAP32[$4 + 12 >> 2] = $0;
     jsvIteratorNext($4 + 16 | 0);
     if (!(jsvIteratorHasElement($4 + 16 | 0) & 1)) {
      break block2
     }
     $5 = jsvIteratorGetFloatValue($4 + 16 | 0) * +HEAP32[$4 + 100 >> 2] + .5;
     if (Math_abs($5) < 2147483647.0) {
      $0 = ~~$5
     } else {
      $0 = -2147483648
     }
     HEAP32[$4 + 8 >> 2] = $0;
     jsvIteratorNext($4 + 16 | 0);
     block3 : {
      if (!HEAP32[$4 + 76 >> 2]) {
       HEAP32[$4 + 84 >> 2] = HEAP32[$4 + 12 >> 2];
       HEAP32[$4 + 80 >> 2] = HEAP32[$4 + 8 >> 2];
       break block3;
      }
      FUNCTION_TABLE[HEAP32[$4 + 96 >> 2]]($4 + 106 | 0, HEAP32[$4 + 92 >> 2], HEAP32[$4 + 88 >> 2], HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2]);
     }
     HEAP32[$4 + 92 >> 2] = HEAP32[$4 + 12 >> 2];
     HEAP32[$4 + 88 >> 2] = HEAP32[$4 + 8 >> 2];
     HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 76 >> 2] + 1;
     continue;
    }
    break;
   };
   jsvIteratorFree($4 + 16 | 0);
   $0 = HEAP32[$4 + 92 >> 2] / HEAP32[$4 + 100 >> 2] | 0;
   HEAP8[$4 + 133 | 0] = $0;
   HEAP8[$4 + 134 | 0] = $0 >>> 8;
   $0 = HEAP32[$4 + 88 >> 2] / HEAP32[$4 + 100 >> 2] | 0;
   HEAP8[$4 + 135 | 0] = $0;
   HEAP8[$4 + 136 | 0] = $0 >>> 8;
   if (HEAP8[$4 + 179 | 0] & 1) {
    FUNCTION_TABLE[HEAP32[$4 + 96 >> 2]]($4 + 106 | 0, HEAP32[$4 + 92 >> 2], HEAP32[$4 + 88 >> 2], HEAP32[$4 + 84 >> 2], HEAP32[$4 + 80 >> 2])
   }
   graphicsSetVar($4 + 106 | 0);
   HEAP32[$4 + 188 >> 2] = jsvLockAgain(HEAP32[$4 + 184 >> 2]);
  }
  __stack_pointer = $4 + 192 | 0;
  return HEAP32[$4 + 188 >> 2];
 }
 
 function jswrap_graphics_fillPoly_X($0, $1, $2) {
  var $3 = 0, $4 = 0.0;
  $3 = __stack_pointer - 192 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 184 >> 2] = $0;
  HEAP32[$3 + 180 >> 2] = $1;
  HEAP8[$3 + 179 | 0] = $2;
  block : {
   if (!(graphicsGetFromVar($3 + 107 | 0, HEAP32[$3 + 184 >> 2]) & 1)) {
    HEAP32[$3 + 188 >> 2] = 0;
    break block;
   }
   if (!(jsvIsIterable(HEAP32[$3 + 180 >> 2]) & 1)) {
    HEAP32[$3 + 188 >> 2] = 0;
    break block;
   }
   HEAP32[$3 + 100 >> 2] = 128;
   HEAP32[$3 + 96 >> 2] = $3;
   $0 = $3 - 256 | 0;
   __stack_pointer = $0;
   HEAP32[$3 + 92 >> 2] = 0;
   jsvIteratorNew($3 + 32 | 0, HEAP32[$3 + 180 >> 2], 1);
   while (1) {
    $1 = 0;
    if (jsvIteratorHasElement($3 + 32 | 0) & 1) {
     $1 = HEAP32[$3 + 92 >> 2] < 128
    }
    if ($1) {
     $4 = jsvIteratorGetFloatValue($3 + 32 | 0) * 16.0 + .5;
     if (Math_abs($4) < 2147483647.0) {
      $1 = ~~$4
     } else {
      $1 = -2147483648
     }
     HEAP32[$3 + 28 >> 2] = $1;
     if (HEAP32[$3 + 28 >> 2] < -32768) {
      HEAP32[$3 + 28 >> 2] = -32768
     }
     if (HEAP32[$3 + 28 >> 2] > 32767) {
      HEAP32[$3 + 28 >> 2] = 32767
     }
     $1 = HEAP32[$3 + 28 >> 2];
     $2 = HEAP32[$3 + 92 >> 2];
     HEAP32[$3 + 92 >> 2] = $2 + 1;
     HEAP16[($2 << 1) + $0 >> 1] = $1;
     jsvIteratorNext($3 + 32 | 0);
     continue;
    }
    break;
   };
   if (jsvIteratorHasElement($3 + 32 | 0) & 1) {
    HEAP32[$3 >> 2] = 64;
    jsExceptionHere(1, 123653, $3);
   }
   jsvIteratorFree($3 + 32 | 0);
   if (HEAP8[$3 + 179 | 0] & 1) {
    HEAP32[$3 + 24 >> 2] = HEAP16[(HEAP32[$3 + 92 >> 2] - 2 << 1) + $0 >> 1] << 16 >> 16;
    HEAP32[$3 + 20 >> 2] = HEAP16[(HEAP32[$3 + 92 >> 2] - 1 << 1) + $0 >> 1] << 16 >> 16;
    HEAP32[$3 + 16 >> 2] = 0;
    while (1) {
     if (HEAP32[$3 + 16 >> 2] < HEAP32[$3 + 92 >> 2]) {
      HEAP32[$3 + 12 >> 2] = HEAP16[(HEAP32[$3 + 16 >> 2] << 1) + $0 >> 1] << 16 >> 16;
      HEAP32[$3 + 8 >> 2] = HEAP16[(HEAP32[$3 + 16 >> 2] + 1 << 1) + $0 >> 1] << 16 >> 16;
      graphicsDrawLineAA($3 + 107 | 0, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
      HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 12 >> 2];
      HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 8 >> 2];
      HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] + 2;
      continue;
     }
     break;
    };
   }
   graphicsFillPoly($3 + 107 | 0, HEAP32[$3 + 92 >> 2] / 2 | 0, $0);
   graphicsSetVar($3 + 107 | 0);
   HEAP32[$3 + 188 >> 2] = jsvLockAgain(HEAP32[$3 + 184 >> 2]);
  }
  __stack_pointer = $3 + 192 | 0;
  return HEAP32[$3 + 188 >> 2];
 }
 
 function jswrap_graphics_setRotation($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 96 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 88 >> 2] = $0;
  HEAP32[$3 + 84 >> 2] = $1;
  HEAP8[$3 + 83 | 0] = $2;
  block : {
   if (!(graphicsGetFromVar($3 + 11 | 0, HEAP32[$3 + 88 >> 2]) & 1)) {
    HEAP32[$3 + 92 >> 2] = 0;
    break block;
   }
   $0 = (HEAPU8[$3 + 19 | 0] | HEAPU8[$3 + 20 | 0] << 8 | (HEAPU8[$3 + 21 | 0] << 16 | HEAPU8[$3 + 22 | 0] << 24)) & -113;
   HEAP8[$3 + 19 | 0] = $0;
   HEAP8[$3 + 20 | 0] = $0 >>> 8;
   HEAP8[$3 + 21 | 0] = $0 >>> 16;
   HEAP8[$3 + 22 | 0] = $0 >>> 24;
   block4 : {
    block3 : {
     switch (HEAP32[$3 + 84 >> 2] - 1 | 0) {
     case 0:
      $0 = HEAPU8[$3 + 19 | 0] | HEAPU8[$3 + 20 | 0] << 8 | (HEAPU8[$3 + 21 | 0] << 16 | HEAPU8[$3 + 22 | 0] << 24) | 48;
      HEAP8[$3 + 19 | 0] = $0;
      HEAP8[$3 + 20 | 0] = $0 >>> 8;
      HEAP8[$3 + 21 | 0] = $0 >>> 16;
      HEAP8[$3 + 22 | 0] = $0 >>> 24;
      break block4;
     case 1:
      $0 = HEAPU8[$3 + 19 | 0] | HEAPU8[$3 + 20 | 0] << 8 | (HEAPU8[$3 + 21 | 0] << 16 | HEAPU8[$3 + 22 | 0] << 24) | 96;
      HEAP8[$3 + 19 | 0] = $0;
      HEAP8[$3 + 20 | 0] = $0 >>> 8;
      HEAP8[$3 + 21 | 0] = $0 >>> 16;
      HEAP8[$3 + 22 | 0] = $0 >>> 24;
      break block4;
     case 2:
      break block3;
     default:
      break block4;
     };
    }
    $0 = HEAPU8[$3 + 19 | 0] | HEAPU8[$3 + 20 | 0] << 8 | (HEAPU8[$3 + 21 | 0] << 16 | HEAPU8[$3 + 22 | 0] << 24) | 80;
    HEAP8[$3 + 19 | 0] = $0;
    HEAP8[$3 + 20 | 0] = $0 >>> 8;
    HEAP8[$3 + 21 | 0] = $0 >>> 16;
    HEAP8[$3 + 22 | 0] = $0 >>> 24;
   }
   if (HEAP8[$3 + 83 | 0] & 1) {
    block5 : {
     if ((HEAPU8[$3 + 19 | 0] | HEAPU8[$3 + 20 | 0] << 8 | (HEAPU8[$3 + 21 | 0] << 16 | HEAPU8[$3 + 22 | 0] << 24)) & 16) {
      $0 = (HEAPU8[$3 + 19 | 0] | HEAPU8[$3 + 20 | 0] << 8 | (HEAPU8[$3 + 21 | 0] << 16 | HEAPU8[$3 + 22 | 0] << 24)) ^ 64;
      HEAP8[$3 + 19 | 0] = $0;
      HEAP8[$3 + 20 | 0] = $0 >>> 8;
      HEAP8[$3 + 21 | 0] = $0 >>> 16;
      HEAP8[$3 + 22 | 0] = $0 >>> 24;
      break block5;
     }
     $0 = (HEAPU8[$3 + 19 | 0] | HEAPU8[$3 + 20 | 0] << 8 | (HEAPU8[$3 + 21 | 0] << 16 | HEAPU8[$3 + 22 | 0] << 24)) ^ 32;
     HEAP8[$3 + 19 | 0] = $0;
     HEAP8[$3 + 20 | 0] = $0 >>> 8;
     HEAP8[$3 + 21 | 0] = $0 >>> 16;
     HEAP8[$3 + 22 | 0] = $0 >>> 24;
    }
   }
   graphicsSetVar($3 + 11 | 0);
   HEAP32[$3 + 92 >> 2] = jsvLockAgain(HEAP32[$3 + 88 >> 2]);
  }
  __stack_pointer = $3 + 96 | 0;
  return HEAP32[$3 + 92 >> 2];
 }
 
 function jswrap_graphics_imageMetrics($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 192 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 184 >> 2] = $0;
  HEAP32[$2 + 180 >> 2] = $1;
  block : {
   if (!(graphicsGetFromVar($2 + 108 | 0, HEAP32[$2 + 184 >> 2]) & 1)) {
    HEAP32[$2 + 188 >> 2] = 0;
    break block;
   }
   if (!(_jswrap_graphics_parseImage($2 + 108 | 0, HEAP32[$2 + 180 >> 2], 0, $2 + 24 | 0) & 1)) {
    HEAP32[$2 + 188 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 20 >> 2] = jsvGetLength(HEAP32[$2 + 44 >> 2]) - HEAP32[$2 + 48 >> 2];
   _jswrap_graphics_freeImageInfo($2 + 24 | 0);
   HEAP32[$2 + 16 >> 2] = jsvNewObject();
   if (HEAP32[$2 + 16 >> 2]) {
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 16 >> 2], 136165, jsvNewFromInteger(HEAP32[$2 + 24 >> 2]));
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 16 >> 2], 124928, jsvNewFromInteger(HEAP32[$2 + 28 >> 2]));
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 16 >> 2], 128641, jsvNewFromInteger(HEAP32[$2 + 32 >> 2]));
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 16 >> 2], 124703, jsvNewFromBool(HEAP8[$2 + 36 | 0] & 1));
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 20 >> 2] / HEAPU16[$2 + 74 >> 1];
    if (HEAP32[$2 + 12 >> 2] > 1) {
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 16 >> 2], 127362, jsvNewFromInteger(HEAP32[$2 + 12 >> 2]))
    }
   }
   HEAP32[$2 + 188 >> 2] = HEAP32[$2 + 16 >> 2];
  }
  __stack_pointer = $2 + 192 | 0;
  return HEAP32[$2 + 188 >> 2];
 }
 
 function jswrap_graphics_drawImage($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0.0;
  $5 = __stack_pointer - 784 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 776 >> 2] = $0;
  HEAP32[$5 + 772 >> 2] = $1;
  HEAP32[$5 + 768 >> 2] = $2;
  HEAP32[$5 + 764 >> 2] = $3;
  HEAP32[$5 + 760 >> 2] = $4;
  block : {
   if (!(graphicsGetFromVar($5 + 688 | 0, HEAP32[$5 + 776 >> 2]) & 1)) {
    HEAP32[$5 + 780 >> 2] = 0;
    break block;
   }
   if (!(_jswrap_graphics_parseImage($5 + 688 | 0, HEAP32[$5 + 772 >> 2], 0, $5 + 604 | 0) & 1)) {
    HEAP32[$5 + 780 >> 2] = 0;
    break block;
   }
   HEAPF64[$5 + 592 >> 3] = 1;
   HEAPF64[$5 + 584 >> 3] = 0;
   HEAP8[$5 + 583 | 0] = 0;
   HEAP8[$5 + 582 | 0] = 0;
   if (jsvIsObject(HEAP32[$5 + 760 >> 2]) & 1) {
    HEAP32[$5 + 576 >> 2] = jsvObjectGetIntegerChild(HEAP32[$5 + 760 >> 2], 137590);
    if (HEAP32[$5 + 576 >> 2] > 0) {
     HEAP32[$5 + 628 >> 2] = HEAP32[$5 + 628 >> 2] + Math_imul(HEAPU16[$5 + 654 >> 1], HEAP32[$5 + 576 >> 2])
    }
    HEAPF64[$5 + 592 >> 3] = jsvObjectGetFloatChild(HEAP32[$5 + 760 >> 2], 137796);
    $1 = __DOUBLE_BITS_1867(HEAPF64[$5 + 592 >> 3]);
    $2 = $1;
    $0 = i64toi32_i32$HIGH_BITS;
    $1 = $0 & 2147483647;
    block2 : {
     if (!(($1 | 0) == 2146435072 | $1 >>> 0 > 2146435072)) {
      if (!(HEAPF64[$5 + 592 >> 3] <= 0.0)) {
       break block2
      }
     }
     HEAPF64[$5 + 592 >> 3] = 1;
    }
    HEAPF64[$5 + 584 >> 3] = jsvObjectGetFloatChild(HEAP32[$5 + 760 >> 2], 137346);
    $0 = __DOUBLE_BITS_1867(HEAPF64[$5 + 584 >> 3]);
    $2 = $0;
    $1 = i64toi32_i32$HIGH_BITS;
    $0 = $1 & 2147483647;
    HEAP8[$5 + 583 | 0] = $0 >>> 0 < 2146435072;
    if (!(HEAP8[$5 + 583 | 0] & 1)) {
     HEAPF64[$5 + 584 >> 3] = 0
    }
    HEAP8[$5 + 582 | 0] = jsvObjectGetBoolChild(HEAP32[$5 + 760 >> 2], 127991) & 1;
   }
   HEAP32[$5 + 572 >> 2] = 0;
   HEAP32[$5 + 568 >> 2] = 0;
   HEAP32[$5 + 564 >> 2] = 0;
   jsvStringIteratorNew($5 + 528 | 0, HEAP32[$5 + 624 >> 2], HEAP32[$5 + 628 >> 2]);
   block4 : {
    if (!(HEAP8[$5 + 583 | 0] & 1 | (HEAPF64[$5 + 592 >> 3] != 1.0 | HEAPF64[$5 + 584 >> 3] != 0.0))) {
     _jswrap_drawImageSimple($5 + 688 | 0, HEAP32[$5 + 768 >> 2], HEAP32[$5 + 764 >> 2], $5 + 604 | 0, $5 + 528 | 0, 0);
     break block4;
    }
    $0 = 0;
    block5 : {
     if (HEAP8[$5 + 583 | 0] & 1) {
      break block5
     }
     $0 = 0;
     if (HEAPF64[$5 + 592 >> 3] - Math_floor(HEAPF64[$5 + 592 >> 3]) != 0.0) {
      break block5
     }
     $0 = !((HEAPU8[$5 + 696 | 0] | HEAPU8[$5 + 697 | 0] << 8 | (HEAPU8[$5 + 698 | 0] << 16 | HEAPU8[$5 + 699 | 0] << 24)) & 112);
    }
    HEAP8[$5 + 527 | 0] = $0;
    block9 : {
     if (HEAP8[$5 + 527 | 0] & 1) {
      $6 = HEAPF64[$5 + 592 >> 3];
      if (Math_abs($6) < 2147483647.0) {
       $0 = ~~$6
      } else {
       $0 = -2147483648
      }
      HEAP32[$5 + 520 >> 2] = $0;
      HEAP32[$5 + 516 >> 2] = 0;
      HEAP32[$5 + 512 >> 2] = HEAP32[$5 + 764 >> 2];
      HEAP32[$5 + 568 >> 2] = 0;
      while (1) {
       if (HEAP32[$5 + 568 >> 2] < HEAP32[$5 + 608 >> 2]) {
        HEAP32[$5 + 508 >> 2] = jsvStringIteratorGetIndex_1884($5 + 528 | 0);
        HEAP32[$5 + 504 >> 2] = HEAP32[$5 + 516 >> 2];
        HEAP32[$5 + 500 >> 2] = HEAP32[$5 + 564 >> 2];
        HEAP32[$5 + 496 >> 2] = 0;
        while (1) {
         if (HEAP32[$5 + 496 >> 2] < HEAP32[$5 + 520 >> 2]) {
          if (HEAP32[$5 + 496 >> 2]) {
           jsvStringIteratorGoto($5 + 528 | 0, HEAP32[$5 + 624 >> 2], HEAP32[$5 + 508 >> 2]);
           HEAP32[$5 + 516 >> 2] = HEAP32[$5 + 504 >> 2];
           HEAP32[$5 + 564 >> 2] = HEAP32[$5 + 500 >> 2];
          }
          HEAP32[$5 + 492 >> 2] = HEAP32[$5 + 768 >> 2];
          HEAP32[$5 + 572 >> 2] = 0;
          while (1) {
           if (HEAP32[$5 + 572 >> 2] < HEAP32[$5 + 604 >> 2]) {
            while (1) {
             if (HEAP32[$5 + 516 >> 2] < HEAP32[$5 + 612 >> 2]) {
              HEAP32[$5 + 564 >> 2] = HEAP32[$5 + 564 >> 2] << 8 | jsvStringIteratorGetCharAndNext($5 + 528 | 0) & 255;
              HEAP32[$5 + 516 >> 2] = HEAP32[$5 + 516 >> 2] + 8;
              continue;
             }
             break;
            };
            HEAP32[$5 + 488 >> 2] = HEAP32[$5 + 640 >> 2] & HEAP32[$5 + 564 >> 2] >>> HEAP32[$5 + 516 >> 2] - HEAP32[$5 + 612 >> 2];
            HEAP32[$5 + 516 >> 2] = HEAP32[$5 + 516 >> 2] - HEAP32[$5 + 612 >> 2];
            block8 : {
             if (!(HEAP32[$5 + 620 >> 2] == HEAP32[$5 + 488 >> 2] | HEAP32[$5 + 512 >> 2] < (HEAPU8[$5 + 722 | 0] | HEAPU8[$5 + 723 | 0] << 8) | HEAP32[$5 + 512 >> 2] > (HEAPU8[$5 + 726 | 0] | HEAPU8[$5 + 727 | 0] << 8))) {
              if (HEAP32[$5 + 632 >> 2]) {
               HEAP32[$5 + 488 >> 2] = HEAPU16[HEAP32[$5 + 632 >> 2] + ((HEAP32[$5 + 488 >> 2] & HEAP32[$5 + 636 >> 2]) << 1) >> 1]
              }
              HEAP32[$5 + 484 >> 2] = 0;
              while (1) {
               if (HEAP32[$5 + 484 >> 2] < HEAP32[$5 + 520 >> 2]) {
                if (!(HEAP32[$5 + 492 >> 2] < (HEAPU8[$5 + 720 | 0] | HEAPU8[$5 + 721 | 0] << 8) | HEAP32[$5 + 492 >> 2] > (HEAPU8[$5 + 724 | 0] | HEAPU8[$5 + 725 | 0] << 8))) {
                 FUNCTION_TABLE[HEAPU8[$5 + 740 | 0] | HEAPU8[$5 + 741 | 0] << 8 | (HEAPU8[$5 + 742 | 0] << 16 | HEAPU8[$5 + 743 | 0] << 24)]($5 + 688 | 0, HEAP32[$5 + 492 >> 2], HEAP32[$5 + 512 >> 2], HEAP32[$5 + 488 >> 2])
                }
                HEAP32[$5 + 492 >> 2] = HEAP32[$5 + 492 >> 2] + 1;
                HEAP32[$5 + 484 >> 2] = HEAP32[$5 + 484 >> 2] + 1;
                continue;
               }
               break;
              };
              break block8;
             }
             HEAP32[$5 + 492 >> 2] = HEAP32[$5 + 520 >> 2] + HEAP32[$5 + 492 >> 2];
            }
            HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 572 >> 2] + 1;
            continue;
           }
           break;
          };
          HEAP32[$5 + 512 >> 2] = HEAP32[$5 + 512 >> 2] + 1;
          HEAP32[$5 + 496 >> 2] = HEAP32[$5 + 496 >> 2] + 1;
          continue;
         }
         break;
        };
        HEAP32[$5 + 568 >> 2] = HEAP32[$5 + 568 >> 2] + 1;
        continue;
       }
       break;
      };
      HEAP32[$5 + 480 >> 2] = HEAP32[$5 + 768 >> 2];
      HEAP32[$5 + 476 >> 2] = HEAP32[$5 + 764 >> 2];
      HEAP32[$5 + 472 >> 2] = HEAP32[$5 + 768 >> 2] + Math_imul(HEAP32[$5 + 520 >> 2], HEAP32[$5 + 604 >> 2]);
      HEAP32[$5 + 468 >> 2] = HEAP32[$5 + 764 >> 2] + Math_imul(HEAP32[$5 + 520 >> 2], HEAP32[$5 + 608 >> 2]);
      graphicsSetModifiedAndClip($5 + 688 | 0, $5 + 480 | 0, $5 + 476 | 0, $5 + 472 | 0, $5 + 468 | 0, 0);
      break block9;
     }
     HEAP32[$5 + 272 >> 2] = HEAP32[$5 + 768 >> 2] << 8;
     HEAP32[$5 + 276 >> 2] = HEAP32[$5 + 764 >> 2] << 8;
     wasm2js_memory_copy($5 + 308 | 0, $5 + 604 | 0, 84);
     $0 = HEAP32[$5 + 532 >> 2];
     $1 = HEAP32[$5 + 528 >> 2];
     $3 = $1;
     $2 = $5 + 272 | 0;
     $1 = $2;
     HEAP32[$1 + 120 >> 2] = $3;
     HEAP32[$1 + 124 >> 2] = $0;
     HEAP32[$1 + 152 >> 2] = HEAP32[$5 + 560 >> 2];
     $1 = HEAP32[$5 + 556 >> 2];
     $0 = HEAP32[$5 + 552 >> 2];
     $3 = $0;
     $0 = $2;
     HEAP32[$0 + 144 >> 2] = $3;
     HEAP32[$0 + 148 >> 2] = $1;
     $0 = HEAP32[$5 + 548 >> 2];
     $1 = HEAP32[$5 + 544 >> 2];
     $3 = $1;
     $1 = $2;
     HEAP32[$1 + 136 >> 2] = $3;
     HEAP32[$1 + 140 >> 2] = $0;
     $1 = HEAP32[$5 + 540 >> 2];
     $0 = HEAP32[$5 + 536 >> 2];
     $3 = $0;
     $0 = $2;
     HEAP32[$0 + 128 >> 2] = $3;
     HEAP32[$0 + 132 >> 2] = $1;
     HEAPF64[$5 + 288 >> 3] = HEAPF64[$5 + 584 >> 3];
     HEAPF64[$5 + 296 >> 3] = HEAPF64[$5 + 592 >> 3];
     HEAP8[$5 + 304 | 0] = HEAP8[$5 + 583 | 0] & 1;
     HEAP8[$5 + 305 | 0] = 0;
     _jswrap_drawImageLayerInit($5 + 272 | 0);
     HEAP32[$5 + 268 >> 2] = HEAP32[$5 + 272 >> 2] >> 8;
     HEAP32[$5 + 264 >> 2] = HEAP32[$5 + 276 >> 2] >> 8;
     HEAP32[$5 + 260 >> 2] = (HEAP32[$5 + 280 >> 2] >> 8) - 1;
     HEAP32[$5 + 256 >> 2] = (HEAP32[$5 + 284 >> 2] >> 8) - 1;
     graphicsSetModifiedAndClip($5 + 688 | 0, $5 + 268 | 0, $5 + 264 | 0, $5 + 260 | 0, $5 + 256 | 0, 0);
     _jswrap_drawImageLayerSetStart($5 + 272 | 0, HEAP32[$5 + 268 >> 2], HEAP32[$5 + 264 >> 2]);
     HEAP32[$5 + 252 >> 2] = graphicsGetSetPixelFn($5 + 688 | 0);
     block11 : {
      if (!(!(HEAP8[$5 + 582 | 0] & 1) | !(HEAPF64[$5 + 592 >> 3] < .75))) {
       $6 = +HEAP32[$5 + 436 >> 2] * HEAPF64[$5 + 592 >> 3];
       if (Math_abs($6) < 2147483647.0) {
        $0 = ~~$6
       } else {
        $0 = -2147483648
       }
       HEAP32[$5 + 248 >> 2] = $0;
       $6 = +HEAP32[$5 + 440 >> 2] * HEAPF64[$5 + 592 >> 3];
       if (Math_abs($6) < 2147483647.0) {
        $0 = ~~$6
       } else {
        $0 = -2147483648
       }
       HEAP32[$5 + 244 >> 2] = $0;
       HEAP32[$5 + 240 >> 2] = HEAP32[$5 + 436 >> 2] - HEAP32[$5 + 248 >> 2];
       HEAP32[$5 + 236 >> 2] = HEAP32[$5 + 440 >> 2] - HEAP32[$5 + 244 >> 2];
       wasm2js_memory_copy($5 + 40 | 0, $5 + 272 | 0, 192);
       jsvStringIteratorNew($5 + 160 | 0, HEAP32[$5 + 96 >> 2], 0);
       HEAP32[$5 + 212 >> 2] = HEAP32[$5 + 244 >> 2] + HEAP32[$5 + 212 >> 2];
       HEAP32[$5 + 216 >> 2] = HEAP32[$5 + 248 >> 2] + HEAP32[$5 + 216 >> 2];
       _jswrap_drawImageLayerNextY($5 + 40 | 0);
       HEAP32[$5 + 568 >> 2] = HEAP32[$5 + 264 >> 2];
       while (1) {
        if (HEAP32[$5 + 568 >> 2] <= HEAP32[$5 + 256 >> 2]) {
         _jswrap_drawImageLayerStartX($5 + 272 | 0);
         _jswrap_drawImageLayerStartX($5 + 40 | 0);
         HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 268 >> 2];
         while (1) {
          if (HEAP32[$5 + 572 >> 2] <= HEAP32[$5 + 260 >> 2]) {
           HEAP8[$5 + 23 | 0] = 1;
           HEAP8[$5 + 23 | 0] = _jswrap_drawImageLayerGetPixel($5 + 272 | 0, $5 + 36 | 0) & 1 & (HEAP8[$5 + 23 | 0] & 1);
           HEAP32[$5 + 452 >> 2] = HEAP32[$5 + 248 >> 2] + HEAP32[$5 + 452 >> 2];
           HEAP32[$5 + 456 >> 2] = HEAP32[$5 + 456 >> 2] - HEAP32[$5 + 244 >> 2];
           HEAP8[$5 + 23 | 0] = _jswrap_drawImageLayerGetPixel($5 + 272 | 0, $5 + 32 | 0) & 1 & (HEAP8[$5 + 23 | 0] & 1);
           HEAP32[$5 + 452 >> 2] = HEAP32[$5 + 240 >> 2] + HEAP32[$5 + 452 >> 2];
           HEAP32[$5 + 456 >> 2] = HEAP32[$5 + 456 >> 2] - HEAP32[$5 + 236 >> 2];
           HEAP8[$5 + 23 | 0] = _jswrap_drawImageLayerGetPixel($5 + 40 | 0, $5 + 28 | 0) & 1 & (HEAP8[$5 + 23 | 0] & 1);
           HEAP32[$5 + 220 >> 2] = HEAP32[$5 + 248 >> 2] + HEAP32[$5 + 220 >> 2];
           HEAP32[$5 + 224 >> 2] = HEAP32[$5 + 224 >> 2] - HEAP32[$5 + 244 >> 2];
           HEAP8[$5 + 23 | 0] = _jswrap_drawImageLayerGetPixel($5 + 40 | 0, $5 + 24 | 0) & 1 & (HEAP8[$5 + 23 | 0] & 1);
           HEAP32[$5 + 220 >> 2] = HEAP32[$5 + 240 >> 2] + HEAP32[$5 + 220 >> 2];
           HEAP32[$5 + 224 >> 2] = HEAP32[$5 + 224 >> 2] - HEAP32[$5 + 236 >> 2];
           HEAP32[$5 + 36 >> 2] = graphicsBlendColor($5 + 688 | 0, HEAP32[$5 + 36 >> 2], HEAP32[$5 + 32 >> 2], 128);
           HEAP32[$5 + 28 >> 2] = graphicsBlendColor($5 + 688 | 0, HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], 128);
           HEAP32[$5 + 564 >> 2] = graphicsBlendColor($5 + 688 | 0, HEAP32[$5 + 36 >> 2], HEAP32[$5 + 28 >> 2], 128);
           FUNCTION_TABLE[HEAP32[$5 + 252 >> 2]]($5 + 688 | 0, HEAP32[$5 + 572 >> 2], HEAP32[$5 + 568 >> 2], HEAP32[$5 + 564 >> 2]);
           HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 572 >> 2] + 1;
           continue;
          }
          break;
         };
         _jswrap_drawImageLayerNextY($5 + 272 | 0);
         _jswrap_drawImageLayerNextY($5 + 40 | 0);
         HEAP32[$5 + 568 >> 2] = HEAP32[$5 + 568 >> 2] + 1;
         continue;
        }
        break;
       };
       jsvStringIteratorFree_1830($5 + 160 | 0);
       break block11;
      }
      HEAP32[$5 + 568 >> 2] = HEAP32[$5 + 264 >> 2];
      while (1) {
       if (HEAP32[$5 + 568 >> 2] <= HEAP32[$5 + 256 >> 2]) {
        _jswrap_drawImageLayerStartX($5 + 272 | 0);
        HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 268 >> 2];
        while (1) {
         if (HEAP32[$5 + 572 >> 2] <= HEAP32[$5 + 260 >> 2]) {
          if (_jswrap_drawImageLayerGetPixel($5 + 272 | 0, $5 + 564 | 0) & 1) {
           FUNCTION_TABLE[HEAP32[$5 + 252 >> 2]]($5 + 688 | 0, HEAP32[$5 + 572 >> 2], HEAP32[$5 + 568 >> 2], HEAP32[$5 + 564 >> 2])
          }
          _jswrap_drawImageLayerNextX($5 + 272 | 0);
          HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 572 >> 2] + 1;
          continue;
         }
         break;
        };
        _jswrap_drawImageLayerNextY($5 + 272 | 0);
        HEAP32[$5 + 568 >> 2] = HEAP32[$5 + 568 >> 2] + 1;
        continue;
       }
       break;
      };
     }
     $2 = $5 + 272 | 0;
     HEAP32[$5 + 560 >> 2] = HEAP32[$2 + 152 >> 2];
     $1 = HEAP32[$2 + 144 >> 2];
     $0 = HEAP32[$2 + 148 >> 2];
     HEAP32[$5 + 552 >> 2] = $1;
     HEAP32[$5 + 556 >> 2] = $0;
     $1 = HEAP32[$2 + 140 >> 2];
     $0 = HEAP32[$2 + 136 >> 2];
     HEAP32[$5 + 544 >> 2] = $0;
     HEAP32[$5 + 548 >> 2] = $1;
     $0 = HEAP32[$2 + 132 >> 2];
     $1 = HEAP32[$2 + 128 >> 2];
     HEAP32[$5 + 536 >> 2] = $1;
     HEAP32[$5 + 540 >> 2] = $0;
     $1 = HEAP32[$2 + 124 >> 2];
     $0 = HEAP32[$2 + 120 >> 2];
     HEAP32[$5 + 528 >> 2] = $0;
     HEAP32[$5 + 532 >> 2] = $1;
    }
   }
   jsvStringIteratorFree_1830($5 + 528 | 0);
   _jswrap_graphics_freeImageInfo($5 + 604 | 0);
   graphicsSetVar($5 + 688 | 0);
   HEAP32[$5 + 780 >> 2] = jsvLockAgain(HEAP32[$5 + 776 >> 2]);
  }
  __stack_pointer = $5 + 784 | 0;
  return HEAP32[$5 + 780 >> 2];
 }
 
 function jswrap_graphics_drawImages($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0.0;
  $3 = __stack_pointer - 288 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 280 >> 2] = $0;
  HEAP32[$3 + 276 >> 2] = $1;
  HEAP32[$3 + 272 >> 2] = $2;
  HEAP32[$3 + 268 >> 2] = 4;
  block : {
   if (!(graphicsGetFromVar($3 + 196 | 0, HEAP32[$3 + 280 >> 2]) & 1)) {
    HEAP32[$3 + 284 >> 2] = 0;
    break block;
   }
   HEAP32[$3 + 192 >> 2] = $3;
   $2 = $3 - 768 | 0;
   __stack_pointer = $2;
   block2 : {
    block1 : {
     if (jsvIsArray(HEAP32[$3 + 276 >> 2]) & 1) {
      $0 = jsvGetArrayLength(HEAP32[$3 + 276 >> 2]);
      HEAP32[$3 + 184 >> 2] = $0;
      if (($0 | 0) <= 4) {
       break block1
      }
     }
     HEAP32[$3 + 48 >> 2] = 4;
     jsExceptionHere(3, 127377, $3 + 48 | 0);
     HEAP32[$3 + 284 >> 2] = 0;
     break block2;
    }
    HEAP32[$3 + 176 >> 2] = 1e4;
    HEAP32[$3 + 172 >> 2] = 1e4;
    HEAP32[$3 + 168 >> 2] = 1e4;
    HEAP32[$3 + 164 >> 2] = 1e4;
    HEAP8[$3 + 163 | 0] = 1;
    HEAP32[$3 + 188 >> 2] = 0;
    while (1) {
     if (HEAP32[$3 + 188 >> 2] < HEAP32[$3 + 184 >> 2]) {
      HEAP32[$3 + 156 >> 2] = jsvGetArrayItem(HEAP32[$3 + 276 >> 2], HEAP32[$3 + 188 >> 2]);
      block11 : {
       if (jsvIsObject(HEAP32[$3 + 156 >> 2]) & 1) {
        HEAP32[$3 + 152 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 156 >> 2], 137865);
        block10 : {
         if (_jswrap_graphics_parseImage($3 + 196 | 0, HEAP32[$3 + 152 >> 2], 0, (Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 36 | 0) & 1) {
          $4 = jsvObjectGetFloatChild(HEAP32[$3 + 156 >> 2], 124025) * 256.0;
          if (Math_abs($4) < 2147483647.0) {
           $0 = ~~$4
          } else {
           $0 = -2147483648
          }
          HEAP32[Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 >> 2] = $0;
          $4 = jsvObjectGetFloatChild(HEAP32[$3 + 156 >> 2], 123896) * 256.0;
          if (Math_abs($4) < 2147483647.0) {
           $0 = ~~$4
          } else {
           $0 = -2147483648
          }
          HEAP32[(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 4 >> 2] = $0;
          $4 = jsvObjectGetFloatChild(HEAP32[$3 + 156 >> 2], 137796);
          HEAPF64[(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 24 >> 3] = $4;
          $0 = __DOUBLE_BITS_1867(HEAPF64[(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 24 >> 3]);
          $1 = $0;
          $0 = i64toi32_i32$HIGH_BITS;
          $0 = $0 & 2147483647;
          block4 : {
           if (!(($0 | 0) == 2146435072 | $0 >>> 0 > 2146435072)) {
            if (!(HEAPF64[(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 24 >> 3] <= 0.0)) {
             break block4
            }
           }
           HEAPF64[(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 24 >> 3] = 1;
          }
          $4 = jsvObjectGetFloatChild(HEAP32[$3 + 156 >> 2], 137346);
          HEAPF64[(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 16 >> 3] = $4;
          $0 = __DOUBLE_BITS_1867(HEAPF64[(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 16 >> 3]);
          $1 = $0;
          $0 = i64toi32_i32$HIGH_BITS;
          $0 = $0 & 2147483647;
          if (($0 | 0) == 2146435072 | $0 >>> 0 > 2146435072) {
           HEAPF64[(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 16 >> 3] = 0
          }
          $0 = jsvObjectGetBoolChild(HEAP32[$3 + 156 >> 2], 127984);
          HEAP8[(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 32 | 0] = $0 & 1;
          $0 = jsvObjectGetBoolChild(HEAP32[$3 + 156 >> 2], 125123);
          HEAP8[(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 33 | 0] = $0 & 1;
          _jswrap_drawImageLayerInit(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0);
          if (!(jsvObjectGetBoolChild(HEAP32[$3 + 156 >> 2], 127573) & 1)) {
           if (HEAP32[$3 + 176 >> 2] > HEAP32[Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 >> 2] >> 8) {
            HEAP32[$3 + 176 >> 2] = HEAP32[Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 >> 2] >> 8
           }
           if (HEAP32[$3 + 172 >> 2] > HEAP32[(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 4 >> 2] >> 8) {
            HEAP32[$3 + 172 >> 2] = HEAP32[(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 4 >> 2] >> 8
           }
           if ((HEAP32[$3 + 176 >> 2] + HEAP32[$3 + 168 >> 2] | 0) < HEAP32[(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 8 >> 2] + 255 >> 8) {
            HEAP32[$3 + 168 >> 2] = (HEAP32[(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 8 >> 2] + 255 >> 8) - HEAP32[$3 + 176 >> 2]
           }
           if ((HEAP32[$3 + 172 >> 2] + HEAP32[$3 + 164 >> 2] | 0) < HEAP32[(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 12 >> 2] + 255 >> 8) {
            HEAP32[$3 + 164 >> 2] = (HEAP32[(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 12 >> 2] + 255 >> 8) - HEAP32[$3 + 172 >> 2]
           }
          }
          HEAP32[$3 + 148 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 156 >> 2], 137279);
          if (HEAP32[$3 + 148 >> 2]) {
           jsvUnLock(_jswrap_graphics_parseImage_palette((Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 36 | 0, HEAP32[$3 + 148 >> 2]));
           if (!HEAP32[(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 64 >> 2]) {
            HEAP8[$3 + 163 | 0] = 0
           }
          }
          HEAP32[$3 + 144 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 156 >> 2], 137418);
          HEAP32[(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 188 >> 2] = 0;
          block6 : {
           block5 : {
            if (HEAP32[$3 + 144 >> 2]) {
             if (jsvGetStringLength(HEAP32[$3 + 144 >> 2])) {
              break block5
             }
            }
            HEAP32[(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 188 >> 2] = 0;
            break block6;
           }
           block7 : {
            if (jsvIsStringEqual(HEAP32[$3 + 144 >> 2], 139041) & 1) {
             HEAP32[(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 188 >> 2] = 1;
             break block7;
            }
            block8 : {
             if (jsvIsStringEqual(HEAP32[$3 + 144 >> 2], 127961) & 1) {
              HEAP32[(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 188 >> 2] = 2;
              break block8;
             }
             block9 : {
              if (jsvIsStringEqual(HEAP32[$3 + 144 >> 2], 127769) & 1) {
               HEAP32[(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 188 >> 2] = 3;
               break block9;
              }
              HEAP32[$3 >> 2] = HEAP32[$3 + 144 >> 2];
              jsExceptionHere(1, 128466, $3);
              HEAP8[$3 + 163 | 0] = 0;
             }
            }
           }
          }
          jsvUnLock(HEAP32[$3 + 144 >> 2]);
          break block10;
         }
         HEAP8[$3 + 163 | 0] = 0;
        }
        jsvUnLock(HEAP32[$3 + 152 >> 2]);
        break block11;
       }
       HEAP8[$3 + 163 | 0] = 0;
      }
      jsvUnLock(HEAP32[$3 + 156 >> 2]);
      HEAP32[$3 + 188 >> 2] = HEAP32[$3 + 188 >> 2] + 1;
      continue;
     }
     break;
    };
    HEAP32[$3 + 96 >> 2] = 124025;
    HEAP16[$3 + 100 >> 1] = 10;
    HEAP16[($3 + 96 | 0) + 6 >> 1] = 0;
    HEAP32[$3 + 104 >> 2] = $3 + 176;
    HEAP32[$3 + 108 >> 2] = 123896;
    HEAP16[$3 + 112 >> 1] = 10;
    HEAP16[($3 + 96 | 0) + 18 >> 1] = 0;
    HEAP32[$3 + 116 >> 2] = $3 + 172;
    HEAP32[$3 + 120 >> 2] = 136165;
    HEAP16[$3 + 124 >> 1] = 10;
    HEAP16[($3 + 96 | 0) + 30 >> 1] = 0;
    HEAP32[$3 + 128 >> 2] = $3 + 168;
    HEAP32[$3 + 132 >> 2] = 124928;
    HEAP16[$3 + 136 >> 1] = 10;
    HEAP16[($3 + 96 | 0) + 42 >> 1] = 0;
    HEAP32[$3 + 140 >> 2] = $3 + 164;
    if (!(jsvReadConfigObject(HEAP32[$3 + 272 >> 2], $3 + 96 | 0, 4) & 1)) {
     HEAP8[$3 + 163 | 0] = 0
    }
    HEAP32[$3 + 92 >> 2] = (HEAP32[$3 + 176 >> 2] + HEAP32[$3 + 168 >> 2] | 0) - 1;
    HEAP32[$3 + 88 >> 2] = (HEAP32[$3 + 172 >> 2] + HEAP32[$3 + 164 >> 2] | 0) - 1;
    graphicsSetModifiedAndClip($3 + 196 | 0, $3 + 176 | 0, $3 + 172 | 0, $3 + 92 | 0, $3 + 88 | 0, 0);
    HEAP32[$3 + 84 >> 2] = graphicsGetSetPixelFn($3 + 196 | 0);
    if (HEAP8[$3 + 163 | 0] & 1) {
     HEAP32[$3 + 80 >> 2] = (1 << HEAPU8[$3 + 212 | 0]) - 1;
     HEAP32[$3 + 188 >> 2] = 0;
     while (1) {
      if (HEAP32[$3 + 188 >> 2] < HEAP32[$3 + 184 >> 2]) {
       jsvStringIteratorNew((Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 120 | 0, HEAP32[(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 56 >> 2], HEAP32[(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 60 >> 2]);
       _jswrap_drawImageLayerSetStart(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0, HEAP32[$3 + 176 >> 2], HEAP32[$3 + 172 >> 2]);
       HEAP32[$3 + 188 >> 2] = HEAP32[$3 + 188 >> 2] + 1;
       continue;
      }
      break;
     };
     HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 172 >> 2];
     while (1) {
      if (HEAP32[$3 + 76 >> 2] <= HEAP32[$3 + 88 >> 2]) {
       HEAP32[$3 + 188 >> 2] = 0;
       while (1) {
        if (HEAP32[$3 + 188 >> 2] < HEAP32[$3 + 184 >> 2]) {
         _jswrap_drawImageLayerStartX(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0);
         HEAP32[$3 + 188 >> 2] = HEAP32[$3 + 188 >> 2] + 1;
         continue;
        }
        break;
       };
       HEAP32[$3 + 72 >> 2] = HEAP32[$3 + 176 >> 2];
       while (1) {
        if (HEAP32[$3 + 72 >> 2] <= HEAP32[$3 + 92 >> 2]) {
         HEAP8[$3 + 71 | 0] = 0;
         HEAP32[$3 + 64 >> 2] = 0;
         HEAP32[$3 + 188 >> 2] = 0;
         while (1) {
          if (HEAP32[$3 + 188 >> 2] < HEAP32[$3 + 184 >> 2]) {
           if (_jswrap_drawImageLayerGetPixel(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0, $3 + 60 | 0) & 1) {
            HEAP8[$3 + 71 | 0] = 1;
            if (!(HEAP32[$3 + 188 >> 2] | !HEAP32[$2 + 188 >> 2])) {
             HEAP32[$3 + 64 >> 2] = graphicsGetPixel($3 + 196 | 0, HEAP32[$3 + 72 >> 2], HEAP32[$3 + 76 >> 2])
            }
            block17 : {
             block16 : {
              switch (HEAP32[(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 188 >> 2]) {
              case 0:
               HEAP32[$3 + 64 >> 2] = HEAP32[$3 + 60 >> 2];
               break block17;
              case 1:
               HEAP32[$3 + 64 >> 2] = HEAP32[$3 + 60 >> 2] + HEAP32[$3 + 64 >> 2];
               if (HEAPU32[$3 + 64 >> 2] > HEAPU32[$3 + 80 >> 2]) {
                HEAP32[$3 + 64 >> 2] = HEAP32[$3 + 80 >> 2]
               }
               break block17;
              case 2:
               HEAP32[$3 + 64 >> 2] = HEAP32[$3 + 60 >> 2] | HEAP32[$3 + 64 >> 2];
               break block17;
              case 3:
               break block16;
              default:
               break block17;
              };
             }
             HEAP32[$3 + 64 >> 2] = HEAP32[$3 + 60 >> 2] ^ HEAP32[$3 + 64 >> 2];
            }
           }
           _jswrap_drawImageLayerNextX(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0);
           _jswrap_drawImageLayerNextXRepeat(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0);
           HEAP32[$3 + 188 >> 2] = HEAP32[$3 + 188 >> 2] + 1;
           continue;
          }
          break;
         };
         if (HEAP8[$3 + 71 | 0] & 1) {
          FUNCTION_TABLE[HEAP32[$3 + 84 >> 2]]($3 + 196 | 0, HEAP32[$3 + 72 >> 2], HEAP32[$3 + 76 >> 2], HEAP32[$3 + 64 >> 2])
         }
         HEAP32[$3 + 72 >> 2] = HEAP32[$3 + 72 >> 2] + 1;
         continue;
        }
        break;
       };
       HEAP32[$3 + 188 >> 2] = 0;
       while (1) {
        if (HEAP32[$3 + 188 >> 2] < HEAP32[$3 + 184 >> 2]) {
         _jswrap_drawImageLayerNextY(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0);
         HEAP32[$3 + 188 >> 2] = HEAP32[$3 + 188 >> 2] + 1;
         continue;
        }
        break;
       };
       HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
       continue;
      }
      break;
     };
     HEAP32[$3 + 188 >> 2] = 0;
     while (1) {
      if (HEAP32[$3 + 188 >> 2] < HEAP32[$3 + 184 >> 2]) {
       jsvStringIteratorFree_1830((Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 120 | 0);
       HEAP32[$3 + 188 >> 2] = HEAP32[$3 + 188 >> 2] + 1;
       continue;
      }
      break;
     };
    }
    HEAP32[$3 + 188 >> 2] = 0;
    while (1) {
     if (HEAP32[$3 + 188 >> 2] < HEAP32[$3 + 184 >> 2]) {
      jsvUnLock(HEAP32[(Math_imul(HEAP32[$3 + 188 >> 2], 192) + $2 | 0) + 56 >> 2]);
      HEAP32[$3 + 188 >> 2] = HEAP32[$3 + 188 >> 2] + 1;
      continue;
     }
     break;
    };
    HEAP32[$3 + 284 >> 2] = jsvLockAgain(HEAP32[$3 + 280 >> 2]);
   }
   HEAP32[$3 + 180 >> 2] = 1;
  }
  __stack_pointer = $3 + 288 | 0;
  return HEAP32[$3 + 284 >> 2];
 }
 
 function jswrap_graphics_asImage($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 288 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 280 >> 2] = $0;
  HEAP32[$2 + 276 >> 2] = $1;
  block : {
   if (!(graphicsGetFromVar($2 + 204 | 0, HEAP32[$2 + 280 >> 2]) & 1)) {
    HEAP32[$2 + 284 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 196 >> 2] = jswrap_graphics_getWidthOrHeight(HEAP32[$2 + 280 >> 2], 0);
   HEAP32[$2 + 192 >> 2] = jswrap_graphics_getWidthOrHeight(HEAP32[$2 + 280 >> 2], 1);
   HEAP32[$2 + 188 >> 2] = 0;
   HEAP32[$2 + 184 >> 2] = 0;
   HEAP32[$2 + 180 >> 2] = HEAP32[$2 + 196 >> 2];
   HEAP32[$2 + 176 >> 2] = HEAP32[$2 + 192 >> 2];
   block1 : {
    if (jsvIsObject(HEAP32[$2 + 276 >> 2]) & 1) {
     HEAP32[$2 + 172 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 276 >> 2], 137544);
     HEAP32[$2 + 188 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 276 >> 2], 124025);
     HEAP32[$2 + 184 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 276 >> 2], 123896);
     HEAP32[$2 + 168 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 276 >> 2], 124222);
     if (HEAP32[$2 + 168 >> 2]) {
      HEAP32[$2 + 180 >> 2] = HEAP32[$2 + 168 >> 2]
     }
     HEAP32[$2 + 168 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 276 >> 2], 136443);
     if (HEAP32[$2 + 168 >> 2]) {
      HEAP32[$2 + 176 >> 2] = HEAP32[$2 + 168 >> 2]
     }
     break block1;
    }
    HEAP32[$2 + 172 >> 2] = jsvLockAgainSafe(HEAP32[$2 + 276 >> 2]);
   }
   block3 : {
    block2 : {
     if (!(jsvIsUndefined(HEAP32[$2 + 172 >> 2]) & 1)) {
      if (!(jsvIsStringEqual(HEAP32[$2 + 172 >> 2], 125079) & 1)) {
       break block2
      }
     }
     HEAP8[$2 + 203 | 0] = 1;
     break block3;
    }
    block4 : {
     if (jsvIsStringEqual(HEAP32[$2 + 172 >> 2], 136536) & 1) {
      HEAP8[$2 + 203 | 0] = 0;
      break block4;
     }
     HEAP32[$2 >> 2] = HEAP32[$2 + 172 >> 2];
     jsExceptionHere(1, 136044, $2);
     jsvUnLock(HEAP32[$2 + 172 >> 2]);
     HEAP32[$2 + 284 >> 2] = 0;
     break block;
    }
   }
   jsvUnLock(HEAP32[$2 + 172 >> 2]);
   HEAP32[$2 + 164 >> 2] = HEAPU8[$2 + 220 | 0];
   HEAP32[$2 + 160 >> 2] = 1 << HEAP32[$2 + 164 >> 2];
   if ((HEAPU8[$2 + 208 | 0] | HEAPU8[$2 + 209 | 0] << 8 | (HEAPU8[$2 + 210 | 0] << 16 | HEAPU8[$2 + 211 | 0] << 24)) == 6) {
    HEAP32[$2 + 164 >> 2] = 3
   }
   HEAP32[$2 + 156 >> 2] = Math_imul(HEAP32[$2 + 164 >> 2], Math_imul(HEAP32[$2 + 180 >> 2], HEAP32[$2 + 176 >> 2])) + 7 >> 3;
   HEAP32[$2 + 152 >> 2] = -1;
   HEAP32[$2 + 148 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 280 >> 2], 124703);
   if (HEAP32[$2 + 148 >> 2]) {
    HEAP32[$2 + 152 >> 2] = jsvGetIntegerAndUnLock(HEAP32[$2 + 148 >> 2])
   }
   HEAP32[$2 + 144 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 280 >> 2], 137279);
   block5 : {
    if (jsvIsArray(HEAP32[$2 + 144 >> 2]) & 1) {
     break block5
    }
    if (jsvIsArrayBuffer(HEAP32[$2 + 144 >> 2]) & 1) {
     break block5
    }
    jsvUnLock(HEAP32[$2 + 144 >> 2]);
    HEAP32[$2 + 144 >> 2] = 0;
   }
   HEAP32[$2 + 140 >> 2] = 0;
   block7 : {
    if (HEAP8[$2 + 203 | 0] & 1) {
     HEAP32[$2 + 140 >> 2] = jsvNewObject();
     if (!HEAP32[$2 + 140 >> 2]) {
      HEAP32[$2 + 284 >> 2] = 0;
      break block;
     }
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 140 >> 2], 136165, jsvNewFromInteger(HEAP32[$2 + 180 >> 2]));
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 140 >> 2], 124928, jsvNewFromInteger(HEAP32[$2 + 176 >> 2]));
     if (HEAP32[$2 + 164 >> 2] != 1) {
      jsvObjectSetChildAndUnLock(HEAP32[$2 + 140 >> 2], 128641, jsvNewFromInteger(HEAP32[$2 + 164 >> 2]))
     }
     block6 : {
      if (HEAP32[$2 + 188 >> 2] | (HEAPU8[$2 + 208 | 0] | HEAPU8[$2 + 209 | 0] << 8 | (HEAPU8[$2 + 210 | 0] << 16 | HEAPU8[$2 + 211 | 0] << 24)) | (HEAP32[$2 + 184 >> 2] | HEAP32[$2 + 180 >> 2] != HEAP32[$2 + 196 >> 2])) {
       break block6
      }
      if (HEAP32[$2 + 176 >> 2] != HEAP32[$2 + 192 >> 2]) {
       break block6
      }
      if (HEAP32[$2 + 164 >> 2] != 8) {
       if (!((HEAPU8[$2 + 212 | 0] | HEAPU8[$2 + 213 | 0] << 8 | (HEAPU8[$2 + 214 | 0] << 16 | HEAPU8[$2 + 215 | 0] << 24)) & 4) | (HEAPU8[$2 + 212 | 0] | HEAPU8[$2 + 213 | 0] << 8 | (HEAPU8[$2 + 214 | 0] << 16 | HEAPU8[$2 + 215 | 0] << 24)) & 11) {
        break block6
       }
      }
      jsvObjectSetChildAndUnLock(HEAP32[$2 + 140 >> 2], 128153, jsvObjectGetChildIfExists(HEAPU8[$2 + 204 | 0] | HEAPU8[$2 + 205 | 0] << 8 | (HEAPU8[$2 + 206 | 0] << 16 | HEAPU8[$2 + 207 | 0] << 24), 128153));
      HEAP32[$2 + 284 >> 2] = HEAP32[$2 + 140 >> 2];
      break block;
     }
     if (HEAP32[$2 + 152 >> 2] >= 0) {
      jsvObjectSetChildAndUnLock(HEAP32[$2 + 140 >> 2], 124703, jsvNewFromInteger(HEAP32[$2 + 152 >> 2]))
     }
     if (HEAP32[$2 + 144 >> 2]) {
      jsvObjectSetChild(HEAP32[$2 + 140 >> 2], 137279, HEAP32[$2 + 144 >> 2])
     }
     break block7;
    }
    $1 = HEAP32[$2 + 156 >> 2];
    if (HEAP32[$2 + 144 >> 2]) {
     $0 = HEAP32[$2 + 160 >> 2] << 1
    } else {
     $0 = 0
    }
    HEAP32[$2 + 156 >> 2] = $1 + ($0 + (HEAP32[$2 + 152 >> 2] >= 0 ? 4 : 3) | 0);
   }
   HEAP32[$2 + 136 >> 2] = jsvNewStringOfLength(HEAP32[$2 + 156 >> 2], 0);
   if (!HEAP32[$2 + 136 >> 2]) {
    jsvUnLock(HEAP32[$2 + 140 >> 2]);
    HEAP32[$2 + 284 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 132 >> 2] = 0;
   HEAP32[$2 + 128 >> 2] = 0;
   HEAP32[$2 + 124 >> 2] = 0;
   HEAP32[$2 + 120 >> 2] = 0;
   jsvStringIteratorNew($2 + 84 | 0, HEAP32[$2 + 136 >> 2], 0);
   if (!(HEAP8[$2 + 203 | 0] & 1)) {
    jsvStringIteratorSetCharAndNext($2 + 84 | 0, HEAP32[$2 + 180 >> 2] << 24 >> 24);
    jsvStringIteratorSetCharAndNext($2 + 84 | 0, HEAP32[$2 + 176 >> 2] << 24 >> 24);
    jsvStringIteratorSetCharAndNext($2 + 84 | 0, ((HEAP32[$2 + 164 >> 2] | (HEAP32[$2 + 152 >> 2] >= 0 ? 128 : 0)) << 24 >> 24 | (HEAP32[$2 + 144 >> 2] ? 64 : 0)) << 24 >> 24);
    if (HEAP32[$2 + 152 >> 2] >= 0) {
     jsvStringIteratorSetCharAndNext($2 + 84 | 0, HEAP32[$2 + 152 >> 2] << 24 >> 24)
    }
    if (HEAP32[$2 + 144 >> 2]) {
     HEAP32[$2 + 20 >> 2] = 0;
     jsvIteratorNew($2 + 24 | 0, HEAP32[$2 + 144 >> 2], 1);
     while (1) {
      if (jsvIteratorHasElement($2 + 24 | 0) & 1) {
       HEAP32[$2 + 16 >> 2] = jsvIteratorGetIntegerValue($2 + 24 | 0);
       if (HEAP32[$2 + 20 >> 2] < HEAP32[$2 + 160 >> 2]) {
        jsvStringIteratorSetCharAndNext($2 + 84 | 0, HEAP32[$2 + 16 >> 2] << 24 >> 24);
        jsvStringIteratorSetCharAndNext($2 + 84 | 0, HEAP32[$2 + 16 >> 2] >> 8 << 24 >> 24);
       }
       jsvIteratorNext($2 + 24 | 0);
       HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] + 1;
       continue;
      }
      break;
     };
     jsvIteratorFree($2 + 24 | 0);
     while (1) {
      if (HEAP32[$2 + 20 >> 2] < HEAP32[$2 + 160 >> 2]) {
       jsvStringIteratorSetCharAndNext($2 + 84 | 0, 0);
       jsvStringIteratorSetCharAndNext($2 + 84 | 0, 0);
       HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] + 1;
       continue;
      }
      break;
     };
    }
   }
   while (1) {
    if (jsvStringIteratorHasChar_1840($2 + 84 | 0) & 1) {
     HEAP32[$2 + 12 >> 2] = graphicsGetPixel($2 + 204 | 0, HEAP32[$2 + 132 >> 2] + HEAP32[$2 + 188 >> 2] | 0, HEAP32[$2 + 128 >> 2] + HEAP32[$2 + 184 >> 2] | 0);
     if ((HEAPU8[$2 + 208 | 0] | HEAPU8[$2 + 209 | 0] << 8 | (HEAPU8[$2 + 210 | 0] << 16 | HEAPU8[$2 + 211 | 0] << 24)) == 6) {
      HEAP32[$2 + 12 >> 2] = !!(HEAP32[$2 + 12 >> 2] & 16) | ((HEAP32[$2 + 12 >> 2] & 32768 ? 4 : 0) | (HEAP32[$2 + 12 >> 2] & 1024 ? 2 : 0))
     }
     HEAP32[$2 + 124 >> 2] = HEAP32[$2 + 12 >> 2] | HEAP32[$2 + 124 >> 2] << HEAP32[$2 + 164 >> 2];
     HEAP32[$2 + 120 >> 2] = HEAP32[$2 + 164 >> 2] + HEAP32[$2 + 120 >> 2];
     HEAP32[$2 + 132 >> 2] = HEAP32[$2 + 132 >> 2] + 1;
     if (HEAP32[$2 + 132 >> 2] >= HEAP32[$2 + 180 >> 2]) {
      HEAP32[$2 + 132 >> 2] = 0;
      HEAP32[$2 + 128 >> 2] = HEAP32[$2 + 128 >> 2] + 1;
     }
     while (1) {
      if (HEAPU32[$2 + 120 >> 2] >= 8) {
       jsvStringIteratorSetCharAndNext($2 + 84 | 0, HEAP32[$2 + 124 >> 2] >>> HEAP32[$2 + 120 >> 2] - 8 << 24 >> 24);
       HEAP32[$2 + 120 >> 2] = HEAP32[$2 + 120 >> 2] - 8;
       continue;
      }
      break;
     };
     continue;
    }
    break;
   };
   jsvStringIteratorFree_1830($2 + 84 | 0);
   jsvUnLock(HEAP32[$2 + 144 >> 2]);
   if (HEAP8[$2 + 203 | 0] & 1) {
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 140 >> 2], 128153, HEAP32[$2 + 136 >> 2]);
    HEAP32[$2 + 284 >> 2] = HEAP32[$2 + 140 >> 2];
    break block;
   }
   HEAP32[$2 + 284 >> 2] = HEAP32[$2 + 136 >> 2];
  }
  __stack_pointer = $2 + 288 | 0;
  return HEAP32[$2 + 284 >> 2];
 }
 
 function jswrap_graphics_getModified($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 96 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 88 >> 2] = $0;
  HEAP8[$2 + 87 | 0] = $1;
  block : {
   if (!(graphicsGetFromVar($2 + 15 | 0, HEAP32[$2 + 88 >> 2]) & 1)) {
    HEAP32[$2 + 92 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 8 >> 2] = 0;
   if ((HEAPU8[$2 + 55 | 0] | HEAPU8[$2 + 56 | 0] << 8) << 16 >> 16 <= (HEAPU8[$2 + 59 | 0] | HEAPU8[$2 + 60 | 0] << 8) << 16 >> 16) {
    HEAP32[$2 + 8 >> 2] = jsvNewObject();
    if (HEAP32[$2 + 8 >> 2]) {
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 8 >> 2], 142142, jsvNewFromInteger((HEAPU8[$2 + 55 | 0] | HEAPU8[$2 + 56 | 0] << 8) << 16 >> 16));
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 8 >> 2], 142139, jsvNewFromInteger((HEAPU8[$2 + 57 | 0] | HEAPU8[$2 + 58 | 0] << 8) << 16 >> 16));
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 8 >> 2], 142064, jsvNewFromInteger((HEAPU8[$2 + 59 | 0] | HEAPU8[$2 + 60 | 0] << 8) << 16 >> 16));
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 8 >> 2], 142061, jsvNewFromInteger((HEAPU8[$2 + 61 | 0] | HEAPU8[$2 + 62 | 0] << 8) << 16 >> 16));
    }
   }
   if (HEAP8[$2 + 87 | 0] & 1) {
    HEAP8[$2 + 59 | 0] = 0;
    HEAP8[$2 + 60 | 0] = 128;
    HEAP8[$2 + 61 | 0] = 0;
    HEAP8[$2 + 62 | 0] = 128;
    HEAP8[$2 + 55 | 0] = 255;
    HEAP8[$2 + 56 | 0] = 127;
    HEAP8[$2 + 57 | 0] = 255;
    HEAP8[$2 + 58 | 0] = 127;
    graphicsSetVar($2 + 15 | 0);
   }
   HEAP32[$2 + 92 >> 2] = HEAP32[$2 + 8 >> 2];
  }
  __stack_pointer = $2 + 96 | 0;
  return HEAP32[$2 + 92 >> 2];
 }
 
 function jswrap_graphics_scroll($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 96 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 88 >> 2] = $0;
  HEAP32[$3 + 84 >> 2] = $1;
  HEAP32[$3 + 80 >> 2] = $2;
  block : {
   if (!(graphicsGetFromVar($3 + 8 | 0, HEAP32[$3 + 88 >> 2]) & 1)) {
    HEAP32[$3 + 92 >> 2] = 0;
    break block;
   }
   graphicsScroll($3 + 8 | 0, HEAP32[$3 + 84 >> 2], HEAP32[$3 + 80 >> 2]);
   graphicsSetVar($3 + 8 | 0);
   HEAP32[$3 + 92 >> 2] = jsvLockAgain(HEAP32[$3 + 88 >> 2]);
  }
  __stack_pointer = $3 + 96 | 0;
  return HEAP32[$3 + 92 >> 2];
 }
 
 function jswrap_graphics_blit($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 224 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 216 >> 2] = $0;
  HEAP32[$2 + 212 >> 2] = $1;
  block : {
   if (!(graphicsGetFromVar($2 + 140 | 0, HEAP32[$2 + 216 >> 2]) & 1)) {
    HEAP32[$2 + 220 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 136 >> 2] = HEAPU8[$2 + 152 | 0] | HEAPU8[$2 + 153 | 0] << 8;
   HEAP32[$2 + 132 >> 2] = HEAPU8[$2 + 154 | 0] | HEAPU8[$2 + 155 | 0] << 8;
   HEAP32[$2 + 128 >> 2] = 0;
   HEAP32[$2 + 124 >> 2] = 0;
   HEAP32[$2 + 120 >> 2] = 0;
   HEAP32[$2 + 116 >> 2] = 0;
   HEAP32[$2 + 112 >> 2] = 0;
   HEAP32[$2 + 108 >> 2] = 0;
   HEAP8[$2 + 107 | 0] = 0;
   HEAP32[$2 + 16 >> 2] = 142142;
   HEAP16[$2 + 20 >> 1] = 10;
   HEAP16[($2 + 16 | 0) + 6 >> 1] = 0;
   HEAP32[$2 + 24 >> 2] = $2 + 128;
   HEAP32[$2 + 28 >> 2] = 142139;
   HEAP16[$2 + 32 >> 1] = 10;
   HEAP16[($2 + 16 | 0) + 18 >> 1] = 0;
   HEAP32[$2 + 36 >> 2] = $2 + 124;
   HEAP32[$2 + 40 >> 2] = 124222;
   HEAP16[$2 + 44 >> 1] = 10;
   HEAP16[($2 + 16 | 0) + 30 >> 1] = 0;
   HEAP32[$2 + 48 >> 2] = $2 + 120;
   HEAP32[$2 + 52 >> 2] = 136443;
   HEAP16[$2 + 56 >> 1] = 10;
   HEAP16[($2 + 16 | 0) + 42 >> 1] = 0;
   HEAP32[$2 + 60 >> 2] = $2 + 116;
   HEAP32[$2 + 64 >> 2] = 142064;
   HEAP16[$2 + 68 >> 1] = 10;
   HEAP16[($2 + 16 | 0) + 54 >> 1] = 0;
   HEAP32[$2 + 72 >> 2] = $2 + 112;
   HEAP32[$2 + 76 >> 2] = 142061;
   HEAP16[$2 + 80 >> 1] = 10;
   HEAP16[($2 + 16 | 0) + 66 >> 1] = 0;
   HEAP32[$2 + 84 >> 2] = $2 + 108;
   HEAP32[$2 + 88 >> 2] = 139017;
   HEAP16[$2 + 92 >> 1] = 12;
   HEAP16[($2 + 16 | 0) + 78 >> 1] = 0;
   HEAP32[$2 + 96 >> 2] = $2 + 107;
   block1 : {
    if (jsvIsObject(HEAP32[$2 + 212 >> 2]) & 1) {
     if (jsvReadConfigObject(HEAP32[$2 + 212 >> 2], $2 + 16 | 0, 7) & 1) {
      break block1
     }
    }
    jsExceptionHere(1, 127228, 0);
    HEAP32[$2 + 220 >> 2] = 0;
    break block;
   }
   if (HEAP32[$2 + 128 >> 2] < 0) {
    HEAP32[$2 + 112 >> 2] = HEAP32[$2 + 112 >> 2] - HEAP32[$2 + 128 >> 2];
    HEAP32[$2 + 120 >> 2] = HEAP32[$2 + 128 >> 2] + HEAP32[$2 + 120 >> 2];
    HEAP32[$2 + 128 >> 2] = 0;
   }
   if (HEAP32[$2 + 124 >> 2] < 0) {
    HEAP32[$2 + 108 >> 2] = HEAP32[$2 + 108 >> 2] - HEAP32[$2 + 124 >> 2];
    HEAP32[$2 + 116 >> 2] = HEAP32[$2 + 124 >> 2] + HEAP32[$2 + 116 >> 2];
    HEAP32[$2 + 124 >> 2] = 0;
   }
   HEAP32[$2 + 12 >> 2] = (HEAP32[$2 + 128 >> 2] + HEAP32[$2 + 120 >> 2] | 0) - HEAP32[$2 + 136 >> 2];
   if (HEAP32[$2 + 12 >> 2] > 0) {
    HEAP32[$2 + 120 >> 2] = HEAP32[$2 + 120 >> 2] - HEAP32[$2 + 12 >> 2]
   }
   HEAP32[$2 + 12 >> 2] = (HEAP32[$2 + 124 >> 2] + HEAP32[$2 + 116 >> 2] | 0) - HEAP32[$2 + 132 >> 2];
   if (HEAP32[$2 + 12 >> 2] > 0) {
    HEAP32[$2 + 116 >> 2] = HEAP32[$2 + 116 >> 2] - HEAP32[$2 + 12 >> 2]
   }
   if (HEAP32[$2 + 112 >> 2] < 0) {
    HEAP32[$2 + 128 >> 2] = HEAP32[$2 + 128 >> 2] - HEAP32[$2 + 112 >> 2];
    HEAP32[$2 + 120 >> 2] = HEAP32[$2 + 112 >> 2] + HEAP32[$2 + 120 >> 2];
    HEAP32[$2 + 112 >> 2] = 0;
   }
   if (HEAP32[$2 + 108 >> 2] < 0) {
    HEAP32[$2 + 124 >> 2] = HEAP32[$2 + 124 >> 2] - HEAP32[$2 + 108 >> 2];
    HEAP32[$2 + 116 >> 2] = HEAP32[$2 + 108 >> 2] + HEAP32[$2 + 116 >> 2];
    HEAP32[$2 + 108 >> 2] = 0;
   }
   HEAP32[$2 + 12 >> 2] = (HEAP32[$2 + 112 >> 2] + HEAP32[$2 + 120 >> 2] | 0) - HEAP32[$2 + 136 >> 2];
   if (HEAP32[$2 + 12 >> 2] > 0) {
    HEAP32[$2 + 120 >> 2] = HEAP32[$2 + 120 >> 2] - HEAP32[$2 + 12 >> 2]
   }
   HEAP32[$2 + 12 >> 2] = (HEAP32[$2 + 108 >> 2] + HEAP32[$2 + 116 >> 2] | 0) - HEAP32[$2 + 132 >> 2];
   if (HEAP32[$2 + 12 >> 2] > 0) {
    HEAP32[$2 + 116 >> 2] = HEAP32[$2 + 116 >> 2] - HEAP32[$2 + 12 >> 2]
   }
   if (!(HEAP32[$2 + 120 >> 2] <= 0 & HEAP32[$2 + 116 >> 2] <= 0)) {
    FUNCTION_TABLE[HEAPU8[$2 + 204 | 0] | HEAPU8[$2 + 205 | 0] << 8 | (HEAPU8[$2 + 206 | 0] << 16 | HEAPU8[$2 + 207 | 0] << 24)]($2 + 140 | 0, HEAP32[$2 + 128 >> 2], HEAP32[$2 + 124 >> 2], HEAP32[$2 + 120 >> 2], HEAP32[$2 + 116 >> 2], HEAP32[$2 + 112 >> 2], HEAP32[$2 + 108 >> 2]);
    if (HEAP8[$2 + 107 | 0] & 1) {
     graphicsSetModified($2 + 140 | 0, HEAP32[$2 + 112 >> 2], HEAP32[$2 + 108 >> 2], HEAP32[$2 + 112 >> 2] + HEAP32[$2 + 120 >> 2] | 0, HEAP32[$2 + 108 >> 2] + HEAP32[$2 + 116 >> 2] | 0);
     graphicsSetVar($2 + 140 | 0);
    }
   }
   HEAP32[$2 + 220 >> 2] = jsvLockAgain(HEAP32[$2 + 216 >> 2]);
  }
  __stack_pointer = $2 + 224 | 0;
  return HEAP32[$2 + 220 >> 2];
 }
 
 function jswrap_graphics_asBMP_X($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 240 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 232 >> 2] = $0;
  HEAP8[$2 + 231 | 0] = $1;
  block : {
   if (!(graphicsGetFromVar($2 + 159 | 0, HEAP32[$2 + 232 >> 2]) & 1)) {
    HEAP32[$2 + 236 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 152 >> 2] = graphicsGetWidth($2 + 159 | 0) & 65535;
   HEAP32[$2 + 148 >> 2] = graphicsGetHeight($2 + 159 | 0) & 65535;
   HEAP32[$2 + 144 >> 2] = HEAPU8[$2 + 175 | 0];
   if ((HEAPU8[$2 + 163 | 0] | HEAPU8[$2 + 164 | 0] << 8 | (HEAPU8[$2 + 165 | 0] << 16 | HEAPU8[$2 + 166 | 0] << 24)) == 6) {
    HEAP32[$2 + 144 >> 2] = 3
   }
   HEAP32[$2 + 140 >> 2] = HEAP32[$2 + 144 >> 2];
   block2 : {
    if (!(HEAP32[$2 + 140 >> 2] <= 1 | HEAP32[$2 + 140 >> 2] >= 4)) {
     HEAP32[$2 + 140 >> 2] = 4;
     break block2;
    }
    if (!(HEAP32[$2 + 140 >> 2] <= 4 | HEAP32[$2 + 140 >> 2] >= 8)) {
     HEAP32[$2 + 140 >> 2] = 8
    }
   }
   HEAP8[$2 + 139 | 0] = HEAP32[$2 + 140 >> 2] <= 8;
   HEAP32[$2 + 132 >> 2] = Math_imul(HEAP32[$2 + 152 >> 2], HEAP32[$2 + 140 >> 2]) + 31 >> 5 << 2;
   if (HEAP8[$2 + 139 | 0] & 1) {
    $0 = 1 << HEAP32[$2 + 140 >> 2]
   } else {
    $0 = 0
   }
   HEAP32[$2 + 128 >> 2] = $0;
   block5 : {
    if (HEAP32[$2 + 140 >> 2] == 16) {
     HEAP32[$2 + 124 >> 2] = 70;
     break block5;
    }
    HEAP32[$2 + 124 >> 2] = Math_imul(HEAP32[$2 + 128 >> 2], 3) + 26;
   }
   HEAP32[$2 + 120 >> 2] = HEAP32[$2 + 124 >> 2] + Math_imul(HEAP32[$2 + 148 >> 2], HEAP32[$2 + 132 >> 2]);
   if (HEAP8[$2 + 231 | 0] & 1) {
    $0 = HEAP32[$2 + 124 >> 2] + HEAP32[$2 + 132 >> 2] | 0
   } else {
    $0 = HEAP32[$2 + 120 >> 2]
   }
   HEAP32[$2 + 116 >> 2] = $0;
   HEAP32[$2 + 112 >> 2] = jsvNewFlatStringOfLength(HEAP32[$2 + 116 >> 2]);
   if (!HEAP32[$2 + 112 >> 2]) {
    HEAP32[$2 + 236 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 108 >> 2] = jsvGetFlatStringPointer(HEAP32[$2 + 112 >> 2]);
   if (!HEAP32[$2 + 108 >> 2]) {
    HEAP32[$2 + 236 >> 2] = 0;
    break block;
   }
   HEAP8[HEAP32[$2 + 108 >> 2]] = 66;
   HEAP8[HEAP32[$2 + 108 >> 2] + 1 | 0] = 77;
   HEAP8[HEAP32[$2 + 108 >> 2] + 2 | 0] = HEAP32[$2 + 120 >> 2];
   HEAP8[HEAP32[$2 + 108 >> 2] + 3 | 0] = HEAP32[$2 + 120 >> 2] >> 8;
   HEAP8[HEAP32[$2 + 108 >> 2] + 4 | 0] = HEAP32[$2 + 120 >> 2] >> 16;
   HEAP8[HEAP32[$2 + 108 >> 2] + 5 | 0] = HEAP32[$2 + 120 >> 2] >> 24;
   HEAP8[HEAP32[$2 + 108 >> 2] + 10 | 0] = HEAP32[$2 + 124 >> 2];
   HEAP8[HEAP32[$2 + 108 >> 2] + 18 | 0] = HEAP32[$2 + 152 >> 2];
   HEAP8[HEAP32[$2 + 108 >> 2] + 19 | 0] = HEAP32[$2 + 152 >> 2] >> 8;
   block7 : {
    if (HEAP32[$2 + 140 >> 2] == 16) {
     HEAP32[$2 + 104 >> 2] = 14;
     HEAP8[HEAP32[$2 + 108 >> 2] + 14 | 0] = 56;
     HEAP8[HEAP32[$2 + 108 >> 2] + 22 | 0] = HEAP32[$2 + 148 >> 2];
     HEAP8[HEAP32[$2 + 108 >> 2] + 23 | 0] = HEAP32[$2 + 148 >> 2] >> 8;
     HEAP8[HEAP32[$2 + 108 >> 2] + 26 | 0] = 1;
     HEAP8[HEAP32[$2 + 108 >> 2] + 28 | 0] = 16;
     HEAP8[HEAP32[$2 + 108 >> 2] + 30 | 0] = 3;
     HEAP32[$2 + 100 >> 2] = Math_imul(HEAP32[$2 + 148 >> 2], HEAP32[$2 + 132 >> 2]);
     HEAP8[HEAP32[$2 + 108 >> 2] + 34 | 0] = HEAP32[$2 + 100 >> 2];
     HEAP8[HEAP32[$2 + 108 >> 2] + 35 | 0] = HEAP32[$2 + 100 >> 2] >>> 8;
     HEAP8[HEAP32[$2 + 108 >> 2] + 36 | 0] = HEAP32[$2 + 100 >> 2] >>> 16;
     HEAP8[HEAP32[$2 + 108 >> 2] + 37 | 0] = HEAP32[$2 + 100 >> 2] >>> 24;
     HEAP8[HEAP32[$2 + 108 >> 2] + 55 | 0] = 248;
     HEAP8[HEAP32[$2 + 108 >> 2] + 58 | 0] = 224;
     HEAP8[HEAP32[$2 + 108 >> 2] + 59 | 0] = 7;
     HEAP8[HEAP32[$2 + 108 >> 2] + 62 | 0] = 31;
     break block7;
    }
    HEAP8[HEAP32[$2 + 108 >> 2] + 14 | 0] = 12;
    HEAP8[HEAP32[$2 + 108 >> 2] + 20 | 0] = HEAP32[$2 + 148 >> 2];
    HEAP8[HEAP32[$2 + 108 >> 2] + 21 | 0] = HEAP32[$2 + 148 >> 2] >> 8;
    HEAP8[HEAP32[$2 + 108 >> 2] + 22 | 0] = 1;
    HEAP8[HEAP32[$2 + 108 >> 2] + 24 | 0] = HEAP32[$2 + 140 >> 2];
    if (HEAP8[$2 + 139 | 0] & 1) {
     block8 : {
      if (HEAP32[$2 + 140 >> 2] == 1) {
       HEAP8[HEAP32[$2 + 108 >> 2] + 26 | 0] = 255;
       HEAP8[HEAP32[$2 + 108 >> 2] + 27 | 0] = 255;
       HEAP8[HEAP32[$2 + 108 >> 2] + 28 | 0] = 255;
       break block8;
      }
      block9 : {
       if (HEAP32[$2 + 144 >> 2] == 3) {
        HEAP32[$2 + 96 >> 2] = 0;
        while (1) {
         if (HEAP32[$2 + 96 >> 2] < HEAP32[$2 + 128 >> 2]) {
          HEAP8[HEAP32[$2 + 108 >> 2] + (Math_imul(HEAP32[$2 + 96 >> 2], 3) + 26 | 0) | 0] = HEAP32[$2 + 96 >> 2] & 1 ? 255 : 0;
          HEAP8[HEAP32[$2 + 108 >> 2] + (Math_imul(HEAP32[$2 + 96 >> 2], 3) + 27 | 0) | 0] = HEAP32[$2 + 96 >> 2] & 2 ? 255 : 0;
          HEAP8[HEAP32[$2 + 108 >> 2] + (Math_imul(HEAP32[$2 + 96 >> 2], 3) + 28 | 0) | 0] = HEAP32[$2 + 96 >> 2] & 4 ? 255 : 0;
          HEAP32[$2 + 96 >> 2] = HEAP32[$2 + 96 >> 2] + 1;
          continue;
         }
         break;
        };
        break block9;
       }
       block10 : {
        if (HEAP32[$2 + 144 >> 2] == 4) {
         HEAP32[$2 + 92 >> 2] = 0;
         while (1) {
          if (HEAP32[$2 + 92 >> 2] < 16) {
           HEAP32[$2 + 88 >> 2] = HEAPU16[(HEAP32[$2 + 92 >> 2] << 1) + 189936 >> 1];
           HEAP8[HEAP32[$2 + 108 >> 2] + (Math_imul(HEAP32[$2 + 92 >> 2], 3) + 26 | 0) | 0] = HEAP32[$2 + 88 >> 2] << 3 & 248;
           HEAP8[HEAP32[$2 + 108 >> 2] + (Math_imul(HEAP32[$2 + 92 >> 2], 3) + 27 | 0) | 0] = HEAP32[$2 + 88 >> 2] >> 3 & 252;
           HEAP8[HEAP32[$2 + 108 >> 2] + (Math_imul(HEAP32[$2 + 92 >> 2], 3) + 28 | 0) | 0] = HEAP32[$2 + 88 >> 2] >> 8 & 248;
           HEAP32[$2 + 92 >> 2] = HEAP32[$2 + 92 >> 2] + 1;
           continue;
          }
          break;
         };
         break block10;
        }
        block11 : {
         if (HEAP32[$2 + 144 >> 2] == 8) {
          HEAP32[$2 + 84 >> 2] = 0;
          while (1) {
           if (HEAP32[$2 + 84 >> 2] < 255) {
            HEAP32[$2 + 80 >> 2] = HEAPU16[(HEAP32[$2 + 84 >> 2] << 1) + 189968 >> 1];
            HEAP8[HEAP32[$2 + 108 >> 2] + (Math_imul(HEAP32[$2 + 84 >> 2], 3) + 26 | 0) | 0] = HEAP32[$2 + 80 >> 2] << 3 & 248;
            HEAP8[HEAP32[$2 + 108 >> 2] + (Math_imul(HEAP32[$2 + 84 >> 2], 3) + 27 | 0) | 0] = HEAP32[$2 + 80 >> 2] >> 3 & 252;
            HEAP8[HEAP32[$2 + 108 >> 2] + (Math_imul(HEAP32[$2 + 84 >> 2], 3) + 28 | 0) | 0] = HEAP32[$2 + 80 >> 2] >> 8 & 248;
            HEAP32[$2 + 84 >> 2] = HEAP32[$2 + 84 >> 2] + 1;
            continue;
           }
           break;
          };
          break block11;
         }
         HEAP32[$2 + 76 >> 2] = 0;
         while (1) {
          if (HEAP32[$2 + 76 >> 2] < 1 << HEAP32[$2 + 144 >> 2]) {
           HEAP8[$2 + 75 | 0] = (Math_imul(HEAP32[$2 + 76 >> 2], 255) | 0) / (1 << HEAP32[$2 + 144 >> 2]);
           HEAP8[HEAP32[$2 + 108 >> 2] + (Math_imul(HEAP32[$2 + 76 >> 2], 3) + 26 | 0) | 0] = HEAPU8[$2 + 75 | 0];
           HEAP8[HEAP32[$2 + 108 >> 2] + (Math_imul(HEAP32[$2 + 76 >> 2], 3) + 27 | 0) | 0] = HEAPU8[$2 + 75 | 0];
           HEAP8[HEAP32[$2 + 108 >> 2] + (Math_imul(HEAP32[$2 + 76 >> 2], 3) + 28 | 0) | 0] = HEAPU8[$2 + 75 | 0];
           HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 76 >> 2] + 1;
           continue;
          }
          break;
         };
        }
       }
      }
     }
    }
   }
   HEAP32[$2 + 68 >> 2] = (1 << HEAP32[$2 + 140 >> 2]) - 1;
   HEAP32[$2 + 64 >> 2] = 8 / HEAP32[$2 + 140 >> 2];
   HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 124 >> 2];
   HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 148 >> 2] - 1;
   while (1) {
    if (HEAP32[$2 + 56 >> 2] >= 0) {
     HEAP32[$2 + 52 >> 2] = 0;
     block12 : {
      if (HEAP32[$2 + 140 >> 2] < 8) {
       HEAP32[$2 + 48 >> 2] = 0;
       while (1) {
        if (HEAP32[$2 + 48 >> 2] < HEAP32[$2 + 152 >> 2]) {
         HEAP32[$2 + 44 >> 2] = 0;
         HEAP32[$2 + 40 >> 2] = 0;
         while (1) {
          if (HEAP32[$2 + 40 >> 2] < HEAP32[$2 + 64 >> 2]) {
           $0 = HEAP32[$2 + 48 >> 2];
           HEAP32[$2 + 48 >> 2] = $0 + 1;
           HEAP32[$2 + 36 >> 2] = graphicsGetPixel($2 + 159 | 0, $0, HEAP32[$2 + 56 >> 2]);
           if ((HEAPU8[$2 + 163 | 0] | HEAPU8[$2 + 164 | 0] << 8 | (HEAPU8[$2 + 165 | 0] << 16 | HEAPU8[$2 + 166 | 0] << 24)) == 6) {
            HEAP32[$2 + 36 >> 2] = !!(HEAP32[$2 + 36 >> 2] & 16) | ((HEAP32[$2 + 36 >> 2] & 32768 ? 4 : 0) | (HEAP32[$2 + 36 >> 2] & 1024 ? 2 : 0))
           }
           HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 36 >> 2] & HEAP32[$2 + 68 >> 2] | HEAP32[$2 + 44 >> 2] << HEAP32[$2 + 140 >> 2];
           HEAP32[$2 + 40 >> 2] = HEAP32[$2 + 40 >> 2] + 1;
           continue;
          }
          break;
         };
         $1 = HEAP32[$2 + 44 >> 2];
         $3 = HEAP32[$2 + 108 >> 2];
         $0 = HEAP32[$2 + 60 >> 2];
         HEAP32[$2 + 60 >> 2] = $0 + 1;
         HEAP8[$3 + $0 | 0] = $1;
         HEAP32[$2 + 52 >> 2] = HEAP32[$2 + 52 >> 2] + 1;
         continue;
        }
        break;
       };
       break block12;
      }
      HEAP32[$2 + 32 >> 2] = 0;
      while (1) {
       if (HEAP32[$2 + 32 >> 2] < HEAP32[$2 + 152 >> 2]) {
        HEAP32[$2 + 28 >> 2] = graphicsGetPixel($2 + 159 | 0, HEAP32[$2 + 32 >> 2], HEAP32[$2 + 56 >> 2]);
        HEAP32[$2 + 24 >> 2] = 0;
        while (1) {
         if (HEAP32[$2 + 24 >> 2] < HEAP32[$2 + 140 >> 2]) {
          $1 = HEAP32[$2 + 28 >> 2];
          $3 = HEAP32[$2 + 108 >> 2];
          $0 = HEAP32[$2 + 60 >> 2];
          HEAP32[$2 + 60 >> 2] = $0 + 1;
          HEAP8[$3 + $0 | 0] = $1;
          HEAP32[$2 + 52 >> 2] = HEAP32[$2 + 52 >> 2] + 1;
          HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 28 >> 2] >>> 8;
          HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 24 >> 2] + 8;
          continue;
         }
         break;
        };
        HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 32 >> 2] + 1;
        continue;
       }
       break;
      };
     }
     if (HEAP32[$2 + 52 >> 2] < HEAP32[$2 + 132 >> 2]) {
      HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 60 >> 2] + (HEAP32[$2 + 132 >> 2] - HEAP32[$2 + 52 >> 2] | 0)
     }
     if (!(!(HEAP8[$2 + 231 | 0] & 1) | HEAP32[$2 + 60 >> 2] <= 2)) {
      jshKickWatchDog();
      HEAP8[$2 + 23 | 0] = !HEAP32[$2 + 56 >> 2];
      if (HEAP8[$2 + 23 | 0] & 1) {
       $0 = HEAP32[$2 + 60 >> 2]
      } else {
       $0 = HEAP32[$2 + 60 >> 2] - (HEAP32[$2 + 60 >> 2] % 3 | 0) | 0
      }
      HEAP32[$2 + 16 >> 2] = $0;
      HEAP32[$2 + 12 >> 2] = jsvNewArrayBufferFromString(HEAP32[$2 + 112 >> 2], HEAP32[$2 + 16 >> 2]);
      HEAP32[$2 + 8 >> 2] = jswrap_btoa(HEAP32[$2 + 12 >> 2]);
      jsvUnLock(HEAP32[$2 + 12 >> 2]);
      if (HEAP32[$2 + 8 >> 2]) {
       HEAP32[$2 >> 2] = HEAP32[$2 + 8 >> 2];
       jsiConsolePrintf(124350, $2);
      }
      jsvUnLock(HEAP32[$2 + 8 >> 2]);
      if (HEAP32[$2 + 16 >> 2] < HEAP32[$2 + 60 >> 2]) {
       $1 = HEAP32[$2 + 108 >> 2];
       $3 = HEAP32[$2 + 108 >> 2];
       $4 = HEAP32[$2 + 16 >> 2];
       $0 = HEAP32[$2 + 60 >> 2] - HEAP32[$2 + 16 >> 2] | 0;
       if ($0) {
        wasm2js_memory_copy($1, $3 + $4 | 0, $0)
       }
      }
      HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 60 >> 2] - HEAP32[$2 + 16 >> 2];
     }
     HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 56 >> 2] - 1;
     continue;
    }
    break;
   };
   if (HEAP8[$2 + 231 | 0] & 1) {
    jsiConsolePrintf(148265, 0);
    jsvUnLock(HEAP32[$2 + 112 >> 2]);
    HEAP32[$2 + 236 >> 2] = 0;
    break block;
   }
   HEAP32[$2 + 236 >> 2] = HEAP32[$2 + 112 >> 2];
  }
  __stack_pointer = $2 + 240 | 0;
  return HEAP32[$2 + 236 >> 2];
 }
 
 function jswrap_graphics_asBMP($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = jswrap_graphics_asBMP_X(HEAP32[$1 + 12 >> 2], 0);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function jswrap_graphics_asURL($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 24 >> 2] = $0;
  HEAP32[$1 + 20 >> 2] = jswrap_graphics_asBMP_X(HEAP32[$1 + 24 >> 2], 0);
  block : {
   if (!HEAP32[$1 + 20 >> 2]) {
    HEAP32[$1 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 16 >> 2] = jswrap_btoa(HEAP32[$1 + 20 >> 2]);
   jsvUnLock(HEAP32[$1 + 20 >> 2]);
   if (!HEAP32[$1 + 16 >> 2]) {
    HEAP32[$1 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$1 >> 2] = HEAP32[$1 + 16 >> 2];
   HEAP32[$1 + 12 >> 2] = jsvVarPrintf(124260, $1);
   jsvUnLock(HEAP32[$1 + 16 >> 2]);
   HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 12 >> 2];
  }
  __stack_pointer = $1 + 32 | 0;
  return HEAP32[$1 + 28 >> 2];
 }
 
 function jswrap_graphics_dump($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  jsiConsolePrintf(142545, 0);
  jsvUnLock(jswrap_graphics_asBMP_X(HEAP32[$1 + 12 >> 2], 1));
  __stack_pointer = $1 + 16 | 0;
 }
 
 function jswrap_graphics_quadraticBezier($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 160 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 152 >> 2] = $0;
  HEAP32[$3 + 148 >> 2] = $1;
  HEAP32[$3 + 144 >> 2] = $2;
  HEAP32[$3 + 140 >> 2] = jsvNewEmptyArray();
  block : {
   if (!HEAP32[$3 + 140 >> 2]) {
    HEAP32[$3 + 156 >> 2] = 0;
    break block;
   }
   if ((jsvGetArrayLength(HEAP32[$3 + 148 >> 2]) | 0) != 6) {
    HEAP32[$3 + 156 >> 2] = HEAP32[$3 + 140 >> 2];
    break block;
   }
   HEAP32[$3 + 136 >> 2] = 5;
   HEAP32[$3 + 108 >> 2] = 0;
   jsvIteratorNew($3 + 48 | 0, HEAP32[$3 + 148 >> 2], 1);
   HEAP32[$3 + 44 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 44 >> 2] < 6) {
     $0 = jsvIteratorGetIntegerValue($3 + 48 | 0);
     HEAP32[($3 + 112 | 0) + (HEAP32[$3 + 44 >> 2] << 2) >> 2] = $0;
     jsvIteratorNext($3 + 48 | 0);
     HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 44 >> 2] + 1;
     continue;
    }
    break;
   };
   jsvIteratorFree($3 + 48 | 0);
   if (jsvIsObject(HEAP32[$3 + 144 >> 2]) & 1) {
    HEAP32[$3 + 108 >> 2] = jsvObjectGetIntegerChild(HEAP32[$3 + 144 >> 2], 124586)
   }
   HEAP32[$3 + 40 >> 2] = 4096;
   HEAP32[$3 + 36 >> 2] = 12;
   HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 112 >> 2] - HEAP32[$3 + 128 >> 2];
   if (HEAP32[$3 + 32 >> 2] < 0) {
    HEAP32[$3 + 32 >> 2] = 0 - HEAP32[$3 + 32 >> 2]
   }
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 116 >> 2] - HEAP32[$3 + 132 >> 2];
   if (HEAP32[$3 + 28 >> 2] < 0) {
    HEAP32[$3 + 28 >> 2] = 0 - HEAP32[$3 + 28 >> 2]
   }
   if (HEAP32[$3 + 32 >> 2] < HEAP32[$3 + 28 >> 2]) {
    $0 = HEAP32[$3 + 32 >> 2]
   } else {
    $0 = HEAP32[$3 + 28 >> 2]
   }
   HEAP32[$3 + 24 >> 2] = $0;
   if (!HEAP32[$3 + 24 >> 2]) {
    HEAP32[$3 + 24 >> 2] = 1
   }
   HEAP32[$3 + 20 >> 2] = (HEAP32[$3 + 136 >> 2] << 12) / HEAP32[$3 + 24 >> 2];
   if (HEAP32[$3 + 20 >> 2] >= 4096) {
    HEAP32[$3 + 20 >> 2] = 1365
   }
   if (HEAP32[$3 + 20 >> 2] < 409) {
    HEAP32[$3 + 20 >> 2] = 409
   }
   if (HEAP32[$3 + 108 >> 2] > 0) {
    HEAP32[$3 + 20 >> 2] = 4096 / HEAP32[$3 + 108 >> 2]
   }
   jsvArrayPush2Int(HEAP32[$3 + 140 >> 2], HEAP32[$3 + 112 >> 2], HEAP32[$3 + 116 >> 2]);
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 20 >> 2];
   while (1) {
    if (HEAP32[$3 + 16 >> 2] <= 4096) {
     HEAP32[$3 + 12 >> 2] = Math_imul(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 16 >> 2]) >> 12;
     HEAP32[$3 + 8 >> 2] = Math_imul(4096 - HEAP32[$3 + 16 >> 2] | 0, 4096 - HEAP32[$3 + 16 >> 2] | 0) >> 12;
     HEAP32[$3 + 4 >> 2] = Math_imul(HEAP32[$3 + 16 >> 2], 4096 - HEAP32[$3 + 16 >> 2] << 1) >> 12;
     jsvArrayPush2Int(HEAP32[$3 + 140 >> 2], ((Math_imul(HEAP32[$3 + 112 >> 2], HEAP32[$3 + 8 >> 2]) + Math_imul(HEAP32[$3 + 120 >> 2], HEAP32[$3 + 4 >> 2]) | 0) + Math_imul(HEAP32[$3 + 128 >> 2], HEAP32[$3 + 12 >> 2]) | 0) + 2048 >> 12, ((Math_imul(HEAP32[$3 + 116 >> 2], HEAP32[$3 + 8 >> 2]) + Math_imul(HEAP32[$3 + 124 >> 2], HEAP32[$3 + 4 >> 2]) | 0) + Math_imul(HEAP32[$3 + 132 >> 2], HEAP32[$3 + 12 >> 2]) | 0) + 2048 >> 12);
     HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 20 >> 2] + HEAP32[$3 + 16 >> 2];
     continue;
    }
    break;
   };
   jsvArrayPush2Int(HEAP32[$3 + 140 >> 2], HEAP32[$3 + 128 >> 2], HEAP32[$3 + 132 >> 2]);
   HEAP32[$3 + 156 >> 2] = HEAP32[$3 + 140 >> 2];
  }
  __stack_pointer = $3 + 160 | 0;
  return HEAP32[$3 + 156 >> 2];
 }
 
 function jswrap_graphics_transformVertices($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0.0;
  $3 = __stack_pointer - 320 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 312 >> 2] = $0;
  HEAP32[$3 + 308 >> 2] = $1;
  HEAP32[$3 + 304 >> 2] = $2;
  HEAP32[$3 + 300 >> 2] = jsvNewEmptyArray();
  block : {
   if (!HEAP32[$3 + 300 >> 2]) {
    HEAP32[$3 + 316 >> 2] = 0;
    break block;
   }
   if (!(jsvIsIterable(HEAP32[$3 + 308 >> 2]) & 1)) {
    HEAP32[$3 + 316 >> 2] = HEAP32[$3 + 300 >> 2];
    break block;
   }
   block1 : {
    if (jsvIsObject(HEAP32[$3 + 304 >> 2]) & 1) {
     HEAPF64[$3 + 232 >> 3] = 0;
     HEAPF64[$3 + 224 >> 3] = 0;
     HEAPF64[$3 + 216 >> 3] = 1;
     HEAPF64[$3 + 208 >> 3] = 0;
     HEAP32[$3 + 160 >> 2] = 124025;
     HEAP16[$3 + 164 >> 1] = 11;
     HEAP16[($3 + 160 | 0) + 6 >> 1] = 0;
     HEAP32[$3 + 168 >> 2] = $3 + 232;
     HEAP32[$3 + 172 >> 2] = 123896;
     HEAP16[$3 + 176 >> 1] = 11;
     HEAP16[($3 + 160 | 0) + 18 >> 1] = 0;
     HEAP32[$3 + 180 >> 2] = $3 + 224;
     HEAP32[$3 + 184 >> 2] = 137796;
     HEAP16[$3 + 188 >> 1] = 11;
     HEAP16[($3 + 160 | 0) + 30 >> 1] = 0;
     HEAP32[$3 + 192 >> 2] = $3 + 216;
     HEAP32[$3 + 196 >> 2] = 137346;
     HEAP16[$3 + 200 >> 1] = 11;
     HEAP16[($3 + 160 | 0) + 42 >> 1] = 0;
     HEAP32[$3 + 204 >> 2] = $3 + 208;
     if (!(jsvReadConfigObject(HEAP32[$3 + 304 >> 2], $3 + 160 | 0, 4) & 1)) {
      HEAP32[$3 + 316 >> 2] = HEAP32[$3 + 300 >> 2];
      break block;
     }
     HEAPF64[$3 + 152 >> 3] = 1;
     HEAPF64[$3 + 144 >> 3] = 0;
     if (HEAPF64[$3 + 208 >> 3] != 0.0) {
      HEAPF64[$3 + 152 >> 3] = jswrap_math_cos(HEAPF64[$3 + 208 >> 3]);
      HEAPF64[$3 + 144 >> 3] = jswrap_math_sin(HEAPF64[$3 + 208 >> 3]);
     }
     HEAPF64[$3 + 240 >> 3] = HEAPF64[$3 + 152 >> 3] * HEAPF64[$3 + 216 >> 3];
     HEAPF64[$3 + 256 >> 3] = -HEAPF64[$3 + 144 >> 3] * HEAPF64[$3 + 216 >> 3];
     HEAPF64[$3 + 272 >> 3] = HEAPF64[$3 + 232 >> 3];
     HEAPF64[$3 + 248 >> 3] = HEAPF64[$3 + 144 >> 3] * HEAPF64[$3 + 216 >> 3];
     HEAPF64[$3 + 264 >> 3] = HEAPF64[$3 + 152 >> 3] * HEAPF64[$3 + 216 >> 3];
     HEAPF64[$3 + 280 >> 3] = HEAPF64[$3 + 224 >> 3];
     break block1;
    }
    block3 : {
     block2 : {
      if (!(jsvIsIterable(HEAP32[$3 + 304 >> 2]) & 1)) {
       break block2
      }
      if ((jsvGetLength(HEAP32[$3 + 304 >> 2]) | 0) != 6) {
       break block2
      }
      jsvIteratorNew($3 + 84 | 0, HEAP32[$3 + 304 >> 2], 1);
      HEAP32[$3 + 80 >> 2] = 0;
      while (1) {
       if (HEAP32[$3 + 80 >> 2] < 6) {
        $4 = jsvIteratorGetFloatValue($3 + 84 | 0);
        HEAPF64[($3 + 240 | 0) + (HEAP32[$3 + 80 >> 2] << 3) >> 3] = $4;
        jsvIteratorNext($3 + 84 | 0);
        HEAP32[$3 + 80 >> 2] = HEAP32[$3 + 80 >> 2] + 1;
        continue;
       }
       break;
      };
      jsvIteratorFree($3 + 84 | 0);
      break block3;
     }
     jsExceptionHere(3, 124715, 0);
     HEAP32[$3 + 316 >> 2] = 0;
     break block;
    }
   }
   jsvIteratorNew($3 + 20 | 0, HEAP32[$3 + 308 >> 2], 1);
   while (1) {
    block4 : {
     if (!(jsvIteratorHasElement($3 + 20 | 0) & 1)) {
      break block4
     }
     HEAPF64[$3 + 8 >> 3] = jsvIteratorGetFloatValue($3 + 20 | 0);
     jsvIteratorNext($3 + 20 | 0);
     if (!(jsvIteratorHasElement($3 + 20 | 0) & 1)) {
      break block4
     }
     HEAPF64[$3 >> 3] = jsvIteratorGetFloatValue($3 + 20 | 0);
     jsvIteratorNext($3 + 20 | 0);
     jsvArrayPushAndUnLock(HEAP32[$3 + 300 >> 2], jsvNewFromFloat(HEAPF64[$3 + 240 >> 3] * HEAPF64[$3 + 8 >> 3] + HEAPF64[$3 + 256 >> 3] * HEAPF64[$3 >> 3] + HEAPF64[$3 + 272 >> 3]));
     jsvArrayPushAndUnLock(HEAP32[$3 + 300 >> 2], jsvNewFromFloat(HEAPF64[$3 + 248 >> 3] * HEAPF64[$3 + 8 >> 3] + HEAPF64[$3 + 264 >> 3] * HEAPF64[$3 >> 3] + HEAPF64[$3 + 280 >> 3]));
     continue;
    }
    break;
   };
   jsvIteratorFree($3 + 20 | 0);
   HEAP32[$3 + 316 >> 2] = HEAP32[$3 + 300 >> 2];
  }
  __stack_pointer = $3 + 320 | 0;
  return HEAP32[$3 + 316 >> 2];
 }
 
 function jswrap_graphics_floodFill($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 128 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 120 >> 2] = $0;
  HEAP32[$4 + 116 >> 2] = $1;
  HEAP32[$4 + 112 >> 2] = $2;
  HEAP32[$4 + 108 >> 2] = $3;
  block : {
   if (!(graphicsGetFromVar($4 + 36 | 0, HEAP32[$4 + 120 >> 2]) & 1)) {
    HEAP32[$4 + 124 >> 2] = 0;
    break block;
   }
   if ((HEAPU8[$4 + 96 | 0] | HEAPU8[$4 + 97 | 0] << 8 | (HEAPU8[$4 + 98 | 0] << 16 | HEAPU8[$4 + 99 | 0] << 24)) == 573) {
    jsExceptionHere(1, 135695, 0);
    HEAP32[$4 + 124 >> 2] = 0;
    break block;
   }
   HEAP32[$4 + 32 >> 2] = HEAPU8[$4 + 53 | 0] | HEAPU8[$4 + 54 | 0] << 8 | (HEAPU8[$4 + 55 | 0] << 16 | HEAPU8[$4 + 56 | 0] << 24);
   if (HEAP32[$4 + 108 >> 2]) {
    HEAP32[$4 + 32 >> 2] = jswrap_graphics_toColor(HEAP32[$4 + 120 >> 2], HEAP32[$4 + 108 >> 2], 0, 0)
   }
   HEAP32[$4 + 28 >> 2] = graphicsGetPixel($4 + 36 | 0, HEAP32[$4 + 116 >> 2], HEAP32[$4 + 112 >> 2]);
   HEAP32[$4 + 24 >> 2] = 64;
   HEAP32[$4 + 20 >> 2] = $4;
   $0 = $4 - 128 | 0;
   __stack_pointer = $0;
   HEAP32[$4 + 16 >> 2] = 0;
   block1 : {
    if (HEAP32[$4 + 16 >> 2] < 64) {
     $2 = HEAP32[$4 + 116 >> 2];
     $1 = HEAP32[$4 + 16 >> 2];
     HEAP32[$4 + 16 >> 2] = $1 + 1;
     HEAP16[($1 << 1) + $0 >> 1] = $2;
     $2 = HEAP32[$4 + 112 >> 2];
     $1 = HEAP32[$4 + 16 >> 2];
     HEAP32[$4 + 16 >> 2] = $1 + 1;
     HEAP16[($1 << 1) + $0 >> 1] = $2;
     break block1;
    }
    HEAP32[$4 + 16 >> 2] = 65;
   }
   while (1) {
    $1 = 0;
    $1 = HEAP32[$4 + 16 >> 2] > 0 ? HEAP32[$4 + 16 >> 2] <= 64 : $1;
    if ($1) {
     $1 = HEAP32[$4 + 16 >> 2] - 1 | 0;
     HEAP32[$4 + 16 >> 2] = $1;
     HEAP16[$4 + 14 >> 1] = HEAPU16[($1 << 1) + $0 >> 1];
     $1 = HEAP32[$4 + 16 >> 2] - 1 | 0;
     HEAP32[$4 + 16 >> 2] = $1;
     HEAP16[$4 + 12 >> 1] = HEAPU16[($1 << 1) + $0 >> 1];
     HEAP16[$4 + 10 >> 1] = HEAPU16[$4 + 12 >> 1];
     while (1) {
      if (_jswrap_graphics_floodFill_inside($4 + 36 | 0, (HEAP16[$4 + 10 >> 1] << 16 >> 16) - 1 | 0, HEAP16[$4 + 14 >> 1] << 16 >> 16, HEAP32[$4 + 28 >> 2]) & 1) {
       $1 = HEAPU16[$4 + 10 >> 1] - 1 | 0;
       HEAP16[$4 + 10 >> 1] = $1;
       graphicsSetPixel($4 + 36 | 0, $1 << 16 >> 16, HEAP16[$4 + 14 >> 1] << 16 >> 16, HEAP32[$4 + 32 >> 2]);
       continue;
      }
      break;
     };
     while (1) {
      if (_jswrap_graphics_floodFill_inside($4 + 36 | 0, HEAP16[$4 + 12 >> 1] << 16 >> 16, HEAP16[$4 + 14 >> 1] << 16 >> 16, HEAP32[$4 + 28 >> 2]) & 1) {
       $1 = HEAPU16[$4 + 12 >> 1];
       HEAP16[$4 + 12 >> 1] = $1 + 1;
       graphicsSetPixel($4 + 36 | 0, $1 << 16 >> 16, HEAP16[$4 + 14 >> 1] << 16 >> 16, HEAP32[$4 + 32 >> 2]);
       continue;
      }
      break;
     };
     HEAP8[$4 + 9 | 0] = 0;
     HEAP16[$4 + 6 >> 1] = HEAPU16[$4 + 10 >> 1];
     while (1) {
      if (HEAP16[$4 + 6 >> 1] << 16 >> 16 < HEAP16[$4 + 12 >> 1] << 16 >> 16) {
       block2 : {
        if (!(_jswrap_graphics_floodFill_inside($4 + 36 | 0, HEAP16[$4 + 6 >> 1] << 16 >> 16, (HEAP16[$4 + 14 >> 1] << 16 >> 16) + 1 | 0, HEAP32[$4 + 28 >> 2]) & 1)) {
         HEAP8[$4 + 9 | 0] = 0;
         break block2;
        }
        if (!(HEAP8[$4 + 9 | 0] & 1)) {
         block3 : {
          if (HEAP32[$4 + 16 >> 2] < 64) {
           $2 = HEAPU16[$4 + 6 >> 1];
           $1 = HEAP32[$4 + 16 >> 2];
           HEAP32[$4 + 16 >> 2] = $1 + 1;
           HEAP16[($1 << 1) + $0 >> 1] = $2;
           $2 = HEAP16[$4 + 14 >> 1] << 16 >> 16;
           $1 = HEAP32[$4 + 16 >> 2];
           HEAP32[$4 + 16 >> 2] = $1 + 1;
           HEAP16[($1 << 1) + $0 >> 1] = $2 + 1;
           break block3;
          }
          HEAP32[$4 + 16 >> 2] = 65;
         }
         HEAP8[$4 + 9 | 0] = 1;
        }
       }
       HEAP16[$4 + 6 >> 1] = HEAPU16[$4 + 6 >> 1] + 1;
       continue;
      }
      break;
     };
     HEAP8[$4 + 9 | 0] = 0;
     HEAP16[$4 + 4 >> 1] = HEAPU16[$4 + 10 >> 1];
     while (1) {
      if (HEAP16[$4 + 4 >> 1] << 16 >> 16 < HEAP16[$4 + 12 >> 1] << 16 >> 16) {
       block4 : {
        if (!(_jswrap_graphics_floodFill_inside($4 + 36 | 0, HEAP16[$4 + 4 >> 1] << 16 >> 16, (HEAP16[$4 + 14 >> 1] << 16 >> 16) - 1 | 0, HEAP32[$4 + 28 >> 2]) & 1)) {
         HEAP8[$4 + 9 | 0] = 0;
         break block4;
        }
        if (!(HEAP8[$4 + 9 | 0] & 1)) {
         block5 : {
          if (HEAP32[$4 + 16 >> 2] < 64) {
           $2 = HEAPU16[$4 + 4 >> 1];
           $1 = HEAP32[$4 + 16 >> 2];
           HEAP32[$4 + 16 >> 2] = $1 + 1;
           HEAP16[($1 << 1) + $0 >> 1] = $2;
           $2 = HEAP16[$4 + 14 >> 1] << 16 >> 16;
           $1 = HEAP32[$4 + 16 >> 2];
           HEAP32[$4 + 16 >> 2] = $1 + 1;
           HEAP16[($1 << 1) + $0 >> 1] = $2 - 1;
           break block5;
          }
          HEAP32[$4 + 16 >> 2] = 65;
         }
         HEAP8[$4 + 9 | 0] = 1;
        }
       }
       HEAP16[$4 + 4 >> 1] = HEAPU16[$4 + 4 >> 1] + 1;
       continue;
      }
      break;
     };
     continue;
    }
    break;
   };
   if (HEAP32[$4 + 16 >> 2]) {
    jsiConsolePrintf(147036, 0)
   }
   graphicsSetVar($4 + 36 | 0);
   HEAP32[$4 + 124 >> 2] = jsvLockAgain(HEAP32[$4 + 120 >> 2]);
  }
  __stack_pointer = $4 + 128 | 0;
  return HEAP32[$4 + 124 >> 2];
 }
 
 function _jswrap_graphics_floodFill_inside($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 24 >> 2] = $0;
  HEAP32[$4 + 20 >> 2] = $1;
  HEAP32[$4 + 16 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $3;
  block2 : {
   block1 : {
    block : {
     if ((HEAP32[$4 + 20 >> 2] | HEAP32[$4 + 16 >> 2]) < 0) {
      break block
     }
     $0 = HEAP32[$4 + 24 >> 2];
     if (HEAP32[$4 + 20 >> 2] >= (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8)) {
      break block
     }
     $0 = HEAP32[$4 + 24 >> 2];
     if (HEAP32[$4 + 16 >> 2] < (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8)) {
      break block1
     }
    }
    HEAP8[$4 + 31 | 0] = 0;
    break block2;
   }
   HEAP8[$4 + 31 | 0] = (graphicsGetPixel(HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]) | 0) == HEAP32[$4 + 12 >> 2];
  }
  __stack_pointer = $4 + 32 | 0;
  return HEAP8[$4 + 31 | 0] & 1;
 }
 
 function jswrap_graphics_theme($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = jsvNewObject();
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 8 >> 2], 136807, jsvNewFromInteger(HEAPU8[370709] | HEAPU8[370710] << 8));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 8 >> 2], 136811, jsvNewFromInteger(HEAPU8[370711] | HEAPU8[370712] << 8));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 8 >> 2], 142075, jsvNewFromInteger(HEAPU8[370713] | HEAPU8[370714] << 8));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 8 >> 2], 142079, jsvNewFromInteger(HEAPU8[370715] | HEAPU8[370716] << 8));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 8 >> 2], 141205, jsvNewFromInteger(HEAPU8[370717] | HEAPU8[370718] << 8));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 8 >> 2], 141209, jsvNewFromInteger(HEAPU8[370719] | HEAPU8[370720] << 8));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 8 >> 2], 135863, jsvNewFromBool(HEAP8[370721] & 1));
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 8 >> 2];
 }
 
 function jswrap_graphics_setTheme($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  if (jsvIsObject(HEAP32[$2 + 8 >> 2]) & 1) {
   HEAP32[$2 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 8 >> 2], 136807);
   if (HEAP32[$2 + 4 >> 2]) {
    $0 = jswrap_graphics_toColor(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2], 0, 0);
    HEAP8[370709] = $0;
    HEAP8[370710] = $0 >>> 8;
    jsvUnLock(HEAP32[$2 + 4 >> 2]);
   }
   HEAP32[$2 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 8 >> 2], 136811);
   if (HEAP32[$2 + 4 >> 2]) {
    $0 = jswrap_graphics_toColor(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2], 0, 0);
    HEAP8[370711] = $0;
    HEAP8[370712] = $0 >>> 8;
    jsvUnLock(HEAP32[$2 + 4 >> 2]);
   }
   HEAP32[$2 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 8 >> 2], 142075);
   if (HEAP32[$2 + 4 >> 2]) {
    $0 = jswrap_graphics_toColor(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2], 0, 0);
    HEAP8[370713] = $0;
    HEAP8[370714] = $0 >>> 8;
    jsvUnLock(HEAP32[$2 + 4 >> 2]);
   }
   HEAP32[$2 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 8 >> 2], 142079);
   if (HEAP32[$2 + 4 >> 2]) {
    $0 = jswrap_graphics_toColor(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2], 0, 0);
    HEAP8[370715] = $0;
    HEAP8[370716] = $0 >>> 8;
    jsvUnLock(HEAP32[$2 + 4 >> 2]);
   }
   HEAP32[$2 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 8 >> 2], 141205);
   if (HEAP32[$2 + 4 >> 2]) {
    $0 = jswrap_graphics_toColor(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2], 0, 0);
    HEAP8[370717] = $0;
    HEAP8[370718] = $0 >>> 8;
    jsvUnLock(HEAP32[$2 + 4 >> 2]);
   }
   HEAP32[$2 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 8 >> 2], 141209);
   if (HEAP32[$2 + 4 >> 2]) {
    $0 = jswrap_graphics_toColor(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2], 0, 0);
    HEAP8[370719] = $0;
    HEAP8[370720] = $0 >>> 8;
    jsvUnLock(HEAP32[$2 + 4 >> 2]);
   }
   HEAP32[$2 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 8 >> 2], 135863);
   if (HEAP32[$2 + 4 >> 2]) {
    HEAP8[370721] = jsvGetBoolAndUnLock(HEAP32[$2 + 4 >> 2]) & 1
   }
  }
  $0 = jsvLockAgain(HEAP32[$2 + 12 >> 2]);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function terminalGetGFX($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block : {
   if (!(HEAPU8[370776] | HEAPU8[370777] << 8 | (HEAPU8[370778] << 16 | HEAPU8[370779] << 24))) {
    HEAP8[$1 + 15 | 0] = 0;
    break block;
   }
   wasm2js_memory_copy(HEAP32[$1 + 8 >> 2], 370724, 72);
   HEAP8[$1 + 15 | 0] = 1;
  }
  return HEAP8[$1 + 15 | 0] & 1;
 }
 
 function terminalSetGFX($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 12 >> 2] = $0;
  wasm2js_memory_copy(370724, HEAP32[$1 + 12 >> 2], 72);
  HEAP8[395259] = 1;
 }
 
 function terminalScroll() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 80 | 0;
  __stack_pointer = $0;
  HEAP8[200056] = HEAPU8[200056] - 1;
  if (terminalGetGFX($0 + 8 | 0) & 1) {
   HEAP32[$0 + 4 >> 2] = HEAPU8[$0 + 29 | 0] | HEAPU8[$0 + 30 | 0] << 8 | (HEAPU8[$0 + 31 | 0] << 16 | HEAPU8[$0 + 32 | 0] << 24);
   $1 = HEAPU8[370711] | HEAPU8[370712] << 8;
   HEAP8[$0 + 29 | 0] = $1;
   HEAP8[$0 + 30 | 0] = $1 >>> 8;
   HEAP8[$0 + 31 | 0] = $1 >>> 16;
   HEAP8[$0 + 32 | 0] = $1 >>> 24;
   graphicsScroll($0 + 8 | 0, 0, -8);
   $1 = HEAP32[$0 + 4 >> 2];
   HEAP8[$0 + 29 | 0] = $1;
   HEAP8[$0 + 30 | 0] = $1 >>> 8;
   HEAP8[$0 + 31 | 0] = $1 >>> 16;
   HEAP8[$0 + 32 | 0] = $1 >>> 24;
   terminalSetGFX($0 + 8 | 0);
   if (!(jshIsInInterrupt() & 1)) {
    jswrap_terminal_idle()
   }
  }
  __stack_pointer = $0 + 80 | 0;
 }
 
 function jswrap_terminal_idle() {
  if (HEAP8[395259] & 1) {
   graphicsInternalFlip();
   HEAP8[395259] = 0;
  }
  return 0;
 }
 
 function terminalSendChar($0) {
  var $1 = 0;
  $1 = __stack_pointer - 176 | 0;
  __stack_pointer = $1;
  HEAP8[$1 + 175 | 0] = $0;
  block : {
   if (!HEAPU8[395260]) {
    if (HEAPU8[$1 + 175 | 0] == 8) {
     if (HEAPU8[395258]) {
      HEAP8[395258] = HEAPU8[395258] - 1
     }
     break block;
    }
    block1 : {
     if (HEAPU8[$1 + 175 | 0] == 10) {
      HEAP8[395258] = 0;
      HEAP8[200056] = HEAPU8[200056] + 1;
      while (1) {
       if (HEAPU8[200056] >= 22) {
        terminalScroll();
        continue;
       }
       break;
      };
      break block1;
     }
     block2 : {
      if (HEAPU8[$1 + 175 | 0] == 13) {
       HEAP8[395258] = 0;
       break block2;
      }
      block3 : {
       if (HEAPU8[$1 + 175 | 0] == 27) {
        HEAP8[395260] = 27;
        break block3;
       }
       if (!(HEAPU8[$1 + 175 | 0] == 19 | HEAPU8[$1 + 175 | 0] == 17)) {
        if (terminalGetGFX($1 + 103 | 0) & 1) {
         HEAP16[$1 + 100 >> 1] = Math_imul(HEAPU8[395258], 6);
         HEAP16[$1 + 98 >> 1] = ((HEAPU8[$1 + 117 | 0] | HEAPU8[$1 + 118 | 0] << 8) + (HEAPU8[200056] << 3) | 0) - 176;
         HEAP32[$1 + 92 >> 2] = HEAPU8[$1 + 120 | 0] | HEAPU8[$1 + 121 | 0] << 8 | (HEAPU8[$1 + 122 | 0] << 16 | HEAPU8[$1 + 123 | 0] << 24);
         HEAP32[$1 + 88 >> 2] = HEAPU8[$1 + 124 | 0] | HEAPU8[$1 + 125 | 0] << 8 | (HEAPU8[$1 + 126 | 0] << 16 | HEAPU8[$1 + 127 | 0] << 24);
         $0 = HEAPU8[370709] | HEAPU8[370710] << 8;
         HEAP8[$1 + 120 | 0] = $0;
         HEAP8[$1 + 121 | 0] = $0 >>> 8;
         HEAP8[$1 + 122 | 0] = $0 >>> 16;
         HEAP8[$1 + 123 | 0] = $0 >>> 24;
         $0 = HEAPU8[370711] | HEAPU8[370712] << 8;
         HEAP8[$1 + 124 | 0] = $0;
         HEAP8[$1 + 125 | 0] = $0 >>> 8;
         HEAP8[$1 + 126 | 0] = $0 >>> 16;
         HEAP8[$1 + 127 | 0] = $0 >>> 24;
         graphicsDrawChar6x8($1 + 103 | 0, HEAP16[$1 + 100 >> 1] << 16 >> 16, HEAP16[$1 + 98 >> 1] << 16 >> 16, HEAP8[$1 + 175 | 0] << 24 >> 24, 1, 1, 1);
         $0 = HEAP32[$1 + 92 >> 2];
         HEAP8[$1 + 120 | 0] = $0;
         HEAP8[$1 + 121 | 0] = $0 >>> 8;
         HEAP8[$1 + 122 | 0] = $0 >>> 16;
         HEAP8[$1 + 123 | 0] = $0 >>> 24;
         $0 = HEAP32[$1 + 88 >> 2];
         HEAP8[$1 + 124 | 0] = $0;
         HEAP8[$1 + 125 | 0] = $0 >>> 8;
         HEAP8[$1 + 126 | 0] = $0 >>> 16;
         HEAP8[$1 + 127 | 0] = $0 >>> 24;
         terminalSetGFX($1 + 103 | 0);
        }
        if (HEAPU8[395258] < 255) {
         HEAP8[395258] = HEAPU8[395258] + 1
        }
       }
      }
     }
    }
    break block;
   }
   block5 : {
    if (HEAPU8[395260] == 27) {
     if (HEAPU8[395261] == 91) {
      if (HEAPU8[395262] == 63) {
       if (HEAPU8[395263] == 55) {
        terminalControlCharsReset();
        break block5;
       }
       block6 : {
        if (HEAPU8[$1 + 175 | 0] == 55) {
         HEAP8[395263] = 55;
         break block6;
        }
        terminalControlCharsReset();
       }
       break block5;
      }
      block7 : {
       if (HEAPU8[$1 + 175 | 0] == 63) {
        HEAP8[395262] = 63;
        break block7;
       }
       terminalControlCharsReset();
       block12 : {
        block13 : {
         switch (HEAP8[$1 + 175 | 0] - 65 | 0) {
         case 0:
          if (HEAPU8[200056]) {
           HEAP8[200056] = HEAPU8[200056] - 1
          }
          break block12;
         case 1:
          HEAP8[200056] = HEAPU8[200056] + 1;
          while (1) {
           if (HEAPU8[200056] >= 22) {
            terminalScroll();
            continue;
           }
           break;
          };
          break block12;
         case 2:
          if (HEAPU8[395258] < 255) {
           HEAP8[395258] = HEAPU8[395258] + 1
          }
          break block12;
         case 3:
          if (HEAPU8[395258]) {
           HEAP8[395258] = HEAPU8[395258] - 1
          }
          break block12;
         case 9:
          break block13;
         default:
          break block12;
         };
        }
        if (terminalGetGFX($1 + 16 | 0) & 1) {
         HEAP16[$1 + 14 >> 1] = Math_imul(HEAPU8[395258], 6);
         HEAP16[$1 + 12 >> 1] = ((HEAPU8[$1 + 30 | 0] | HEAPU8[$1 + 31 | 0] << 8) + (HEAPU8[200056] << 3) | 0) - 176;
         if ((HEAPU8[$1 + 24 | 0] | HEAPU8[$1 + 25 | 0] << 8 | (HEAPU8[$1 + 26 | 0] << 16 | HEAPU8[$1 + 27 | 0] << 24)) & 16) {
          $0 = HEAPU8[$1 + 30 | 0] | HEAPU8[$1 + 31 | 0] << 8
         } else {
          $0 = HEAPU8[$1 + 28 | 0] | HEAPU8[$1 + 29 | 0] << 8
         }
         HEAP16[$1 + 10 >> 1] = $0;
         if ((HEAPU8[$1 + 24 | 0] | HEAPU8[$1 + 25 | 0] << 8 | (HEAPU8[$1 + 26 | 0] << 16 | HEAPU8[$1 + 27 | 0] << 24)) & 16) {
          $0 = HEAPU8[$1 + 28 | 0] | HEAPU8[$1 + 29 | 0] << 8
         } else {
          $0 = HEAPU8[$1 + 30 | 0] | HEAPU8[$1 + 31 | 0] << 8
         }
         HEAP16[$1 + 8 >> 1] = $0;
         graphicsFillRect($1 + 16 | 0, HEAP16[$1 + 14 >> 1] << 16 >> 16, HEAP16[$1 + 12 >> 1] << 16 >> 16, (HEAP16[$1 + 10 >> 1] << 16 >> 16) - 1 | 0, (HEAP16[$1 + 12 >> 1] << 16 >> 16) + 7 | 0, 0);
         graphicsFillRect($1 + 16 | 0, 0, (HEAP16[$1 + 12 >> 1] << 16 >> 16) + 8 | 0, (HEAP16[$1 + 10 >> 1] << 16 >> 16) - 1 | 0, (HEAP16[$1 + 8 >> 1] << 16 >> 16) - 1 | 0, 0);
         terminalSetGFX($1 + 16 | 0);
        }
       }
      }
      break block5;
     }
     block16 : {
      if (HEAP8[$1 + 175 | 0] == 91) {
       HEAP8[395261] = 91;
       break block16;
      }
      terminalControlCharsReset();
     }
     break block5;
    }
    terminalControlCharsReset();
   }
  }
  __stack_pointer = $1 + 176 | 0;
 }
 
 function terminalControlCharsReset() {
  HEAP8[395260] = 0;
  HEAP8[395261] = 0;
  HEAP8[395262] = 0;
  HEAP8[395263] = 0;
 }
 
 function jswrap_terminal_init() {
  terminalControlCharsReset();
  HEAP8[395258] = 0;
  HEAP8[200056] = 21;
 }
 
 function jswrap_crypto_error_to_str($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block4 : {
   block3 : {
    block2 : {
     block : {
      block1 : {
       $0 = HEAP32[$1 + 8 >> 2];
       if (($0 | 0) != -20864) {
        if (($0 | 0) == -20736) {
         break block
        }
        if (($0 | 0) == -20608) {
         break block1
        }
        if (($0 | 0) == -15) {
         break block2
        }
        break block3;
       }
       HEAP32[$1 + 12 >> 2] = 123635;
       break block4;
      }
      HEAP32[$1 + 12 >> 2] = 137776;
      break block4;
     }
     HEAP32[$1 + 12 >> 2] = 140306;
     break block4;
    }
    HEAP32[$1 + 12 >> 2] = 138985;
    break block4;
   }
   HEAP32[$1 + 12 >> 2] = 0;
  }
  return HEAP32[$1 + 12 >> 2];
 }
 
 function jswrap_crypto_error($0) {
  var $1 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 28 >> 2] = $0;
  HEAP32[$1 + 24 >> 2] = jswrap_crypto_error_to_str(HEAP32[$1 + 28 >> 2]);
  block : {
   if (HEAP32[$1 + 24 >> 2]) {
    HEAP32[$1 >> 2] = HEAP32[$1 + 24 >> 2];
    jsError(127742, $1);
    break block;
   }
   HEAP32[$1 + 16 >> 2] = 0 - HEAP32[$1 + 28 >> 2];
   jsError(124006, $1 + 16 | 0);
  }
  __stack_pointer = $1 + 32 | 0;
 }
 
 function jswrap_crypto_SHAx($0, $1) {
  var $2 = 0, $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  $2 = $3;
  __stack_pointer = $2;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  HEAP32[$2 + 16 >> 2] = 0;
  HEAP32[$2 + 12 >> 2] = jsvGetDataPointer(HEAP32[$2 + 24 >> 2], $2 + 16 | 0);
  if (!(HEAP32[$2 + 12 >> 2] | !HEAP32[$2 + 24 >> 2])) {
   HEAP32[$2 + 16 >> 2] = jsvIterateCallbackCount(HEAP32[$2 + 24 >> 2]);
   block1 : {
    if (HEAP32[$2 + 16 >> 2] + 256 >>> 0 > jsuGetFreeStack() >>> 0) {
     jsExceptionHere(1, 140362, 0);
     break block1;
    }
    $3 = $3 - (HEAP32[$2 + 16 >> 2] + 15 & -16) | 0;
    __stack_pointer = $3;
    HEAP32[$2 + 12 >> 2] = $3;
    jsvIterateCallbackToBytes(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 16 >> 2]);
   }
  }
  block2 : {
   if (!HEAP32[$2 + 12 >> 2]) {
    HEAP32[$2 + 28 >> 2] = 0;
    break block2;
   }
   HEAP32[$2 + 8 >> 2] = 20;
   if (HEAP32[$2 + 20 >> 2] > 1) {
    HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 20 >> 2] / 8
   }
   HEAP32[$2 + 4 >> 2] = 0;
   HEAP32[$2 >> 2] = jsvNewArrayBufferWithPtr(HEAP32[$2 + 8 >> 2], $2 + 4 | 0);
   if (!HEAP32[$2 + 4 >> 2]) {
    jsError(124822, 0);
    HEAP32[$2 + 28 >> 2] = 0;
    break block2;
   }
   block3 : {
    if (HEAP32[$2 + 20 >> 2] == 1) {
     mbedtls_sha1(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 4 >> 2]);
     break block3;
    }
    block4 : {
     if (HEAP32[$2 + 20 >> 2] == 224) {
      mbedtls_sha256(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 4 >> 2], 1);
      break block4;
     }
     block5 : {
      if (HEAP32[$2 + 20 >> 2] == 256) {
       mbedtls_sha256(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 4 >> 2], 0);
       break block5;
      }
      block6 : {
       if (HEAP32[$2 + 20 >> 2] == 384) {
        mbedtls_sha512(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 4 >> 2], 1);
        break block6;
       }
       if (HEAP32[$2 + 20 >> 2] == 512) {
        mbedtls_sha512(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 4 >> 2], 0)
       }
      }
     }
    }
   }
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 >> 2];
  }
  __stack_pointer = $2 + 32 | 0;
  return HEAP32[$2 + 28 >> 2];
 }
 
 function jswrap_crypto_AES_ccmCrypt($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0;
  $6 = __stack_pointer - 160 | 0;
  $5 = $6;
  __stack_pointer = $5;
  HEAP32[$5 + 152 >> 2] = $0;
  HEAP32[$5 + 148 >> 2] = $1;
  HEAP32[$5 + 144 >> 2] = $2;
  HEAP32[$5 + 140 >> 2] = $3;
  HEAP8[$5 + 139 | 0] = $4;
  $0 = $5 + 126 | 0;
  HEAP8[$0 | 0] = 0;
  HEAP8[$0 + 1 | 0] = 0;
  HEAP8[$0 + 2 | 0] = 0;
  HEAP8[$0 + 3 | 0] = 0;
  HEAP8[$0 + 4 | 0] = 0;
  HEAP8[$0 + 5 | 0] = 0;
  HEAP8[$0 + 6 | 0] = 0;
  HEAP8[$0 + 7 | 0] = 0;
  HEAP8[$0 + 5 | 0] = 0;
  HEAP8[$0 + 6 | 0] = 0;
  HEAP8[$0 + 7 | 0] = 0;
  HEAP8[$0 + 8 | 0] = 0;
  HEAP8[$0 + 9 | 0] = 0;
  HEAP8[$0 + 10 | 0] = 0;
  HEAP8[$0 + 11 | 0] = 0;
  HEAP8[$0 + 12 | 0] = 0;
  HEAP32[$5 + 120 >> 2] = 0;
  block2 : {
   block3 : {
    block : {
     if (!(jsvIsArray(HEAP32[$5 + 144 >> 2]) & 1)) {
      if (!(jsvIsArrayBuffer(HEAP32[$5 + 144 >> 2]) & 1)) {
       break block
      }
     }
     jsvIterateCallbackToBytes(HEAP32[$5 + 144 >> 2], $5 + 126 | 0, 13);
     HEAP32[$5 + 120 >> 2] = jsvGetLength(HEAP32[$5 + 144 >> 2]);
     if (!(HEAPU32[$5 + 120 >> 2] <= 13 & HEAP32[$5 + 120 >> 2] >= 2)) {
      jswrap_crypto_error(-20736);
      HEAP32[$5 + 156 >> 2] = 0;
      break block2;
     }
     break block3;
    }
    jswrap_crypto_error(-20736);
    HEAP32[$5 + 156 >> 2] = 0;
    break block2;
   }
   HEAP32[$5 + 116 >> 2] = 0;
   HEAP32[$5 + 112 >> 2] = jsvGetDataPointer(HEAP32[$5 + 152 >> 2], $5 + 116 | 0);
   if (!(HEAP32[$5 + 112 >> 2] | !HEAP32[$5 + 152 >> 2])) {
    HEAP32[$5 + 116 >> 2] = jsvIterateCallbackCount(HEAP32[$5 + 152 >> 2]);
    block5 : {
     if (HEAP32[$5 + 116 >> 2] + 256 >>> 0 > jsuGetFreeStack() >>> 0) {
      jsExceptionHere(1, 140362, 0);
      break block5;
     }
     $6 = $6 - (HEAP32[$5 + 116 >> 2] + 15 & -16) | 0;
     __stack_pointer = $6;
     HEAP32[$5 + 112 >> 2] = $6;
     jsvIterateCallbackToBytes(HEAP32[$5 + 152 >> 2], HEAP32[$5 + 112 >> 2], HEAP32[$5 + 116 >> 2]);
    }
   }
   if (!HEAP32[$5 + 112 >> 2]) {
    HEAP32[$5 + 156 >> 2] = 0;
    break block2;
   }
   HEAP32[$5 + 108 >> 2] = 0;
   HEAP32[$5 + 104 >> 2] = jsvGetDataPointer(HEAP32[$5 + 148 >> 2], $5 + 108 | 0);
   if (!(HEAP32[$5 + 104 >> 2] | !HEAP32[$5 + 148 >> 2])) {
    HEAP32[$5 + 108 >> 2] = jsvIterateCallbackCount(HEAP32[$5 + 148 >> 2]);
    block7 : {
     if (HEAP32[$5 + 108 >> 2] + 256 >>> 0 > jsuGetFreeStack() >>> 0) {
      jsExceptionHere(1, 140362, 0);
      break block7;
     }
     $6 = $6 - (HEAP32[$5 + 108 >> 2] + 15 & -16) | 0;
     __stack_pointer = $6;
     HEAP32[$5 + 104 >> 2] = $6;
     jsvIterateCallbackToBytes(HEAP32[$5 + 148 >> 2], HEAP32[$5 + 104 >> 2], HEAP32[$5 + 108 >> 2]);
    }
   }
   if (!HEAP32[$5 + 104 >> 2]) {
    HEAP32[$5 + 156 >> 2] = 0;
    break block2;
   }
   HEAP32[$5 + 100 >> 2] = 0;
   HEAP32[$5 + 96 >> 2] = jsvNewArrayBufferWithPtr(HEAP32[$5 + 116 >> 2], $5 + 100 | 0);
   if (!HEAP32[$5 + 100 >> 2]) {
    HEAP32[$5 + 156 >> 2] = 0;
    break block2;
   }
   HEAP32[$5 + 92 >> 2] = 0;
   mbedtls_ccm_init($5 + 36 | 0);
   HEAP32[$5 + 92 >> 2] = mbedtls_ccm_setkey($5 + 36 | 0, 2, HEAP32[$5 + 104 >> 2], HEAP32[$5 + 108 >> 2] << 3);
   if (!HEAP32[$5 + 92 >> 2]) {
    block11 : {
     if (HEAP8[$5 + 139 | 0] & 1) {
      HEAP32[$5 + 32 >> 2] = 0;
      block8 : {
       if (jsvIsNumeric(HEAP32[$5 + 140 >> 2]) & 1) {
        HEAP32[$5 + 32 >> 2] = jsvGetInteger(HEAP32[$5 + 140 >> 2]);
        break block8;
       }
       HEAP32[$5 + 92 >> 2] = -20736;
      }
      if (!HEAP32[$5 + 92 >> 2]) {
       if (HEAP32[$5 + 32 >> 2] & 1 | (HEAP32[$5 + 32 >> 2] < 4 | HEAP32[$5 + 32 >> 2] > 16)) {
        HEAP32[$5 + 92 >> 2] = -20736
       }
      }
      if (!HEAP32[$5 + 92 >> 2]) {
       $0 = HEAP32[$5 + 32 >> 2];
       HEAP32[$5 + 28 >> 2] = $6;
       $6 = $6 - ($0 + 15 & -16) | 0;
       __stack_pointer = $6;
       HEAP32[$5 + 24 >> 2] = $0;
       if ($0) {
        wasm2js_memory_fill($6, 0, $0)
       }
       HEAP32[$5 + 92 >> 2] = mbedtls_ccm_encrypt_and_tag($5 + 36 | 0, HEAP32[$5 + 116 >> 2], $5 + 126 | 0, HEAP32[$5 + 120 >> 2], 0, 0, HEAP32[$5 + 112 >> 2], HEAP32[$5 + 100 >> 2], $6, $0);
       if (!HEAP32[$5 + 92 >> 2]) {
        HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 96 >> 2];
        HEAP32[$5 + 96 >> 2] = jsvNewObject();
        jsvObjectSetChildAndUnLock(HEAP32[$5 + 96 >> 2], 140390, HEAP32[$5 + 20 >> 2]);
        jsvObjectSetChildAndUnLock(HEAP32[$5 + 96 >> 2], 136821, jsvNewArrayBufferWithData(HEAP32[$5 + 32 >> 2], $6));
       }
      }
      break block11;
     }
     HEAP32[$5 + 16 >> 2] = 0;
     HEAP32[$5 + 12 >> 2] = jsvGetDataPointer(HEAP32[$5 + 140 >> 2], $5 + 16 | 0);
     if (!(HEAP32[$5 + 12 >> 2] | !HEAP32[$5 + 140 >> 2])) {
      HEAP32[$5 + 16 >> 2] = jsvIterateCallbackCount(HEAP32[$5 + 140 >> 2]);
      block13 : {
       if (HEAP32[$5 + 16 >> 2] + 256 >>> 0 > jsuGetFreeStack() >>> 0) {
        jsExceptionHere(1, 140362, 0);
        break block13;
       }
       $6 = $6 - (HEAP32[$5 + 16 >> 2] + 15 & -16) | 0;
       __stack_pointer = $6;
       HEAP32[$5 + 12 >> 2] = $6;
       jsvIterateCallbackToBytes(HEAP32[$5 + 140 >> 2], HEAP32[$5 + 12 >> 2], HEAP32[$5 + 16 >> 2]);
      }
     }
     if (!HEAP32[$5 + 12 >> 2]) {
      HEAP32[$5 + 92 >> 2] = -20736
     }
     if (!HEAP32[$5 + 92 >> 2]) {
      HEAP32[$5 + 92 >> 2] = mbedtls_ccm_auth_decrypt($5 + 36 | 0, HEAP32[$5 + 116 >> 2], $5 + 126 | 0, HEAP32[$5 + 120 >> 2], 0, 0, HEAP32[$5 + 112 >> 2], HEAP32[$5 + 100 >> 2], HEAP32[$5 + 12 >> 2], HEAP32[$5 + 16 >> 2])
     }
    }
   }
   mbedtls_ccm_free($5 + 36 | 0);
   if (!HEAP32[$5 + 92 >> 2]) {
    HEAP32[$5 + 156 >> 2] = HEAP32[$5 + 96 >> 2];
    break block2;
   }
   jswrap_crypto_error(HEAP32[$5 + 92 >> 2]);
   jsvUnLock(HEAP32[$5 + 96 >> 2]);
   HEAP32[$5 + 156 >> 2] = 0;
  }
  __stack_pointer = $5 + 160 | 0;
  return HEAP32[$5 + 156 >> 2];
 }
 
 function jswrap_crypto_AES_ccmEncrypt($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
  $0 = jswrap_crypto_AES_ccmCrypt(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2], 1);
  __stack_pointer = $4 + 16 | 0;
  return $0 | 0;
 }
 
 function jswrap_crypto_AES_ccmDecrypt($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
  $0 = jswrap_crypto_AES_ccmCrypt(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2], 0);
  __stack_pointer = $4 + 16 | 0;
  return $0 | 0;
 }
 
 function atan($0) {
  var $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0;
  wasm2js_scratch_store_f64(+$0);
  $4 = wasm2js_scratch_load_i32(1) | 0;
  wasm2js_scratch_load_i32(0) | 0;
  $1 = $4 & 2147483647;
  if ($1 >>> 0 >= 1141899264) {
   wasm2js_scratch_store_f64(1.5707963267948966);
   $1 = wasm2js_scratch_load_i32(1) | 0;
   $4 = wasm2js_scratch_load_i32(0) | 0;
   $7 = $4;
   $2 = $1 & 2147483647;
   $8 = $2;
   wasm2js_scratch_store_f64(+$0);
   $2 = wasm2js_scratch_load_i32(1) | 0;
   wasm2js_scratch_load_i32(0) | 0;
   $4 = $2 & -2147483648;
   $1 = $4;
   $2 = $7;
   wasm2js_scratch_store_i32(0, $9 | $2);
   $4 = $8;
   $1 = $4 | $1;
   wasm2js_scratch_store_i32(1, $1 | 0);
   $5 = +wasm2js_scratch_load_f64();
   $1 = __DOUBLE_BITS_1938($0);
   $4 = $1;
   $2 = i64toi32_i32$HIGH_BITS;
   $1 = $2 & 2147483647;
   $2 = $4;
   return ($1 | 0) == 2146435072 & ($2 | 0) != 0 | $1 >>> 0 > 2146435072 ? $0 : $5;
  }
  block1 : {
   block : {
    if ($1 >>> 0 <= 1071382527) {
     $2 = -1;
     if ($1 >>> 0 >= 1044381696) {
      break block
     }
     break block1;
    }
    $0 = fabs($0);
    if ($1 >>> 0 <= 1072889855) {
     if ($1 >>> 0 <= 1072037887) {
      $0 = ($0 + $0 + -1.0) / ($0 + 2.0);
      $2 = 0;
      break block;
     }
     $0 = ($0 + -1.0) / ($0 + 1.0);
     $2 = 1;
     break block;
    }
    if ($1 >>> 0 <= 1073971199) {
     $0 = ($0 + -1.5) / ($0 * 1.5 + 1.0);
     $2 = 2;
     break block;
    }
    $0 = -1.0 / $0;
    $2 = 3;
   }
   $6 = $0 * $0;
   $3 = $6 * $6;
   $5 = $3 * ($3 * ($3 * ($3 * ($3 * -.036531572744216916 + -.058335701337905735) + -.0769187620504483) + -.11111110405462356) + -.19999999999876483);
   $3 = $6 * ($3 * ($3 * ($3 * ($3 * ($3 * .016285820115365782 + .049768779946159324) + .06661073137387531) + .09090887133436507) + .14285714272503466) + .3333333333333293);
   if ($1 >>> 0 <= 1071382527) {
    return $0 - $0 * ($5 + $3)
   }
   $1 = $2 << 3;
   $0 = HEAPF64[$1 + 190608 >> 3] - ($0 * ($5 + $3) - HEAPF64[$1 + 190640 >> 3] - $0);
   $2 = $4;
   $0 = ($2 | 0) < 0 ? -$0 : $0;
  }
  return $0;
 }
 
 function __DOUBLE_BITS_1938($0) {
  var $1 = 0, $2 = 0;
  wasm2js_scratch_store_f64(+$0);
  $1 = wasm2js_scratch_load_i32(1) | 0;
  $2 = wasm2js_scratch_load_i32(0) | 0;
  i64toi32_i32$HIGH_BITS = $1;
  return $2;
 }
 
 function atan2($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $10 = 0;
  $2 = __DOUBLE_BITS_1940($1);
  $4 = $2;
  $3 = i64toi32_i32$HIGH_BITS;
  $2 = $3 & 2147483647;
  $3 = $4;
  block : {
   if (!$3 & ($2 | 0) == 2146435072 | $2 >>> 0 < 2146435072) {
    $3 = __DOUBLE_BITS_1940($0);
    $5 = $3;
    $2 = i64toi32_i32$HIGH_BITS;
    $3 = $2 & 2147483647;
    $2 = $5;
    if (!$2 & ($3 | 0) == 2146435072 | $3 >>> 0 < 2146435072) {
     break block
    }
   }
   return $0 + $1;
  }
  wasm2js_scratch_store_f64(+$1);
  $2 = wasm2js_scratch_load_i32(1) | 0;
  $4 = wasm2js_scratch_load_i32(0) | 0;
  $5 = $2;
  $6 = $4;
  if (!($2 - 1072693248 | $4)) {
   return atan($0)
  }
  wasm2js_scratch_store_f64(+$0);
  $3 = wasm2js_scratch_load_i32(1) | 0;
  $4 = wasm2js_scratch_load_i32(0) | 0;
  $9 = $5 >>> 30 & 2;
  $7 = $9 | $3 >>> 31;
  $2 = $3;
  $3 = $4;
  $4 = $2 & 2147483647;
  block3 : {
   if (!($4 | $3)) {
    block2 : {
     switch ($7 - 2 | 0) {
     case 0:
      return 3.141592653589793;
     case 1:
      break block2;
     default:
      break block3;
     };
    }
    return -3.141592653589793;
   }
   $5 = $5 & 2147483647;
   if (!($6 | $5)) {
    wasm2js_scratch_store_f64(1.5707963267948966);
    $2 = wasm2js_scratch_load_i32(1) | 0;
    $4 = wasm2js_scratch_load_i32(0) | 0;
    $5 = $4;
    $3 = $2 & 2147483647;
    $6 = $3;
    wasm2js_scratch_store_f64(+$0);
    $3 = wasm2js_scratch_load_i32(1) | 0;
    wasm2js_scratch_load_i32(0) | 0;
    $4 = $3 & -2147483648;
    $3 = $5;
    $5 = $10;
    wasm2js_scratch_store_i32(0, $3 | $5);
    $2 = $4;
    $4 = $6;
    $2 = $2 | $4;
    wasm2js_scratch_store_i32(1, $2 | 0);
    return +wasm2js_scratch_load_f64();
   }
   block4 : {
    if (($5 | 0) == 2146435072) {
     if (($4 | 0) != 2146435072) {
      break block4
     }
     return HEAPF64[($7 << 3) + 190672 >> 3];
    }
    if (!(($4 | 0) != 2146435072 & $5 + 67108864 >>> 0 >= $4 >>> 0)) {
     wasm2js_scratch_store_f64(1.5707963267948966);
     $2 = wasm2js_scratch_load_i32(1) | 0;
     $4 = wasm2js_scratch_load_i32(0) | 0;
     $5 = $4;
     $3 = $2 & 2147483647;
     $6 = $3;
     wasm2js_scratch_store_f64(+$0);
     $3 = wasm2js_scratch_load_i32(1) | 0;
     wasm2js_scratch_load_i32(0) | 0;
     $4 = $3 & -2147483648;
     $3 = $5;
     $5 = $10;
     wasm2js_scratch_store_i32(0, $3 | $5);
     $2 = $4;
     $4 = $6;
     $2 = $2 | $4;
     wasm2js_scratch_store_i32(1, $2 | 0);
     return +wasm2js_scratch_load_f64();
    }
    block5 : {
     if ($9) {
      $8 = 0.0;
      if ($4 + 67108864 >>> 0 < $5 >>> 0) {
       break block5
      }
     }
     $8 = atan(fabs($0 / $1));
    }
    $0 = $8;
    block8 : {
     switch ($7 - 1 | 0) {
     case 0:
      return -$0;
     case 1:
      return 3.141592653589793 - ($0 + -1.2246467991473532e-16);
     case 2:
      break block8;
     default:
      break block3;
     };
    }
    return $0 + -1.2246467991473532e-16 + -3.141592653589793;
   }
   $0 = HEAPF64[($7 << 3) + 190704 >> 3];
  }
  return $0;
 }
 
 function __DOUBLE_BITS_1940($0) {
  var $1 = 0, $2 = 0;
  wasm2js_scratch_store_f64(+$0);
  $1 = wasm2js_scratch_load_i32(1) | 0;
  $2 = wasm2js_scratch_load_i32(0) | 0;
  i64toi32_i32$HIGH_BITS = $1;
  return $2;
 }
 
 function ceil($0) {
  $0 = +$0;
  return +Math_ceil($0);
 }
 
 function __math_xflow($0, $1) {
  return $1 * fp_barrier($0 ? -$1 : $1);
 }
 
 function fp_barrier($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAPF64[$1 + 8 >> 3] = $0;
  return HEAPF64[$1 + 8 >> 3];
 }
 
 function __math_uflow($0) {
  return __math_xflow($0, 1.2882297539194267e-231);
 }
 
 function __math_oflow($0) {
  return __math_xflow($0, 3105036184601417870297958.0e207);
 }
 
 function exp($0) {
  $0 = +$0;
  var $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $10 = 0, $11 = 0;
  block1 : {
   block : {
    $1 = top12($0) & 2047;
    $4 = top12(5.551115123125783e-17);
    if ($1 - $4 >>> 0 < top12(512.0) - $4 >>> 0) {
     $4 = $1;
     break block;
    }
    if ($1 >>> 0 < $4 >>> 0) {
     return +($0 + 1.0)
    }
    $4 = 0;
    if (top12(1024.0) >>> 0 > $1 >>> 0) {
     break block
    }
    wasm2js_scratch_store_f64(+$0);
    $7 = wasm2js_scratch_load_i32(1) | 0;
    $5 = wasm2js_scratch_load_i32(0) | 0;
    $6 = $7;
    $2 = 0.0;
    if (!$5 & ($6 | 0) == -1048576) {
     break block1
    }
    if (top12(Infinity) >>> 0 <= $1 >>> 0) {
     return +($0 + 1.0)
    }
    if (($6 | 0) < 0) {
     return +__math_uflow(0)
    }
    return +__math_oflow(0);
   }
   $2 = HEAPF64[23843];
   $8 = $0 * HEAPF64[23842] + $2;
   $2 = $8 - $2;
   $0 = $2 * HEAPF64[23845] + ($2 * HEAPF64[23844] + $0);
   $2 = $0 * $0;
   $9 = $2 * $2 * ($0 * HEAPF64[23849] + HEAPF64[23848]);
   $2 = $2 * ($0 * HEAPF64[23847] + HEAPF64[23846]);
   wasm2js_scratch_store_f64(+$8);
   $1 = wasm2js_scratch_load_i32(1) | 0;
   $5 = wasm2js_scratch_load_i32(0) | 0;
   $6 = $1;
   $1 = $5 << 4 & 2032;
   $0 = $9 + ($2 + (HEAPF64[$1 + 190848 >> 3] + $0));
   $3 = $1 + 190856 | 0;
   $1 = HEAP32[$3 >> 2];
   $10 = $1;
   $11 = HEAP32[$3 + 4 >> 2];
   $1 = $5 << 13;
   $3 = $1;
   $1 = $11;
   $1 = $3 + $1 | 0;
   $3 = $10 + 0 | 0;
   $1 = $7 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
   if (!$4) {
    return +specialcase($0, $3, $1, $5, $6)
   }
   wasm2js_scratch_store_i32(0, $3 | 0);
   wasm2js_scratch_store_i32(1, $1 | 0);
   $2 = +wasm2js_scratch_load_f64();
   $2 = $2 * $0 + $2;
  }
  return +$2;
 }
 
 function top12($0) {
  var $1 = 0;
  wasm2js_scratch_store_f64(+$0);
  $1 = wasm2js_scratch_load_i32(1) | 0;
  wasm2js_scratch_load_i32(0) | 0;
  return $1 >>> 20 | 0;
 }
 
 function specialcase($0, $1, $2, $3, $4) {
  var $5 = 0.0, $6 = 0.0, $7 = 0.0;
  if (!($3 & -2147483648)) {
   wasm2js_scratch_store_i32(0, $1 | 0);
   wasm2js_scratch_store_i32(1, $2 - 1058013184 | 0);
   $5 = +wasm2js_scratch_load_f64();
   return ($5 * $0 + $5) * 5486124068793688683255936.0e279;
  }
  wasm2js_scratch_store_i32(0, $1 | 0);
  wasm2js_scratch_store_i32(1, $2 + 1071644672 | 0);
  $5 = +wasm2js_scratch_load_f64();
  $6 = $5 * $0;
  $0 = $6 + $5;
  if ($0 < 1.0) {
   fp_force_eval(fp_barrier_1949() * 2.2250738585072014e-308);
   $7 = $0 + 1.0;
   $0 = $7 + ($6 + ($5 - $0) + ($0 + (1.0 - $7))) + -1.0;
   $0 = $0 == 0.0 ? 0.0 : $0;
  }
  return $0 * 2.2250738585072014e-308;
 }
 
 function fp_barrier_1949() {
  var $0 = 0;
  $0 = __stack_pointer - 16 | 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 1048576;
  return HEAPF64[$0 + 8 >> 3];
 }
 
 function fp_force_eval($0) {
  HEAPF64[(__stack_pointer - 16 | 0) + 8 >> 3] = $0;
 }
 
 function fabs($0) {
  $0 = +$0;
  return +Math_abs($0);
 }
 
 function floor($0) {
  $0 = +$0;
  return +Math_floor($0);
 }
 
 function __math_divzero($0) {
  return fp_barrier_1954($0 ? -1.0 : 1.0) / 0.0;
 }
 
 function fp_barrier_1954($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAPF64[$1 + 8 >> 3] = $0;
  return HEAPF64[$1 + 8 >> 3];
 }
 
 function __math_invalid($0) {
  $0 = $0 - $0;
  return $0 / $0;
 }
 
 function log($0) {
  $0 = +$0;
  var $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $10 = 0.0, $11 = 0.0, $12 = 0;
  $4 = top16($0);
  wasm2js_scratch_store_f64(+$0);
  $9 = wasm2js_scratch_load_i32(1) | 0;
  $5 = wasm2js_scratch_load_i32(0) | 0;
  $2 = $9;
  $1 = 1072562176;
  $1 = $2 - $1 | 0;
  if (($1 | 0) == 198911 | $1 >>> 0 < 198911) {
   if (!$5 & ($2 | 0) == 1072693248) {
    return 0.0
   }
   $0 = $0 + -1.0;
   $3 = $0 * 134217728.0;
   $3 = $0 + $3 - $3;
   $8 = HEAPF64[24119];
   $10 = $3 * $3 * $8;
   $11 = $0 + $10;
   $6 = $0 * $0;
   $7 = $0 * $6;
   return +($11 + ($7 * ($7 * ($7 * ($7 * HEAPF64[24129] + ($6 * HEAPF64[24128] + ($0 * HEAPF64[24127] + HEAPF64[24126]))) + ($6 * HEAPF64[24125] + ($0 * HEAPF64[24124] + HEAPF64[24123]))) + ($6 * HEAPF64[24122] + ($0 * HEAPF64[24121] + HEAPF64[24120]))) + (($0 - $3) * $8 * ($0 + $3) + ($10 + ($0 - $11)))));
  }
  block : {
   if ($4 - 32752 >>> 0 <= 4294934559) {
    if ($0 == 0.0) {
     return +__math_divzero(1)
    }
    if (!$5 & ($2 | 0) == 2146435072) {
     break block
    }
    if (!(($4 & 32752) != 32752 & $4 >>> 0 <= 32767)) {
     return +__math_invalid($0)
    }
    wasm2js_scratch_store_f64(+($0 * 4503599627370496.0));
    $2 = wasm2js_scratch_load_i32(1) | 0;
    $1 = wasm2js_scratch_load_i32(0) | 0;
    $2 = $2 - 54525952 | 0;
    $5 = $1;
   }
   $1 = 1072037888;
   $1 = $2 - $1 | 0;
   $6 = +($1 >> 20);
   $4 = ($1 >>> 13 & 127) << 4;
   $7 = $6 * HEAPF64[24112] + HEAPF64[$4 + 193048 >> 3];
   $1 = $1 & -1048576;
   $12 = $1;
   $0 = HEAPF64[$4 + 193040 >> 3];
   $9 = 0;
   $1 = $5 - $9 | 0;
   wasm2js_scratch_store_i32(0, $1 | 0);
   $1 = $2;
   $2 = $12;
   wasm2js_scratch_store_i32(1, $1 - ($2 + ($5 >>> 0 < $9 >>> 0) | 0) | 0);
   $0 = $0 * (+wasm2js_scratch_load_f64() - HEAPF64[$4 + 195088 >> 3] - HEAPF64[$4 + 195096 >> 3]);
   $8 = $7 + $0;
   $3 = $0 * $0;
   $0 = $8 + ($0 * $3 * ($3 * ($0 * HEAPF64[24118] + HEAPF64[24117]) + ($0 * HEAPF64[24116] + HEAPF64[24115])) + ($3 * HEAPF64[24114] + ($6 * HEAPF64[24113] + ($0 + ($7 - $8)))));
  }
  return +$0;
 }
 
 function top16($0) {
  var $1 = 0;
  wasm2js_scratch_store_f64(+$0);
  $1 = wasm2js_scratch_load_i32(1) | 0;
  wasm2js_scratch_load_i32(0) | 0;
  return $1 >>> 16 | 0;
 }
 
 function memcmp($0, $1, $2) {
  var $3 = 0, $4 = 0;
  block1 : {
   block : {
    if ($2 >>> 0 >= 4) {
     if (($0 | $1) & 3) {
      break block
     }
     while (1) {
      if (HEAP32[$0 >> 2] != HEAP32[$1 >> 2]) {
       break block
      }
      $1 = $1 + 4 | 0;
      $0 = $0 + 4 | 0;
      $2 = $2 - 4 | 0;
      if ($2 >>> 0 > 3) {
       continue
      }
      break;
     };
    }
    if (!$2) {
     break block1
    }
   }
   while (1) {
    $3 = HEAPU8[$0 | 0];
    $4 = HEAPU8[$1 | 0];
    if (($3 | 0) == ($4 | 0)) {
     $1 = $1 + 1 | 0;
     $0 = $0 + 1 | 0;
     $2 = $2 - 1 | 0;
     if ($2) {
      continue
     }
     break block1;
    }
    break;
   };
   return $3 - $4 | 0;
  }
  return 0;
 }
 
 function __sin($0, $1, $2) {
  var $3 = 0.0, $4 = 0.0, $5 = 0.0;
  $3 = $0 * $0;
  $5 = $3 * ($3 * $3) * ($3 * 1.58969099521155e-10 + -2.5050760253406863e-08) + ($3 * ($3 * 2.7557313707070068e-06 + -1.984126982985795e-04) + .00833333333332249);
  $4 = $0 * $3;
  if (!$2) {
   return $4 * ($3 * $5 + -.16666666666666632) + $0
  }
  return $0 - ($3 * ($1 * .5 - $4 * $5) - $1 + $4 * .16666666666666632);
 }
 
 function scalbn($0, $1) {
  block : {
   if (($1 | 0) >= 1024) {
    $0 = $0 * 8988465674311579538646525.0e283;
    if ($1 >>> 0 < 2047) {
     $1 = $1 - 1023 | 0;
     break block;
    }
    $0 = $0 * 8988465674311579538646525.0e283;
    $1 = ($1 >>> 0 >= 3069 ? 3069 : $1) - 2046 | 0;
    break block;
   }
   if (($1 | 0) > -1023) {
    break block
   }
   $0 = $0 * 2.004168360008973e-292;
   if ($1 >>> 0 > 4294965304) {
    $1 = $1 + 969 | 0;
    break block;
   }
   $0 = $0 * 2.004168360008973e-292;
   $1 = ($1 >>> 0 <= 4294964336 ? -2960 : $1) + 1938 | 0;
  }
  wasm2js_scratch_store_i32(0, 0);
  wasm2js_scratch_store_i32(1, $1 + 1023 << 20);
  return $0 * +wasm2js_scratch_load_f64();
 }
 
 function __rem_pio2_large($0, $1, $2, $3, $4) {
  var $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
  $8 = __stack_pointer - 560 | 0;
  __stack_pointer = $8;
  $7 = ($2 - 3 | 0) / 24 | 0;
  $17 = ($7 | 0) > 0 ? $7 : 0;
  $16 = Math_imul($17, -24) + $2 | 0;
  $12 = HEAP32[($4 << 2) + 197136 >> 2];
  $13 = $3 - 1 | 0;
  if (($12 + $13 | 0) >= 0) {
   $6 = $3 + $12 | 0;
   $2 = $17 - $13 | 0;
   $7 = 0;
   while (1) {
    $5 = ($2 | 0) < 0 ? 0.0 : +HEAP32[($2 << 2) + 197152 >> 2];
    HEAPF64[($8 + 320 | 0) + ($7 << 3) >> 3] = $5;
    $2 = $2 + 1 | 0;
    $7 = $7 + 1 | 0;
    if (($7 | 0) != ($6 | 0)) {
     continue
    }
    break;
   };
  }
  $14 = $16 - 24 | 0;
  $6 = 0;
  $9 = ($12 | 0) > 0 ? $12 : 0;
  $15 = ($3 | 0) <= 0;
  while (1) {
   block : {
    if ($15) {
     $5 = 0.0;
     break block;
    }
    $7 = $6 + $13 | 0;
    $2 = 0;
    $5 = 0.0;
    while (1) {
     $5 = HEAPF64[($2 << 3) + $0 >> 3] * HEAPF64[($8 + 320 | 0) + ($7 - $2 << 3) >> 3] + $5;
     $2 = $2 + 1 | 0;
     if (($3 | 0) != ($2 | 0)) {
      continue
     }
     break;
    };
   }
   HEAPF64[($6 << 3) + $8 >> 3] = $5;
   $2 = ($6 | 0) == ($9 | 0);
   $6 = $6 + 1 | 0;
   if (!$2) {
    continue
   }
   break;
  };
  $22 = 47 - $16 | 0;
  $20 = 48 - $16 | 0;
  $23 = $16 - 25 | 0;
  $6 = $12;
  block11 : {
   while (1) {
    $5 = HEAPF64[($6 << 3) + $8 >> 3];
    $2 = 0;
    $7 = $6;
    if (($6 | 0) > 0) {
     while (1) {
      $11 = ($8 + 480 | 0) + ($2 << 2) | 0;
      $10 = $5 * 5.9604644775390625e-08;
      if (Math_abs($10) < 2147483647.0) {
       $9 = ~~$10
      } else {
       $9 = -2147483648
      }
      $10 = +($9 | 0);
      $5 = $10 * -16777216.0 + $5;
      if (Math_abs($5) < 2147483647.0) {
       $9 = ~~$5
      } else {
       $9 = -2147483648
      }
      HEAP32[$11 >> 2] = $9;
      $7 = $7 - 1 | 0;
      $5 = HEAPF64[($7 << 3) + $8 >> 3] + $10;
      $2 = $2 + 1 | 0;
      if (($6 | 0) != ($2 | 0)) {
       continue
      }
      break;
     }
    }
    $5 = scalbn($5, $14);
    $5 = $5 + floor($5 * .125) * -8.0;
    $13 = Math_abs($5) < 2147483647.0 ? ~~$5 : -2147483648;
    $5 = $5 - +($13 | 0);
    block3 : {
     block4 : {
      block2 : {
       $21 = ($14 | 0) <= 0;
       block1 : {
        if (!$21) {
         $7 = ($6 << 2) + $8 | 0;
         $2 = $7 + 476 | 0;
         $9 = $2;
         $2 = HEAP32[$7 + 476 >> 2];
         $7 = $2;
         $2 = $2 >> $20;
         $7 = $7 - ($2 << $20) | 0;
         HEAP32[$9 >> 2] = $7;
         $13 = $2 + $13 | 0;
         $11 = $7 >> $22;
         break block1;
        }
        if ($14) {
         break block2
        }
        $11 = HEAP32[(($6 << 2) + $8 | 0) + 476 >> 2] >> 23;
       }
       if (($11 | 0) <= 0) {
        break block3
       }
       break block4;
      }
      $11 = 2;
      if ($5 >= .5) {
       break block4
      }
      $11 = 0;
      break block3;
     }
     $2 = 0;
     $9 = 0;
     $7 = 1;
     if (($6 | 0) > 0) {
      while (1) {
       $15 = ($8 + 480 | 0) + ($2 << 2) | 0;
       $7 = HEAP32[$15 >> 2];
       block6 : {
        block5 : {
         if ($9) {
          $9 = 16777215
         } else {
          if (!$7) {
           break block5
          }
          $9 = 16777216;
         }
         HEAP32[$15 >> 2] = $9 - $7;
         $7 = 0;
         $9 = 1;
         break block6;
        }
        $7 = 1;
        $9 = 0;
       }
       $2 = $2 + 1 | 0;
       if (($6 | 0) != ($2 | 0)) {
        continue
       }
       break;
      }
     }
     block7 : {
      if ($21) {
       break block7
      }
      $2 = 8388607;
      block8 : {
       switch ($23 | 0) {
       case 1:
        $2 = 4194303;
        break;
       case 0:
        break block8;
       default:
        break block7;
       };
      }
      $15 = ($6 << 2) + $8 | 0;
      $9 = $15 + 476 | 0;
      HEAP32[$9 >> 2] = HEAP32[$15 + 476 >> 2] & $2;
     }
     $13 = $13 + 1 | 0;
     if (($11 | 0) != 2) {
      break block3
     }
     $5 = 1.0 - $5;
     $11 = 2;
     if ($7) {
      break block3
     }
     $5 = $5 - scalbn(1.0, $14);
    }
    if ($5 == 0.0) {
     $7 = 0;
     block10 : {
      $2 = $6;
      if (($12 | 0) >= ($2 | 0)) {
       break block10
      }
      while (1) {
       $2 = $2 - 1 | 0;
       $7 = HEAP32[($8 + 480 | 0) + ($2 << 2) >> 2] | $7;
       if (($2 | 0) > ($12 | 0)) {
        continue
       }
       break;
      };
      if (!$7) {
       break block10
      }
      while (1) {
       $14 = $14 - 24 | 0;
       $6 = $6 - 1 | 0;
       if (!HEAP32[($8 + 480 | 0) + ($6 << 2) >> 2]) {
        continue
       }
       break;
      };
      break block11;
     }
     $2 = 1;
     while (1) {
      $7 = $2;
      $2 = $2 + 1 | 0;
      if (!HEAP32[($8 + 480 | 0) + ($12 - $7 << 2) >> 2]) {
       continue
      }
      break;
     };
     $9 = $6 + $7 | 0;
     while (1) {
      $7 = $3 + $6 | 0;
      $6 = $6 + 1 | 0;
      HEAPF64[($8 + 320 | 0) + ($7 << 3) >> 3] = HEAP32[($17 + $6 << 2) + 197152 >> 2];
      $2 = 0;
      $5 = 0.0;
      if (($3 | 0) > 0) {
       while (1) {
        $5 = HEAPF64[($2 << 3) + $0 >> 3] * HEAPF64[($8 + 320 | 0) + ($7 - $2 << 3) >> 3] + $5;
        $2 = $2 + 1 | 0;
        if (($3 | 0) != ($2 | 0)) {
         continue
        }
        break;
       }
      }
      HEAPF64[($6 << 3) + $8 >> 3] = $5;
      if (($6 | 0) < ($9 | 0)) {
       continue
      }
      break;
     };
     $6 = $9;
     continue;
    }
    break;
   };
   $5 = scalbn($5, 24 - $16 | 0);
   block12 : {
    if ($5 >= 16777216.0) {
     $3 = ($8 + 480 | 0) + ($6 << 2) | 0;
     $10 = $5 * 5.9604644775390625e-08;
     if (Math_abs($10) < 2147483647.0) {
      $2 = ~~$10
     } else {
      $2 = -2147483648
     }
     $10 = +($2 | 0) * -16777216.0 + $5;
     if (Math_abs($10) < 2147483647.0) {
      $0 = ~~$10
     } else {
      $0 = -2147483648
     }
     HEAP32[$3 >> 2] = $0;
     $6 = $6 + 1 | 0;
     $14 = $16;
     break block12;
    }
    $2 = Math_abs($5) < 2147483647.0 ? ~~$5 : -2147483648;
   }
   HEAP32[($8 + 480 | 0) + ($6 << 2) >> 2] = $2;
  }
  $5 = scalbn(1.0, $14);
  if (($6 | 0) >= 0) {
   $3 = $6;
   while (1) {
    $2 = $3;
    HEAPF64[($2 << 3) + $8 >> 3] = $5 * +HEAP32[($8 + 480 | 0) + ($2 << 2) >> 2];
    $3 = $2 - 1 | 0;
    $5 = $5 * 5.9604644775390625e-08;
    if ($2) {
     continue
    }
    break;
   };
   $7 = $6;
   while (1) {
    $5 = 0.0;
    $2 = 0;
    $9 = $6 - $7 | 0;
    $0 = ($9 | 0) > ($12 | 0) ? $12 : $9;
    if (($0 | 0) >= 0) {
     while (1) {
      $5 = HEAPF64[($2 << 3) + 199920 >> 3] * HEAPF64[($2 + $7 << 3) + $8 >> 3] + $5;
      $3 = ($0 | 0) != ($2 | 0);
      $2 = $2 + 1 | 0;
      if ($3) {
       continue
      }
      break;
     }
    }
    HEAPF64[($8 + 160 | 0) + ($9 << 3) >> 3] = $5;
    $0 = ($7 | 0) > 0;
    $7 = $7 - 1 | 0;
    if ($0) {
     continue
    }
    break;
   };
  }
  block16 : {
   block18 : {
    block14 : {
     switch ($4 | 0) {
     case 3:
      block17 : {
       if (($6 | 0) <= 0) {
        break block17
       }
       $5 = HEAPF64[($8 + 160 | 0) + ($6 << 3) >> 3];
       $2 = $6;
       while (1) {
        $3 = $2 - 1 | 0;
        $7 = ($8 + 160 | 0) + ($3 << 3) | 0;
        $10 = HEAPF64[$7 >> 3];
        $18 = $10;
        $10 = $10 + $5;
        HEAPF64[($8 + 160 | 0) + ($2 << 3) >> 3] = $5 + ($18 - $10);
        HEAPF64[$7 >> 3] = $10;
        $0 = $2 >>> 0 > 1;
        $5 = $10;
        $2 = $3;
        if ($0) {
         continue
        }
        break;
       };
       if (($6 | 0) == 1) {
        break block17
       }
       $5 = HEAPF64[($8 + 160 | 0) + ($6 << 3) >> 3];
       $2 = $6;
       while (1) {
        $3 = $2 - 1 | 0;
        $7 = ($8 + 160 | 0) + ($3 << 3) | 0;
        $10 = HEAPF64[$7 >> 3];
        $18 = $10;
        $10 = $10 + $5;
        HEAPF64[($8 + 160 | 0) + ($2 << 3) >> 3] = $5 + ($18 - $10);
        HEAPF64[$7 >> 3] = $10;
        $0 = $2 >>> 0 > 2;
        $5 = $10;
        $2 = $3;
        if ($0) {
         continue
        }
        break;
       };
       while (1) {
        $19 = $19 + HEAPF64[($8 + 160 | 0) + ($6 << 3) >> 3];
        $0 = $6 >>> 0 > 2;
        $6 = $6 - 1 | 0;
        if ($0) {
         continue
        }
        break;
       };
      }
      $5 = HEAPF64[$8 + 160 >> 3];
      if ($11) {
       break block18
      }
      HEAPF64[$1 >> 3] = $5;
      $5 = HEAPF64[$8 + 168 >> 3];
      HEAPF64[$1 + 16 >> 3] = $19;
      HEAPF64[$1 + 8 >> 3] = $5;
      break block16;
     case 0:
      $5 = 0.0;
      if (($6 | 0) >= 0) {
       while (1) {
        $2 = $6;
        $6 = $2 - 1 | 0;
        $5 = $5 + HEAPF64[($8 + 160 | 0) + ($2 << 3) >> 3];
        if ($2) {
         continue
        }
        break;
       }
      }
      HEAPF64[$1 >> 3] = $11 ? -$5 : $5;
      break block16;
     case 1:
     case 2:
      break block14;
     default:
      break block16;
     };
    }
    $5 = 0.0;
    if (($6 | 0) >= 0) {
     $3 = $6;
     while (1) {
      $2 = $3;
      $3 = $2 - 1 | 0;
      $5 = $5 + HEAPF64[($8 + 160 | 0) + ($2 << 3) >> 3];
      if ($2) {
       continue
      }
      break;
     };
    }
    HEAPF64[$1 >> 3] = $11 ? -$5 : $5;
    $5 = HEAPF64[$8 + 160 >> 3] - $5;
    $2 = 1;
    if (($6 | 0) > 0) {
     while (1) {
      $5 = $5 + HEAPF64[($8 + 160 | 0) + ($2 << 3) >> 3];
      $0 = ($2 | 0) != ($6 | 0);
      $2 = $2 + 1 | 0;
      if ($0) {
       continue
      }
      break;
     }
    }
    HEAPF64[$1 + 8 >> 3] = $11 ? -$5 : $5;
    break block16;
   }
   HEAPF64[$1 >> 3] = -$5;
   $5 = HEAPF64[$8 + 168 >> 3];
   HEAPF64[$1 + 16 >> 3] = -$19;
   HEAPF64[$1 + 8 >> 3] = -$5;
  }
  __stack_pointer = $8 + 560 | 0;
  return $13 & 7;
 }
 
 function __rem_pio2($0, $1) {
  var $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0;
  $7 = __stack_pointer - 48 | 0;
  __stack_pointer = $7;
  wasm2js_scratch_store_f64(+$0);
  $8 = wasm2js_scratch_load_i32(1) | 0;
  $4 = wasm2js_scratch_load_i32(0) | 0;
  block1 : {
   block2 : {
    $3 = $8;
    $9 = $3 & 2147483647;
    block : {
     if ($9 >>> 0 <= 1074752122) {
      if (($3 & 1048575) == 598523) {
       break block
      }
      if ($9 >>> 0 <= 1073928572) {
       $6 = $3;
       if (($3 | 0) > 0) {
        $4 = 1
       } else {
        $4 = ($6 | 0) >= 0
       }
       if ($4) {
        $0 = $0 + -1.5707963267341256;
        $2 = $0 + -6.077100506506192e-11;
        HEAPF64[$1 >> 3] = $2;
        HEAPF64[$1 + 8 >> 3] = $0 - $2 + -6.077100506506192e-11;
        $3 = 1;
        break block1;
       }
       $0 = $0 + 1.5707963267341256;
       $2 = $0 + 6.077100506506192e-11;
       HEAPF64[$1 >> 3] = $2;
       HEAPF64[$1 + 8 >> 3] = $0 - $2 + 6.077100506506192e-11;
       $3 = -1;
       break block1;
      }
      if (($8 | 0) > 0) {
       $4 = 1
      } else {
       $4 = ($8 | 0) >= 0
      }
      if ($4) {
       $0 = $0 + -3.1415926534682512;
       $2 = $0 + -1.2154201013012384e-10;
       HEAPF64[$1 >> 3] = $2;
       HEAPF64[$1 + 8 >> 3] = $0 - $2 + -1.2154201013012384e-10;
       $3 = 2;
       break block1;
      }
      $0 = $0 + 3.1415926534682512;
      $2 = $0 + 1.2154201013012384e-10;
      HEAPF64[$1 >> 3] = $2;
      HEAPF64[$1 + 8 >> 3] = $0 - $2 + 1.2154201013012384e-10;
      $3 = -2;
      break block1;
     }
     if ($9 >>> 0 <= 1075594811) {
      if ($9 >>> 0 <= 1075183036) {
       if (($9 | 0) == 1074977148) {
        break block
       }
       $4 = $8;
       if (($8 | 0) > 0) {
        $4 = 1
       } else {
        $4 = ($4 | 0) >= 0
       }
       if ($4) {
        $0 = $0 + -4.712388980202377;
        $2 = $0 + -1.8231301519518578e-10;
        HEAPF64[$1 >> 3] = $2;
        HEAPF64[$1 + 8 >> 3] = $0 - $2 + -1.8231301519518578e-10;
        $3 = 3;
        break block1;
       }
       $0 = $0 + 4.712388980202377;
       $2 = $0 + 1.8231301519518578e-10;
       HEAPF64[$1 >> 3] = $2;
       HEAPF64[$1 + 8 >> 3] = $0 - $2 + 1.8231301519518578e-10;
       $3 = -3;
       break block1;
      }
      if (($9 | 0) == 1075388923) {
       break block
      }
      $6 = $8;
      if (($8 | 0) > 0) {
       $4 = 1
      } else {
       $4 = ($6 | 0) >= 0
      }
      if ($4) {
       $0 = $0 + -6.2831853069365025;
       $2 = $0 + -2.430840202602477e-10;
       HEAPF64[$1 >> 3] = $2;
       HEAPF64[$1 + 8 >> 3] = $0 - $2 + -2.430840202602477e-10;
       $3 = 4;
       break block1;
      }
      $0 = $0 + 6.2831853069365025;
      $2 = $0 + 2.430840202602477e-10;
      HEAPF64[$1 >> 3] = $2;
      HEAPF64[$1 + 8 >> 3] = $0 - $2 + 2.430840202602477e-10;
      $3 = -4;
      break block1;
     }
     if ($9 >>> 0 > 1094263290) {
      break block2
     }
    }
    $5 = $0 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    if (Math_abs($5) < 2147483647.0) {
     $3 = ~~$5
    } else {
     $3 = -2147483648
    }
    $2 = $0 + $5 * -1.5707963267341256;
    $10 = $5 * 6.077100506506192e-11;
    $11 = $2 - $10;
    block3 : {
     if ($11 < -.7853981633974483) {
      $3 = $3 - 1 | 0;
      $5 = $5 + -1.0;
      $10 = $5 * 6.077100506506192e-11;
      $2 = $0 + $5 * -1.5707963267341256;
      break block3;
     }
     if (!($11 > .7853981633974483)) {
      break block3
     }
     $3 = $3 + 1 | 0;
     $5 = $5 + 1.0;
     $10 = $5 * 6.077100506506192e-11;
     $2 = $0 + $5 * -1.5707963267341256;
    }
    $0 = $2 - $10;
    HEAPF64[$1 >> 3] = $0;
    wasm2js_scratch_store_f64(+$0);
    $6 = wasm2js_scratch_load_i32(1) | 0;
    wasm2js_scratch_load_i32(0) | 0;
    $12 = $9 >>> 20 | 0;
    block4 : {
     if (($12 - ($6 >>> 20 & 2047) | 0) < 17) {
      break block4
     }
     $0 = $5 * 6.077100506303966e-11;
     $11 = $2 - $0;
     $10 = $5 * 2.0222662487959506e-21 - ($2 - $11 - $0);
     $0 = $11 - $10;
     HEAPF64[$1 >> 3] = $0;
     wasm2js_scratch_store_f64(+$0);
     $6 = wasm2js_scratch_load_i32(1) | 0;
     wasm2js_scratch_load_i32(0) | 0;
     if (($12 - ($6 >>> 20 & 2047) | 0) < 50) {
      $2 = $11;
      break block4;
     }
     $0 = $5 * 2.0222662487111665e-21;
     $2 = $11 - $0;
     $10 = $5 * 8.4784276603689e-32 - ($11 - $2 - $0);
     $0 = $2 - $10;
     HEAPF64[$1 >> 3] = $0;
    }
    HEAPF64[$1 + 8 >> 3] = $2 - $0 - $10;
    break block1;
   }
   if ($9 >>> 0 >= 2146435072) {
    $0 = $0 - $0;
    HEAPF64[$1 >> 3] = $0;
    HEAPF64[$1 + 8 >> 3] = $0;
    $3 = 0;
    break block1;
   }
   $13 = $7 + 16 | 8;
   $6 = $8 & 1048575;
   wasm2js_scratch_store_i32(0, $4 | 0);
   $6 = $6 | 1096810496;
   wasm2js_scratch_store_i32(1, $6 | 0);
   $0 = +wasm2js_scratch_load_f64();
   $3 = $7 + 16 | 0;
   $12 = 1;
   while (1) {
    $2 = +((Math_abs($0) < 2147483647.0 ? ~~$0 : -2147483648) | 0);
    HEAPF64[$3 >> 3] = $2;
    $0 = ($0 - $2) * 16777216.0;
    $6 = $12 & 1;
    $12 = 0;
    $3 = $13;
    if ($6) {
     continue
    }
    break;
   };
   HEAPF64[$7 + 32 >> 3] = $0;
   $3 = 2;
   while (1) {
    $12 = $3;
    $3 = $3 - 1 | 0;
    if (HEAPF64[($7 + 16 | 0) + ($12 << 3) >> 3] == 0.0) {
     continue
    }
    break;
   };
   $3 = __rem_pio2_large($7 + 16 | 0, $7, ($9 >>> 20 | 0) - 1046 | 0, $12 + 1 | 0, 1);
   $0 = HEAPF64[$7 >> 3];
   if (($8 | 0) < 0) {
    HEAPF64[$1 >> 3] = -$0;
    HEAPF64[$1 + 8 >> 3] = -HEAPF64[$7 + 8 >> 3];
    $3 = 0 - $3 | 0;
    break block1;
   }
   HEAPF64[$1 >> 3] = $0;
   HEAPF64[$1 + 8 >> 3] = HEAPF64[$7 + 8 >> 3];
  }
  __stack_pointer = $7 + 48 | 0;
  return $3;
 }
 
 function __cos($0, $1) {
  var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0;
  $2 = $0 * $0;
  $3 = $2 * .5;
  $4 = 1.0 - $3;
  $5 = 1.0 - $4 - $3;
  $3 = $2 * $2;
  return $4 + ($5 + ($2 * ($2 * ($2 * ($2 * 2.480158728947673e-05 + -.001388888888887411) + .0416666666666666) + $3 * $3 * ($2 * ($2 * -1.1359647557788195e-11 + 2.087572321298175e-09) + -2.7557314351390663e-07)) - $0 * $1));
 }
 
 function sin($0) {
  var $1 = 0, $2 = 0, $3 = 0.0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  wasm2js_scratch_store_f64(+$0);
  $1 = wasm2js_scratch_load_i32(1) | 0;
  wasm2js_scratch_load_i32(0) | 0;
  $1 = $1 & 2147483647;
  block : {
   if ($1 >>> 0 <= 1072243195) {
    if ($1 >>> 0 < 1045430272) {
     break block
    }
    $0 = __sin($0, 0.0, 0);
    break block;
   }
   if ($1 >>> 0 >= 2146435072) {
    $0 = $0 - $0;
    break block;
   }
   $1 = __rem_pio2($0, $2);
   $0 = HEAPF64[$2 + 8 >> 3];
   $3 = HEAPF64[$2 >> 3];
   block3 : {
    switch (($1 & 3) - 1 | 0) {
    default:
     $0 = __sin($3, $0, 1);
     break block;
    case 0:
     $0 = __cos($3, $0);
     break block;
    case 1:
     $0 = -__sin($3, $0, 1);
     break block;
    case 2:
     break block3;
    };
   }
   $0 = -__cos($3, $0);
  }
  __stack_pointer = $2 + 16 | 0;
  return $0;
 }
 
 function strchr($0, $1) {
  $0 = __strchrnul($0, $1);
  return HEAPU8[$0 | 0] == ($1 & 255) ? $0 : 0;
 }
 
 function __strchrnul($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  block : {
   block2 : {
    block1 : {
     $4 = $1 & 255;
     if ($4) {
      if ($0 & 3) {
       $2 = $1 & 255;
       while (1) {
        $3 = HEAPU8[$0 | 0];
        if (!$3 | ($2 | 0) == ($3 | 0)) {
         break block
        }
        $0 = $0 + 1 | 0;
        if ($0 & 3) {
         continue
        }
        break;
       };
      }
      $2 = HEAP32[$0 >> 2];
      if ((($2 | 16843008 - $2) & -2139062144) != -2139062144) {
       break block1
      }
      $4 = Math_imul($4, 16843009);
      while (1) {
       $3 = $2 ^ $4;
       if ((($3 | 16843008 - $3) & -2139062144) != -2139062144) {
        break block1
       }
       $2 = HEAP32[$0 + 4 >> 2];
       $3 = $0 + 4 | 0;
       $0 = $3;
       if (((16843008 - $2 | $2) & -2139062144) == -2139062144) {
        continue
       }
       break;
      };
      break block2;
     }
     return strlen($0) + $0 | 0;
    }
    $3 = $0;
   }
   while (1) {
    $0 = $3;
    $2 = HEAPU8[$0 | 0];
    if (!$2) {
     break block
    }
    $3 = $0 + 1 | 0;
    if (($1 & 255) != ($2 | 0)) {
     continue
    }
    break;
   };
  }
  return $0;
 }
 
 function strcmp($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = HEAPU8[$0 | 0];
  $3 = HEAPU8[$1 | 0];
  block : {
   if (!$2 | ($3 | 0) != ($2 | 0)) {
    break block
   }
   while (1) {
    $3 = HEAPU8[$1 + 1 | 0];
    $2 = HEAPU8[$0 + 1 | 0];
    if (!$2) {
     break block
    }
    $1 = $1 + 1 | 0;
    $0 = $0 + 1 | 0;
    if (($2 | 0) == ($3 | 0)) {
     continue
    }
    break;
   };
  }
  return $2 - $3 | 0;
 }
 
 function __stpcpy($0, $1) {
  var $2 = 0;
  block1 : {
   block : {
    if (($0 ^ $1) & 3) {
     $2 = HEAPU8[$1 | 0];
     break block;
    }
    if ($1 & 3) {
     while (1) {
      $2 = HEAPU8[$1 | 0];
      HEAP8[$0 | 0] = $2;
      if (!$2) {
       break block1
      }
      $0 = $0 + 1 | 0;
      $1 = $1 + 1 | 0;
      if ($1 & 3) {
       continue
      }
      break;
     }
    }
    $2 = HEAP32[$1 >> 2];
    if ((($2 | 16843008 - $2) & -2139062144) != -2139062144) {
     break block
    }
    while (1) {
     HEAP32[$0 >> 2] = $2;
     $0 = $0 + 4 | 0;
     $2 = HEAP32[$1 + 4 >> 2];
     $1 = $1 + 4 | 0;
     if (((16843008 - $2 | $2) & -2139062144) == -2139062144) {
      continue
     }
     break;
    };
   }
   HEAP8[$0 | 0] = $2;
   if (!($2 & 255)) {
    break block1
   }
   while (1) {
    $2 = HEAPU8[$1 + 1 | 0];
    HEAP8[$0 + 1 | 0] = $2;
    $0 = $0 + 1 | 0;
    $1 = $1 + 1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  return $0;
 }
 
 function strcpy($0, $1) {
  __stpcpy($0, $1);
  return $0;
 }
 
 function strlen($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  block1 : {
   block : {
    $1 = $0;
    if (!($1 & 3)) {
     break block
    }
    if (!HEAPU8[$1 | 0]) {
     return 0
    }
    while (1) {
     $1 = $1 + 1 | 0;
     if (!($1 & 3)) {
      break block
     }
     if (HEAPU8[$1 | 0]) {
      continue
     }
     break;
    };
    break block1;
   }
   while (1) {
    $2 = $1;
    $1 = $1 + 4 | 0;
    $3 = HEAP32[$2 >> 2];
    if ((($3 | 16843008 - $3) & -2139062144) == -2139062144) {
     continue
    }
    break;
   };
   while (1) {
    $1 = $2;
    $2 = $1 + 1 | 0;
    if (HEAPU8[$1 | 0]) {
     continue
    }
    break;
   };
  }
  return $1 - $0 | 0;
 }
 
 function strncat($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = strlen($0) + $0 | 0;
  block : {
   if (!$2) {
    break block
   }
   while (1) {
    $4 = HEAPU8[$1 | 0];
    if (!$4) {
     break block
    }
    HEAP8[$3 | 0] = $4;
    $3 = $3 + 1 | 0;
    $1 = $1 + 1 | 0;
    $2 = $2 - 1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  HEAP8[$3 | 0] = 0;
  return $0;
 }
 
 function emscripten_stack_init() {
  __stack_base = 460816;
  __stack_end = 395280;
 }
 
 function emscripten_stack_get_free() {
  return __stack_pointer - __stack_end | 0;
 }
 
 function emscripten_stack_get_base() {
  return __stack_base | 0;
 }
 
 function emscripten_stack_get_end() {
  return __stack_end | 0;
 }
 
 function __lock($0) {
  
 }
 
 function __unlock($0) {
  
 }
 
 function __ofl_lock() {
  __lock(395264);
  return 395268;
 }
 
 function __ofl_unlock() {
  __unlock(395264);
 }
 
 function __lockfile($0) {
  return 1;
 }
 
 function __unlockfile($0) {
  
 }
 
 function fflush($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if (!$0) {
   if (HEAP32[98818]) {
    $1 = fflush(HEAP32[98818])
   }
   if (HEAP32[98818]) {
    $1 = fflush(HEAP32[98818]) | $1
   }
   $0 = HEAP32[__ofl_lock() >> 2];
   if ($0) {
    while (1) {
     if (HEAP32[$0 + 76 >> 2] < 0) {
      $2 = 0
     } else {
      $2 = __lockfile($0)
     }
     $2 = !$2;
     if (HEAP32[$0 + 20 >> 2] != HEAP32[$0 + 28 >> 2]) {
      $1 = fflush($0) | $1
     }
     if (!$2) {
      __unlockfile($0)
     }
     $0 = HEAP32[$0 + 56 >> 2];
     if ($0) {
      continue
     }
     break;
    }
   }
   __ofl_unlock();
   return $1 | 0;
  }
  if (HEAP32[$0 + 76 >> 2] < 0) {
   $1 = 0
  } else {
   $1 = __lockfile($0)
  }
  $2 = !$1;
  block2 : {
   block1 : {
    block : {
     if (HEAP32[$0 + 20 >> 2] == HEAP32[$0 + 28 >> 2]) {
      break block
     }
     FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
     if (HEAP32[$0 + 20 >> 2]) {
      break block
     }
     $1 = -1;
     if (!$2) {
      break block1
     }
     break block2;
    }
    $1 = HEAP32[$0 + 4 >> 2];
    $3 = HEAP32[$0 + 8 >> 2];
    if (($1 | 0) != ($3 | 0)) {
     $1 = $1 - $3 | 0;
     FUNCTION_TABLE[HEAP32[$0 + 40 >> 2]]($0, $1, $1 >> 31, 1) | 0;
    }
    $1 = 0;
    HEAP32[$0 + 28 >> 2] = 0;
    HEAP32[$0 + 16 >> 2] = 0;
    HEAP32[$0 + 20 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$0 + 8 >> 2] = 0;
    if ($2) {
     break block2
    }
   }
   __unlockfile($0);
  }
  return $1 | 0;
 }
 
 function _emscripten_stack_restore($0) {
  $0 = $0 | 0;
  __stack_pointer = $0;
 }
 
 function _emscripten_stack_alloc($0) {
  $0 = $0 | 0;
  $0 = __stack_pointer - $0 & -16;
  __stack_pointer = $0;
  return $0 | 0;
 }
 
 function emscripten_stack_get_current() {
  return __stack_pointer | 0;
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  $4 = $2 >>> 16 | 0;
  $5 = $0 >>> 16 | 0;
  $3 = (Math_imul($4, $5) + Math_imul($1, $2) | 0) + Math_imul($3, $0) | 0;
  $2 = $2 & 65535;
  $0 = $0 & 65535;
  $1 = Math_imul($2, $0);
  $2 = ($1 >>> 16 | 0) + Math_imul($2, $5) | 0;
  $3 = $3 + ($2 >>> 16 | 0) | 0;
  $2 = Math_imul($0, $4) + ($2 & 65535) | 0;
  i64toi32_i32$HIGH_BITS = $3 + ($2 >>> 16 | 0) | 0;
  return $1 & 65535 | $2 << 16;
 }
 
 function __wasm_i64_mul($0, $1, $2, $3) {
  $3 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1, $2, $3);
  return $3;
 }
 
 function __wasm_rotl_i32($0, $1) {
  var $2 = 0;
  $2 = $1 & 31;
  $1 = 0 - $1 & 31;
  return (-1 >>> $2 & $0) << $2 | (-1 << $1 & $0) >>> $1;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 bufferView = HEAPU8;
 initActiveSegments(imports);
 var FUNCTION_TABLE = Table([null, jswrap_object_toString, jsvStringIteratorPrintfCallback, jsvIsInternalFunctionKey, jsvIsInternalObjectKey, jsvIterateCallbackCountCb, jsvIterateCallbackToBytesCb, vcbprintf_callback_jsiConsolePrintString, espruino_snprintf_cb, jswrap_eval, gen_jswrap_Graphics_Graphics, jswrap_dataview_constructor, jswrap_date_constructor, jswrap_error_constructor, jswrap_syntaxerror_constructor, jswrap_typeerror_constructor, jswrap_internalerror_constructor, jswrap_referenceerror_constructor, jswrap_regexp_constructor, jswrap_onewire_constructor, jswrap_promise_constructor, jswrap_serial_constructor, gen_jswrap_StorageFile_StorageFile, jswrap_spi_constructor, jswrap_i2c_constructor, jswrap_waveform_constructor, jswrap_pin_constructor, gen_jswrap_Bangle_Bangle, gen_jswrap_E_E, gen_jswrap_NRF_NRF, gen_jswrap_Bluetooth_Bluetooth, jswrap_array_constructor, gen_jswrap_console_console, gen_jswrap_JSON_JSON, jswrap_number_constructor, jswrap_object_constructor, jswrap_string_constructor, gen_jswrap_Modules_Modules, gen_jswrap_Math_Math, gen_jswrap_Flash_Flash, gen_jswrap_fs_fs, gen_jswrap_process_process, gen_jswrap_Storage_Storage, gen_jswrap_heatshrink_heatshrink, gen_jswrap_crypto_crypto, gen_jswrap_AES_AES, jswrap_arraybuffer_constructor, gen_jswrap_ArrayBufferView_ArrayBufferView, jswrap_function_constructor, jswrap_pin_analog, jswrap_pin_getInfo, jswrap_pin_getMode, jswrap_pin_mode, jswrap_pin_pulse, jswrap_pin_pwm, jswrap_pin_read, jswrap_pin_reset, jswrap_pin_set, jswrap_pin_toggle, jswrap_pin_write, jswrap_pin_writeAtTime, gen_jswrap_BTN, gen_jswrap_BTN1, jswrap_boolean_constructor, gen_jswrap_Float32Array_Float32Array, gen_jswrap_Float64Array_Float64Array, gen_jswrap_HIGH, gen_jswrap_I2C1, gen_jswrap_Infinity, gen_jswrap_Int16Array_Int16Array, gen_jswrap_Int32Array_Int32Array, gen_jswrap_Int8Array_Int8Array, gen_jswrap_LED1, gen_jswrap_LED2, gen_jswrap_LOW, gen_jswrap_LoopbackA, gen_jswrap_LoopbackB, gen_jswrap_NaN, gen_jswrap_SPI1, gen_jswrap_Serial1, gen_jswrap_Terminal, gen_jswrap_USB, gen_jswrap_Uint16Array_Uint16Array, gen_jswrap_Uint24Array_Uint24Array, gen_jswrap_Uint32Array_Uint32Array, gen_jswrap_Uint8Array_Uint8Array, gen_jswrap_Uint8ClampedArray_Uint8ClampedArray, gen_jswrap_VIBRATE, jshPinAnalog, jswrap_io_analogWrite, jswrap_arguments, jswrap_atob, jswrap_btoa, jswrap_interface_changeInterval, jswrap_interface_clearInterval, jswrap_interface_clearTimeout, jswrap_interface_clearWatch, jswrap_decodeURIComponent, jswrap_io_digitalPulse, jswrap_io_digitalRead, jswrap_io_digitalWrite, gen_jswrap_dump, jswrap_interface_echo, jswrap_interface_edit, jswrap_encodeURIComponent, jswrap_io_getPinMode, jswrap_interface_getSerial, gen_jswrap_getTime, jswrap_global, jswrap_isFinite, jswrap_isNaN, jswrap_interface_load, jswrap_parseFloat, jswrap_parseInt, gen_jswrap_peek16, gen_jswrap_peek32, gen_jswrap_peek8, jswrap_io_pinMode, gen_jswrap_poke16, gen_jswrap_poke32, gen_jswrap_poke8, jswrap_print, jswrap_require, jswrap_interface_reset, jswrap_interface_setBusyIndicator, jswrap_interface_setInterval, jswrap_interface_setSleepIndicator, jswrap_interactive_setTime, jswrap_interface_setTimeout, jswrap_interface_setWatch, jswrap_io_shiftOut, jswrap_trace, jswrap_banglejs_accelRd, jswrap_banglejs_appRect, jswrap_banglejs_barometerRd, jswrap_banglejs_barometerWr, jswrap_banglejs_beep, jswrap_banglejs_buzz, jswrap_banglejs_compassRd, jswrap_banglejs_compassWr, jswrap_banglejs_dbg, gen_jswrap_Bangle_drawWidgets, jswrap_banglejs_factoryReset, jswrap_banglejs_getAccel, jswrap_banglejs_getCompass, jswrap_banglejs_getGPSFix, jswrap_banglejs_getHealthStatus, jswrap_banglejs_getLCDMode, jswrap_banglejs_getLogo, jswrap_banglejs_getOptions, jswrap_banglejs_getPressure, jswrap_banglejs_getStepCount, jswrap_banglejs_hrmRd, jswrap_banglejs_hrmWr, jswrap_banglejs_isBacklightOn, jswrap_banglejs_isBarometerOn, jswrap_banglejs_isCharging, jswrap_banglejs_isCompassOn, jswrap_banglejs_isGPSOn, jswrap_banglejs_isHRMOn, jswrap_banglejs_isLCDOn, jswrap_banglejs_isLocked, jswrap_banglejs_lcdWr, gen_jswrap_Bangle_load, gen_jswrap_Bangle_loadWidgets, jswrap_banglejs_off, jswrap_banglejs_project, jswrap_banglejs_resetCompass, jswrap_banglejs_setLCDPowerBacklight, jswrap_banglejs_setBarometerPower, jswrap_banglejs_setCompassPower, jswrap_banglejs_setGPSPower, jswrap_banglejs_setHRMPower, jswrap_banglejs_setLCDBrightness, jswrap_banglejs_setLCDMode, jswrap_banglejs_setLCDOffset, jswrap_banglejs_setLCDOverlay, jswrap_banglejs_setLCDPower, jswrap_banglejs_setLCDTimeout, jswrap_banglejs_setLocked, jswrap_banglejs_setOptions, jswrap_banglejs_setPollInterval, jswrap_banglejs_setStepCount, gen_jswrap_Bangle_setUI, gen_jswrap_Bangle_showClock, gen_jswrap_Bangle_showLauncher, gen_jswrap_Bangle_showRecoveryMenu, jswrap_banglejs_softOff, jswrap_banglejs_touchWr, jswrap_espruino_CRC32, jswrap_espruino_FFT, jswrap_espruino_HSBtoRGB, jswrap_espruino_asUTF8, jswrap_espruino_asm, jswrap_espruino_clip, jswrap_espruino_compiledC, jswrap_espruino_convolve, jswrap_espruino_decodeUTF8, jsvDefragment, jswrap_e_dumpFragmentation, jswrap_e_dumpStr, jswrap_espruino_dumpTimers, jswrap_e_dumpVariables, jswrap_espruino_enableWatchdog, jswrap_espruino_fromUTF8, jswrap_espruino_getAddressOf, gen_jswrap_E_getAnalogVRef, jswrap_espruino_getBattery, jswrap_espruino_getClock, jswrap_espruino_getConsole, jswrap_espruino_getErrorFlags, jsfGetFlags, jswrap_espruino_getPowerUsage, jswrap_espruino_getSizeOf, jswrap_espruino_getTemperature, jshGetRandomNumber, jswrap_espruino_isUTF8, jswrap_espruino_kickWatchdog, jswrap_espruino_lockConsole, jswrap_espruino_lookupNoCase, jswrap_espruino_mapInPlace, jswrap_espruino_memoryArea, jswrap_espruino_memoryMap, jswrap_espruino_nativeCall, jswrap_pipe, jswrap_espruino_reboot, jswrap_espruino_reverseByte, jswrap_espruino_setBootCode, jswrap_espruino_setClock, jswrap_espruino_setConsole, jswrap_espruino_setDST, jsfSetFlags, jswrap_espruino_setPassword, jswrap_espruino_setTimeZone, gen_jswrap_E_showAlert, gen_jswrap_E_showMenu, gen_jswrap_E_showMessage, gen_jswrap_E_showPrompt, gen_jswrap_E_showScroller, srand, jswrap_espruino_stopEventPropagation, jswrap_espruino_sum, jswrap_espruino_toArrayBuffer, jswrap_espruino_toFlatString, jswrap_espruino_toJS, jswrap_espruino_toString, jswrap_espruino_toUint8Array, jswrap_espruino_variance, jswrap_graphics_asBMP, jswrap_graphics_asImage, jswrap_graphics_asURL, jswrap_graphics_blendColor, jswrap_graphics_blit, jswrap_graphics_clear, jswrap_graphics_clearRect, jswrap_graphics_drawCircle, jswrap_graphics_drawCircleAA, jswrap_graphics_drawEllipse, jswrap_graphics_drawImage, jswrap_graphics_drawImages, jswrap_graphics_drawLine, jswrap_graphics_drawLineAA, gen_jswrap_Graphics_drawPoly, gen_jswrap_Graphics_drawPolyAA, jswrap_graphics_drawRect, jswrap_graphics_drawString, jswrap_graphics_dump, jswrap_graphics_fillCircle, jswrap_graphics_fillEllipse, gen_jswrap_Graphics_fillPoly, gen_jswrap_Graphics_fillPolyAA, jswrap_graphics_fillRect, jswrap_graphics_findFont, jswrap_graphics_floodFill, jswrap_graphics_getBPP, gen_jswrap_Graphics_getBgColor, gen_jswrap_Graphics_getColor, jswrap_graphics_getFont, jswrap_graphics_getFontHeight, jswrap_graphics_getFonts, gen_jswrap_Graphics_getHeight, jswrap_graphics_getModified, jswrap_graphics_getPixel, jswrap_graphics_getVectorFontPolys, gen_jswrap_Graphics_getWidth, jswrap_graphics_imageMetrics, jswrap_graphics_lineTo, jswrap_graphics_moveTo, jswrap_graphics_quadraticBezier, jswrap_graphics_reset, jswrap_graphics_scroll, gen_jswrap_Graphics_setBgColor, jswrap_graphics_setClipRect, gen_jswrap_Graphics_setColor, jswrap_graphics_setFont, jswrap_graphics_setFont12x20, jswrap_graphics_setFont6x15, jswrap_graphics_setFontAlign, gen_jswrap_Graphics_setFontBitmap, jswrap_graphics_setFontCustom, jswrap_graphics_setFontPBF, gen_jswrap_Graphics_setFontVector, jswrap_graphics_setPixel, jswrap_graphics_setRotation, jswrap_graphics_setTheme, jswrap_graphics_stringMetrics, jswrap_graphics_stringWidth, jswrap_graphics_theme, jswrap_graphics_toColor, jswrap_graphics_transformVertices, jswrap_graphics_wrapString, gen_jswrap_NRF_getAddress, gen_jswrap_NRF_getSecurityStatus, gen_jswrap_NRF_setAdvertising, gen_jswrap_NRF_setServices, gen_jswrap_Bluetooth_setConsole, jswrap_array_concat, jswrap_array_every, jswrap_array_fill, jswrap_array_filter, jswrap_array_find, jswrap_array_findIndex, jswrap_array_forEach, jswrap_array_includes, jswrap_array_indexOf, jswrap_array_join, jswrap_object_length, jswrap_array_map, gen_jswrap_Array_pop, jswrap_array_push, jswrap_array_reduce, jswrap_array_reverse, jswrap_array_shift, jswrap_array_slice, jswrap_array_some, jswrap_array_sort, jswrap_array_splice, jswrap_array_unshift, gen_jswrap_Array_isArray, gen_jswrap_ArrayBuffer_byteLength, gen_jswrap_ArrayBufferView_buffer, gen_jswrap_ArrayBufferView_byteLength, gen_jswrap_ArrayBufferView_byteOffset, jswrap_arraybufferview_map, jswrap_arraybufferview_set, jswrap_arraybufferview_sort, jswrap_arraybufferview_subarray, gen_jswrap_DataView_getFloat32, gen_jswrap_DataView_getFloat64, gen_jswrap_DataView_getInt16, gen_jswrap_DataView_getInt32, gen_jswrap_DataView_getInt8, gen_jswrap_DataView_getUint16, gen_jswrap_DataView_getUint32, gen_jswrap_DataView_getUint8, gen_jswrap_DataView_setFloat32, gen_jswrap_DataView_setFloat64, gen_jswrap_DataView_setInt16, gen_jswrap_DataView_setInt32, gen_jswrap_DataView_setInt8, gen_jswrap_DataView_setUint16, gen_jswrap_DataView_setUint32, gen_jswrap_DataView_setUint8, jswrap_date_now, jswrap_date_parse, jswrap_date_getDate, jswrap_date_getDay, jswrap_date_getFullYear, jswrap_date_getHours, jswrap_date_getIsDST, jswrap_date_getMilliseconds, jswrap_date_getMinutes, jswrap_date_getMonth, jswrap_date_getSeconds, jswrap_date_getTime, jswrap_date_getTimezoneOffset, jswrap_date_setDate, jswrap_date_setFullYear, jswrap_date_setHours, jswrap_date_setMilliseconds, jswrap_date_setMinutes, jswrap_date_setMonth, jswrap_date_setSeconds, jswrap_date_setTime, jswrap_date_toISOString, jswrap_date_toLocalISOString, jswrap_date_toString, jswrap_date_toUTCString, jswrap_error_toString, jswrap_console_trace, jswrap_json_parse, jswrap_json_stringify, gen_jswrap_Number_MAX_VALUE, gen_jswrap_Number_MIN_VALUE, gen_jswrap_Number_NEGATIVE_INFINITY, gen_jswrap_Number_NaN, gen_jswrap_Number_POSITIVE_INFINITY, jswrap_number_toFixed, jswrap_object_on, jswrap_object_clone, jswrap_object_emit, jswrap_object_hasOwnProperty, jswrap_object_prependListener, jswrap_object_removeAllListeners, jswrap_object_removeListener, jswrap_object_valueOf, jswrap_object_assign, jswrap_object_create, jswrap_object_defineProperties, jswrap_object_defineProperty, gen_jswrap_Object_entries, jswrap_object_fromEntries, jswrap_object_getOwnPropertyDescriptor, jswrap_object_getOwnPropertyDescriptors, gen_jswrap_Object_getOwnPropertyNames, jswrap_object_getPrototypeOf, gen_jswrap_Object_keys, jswrap_object_setPrototypeOf, gen_jswrap_Object_values, jswrap_function_apply_or_call, jswrap_function_bind, jswrap_function_replaceWith, jswrap_regexp_exec, jswrap_regexp_test, jswrap_string_charAt, jswrap_string_charCodeAt, jswrap_string_concat, jswrap_string_endsWith, gen_jswrap_String_includes, gen_jswrap_String_indexOf, gen_jswrap_String_lastIndexOf, jswrap_string_match, gen_jswrap_String_padEnd, gen_jswrap_String_padStart, gen_jswrap_String_removeAccents, jswrap_string_repeat, jswrap_string_replace, jswrap_string_replaceAll, jswrap_string_slice, jswrap_string_split, jswrap_string_startsWith, jswrap_string_substr, jswrap_string_substring, gen_jswrap_String_toLowerCase, gen_jswrap_String_toUpperCase, jswrap_string_trim, jswrap_string_fromCharCode, jswrap_modules_addCached, jswrap_modules_getCached, jswrap_modules_removeAllCached, jswrap_modules_removeCached, gen_jswrap_Math_E, gen_jswrap_Math_LN10, gen_jswrap_Math_LN2, gen_jswrap_Math_LOG10E, gen_jswrap_Math_LOG2E, gen_jswrap_Math_PI, gen_jswrap_Math_SQRT1_2, gen_jswrap_Math_SQRT2, fabs, gen_jswrap_Math_acos, jswrap_math_asin, jswrap_math_atan, jswrap_math_atan2, ceil, jswrap_math_clip, jswrap_math_cos, exp, floor, log, gen_jswrap_Math_max, gen_jswrap_Math_min, jswrap_math_pow, gen_jswrap_Math_randInt, gen_jswrap_Math_random, jswrap_math_round, jswrap_math_sign, jswrap_math_sin, jswrap_math_sqrt, gen_jswrap_Math_tan, wrapAround, jswrap_flash_erasePage, jswrap_flash_getFree, jswrap_flash_getPage, jswrap_flash_read, jswrap_flash_write, jswrap_process_env, jswrap_process_memory, gen_jswrap_process_version, jswrap_onewire_read, jswrap_onewire_reset, jswrap_onewire_search, jswrap_onewire_select, jswrap_onewire_skip, jswrap_onewire_write, jswrap_promise_all, jswrap_promise_reject, jswrap_promise_resolve, jswrap_promise_catch, jswrap_promise_then, gen_jswrap_Serial_find, jswrap_stream_available, jswrap_serial_flush, jswrap_serial_inject, jswrap_serial_isConnected, jswrap_serial_print, jswrap_serial_println, jswrap_stream_read, jswrap_serial_setConsole, jswrap_serial_setup, jswrap_serial_unsetup, jswrap_serial_write, jswrap_storage_compact, jswrap_storage_erase, jswrap_storage_eraseAll, jswrap_storage_getFree, jswrap_storage_getStats, jswrap_storage_hash, jswrap_storage_list, jswrap_storage_open, jswrap_storage_optimise, jswrap_storage_read, jswrap_storage_readArrayBuffer, jswrap_storage_readJSON, jswrap_storage_write, jswrap_storage_writeJSON, jswrap_storagefile_erase, jswrap_storagefile_getLength, jswrap_storagefile_read, jswrap_storagefile_readLine, jswrap_storagefile_write, gen_jswrap_SPI_find, jswrap_spi_send, jswrap_spi_send4bit, jswrap_spi_send8bit, jswrap_spi_setup, jswrap_spi_write, gen_jswrap_I2C_find, jswrap_i2c_readFrom, jswrap_i2c_readReg, jswrap_i2c_setup, jswrap_i2c_writeTo, jswrap_waveform_startInput, jswrap_waveform_startOutput, jswrap_waveform_stop, jswrap_heatshrink_compress, jswrap_heatshrink_decompress, jswrap_graphics_createArrayBuffer, jswrap_graphics_createCallback, jswrap_graphics_createImage, jswrap_graphics_getInstance, gen_jswrap_crypto_SHA1, gen_jswrap_crypto_SHA224, gen_jswrap_crypto_SHA256, gen_jswrap_crypto_SHA384, gen_jswrap_crypto_SHA512, jswrap_crypto_AES_ccmDecrypt, jswrap_crypto_AES_ccmEncrypt, jsiConsolePrintString, jsiTabComplete_findCommon, jsiTabComplete_printCommon, jsiPacketTimeoutHandler, jsiPacketFileTimeoutHandler, jstPinTaskChecker, jstBufferTaskChecker, jsserialHardwareFunc, jsserialSoftwareFunc, jsserialEventCallback, jsspiHardwareFunc, jsspiFastSoftwareFunc, jsspiSoftwareFunc, heatshrink_ptr_output_cb, graphicsFallbackSetPixel, graphicsFallbackGetPixel, graphicsFallbackFillRect, graphicsFallbackBlit, graphicsFallbackScroll, graphicsSetPixel, lcdSetPixel_ArrayBuffer_flat1, lcdGetPixel_ArrayBuffer_flat1, lcdFillRect_ArrayBuffer_flat1, lcdSetPixel_ArrayBuffer_flat2, lcdGetPixel_ArrayBuffer_flat2, lcdFillRect_ArrayBuffer_flat2, lcdSetPixel_ArrayBuffer_flat4, lcdGetPixel_ArrayBuffer_flat4, lcdFillRect_ArrayBuffer_flat4, lcdSetPixel_ArrayBuffer_flat8, lcdGetPixel_ArrayBuffer_flat8, lcdFillRect_ArrayBuffer_flat8, lcdScroll_ArrayBuffer_flat8, lcdSetPixel_ArrayBuffer_flat, lcdGetPixel_ArrayBuffer_flat, lcdFillRect_ArrayBuffer_flat, lcdScroll_ArrayBuffer_flat, lcdSetPixel_ArrayBuffer, lcdGetPixel_ArrayBuffer, lcdFillRect_ArrayBuffer, lcdSetPixel_JS, lcdFillRect_JS, lcdMemLCD_setPixel, lcdMemLCD_fillRect, lcdMemLCD_getPixel, lcdMemLCD_scroll, aes_crypt_ecb_wrap, aes_setkey_enc_wrap, aes_setkey_dec_wrap, aes_ctx_alloc, aes_ctx_free, ccm_aes_setkey_wrap, ccm_ctx_alloc, ccm_ctx_free, lcd_flip, btn1Handler, jswrap_banglejs_postInit, jswrap_banglejs_beep_callback, jswrap_banglejs_buzz_callback, _jswrap_arraybufferview_sort_float, _jswrap_arraybufferview_sort_int, jsvArrayAddUnique, _jswrap_object_entries_cb, _jswrap_object_values_cb, _jswrap_espruino_toString_char, _jswrap_espruino_toUint8Array_char, jswrap_io_shiftOutCallback, jswrap_pipe_src_close_listener, jswrap_pipe_drain_listener, jswrap_pipe_dst_close_listener, jsvLockAgainSafe, jsvUnLock, jsvSkipName, jsvMathsOp, jsvNewWithFlags, jsvNewFromFloat, jsvNewFromInteger, jsvNewFromString, jsvNewFromBool, jsvGetFloat, jsvGetInteger, jsvGetBool, jsvReplaceWith, jspeFunctionCall, jspGetNamedVariable, jspGetNamedField, jspGetVarNamedField, _jswrap_onewire_write_cb, _jswrap_prombox_resolve, _jswrap_prombox_reject, _jswrap_prombox_queueresolve, _jswrap_prombox_queuereject, _jswrap_prombox_all_reject, _jswrap_prombox_all_resolve, _jswrap_promise_reaction_call, _jswrap_serial_inject_cb, jswrap_spi_send_cb, jswrap_spi_write_cb, heatshrink_var_input_cb, heatshrink_var_output_cb, jswrap_graphics_getFonts_callback, graphicsFillPoly, _jswrap_graphics_getVectorFontPolys_cb, graphicsDrawLineAA, graphicsDrawLine, jswrap_graphics_setFont6x8, jswrap_graphics_setFont4x6]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 return {
  "memory": Object.create(Object.prototype, {
   "grow": {
    
   }, 
   "buffer": {
    "get": function () {
     return buffer;
    }
    
   }
  }), 
  "__wasm_call_ctors": __wasm_call_ctors, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "jshPushIOCharEvent": jshPushIOCharEvent, 
  "jshGetCharToTransmit": jshGetCharToTransmit, 
  "jshGetDeviceToTransmit": jshGetDeviceToTransmit, 
  "jsGfxChanged": jsGfxChanged, 
  "jsGfxGetPtr": jsGfxGetPtr, 
  "jsInit": jsInit, 
  "jsIdle": jsIdle, 
  "jsSendPinWatchEvent": jsSendPinWatchEvent, 
  "jsSendTouchEvent": jsSendTouchEvent, 
  "jsKill": jsKill, 
  "fflush": fflush, 
  "emscripten_stack_init": emscripten_stack_init, 
  "emscripten_stack_get_free": emscripten_stack_get_free, 
  "emscripten_stack_get_base": emscripten_stack_get_base, 
  "emscripten_stack_get_end": emscripten_stack_get_end, 
  "_emscripten_stack_restore": _emscripten_stack_restore, 
  "_emscripten_stack_alloc": _emscripten_stack_alloc, 
  "emscripten_stack_get_current": emscripten_stack_get_current
 };
}

  return asmFunc(info);
}

)(info);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module, info)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error,

  isWasm2js: true,
};
// end include: wasm2js.js
if (WebAssembly.isWasm2js) {
  // We don't need to actually download a wasm binary, mark it as present but
  // empty.
  wasmBinary = [];
}

if (typeof WebAssembly != 'object') {
  err('no native wasm support detected');
}

// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

// In STRICT mode, we only define assert() when ASSERTIONS is set.  i.e. we
// don't define it at all in release modes.  This matches the behaviour of
// MINIMAL_RUNTIME.
// TODO(sbc): Make this the default even without STRICT enabled.
/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed' + (text ? ': ' + text : ''));
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.
function _malloc() {
  abort('malloc() called but not included in the build - add `_malloc` to EXPORTED_FUNCTIONS');
}
function _free() {
  // Show a helpful error since we used to include free by default in the past.
  abort('free() called but not included in the build - add `_free` to EXPORTED_FUNCTIONS');
}

// Memory management

var HEAP,
/** @type {!Int8Array} */
  HEAP8,
/** @type {!Uint8Array} */
  HEAPU8,
/** @type {!Int16Array} */
  HEAP16,
/** @type {!Uint16Array} */
  HEAPU16,
/** @type {!Int32Array} */
  HEAP32,
/** @type {!Uint32Array} */
  HEAPU32,
/** @type {!Float32Array} */
  HEAPF32,
/** @type {!Float64Array} */
  HEAPF64;

var runtimeInitialized = false;

/**
 * Indicates whether filename is delivered via file protocol (as opposed to http/https)
 * @noinline
 */
var isFileURI = (filename) => filename.startsWith('file://');

// include: runtime_shared.js
// include: runtime_stack_check.js
// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // If the stack ends at address zero we write our cookies 4 bytes into the
  // stack.  This prevents interference with SAFE_HEAP and ASAN which also
  // monitor writes to address zero.
  if (max == 0) {
    max += 4;
  }
  // The stack grow downwards towards _emscripten_stack_get_end.
  // We write cookies to the final two words in the stack and detect if they are
  // ever overwritten.
  HEAPU32[((max)>>2)] = 0x02135467;
  HEAPU32[(((max)+(4))>>2)] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAPU32[((0)>>2)] = 1668509029;
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  // See writeStackCookie().
  if (max == 0) {
    max += 4;
  }
  var cookie1 = HEAPU32[((max)>>2)];
  var cookie2 = HEAPU32[(((max)+(4))>>2)];
  if (cookie1 != 0x02135467 || cookie2 != 0x89BACDFE) {
    abort(`Stack overflow! Stack cookie has been overwritten at ${ptrToString(max)}, expected hex dwords 0x89BACDFE and 0x2135467, but received ${ptrToString(cookie2)} ${ptrToString(cookie1)}`);
  }
  // Also test the global address 0 for integrity.
  if (HEAPU32[((0)>>2)] != 0x63736d65 /* 'emsc' */) {
    abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
  }
}
// end include: runtime_stack_check.js
// include: runtime_exceptions.js
// end include: runtime_exceptions.js
// include: runtime_debug.js
// Endianness check
(() => {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)';
})();

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)');
}

function legacyModuleProp(prop, newName, incoming=true) {
  if (!Object.getOwnPropertyDescriptor(Module, prop)) {
    Object.defineProperty(Module, prop, {
      configurable: true,
      get() {
        let extra = incoming ? ' (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)' : '';
        abort(`\`Module.${prop}\` has been replaced by \`${newName}\`` + extra);

      }
    });
  }
}

function consumedModuleProp(prop) {
  if (!Object.getOwnPropertyDescriptor(Module, prop)) {
    Object.defineProperty(Module, prop, {
      configurable: true,
      set() {
        abort(`Attempt to set \`Module.${prop}\` after it has already been processed.  This can happen, for example, when code is injected via '--post-js' rather than '--pre-js'`);

      }
    });
  }
}

function ignoredModuleProp(prop) {
  if (Object.getOwnPropertyDescriptor(Module, prop)) {
    abort(`\`Module.${prop}\` was supplied but \`${prop}\` not included in INCOMING_MODULE_JS_API`);
  }
}

// forcing the filesystem exports a few things by default
function isExportedByForceFilesystem(name) {
  return name === 'FS_createPath' ||
         name === 'FS_createDataFile' ||
         name === 'FS_createPreloadedFile' ||
         name === 'FS_unlink' ||
         name === 'addRunDependency' ||
         // The old FS has some functionality that WasmFS lacks.
         name === 'FS_createLazyFile' ||
         name === 'FS_createDevice' ||
         name === 'removeRunDependency';
}

/**
 * Intercept access to a global symbol.  This enables us to give informative
 * warnings/errors when folks attempt to use symbols they did not include in
 * their build, or no symbols that no longer exist.
 */
function hookGlobalSymbolAccess(sym, func) {
  if (typeof globalThis != 'undefined' && !Object.getOwnPropertyDescriptor(globalThis, sym)) {
    Object.defineProperty(globalThis, sym, {
      configurable: true,
      get() {
        func();
        return undefined;
      }
    });
  }
}

function missingGlobal(sym, msg) {
  hookGlobalSymbolAccess(sym, () => {
    warnOnce(`\`${sym}\` is not longer defined by emscripten. ${msg}`);
  });
}

missingGlobal('buffer', 'Please use HEAP8.buffer or wasmMemory.buffer');
missingGlobal('asm', 'Please use wasmExports instead');

function missingLibrarySymbol(sym) {
  hookGlobalSymbolAccess(sym, () => {
    // Can't `abort()` here because it would break code that does runtime
    // checks.  e.g. `if (typeof SDL === 'undefined')`.
    var msg = `\`${sym}\` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line`;
    // DEFAULT_LIBRARY_FUNCS_TO_INCLUDE requires the name as it appears in
    // library.js, which means $name for a JS name with no prefix, or name
    // for a JS name like _name.
    var librarySymbol = sym;
    if (!librarySymbol.startsWith('_')) {
      librarySymbol = '$' + sym;
    }
    msg += ` (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE='${librarySymbol}')`;
    if (isExportedByForceFilesystem(sym)) {
      msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
    }
    warnOnce(msg);
  });

  // Any symbol that is not included from the JS library is also (by definition)
  // not exported on the Module object.
  unexportedRuntimeSymbol(sym);
}

function unexportedRuntimeSymbol(sym) {
  if (!Object.getOwnPropertyDescriptor(Module, sym)) {
    Object.defineProperty(Module, sym, {
      configurable: true,
      get() {
        var msg = `'${sym}' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the Emscripten FAQ)`;
        if (isExportedByForceFilesystem(sym)) {
          msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
        }
        abort(msg);
      }
    });
  }
}

var runtimeDebug = true; // Switch to false at runtime to disable logging at the right times

// Used by XXXXX_DEBUG settings to output debug messages.
function dbg(...args) {
  if (!runtimeDebug && typeof runtimeDebug != 'undefined') return;
  // TODO(sbc): Make this configurable somehow.  Its not always convenient for
  // logging to show up as warnings.
  console.warn(...args);
}
// end include: runtime_debug.js
// include: memoryprofiler.js
// end include: memoryprofiler.js


function updateMemoryViews() {
  var b = wasmMemory.buffer;
  Module['HEAP8'] = HEAP8 = new Int8Array(b);
  Module['HEAP16'] = HEAP16 = new Int16Array(b);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(b);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(b);
  Module['HEAP32'] = HEAP32 = new Int32Array(b);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(b);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(b);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(b);
}

// end include: runtime_shared.js
assert(!Module['STACK_SIZE'], 'STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time')

assert(typeof Int32Array != 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray != undefined && Int32Array.prototype.set != undefined,
       'JS engine does not provide full typed array support');

// If memory is defined in wasm, the user can't provide it, or set INITIAL_MEMORY
assert(!Module['wasmMemory'], 'Use of `wasmMemory` detected.  Use -sIMPORTED_MEMORY to define wasmMemory externally');
assert(!Module['INITIAL_MEMORY'], 'Detected runtime INITIAL_MEMORY setting.  Use -sIMPORTED_MEMORY to define wasmMemory dynamically');

function preRun() {
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  consumedModuleProp('preRun');
  callRuntimeCallbacks(onPreRuns);
}

function initRuntime() {
  assert(!runtimeInitialized);
  runtimeInitialized = true;

  checkStackCookie();

  

  wasmExports['__wasm_call_ctors']();

  
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  consumedModuleProp('postRun');

  callRuntimeCallbacks(onPostRuns);
}

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};
var runDependencyWatcher = null;

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  Module['monitorRunDependencies']?.(runDependencies);

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval != 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(() => {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err(`dependency: ${dep}`);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  Module['monitorRunDependencies']?.(runDependencies);

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

/** @param {string|number=} what */
function abort(what) {
  Module['onAbort']?.(what);

  what = 'Aborted(' + what + ')';
  // TODO(sbc): Should we remove printing and leave it up to whoever
  // catches the exception?
  err(what);

  ABORT = true;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  // FIXME This approach does not work in Wasm EH because it currently does not assume
  // all RuntimeErrors are from traps; it decides whether a RuntimeError is from
  // a trap or not based on a hidden field within the object. So at the moment
  // we don't have a way of throwing a wasm trap from JS. TODO Make a JS API that
  // allows this in the wasm spec.

  // Suppress closure compiler warning here. Closure compiler's builtin extern
  // definition for WebAssembly.RuntimeError claims it takes no arguments even
  // though it can.
  // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure gets fixed.
  /** @suppress {checkTypes} */
  var e = new WebAssembly.RuntimeError(what);

  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// show errors on likely calls to FS when it was not included
var FS = {
  error() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with -sFORCE_FILESYSTEM');
  },
  init() { FS.error() },
  createDataFile() { FS.error() },
  createPreloadedFile() { FS.error() },
  createLazyFile() { FS.error() },
  open() { FS.error() },
  mkdev() { FS.error() },
  registerDevice() { FS.error() },
  analyzePath() { FS.error() },

  ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;

function createExportWrapper(name, nargs) {
  return (...args) => {
    assert(runtimeInitialized, `native function \`${name}\` called before runtime initialization`);
    var f = wasmExports[name];
    assert(f, `exported native function \`${name}\` not found`);
    // Only assert for too many arguments. Too few can be valid since the missing arguments will be zero filled.
    assert(args.length <= nargs, `native function \`${name}\` called with ${args.length} args but expects ${nargs}`);
    return f(...args);
  };
}

var wasmBinaryFile;

function findWasmBinary() {
    return locateFile('emulator_banglejs2.wasm');
}

function getBinarySync(file) {
  if (file == wasmBinaryFile && wasmBinary) {
    return new Uint8Array(wasmBinary);
  }
  if (readBinary) {
    return readBinary(file);
  }
  throw 'both async and sync fetching of the wasm failed';
}

async function getWasmBinary(binaryFile) {
  // If we don't have the binary yet, load it asynchronously using readAsync.
  if (!wasmBinary) {
    // Fetch the binary using readAsync
    try {
      var response = await readAsync(binaryFile);
      return new Uint8Array(response);
    } catch {
      // Fall back to getBinarySync below;
    }
  }

  // Otherwise, getBinarySync should be able to get it synchronously
  return getBinarySync(binaryFile);
}

async function instantiateArrayBuffer(binaryFile, imports) {
  try {
    var binary = await getWasmBinary(binaryFile);
    var instance = await WebAssembly.instantiate(binary, imports);
    return instance;
  } catch (reason) {
    err(`failed to asynchronously prepare wasm: ${reason}`);

    // Warn on some common problems.
    if (isFileURI(wasmBinaryFile)) {
      err(`warning: Loading from a file URI (${wasmBinaryFile}) is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing`);
    }
    abort(reason);
  }
}

async function instantiateAsync(binary, binaryFile, imports) {
  if (!binary && typeof WebAssembly.instantiateStreaming == 'function'
      // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.
      && !isFileURI(binaryFile)
      // Avoid instantiateStreaming() on Node.js environment for now, as while
      // Node.js v18.1.0 implements it, it does not have a full fetch()
      // implementation yet.
      //
      // Reference:
      //   https://github.com/emscripten-core/emscripten/pull/16917
      && !ENVIRONMENT_IS_NODE
     ) {
    try {
      var response = fetch(binaryFile, { credentials: 'same-origin' });
      var instantiationResult = await WebAssembly.instantiateStreaming(response, imports);
      return instantiationResult;
    } catch (reason) {
      // We expect the most common failure cause to be a bad MIME type for the binary,
      // in which case falling back to ArrayBuffer instantiation should work.
      err(`wasm streaming compile failed: ${reason}`);
      err('falling back to ArrayBuffer instantiation');
      // fall back of instantiateArrayBuffer below
    };
  }
  return instantiateArrayBuffer(binaryFile, imports);
}

function getWasmImports() {
  // prepare imports
  return {
    'env': wasmImports,
    'wasi_snapshot_preview1': wasmImports,
  }
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
async function createWasm() {
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    wasmExports = instance.exports;

    

    wasmMemory = wasmExports['memory'];
    
    assert(wasmMemory, 'memory not found in wasm exports');
    updateMemoryViews();

    removeRunDependency('wasm-instantiate');
    return wasmExports;
  }
  // wait for the pthread pool (if any)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.
  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above PTHREADS-enabled path.
    return receiveInstance(result['instance']);
  }

  var info = getWasmImports();

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to
  // run the instantiation parallel to any other async startup actions they are
  // performing.
  // Also pthreads and wasm workers initialize the wasm instance through this
  // path.
  if (Module['instantiateWasm']) {
    return new Promise((resolve, reject) => {
      try {
        Module['instantiateWasm'](info, (mod, inst) => {
          receiveInstance(mod, inst);
          resolve(mod.exports);
        });
      } catch(e) {
        err(`Module.instantiateWasm callback failed with error: ${e}`);
        reject(e);
      }
    });
  }

  wasmBinaryFile ??= findWasmBinary();
    var result = await instantiateAsync(wasmBinary, wasmBinaryFile, info);
    var exports = receiveInstantiationResult(result);
    return exports;
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// end include: preamble.js

// Begin JS library code


  class ExitStatus {
      name = 'ExitStatus';
      constructor(status) {
        this.message = `Program terminated with exit(${status})`;
        this.status = status;
      }
    }

  var callRuntimeCallbacks = (callbacks) => {
      while (callbacks.length > 0) {
        // Pass the module as the first argument.
        callbacks.shift()(Module);
      }
    };
  var onPostRuns = [];
  var addOnPostRun = (cb) => onPostRuns.unshift(cb);

  var onPreRuns = [];
  var addOnPreRun = (cb) => onPreRuns.unshift(cb);


  
    /**
     * @param {number} ptr
     * @param {string} type
     */
  function getValue(ptr, type = 'i8') {
    if (type.endsWith('*')) type = '*';
    switch (type) {
      case 'i1': return HEAP8[ptr];
      case 'i8': return HEAP8[ptr];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': abort('to do getValue(i64) use WASM_BIGINT');
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      case '*': return HEAPU32[((ptr)>>2)];
      default: abort(`invalid type for getValue: ${type}`);
    }
  }

  var noExitRuntime = Module['noExitRuntime'] || true;

  var ptrToString = (ptr) => {
      assert(typeof ptr === 'number');
      // With CAN_ADDRESS_2GB or MEMORY64, pointers are already unsigned.
      ptr >>>= 0;
      return '0x' + ptr.toString(16).padStart(8, '0');
    };

  
    /**
     * @param {number} ptr
     * @param {number} value
     * @param {string} type
     */
  function setValue(ptr, value, type = 'i8') {
    if (type.endsWith('*')) type = '*';
    switch (type) {
      case 'i1': HEAP8[ptr] = value; break;
      case 'i8': HEAP8[ptr] = value; break;
      case 'i16': HEAP16[((ptr)>>1)] = value; break;
      case 'i32': HEAP32[((ptr)>>2)] = value; break;
      case 'i64': abort('to do setValue(i64) use WASM_BIGINT');
      case 'float': HEAPF32[((ptr)>>2)] = value; break;
      case 'double': HEAPF64[((ptr)>>3)] = value; break;
      case '*': HEAPU32[((ptr)>>2)] = value; break;
      default: abort(`invalid type for setValue: ${type}`);
    }
  }

  var stackRestore = (val) => __emscripten_stack_restore(val);

  var stackSave = () => _emscripten_stack_get_current();

  var warnOnce = (text) => {
      warnOnce.shown ||= {};
      if (!warnOnce.shown[text]) {
        warnOnce.shown[text] = 1;
        if (ENVIRONMENT_IS_NODE) text = 'warning: ' + text;
        err(text);
      }
    };

  var readEmAsmArgsArray = [];
  var readEmAsmArgs = (sigPtr, buf) => {
      // Nobody should have mutated _readEmAsmArgsArray underneath us to be something else than an array.
      assert(Array.isArray(readEmAsmArgsArray));
      // The input buffer is allocated on the stack, so it must be stack-aligned.
      assert(buf % 16 == 0);
      readEmAsmArgsArray.length = 0;
      var ch;
      // Most arguments are i32s, so shift the buffer pointer so it is a plain
      // index into HEAP32.
      while (ch = HEAPU8[sigPtr++]) {
        var chr = String.fromCharCode(ch);
        var validChars = ['d', 'f', 'i', 'p'];
        assert(validChars.includes(chr), `Invalid character ${ch}("${chr}") in readEmAsmArgs! Use only [${validChars}], and do not specify "v" for void return argument.`);
        // Floats are always passed as doubles, so all types except for 'i'
        // are 8 bytes and require alignment.
        var wide = (ch != 105);
        wide &= (ch != 112);
        buf += wide && (buf % 8) ? 4 : 0;
        readEmAsmArgsArray.push(
          // Special case for pointers under wasm64 or CAN_ADDRESS_2GB mode.
          ch == 112 ? HEAPU32[((buf)>>2)] :
          ch == 105 ?
            HEAP32[((buf)>>2)] :
            HEAPF64[((buf)>>3)]
        );
        buf += wide ? 8 : 4;
      }
      return readEmAsmArgsArray;
    };
  var runEmAsmFunction = (code, sigPtr, argbuf) => {
      var args = readEmAsmArgs(sigPtr, argbuf);
      assert(ASM_CONSTS.hasOwnProperty(code), `No EM_ASM constant found at address ${code}.  The loaded WebAssembly file is likely out of sync with the generated JavaScript.`);
      return ASM_CONSTS[code](...args);
    };
  var _emscripten_asm_const_double = (code, sigPtr, argbuf) => {
      return runEmAsmFunction(code, sigPtr, argbuf);
    };

  var _emscripten_asm_const_int = (code, sigPtr, argbuf) => {
      return runEmAsmFunction(code, sigPtr, argbuf);
    };

  var getCFunc = (ident) => {
      var func = Module['_' + ident]; // closure exported function
      assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
      return func;
    };
  
  var writeArrayToMemory = (array, buffer) => {
      assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
      HEAP8.set(array, buffer);
    };
  
  var lengthBytesUTF8 = (str) => {
      var len = 0;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
        // unit, not a Unicode code point of the character! So decode
        // UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var c = str.charCodeAt(i); // possibly a lead surrogate
        if (c <= 0x7F) {
          len++;
        } else if (c <= 0x7FF) {
          len += 2;
        } else if (c >= 0xD800 && c <= 0xDFFF) {
          len += 4; ++i;
        } else {
          len += 3;
        }
      }
      return len;
    };
  
  var stringToUTF8Array = (str, heap, outIdx, maxBytesToWrite) => {
      assert(typeof str === 'string', `stringToUTF8Array expects a string (got ${typeof str})`);
      // Parameter maxBytesToWrite is not optional. Negative values, 0, null,
      // undefined and false each don't write out any bytes.
      if (!(maxBytesToWrite > 0))
        return 0;
  
      var startIdx = outIdx;
      var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
        // unit, not a Unicode code point of the character! So decode
        // UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description
        // and https://www.ietf.org/rfc/rfc2279.txt
        // and https://tools.ietf.org/html/rfc3629
        var u = str.charCodeAt(i); // possibly a lead surrogate
        if (u >= 0xD800 && u <= 0xDFFF) {
          var u1 = str.charCodeAt(++i);
          u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
        }
        if (u <= 0x7F) {
          if (outIdx >= endIdx) break;
          heap[outIdx++] = u;
        } else if (u <= 0x7FF) {
          if (outIdx + 1 >= endIdx) break;
          heap[outIdx++] = 0xC0 | (u >> 6);
          heap[outIdx++] = 0x80 | (u & 63);
        } else if (u <= 0xFFFF) {
          if (outIdx + 2 >= endIdx) break;
          heap[outIdx++] = 0xE0 | (u >> 12);
          heap[outIdx++] = 0x80 | ((u >> 6) & 63);
          heap[outIdx++] = 0x80 | (u & 63);
        } else {
          if (outIdx + 3 >= endIdx) break;
          if (u > 0x10FFFF) warnOnce('Invalid Unicode code point ' + ptrToString(u) + ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).');
          heap[outIdx++] = 0xF0 | (u >> 18);
          heap[outIdx++] = 0x80 | ((u >> 12) & 63);
          heap[outIdx++] = 0x80 | ((u >> 6) & 63);
          heap[outIdx++] = 0x80 | (u & 63);
        }
      }
      // Null-terminate the pointer to the buffer.
      heap[outIdx] = 0;
      return outIdx - startIdx;
    };
  var stringToUTF8 = (str, outPtr, maxBytesToWrite) => {
      assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
      return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
    };
  
  var stackAlloc = (sz) => __emscripten_stack_alloc(sz);
  var stringToUTF8OnStack = (str) => {
      var size = lengthBytesUTF8(str) + 1;
      var ret = stackAlloc(size);
      stringToUTF8(str, ret, size);
      return ret;
    };
  
  
  
  
  var UTF8Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder() : undefined;
  
    /**
     * Given a pointer 'idx' to a null-terminated UTF8-encoded string in the given
     * array that contains uint8 values, returns a copy of that string as a
     * Javascript String object.
     * heapOrArray is either a regular array, or a JavaScript typed array view.
     * @param {number=} idx
     * @param {number=} maxBytesToRead
     * @return {string}
     */
  var UTF8ArrayToString = (heapOrArray, idx = 0, maxBytesToRead = NaN) => {
      var endIdx = idx + maxBytesToRead;
      var endPtr = idx;
      // TextDecoder needs to know the byte length in advance, it doesn't stop on
      // null terminator by itself.  Also, use the length info to avoid running tiny
      // strings through TextDecoder, since .subarray() allocates garbage.
      // (As a tiny code save trick, compare endPtr against endIdx using a negation,
      // so that undefined/NaN means Infinity)
      while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;
  
      if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
        return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
      }
      var str = '';
      // If building with TextDecoder, we have already computed the string length
      // above, so test loop end condition against that
      while (idx < endPtr) {
        // For UTF8 byte structure, see:
        // http://en.wikipedia.org/wiki/UTF-8#Description
        // https://www.ietf.org/rfc/rfc2279.txt
        // https://tools.ietf.org/html/rfc3629
        var u0 = heapOrArray[idx++];
        if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
        var u1 = heapOrArray[idx++] & 63;
        if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
        var u2 = heapOrArray[idx++] & 63;
        if ((u0 & 0xF0) == 0xE0) {
          u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
        } else {
          if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte ' + ptrToString(u0) + ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!');
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);
        }
  
        if (u0 < 0x10000) {
          str += String.fromCharCode(u0);
        } else {
          var ch = u0 - 0x10000;
          str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
        }
      }
      return str;
    };
  
    /**
     * Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the
     * emscripten HEAP, returns a copy of that string as a Javascript String object.
     *
     * @param {number} ptr
     * @param {number=} maxBytesToRead - An optional length that specifies the
     *   maximum number of bytes to read. You can omit this parameter to scan the
     *   string until the first 0 byte. If maxBytesToRead is passed, and the string
     *   at [ptr, ptr+maxBytesToReadr[ contains a null byte in the middle, then the
     *   string will cut short at that byte index (i.e. maxBytesToRead will not
     *   produce a string of exact length [ptr, ptr+maxBytesToRead[) N.B. mixing
     *   frequent uses of UTF8ToString() with and without maxBytesToRead may throw
     *   JS JIT optimizations off, so it is worth to consider consistently using one
     * @return {string}
     */
  var UTF8ToString = (ptr, maxBytesToRead) => {
      assert(typeof ptr == 'number', `UTF8ToString expects a number (got ${typeof ptr})`);
      return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
    };
  
    /**
     * @param {string|null=} returnType
     * @param {Array=} argTypes
     * @param {Arguments|Array=} args
     * @param {Object=} opts
     */
  var ccall = (ident, returnType, argTypes, args, opts) => {
      // For fast lookup of conversion functions
      var toC = {
        'string': (str) => {
          var ret = 0;
          if (str !== null && str !== undefined && str !== 0) { // null string
            ret = stringToUTF8OnStack(str);
          }
          return ret;
        },
        'array': (arr) => {
          var ret = stackAlloc(arr.length);
          writeArrayToMemory(arr, ret);
          return ret;
        }
      };
  
      function convertReturnValue(ret) {
        if (returnType === 'string') {
          return UTF8ToString(ret);
        }
        if (returnType === 'boolean') return Boolean(ret);
        return ret;
      }
  
      var func = getCFunc(ident);
      var cArgs = [];
      var stack = 0;
      assert(returnType !== 'array', 'Return type should not be "array".');
      if (args) {
        for (var i = 0; i < args.length; i++) {
          var converter = toC[argTypes[i]];
          if (converter) {
            if (stack === 0) stack = stackSave();
            cArgs[i] = converter(args[i]);
          } else {
            cArgs[i] = args[i];
          }
        }
      }
      var ret = func(...cArgs);
      function onDone(ret) {
        if (stack !== 0) stackRestore(stack);
        return convertReturnValue(ret);
      }
  
      ret = onDone(ret);
      return ret;
    };
// End JS library code

function checkIncomingModuleAPI() {
  ignoredModuleProp('fetchSettings');
}
var ASM_CONSTS = {
  200270: () => { jsHandleIO(); },  
 200288: ($0, $1) => { hwSetPinValue($0,$1) },  
 200313: ($0) => { return hwGetPinValue($0) },  
 200342: () => { return Date.now(); },  
 200365: ($0, $1, $2) => { hwFlashWritePtr($0,$1,$2); },  
 200396: ($0) => { return hwFlashRead($0) },  
 200423: ($0, $1, $2) => { hwFlashWritePtr($0,$1,$2); }
};
function emscripten_memcpy_js(dest,src,numBytes) { var destHeap = new Uint8Array(Module.HEAPU8.buffer, dest, numBytes); var srcHeap = new Uint8Array(Module.HEAPU8.buffer, src, numBytes); destHeap.set(srcHeap); }
var wasmImports = {
  /** @export */
  emscripten_asm_const_double: _emscripten_asm_const_double,
  /** @export */
  emscripten_asm_const_int: _emscripten_asm_const_int
};
var wasmExports;
createWasm();
var ___wasm_call_ctors = createExportWrapper('__wasm_call_ctors', 0);
var _jshPushIOCharEvent = Module['_jshPushIOCharEvent'] = createExportWrapper('jshPushIOCharEvent', 2);
var _jshGetCharToTransmit = Module['_jshGetCharToTransmit'] = createExportWrapper('jshGetCharToTransmit', 1);
var _jshGetDeviceToTransmit = Module['_jshGetDeviceToTransmit'] = createExportWrapper('jshGetDeviceToTransmit', 0);
var _jsGfxChanged = Module['_jsGfxChanged'] = createExportWrapper('jsGfxChanged', 0);
var _jsGfxGetPtr = Module['_jsGfxGetPtr'] = createExportWrapper('jsGfxGetPtr', 1);
var _jsInit = Module['_jsInit'] = createExportWrapper('jsInit', 0);
var _jsIdle = Module['_jsIdle'] = createExportWrapper('jsIdle', 0);
var _jsSendPinWatchEvent = Module['_jsSendPinWatchEvent'] = createExportWrapper('jsSendPinWatchEvent', 1);
var _jsSendTouchEvent = Module['_jsSendTouchEvent'] = createExportWrapper('jsSendTouchEvent', 4);
var _jsKill = Module['_jsKill'] = createExportWrapper('jsKill', 0);
var _fflush = createExportWrapper('fflush', 1);
var _emscripten_stack_init = () => (_emscripten_stack_init = wasmExports['emscripten_stack_init'])();
var _emscripten_stack_get_free = () => (_emscripten_stack_get_free = wasmExports['emscripten_stack_get_free'])();
var _emscripten_stack_get_base = () => (_emscripten_stack_get_base = wasmExports['emscripten_stack_get_base'])();
var _emscripten_stack_get_end = () => (_emscripten_stack_get_end = wasmExports['emscripten_stack_get_end'])();
var __emscripten_stack_restore = (a0) => (__emscripten_stack_restore = wasmExports['_emscripten_stack_restore'])(a0);
var __emscripten_stack_alloc = (a0) => (__emscripten_stack_alloc = wasmExports['_emscripten_stack_alloc'])(a0);
var _emscripten_stack_get_current = () => (_emscripten_stack_get_current = wasmExports['emscripten_stack_get_current'])();


// include: postamble.js
// === Auto-generated postamble setup entry stuff ===

Module['ccall'] = ccall;
var missingLibrarySymbols = [
  'writeI53ToI64',
  'writeI53ToI64Clamped',
  'writeI53ToI64Signaling',
  'writeI53ToU64Clamped',
  'writeI53ToU64Signaling',
  'readI53FromI64',
  'readI53FromU64',
  'convertI32PairToI53',
  'convertI32PairToI53Checked',
  'convertU32PairToI53',
  'getTempRet0',
  'setTempRet0',
  'zeroMemory',
  'exitJS',
  'getHeapMax',
  'abortOnCannotGrowMemory',
  'growMemory',
  'strError',
  'inetPton4',
  'inetNtop4',
  'inetPton6',
  'inetNtop6',
  'readSockaddr',
  'writeSockaddr',
  'emscriptenLog',
  'runMainThreadEmAsm',
  'jstoi_q',
  'getExecutableName',
  'listenOnce',
  'autoResumeAudioContext',
  'dynCallLegacy',
  'getDynCaller',
  'dynCall',
  'setWasmTableEntry',
  'getWasmTableEntry',
  'handleException',
  'keepRuntimeAlive',
  'runtimeKeepalivePush',
  'runtimeKeepalivePop',
  'callUserCallback',
  'maybeExit',
  'asmjsMangle',
  'asyncLoad',
  'alignMemory',
  'mmapAlloc',
  'HandleAllocator',
  'getNativeTypeSize',
  'addOnInit',
  'addOnPostCtor',
  'addOnPreMain',
  'addOnExit',
  'STACK_SIZE',
  'STACK_ALIGN',
  'POINTER_SIZE',
  'ASSERTIONS',
  'cwrap',
  'uleb128Encode',
  'sigToWasmTypes',
  'generateFuncType',
  'convertJsFunctionToWasm',
  'getEmptyTableSlot',
  'updateTableMap',
  'getFunctionAddress',
  'addFunction',
  'removeFunction',
  'reallyNegative',
  'unSign',
  'strLen',
  'reSign',
  'formatString',
  'intArrayFromString',
  'intArrayToString',
  'AsciiToString',
  'stringToAscii',
  'UTF16ToString',
  'stringToUTF16',
  'lengthBytesUTF16',
  'UTF32ToString',
  'stringToUTF32',
  'lengthBytesUTF32',
  'stringToNewUTF8',
  'registerKeyEventCallback',
  'maybeCStringToJsString',
  'findEventTarget',
  'getBoundingClientRect',
  'fillMouseEventData',
  'registerMouseEventCallback',
  'registerWheelEventCallback',
  'registerUiEventCallback',
  'registerFocusEventCallback',
  'fillDeviceOrientationEventData',
  'registerDeviceOrientationEventCallback',
  'fillDeviceMotionEventData',
  'registerDeviceMotionEventCallback',
  'screenOrientation',
  'fillOrientationChangeEventData',
  'registerOrientationChangeEventCallback',
  'fillFullscreenChangeEventData',
  'registerFullscreenChangeEventCallback',
  'JSEvents_requestFullscreen',
  'JSEvents_resizeCanvasForFullscreen',
  'registerRestoreOldStyle',
  'hideEverythingExceptGivenElement',
  'restoreHiddenElements',
  'setLetterbox',
  'softFullscreenResizeWebGLRenderTarget',
  'doRequestFullscreen',
  'fillPointerlockChangeEventData',
  'registerPointerlockChangeEventCallback',
  'registerPointerlockErrorEventCallback',
  'requestPointerLock',
  'fillVisibilityChangeEventData',
  'registerVisibilityChangeEventCallback',
  'registerTouchEventCallback',
  'fillGamepadEventData',
  'registerGamepadEventCallback',
  'registerBeforeUnloadEventCallback',
  'fillBatteryEventData',
  'battery',
  'registerBatteryEventCallback',
  'setCanvasElementSize',
  'getCanvasElementSize',
  'jsStackTrace',
  'getCallstack',
  'convertPCtoSourceLocation',
  'getEnvStrings',
  'checkWasiClock',
  'flush_NO_FILESYSTEM',
  'wasiRightsToMuslOFlags',
  'wasiOFlagsToMuslOFlags',
  'initRandomFill',
  'randomFill',
  'safeSetTimeout',
  'setImmediateWrapped',
  'safeRequestAnimationFrame',
  'clearImmediateWrapped',
  'registerPostMainLoop',
  'registerPreMainLoop',
  'getPromise',
  'makePromise',
  'idsToPromises',
  'makePromiseCallback',
  'ExceptionInfo',
  'findMatchingCatch',
  'Browser_asyncPrepareDataCounter',
  'isLeapYear',
  'ydayFromDate',
  'arraySum',
  'addDays',
  'getSocketFromFD',
  'getSocketAddress',
  'FS_createPreloadedFile',
  'FS_modeStringToFlags',
  'FS_getMode',
  'FS_stdin_getChar',
  'FS_unlink',
  'FS_createDataFile',
  'FS_mkdirTree',
  '_setNetworkCallback',
  'heapObjectForWebGLType',
  'toTypedArrayIndex',
  'webgl_enable_ANGLE_instanced_arrays',
  'webgl_enable_OES_vertex_array_object',
  'webgl_enable_WEBGL_draw_buffers',
  'webgl_enable_WEBGL_multi_draw',
  'webgl_enable_EXT_polygon_offset_clamp',
  'webgl_enable_EXT_clip_control',
  'webgl_enable_WEBGL_polygon_mode',
  'emscriptenWebGLGet',
  'computeUnpackAlignedImageSize',
  'colorChannelsInGlTextureFormat',
  'emscriptenWebGLGetTexPixelData',
  'emscriptenWebGLGetUniform',
  'webglGetUniformLocation',
  'webglPrepareUniformLocationsBeforeFirstUse',
  'webglGetLeftBracePos',
  'emscriptenWebGLGetVertexAttrib',
  '__glGetActiveAttribOrUniform',
  'writeGLArray',
  'registerWebGlEventCallback',
  'runAndAbortIfError',
  'ALLOC_NORMAL',
  'ALLOC_STACK',
  'allocate',
  'writeStringToMemory',
  'writeAsciiToMemory',
  'setErrNo',
  'demangle',
  'stackTrace',
];
missingLibrarySymbols.forEach(missingLibrarySymbol)

var unexportedSymbols = [
  'run',
  'addRunDependency',
  'removeRunDependency',
  'out',
  'err',
  'callMain',
  'abort',
  'wasmMemory',
  'wasmExports',
  'writeStackCookie',
  'checkStackCookie',
  'stackSave',
  'stackRestore',
  'stackAlloc',
  'ptrToString',
  'ENV',
  'ERRNO_CODES',
  'DNS',
  'Protocols',
  'Sockets',
  'timers',
  'warnOnce',
  'readEmAsmArgsArray',
  'readEmAsmArgs',
  'runEmAsmFunction',
  'jstoi_s',
  'wasmTable',
  'noExitRuntime',
  'addOnPreRun',
  'addOnPostRun',
  'getCFunc',
  'freeTableIndexes',
  'functionsInTableMap',
  'setValue',
  'getValue',
  'PATH',
  'PATH_FS',
  'UTF8Decoder',
  'UTF8ArrayToString',
  'UTF8ToString',
  'stringToUTF8Array',
  'stringToUTF8',
  'lengthBytesUTF8',
  'UTF16Decoder',
  'stringToUTF8OnStack',
  'writeArrayToMemory',
  'JSEvents',
  'specialHTMLTargets',
  'findCanvasEventTarget',
  'currentFullscreenStrategy',
  'restoreOldWindowedStyle',
  'UNWIND_CACHE',
  'ExitStatus',
  'emSetImmediate',
  'emClearImmediate_deps',
  'emClearImmediate',
  'promiseMap',
  'uncaughtExceptionCount',
  'exceptionLast',
  'exceptionCaught',
  'Browser',
  'getPreloadedImageData__data',
  'wget',
  'MONTH_DAYS_REGULAR',
  'MONTH_DAYS_LEAP',
  'MONTH_DAYS_REGULAR_CUMULATIVE',
  'MONTH_DAYS_LEAP_CUMULATIVE',
  'SYSCALLS',
  'preloadPlugins',
  'FS_stdin_getChar_buffer',
  'FS_createPath',
  'FS_createDevice',
  'FS_readFile',
  'FS',
  'FS_createLazyFile',
  'MEMFS',
  'TTY',
  'PIPEFS',
  'SOCKFS',
  'tempFixedLengthArray',
  'miniTempWebGLFloatBuffers',
  'miniTempWebGLIntBuffers',
  'GL',
  'AL',
  'GLUT',
  'EGL',
  'GLEW',
  'IDBStore',
  'SDL',
  'SDL_gfx',
  'allocateUTF8',
  'allocateUTF8OnStack',
  'print',
  'printErr',
];
unexportedSymbols.forEach(unexportedRuntimeSymbol);



var calledRun;

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  _emscripten_stack_init();
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  writeStackCookie();
}

function run() {

  if (runDependencies > 0) {
    dependenciesFulfilled = run;
    return;
  }

  stackCheckInit();

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    dependenciesFulfilled = run;
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    assert(!calledRun);
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    Module['onRuntimeInitialized']?.();
    consumedModuleProp('onRuntimeInitialized');

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(() => {
      setTimeout(() => Module['setStatus'](''), 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var oldOut = out;
  var oldErr = err;
  var has = false;
  out = err = (x) => {
    has = true;
  }
  try { // it doesn't matter if it fails
    _fflush(0);
  } catch(e) {}
  out = oldOut;
  err = oldErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the Emscripten FAQ), or make sure to emit a newline when you printf etc.');
    warnOnce('(this may also be due to not including full filesystem support - try building with -sFORCE_FILESYSTEM)');
  }
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}
consumedModuleProp('preInit');

run();

// end include: postamble.js

